[{"hash":"7b5dd8a9761f2e02aa7f7046ed2df8bbdfcfa8df","date":"2015-08-21T21:27:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Initial commit\n"},{"hash":"ab252f011a3c2e3f7134086af44027fc736bf1d9","date":"2015-08-21T21:57:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added placeholder benchmark test\n"},{"hash":"2a9af2bcb241370a20bb47bebb72d4565f81685b","date":"2015-08-22T18:04:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use explicit zext to prevent implicit sign extension of 32-bit VM address into possibly negative offset from VM address space base\n"},{"hash":"ae8e727b68629aa994390459349775c8d8185ac4","date":"2015-08-23T12:13:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Track whether imported functions are ever called\n"},{"hash":"d7c6b8901a1f77b8050f4a923678373419e499e5","date":"2015-08-23T12:13:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Set the LLVM name for exported functions, and use that name to look up the function in the JITed module.\n"},{"hash":"76e463364ad3f5e4ed7e4155ae53cf6b0099588b","date":"2015-08-23T12:55:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Interpret cond opcode as a branching if-else instead of a select.\n"},{"hash":"1a2202d6442ffe85317aeda6a8d2356b4aa30458","date":"2015-08-23T13:11:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed command line usage text\n"},{"hash":"410c5c10326b64a327d94e8e7e595f9840e873a9","date":"2015-08-23T13:13:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Improve reporting of missing imports: report all of them instead of just one, and include the type.\n"},{"hash":"1c2e2dc6caa55d2d2a32905ec31d6bbb49395291","date":"2015-08-23T13:20:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Report timing in ms instead of us\n"},{"hash":"379c36be62e03324be0eed0a26afae30f6ec2fe5","date":"2015-08-23T15:18:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed while loop: was only checking the condition once before entering an infinite loop\n"},{"hash":"95ed2393a55fb046f6ffaa662b207490a72445c0","date":"2015-08-23T18:27:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed masking of indirect function indices\n"},{"hash":"bf9f3667ca94d2ca816589458131d787561d2857","date":"2015-08-23T19:59:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added a bunch of intrinsics imported by Emcripten-generated code\n"},{"hash":"e5281916fd6b5455b6614fe2e56d3ee5a608917f","date":"2015-08-23T20:04:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added a better benchmark. It works until it tries to convert the resulting double to a string, which fails for a yet-to-be-debugged reason.\n"},{"hash":"5446dcbaaec5d2f1bb94dd0087edeacc6d1004be","date":"2015-08-25T10:48:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split implicit and explicit label stacks into explicit break, explicit continue, implicit break, and implicit continue stacks. Fixes continue without label from within a switch.\n"},{"hash":"93c2733d43726f13153aee020cb00fd8e2e66139","date":"2015-08-25T10:49:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Throw instead of silently mishandling operations not yet implemented.\n"},{"hash":"f9e212a5e1169d51adfc6927f1f178a4753446cc","date":"2015-08-25T10:52:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use CreateInBoundsGEP instead of CreateGEP for addressing memory\n"},{"hash":"2f1669654425bba55373f7ec808d10c1f12e5d6d","date":"2015-09-06T01:37:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added support for parsing WebAssembly text files, and factored decoding and LLVM IR into two passes with an explicit AST in between\n"},{"hash":"f4e8df0ea0102a6ccaf8d8e704efe2afadcbfe54","date":"2015-09-07T22:32:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Upper the warning level, made warnings fatal, isolated a bunch of warning disables to just LLVM, and fixed the resulting warnings.\n"},{"hash":"15c5b2980458f9e129f01f5fa11eec891b815e53","date":"2015-09-07T22:38:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Upgrade to LLVM 3.7\n"},{"hash":"b716d3ddb6f4fa73eb293d52c591eaa88684e716","date":"2015-09-08T22:07:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed decoding binary F32->F64 promotion\n"},{"hash":"fed039cbc7ecc8f4c82c0dcb779e545c5f570075","date":"2015-09-08T22:14:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use realloc to resize a memory arena segment if the arena allocation being realloced fills the segment. Avoids memory blowing up when reallocing large arena allocations.\n"},{"hash":"148b33197fa5375149b6cadb1e6960744e97de9b","date":"2015-09-08T22:15:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Track amount of memory wasted by memory arena due to incompletely used segments, reallocs that can't be done in place, etc.\n"},{"hash":"6e4e05a3566781f771444a87cc30d7d1cf3198a4","date":"2015-09-08T22:16:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make Memory::ArenaArray double in size instead of grow one element at a time. Reduces pressure on reallocate\n"},{"hash":"090a3286f2011b0edfa730b85aef4e1a716cce95","date":"2015-09-08T22:19:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use lower case for type name strings\n"},{"hash":"d7a251132bb6db117b2db772773e7f4ea9dc7e92","date":"2015-09-08T22:21:30.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use ArenaString::shrink to return slack memory to the arena after parsing S-expression strings\n"},{"hash":"92d4eea96a0b1c25eda01eba954a34b58b2fecde","date":"2015-09-08T22:22:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Set function names for exported functions loaded from binary format\n"},{"hash":"05d7d4dc9641d53b9a3f2c085392081202d11b39","date":"2015-09-08T22:23:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Translate Tan/ACos/ASin/ATan/ATan2 from binary format to calls to imported intrinsic functions\n"},{"hash":"3413c14927b76ea1a9c8b2fa4f6e3e9f82b1bc8f","date":"2015-09-09T00:08:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed parsing floating pointer numbers too large to be stored in a 64-bit integer, and negative floats\n"},{"hash":"4a6343b695aadd75a0daedbc2dc5edfbce3a4f37","date":"2015-09-09T00:10:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added a few missing boolean operations\n"},{"hash":"168e41539b820dab300d25c8313827b35099b6f4","date":"2015-09-09T00:15:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added printer for WebAssembly text format. Not quite compatible with the spec interpreter (it exports bools, and I8/I16 expressions), and switches are broken.\n"},{"hash":"f88f81fbae0ff2892026b82ec21c91d56786e2d5","date":"2015-09-09T02:16:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed parsing of breaks to named labels from WAST\n"},{"hash":"1f2e706d1aa7923ef86f05d39661d46d2e70ab5d","date":"2015-09-09T14:56:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Some misc AST tweaks:\n- Replaced block with sequence, which is just a single void expression + result expression instead of multiple\n- Require switch arm values to be non-null, and loop branch targets\n- Don't use a TypedExpression for the value of StoreVariable, since it's implied by the variable type\n"},{"hash":"967ed63b0817ff0834cc1d029e0db2d371fc6dc4","date":"2015-09-09T15:02:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Renamed AST TypeId::Invalid to TypeId::None, meaning an expression that never terminates (branch or return).\n"},{"hash":"c20bc0be2f7d09379e483beeb2d23866acd46ecc","date":"2015-09-09T15:03:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add lowering pass on AST before it is written to WebAssembly text format. Currently only converts switches so the default arm is last.\n"},{"hash":"0dc647178fefff2eecfd6d5f2d61269f246cb8a8","date":"2015-09-09T15:14:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Moved polyfill tests\n"},{"hash":"e24b90e611504eb0928a9d50dbcdf534ab8272de","date":"2015-09-09T15:50:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Renamed LLVM basic blocks created for labels\n"},{"hash":"7c2b3ab29c12ac5d17d6b230a6a65ad2d1083203","date":"2015-09-10T17:46:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made call and local AST nodes take type class as a runtime parameter to make it easier to construct them with the right type class when they are parsed in a different type context (e.g. a call that returns i32 in a context expecting void).\n"},{"hash":"685aaf8436483af43ade30e04c83490176297863","date":"2015-09-10T17:48:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix bug in MapChildrenVisitor's default switch implementation that set arm keys to arm index instead of the correct key.\n"},{"hash":"cf609cbd0c4eebb961525823f018a702ad5b2537","date":"2015-09-10T17:49:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Reduce memory allocated for S-expression strings a little bit.\n"},{"hash":"c0ac18d79fd491a27d87821d86afc083b835f810","date":"2015-09-10T17:50:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed case missed by memory arena tracking of total allocated bytes\n"},{"hash":"b5eb4e1079492526d614fa5b8808a810984bd3c0","date":"2015-09-10T17:50:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix LLVM loop basic block names\n"},{"hash":"7db3d5e780ad401e4b948340f915d654d35419a0","date":"2015-09-10T17:51:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added text parsing of imported variables\n"},{"hash":"177fc702eb00ffd7d482dd2f27efc9fdb3f7d4ce","date":"2015-09-10T17:52:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Print float literal nodes as reinterpreted integers until float printing and parsing handles special values.\n"},{"hash":"b0fc9212cb1c17a4ba6208b0d49f37cf7beae523","date":"2015-09-10T17:55:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added labels for loop break/continue and switch break to the text format printing/parsing. Not yet part of the spec...\n"},{"hash":"9b82012a290924175b39b8938362b136a61ff79e","date":"2015-09-10T17:55:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add variable imports to the text format printer\n"},{"hash":"2cfeabcae6e558d61c53a89f251f406e646bbfa7","date":"2015-09-10T17:58:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Avoid creating superfluous label nodes when parsing the binary format, and fix an apparent bug in handling explicit label indices for continues.\n"},{"hash":"627a00948c77884c1ee9726694d33b400f7ff1fb","date":"2015-09-10T18:01:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added translation of Benchmark to text format\n"},{"hash":"0697dc2a7ae6a4d160e756d181e28bcb63041c6e","date":"2015-09-10T18:03:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't abort due to incorrect entry point type until after letting LLVM process the code.\n"},{"hash":"9b19805b234bf076cb0c344aa08289be9a2955b2","date":"2015-09-10T18:24:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Align memory arena allocations to pointer size\n"},{"hash":"596e8a93b4e02c1824b453c5aefc7daf01400d32","date":"2015-09-11T18:14:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix LLVM switches being generated with 0->default case\n"},{"hash":"9bb0fe8bb7b431685ec7ec10c4eba7f87b036521","date":"2015-09-12T13:42:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split CLI into Run and PrintWAST executables\n"},{"hash":"025c9ec8db8b2021fd71ebfe851f622fc33e40c2","date":"2015-09-12T13:45:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Throw a bunch of LLVM optimization passes in\n"},{"hash":"16434ebbb6c9fb5b1d11595d4cfa4eb614fca2bf","date":"2015-09-12T15:26:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made AST load/store operations match WebAssembly: supporting sext, zext, and wrap when loading integers.\n"},{"hash":"1185e5c2631430806f8a04456514dd9695617bd1","date":"2015-09-12T15:48:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split WAVM library up further into Core, AST, WebAssembly, and Runtime\n"},{"hash":"6ec84fb19e450908adfa33d6e41397320c4aac9b","date":"2015-09-12T17:58:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split data segments up into 32 byte chunks when printing WAST\n"},{"hash":"78941be6e10b7bb50e62597f1ce8690a7a787e65","date":"2015-09-12T18:01:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made SetVariable and Store expressions return the value being set/stored\n"},{"hash":"24bba12dc6fe1f93b8b69837f8d8e7b97823a5d9","date":"2015-09-14T21:50:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from spec repo\n"},{"hash":"ec81c459f4406e54d5bf368a2eaa7ce3d0e731a0","date":"2015-09-14T21:50:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed parsing text format breaks without an explicit label\n"},{"hash":"c0d9bb6cf57f0af11e297ba8a670c36f1809e022","date":"2015-09-14T21:52:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove call to addGlobalMapping for function imports I thought was needed, but was never used\n"},{"hash":"fe2ec56346e522a687376f39e95c2e803d32d254","date":"2015-09-14T21:52:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Strip the leading '$' off names parsed from WAST\n"},{"hash":"a1b7cb47a4e807dd88fe9ba64da5b2c188266efc","date":"2015-09-14T21:53:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed as<TypeClass>(expression) not asserting if expression is null.\n"},{"hash":"866cccadbda01ef0aaecd5111a149fcdcc9dff36","date":"2015-09-15T00:23:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added first pass at AST -> ASM.JS printer\n"},{"hash":"a2dfaaa382d6cf2b11d936f7d01a510b28ecacb5","date":"2015-09-15T11:35:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use uint8, uint16, etc instead of uint8_t, uint16_t, etc.\n"},{"hash":"a5f1ca0ae881946db3c8b21951eafdc59c3e5586","date":"2015-09-15T15:24:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replaced a bunch of operators from the polyfill binary format that aren't in WAST with intrinsics\n"},{"hash":"f29194a2cd3b8c3323137b5c8347192a5396bb01","date":"2015-09-15T17:10:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Renamed Memory.h/cpp to MemoryArena.h/cpp\n- Moved the declarations of the platform-specific virtual memory management functions into a new Platform.h, along with Mutex and Lock from Core.h\n- Moved VM memory management out of LLVMJIT and into Runtime/Memory.cpp\n- Made VM memory management allocate 4TB instead of 4GB, and align it to a 4GB boundary\n"},{"hash":"d7337ad1162bab5ce3b930d5d262d97b45f7e61c","date":"2015-09-15T17:17:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added hex literals to S-expression parsing.\n"},{"hash":"b55a416f898b2c1497b53f936ab0da881c2b758a","date":"2015-09-15T17:27:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed some generated ASM.JS that I accidentally checked in\n"},{"hash":"d0188f6ca14930e6356ddae4a38abe272e998279","date":"2015-09-16T01:16:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update memory ops to match those described by WebAssembly/design/AstSemantics\n"},{"hash":"45da8e5748c6c1a16f73a916a7c3f1a78de741a9","date":"2015-09-16T01:30:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use CMake for building\n"},{"hash":"75e31b1780774523a9fed0c7294634b69f4f0acb","date":"2015-09-16T01:30:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Run command using the wrong argument for function name in the case of -binary\n"},{"hash":"cf20327c815d020c8b1eeb6075e190b43c001ba5","date":"2015-09-16T01:31:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Disambiguated a few shadowed variables\n"},{"hash":"6e8dd41712585868c3e664f023f351d4ec8152b7","date":"2015-09-16T01:31:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added a timer for printing the .wast file\n"},{"hash":"551de9bc210cdf5288756ca059c32b00de2fd63c","date":"2015-09-16T11:12:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed some links in the readme\n"},{"hash":"7360c66fc38242b0535830201a57c7d9d90cf7a8","date":"2015-09-16T15:57:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Renamed the not, and, or, xor opcodes to bitwise* so they don't conflict with C++ keywords\n"},{"hash":"1ff4076454863b1d424e19fa6b3fd5d3388bcd81","date":"2015-09-16T16:03:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix various things GCC is more strict about than the MSVC compiler\n"},{"hash":"a46f54538e5806712d850a762e21f0263ebdd3b1","date":"2015-09-16T16:04:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added cross-platform THREAD_LOCAL define\n"},{"hash":"696a87d4f009fa6fad08e1ff91ca67b5083c359c","date":"2015-09-16T16:06:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Moved VM memory initialization out of LLVMJIT\n"},{"hash":"5682577821dc9da875cdd879f2b1feb142a1c01d","date":"2015-09-16T16:09:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use standard strcmp instead of stricmp for command-line arguments\n"},{"hash":"dc7f50ff51d2fab58d6774dd813bae8bd37af53a","date":"2015-09-16T16:13:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Support building on POSIX: build scripts, and platform-specific code\n"},{"hash":"018d882355b074e0730c144bfb500aadbd015ff5","date":"2015-09-16T17:06:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added Travis build scripts\n"},{"hash":"6b18947f50c920345f20e9a020cc47831198e817","date":"2015-09-16T17:23:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Second try at getting Travis working...\n"},{"hash":"04502e0983b5c23d4e84fe0af1533714221c7461","date":"2015-09-16T17:26:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Trying to fix permissions on Travis scripts\n"},{"hash":"539d76c4b8d4123dfeb857caa1a0b17fcc3fd4d5","date":"2015-09-16T17:28:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Force the Travis build to run in a VM so we can sudo to install LLVM\n"},{"hash":"1009254789a164cc335f197018507e8eaf1aa73b","date":"2015-09-16T18:01:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try to fix install-llvm.sh error in Travis build: include ppa for libstdc++ backport\n"},{"hash":"9b24b0defeb143922206c822d1ff8a1ed0ef2945","date":"2015-09-16T18:03:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix permissions ahhh\n"},{"hash":"65bbd3796e164845a503ac0fba6779a4951accd6","date":"2015-09-16T18:10:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around Travis's CMake not supporting target_include_directories\n"},{"hash":"fb87ca8920f5a98a3eabca636a53b6fc555de158","date":"2015-09-16T18:22:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"More workarounds for old Travis CMake version\n"},{"hash":"7f1449dff80667582b08119bded059210e782259","date":"2015-09-16T18:42:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try using Travis apt functionality to install both LLVM and a newer GCC version\n"},{"hash":"b89d7c878a982393bae3bed6ab65b98bddef526d","date":"2015-09-16T18:43:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Tabs -> spaces\n"},{"hash":"bc47cc452eb8514f80750c71bd10d3c7dde1e1bf","date":"2015-09-16T19:20:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use GCC 4.8 to build on Travis\n"},{"hash":"905f0ff28bf34f1f230246bf466cafd17e0359d3","date":"2015-09-16T19:23:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make Travis build both release and debug\n"},{"hash":"5bde34a6039dd32ccc4e8bbfc6e3af5da364c6ec","date":"2015-09-16T19:27:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Travis-era CMake not having PUBLIC flag in target_link_libraries command\n"},{"hash":"218fa883f931eeb7ad4bc1bdfb1bee7f0998d6b6","date":"2015-09-16T19:33:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added missing Travis dependency\n"},{"hash":"4052b40892d9709a636571a46ee0241c88253df1","date":"2015-09-16T19:58:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"get rid of travis/install-llvm.sh and move travis/script.sh into root\n"},{"hash":"9d7ae02b6332173788e1083a82714d00ff718cbd","date":"2015-09-16T20:05:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix line endings\n"},{"hash":"bffe6d30372e4b36d35d4561a06c3efec0f30fb7","date":"2015-09-16T20:55:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add support for MacOS+clang\n"},{"hash":"564175eca29baffdc8c103cbeb1e1ec8abb067e4","date":"2015-09-16T21:31:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix compileLiteral so it works on platforms other than MacOS\n"},{"hash":"d0f43d15ad183e9c11cc18d63e99b818ce24191f","date":"2015-09-16T21:31:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't do Travis MacOS builds for now\n"},{"hash":"4bf30e12d36abca868451acb5f0362e2b7b1dd8a","date":"2015-09-16T21:38:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated readme\n"},{"hash":"8f67cfc2a0eb205882007f127a4c5a24050c2c6e","date":"2015-09-17T11:21:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"neq -> ne to match the spec\n"},{"hash":"c59cb99195274b45f8607667a9aa8a67995babc1","date":"2015-09-17T12:57:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated .gitignore to accomodate CMake build subdirectory\n"},{"hash":"7a88e66bacbace520e38ce712c3baea8bebd2d11","date":"2015-09-17T13:02:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge LLVMJIT.h into Runtime.h\n"},{"hash":"113aec569a605c1769af0094679e3ab8c4e235ff","date":"2015-09-17T14:44:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Moved CLI.h to Programs\n"},{"hash":"92be82eb6565a28d2a9f29f5d80e4b743ed5b600","date":"2015-09-17T17:34:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix zext being compiled as sext!\n"},{"hash":"6811af7983b7707a34607e0411b46b989def7afa","date":"2015-09-17T17:36:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added Test program that evaluates assert_eq directives in spec interpreter test files\n"},{"hash":"2a49ec57adc82be9f10fd7bcb43f9425afa2c092","date":"2015-09-17T17:39:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed accidentally committed code\n"},{"hash":"0e5dbd4a1b23393cf5242c5b0743ddc3d5cb6239","date":"2015-09-17T17:43:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added a 'typename' for GCC+clang\n"},{"hash":"35f3555deb9c8d323593840cc72b380456182e64","date":"2015-09-17T19:18:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added tests to CMake scripts, and run them from the Travis build\n"},{"hash":"c2f7c6c51f93cfd9851c7c54eb61b4bb144a23f6","date":"2015-09-18T14:02:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge fix from JSStats to polyfill binary decoding of I32 literals\n"},{"hash":"f91e0f73b792abea2db890d5e14fd4243b983450","date":"2015-09-19T12:00:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix parsing hexadecimal numbers with a preceding sign\n"},{"hash":"cfca3efb46eb95b004da966dfee3061d9d302e79","date":"2015-09-19T12:12:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed globals to match the spec\nWebAssemblyBinary translates ASM.JS globals into data segments in instance memory, and imported global variables into imported getters and setters\n"},{"hash":"40e6c6ef010e7a33a7f77d7e0ac2755d4fca4fa4","date":"2015-09-19T13:39:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Give imports and intrinsics a module name\nLook up intrinsics by decorated name, which includes both module name and type\n"},{"hash":"9461519c196a85f8172c4650aec9e7ac9bfebe6d","date":"2015-09-19T13:40:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from WebAssembly/spec\n"},{"hash":"3c01c455278b26c46bff6aabeb593bda070068e0","date":"2015-09-19T17:32:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a blank line at the end of the file to make GCC happy...\n"},{"hash":"227fbd359c8941acb69abd4e3c2e6682c9ef85d9","date":"2015-09-20T18:41:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement resize_memory, memory_size, and page_size\n"},{"hash":"6844f3cd5adbc32025696a0dceab2421f206635e","date":"2015-09-21T15:53:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made Core and Runtime into DLLs\n"},{"hash":"2779c8765fd5acf963d248f9b999d53915decc3f","date":"2015-09-21T18:01:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix .so compilation on GCC\n"},{"hash":"8ed81ff808502da4a9fbb02eb2629cd9c59414f4","date":"2015-09-21T19:19:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made the rest of the libraries into DLLs\n"},{"hash":"897e3fa13c1e59be120f8693ed7500e55dac3809","date":"2015-09-21T19:35:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Finish my conversion from intXX_t to intXX\n"},{"hash":"6032aa73370e4392303afe0e2983fe879e604d70","date":"2015-09-21T22:00:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Switch to new ORC JIT API\n"},{"hash":"ee55f61d4fd648b0f2d36f1b64c1a01bb2cdff09","date":"2015-09-21T22:04:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix non-MSVC compile error\n"},{"hash":"5573514ee1132ac8f8a8c9c5c23647570ea20c52","date":"2015-09-21T22:06:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix another non-MSVC compile error\n"},{"hash":"19b2133cc0ff08fd931348cba7e359cb12ebf220","date":"2015-09-22T11:30:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replace use of deprecated LLVM getDataLayout with createDataLayout\n"},{"hash":"4da18584e815fb3d1cda3382e12458c43e59d12e","date":"2015-09-22T11:56:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move some common code in Run and Test into RuntimeCLI.h\n"},{"hash":"5dcb5e083f98668f4e84f7c8d9bd6d1b725117b9","date":"2015-09-22T14:22:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement explicit alignment directives on loads/stores\n"},{"hash":"06c9892bf7d4c8ec83d82215b48ef8b905dd1de2","date":"2015-09-22T17:16:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement printing aligned loads/stores\n"},{"hash":"a83b3449b96c470245d3f9f838d9d1c2297ae5b1","date":"2015-09-22T17:16:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix the binary decoding using the local type instead of the memory type as the load/store alignment.\n"},{"hash":"720a2d03ec5ac246f0171e19d15902ac30e849c3","date":"2015-09-22T18:40:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed global address size detection in binary decoder\n"},{"hash":"0a2de3ed0521056ca08f1b39c17e27f4aab3ef2f","date":"2015-09-22T18:41:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed float comparisons not having the correct behavior with NaNs\n"},{"hash":"ebbdbfc7ecc41952609a5319fd410007186d6e11","date":"2015-09-22T18:42:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed LLVM dump that I accidentally checked in\n"},{"hash":"dbe262a36658de1b52d5b78d9a7eaf5c26a0269c","date":"2015-09-22T21:55:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests\n"},{"hash":"f79b7ce58a5209aee93b670c7ad7a59830dfa339","date":"2015-09-24T12:33:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split LLVMJIT into LLVMJIT and LLVMEmitIR\n"},{"hash":"020a5e58f96ba74e76345699501361d0fd0fa151","date":"2015-09-24T12:38:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"std::make_unique -> llvm::make_unique\n"},{"hash":"1e59c1124e378c279ff7b7c6ad35fb84be8afed1","date":"2015-09-26T12:32:46.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"* Round up the requested number of bytes to vmSbrk to at least maintain double float alignment.\n\nSome code assumes these are aligned, and this helps maintain alignment.\n"},{"hash":"8393d0176915e64bd3840fcfbe6b42cadbc5a5a6","date":"2015-09-26T17:26:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #1 from JSStats/align-sbrk\n\nRound up the requested number of bytes to vmSbrk to at least maintain double float alignment."},{"hash":"3a199c60ff04941d6398b48923b09316bb0921dc","date":"2015-09-26T22:45:23.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Newlines at eof of files.\n\nMakes life easier using some tools.\n"},{"hash":"fd263a64d14ddffd57f6152db028018256839ad4","date":"2015-09-27T02:33:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #2 from JSStats/eof-nl\n\nNewlines at eof of files."},{"hash":"5095647422dc341534ebdea956088ca9a11d5a74","date":"2015-09-27T07:15:10.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Implement Emscripten _memcpy_big.\n"},{"hash":"9ec415d8d3d4c0f76568fa9a16d4fb90e3a98fe4","date":"2015-09-29T11:41:23.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Bounds check memcpy_big.\n"},{"hash":"64399c52ee70cd42b4675d0c82485274a6fea87c","date":"2015-09-29T13:42:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #3 from JSStats/memcpy_big\n\nImplement Emscripten _memcpy_big."},{"hash":"2a0d46e23c5e5b46f5b5b78acc55c28dc0f4bf8f","date":"2015-09-29T14:01:35.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Fix the memcpy_big bounds checks.\n"},{"hash":"e9a2474b3b706ff7fa0af4ab007a0fc4b7f45675","date":"2015-09-29T14:04:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #5 from JSStats/memcpy_big_fix\n\nFix the memcpy_big bounds checks."},{"hash":"bc0a0db56d2a878f8b54995237880a5c18fe21c1","date":"2015-09-29T17:49:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added stack walking on Windows:\nUses Windows SEH unwinding information to unwind the stack\nHacks around limitations of the LLVM COFF runtime loader to get usable SEH unwinding information for JIT compiled code\nStubbed in for POSIX\n"},{"hash":"d12a17a97ba23ab2f6dadd4d9b43e37aa0597fc9","date":"2015-09-30T00:40:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix using vmSbrk to free memory\n"},{"hash":"ca25431b3f9ee50a91e34f46b7ee8a8837c9b936","date":"2015-09-30T03:06:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Switch S-expression number parsing to just use C-compatible number parsing.\nHandles exponents, and (should) handle binary and hexadecimal floats.\n"},{"hash":"2d6d0e5b836cee9889a7ad0e3105e93946be1657","date":"2015-09-30T03:08:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a platform-independent integer overflow exception cause\n"},{"hash":"0b5f49f6c4c86d03e7fccd30ce66bfd7051f5939","date":"2015-09-30T03:10:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle WebAssembly rem_s -> LLVM IR correctly: don't trap if the divide would overflow!\n"},{"hash":"a1a362e95a6d3e35a803aebce170dc1c3ca34e4d","date":"2015-09-30T03:11:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle WebAssembly shifts -> LLVM IR correctly: shifts >= the operand bit width yield 0 (or -1 for shr_s of a negative number).\n"},{"hash":"3ffda807900db645b9b1ff954742544ab963fd7a","date":"2015-09-30T03:12:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed address sizes in converted Benchmark/a.out.wast\n"},{"hash":"27d10ee8465b1a06de7513ac296c26d95d8ebbc4","date":"2015-09-30T03:15:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from spec interpreter\n"},{"hash":"7a46d5ce12fd47caa3e9e81c126ffbfdc2697356","date":"2015-09-30T03:17:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove unused variable\n"},{"hash":"2ccde89cbeb8e5e0e4349528f6688188a497577c","date":"2015-09-30T11:45:26.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Define Emscripten syscall146 for writev, and a few other stubs.\n"},{"hash":"ea4ab69c721d1e3b6ecc6df3c276f7ccc75117ed","date":"2015-09-30T11:45:26.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Rework to use the native writev, ensuring the write is atomic.\n"},{"hash":"eb0395ed7ecba59021cf3b98e0e4a5b3b4b6a8ad","date":"2015-09-30T11:45:26.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Add header file.\n"},{"hash":"5911f7c5de5aa48c89dcf21609e812172005dba5","date":"2015-09-30T11:45:26.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Minor structure cleanup.\n"},{"hash":"6d43530504fddfbebfb8e2e8d65f2cd2e1e82a6c","date":"2015-09-30T11:45:26.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Attempt to emulate writev for Windows.\n"},{"hash":"9b9d2c38363ac8a3eceb95f020a0524c6c2a121d","date":"2015-09-30T11:45:26.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Don't include uio.h on Windows.\n"},{"hash":"338589fdc5d904802cbbd5fe17c4b6c4590ef8ca","date":"2015-09-30T11:52:06.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Add the zlib benchmark.\n"},{"hash":"46154fed3d5465b24231314c0c4dc9c4436da1b6","date":"2015-09-30T12:00:28.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added converting loads/stores for i64\n"},{"hash":"ec64ae6587d7487e36172ee3d25b4bce7b1ed0dd","date":"2015-09-30T12:04:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #4 from JSStats/emscripten-intrinsics-writev\n\nDefine Emscripten syscall146 for writev, and a few other stubs."},{"hash":"37254bbb7b7c7737daf720cff5bf71ff755b74e1","date":"2015-09-30T12:12:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix MSVC compile errors\n"},{"hash":"d9b5fbb477a5b9d5ddbb59ab4af7fcb280c0dfe6","date":"2015-09-30T12:13:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Moved zlib benchmark into its own folder\n"},{"hash":"5c3ae45a5bc7cd1a8a78cb5caaed4eddab7bcca8","date":"2015-09-30T12:27:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add bounds checking to writev, and updated bounds checking in fwrite to not assume the address space is 4GB.\n"},{"hash":"e927a6a776fd64cd2727e2896e9c6e15b24424f3","date":"2015-09-30T12:28:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use vmFile in writev so that when it works the fd parameter will be used\n"},{"hash":"bbb5e6a1f8980dafe268fac53516f312b8a3cd7f","date":"2015-09-30T12:34:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix writev compile error on POSIX\n"},{"hash":"bb0571c1e721327a9b57262af0972d2dddb508aa","date":"2015-09-30T12:40:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made writev bounds checking also check the buffer pointers, and in the POSIX version as well.\n"},{"hash":"de062fa1a09347697fe82b6df960067cc9b03180","date":"2015-10-03T06:35:03.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Replace use of getDataLayout() which is deprecated in llvm 3.8 by createDataLayout().\n"},{"hash":"3b02fe95d2e65bd3afb6cfa2bafe0a4041a3bbb6","date":"2015-10-03T12:26:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #7 from JSStats/createDataLayout\n\nReplace use of getDataLayout() which is deprecated in llvm 3.8 by createDataLayout()."},{"hash":"f870a2be870854d08dd1d3ebcd7b52123ebf5f53","date":"2015-10-03T12:46:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Ensure that there's a guard page at the end of the instance memory sandbox to catch unaligned loads/stores that straddle the end of the address-space.\n"},{"hash":"734be7130d63908e96099afcccc7aa060877f6d6","date":"2015-10-03T12:46:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Turn hardware exceptions for access violations, stack overflow, divide by zero, and integer overflow into a C++ Runtime::Exception that can be caught by code that calls into the runtime.\n"},{"hash":"d4933a96cb3dfd945cfd6721f015cbe33b812161","date":"2015-10-03T12:46:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a runtime boxed value, and use it to pass parameters to, and return values from runtime compiled functions.\nRefactor assertions to use runtime values instead of generated code to invoke functions\nCatch runtime exceptions (only on Windows initially) and return them from invoked functions as a runtime value\n"},{"hash":"d998cea74c2403683580d3200b6e96727a2b9858","date":"2015-10-03T12:48:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed reference to deleted header from CMakeLists.txt\n"},{"hash":"f6527bd40a2f941350e3179675cbc6784edc3051","date":"2015-10-03T12:52:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add default case to make Clang/GCC happy.\n"},{"hash":"9bf3453188f533d0429451da7d65729a86dccd5a","date":"2015-10-03T12:55:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix POSIX compile error\n"},{"hash":"b774c1cf21ab8eb722dea300b0b97c00e00cc985","date":"2015-10-03T12:56:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from spec interpreter (extension change -> .wast)\n"},{"hash":"e25bb1a4ab476316c0cc98023bb00bcdb8e45c60","date":"2015-10-03T13:23:14.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"On Linux also check dlsym when resolving a symbol address.\n"},{"hash":"2317b98ac923c9d3b1bfa22ac37a9e310d8b1423","date":"2015-10-03T13:23:14.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Use llvm's SearchForAddressOfSymbol() to find symbols addresses.\n"},{"hash":"97ce19a90990c0bea21a932cad6326a2c07ba213","date":"2015-10-03T15:23:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #8 from JSStats/dlsym\n\nOn Linux also check dlsym when resolving a symbol address."},{"hash":"beea84c70e67b70fa37e2a029cc3ddfe79f92e3d","date":"2015-10-03T20:59:10.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Address or workaround 32-bit build issues.\n"},{"hash":"88be3778cdcd72f3ec7acd20b7c5256c17b0763f","date":"2015-10-04T00:32:51.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Rework to avoid pre-processor condition code.\n"},{"hash":"4d853f2acdb05680468eea3b684ff5152488b2be","date":"2015-10-05T00:57:05.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Handle 'far addresses' on 32 bit runtimes. Address space max-bytes must be power of two.\n"},{"hash":"9a4b6c50c428fa175713ac7f768d8fb2c6d545b2","date":"2015-10-05T11:42:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #6 from JSStats/32bit\n\nAddress or workaround 32-bit build issues."},{"hash":"cdb90eb7fb5022ab874c0680bdcdfdd334233842","date":"2015-10-05T12:58:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix warning about 32-bit shift on MSVC\n"},{"hash":"4ff992ea194dd024edc70221719652cd4c40fb51","date":"2015-10-05T12:59:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix creating redundant imports for intrinsics parsed from WAST file\n"},{"hash":"cf4a98c839b4c7e777b50250d828d031a9a95338","date":"2015-10-05T13:01:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added missing #include for MacOS\n"},{"hash":"2d39523f369e07a667271c54e862a341a684ce2b","date":"2015-10-05T13:02:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Ignore errno==ERANGE produced by std::strtod, since on Linux/MacOS it occurs for denormals that are otherwise parsed correctly\n"},{"hash":"136d8ebe3c9e76b3619ba0d378913879e5ecb2cc","date":"2015-10-05T13:03:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix MacOS nullptr->bool coercion error\n"},{"hash":"216634b3a1120ad8d3b5fa7694cf28d0a1245de8","date":"2015-10-05T13:12:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't define our own _SC_PAGE_SIZE, since it's actually defined on MacOS\n"},{"hash":"15391b6c90da4dad5568583bd71fbce5543a2888","date":"2015-10-05T13:16:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Turn POSIX signals for segfaults and integer divide by zero into runtime exceptions\n"},{"hash":"296ca2214ac127e2d3812838b1d201c1057bd621","date":"2015-10-05T13:17:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed commented out code\n"},{"hash":"3dbab213dd3c651388a0908f925b75b316b1d54a","date":"2015-10-05T15:46:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't use the floating-point invalid operation exception to catch overflow on conversion for now\n"},{"hash":"f53b24bb04c3ac23f847dda5827ef71307e0af76","date":"2015-10-05T15:47:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Ensure that memory_size is a multiple of page_size (as long as the Emscripten sbrk intrinsic isn't used)\n"},{"hash":"84da60e1be58eb67dcbe726878cc2831e70fbd09","date":"2015-10-05T17:37:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated spec interpreter tests\n"},{"hash":"a7ca770a6a90834e7f3b9327b83f83f3dfc5e33f","date":"2015-10-07T18:35:03.000Z","author":{"name":"orthographic-pedant","email":"travis.hoppe+orthographicpendant@gmail.com"},"message":"Fix typographical error(s)\n\nChanged concensus to consensus in README.\n"},{"hash":"c7de6809616babdaa72425e3e086c026a7228f94","date":"2015-10-07T18:38:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #9 from orthographic-pedant/spell_check/consensus\n\nFix typographical error(s)"},{"hash":"327e46e290e45b9c5d33ae24801069e10616f635","date":"2015-10-07T20:24:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix fXX.ne to return 1 if either operand is a NaN\n"},{"hash":"71ff422f862339ad5c174f74a748ed80a360aafa","date":"2015-10-07T20:27:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Propagate NaNs through fXX.min/max as expected by WebAssembly\n"},{"hash":"2f99b9a67a0cf37cd83e52082ff44c0225891253","date":"2015-10-07T20:33:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"- Implement hexadecimal float parsing, as the MSVC std library doesn't have it\n- Implement NaN and infinity parsing\n- Implement printing hexadecimal floats, and print NaNs and infinities in the same format the S-expression parser can handle\n"},{"hash":"184967157cc693af8dad71409d156a9a4f4cdd8e","date":"2015-10-07T20:34:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"assert_eq -> assert_return, and add assert_return_nan\n"},{"hash":"95d67b4f61c3977425add9ee489f27433649cef9","date":"2015-10-07T20:40:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests\n"},{"hash":"4f870cf35faf157015928c3a1b4b153caf5fa293","date":"2015-10-07T20:45:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix format specifier\n"},{"hash":"33e8c0b691ca41eed4e735b8e233d9118c6b4c34","date":"2015-10-07T20:47:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix formatting specifier\n"},{"hash":"bd05fbe9a9afa98989ff13382058b09ccf0dea22","date":"2015-10-07T20:49:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix formatting specifier\n"},{"hash":"04ad81dc4612119294cb0e6b3f8780c5ba369396","date":"2015-10-07T20:53:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add parentheses to get rid of GCC warning\n"},{"hash":"c4902a5f8c3ae29f62571f9fbf5cecb3e3675447","date":"2015-10-07T21:01:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't distinguish between integer divide by zero and signed integer overflow until I figure out how to distinguish the two on POSIX\n"},{"hash":"88ca51d5cd413411b377fb2996b5e79f27de265a","date":"2015-10-07T21:12:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make fXX.min/max handle -0 vs +0 correctly by calling minnum/maxnum intrinsics after testing for NaN\n"},{"hash":"15dd5ab594bf1f17bfffafd5827cdcb0ab7e62d7","date":"2015-10-07T22:54:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Just call out to some C++ functions to implement the float min and max according to the WebAssembly spec.\n"},{"hash":"67faa2e117e78db7755feed7ad81b2ab84f19e41","date":"2015-10-08T11:25:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Just print NaN significand hexits manually to avoid using the not-quite-portable %lx format specifier\n"},{"hash":"eed5970e0a7da30165c6aed8ee8edd112f75a1d1","date":"2015-10-08T14:20:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"The rest of the fXX.min/max change\n"},{"hash":"3dd5ace64acac53a1d79367584ba97efd066ce41","date":"2015-10-08T14:28:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add C++ intrinsics for iXX.trunc_<u/s>/fXX to mimic the spec interpreter behavior\n"},{"hash":"763fefaa20a5b92046923704ad7da0eb355ee31a","date":"2015-10-08T14:34:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix POSIX compile errors\n"},{"hash":"f9a7a54b938fb7642d1f321fd517293d12fd2a4b","date":"2015-10-08T15:02:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use INT32_MIN instead of INT_MIN\n"},{"hash":"d48ae889ceeb32e00b095715fc015c2c72ea3e00","date":"2015-10-08T20:20:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Recover from stack overflow nicely on Windows\n"},{"hash":"2c3b1c0bf0f3aa31829da3281b8d88c19b2f9c40","date":"2015-10-08T20:21:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update spec interpreter tests\n"},{"hash":"85298cd0e907678d379dd5eb1f50b6a6bde631c7","date":"2015-10-08T21:59:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implemented recovery from stack overflow on POSIX\n"},{"hash":"1e8aafab6a4993333fc99ee29f6326abd0625c8b","date":"2015-10-09T13:37:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Reserve more stack space for handling stack overflow exceptions\n"},{"hash":"1ff9336daabfabc727e186fd4e2272321ae84d0c","date":"2015-10-09T14:45:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Got rid of a lot of optimization passes that weren't producing any benefit\n"},{"hash":"fb7df9c8b5c6a78fb26d50f791fd2582603d4613","date":"2015-10-10T15:02:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix JIT on MacOS\n"},{"hash":"99fab39a74ee4eaf9962f3e845e3fa5a690f1a38","date":"2015-10-10T15:05:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle SIGBUS as MacOS seems to signal it for at least some bad memory accesses\n"},{"hash":"0f296bbec59d8fa8fd743270f4df795ca895b9cc","date":"2015-10-11T13:20:52.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Fix a 'comparison between signed and unsigned' compilation error.\n"},{"hash":"94a63fa57d7abe64bf3ecc63a86e4e2dd7082633","date":"2015-10-11T13:45:30.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #13 from JSStats/compsign\n\nFix a 'comparison between signed and unsigned' compilation error."},{"hash":"e7d05f693dad9fb9970a0b95e4367838ae232c94","date":"2015-10-26T16:52:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't promote -0 to a float -0.0\n"},{"hash":"49b3561351e82e31f20d4e019bedf3335a73313d","date":"2015-10-26T16:56:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Explicitly detect and trap on integer divide by zero to ensure LLVM can't eliminate divides that may trap as \"dead\".\n"},{"hash":"1da5861e4907adfa8f9951735c1366941acfdc8d","date":"2015-10-26T16:56:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle uppercase 0X hexadecimal numbers\n"},{"hash":"0ded038f38efe6b9d880bf7a33ee296e715bf569","date":"2015-10-26T16:57:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Mark loads/stores of instance memory as volatile to ensure LLVM can't eliminate them as \"dead\" when they may trap.\n"},{"hash":"6ff18ec31c96e1c882139e874cc24b4a4010b84e","date":"2015-10-26T17:36:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Support invoking 4 parameter functions\n"},{"hash":"d5863685fafd80b08439001857e0302ad5fe94d8","date":"2015-10-26T17:37:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Give block nodes a label\n"},{"hash":"0f0364ff4d94f053d82a1238d05f5825c0a26c86","date":"2015-10-26T17:42:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make assert_return's expected value optional\n"},{"hash":"957430d6e240b696813452f0d2cc18ecbd5108b0","date":"2015-10-26T21:02:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Parse -0x0p... as a float so it keeps its sign\n"},{"hash":"1bf5047712e4b4d478e50f34c5c7a0b5e23fa2a4","date":"2015-10-26T21:02:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"resize_memory -> grow_memory\n"},{"hash":"792fbe8efcf24cae8d3faa1c8f3fa0d9b8bbd8b8","date":"2015-10-26T21:36:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add has_feature\n"},{"hash":"28e57dbf61126c185c660d2c609071e52eb22daf","date":"2015-10-27T00:31:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make .wast tests resolve imports the same as the spec interpreter: from the last module\n"},{"hash":"45e43c6976920c4ff87907cb0e6f7f02490f9b00","date":"2015-10-27T19:13:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow void expression sequences to be empty\n"},{"hash":"9e837dc086cf99626d7998a3646dbb99ac09cbce","date":"2015-10-27T19:21:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add S-expression attribute parsing: turn x=y into a two-child subtree using an Attribute type for the parent node instead of Tree.\nAdd offset to load and store operations\nParse align=x and offset=y attributes for load and store operations\n"},{"hash":"779a64af520110ae68edcc2d745f793d1d8f0da1","date":"2015-10-27T19:22:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix stores evaluating their value before the address.\n"},{"hash":"f36714ac43aa407fbc19884cb24275f60ee2521c","date":"2015-10-27T19:22:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add stdio.print function for testing\n"},{"hash":"fedb7fe480c946337d3e9c3888510329cdc3a8d8","date":"2015-10-27T19:36:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests\n"},{"hash":"0c1cfe474e47a3c216a7c235109a952cb07e8392","date":"2015-10-27T19:40:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang/gcc compile error\n"},{"hash":"5dc5879ff00d7e7a3f1cbb642aeb28cf60f78a32","date":"2015-10-27T19:43:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang/gcc compile error\n"},{"hash":"f59793e6c85d5d9da38b9d909d31dba31e330102","date":"2015-10-27T19:47:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang/gcc compile error\n"},{"hash":"9418e723481c53c7eac247850fd6a6f17c21a6c5","date":"2015-10-27T19:52:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang/gcc compile error\n"},{"hash":"130673c63d6879424f86dcebe3cf4e046f87393c","date":"2015-10-27T19:57:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang/gcc compile error\n"},{"hash":"68bf3a53787a087b722868352b62457bad594354","date":"2015-10-27T20:18:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix grow_memory page_size alignment exception\n"},{"hash":"f35c5d11c7770f014fb14c4ed3304d689094d57a","date":"2015-11-06T13:03:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix crash when parsing a call_import to a malformed named import\n"},{"hash":"bd3c4e6316a3f974e132f45d3ad886acbcd65073","date":"2015-11-06T13:06:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix crash when parsing invoke/assert_return/assert_returnnan/assert_trap that has no child nodes\n"},{"hash":"7c3b5aadd3d99a9ad9ec12a913717999452181d9","date":"2015-11-06T13:29:30.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove accidentally checked in fragment of function type parsing changes\n"},{"hash":"32c1169ec8109fc8ed4406ef11d7ad80fc04f641","date":"2015-11-06T13:30:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix crash when parsing .<something that isn't a number>\n"},{"hash":"992d1fb3bc3598126437ceddbb355e5060c7fd87","date":"2015-11-06T20:09:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix bounds checking table index against number of functions instead of number of tables\n"},{"hash":"5eaa69e28537b996a7aed14efb1963539f2dc6fc","date":"2015-11-06T20:11:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Catch OOM in the binary parser (most likely due to malformed binary) and print a nice error message; mostly to make afl-fuzz ignore these cases.\n"},{"hash":"620601a3662ce795246d1a14f8e87c6371ad327f","date":"2015-11-16T21:24:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix occasional errors on Windows caused by LLVM loading different sections of a JITed object more than 2GB apart in the address-space\n"},{"hash":"e63fe32271670281c3e53957115d8d1e64960740","date":"2015-11-23T20:27:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed hex float printing (printed k-p instead of a-f)\n"},{"hash":"a1d54aa360f4559777f6710d3d4a6d11c72bf792","date":"2015-11-23T20:36:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added unreachable pseudo-operation\n"},{"hash":"7338fa60b40e424db0e5282f11171000d6548194","date":"2015-11-23T20:36:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update nan syntax to match ml-proto: nan:0x... instead of nan(0x...)\n"},{"hash":"6d195f1ce89779e15979900ba223c058bfc1c9cc","date":"2015-11-23T21:07:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"break -> br\n"},{"hash":"efe4aa4a77ca4a3be8f3eacad8dcd464d70f1262","date":"2015-11-23T21:11:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added select operation; doesn't match ml-proto yet because it isn't explicitly typed\n"},{"hash":"eb9b18b8ac4d81a30c6aafa55c14caaeced459bc","date":"2015-11-23T21:12:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove implicit branch from end of loop to beginning to match ml-proto semantics\n"},{"hash":"f09d43ea508fc2093ebd99fa47ffacf43d510b8a","date":"2015-11-23T21:17:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Switch to WebAssembly's new(old) wrapped shift count semantics\n"},{"hash":"7ead88af16f7b233f9968f5317d82c5a3ee287f7","date":"2015-11-23T21:20:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make fXX.(min|max) convert NaNs to QNaNs before returning them (to match spec)\n"},{"hash":"fee42cc56570b4443048cbd8812c63ba7087b053","date":"2015-11-23T21:23:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Parse newly distinct WebAssembly \"if\", \"if_else\", and \"br_if\" opcodes. These currently just map to IfElse nodes in the internal AST.\n"},{"hash":"dd4665c88d658e4bf9f44b98fd1e08f9986ab6bc","date":"2015-11-23T21:32:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated expected error messages for WAST tests to match the latest ml-proto\n"},{"hash":"c06f4e870571039fb6c39a0a9c9e3922d12eb0d8","date":"2015-11-24T21:55:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add stdio print functions used by new spec tests\n"},{"hash":"f3264f9766667e8be510cfcf52712737a3bca273","date":"2015-11-27T14:58:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implemented heterogeneously-typed function tables, and tableswitch\n"},{"hash":"c494f88993ab63e8dc7bb870bb67f3681ee5d732","date":"2015-11-27T14:58:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement ceil, floor, trunc, nearest as intrinsic functions that turn signaling NaNs into quiet NaNs to match the spec\n"},{"hash":"2d0719c06d7735af5297f421a9d0906f48a251e1","date":"2015-11-27T14:58:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow non-normalized hex float literals\n"},{"hash":"977cfd8d9e01390e9a19facbed5f527777067292","date":"2015-11-27T14:58:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some indentation broken by an automerge\n"},{"hash":"94d736987dfb5126c11ab087da5d435ccf547731","date":"2015-11-27T14:58:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add BranchIf operation that is strict in its argument\n"},{"hash":"582d7b4579e3c9e11fba644b038fae72fc1e0e8c","date":"2015-11-27T14:58:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make one loop label name = continue, and two = break continue\n"},{"hash":"77b8f7f2fa744758934d5a0cf7fc80d7a428e28b","date":"2015-11-27T15:07:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove now unused opType variable\n"},{"hash":"15dd87be194f4cb6c21b5b5500e7a03b32001e3e","date":"2015-11-30T17:03:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix bug that didn't get triggered on MSVC: using a vector after moving it.\n"},{"hash":"0c119679290802dab2852058e4e2b4aa662839e6","date":"2015-12-06T22:16:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed proof-of-concept ASM.JS printer\n"},{"hash":"7e96039fe20724e967cd2bc04efc79bb7e051b02","date":"2015-12-06T22:20:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Reduce the number of AST function tables to 1 table/module\nMerge function tables from polyfill-prototype-1 binaries into 1 table/module\nUpdate WAST printer to correctly print the function type declarations, and reference them in call_indirect\nInstead of masking function indices in call_indirect, do an explicit bounds check\n"},{"hash":"eaf5d6a17c0e399ae08ee8074fde38285a5af0c5","date":"2015-12-11T16:34:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove some superfluous code\n"},{"hash":"7f078ab174adae0493cf180eed3ef598c3895b6c","date":"2015-12-11T16:43:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"\"stdio\" intrinsic module -> \"spectest\"\n"},{"hash":"e4626269c17a9f59c50494cc419795bc173e522e","date":"2015-12-11T16:52:47.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed WAST label nodes. Internally the AST still uses Label nodes, though.\n"},{"hash":"dd14c7826b4c3d83b131873289f173a8a0778f59","date":"2015-12-11T16:53:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merged whitespace changes from the spec tests\n"},{"hash":"6e5cac51192b6cf57edf0278cee4c4ce676234cf","date":"2015-12-19T05:36:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some comment typos\n"},{"hash":"62be227b194bf4ca699595642e88f751b96ced15","date":"2015-12-19T05:36:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some tabs that got converted to spaces\n"},{"hash":"a9a6532fd37b63ac85c7430384d0718e16ce2c7f","date":"2015-12-23T23:32:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update Emscripten intrinsics for compatibility with the Binaryen asm2wasm conversion path\n"},{"hash":"9882765da2bd16596d30bba351ab606db61188aa","date":"2016-01-05T16:45:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Optimize uses of std::map<string,...> to use std::map<const char*> with early-out binary comparison rather than using strcmp.\n"},{"hash":"8699c7a61140f40f1b85b4056f54487e4600a06b","date":"2016-01-14T02:34:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Some S-expression parser optimizations\n"},{"hash":"a05b7fcacacd163a95f1ba632ddbf2fc5b56d5cf","date":"2016-01-14T02:45:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed GCC compile error\n"},{"hash":"d8095daac793bd51d4e4528637263c6fa480ddfd","date":"2016-01-14T02:51:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"ebb1566068569a0391cf138df62e84b27ea43154","date":"2016-02-16T15:42:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add module start function\n"},{"hash":"23e301ea9fa40ba2c0479beb3b979ab8c8e0e11c","date":"2016-02-16T15:45:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Change order of br_if operands\n"},{"hash":"3908c21f06ce54e3246e5f1b2b40e6dd76be6926","date":"2016-02-16T15:45:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix integer literals starting with 0 being parsed as octal\n"},{"hash":"7ecf540ac0cfa7702a627033aec8d8df69d8c1ff","date":"2016-02-16T15:46:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Ensure that a single llvm::GlobalVariable is created for each unique import, to work around LLVM mangling non-unique names\n"},{"hash":"9a06e59635102399bc6c8aa0c45474fe2ee52804","date":"2016-02-16T15:48:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Parse select with explicitly typed opcode to match the spec interpreter, and update the operand order to put the condition last.\n"},{"hash":"94b2aeadfbf276e5d9b81209d6e185b9ea47dbca","date":"2016-02-16T15:49:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix error in comment\n"},{"hash":"a9b0feb066e8d7740e23361790b52b272866abea","date":"2016-02-16T15:49:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"8fcf13eccc7b7221351c006aed0dbcc6c7cd963a","date":"2016-02-25T03:30:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove `has_feature` opcode\n"},{"hash":"c2ceebb231c9aafd0bbba042a9114d64a8687ac4","date":"2016-02-25T03:32:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove error for shadowed label names\n"},{"hash":"ceb49fbc443807945e79c79f9b0453172ea20c22","date":"2016-02-25T03:35:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make `grow_memory` return an I32\n"},{"hash":"d1d3150d7040c681310dc5e86e632c19cff4df37","date":"2016-02-25T03:41:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle \"exporting\" of memory by doing nothing\n"},{"hash":"4424d3614f562257b26c66741318cc7eb812a3b4","date":"2016-02-25T03:43:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Normalize hexadecimal floats that start with a zero but are within the normal range of a float\n"},{"hash":"b0594b71006f5b2953b42e48af89e0341c0f0f1f","date":"2016-02-25T03:44:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make Test handle .wast files that contain no modules\n"},{"hash":"052472e5737a3f06da7da501d46368b71cf24f4c","date":"2016-02-25T14:48:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use David Gay's strtod implementation to avoid bugs in libc strtod\n"},{"hash":"cfce872eb37fce6832843521620d79c2e0b43321","date":"2016-02-25T14:51:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from spec repo\n"},{"hash":"50d256cb7dc81d0cc25fcabb978183e5cb64810f","date":"2016-02-25T15:06:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try to fix clang error about ignoring GCC warning it doesn't have\n"},{"hash":"8129c81e385c4871e9992e437476343d18687992","date":"2016-02-25T15:22:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try again to fix clang error\n"},{"hash":"ce446e3a310ec31fbc70e917d0b4e20130c95330","date":"2016-03-01T15:58:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Reverted select operation to being parametric now that it's parametric in the spec implementation\n"},{"hash":"3264ffb37543d34fb0e27f988a5ac8804e225219","date":"2016-03-01T15:59:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from spec repo\n"},{"hash":"454e8ac9e5315cc37583fa28b89e592eaba01afa","date":"2016-03-15T13:35:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix compiling on VS2015\n"},{"hash":"e726ecf3641f10b501a7b95305291469b1a69705","date":"2016-03-15T14:34:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"tableswitch -> br_table to match the spec\n"},{"hash":"fdaecb01d28992da95dd5519b385baf70d32441c","date":"2016-03-15T15:10:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated if to match the spec\n"},{"hash":"253f42fa7c297887055f04bf3d9516f977539240","date":"2016-03-15T15:10:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't create a new LLVM basic block when entering a label node\n"},{"hash":"cc32b2608829e5da8b9d8e720d3afe78d0e79537","date":"2016-03-15T15:44:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Parse module memory size as page count instead of byte count\n"},{"hash":"ccb4d1b06f47d8b5baca7790d50a7d3e4816b6bf","date":"2016-03-15T15:45:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec\n"},{"hash":"5c20cd9e845dbd1cbe4a2de7a476574a6c48bd2d","date":"2016-03-15T15:48:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add missing typename to fix GCC compile error\n"},{"hash":"77575fbd39a7400c5ed9ff1c3862f992de39b1e0","date":"2016-03-15T16:00:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix GCC warning about signed-unsigned comparison\n"},{"hash":"94c21a262a9893b5ba4d89c219b816e418540286","date":"2016-03-15T16:09:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add support for new rotl, rotr, and eqz operations\n"},{"hash":"62aee62c3c7a66bd20cc1b24fab13f63c23db731","date":"2016-03-15T16:14:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix how legacy binary parser allocates static memory for globals\n"},{"hash":"6ae1e88cfc47c073ddc533922e8e3173578e4d1d","date":"2016-03-15T16:27:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Improved AST->WAST printing\n"},{"hash":"538e58eccd79c850f6f710fe0847f7d1457579b1","date":"2016-03-16T00:46:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"The OSX libc defines uintptr_t to be a long where uint32/uint64 are int. This causes uintptr/uint64 to be treated as distinct types for e.g. overloading.\nWork around it by defining our own uintptr/intptr that are always int type.\n"},{"hash":"6a5cd265475f0c528eb486572ebf79b83e9cc19e","date":"2016-03-16T00:46:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix maybe-uninitialized warning\n"},{"hash":"706dd69dcd69b4f94088d4d9b1ec89121f73a820","date":"2016-03-16T00:48:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Enable Travis CI on OSX\n"},{"hash":"7405a4021d6f49cff45d305ef517c0a177a87807","date":"2016-03-16T12:20:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update readme\n"},{"hash":"0bb70180dcede58a6bf19026381bf0e375bd605c","date":"2016-03-16T17:57:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge IfElse and Select expression class into Conditional class with multiple opcodes\n"},{"hash":"1add97c215f783e8d4397f0bf215cadf48bfebab","date":"2016-03-16T18:33:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add missing typenames for non-MSVC\n"},{"hash":"7cc5013b861048ce91b2eee991c9f6079d52365e","date":"2016-03-17T15:23:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove boolean type\n"},{"hash":"c00331e215fe63251f80b38ffd9e734a614506d2","date":"2016-03-17T15:42:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update wast dumps of zlib/Benchmark tests\n"},{"hash":"9ccb1dc347a7821ed19ec94e68aa5b23c57b25fe","date":"2016-04-14T20:23:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed reference to PrintASMJS command from README.md\n"},{"hash":"e305022dd517f0e88c8801631bad12dfdbab42dc","date":"2016-04-14T20:23:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Updated tests from spec\n"},{"hash":"e402d511c15534927e249ea6f64cfb8d2295c835","date":"2016-05-05T13:07:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix compile warning on VS2015 update 2\n"},{"hash":"962d8d2baa77603482d523b02f540e628afa8a59","date":"2016-05-05T23:31:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed superfluous #include\n"},{"hash":"0e851f112ea4844905dd3654ef1a540b168d74d4","date":"2016-05-05T23:32:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update README to specifically point out that you need to build LLVM from source on Windows\n"},{"hash":"2206685f87cfffe79a48fbbbef232851223049b2","date":"2016-05-05T23:38:30.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"memory_size -> current_memory, and make grow_memory and current_memory work in units of pages\n"},{"hash":"15c3af3d98c6325aeb69657a1f5bcc6e97b6271d","date":"2016-05-05T23:41:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"- Make br_if and br_table accept void-typed expressions as the value passed to the branch target\n- Make br_table allow targets with void parameters alongside targets that expect a parameter\n"},{"hash":"28937b4385fcce517b87491212c90bbe23a35810","date":"2016-05-05T23:41:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"1e566eea66ff3e87e88fc719052cf6dddefc6e62","date":"2016-05-09T10:59:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"6d7a75a3357982177c59381e0b0391def6598631","date":"2016-05-18T18:53:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle parsing function definitions which include a name to export the function as.\n"},{"hash":"6367dc71e13eaef91b3e14cb2c0fee0212e95e55","date":"2016-05-18T18:53:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around inconsistent use of \"unreachable\" vs \"unreachable executed\" in spec tests\n"},{"hash":"8169d32b1d655f859c2394010184728a79835b59","date":"2016-05-18T18:53:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec\n"},{"hash":"476b3f088b8029d77792e0e8ec5d90b2e1e13020","date":"2016-06-21T01:29:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add an implicit function return branch target\n"},{"hash":"28448238832ee32b18d021f4272f3401e65eac10","date":"2016-06-21T01:31:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix parsing negative zero FP constants that don't include a decimal point or exponent.\n"},{"hash":"2e67cdb99e7d7285092f862e09de83bd7fd9925b","date":"2016-06-21T01:33:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle invoking functions with 6 parameters (increased from 4). This is limited by the combinatorial explosion in template instantiations necessary. A better approach is needed.\n"},{"hash":"ed0f545499e0a0f969c62457c40a3d10a8d7f752","date":"2016-06-21T01:35:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix br_table which has a branch in its value or index subexpressions (or anything else that might cause the br_table to never be executed).\n"},{"hash":"32addfabaef3eb0f7aa937749ba1e6ed9cfbc0f5","date":"2016-06-21T01:37:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow br_table operations that provide an argument to their target to target branch targets that don't expect one.\n"},{"hash":"62d6a16945ec26d21b7fed3ff4e55243e84fb5a0","date":"2016-06-21T01:37:28.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"9402c34efbdfd1e65d8ddbf8dd641a4700cffc88","date":"2016-07-09T19:44:58.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"When a function returns a value output it.\n"},{"hash":"adcdc9a1d5588d1c3f36f866a21926ad27a20807","date":"2016-07-10T13:26:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #15 from icefox/output\n\nWhen a function returns a value output it."},{"hash":"35734be243ff91516c170d1ebf1b6ed5b8130211","date":"2016-07-10T13:32:50.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Used delete[] rather than delete when allocating with new[]\n"},{"hash":"9777aeecdcb33f1afdbe64ddfb8a6e7e75fbfe88","date":"2016-07-10T13:38:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #16 from icefox/allocation_warning\n\nUsed delete[] rather than delete when allocating with new[]"},{"hash":"a483f03513f68406b20039466ffc8b9362d27c5e","date":"2016-07-10T15:46:54.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Improve error message when initial memory size > maximum\n"},{"hash":"9b1fc78d8719e28d0414b78763e1f754bf4166f0","date":"2016-07-10T17:19:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #18 from icefox/error_msg\n\nImprove error message when initial memory size > maximum"},{"hash":"69b704a0ddb9079eed89e38b7a3c1943a000e1ab","date":"2016-07-10T23:45:33.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Pass the correct node to recordError during memory parsing errors\n\nA node might be a valid int, but not allowed.\n"},{"hash":"b5138fa17648474ad0873947066c3c34d45ad33c","date":"2016-07-11T19:05:51.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Remove std::move that would prevent copy elision and cause a build warning with clang\n\n[-Werror,-Wpessimizing-move]\n"},{"hash":"93cb94690261c85ab6379c6f1136777da78dd8be","date":"2016-07-13T12:40:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #20 from icefox/memory_node\n\nPass the correct node to recordError during memory parsing errors"},{"hash":"798af134841ef5ff0125f0777918350e30d041b3","date":"2016-07-13T12:41:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #21 from icefox/clang_warnings\n\nRemove std::move that would prevent copy elision and cause build warnings with clang"},{"hash":"aedf0ad6ae2404d757fb7fcac071d55ae70846b0","date":"2016-07-13T23:33:55.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Include more information when there is errors loading files\n"},{"hash":"9c423a380b659e90d243766d641c705beff7a7b6","date":"2016-07-14T00:06:06.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Include the file name in error messages\n"},{"hash":"7a831f51dbf88fff69d18e73ef6af45460ee8763","date":"2016-07-14T01:14:15.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Include source and location in wast error output\n\nThe following error now is followed by two lines showing the line from the source file\nthat contain the error and the column where the error is at.\n\nError parsing WebAssembly text file:\ntest.wast:4:13: initial memory size '1' must be <= maximum specified memory size '0'\n  (memory 1 0\n            ^\n"},{"hash":"c88009370f4c1834f2d112d24157981a960701b9","date":"2016-07-14T01:42:52.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"When creating Nodes of type String set startLocus correctly\n"},{"hash":"98da2d9552c3a2c6b586facc541c8de478427636","date":"2016-07-14T02:33:30.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add details to text parsing error messages\n"},{"hash":"a43c6bf0857a08bdf1e5594f0ba9b955be270ce9","date":"2016-07-14T15:54:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #23 from icefox/startLocus_string\n\nWhen creating Nodes of type String set startLocus correctly"},{"hash":"823513e65f683eb8d870403a0909759c9d47d10e","date":"2016-07-14T15:57:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #22 from icefox/error_msgs\n\nImprove error messages"},{"hash":"e704b8a15c29b6ff31fc676fe239742f7ed924f4","date":"2016-07-14T15:59:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #19 from icefox/filename_errormsg\n\nInclude the file name, text line and column in error messages"},{"hash":"1ecf6599753b40a5db76a8a751591dcdc1ac967a","date":"2016-07-14T16:24:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some VC compile warnings\n"},{"hash":"2507bf8415b28a7e5627106229895a2525ce641e","date":"2016-07-14T17:44:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Detect integer constants that don't fit into 32 bits properly\n"},{"hash":"9f3440da8183761051698d9a2256a0fb12c2480c","date":"2016-07-14T17:45:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"8011026457c9044fc9261d84c560b04a0fc15e30","date":"2016-07-14T23:46:01.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Fix the start location of each line in a file\n"},{"hash":"3955af2f1b3b464ee2917f5fb0e1b52b242986c7","date":"2016-07-15T01:55:11.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add segment offset validation against previous element\n\nThe start offset is required to be greater than the index of any byte in the linear-memory space that will be initialized by a prior element in the array.\n"},{"hash":"8e7f449ce7d584d4115623d539708108d9b843cb","date":"2016-07-15T02:54:05.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Improve error reporting around memory\n\n- Improve wording\n- Include data where valuable\n- Pass correct nodeIt for the each error\n"},{"hash":"9d63524fd79e90525981a4834d541fa677ab909c","date":"2016-07-15T04:49:47.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Report an error if param or result declaration occur when they shouldn't\n\nTest: (module (func (local i32) (param i32)))\n"},{"hash":"d286fd29228141c85b450e3127d2e395e683de68","date":"2016-07-15T10:34:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #25 from icefox/linestart\n\nFix the start location of each line in a file"},{"hash":"29930999340b0fa2fa234adcf5c5ff0c41908671","date":"2016-07-15T10:36:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #24 from icefox/segment_check\n\nAdd segment offset validation against previous element"},{"hash":"771a610bb8669912a35aa15e2e0b1593b8c1fd4a","date":"2016-07-15T12:09:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Switch to LLVM 3.8\n"},{"hash":"a9a6788fbebc7b8abcfecffe4e3ca3c2b5c1023e","date":"2016-07-15T12:17:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Generate a thunk for each WebAssembly function that passes arguments and return value in a memory block.\nThis eliminates the template-based invoke that precompiled a variation for every function type with up to 6 parameters.\n"},{"hash":"76677feaa4145456b0ae622568b88a808957e544","date":"2016-07-15T12:21:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #26 from icefox/func_dec_error\n\nReport an error if param or result declaration occur when they shouldn't"},{"hash":"f34136b5cf683a0fd6f063a910f7c8416e96b32d","date":"2016-07-15T23:53:45.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Enable tests that are supposed to fail to make sure proper validation is done\n"},{"hash":"9b4bee11d162e0d5a745dd99a79727e40188b8ae","date":"2016-07-16T14:11:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #27 from icefox/enable_fail_tests\n\nEnable tests that are supposed to fail to make sure proper validation is done"},{"hash":"c7c17d6f4009c91db6bfce28c3aa0273f3a61166","date":"2016-07-17T16:40:43.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add validation around invalid br_if offset or labels\n"},{"hash":"080a473b5c6000ad42887cc2e6774eddee170bba","date":"2016-07-18T11:30:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #29 from icefox/br_if-validation\n\nAdd validation around invalid br_if offset or labels"},{"hash":"434ece3628caccfceafbabb8faac536de379cdd7","date":"2016-07-19T01:23:05.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add validation check for duplicate export names\n"},{"hash":"99409f6c51cdba8af2251c495931f96a78b662f9","date":"2016-07-20T00:20:53.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add validation for exporting memory\n"},{"hash":"185ef022b96ab38685c1ba134e8e2a986b40a08c","date":"2016-07-20T10:42:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #28 from icefox/duplicate_export\n\nAdd validation check for duplicate export names"},{"hash":"66c1ef58377ca2708441c17e22d2208792bd1a54","date":"2016-07-20T10:42:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #30 from icefox/export_memory\n\nAdd validation for exporting memory"},{"hash":"ca3a683443a31d450dcd2dc121f0f2f7a8c441dc","date":"2016-07-20T12:25:56.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add type check when parsing br_if\n"},{"hash":"9071ee4db53d0de6d30a88b49f44b9038a8eec8e","date":"2016-07-22T12:17:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #31 from icefox/br_if\n\nAdd type check when parsing br_if"},{"hash":"bb26f03f657177cf19cacbc79ac7e6bdec377dfb","date":"2016-07-24T13:44:42.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add support for parsing assert_invalid\n\nThis enables a number of checks in the existing spec tests that\nwere wrapped in assert_invalid.\n"},{"hash":"8b53dd8fe8624ffe19b9396d3fb05249d63b3a9b","date":"2016-07-24T13:44:42.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Remove memory size limitation tests which are not part of the spec\n\nThe spec says the size limitation is up to the implementation.\n\nWAVM has a limit of (1ull<<32) while the spec tool has a limit of (1ull<<16)\n"},{"hash":"3c2bfb3057eb2a9f58c92b2e6d34bed7d97f94cb","date":"2016-07-24T13:52:36.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Spelling fix\n"},{"hash":"6c3fbd230a32e0d6aac3b15d2383737f88efd644","date":"2016-07-24T13:52:44.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add space between words in error message\n"},{"hash":"7784214b379d25503fd416977c487adc3c774db2","date":"2016-07-24T13:54:51.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Improve max page size error message\n"},{"hash":"4e98cd8c9fc915f37054e9639617d793dffb64b9","date":"2016-07-24T14:00:40.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Change exit code to be consistent with EXIT_FAILURE/EXIT_SUCCESS\n"},{"hash":"2a3c0e21815248d753b9abc4956698b2ffa510ef","date":"2016-07-25T12:59:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #32 from icefox/assert_invalid\n\nAssert invalid"},{"hash":"48c98aa97eb12e933dfbf52450987d94a84e628b","date":"2016-07-25T12:59:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #33 from icefox/exit\n\nChange exit code to be consistant with EXIT_FAILURE/EXIT_SUCCESS"},{"hash":"859924c54d70284c4c761aa086bc31e8055649b8","date":"2016-07-25T13:01:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #34 from icefox/minor\n\nMinor"},{"hash":"e242f0c0a1f0557f2e9434e4560f21010ed5ba00","date":"2016-07-25T16:50:50.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add fread to EmscriptenIntrinsics so programs can read from stdin\n\nfwrite is already implemented, so now programs can read from stdin and write to stdout/stderr\n"},{"hash":"0c259fca22792e5f2299a4fc7168fe84e8b36553","date":"2016-07-25T16:50:56.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Rework fwrite bounds check to prevent bypass via overflow\n"},{"hash":"32e5ac72feaf778b2866980cdbefcff05c358c80","date":"2016-07-25T19:07:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #36 from icefox/fread\n\nAdd fread to EmscriptenIntrinsics so programs can read from stdin"},{"hash":"ab86d2111fca38146e39efa0f35b55eda449335e","date":"2016-07-25T19:08:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix test failures printing assertion locations as <filename><line>:<column> instead of <filename>:<line>:<column>\n"},{"hash":"05c5f11f36c8d8becbbe3024ea7acb27328b11fe","date":"2016-07-25T23:40:17.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Move various timers behind WAVM_TIMER build time defined variable\n"},{"hash":"b4c4de8a40ff4d0d6e959e2abbca32ad6a9a0162","date":"2016-07-26T01:21:08.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Improve windows allocateVirtualPages error reporting to match posix implementation\n"},{"hash":"b8222157dd8b2741006ffa7621680584e4c2f69c","date":"2016-07-26T03:56:40.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Output information about errors during SExp::parse\n"},{"hash":"a9fec0435c0a5bfdfc2ae1a0b8ef53d91551f157","date":"2016-07-26T04:13:13.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Correct FatalParseException error message with correct found value\n"},{"hash":"8e068b79b2841855724944eb93f849548fb87f82","date":"2016-07-26T11:05:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #35 from icefox/timer\n\nTimer"},{"hash":"7e9f41c2b2e2e5db67bef82db2f2042f1b121b47","date":"2016-07-26T11:06:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #37 from icefox/winAllocError\n\nImprove windows allocateVirtualPages error reporting to match posix implementation"},{"hash":"0ce0c48ef7e8b18d8e35c8a1de541e737b5114ed","date":"2016-07-26T11:12:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #38 from icefox/sexp_parse_error\n\nOutput information about errors during SExp::parse"},{"hash":"cdb864751892e7d5812accf1b8889a17b73b34b7","date":"2016-07-26T11:14:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Windows compile error\n"},{"hash":"3b4780fc0bed704b1dbe7c359fa3567f83dd37dd","date":"2016-07-26T11:52:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move parse error locus printing to CLI.h\n"},{"hash":"3429ac2008ed984c09a2bb19412cdf0a78495228","date":"2016-07-26T11:53:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Pass through all root-level S-expression parse errors through the WebAssembly text parser\n"},{"hash":"0fd4af762281b1250ed791882573877b8c7edc61","date":"2016-07-26T11:53:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix block comment parsing\n"},{"hash":"f3373ff5296897bdfe9629e1b0c7e84095038bfe","date":"2016-07-26T11:53:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some uses of ; instead of ;; for line comments\n"},{"hash":"b8cfe9fa8c6a7b2f77b879244bd59493c0684528","date":"2016-07-26T12:16:59.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Exit when the function can't be found rather than nesting\n\nFollow the existing pattern of the source in the file to immediately exit on failure\n"},{"hash":"d846875e9b025c83d353265688999f44949cdc51","date":"2016-07-26T12:16:59.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Remove parameter size check which invokeFunction also does\n"},{"hash":"acbdbd35965d0c79b7b2ec7eb438b8e41ee7f5da","date":"2016-07-26T12:16:59.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Move timer code closer to its actual use\n"},{"hash":"d608a58867d548ddd2a9115b053138bd4e7e4ac6","date":"2016-07-26T12:16:59.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Remove duplicate init failure error message\n\nIf Runtime::init fails any error condition will already have outputted a more detailed message to stderr\n"},{"hash":"1c62bf53d8e5e789d9e37e3033a0c17d800c5ca2","date":"2016-07-26T12:17:00.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Change exit code to be consistent with EXIT_FAILURE\n"},{"hash":"83fbb4129cb093a77e1a303d7e99b316d6a37b1d","date":"2016-07-26T18:03:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #39 from icefox/refactor\n\nRefactor"},{"hash":"f1184f011931e4da0df14c9c941e3ccf7db3107d","date":"2016-07-26T18:04:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made S-expression parser use same name syntax as WebAssembly spec.\n"},{"hash":"cec72d4e7dfaf751b068769ff362e7d8e66b8566","date":"2016-07-27T14:45:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix mapping of IP to function name in callstacks\n"},{"hash":"550a0ab8582384f487cc61ea28e7fdcfb37573a1","date":"2016-07-29T16:17:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use backtrace and dladdr on Linux to produce symbolic callstacks\n"},{"hash":"413c5259855612723cdac6571022ee63b4ae2e2b","date":"2016-07-30T04:06:54.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Introduce 'wavm' to execute WebAssembly command line programs.\n\n$wavm echo.wast Hello World!\nHello World!\n\nwavm takes a program as an argument (optionally text or binary) and executes\nthe function 'main' by default.  If main takes arguments wavm will pass in any\nextra arguments in the standard argc, **argv format.  If main returns an i32\nwavm's will pass along that as wavm's exit code.\n\n;; Example program that takes in arguments and exits with the value of argc\n(module\n  (export \"main\" $main)\n  (func $main (param $argc i32) (param $argv i32) (result i32)\n    (return (get_local $argc))\n  )\n)\n\nwavm also lets users specify a function to run rather than main and if any\narguments are specified they are converted as is to numeric values and the\nfunction result is written to stdout.  Handy for testing specific functions.\n\nPrograms have access to the following I/O functions through the Emscripten intrinsics\n* getc\n* ungetc\n* fread (stdin)\n* fputc (stdout|stderr)\n* fwrite (stdout|stderr)\n* fflush (stdout|stderr)\n\nPutting it all together wavm allows developers to build WebAssembly programs\nfor the command line.\n\nIncluded are three example WebAssembly WAST programs.\n* helloworld.wast => Outputs Hello World!\n* echo.wast => echo's the command line arguments\n* tee.wast => echo's stdin to stdout and stderr\n\nWith the capabilities provided a program could for example provide image\nmanipulation, reading in the image from stdin, manipulating it from command\nline arguments and outputting to stdout all from within safety of the sandbox.\n\nThe same WebAssembly image manipulation module could be loaded into a browser\nwhere a graphical frontend can be presented to users which would use the\nmodules API's.\n"},{"hash":"95f3555654d62fb2e0581a075d355ad3118d8518","date":"2016-07-31T22:55:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #40 from icefox/wavm\n\nIntroduce 'wavm' to execute WebAssembly command line programs."},{"hash":"8d4c7d4c0cdccd1b170a318e350fb5547ebd5184","date":"2016-08-01T11:33:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Windows compile errors\n"},{"hash":"515ea6c513581f04029702df5319febad0c854c4","date":"2016-08-01T23:03:26.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Don't write an empty table\n\nEmpty tables are invalid and cause an error when trying to load the wast\n"},{"hash":"0097e937757ba54e8f1e7129e211ac47f109a193","date":"2016-08-01T23:28:39.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Fix main signature mismatch\n\nAlways invoke main(i32,i32) even on 64bit systems\n"},{"hash":"5f916dc2fbd4fa403c86ff1e5f1a03874b020068","date":"2016-08-01T23:49:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #41 from icefox/emptytable\n\nDon't write an empty table"},{"hash":"62de5e25628455500ebe7258df9e1321477b07aa","date":"2016-08-01T23:50:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #43 from icefox/64bitmain\n\nFix main signature mismatch"},{"hash":"468a887cce3875180640f648b6fec2b1a6510087","date":"2016-08-02T16:37:28.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"9b6ef90f93eaa4905db685a3af2e48c7fd37f9c9","date":"2016-08-10T11:26:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix S-expression parser reading past end of buffer if the last atom is a symbol.\n"},{"hash":"c762f221d9b12a2a369d5c52323a3809ce1a9bc5","date":"2016-08-10T11:46:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Turn on asan for debug builds\n"},{"hash":"12e5387e9346559eb9027c99308cc4530769bef2","date":"2016-08-10T12:17:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed detection of int literal overflows\n"},{"hash":"3bf2698954f71bb2f7d4959e18c4754e575e0de6","date":"2016-08-10T12:17:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix bad filenames in CMakeLists.txt for a few tests\n"},{"hash":"297901c56e8c0ad0d8ab6573461a5041e4464f03","date":"2016-08-10T18:52:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix VS2013 compile error\n"},{"hash":"3a0e03726e384d61b87a1588b7f6bd29be551cd1","date":"2016-08-10T20:47:02.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Prevent possible random access when accessing std::vector\n\nWhen reading a value out of std::vector switch to use at() rather than []\nbecause it will do a bound check, preventing possible reading of memory not\nset by the program.\n"},{"hash":"b231055b3fecf743a4e64e42dab51e62152b7362","date":"2016-08-10T20:53:39.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add --check option to wasm for verifying programs\n\nAdds a new command line option to the wasm program --check or -c\nthat exits the application after the program has been successfully\nparsed, but without executing it.\n\nHandy when using american fuzzy lop, but you don't want it to execute\nany code, just test the parser.\n\nSimilar to ruby -c, perl -c, bash -n\n"},{"hash":"b95937eef52ad532b7102ef20bb04ea38a0dc950","date":"2016-08-10T21:01:37.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Don't assume decimal parsing was successful.\n\nWhen parsing a decimal isn't successful the state was not\nbeing advanced and so the code just looped, trying over\nand over to parse the decimal.\n\nExample test case:\n(module (func $x (local $s f32) (set_local $s (f32.const .a))))\n"},{"hash":"f7251114f22223bb17b8aa6286a0c74410688aa9","date":"2016-08-11T10:58:25.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"messageLength already includeds the null terminator\n"},{"hash":"3dc9deecd541dcd4df40f27a3ae933159646e1e8","date":"2016-08-11T23:04:57.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Guard against badly formed names\n\nA program that contains only the character '$' will cause the parser to advance off the end of memory.\n"},{"hash":"78ae5f475abada0074201572f365cb302d48269d","date":"2016-08-11T23:22:44.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Make loadTextModule and loadBinaryModule consistent\n"},{"hash":"0b3f34b4349310d1b8b55756c917849932b62844","date":"2016-08-12T05:45:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #44 from icefox/segfault\n\nPrevent possible random access when accessing std::vector"},{"hash":"f0542d19cb61de5a18b8daf626aebc5041a2285b","date":"2016-08-12T05:46:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #45 from icefox/check\n\nAdd --check option to wasm for verifying programs"},{"hash":"54aecea40c0cc6ba73535e9df9f6185749a3b6c0","date":"2016-08-12T05:47:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #46 from icefox/floating_point_error_checking\n\nDon't assume decimal parsing was successful."},{"hash":"5c3713ca32362f06280275ec3e5686fdc79c83b0","date":"2016-08-12T05:47:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #47 from icefox/offbyone\n\nmessageLength already includeds the null terminator"},{"hash":"eaaf9b55094129a3c9856c00117b30f393cf4f03","date":"2016-08-12T05:49:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #49 from icefox/consistent_loading\n\nMake loadTextModule and loadBinaryModule consistent"},{"hash":"5015f664c7cd666f46d786880ce3284ba26ce15d","date":"2016-08-12T05:49:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #48 from icefox/invalid_name\n\nGuard against badly formed names"},{"hash":"5e15afbc3696b582ec7663f826825efe2b7dabed","date":"2016-08-12T23:56:06.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"When populating a std::map use emplace() rather than [] assignment\n\n[] builds an empty value and immediately discards it.\n"},{"hash":"93fb3967c55e4b35cdd33ab36a304971d1672e95","date":"2016-08-13T07:30:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #50 from icefox/speedup\n\nWhen populating a std::map use emplace() rather than [] assignment"},{"hash":"fc9f23c5bab5bf90bbf263786fc7659b6b556287","date":"2016-08-21T19:53:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Refactor how AST::Module, AST::Function, and AST::ErrorRecord are freed\n"},{"hash":"336c52ce53a31eeb958b08ac864cf26de1fddf24","date":"2016-08-21T19:54:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle exceptions during Emscripten or start function invocation a little bit more gracefully\n"},{"hash":"2520f51e2c78cee8f621ab34dbb659c407f9c96a","date":"2016-08-23T06:08:48.000Z","author":{"name":"Benjamin C Meyer","email":"ben@meyerhome.net"},"message":"Add support for the american fuzzy lop fuzzer\n\nInclude some handy scripts and a small code change to get\nvery good performance out of AFL when running on Linux.\n"},{"hash":"f11f061a98a986034dda629c6c21f0ce7d2121f6","date":"2016-08-24T11:44:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #51 from icefox/AFL\n\nAdd support for the american fuzzy lop fuzzer"},{"hash":"639da991f624478b7d618085556c66205907d2dd","date":"2016-09-08T23:08:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Initial refactor of WAVM for binary-0xc\n"},{"hash":"6cd9bccd14cb2dad84abbe751d49acece08d8123","date":"2016-09-08T23:10:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge remote-tracking branch 'origin/master' into binary-0xc\n"},{"hash":"1c208eb838c3182b0a4ddbbc3bf6c810064bce40","date":"2016-09-08T23:19:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix GCC/clang compile errors\n"},{"hash":"8f6bb8fd0fc377af3942c0ad466aacf5464ca2f6","date":"2016-09-08T23:29:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Throw an error if creating a memory or table on module instantiation fails\n"},{"hash":"cb67ea6156d695e3afebe074fe09946b5580f260","date":"2016-09-08T23:30:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed unused variables\n"},{"hash":"838626e80f2a4740edbf9568d3530b3c89bb5bf2","date":"2016-09-08T23:47:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow mutable global imports/exports\n"},{"hash":"d4365d2de0a4fb7bee6eb472ebeb8bb96a17e7cb","date":"2016-09-08T23:53:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around some uninitialized variable warnings\n"},{"hash":"57a0d3e78622ff3b445b8b8bd304ed541f4d05b5","date":"2016-09-09T00:06:30.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around another uninitialized variable warning\n"},{"hash":"4478dc150e7d5cde200da715e2c0db21ee4aa23f","date":"2016-09-09T01:42:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed inline allocator dead end that accidentally got checked in\n"},{"hash":"1472e8b20de8d2ab8d881305c25be786d44e2463","date":"2016-09-09T11:00:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split code into Source and Include directories\n"},{"hash":"e38152e848b049de0564856077ebd4a73a973cdf","date":"2016-09-09T11:00:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"8c0c03e415d9554e701182e3dd16a369c216d36c","date":"2016-09-09T11:02:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove trivial assertion that slipped in\n"},{"hash":"4838dc138d120987b00874c11924476062fd7abb","date":"2016-09-10T01:50:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Improve missing import errors\n"},{"hash":"d0a1689f376fcaa05ea9ad2a4bffc5e676acadfa","date":"2016-09-10T01:53:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a #define to enable write-access to JIT code pages so Visual Studio can set breakpoints in them\n"},{"hash":"f83577450c276ce0d8a5c4541419096a4f7d6f62","date":"2016-09-10T01:54:47.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix private headers missing from project files\n"},{"hash":"018930818ea4507cdca77fe6439c323d6625d6aa","date":"2016-09-10T01:58:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle unknown opcodes a little more gracefully\n"},{"hash":"b1835046a462fd00fd6b497e38419107817f9682","date":"2016-09-10T02:00:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Changed how operator logger proxy is disabled to #define\n"},{"hash":"ab8a29237d5e49b674958dec97e8f14528f8e618","date":"2016-09-10T02:00:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use section codes in binary serialization instead of strings\n"},{"hash":"2abf7ca00df2a3e1a7fe831ee9d9f5f703bd53b2","date":"2016-09-10T02:04:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add #define that enables hooking entry and exit of each WASM function with a C++ function for debugging\n"},{"hash":"dce919d4b57aae45f83d486185f755372930c2c4","date":"2016-09-10T02:05:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make br_if leave its argument on the stack if the branch isn't taken\n"},{"hash":"61484aba61eb0a15c7a79a7dce13b0c836edab34","date":"2016-09-10T02:07:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make parseNameOrIndex report better errors in the case where an optional name or index is parsed but fails validation\n"},{"hash":"7ee3e9c0cbb842e84cb6bd28e2445acb24784b6a","date":"2016-09-10T02:08:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Some work on Binaryen compatibility: zlib and Benchmark work!\n"},{"hash":"576ad7a4253d0b511799dc6f62cf7f122ff6904c","date":"2016-09-10T02:09:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"f18a0ed883582af1f2c70810fdb951b84a6e2bc7","date":"2016-09-10T02:18:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang/GCC compile warnings\n"},{"hash":"28ccf85a61720b6324dcc79949c7da72eb8af4ab","date":"2016-09-10T13:36:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix size_t vs uintptr error on MacOS\n"},{"hash":"ebf8221cfd18cff9587fbdb8a44fb13ec884d913","date":"2016-09-10T13:53:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix another MacOS uintptr vs size_t issue\n"},{"hash":"745131060eb3167e61b3b4507f0186a7ea21dd6a","date":"2016-09-10T14:22:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replace some lingering uintptr_t with uintptr\n"},{"hash":"4bc8a46150d06128191fdb08c894c0908f981131","date":"2016-09-10T20:54:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed Emscripten sysconf returning the platform page size instead of the WebAssembly page size\n"},{"hash":"a7f598a20b9737470c96e6fac1920b1d0f927503","date":"2016-09-10T20:55:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make a better (but still approximate) guess about whether a segfault is a stack overflow on Linux/MacOS\n"},{"hash":"6f364f3b62c8bbdc8f396cc5bf7428e6e8910aaa","date":"2016-09-10T21:43:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merged SpecTestIntrinsics.cpp into Test.cpp, and moved EmscriptenIntrinsics out of Runtime into its own module.\n"},{"hash":"9028aa3af200e8176552132969e427d213d58440","date":"2016-09-11T11:51:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Changed control structure signatures to be a ResultType instead of FunctionType\n"},{"hash":"578a0e4a459bc0c8ec75e39805934f7893fe4a07","date":"2016-09-11T11:53:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"WIP WAST printer\n"},{"hash":"6885483ca17777efbf84b49f34ac5ab94275786a","date":"2016-09-11T11:55:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Get rid of legacy second label on loop\n"},{"hash":"6408f49c9b1c09b2c58acb2e44b32abc6780168d","date":"2016-09-11T11:56:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"ReturnType -> ResultType\n"},{"hash":"a4629e957146c6b64a9c2844a15040e0942a3651","date":"2016-09-11T13:46:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add explicit control structure signatures to text syntax\n"},{"hash":"0698ebe54b27bf766dff8f14e86eea943f42d0df","date":"2016-09-11T13:50:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove some unused variables\n"},{"hash":"685b8512ec468e42233e8389dae1454f49ab1691","date":"2016-09-11T13:57:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Removed spurious assertion\n"},{"hash":"cb97cd1d9c33167b8bc7698a29b33db92a6ab749","date":"2016-09-11T13:58:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Immediates->Imm\n"},{"hash":"26818df96205139b1253a13f37bbdc510e7acd4d","date":"2016-09-11T14:01:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Made Intrinsic public interface use non-decorated names\n"},{"hash":"420fc447c1c8987499c7675e68f353a7006e8af2","date":"2016-09-11T14:08:40.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix uninitialized warning in GCC\n"},{"hash":"6a9cb3a5e50ddd1a9c81b9aae432dc624eb98d53","date":"2016-09-11T14:59:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Simplified WAST parsing type checking\n"},{"hash":"64e5d90e48cfe833215d1ca5fe59cc8f16abd2f7","date":"2016-09-11T19:47:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"unit -> none\n"},{"hash":"6910823aaa6549efa9b7149ea4884cd4ff4e03d9","date":"2016-09-12T16:06:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some serialization mismatches between WAVM and ml-proto\n"},{"hash":"47014d8675b728a97ddca46182e901429188a614","date":"2016-09-12T16:08:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make Test handle binary modules a bit more robustly, assert_malformed, and try to continue processing the test script after a module fails to parse.\n"},{"hash":"46e92a069aa7f848aa1c391f22dc7c2c7859c6bb","date":"2016-09-12T16:09:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed WAST parsing using an alignment of 1 instead of natural alignment for operations that didn't explicitly provide an alignment\n"},{"hash":"7f5aa3f50aa3ada95f79ce32aa9e3c21e4811d01","date":"2016-09-12T17:35:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move ALLOW_MUTABLE_GLOBALS compatibility option to WebAssembly.h\n"},{"hash":"60d798a7493528b28decad054dcce1386609c004","date":"2016-09-12T17:37:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added compatibility option for whether an unconditional branch implicitly ends the current control structure\n"},{"hash":"ab404625ed09a3ad4d4410882d1600121b759a30","date":"2016-09-12T17:49:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix WAST printer to handle WebAssembly::unconditionalBranchImpliesEnd==0\n"},{"hash":"178020ee30a091ab496b641fc4ffb655a67a8136","date":"2016-09-12T19:46:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update README\n"},{"hash":"018fd2771b4f2b36c956807203864899c6f4b7e7","date":"2016-09-13T00:53:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use hex float format when printing to WAST\n"},{"hash":"d61a074eb04bb1d1f72f680476a21e272e420aa9","date":"2016-09-14T12:37:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move StringCompareFunctor to SExpression.h\n"},{"hash":"305402294f54035c9d1fa581d001ec636aea980e","date":"2016-09-14T12:53:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add Core::unreachable and Core::fatalError and replace various calls to \"throw;\" with them.\n"},{"hash":"2af06a986ffe2c47ffc0b3fc6c0357d1bf8fa00c","date":"2016-09-14T13:02:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add missing #include for MacOS\n"},{"hash":"ef632b6275a7d284a7c46d9a0811ca93ccad244d","date":"2016-09-14T20:41:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add category-filtered logging functions to Core\n"},{"hash":"3f74ab18f4a86354636129d201ff387cdd904b63","date":"2016-09-15T13:37:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix wavmIntrinsics.debugEnterFunction/debugExitFunction intrinsic name change bug\n"},{"hash":"ca532fcd41c9fff3d8bde54469910609e9aee4a7","date":"2016-09-15T13:41:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Compile an invoke thunk for each FunctionType that is invoked, rather than for each exported/start function in a module.\n"},{"hash":"f525a98c804a52900e83a119a8c7d6e00f77bf3c","date":"2016-09-15T14:02:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix POSIX compile error\n"},{"hash":"2c36eb563de29597366598448a39cd9533dab57f","date":"2016-09-15T18:20:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix MacOS compile error\n"},{"hash":"961ac7224fafcb5cd7c8885e64db9f402a5c79fd","date":"2016-09-15T18:35:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle reentrant exceptions/signals a little more gracefully\n"},{"hash":"b3df1660529cbc0d8e16a477f8da5d22766d1722","date":"2016-09-16T00:41:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Index JIT symbols by the end of their address range so map::upper_bound will find the first symbol end after the address being looked up\n"},{"hash":"0f75833e426932f207d1f90bb1d63ba515750515","date":"2016-09-16T13:38:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add PRETEND_32BIT_ADDRESS_SPACE CMake option/#define to allow working around the Windows Subsystem for Linux limitations on mmap size\n"},{"hash":"8f6e3fbaed885e7eeb7dd905e72d1e928f72627f","date":"2016-09-16T13:39:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Gracefully fail if an intrinsic table or memory creation fails\n"},{"hash":"63eef46c450de73e6df25dcb3b51b69c6c5e7ecf","date":"2016-09-16T14:24:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge RuntimePlatform namespace into Platform namespace\n"},{"hash":"0855a8d95a78680aaa4fd14acbd14c7f71ae35f3","date":"2016-09-16T14:24:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replace a stray abort with a call to Core::fatalError\n"},{"hash":"b5005c933443529121ce5aa59599d74f4d4ceb4e","date":"2016-09-16T14:49:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix for failure to distinguish faults reading tables elements from general memory access faults\n"},{"hash":"bc0a32c188a04463aa0b0a7b64fdbe6035df0ab6","date":"2016-09-16T14:54:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"trapCause -> trapType\n"},{"hash":"545a8ce03ee4e06167a48fd42d2056cbe3226840","date":"2016-09-16T18:17:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"More work on WAST printer\n"},{"hash":"b6ea093a9ffd6e17e64b30ea69f1dff47caa7372","date":"2016-09-16T18:38:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use names for labels in printed WAST\n"},{"hash":"761d6337cb9dade56cda429f06bfc4fa273ba5ac","date":"2016-09-16T21:47:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added general user section support to match the spec\nRefactored name section handling to reduce the amount of validation a name consumer has to do to the data\n"},{"hash":"43d8175058cc1d05678ec2f16da265460f82c1ef","date":"2016-09-17T11:17:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove WebAssembly::unconditionalBranchImpliesEnd, add `else` operator, merge `if` and `if_else`.\n"},{"hash":"f0dcacd446c98189fbd5f87d97c7cf70d9443c9e","date":"2016-09-17T11:27:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Cleanup getDisassemblyNames and fix GCC/clang unused variable warnings\n"},{"hash":"1c2d6b2654b685ac25c7e888c127be33c0f37f19","date":"2016-09-17T11:29:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Reorder section codes and serialization order to match spec\n"},{"hash":"7afbcb4f988ed07cd30ecc68d05dd4ac3d773564","date":"2016-09-17T11:35:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix spurious assert\n"},{"hash":"9af0dab6d2d8734f31e33985ba3c7807059daa93","date":"2016-09-17T11:36:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Changed `br_table` serialization to match spec\n"},{"hash":"8cbc6972e91ca5bf17c94df52914117a095c8c32","date":"2016-09-17T11:50:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add exports to module printer\n"},{"hash":"5f2f3f614917b6331efc6fa96632bb2b282638d8","date":"2016-09-17T11:55:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Abort on invalid export kind\n"},{"hash":"4d1b1c9c5bd69d3d1f86da3fe3442c4dcbe20f4a","date":"2016-09-17T12:35:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't allow direct imports of wavmIntrinsics\n"},{"hash":"8556a0a2cb8abeca22b5de02c0be5957d0c16eb1","date":"2016-09-17T17:47:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"d24c31157d69767a953bba1c79a20215df19dd8a","date":"2016-09-18T11:41:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add switch to Assemble that omits function/local names from the output\n"},{"hash":"6e9d3690af2fbad97ea05f3b44598c090989b5c3","date":"2016-09-18T11:47:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix signed-vs-unsigned comparison\n"},{"hash":"e356d03d90dbe00adbbeb40cf0e8e6faf3dab835","date":"2016-09-18T15:11:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove unused reference from ModuleInstance to Module\n"},{"hash":"f8387fb562ed50cfde22e30fcab86dcb70819ddc","date":"2016-09-18T15:12:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Truncate the callstack in Runtime exceptions to exclude the native code calling invokeFunction\n"},{"hash":"ca10c0b980f34b5f6e97636b4a90089e6b6a0d18","date":"2016-09-18T15:15:28.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Call Core::fatalError instead of returning a runtime error from invokeFunction if there's an access violation outside of a Memory object's reservation\n"},{"hash":"b8ec51548516223c5bbd4c553e268ed2fbf3ccb3","date":"2016-09-18T15:15:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow NullResolver to resolve __chkstk\n"},{"hash":"ee1f36567e21071785b2906568da96c746cc7a1e","date":"2016-09-18T15:18:16.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make wavm generate stubs for missing function imports\n"},{"hash":"c43e1abcdfb01ad542cdd189b3b948762c47f52e","date":"2016-09-19T11:05:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add simple Runtime Object garbage collector\n"},{"hash":"0eda18aa28b97e0a93ae807f85507c5c1057328b","date":"2016-09-19T11:30:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix warning about unused variable on non-Windows platforms\n"},{"hash":"73d6e6b150f2d83070f8d9d26f415e8b80942606","date":"2016-09-19T11:46:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix debug build compile error\n"},{"hash":"b79dcbcded3c232cdcf98d71ca9abeba34bf6295","date":"2016-09-19T11:46:47.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove some logging that was committed accidentally\n"},{"hash":"d24f946555942a627536fb2c2e9a5fa9ddc076f0","date":"2016-09-19T12:55:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"uintptr/intptr -> uintp/intp\n"},{"hash":"68e90d2c116720289da3fa10b617567900c9c88f","date":"2016-09-19T13:29:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix a intptr_t -> intp I missed\n"},{"hash":"0a9c820f41caba9c49a4b4e9e53b69be07a0fca9","date":"2016-09-19T20:58:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use LLVM debug info to generate maps from instruction pointers to WebAssembly operation indices\n"},{"hash":"345a21e0a9999de2391ba46c63c26bcda600f8c9","date":"2016-09-19T22:05:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix non-Windows compile error\n"},{"hash":"48e202b53b8149744d643bdada7d1519e1685fda","date":"2016-09-20T11:43:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed static initialization order dependency\n"},{"hash":"dda1f784d5553868d05afe6bf4acb79777ecff43","date":"2016-09-20T12:06:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Enable callstack traces from signals on Linux\n"},{"hash":"7956563c44633715d509f44016250f0478a6f87d","date":"2016-09-20T12:17:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed MacOS compile error\n"},{"hash":"96f504987d2d9c5a3cde6ca02d1e3ff7b3cb6e1c","date":"2016-09-20T21:14:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Polished runtime exception handling:\n* throw exceptions out of invokeFunction instead of wrapping the exception in a Runtime::Value\n* split Runtime::Value into Runtime::Result and Runtime::Value\n* don't allocate Runtime::Exception on the heap\n* eliminate some InstantiationException causes:\n  * code generation failure will only happen if there's a bug in LLVMJIT, so make it a fatal error\n  * let the caller of instantiateModule deal with runtime exceptions in the module's start function\n"},{"hash":"1b21f75f3a33cadb1426ad72ae566718dceeb8a8","date":"2016-09-20T21:37:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix debug compile errors\n"},{"hash":"285137a9e61a9769ce964dd4967f50cf1869ff7a","date":"2016-09-20T22:07:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix debug assertion\n"},{"hash":"f1ddbf089812f30944d05e5d8ce1a4bd551b6f5d","date":"2016-09-20T22:09:58.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix another static initialization order bug\n"},{"hash":"0e2b2d8f54d572896dc9e34c1a1b5f3d4a3e7aa3","date":"2016-09-20T23:51:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some fuzzing crashes\n"},{"hash":"0b2bac2987eb435547094cd1c4154c1ad887e8bb","date":"2016-09-21T00:30:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed LLVMJIT bug: correctly handle unreachable control structures\n"},{"hash":"d4c0fec354166b50d7b560ac330598ab7c327d22","date":"2016-09-21T11:45:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix leaking of LLVM modules\n"},{"hash":"19540e24bbd1c207fd4c713ccdf3e5633725a128","date":"2016-09-21T13:58:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix missing newline in log message\n"},{"hash":"37f071d0f0c5f60bbf53161ef041aa1a00ca887e","date":"2016-09-21T14:57:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix missing validation of constant initializer expression type\n"},{"hash":"1d9da6a1b5129b124d5a118180439cae9409bd8c","date":"2016-09-21T14:59:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Increase the POSIX signal stack size to avoid a stack overflow while trying to create a backtrace\n"},{"hash":"d39d283217452b6e38a93650e00551b8e9e12f45","date":"2016-09-21T16:53:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a separate CMake option for ASAN\n"},{"hash":"3bf68a79b65ef2e7d39ca79f63cc0fdb0a50b184","date":"2016-09-21T16:54:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Got AFL fuzzing working again\n"},{"hash":"76c0b65f8bf5e31da2c2c6a0de0eed4572775212","date":"2016-09-21T17:31:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix a null dereference when parsing WAST file that doesn't contain a module\n"},{"hash":"2159689746fa5fce338423253ceaaf3129e4fd9d","date":"2016-09-21T23:12:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"mmap guard pages at the end of the stack on POSIX systems, and use this to probe the exact end of the stack reservation\n"},{"hash":"dfcc0d6559c8e6910e1660eab27edd4afef50816","date":"2016-09-21T23:14:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add proof of concept of WAVM POSIX stack overflow attack\n"},{"hash":"681f4fe3c7989c3c05457dad55635b35511b4086","date":"2016-09-22T02:50:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed POSIX stack detection so it works on Linux\n"},{"hash":"8b1c4dae6cc9134b98250e43c2f961d458037cd1","date":"2016-09-22T02:51:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang 3.8 compile error\n"},{"hash":"4df3472d55688b9acfed7feab08c8294bbade37a","date":"2016-09-22T03:16:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use the right non-portable pthread functions on MacOS to get the stack base+size\n"},{"hash":"b98abd01b6e0bade190f1b5819c5216f1496f11a","date":"2016-09-22T11:39:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix stack address detection on OS X\n"},{"hash":"2b5f356a59f9422134fa448037877d4e524d389c","date":"2016-09-22T13:14:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix for case where pthread reports a smaller stack than the rlimit: use pthread to get the stack address, and getrlimit to get the maximum stack size.\n"},{"hash":"d7904aefa45438a6864448b7ef97a1b3d92aca03","date":"2016-09-24T12:49:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix copysign being enumerated as an unary operator\n"},{"hash":"8b8734b3518461f7e6f72f8fae5df80ac2133272","date":"2016-09-26T16:29:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Comments and general code polish\n"},{"hash":"641f211cf88b3cf13d95d9fa3c6fc41d0d4d619f","date":"2016-09-26T16:48:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix OSX compile error\n"},{"hash":"67d62b7f6e84989c30bfd51a4ca4d023e1495c56","date":"2016-09-26T16:51:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Change array/string serialization to try to handle malformed sizes in input by triggering a serialization exception instead of trying to make a huge memory allocation\n"},{"hash":"661cceb6ec61a155568e6ed196d20b30b7d32eff","date":"2016-09-26T22:35:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Get rid of --text and --binary arguments for WAVM; detect the file type from its contents (+1 squashed commits)\n\nSquashed commits:\n\n[4172469] Get rid of --text and --binary arguments for WAVM; detect the file type from its contents\n"},{"hash":"27fd1e0463c0b4203d9600658168e1b284a1cce3","date":"2016-09-26T22:35:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix function table indices not being validated.\n"},{"hash":"6169e1de783cef7137693b2a65082fbbd9c4a1f8","date":"2016-09-26T22:33:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Go back to instantiation exceptions for invalid segment offsets so they can be handled\n"},{"hash":"cd0935af3a5fa1e8096d7e9fcdd858ecdaec5f49","date":"2016-09-26T22:34:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove redundant message on fatal errors\n"},{"hash":"57f79247ac9b7de93b5c6f4f6f30c5d8c3502c41","date":"2016-09-26T23:02:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update afl scripts\n"},{"hash":"e6e928e6a9297147538a1fd31057daaffa0b47f9","date":"2016-09-27T13:06:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Split Table.cpp out of Memory.cpp\n"},{"hash":"ca28f786fba27e37e63b8b0d48c0e9688defe6cb","date":"2016-09-27T13:11:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Convert some #ifs to ifs\n"},{"hash":"5e22fe8adb099e241110d9fd9833620bea3e3847","date":"2016-09-27T14:22:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replace emitIfElse with more specialized code (in most cases, emitConditionalTrapIntrinsic)\n"},{"hash":"be9c51801091d95007dfbf50356739664760dfb0","date":"2016-09-27T14:30:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle deserializing invalid function counts more gracefully\n"},{"hash":"ed25c1517a19a73df7059dadd8a6450cd897c41c","date":"2016-09-27T14:40:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added fuzz testing corpus\n"},{"hash":"c3a6186d7c67e079a79ec161c9275fcc10277cf9","date":"2016-09-29T13:52:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some operator numbers that didn't match the spec\n"},{"hash":"96b41e2619614ec5270d3cf3ed1551f1e4cb7e79","date":"2016-12-21T15:38:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update to latest spec\n"},{"hash":"d4a5637a194ac1ed062815b4a7cfcd199827f737","date":"2016-12-21T15:46:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove skip-stack-guard-page from CI testing for now since it was specifically added as a known failure.\n"},{"hash":"b84e52bfba8468823148c898d9a34816bb01e0f3","date":"2016-12-21T16:22:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update compiler versions used by TravisCI\n"},{"hash":"b992d02301e8532cc0d48053801773ba8eb87e7a","date":"2017-01-09T18:05:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make Emscripten globals immutable to match latest ABI\n"},{"hash":"e7984300e8fe553f6c98208439011fc16b3b2140","date":"2017-01-09T18:07:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Core.h defining CORE_API to DLL_EXPORT instead of DLL_IMPORT\n"},{"hash":"370df4389f6b0c8648bf6726a8a031d68b1ebf5d","date":"2017-02-10T15:22:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update some constants to match the latest binary format\n"},{"hash":"ff621349e22252545980ed6908b5c2052c1e13cf","date":"2017-02-10T16:00:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update spec tests to latest\n"},{"hash":"44bae6f33210b38ede5f0881aa16a9a40d323f63","date":"2017-02-10T17:22:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix erroneously inverted assertions\n"},{"hash":"ca68936b860716983f584fa1d3194dc4352bab56","date":"2017-02-28T16:15:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix parser accepting if operator without an else clause when the if operator yields a value.\n"},{"hash":"0a1ba8ec2b2cf0ec19bb5f6b06f2f6e97f2da736","date":"2017-02-28T16:15:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update binary serialization to draft spec version 1\n"},{"hash":"18c78d314adc5babc1244880940dfdb8e7e33043","date":"2017-02-28T16:16:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"d7b7dd7e281986096befcaf2759b51a5996beb3f","date":"2017-03-08T22:40:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix serialization of a few operators\n"},{"hash":"6a1a3a68093ddcf9e2fc22b1241bf340f006b571","date":"2017-03-08T22:41:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix name section serialization to match state of Binaryen\n"},{"hash":"5a6751f8451aee1498efae3b6cb0ae16f05d5eb6","date":"2017-03-09T02:40:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove unused variable\n"},{"hash":"1d429d363256e72424989f4d218ede9e634d7606","date":"2017-03-13T16:50:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some renumbered operations\n"},{"hash":"821d71b47c6b4fb9c9a7715787849276eff7af79","date":"2017-03-13T16:52:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update test .wast files for latest ABI\n"},{"hash":"d9bff4d8f56a23e1cb57ba07f5498a22b14cf27d","date":"2017-03-13T17:22:44.000Z","author":{"name":"Anil Madhavapeddy","email":"anil@recoil.org"},"message":"Sync README with current `wavm` cli output (#7)\n\nFollowing 661cceb6ec61a155568e6ed196d20b30b7d32eff0, there is no\r\nlonger a `--text` argument to the CLI.  This PR changes the\r\nREADME to reflect the current usage.\r\n\r\nHowever, the sexpr-based examples still fail with an error\r\n'unexpected input following module', so some further fixes are\r\nneeded to make them work when following the README.\r\n\r\nSigned-off-by: Anil Madhavapeddy <anil@recoil.org>"},{"hash":"1ada2fe9fa428c20fe24be64f727c47e3733ebd9","date":"2017-03-27T17:10:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"cadf3b5c8ba2ac6d8af0e18af54fdf8f8438ab18","date":"2017-03-28T15:11:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Support new `assert_return_canonical_nan` and `assert_return_arithmetic_nan` testing commands\n"},{"hash":"fea56589a332cf48aa5b56c508c95e80076d8978","date":"2017-03-28T21:44:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move float NaN folding tests that WAVM fails into known failures test suite.\n"},{"hash":"0e32c25bf5c8ebc3724b861bb13dde11204d4517","date":"2017-04-04T00:33:20.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Upgrade to LLVM 4\n"},{"hash":"2a5309a9b89801f22d15f777586a789076ade2ae","date":"2017-04-04T04:52:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make validator check types of code following an unconditional branch\n"},{"hash":"d917287e0af5f98f38c6680b9249c2d532095178","date":"2017-04-19T19:26:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Rewrite WAST parsing: much faster and handles the \"stack\" syntax as well as the expression syntax\n"},{"hash":"8c9b7d8d68b8faa2ccca9357f94632852ea5dc9f","date":"2017-04-19T19:35:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix MacOS compile error\n"},{"hash":"9a70ef00d963cc5f869fcd63bec942960502675c","date":"2017-04-19T19:35:21.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Integrate new tests from spec repo\n"},{"hash":"136bae683e1bf2445b2521cb4db35eb8338a34c6","date":"2017-04-19T19:49:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Mac compile errors\n"},{"hash":"a211d7e28a897e95d04158a0f3eef08467042d2a","date":"2017-04-20T21:23:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Include signature in operator table, and use it to validate non-parametric/non-control operators\n"},{"hash":"cccd209916349f27ea7494c8c34035505466cafd","date":"2017-04-22T15:59:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed reporting parse errors at the end of the file\n"},{"hash":"724d8c966edab78a14a9422d3f4a2e0194d2f764","date":"2017-04-22T16:01:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Locate the opening parenthesis in the unmatched parenthesis error\n"},{"hash":"4706b92b887abfd9ea1cdd3713f23571b865d4d5","date":"2017-04-22T16:02:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"If there's a validation error while parsing operators, emit an unreachable operator so subsequent validation errors are suppressed\n"},{"hash":"6b2df0b5179851afa9ac075a3b1effc789219df9","date":"2017-04-22T16:02:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Factor WAST operator printing into opcode printing and immediate printing\n"},{"hash":"a7a0b535db0270538e83d913be4d4471d2089002","date":"2017-04-22T16:12:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix non-VC compile error\n"},{"hash":"ff2323f4abe89dc7407025b24a6def4b946d3989","date":"2017-04-22T23:44:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add prototype of the initial SIMD proposal at https://github.com/WebAssembly/simd/pull/1\nIt's enabled by default, but if you wish to disable it you can with the CMake ENABLE_SIMD_PROTOTYPE option.\nThis also includes an implementation of the Blake2b hash function with the proposed SIMD operators in Test/Blake2b/blake2b.wast\n"},{"hash":"734aad3e2ad2a94dd81f80f2c334a92a0ba05d46","date":"2017-04-22T23:50:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix non-VC compile error\n"},{"hash":"65027a15cd63d80587a23133bfd3d6e21bb6d5df","date":"2017-04-23T01:48:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix debug compile error\n"},{"hash":"3fb4dcb304e2c963c6b0f4e8a9eb6a7a9337577d","date":"2017-04-23T01:49:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix comment in Blake2b.wast\n"},{"hash":"92bcf523e69102a3817d90fcaec7db1447af3917","date":"2017-04-23T01:56:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add missing implementation for parsing LaneIndexImm\n"},{"hash":"1a7462a91e324e6f7e7d972fe1c5c86c278e81fa","date":"2017-04-24T10:31:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fixed delete being used where delete[] should have been used.\n"},{"hash":"940ef970183ae05bb7f472f6e397f9deed917eb2","date":"2017-04-24T14:59:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Stub all kinds of missing imports, not just functions\n"},{"hash":"b4c48bcdb5aadbbedbcefd26e96195c2300e971c","date":"2017-04-24T22:38:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Encode IR operators in memory without varints, and reference branch tables indirectly in BranchTableImm\n"},{"hash":"f6ee718a735889d062db72cd41ea7b2b60a6b13d","date":"2017-04-24T23:38:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around GCC \"cannot bind packed field\" error\n"},{"hash":"0e64c476f7efd2d03fb7779588a12ae118cb306d","date":"2017-04-24T23:59:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Disable VC unaligned pointer warning\n"},{"hash":"85754c489724979772bd5f7bcaf11bbf2ef4dd3a","date":"2017-04-26T10:08:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix LLVM JIT debug option that prints WASM operators as it translates them\n"},{"hash":"79ca4647cb72f583552488af401b1c5cc65e212c","date":"2017-04-26T10:08:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use createGlobal instead of new GlobalInstance to create a new intrinsic global\n"},{"hash":"9cd3a481224493f38c1150ca226dd1ffb96f1a5d","date":"2017-05-02T19:22:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement prototype of WASM threading proposal\n"},{"hash":"715976459f8fbbff0e7e0a09be949c8367a25973","date":"2017-05-02T19:33:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Link with librt on Linux\n"},{"hash":"a219f2556ae54dbbc02d7ce3ac6d7d5c3b19b882","date":"2017-05-02T19:55:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"thread_local -> THREAD_LOCAL\n"},{"hash":"402eabaa57d149fcd7b5c81ad985684c4c33c523","date":"2017-05-02T20:27:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"uint8 -> U8, int8 -> I8, etc\n"},{"hash":"c8365c27ec2cab66add9e4485ab8da76a26465b0","date":"2017-05-02T21:14:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix POSIX compile error\n"},{"hash":"58eadc291cbd04b858bf48e2408bab34df8c7926","date":"2017-05-02T21:37:02.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix OSX compile errors\n"},{"hash":"e9e4e45776268801ee447700a0e86b684f9912ad","date":"2017-05-05T12:45:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replaced the various SIMD build operators with const operators to match the latest proposal\n"},{"hash":"7bb57ca6d1cea57b99800c1633a6e8bc6824c4f5","date":"2017-05-05T12:51:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Revert a line that was accidentally checked in\n"},{"hash":"0a315b87b6b6ed36e14eeef47f6804f33be449de","date":"2017-05-05T13:05:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix non-VC compile error\n"},{"hash":"038ac130ff4a7030bfd9ad13f09a9a0eab649e5b","date":"2017-05-05T17:17:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move UTF-8 validation into a header so binary deserialization can use it, and integrate latest spec tests\n"},{"hash":"bc7778f43eff2a55bf642bf704d7b2745bd49913","date":"2017-05-17T15:03:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix UTF-8 validation bug\n"},{"hash":"752838bb093a492748b78059ffb809fc119c446f","date":"2017-05-17T15:05:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix export names with null characters in them\n"},{"hash":"1b570512039ffce9eaff38f6f527fd1ef0661198","date":"2017-05-17T15:05:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix a Regexp parse error message\n"},{"hash":"a48215f58a0fc2b74e6cab7855d3ab615d35fd6d","date":"2017-05-17T15:06:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add new tests from spec repo\n"},{"hash":"14ffcde75ff0156241b714a3aad48f2eadcac8c5","date":"2017-05-17T16:40:18.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix for lexer accepting unseparated tokens: e.g. `i32.const0` or `br 0nop`\n"},{"hash":"83c1b51b255fefd3d4f9f2e3580a4879146a2f56","date":"2017-05-17T18:09:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix non-VC compile error\n"},{"hash":"2ab3196818baeed55f837d010218462ee3216508","date":"2017-05-18T11:30:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle \\u{...} escape codes in WAST strings\n\n"},{"hash":"24f8bc5dbf9e3525b7ad253cd021dfd793124571","date":"2017-05-29T12:40:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"New syntax for control structure result type\n"},{"hash":"a6c926d6cee8b2bda746628a222bcd342a23c2c5","date":"2017-06-07T13:35:34.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix crash lexing zero-length string\n"},{"hash":"d296bdf4a6490481545a420c3fd3693129237ee8","date":"2017-06-07T13:36:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow '\\0' in WAST comments\n"},{"hash":"fa1d23ecb5351e5520c5df8fe668977d3f995f36","date":"2017-06-07T13:37:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Unroll DFA lexing loop 4x\n"},{"hash":"077eb38f69413e24eb50d751a7cb51b367223e8d","date":"2017-06-07T13:38:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Change atomic/SIMD operator prefixes to the prefixes chosen by the WASM CG\n"},{"hash":"f4e9f813a0441b87f94a3604a428b41767539b92","date":"2017-06-07T13:41:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add support for new quoted text module syntax: `(module quoted \"...\")`\n"},{"hash":"ae7c1da71e164cb8ef582a8413ad9efd260ff418","date":"2017-06-07T13:57:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Produce a parse error instead of a validation error when referring to some declaration using an invalid index\n"},{"hash":"f7bc0bfa49422968691255e9ef0f18bfc2603d60","date":"2017-06-07T13:59:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle imported function declarations with both a type reference and explicit param/result declarations.\n"},{"hash":"b7586b590082073ffeb12378239d856f06e1890b","date":"2017-06-07T13:59:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow empty `(result)` declarations\n"},{"hash":"b6ff74244b852008de11eeb02e53ae3b6e5dd75e","date":"2017-06-07T14:01:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow multiple inline export directives on a declaration\n"},{"hash":"d3529b5c02949300f26072b7ebb3ed661b34131a","date":"2017-06-07T14:02:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"6db8d0672c8c123c1ca5df55cd32b9d4899a7dfb","date":"2017-06-07T14:24:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around incorrect warning about possible use of uninitialized memory\n"},{"hash":"048a676f9bf6a6d26a29acddc36c129178da1934","date":"2017-06-07T16:14:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update to latest SIMD proposal\n* Remove boolean vector types\n* Remove all swizzles/shuffles except for `v8x16.shuffle`\n* Remove a few `i64x2` operators\n"},{"hash":"5fa9d7dbab73f8bb8bb10f0151062826dca777f5","date":"2017-06-07T18:12:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update to latest threading proposal\n* Remove sign-extending atomic RMW ops\n* Add `i32.extend_s/i8`, `i32.extend_s/i16`, `i64.extend_s/i8`, and `i64.extend_s/i16`\n"},{"hash":"77895a857af70c413ce2e30d9747da74dfec0774","date":"2017-06-09T16:25:47.000Z","author":{"name":"Paul DeCarlo","email":"pdecarlo@microsoft.com"},"message":"Add instructions for building on Windows\n"},{"hash":"de4ebfda2a991b48fa90ea6aa8f363175bf94593","date":"2017-06-09T18:43:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Merge pull request #55 from toolboc/master\n\nAdd instructions for building WAVM on Windows"},{"hash":"db9c977ac69c6a08c42ca73fd44af35e35c77cec","date":"2017-06-18T20:25:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Possible fix for issues with indirectly including math.h inside namespace\n"},{"hash":"0e2d740692db5f1ce4ffcd9cf89ffb56eb20d221","date":"2017-06-19T15:16:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove \"infinity\" case when parsing float infinity literals: only \"inf\" is supported now\n"},{"hash":"6bd3211308ee96ea0005a760442e5dcf83a8bea6","date":"2017-06-19T15:18:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Round 32-bit decimal float literals before checking their range\n"},{"hash":"4ee09aa31ad10aa926f3d368119572640addad6b","date":"2017-06-19T15:19:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix variable that was accidentally renamed by replace-in-files int64->I64.\n"},{"hash":"1cbcbefbcd79273d5c4b395b698a0a3a3ea1c359","date":"2017-06-20T18:17:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Support updated WAST function result syntax\n"},{"hash":"1bcd44228331d210423ab190b140d4bdd2ea3eeb","date":"2017-06-20T19:02:07.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try to fix non-MSVC compile error\n"},{"hash":"d339a7700ca5780837c9ba2411fe147c8baae8e1","date":"2017-06-20T20:04:14.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use David Gay's strtod for hex floats as well to fix incorrect rounding in my code.\n"},{"hash":"949c892397beb5ed2bc0858418071705de45f791","date":"2017-06-20T22:14:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Explicitly trap on (INT_MIN / -1) to ensure LLVM DCE or constant folding doesn't eliminate the trap.\n"},{"hash":"9e4774ef3b77079fba6d64fb41c7347857ca6697","date":"2017-06-20T23:22:35.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add missing type.wast test file from spec repo\n"},{"hash":"d65a504daa103586d37545cdab8caf3f8c0aac19","date":"2017-06-23T15:05:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix invokes after an invalid module in a test script reporting redundant errors\n"},{"hash":"5f4482af96944a945a7a66ebcd3481f5642e94ad","date":"2017-06-23T15:06:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix crash when deleting a partially initialized MemoryInstance after its address-space allocation fails\n"},{"hash":"9afa080abd0e4365a3b275bcd4ccda905028d854","date":"2017-06-23T15:07:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allocate 512MB of address-space instead of 1GB for memory objects on 32-bit. This allows the test scripts to have more than one around at a time without exhausting 2GB of user address-space.\n"},{"hash":"b55bfc9793a22b19dd1b47a905a5ffb643e09c7b","date":"2017-06-23T15:08:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some 32-bit compile errors\n"},{"hash":"527fd8f0fa87cbbe831e6fe35e6d3ff92579f7f2","date":"2017-06-28T19:27:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update serialization of shared flag on tables/memories\n"},{"hash":"0c52154171d8c23af4a3055c69a3eb8a8361d1a0","date":"2017-06-28T19:28:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix crash when waking more threads than are waiting on an address\n"},{"hash":"8a786e9a87b7935d5fafd8d878fc019a3b9990db","date":"2017-06-29T10:59:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"More fixes for 32-bit x86 and ARM\n"},{"hash":"d3f41b910fbb81cf53d14f4ff475f542d5cc2155","date":"2017-06-29T11:15:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use correct preprocessor define (__arm__ vs __ARM__) to detect compilation for ARM architecture CPUs.\n"},{"hash":"0d955005b0209a6219e15b9fc96c161360127d01","date":"2017-06-29T18:58:32.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make LLVM JIT target the specific CPU we're running on\n"},{"hash":"9b53efb2e137041c989fe872ef9304c0c858f254","date":"2017-06-29T19:13:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Disable experimental LLVM disassembly printing\n"},{"hash":"f8ad094ea9df463934bc4a5dc349252c073bbb0f","date":"2017-06-29T19:22:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove LLVM IR translation for the removed boolean vector operators\n"},{"hash":"0f0f78aa85ea980886095a2c7c30ae7c5acea0df","date":"2017-08-29T10:57:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow underscores in WAST numbers\n"},{"hash":"fbe8bd7ee9193b80c327482ef09e3258376ef7c5","date":"2017-08-29T10:59:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Recognize some spec test expected errors by their message prefix instead of the full message\n"},{"hash":"da3bba5d55cd9daf14443b41a5da60aa59368c90","date":"2017-09-07T19:28:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Support parsing of references to types declared later in a WAST module\n"},{"hash":"d75b37155c0a61bc0b52d15d5a4cd72195bb3e0b","date":"2017-09-07T19:33:06.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update spec tests\n"},{"hash":"a97005a326554d879133fc08818c76645ec1a4e7","date":"2017-09-07T19:52:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix clang error\n"},{"hash":"60c5957148be40f62d9682b751085cd762d9fc7e","date":"2017-10-29T18:21:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add atomic tests and fix some bugs they exposed\n"},{"hash":"f7299742defa49e98633a2d49a45b17edfb5530f","date":"2017-10-29T19:44:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update tests from spec repo\n"},{"hash":"c00b8081a31c198527170bd1c603763f89faf559","date":"2017-10-30T21:59:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove a vestigial struct declaration\n"},{"hash":"875b15f7b90dc413b148b9376399a4b26097f577","date":"2017-11-01T21:34:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Coerce LLVM vector-typed values to the canonical vector type before passing to a PHI\n"},{"hash":"574c0beaa86c327b508fb1e0c808bbdeb10183f0","date":"2017-11-01T21:35:12.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Handle v128.const in test script constants\n"},{"hash":"33bccfd1567ce60dbfb243b58da0097d588b6f38","date":"2017-11-01T21:46:38.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make invoke thunk handle v128 type correctly\n"},{"hash":"3d8a58bcc2ff8dd1ab85195fab2d5395757d0738","date":"2017-11-09T18:13:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update thread operators and shared flag serialization from latest spec proposal\n"},{"hash":"9fc0ec571a84ff58bbe4ce7954ced603335ec063","date":"2017-11-09T19:21:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove some vestigial boolean vector code\n"},{"hash":"a64b79673fdff87de126ccda87c0203ebe5d48f2","date":"2017-11-09T19:47:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Upgrade to llvm5\n"},{"hash":"ce7ab81b6ee635465ba174669a08205b48f6aa79","date":"2017-11-09T19:48:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use LLVM5 constrained FP intrinsics to prohibit folding instructions in a way that alters NaN-propagation\n"},{"hash":"4359404388d5c67761be762e0ebf78b94da238f8","date":"2017-11-16T14:05:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Print v128 as 4x hex i32 instead of 16xi8\n"},{"hash":"ab7668f3096291eb640019d5e64f2ee0ba7147d9","date":"2017-11-16T14:07:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Parse v128.const as 2 i64s, 4 i32s, 8 i16s, or 16 i8s.\n"},{"hash":"b2cb9ef8c734401e23e9f836b46ad22dd6441889","date":"2017-11-16T14:13:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some places that weren't canonicalizing vector types before passing to a phi.\n"},{"hash":"80c652f378bc191ee00d2ada4d24eb1f37281318","date":"2017-11-16T14:24:17.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement SIMD saturated arithmetic operators\nReplace intrinsic implementations of scalar float-to-int with inline code\nWIP implementations of SIMD saturating float-to-int and min/max (doesn't handle NaNs correctly).\n"},{"hash":"ee0593c7873898740f018b5ae3e55f565e8a0cf9","date":"2017-11-16T14:29:15.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some cases where llvm::Expected wasn't being checked for an error\n"},{"hash":"30edae6ae678c6dad76c97eec32edf704c7675c2","date":"2017-11-16T14:30:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add support for LLVM 6\n"},{"hash":"0350819a7d6c113cfb53c2645757a6c05904d19f","date":"2017-11-27T21:43:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Compile files in parallel on MSVC\n"},{"hash":"a15b7149750468e3dd7e211e6bde71cfca81ec87","date":"2017-11-27T21:52:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Moved some code out of `#if ENABLE_SIMD_PROTOTYPE`\n"},{"hash":"fd24c6f7bfcc81dfc0986f6b00ca1a73a32b7fbe","date":"2017-11-27T22:45:45.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update disassembly names serialization\n"},{"hash":"8c50d2ae0b7de6a940edf55b4a64e4ae58994150","date":"2017-11-27T23:22:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"WIP exception support\n"},{"hash":"466c6df6ab2160a78eae550793882636d47a33a4","date":"2017-11-27T23:27:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a few SIMD tests\n"},{"hash":"de826f539d2576497746dbe376ae1fa73f1584f9","date":"2017-12-02T22:34:13.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove some vestigial code\n"},{"hash":"b76e49c048b45cdb65f831b105e35f87285e5220","date":"2017-12-04T00:11:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement non-trapping float-to-int conversion proposal\nImplement non-trapping SIMD float-to-int instructions correctly\nFix some edge cases in the trapping float-to-int instructions\n"},{"hash":"072e80a771abfd02b762f24e664f7ca4cd9cace3","date":"2017-12-04T00:12:28.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add option to allow imported mutable globals\n"},{"hash":"5b659b47dd1011f7463fbba1cd332f4cf7c43224","date":"2017-12-04T00:25:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Disable importing mutable globals by default so the spec tests pass\n"},{"hash":"b2aec18f339b69736239a3206e14f05d7beda9b9","date":"2017-12-04T17:16:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix test name\n"},{"hash":"7fb69170d1f96ab619a30f6f84c0c8a3cd8f1bf6","date":"2017-12-04T17:18:10.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix stack traces for \"platform exceptions\"\n"},{"hash":"c1fd4aa90029ad17b24854673516b8499994f882","date":"2017-12-04T17:24:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix POSIX compile errors\n"},{"hash":"7f5c378866533173f2042d1f0a8d84da9586d7a0","date":"2017-12-04T18:30:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove a little bit of vestigial code\n"},{"hash":"53b3890e4f15fa42bac40e2fef7ed1c968626069","date":"2017-12-04T18:31:27.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Free platform exception data after calling the handler on POSIX\n"},{"hash":"92e9544fd086b1b8882c0e719fac76b62324f49e","date":"2017-12-04T20:38:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Blake2b: Dynamically allocate the thread state array based on number of threads, and make sure it's aligned/padded to avoid sharing cache lines between threads.\n"},{"hash":"70478017eab0c369eb3c0f659025402ef2d0dec4","date":"2017-12-05T14:41:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix Floats::asString printing the deprecated \"infinity\" instead of \"inf\"\n"},{"hash":"ad10ae6753839e72c39fe4953ded204378e7db02","date":"2017-12-05T14:42:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add macros for intrinsic functions with up to 7 parameters\n"},{"hash":"f650bc0e1872ae82772bde2d427efc92feb1e870","date":"2017-12-05T15:44:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix WAST printer producing names that possibly conflict if the disassembly names includes a name with a numeric suffix and the same name without the suffix\n"},{"hash":"1dc481e2a7fd5544500748e57355fcc67531ec2f","date":"2017-12-06T01:48:39.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Throw an exception if atomic.wake wakes more waiters than can be counted in a U32\n"},{"hash":"79fe2481bceeb9890e3e38162d8d073f63987023","date":"2017-12-06T01:50:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Make the WAST printer handle the shared flag on memories and tables, and move it to immediately after the table size in the syntax.\n"},{"hash":"4655392f9ead7cecb5accdd63d097e82586eb7ac","date":"2017-12-06T01:51:09.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Allow importing/exporting mutable globals by default\n"},{"hash":"a35d1714119087a52677e6ee606829da0d1dc3d6","date":"2017-12-06T02:03:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Like a broken record...disable importing mutable globals until the spec tests are updated\n"},{"hash":"456da1bd3b55bcb3ef1df9b8769f40fe57fedea7","date":"2017-12-06T02:25:46.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Rename wake, i32.wait, and i64.wait to match proposal change: atomic.wake, i32.atomic.wait, i64.atomic.wait\n"},{"hash":"a641045802adee8de50d109b08b325549a39364e","date":"2017-12-07T00:01:36.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Limit table size to 2^32 instead of 2^32-1\n"},{"hash":"6e64d287eddd56f74cb3011a1a6eb1a1b393fe12","date":"2017-12-08T17:56:04.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Consolidate the various occurrences of maximum table size in a global constant: IR::maxTableElems\n"},{"hash":"b875bcea05756ad74a23253b44b22aa98cafd3bb","date":"2017-12-08T17:56:41.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add an option (on by default) for writing the not-yet-standard extended name section\n"},{"hash":"da8318756e4049d017043014a3db91907b716da3","date":"2017-12-08T17:57:22.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix exporting mutable globals still being prohibited when IR::allowImportExportMutableGlobals=true\n"},{"hash":"60a6413958f3fce0f68f7ff1444fdaa657b9135e","date":"2017-12-08T18:07:01.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix infinite loop when disassembling jump tables\n"},{"hash":"2c6b3e297fc50d537bc83a9d9191eca6e0d6cbfb","date":"2017-12-08T18:10:08.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add Runtime API for creating exception type instances\n"},{"hash":"eed504ffc8bd562024e9cec165714f55e49ddd1e","date":"2017-12-08T19:23:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replace some calls to Expected<T>::get() with cantFail.\n"},{"hash":"db3b9aedd49d77f8f46f33cbe5f4f7c1a0c2529b","date":"2017-12-26T15:59:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Print the contents of the linking metadata section as a comment when disassembling\n"},{"hash":"2a79a13ab00eed3d43e2574d9ba6dc5445b48e47","date":"2017-12-26T19:11:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try reenabling OSX builds with LLVM 5.0.1\n"},{"hash":"a997026f2b265f52cf2e7727118f20a00cce09e9","date":"2017-12-26T20:13:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Redisable Travis on OSX\n"},{"hash":"95c560ec9875651f11fe74d266e94b9ba2a42380","date":"2018-01-12T22:15:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Print the module start function to WAST\n"},{"hash":"461b8c4e0e0fdb27aa2519c90c9cf3aa13630006","date":"2018-01-12T22:15:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Print COMDAT linking subsection to WAST\n"},{"hash":"0f90f9bdabd594b7e543dcc55b83d1fb7b57e9b0","date":"2018-01-13T17:27:26.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Protect against two intrinsic objects being registered with the same name\n"},{"hash":"45153136ced537f97eb8ed4635fdcc0b71b54ae1","date":"2018-01-13T17:28:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add an option to dump the LLVM JIT output to an object file\n"},{"hash":"7b2f9b02669af2da720190de4b049e684e573898","date":"2018-02-12T15:20:53.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Saturate untrusted WASM addresses to the end of the linear memory when they are used by native code to protect against Spectre bounds-check bypass attacks\n"},{"hash":"449a6754f1ce9dbcaef973c1da23664920621bf7","date":"2018-03-06T12:21:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Refactor the JIT to access memories and tables through a \"pinned\" register rather than immediate addresses compiled into the machine code. This is meant to support \"forking\" WAVM \"processes\" within the same host OS process, and is part of what's needed to support caching the JITed code.\nTwo new kinds of runtime objects are added:\n- Context holds the thread-local state of WASM mutable globals. It doesn't create a stack or an OS thread.\n- Compartments correspond to an OS process. A module is instantiated inside a compartment, and can only import functions, memories, tables, and globals that were created in the same compartment.\n"},{"hash":"6d50d67763cbd578c13b048912c60aab32113b3e","date":"2018-03-06T12:44:52.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update Travis to use GCC 6 and clang 5\n"},{"hash":"032fda9c38e781eafea5b4b986c4d839376a9f05","date":"2018-03-06T12:53:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix travis?\n"},{"hash":"26135bd6a1c587fc293410c008ce6e0ebd84e478","date":"2018-03-06T13:05:37.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try GCC 7\n"},{"hash":"5f1c2f58e5091e9b9fd7016873c014701f395d9f","date":"2018-03-06T15:29:43.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement new type use syntax for call_indirect\n"},{"hash":"2739cc81896faf219bcfc705581667d43a477d37","date":"2018-03-06T18:25:29.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Avoid alignas(4096), since older GCC versions don't like it.\n"},{"hash":"034fa4c0989c294faf871116c0a36c66bb9f714f","date":"2018-03-06T19:14:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Move calling the start function outside of module instantiation\n"},{"hash":"1cb1743ffb2a380afbf7a5246d8140c1f061744e","date":"2018-03-06T22:00:44.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Work around LLVM optimization that folds FPTrunc(FPExt(x)) to just x when WebAssembly expects it to convert signalling NaNs to quiet NaNs.\n"},{"hash":"7e48158f994e0aacad021213e72f7556c57c4a61","date":"2018-03-06T22:01:31.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Require call_indirect/grow_memory/current_memory reserved immediate fields to be zero\n"},{"hash":"7c9dbffe3aa141c02d80cdbf3985cb5c2cbec873","date":"2018-03-06T22:02:47.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Support (offset ...) form for data and table segment offset declarations\n"},{"hash":"6e9fe4e7c855056446bae88de4cbd97aeab1a9dd","date":"2018-03-06T22:03:19.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Update spec tests to latest\n"},{"hash":"24f6edabc41cdbdcc7efd03fdeb78690516b4966","date":"2018-03-06T22:22:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove empty WAVM_known_failures file that was \"failing\" testing\n"},{"hash":"65cef8133ba3ac832ad9f3ad362039a1c847331f","date":"2018-03-06T23:35:59.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fleshed out the Unicode functions (not used yet)\n"},{"hash":"e4879dab1166e55c0dbcde430b601128e7587704","date":"2018-03-06T23:41:49.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use Uptr instead of U32 for memoryRef/memoryArrayPtr addresses so the caller is less likely to need to check for overflow\n"},{"hash":"a38470adffbcfcb264c2c4c53d235b34de7a56ca","date":"2018-03-06T23:42:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Correct a comment\n"},{"hash":"1eb1d5a53ad96c459c4efdbcd7f560c9fcaf63c7","date":"2018-03-06T23:43:54.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Added a WAVM_DEBUG #define that is always defined so it can be used without #ifdef.\n"},{"hash":"6d76d1ebd14df39af0fd7ff5131e3a9f75f11817","date":"2018-03-06T23:56:57.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Don't bake TableInstance pointer into generated code\n"},{"hash":"25acac25770b88d1f3b499548a7172a3e7779365","date":"2018-03-07T02:14:05.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix reserved byte serialization for call_indirect, grow_memory, current_memory.\n"},{"hash":"5953adaf4c69f48b3145291ec63f11fcc028ed31","date":"2018-03-07T15:53:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add ENABLE_RUNTIME CMake option that compiles WAVM without its runtime components\n"},{"hash":"b480b7e148c52dd851481ea2a4eafbd8794a6593","date":"2018-03-07T15:56:03.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Remove redundant skip-stack-guard-page test that was integrated into the spec test suite\n"},{"hash":"2de243392ab1d48e6307cccb2963b4edadcf99a8","date":"2018-03-07T17:13:33.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Replace compile-time options for different features with a runtime FeatureSpec\n"},{"hash":"524cf251a9e5392551dfcdd13766c2cb26384925","date":"2018-03-07T19:30:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Guard access to the global arrays of memories and tables with a mutex\n"},{"hash":"f81be736a14e707df8336f9652072170395e5245","date":"2018-03-07T19:33:23.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some cases that accessed the compartment arrays of contexts/memories/tables without holding the lock\n"},{"hash":"9abd8183ef3a4b4b33993de47de0c504056c7190","date":"2018-03-07T19:35:11.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Add a cloneContext API that copies mutable global values from another context.\n"},{"hash":"13df5898906f1296517544e49845eedc23932a6a","date":"2018-03-09T01:32:51.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Upgrade to LLVM 6.0\n"},{"hash":"f5d68fef72c6afb11aadd057e715ed8b0296f5c8","date":"2018-03-09T01:45:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Try reenabling the OSX Travis build\n"},{"hash":"de0e480ab4dcf04379a19fe260f3803d021cd1fb","date":"2018-03-09T01:54:56.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix some OSX compile errors due to offsetof returning a long\n"},{"hash":"9448414e7b7798c2b1ce47d02eb4f6eb2d91a866","date":"2018-03-09T02:01:55.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use OSX 10.13 for the Travis build\n"},{"hash":"488185110b54e26d935aaff283755dba961396e9","date":"2018-03-09T18:43:25.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Turn LLVMContext global into a pointer to avoid issues with destructing it on exit\nFixes https://github.com/AndrewScheidecker/WAVM/issues/77\n"},{"hash":"75069fa2e2931f77616026029a4684f748399be4","date":"2018-03-09T21:56:00.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Use WAVM_DEBUG #define for LLVMJIT configuration-dependent options\n"},{"hash":"940ec12d2c1df715602c58db3a7305af10003db9","date":"2018-03-13T12:28:48.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix WAVM_DEBUG #define for MSVC, where CMAKE_BUILD_TYPE isn't used\n"}]