[{"hash":"5c839bb462f43f7a356593f537edb08014d0f25f","date":"2015-10-29T19:43:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import emscripten bits\n"},{"hash":"2c9072c4e58f6908d68a401557479b9e74456df2","date":"2015-10-29T19:43:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test\n"},{"hash":"cd9ae15a0fdf560d2f85919d7d5220e440ec7928","date":"2015-10-29T19:43:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add build script\n"},{"hash":"2379c7f345e55ea04a91a78f7b64193487264d3d","date":"2015-10-29T19:43:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add bin dir\n"},{"hash":"4e7ef8331977cf53d7160d8928ad343d573e204b","date":"2015-10-29T19:43:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add .gitignore\n"},{"hash":"b3b8d931068ff09e245233451b4f1d47648f1e2b","date":"2015-10-29T19:43:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add readme\n"},{"hash":"ece9ebc81b7011beba27a48bd723046392e34147","date":"2015-10-29T19:45:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add missing headers\n"},{"hash":"afdeefd0df0e2806af334954021e437d78659c11","date":"2015-10-29T19:46:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme updates\n"},{"hash":"4fbd4f442a899e1c87cb1a60f52916339d42534c","date":"2015-10-29T19:51:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm updates\n"},{"hash":"d455c96f4d4b6289c6a75dd918d138de5129ef04","date":"2015-10-29T20:03:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add testing\n"},{"hash":"f0058e1fb8e1273a714f7a2526fe19addb2c0f4f","date":"2015-10-29T20:10:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check.py improvements\n"},{"hash":"29bea2e426d3506a3fd510c9539797a57f542204","date":"2015-10-29T20:11:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support 'almost asm'\n"},{"hash":"4fc6bdf853d112f235cd70ff6608f5b38283a733","date":"2015-10-29T20:15:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support emcc --separate-asm output\n"},{"hash":"2d131f6fe75cfc9477d2a326aedb1b634a3193a6","date":"2015-10-29T20:16:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add emcc output testcase\n"},{"hash":"ea64101b46407fb1e0f3f6c257f1089253b961ac","date":"2015-10-29T20:17:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix check.py\n"},{"hash":"ded68e787b5cfa2cf50f6598354003e40ae92e18","date":"2015-10-29T20:21:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nicer check.py output\n"},{"hash":"1c10dce09bd5cd5596f71e398c3924bd26a10901","date":"2015-10-29T20:42:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add example image\n"},{"hash":"106fc21e9175b9c1e8d299f6093cc56b169cb876","date":"2015-10-29T20:44:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update name\n"},{"hash":"4bcc077b34d4ea936415039efd2172043bde0425","date":"2015-10-29T20:45:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix readme\n"},{"hash":"3da36398325dde5246c85107a8472b5839b6fad5","date":"2015-10-29T20:46:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mention c++11\n"},{"hash":"310ef3b5425da52ccacb3bbcba70193e7e11b8cb","date":"2015-10-29T20:46:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve text\n"},{"hash":"44d196ec4a14478924ccb585a8c5b028050ccc91","date":"2015-10-29T20:48:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mention opts\n"},{"hash":"9ad8db8fb7fbf6be577682b88a12f58b841ed296","date":"2015-10-29T20:49:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve example\n"},{"hash":"a005bec46e86ec4b51c780ef3e21e89532fa8457","date":"2015-10-29T20:51:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"syntax highlighting\n"},{"hash":"12e127b0bc921fedd036119eabd605aaedf3af5c","date":"2015-10-29T20:52:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"660759c84a256c15124a0e5d3ffcfbf8f02946bb","date":"2015-10-29T20:54:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"notes\n"},{"hash":"2d0cdc28ee75c46d65f8e2e251010cd3698dc9a8","date":"2015-10-29T20:55:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"todo\n"},{"hash":"8874a52a603e1c275ff3dea90d0b1ad312294c5c","date":"2015-10-29T20:56:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure deterministic order in check\n"},{"hash":"665b5a7114e4c39671fbcb41bd76f9b665b2bda7","date":"2015-10-29T22:58:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize away trivial blocks\n"},{"hash":"107261df1decdb33b5baeb18844e2e5e0d4a9880","date":"2015-10-29T23:04:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore diff files\n"},{"hash":"773a24bb0b597255ab6c7fa2d33e3b7cc1a853cf","date":"2015-10-29T23:04:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update example\n"},{"hash":"a25d742c05732e9168494b434e15889352e3ee60","date":"2015-10-29T23:04:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"38b9478a1572af74b0aa7e45810fd5c7c4e27329","date":"2015-10-29T23:24:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve check.py\n"},{"hash":"067c77c9607764405bdf42023c3105a7e6ee81fd","date":"2015-10-29T23:41:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"pretty-print wasm interpreter errors\n"},{"hash":"d9ae6b3dcccf32a46e92d18105dcf38702e25573","date":"2015-10-29T23:44:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix export printing\n"},{"hash":"c9cd6c7726df7ee0ca4cb6ecf969d98c50335046","date":"2015-10-29T23:56:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix check.py, do not try interpreter if not provided\n"},{"hash":"9f9e8f848dd3472e4ffa9f1ba301dd261f5e10da","date":"2015-10-29T23:56:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix function type printing\n"},{"hash":"14c68d96986a61509c76a45db3b834d5d94de0cc","date":"2015-10-30T00:00:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a faq\n"},{"hash":"afcd6fdb7fc9158a76616de552b53bd1c2b233df","date":"2015-10-30T00:03:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix load printing\n"},{"hash":"19abe35b2c6d191e14170c993e757cee786867cb","date":"2015-10-30T00:11:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore switches for now\n"},{"hash":"4d319b84d83ad3168ee798c52071e4b4b831e042","date":"2015-10-30T00:19:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use Nop\n"},{"hash":"d93c05bfa9a7fc813c31c7972e6680d6ef0277d2","date":"2015-10-30T00:26:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix Convert\n"},{"hash":"ec5e1d0ffdc2769d754cc7c679c3b286f787bb6e","date":"2015-10-30T00:32:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't emit empty blocks\n"},{"hash":"58df6d31beaedacbd7e6d017b12cd31d088d9339","date":"2015-10-30T00:35:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix conditional type\n"},{"hash":"891de7b9f3c173095b0e09d0f9069c14c6bd2bc4","date":"2015-10-30T00:50:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print call_import properly\n"},{"hash":"c9b8b17f6f5d01511bcfd511bfda28584533b467","date":"2015-10-30T00:55:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print a memory section\n"},{"hash":"88b6549b74dd767733cd823de410e00067a79756","date":"2015-10-30T02:58:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test auto updater\n"},{"hash":"3e8516cb75e7941da0b16443fbd4b4a298fa3644","date":"2015-10-30T02:59:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"double fixes\n"},{"hash":"f32ab820be47c968685dc5e24e27218bb0c9861c","date":"2015-10-30T03:09:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix large int constants\n"},{"hash":"39cef85d01a43b4f1352c065ddccc58d3b62bfe5","date":"2015-10-30T03:19:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clz\n"},{"hash":"0b866305ecee485ec5ef2a314fe79ac2df52b21a","date":"2015-10-30T03:21:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix unary printing\n"},{"hash":"86626450d7bc165be94efb004e9e3699074777a4","date":"2015-10-30T04:39:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nop imports; all tests pass\n"},{"hash":"57b80000a96e08592237f36dc46ecf60932ab6e4","date":"2015-10-30T16:59:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add optimized hello world testcase\n"},{"hash":"cd0ada7a34736790d368c11ec536dd32c36aeffa","date":"2015-10-30T17:00:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"not on function pointers\n"},{"hash":"1f3825ea4fd717de015705651b9911a47751f13c","date":"2015-10-30T17:29:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse large negative literals properly\n"},{"hash":"d93ca9e91e89e6ca9dc3c974e6dfd3329a3d4f17","date":"2015-10-30T17:54:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix printing of large negatives\n"},{"hash":"dbb84c00b4bf99340fab321d7e6a8105ab56d643","date":"2015-10-30T18:30:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"debug note\n"},{"hash":"418ebad61c099737b4fd56f3030b1fd1e0e89a2b","date":"2015-10-30T19:19:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix type detection of globals\n"},{"hash":"f7fc8052ffaa6ece619a2c5c98c7025ca45acd5f","date":"2015-10-30T19:52:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle minified function tables\n"},{"hash":"c720a74951ef0d7f472b639c3be617a551a68df7","date":"2015-10-30T20:54:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"cleanups\n"},{"hash":"9b799d7164478bf0c1463ed8ac804f65704000df","date":"2015-10-30T23:38:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix float constants <1\n"},{"hash":"dce3791b402cc1e49da000cfe918bb21e81b4a6a","date":"2015-10-30T23:47:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix double compares\n"},{"hash":"b8b69e896b18efbe553bf1c01e4eb3acbfb909f1","date":"2015-10-31T00:02:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix logical not\n"},{"hash":"4a99322972bd744cd97825f6373f1eee3b3d35b1","date":"2015-10-31T00:32:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle aliasing local and global\n"},{"hash":"0fd1b5602dd4d55abcd264ee7fd48a17c2780271","date":"2015-10-31T00:41:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix conversions\n"},{"hash":"a6701a55871bdccd60445da4a47bcc63840c0115","date":"2015-10-31T03:00:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactoring\n"},{"hash":"6ebb87ce79d6aed56addfc0d275ee4e93d143469","date":"2015-10-31T03:52:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactorings and begin interpreter\n"},{"hash":"2d6a5ed822740a6ac53d1807fe2111bee5098bc6","date":"2015-10-31T04:01:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactoring\n"},{"hash":"51be0e93e50c3717cb8e4dff47000a494e67b29a","date":"2015-10-31T04:54:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"progress on interpreter\n"},{"hash":"3067079eec5759fbbbf81872b32a9ae4a2dd99fc","date":"2015-10-31T05:13:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"function scopes\n"},{"hash":"9f8a400879dcd35853e6c42bd1bc53c8c3fa51eb","date":"2015-10-31T05:27:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"getlocal/setlocal in interpreter\n"},{"hash":"e12434696a4594b2a2a77c91609a7b18232f11b4","date":"2015-10-31T17:02:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"load and store shims\n"},{"hash":"16414bf70e5143726907cbeecd868a5439e291c9","date":"2015-10-31T17:08:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"interpret all calls\n"},{"hash":"f7c1b4907c40dfd46da8e86f2c23412f8603479a","date":"2015-10-31T17:22:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unary and binary\n"},{"hash":"6d2dec86df49087c9e0a8f530e47fe9fb344e6e6","date":"2015-10-31T17:28:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"compare\n"},{"hash":"2824e966bb1dc9cbc90365b39000540f84fae82c","date":"2015-10-31T17:31:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"convert and host\n"},{"hash":"3dd389f52b556530ec0514fac67277a41a21b47e","date":"2015-10-31T18:05:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactoring\n"},{"hash":"b39e36e0b3cc74de46d62f7448058942240555c5","date":"2015-10-31T19:14:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to build interpreter/js\n"},{"hash":"dcdf2e222f0b42c71ca41f7e37bc77decfef37f7","date":"2015-10-31T19:30:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to sketch out interpreter/js\n"},{"hash":"81e35a5fdf894232e4167a9d66c7b93ecf31ea41","date":"2015-10-31T20:29:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"progress on wasm.js communication\n"},{"hash":"39db17f164e21473d839272db2271791259666d7","date":"2015-10-31T20:45:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"load and store in interpreter/js\n"},{"hash":"547867eb0e78cac6be7f35bbd80c6582224df807","date":"2015-10-31T20:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"JSExternalInterface::callImport\n"},{"hash":"6512f29a40c72979c05e73318b957e425363980e","date":"2015-10-31T22:48:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare for polyfill testing\n"},{"hash":"a8963f481e5db2c212a7e7fa83d3599c65d7ef5f","date":"2015-10-31T22:54:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make emcc_to_polyfill emit a.wasm.js\n"},{"hash":"d726a11c7ee90b0bd2dfd3be1774fe3367da0432","date":"2015-10-31T23:09:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"polyfill fixes\n"},{"hash":"2635938b578aa55419bd2a59b837dfaeb546ddcc","date":"2015-10-31T23:46:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize emscripten builds\n"},{"hash":"3e618d9570b278ca9e94663240cf33d4f3cb22a9","date":"2015-11-01T00:13:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call from js into wasm\n"},{"hash":"db878524df6a123e7e96d4c153f2b7f125741422","date":"2015-11-01T00:31:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"polyfill fixes: more memory by default, and a type correction\n"},{"hash":"60690631a5f9f29ec326021d562e4a390f6c867f","date":"2015-11-01T00:41:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"interpreter debugging, and fix visitBreak\n"},{"hash":"bbdaf1ce90c0782d70a66cc48f9e9a7b90a8ca22","date":"2015-11-01T00:44:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix store\n"},{"hash":"0aa0bf8fe5e87cfafee3d13209f0457b3e3f7764","date":"2015-11-01T03:00:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"checker improvements\n"},{"hash":"b85cd243b3e289e0dda56d37cd7649883a085e6a","date":"2015-11-01T03:07:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add simple add test\n"},{"hash":"4f4a650c67d5105fedf44b83c06a51102947c045","date":"2015-11-01T03:10:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to test wasm in c tests\n"},{"hash":"cfb0cefcf93417a30c03bca7ff0a6c4d0428b1b5","date":"2015-11-01T03:22:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"debugging\n"},{"hash":"4d566bd9c9084cb57adc9d206cac612bec02c63c","date":"2015-11-01T03:46:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix interpreter bugs in binary and compare; working add test in wasm polyfill\n"},{"hash":"77b63fa4db80eeb23ec4187f0a6d0f716dbd7edb","date":"2015-11-01T03:59:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"289015c222e43eea2fddfede5efaa0436ddfc4a4","date":"2015-11-01T04:02:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize builds\n"},{"hash":"0f0167441eee217e565400d2a4ac88ded545e464","date":"2015-11-01T04:03:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix typo\n"},{"hash":"4536c4935aa936505c56d600c78e814a07393430","date":"2015-11-01T04:25:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"better error on bad # of params\n"},{"hash":"70e280d07d9bdc54d299daf85dfcf0cefd614232","date":"2015-11-01T05:02:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"int ops test\n"},{"hash":"3e87906af10d70e158a5ce34aac72baf35ace9d6","date":"2015-11-01T05:16:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test improvement\n"},{"hash":"b44b5f10b462f70a220a2b5ff435455419d39077","date":"2015-11-01T05:19:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"int fixes\n"},{"hash":"d8e4d241890263569bef12d706a1133dc594e7b7","date":"2015-11-01T05:32:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"641f7b4581eafc5d7d0afb9916ac7a0d295bb188","date":"2015-11-01T05:32:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"7b06b0157e4102393f36fd6a039a28fa2612b731","date":"2015-11-01T05:34:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"fb4151c56a72134f04152bed78f8fa73beb70f35","date":"2015-11-01T05:36:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"34203ee327de86071c4f35f2a237f3ea671e312c","date":"2015-11-01T19:17:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"not not free builder - we stil need its allocator\n"},{"hash":"04fb140a62205772b1b2347e17a38e0edd958ab8","date":"2015-11-01T19:19:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not optimize in emcc_to_polyfill by default\n"},{"hash":"df61218b7587aa2915eeb3620e35f10b372d788d","date":"2015-11-01T19:19:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asserts in wasm.js\n"},{"hash":"70a2b7753dac3967e45a367a940589e34bd065ea","date":"2015-11-01T19:19:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme typo\n"},{"hash":"adca39121c270b4e31776ef32733788b73b4ccd1","date":"2015-11-01T19:19:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor out dynamic_cast\n"},{"hash":"bbd8b2eb841b71c4801e2d0a942550709bb22574","date":"2015-11-01T19:22:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename emcc-to-wasm.js script\n"},{"hash":"b0f8bb17b8695698541f241a37e9b43cdd441206","date":"2015-11-01T19:34:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support .cpp files in check\n"},{"hash":"f8ca2533c9c3a389375e4f6b4b78f09eb6dee30c","date":"2015-11-01T19:36:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add float_ops testcase\n"},{"hash":"904aba781d4cdd7074d2f8d4faa833207a31e83e","date":"2015-11-01T19:38:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix execution of compare on floats\n"},{"hash":"34b3a09aae11f04deb08c14954707f99b0d49b83","date":"2015-11-01T19:51:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable imports in emcc builds\n"},{"hash":"bfc059c04c55a86603e540109367e882e7026cdc","date":"2015-11-01T20:25:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix JSExternalInterface::callImport\n"},{"hash":"47573b3463559f4978b417717b5b5ce2f3bed3c1","date":"2015-11-01T20:54:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix imports from global.Math\n"},{"hash":"835e1d8081af43b995ada5c701d96a420b0b728c","date":"2015-11-01T20:54:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid assertions in basic ops tests\n"},{"hash":"0da541c634a8c72c9ee5af8f2546a541ba7c5aae","date":"2015-11-01T21:22:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable part of float_ops.cpp, which requires memory ops which are not tested yet\n"},{"hash":"dd26c6de358b78900bb4780f7fa640812776d129","date":"2015-11-01T23:00:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add control flow tests\n"},{"hash":"b25e59d51d828f6a818141a715e9008f05e7063f","date":"2015-11-01T23:00:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove hello_world.c until it passes\n"},{"hash":"44e83f2fb039a38b0764a172aa7c64ec3290d8c5","date":"2015-11-01T23:31:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove condition from break\n"},{"hash":"b2e067893efbe22132b210d5af9026b7bd59c270","date":"2015-11-01T23:39:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix do-while loops\n"},{"hash":"b66a85cb7379b1ec604cceed7af101227550d710","date":"2015-11-01T23:50:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize away breaks at the end of a block to that same block\n"},{"hash":"5fe20a3b2fabd4f0f2497ff01040b7a951cf0adb","date":"2015-11-02T00:07:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"auto-init optional fields\n"},{"hash":"5ad0538c67dcc27c28fb99e058995de110550de1","date":"2015-11-02T00:22:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't set auto-init fields\n"},{"hash":"01fa6454d5b375ea85ba8662306cb0ac30a1de29","date":"2015-11-02T01:12:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm walker replacement logic\n"},{"hash":"a3e712df50f43f6a176a750043c32c752f2dfe2b","date":"2015-11-02T01:17:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve unnecessary block removal\n"},{"hash":"c78f1e7ff9197f211e1798ff53281d08ad59110d","date":"2015-11-02T01:51:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add calls test\n"},{"hash":"e4734d90b261d47b7fbf17996b59564a0df4e706","date":"2015-11-02T02:03:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add tests for calls to js libraries and calls with the wrong # of arguments\n"},{"hash":"2740fa0342c11481e3dad18c775a1aa0b862e8d8","date":"2015-11-02T02:50:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test conversions\n"},{"hash":"c0a332693eceec4171c4e2fef30924e4f22771fc","date":"2015-11-02T03:13:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle float and void types in js<->wasm calls\n"},{"hash":"c8cbfbeb8d1cc108bbb0f1a7f145a50c06059c0e","date":"2015-11-02T03:13:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add mem test\n"},{"hash":"90304bf9703e768fcdf87914e6117f87beea3f59","date":"2015-11-02T03:16:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"tell emcc to leave <1024 for our use\n"},{"hash":"d96c63dc0e6b0a9ccf0c327d8c6c0cb61f95d57f","date":"2015-11-02T03:57:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor a lookupImport method\n"},{"hash":"bb6f33c9f19581e2ea60b46653bb1a10ced4a2eb","date":"2015-11-02T04:06:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid some warnings\n"},{"hash":"d8c2d69dd253bd6f67e1f3c374be2c20d43dfc03","date":"2015-11-02T04:55:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"save module and base of mapped imported globals, and fix writing of mapped imported globals\n"},{"hash":"4990b96eaa6ce91ecbb84b784df5622f9742f47e","date":"2015-11-02T04:55:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add stack test for an imported mapped global\n"},{"hash":"c4cbc717311f50607c420c2d388bafd82e7ef518","date":"2015-11-02T18:53:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"debugging support in interpreter\n"},{"hash":"cd36ba627d84d5ac27948bb30296d34f72b765f8","date":"2015-11-02T19:07:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more intepreter debugging\n"},{"hash":"1e3848b2e5f0ea947d67954ab3044a3653eacb23","date":"2015-11-02T19:07:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix import call return type handling\n"},{"hash":"8d25878a2d49199079b7c81a396ee2d4fb03032d","date":"2015-11-02T19:25:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm.js debugging\n"},{"hash":"1a9469b0ed84be32dc264effbe7736a03cb7b608","date":"2015-11-02T19:44:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add do-once and while-forever tests\n"},{"hash":"25a335b740da7e7f199edcad617251d19aa6b18b","date":"2015-11-02T21:07:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"abort on switches, for now\n"},{"hash":"0da73c1845a58823c0fde138115849a65f79e0ea","date":"2015-11-02T22:52:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement switch\n"},{"hash":"a3abf0bd1ab3707dda013fa59ef3f2e5c74b70e9","date":"2015-11-02T23:21:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow printing none literals\n"},{"hash":"c711d4407abe1d02a7474329d7f6fa2b315a8df8","date":"2015-11-02T23:22:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move wasm debug printing behind flag\n"},{"hash":"a25a0091a2066a390ee6eade7e6ca1fc6309292a","date":"2015-11-02T23:22:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch\n"},{"hash":"79c1a48d3b50c6298f4b89c3237df426aebd3f75","date":"2015-11-03T00:08:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix load&store\n"},{"hash":"1c25d8bd86c466306cc8e0bebed4fe7ae066e64e","date":"2015-11-03T01:30:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix while (condition) loops\n"},{"hash":"2510ac0df0e68cedfdff4e16224413f86a45e076","date":"2015-11-03T01:31:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests, and add working hello world test\n"},{"hash":"04f43409abbebd9d3d07f1e38037ba47e6906fa7","date":"2015-11-03T01:38:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add optional arguments to check.py\n"},{"hash":"786a3064b9f49b629067213e859714f35258dd99","date":"2015-11-03T01:39:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add fannkuch test\n"},{"hash":"ef4f2c7490600a0d868eb5a426a0617d055d8cb3","date":"2015-11-03T01:41:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add fasta test\n"},{"hash":"a18f879612876860429aa153336be293a9368310","date":"2015-11-03T05:32:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify emcc_to_wasm.js.sh\n"},{"hash":"3b0fc2374d042ba81e16ee09f57cdef9891be065","date":"2015-11-03T18:14:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor arena code\n"},{"hash":"aa122695e53bb2c39175e2d04f626b2cd6c2e911","date":"2015-11-03T18:18:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor pretty printing code\n"},{"hash":"3505f2162d92fde5edb590254ec9553146b053bf","date":"2015-11-03T18:22:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename isWasmTypeFloat\n"},{"hash":"ff95c47b26530d91192ee932ec1a8936ef4758c8","date":"2015-11-03T18:27:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor printFullLine\n"},{"hash":"948f9255e2adac2b9e8b290742f06a515c14d043","date":"2015-11-03T18:50:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"cleanup and emit imports\n"},{"hash":"a4c2588fd5144b0b8759865d42138e1f6bb228a9","date":"2015-11-03T19:00:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add memorySize to Module\n"},{"hash":"8555bd445598fdcba593eef3fc4bd5e527b19068","date":"2015-11-03T19:43:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comments\n"},{"hash":"5b30873eb082df02a79e7daa2f3aa8b59dab358a","date":"2015-11-03T19:51:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comments\n"},{"hash":"679a41cce15def601a57a88ced7e8ee03b59b8df","date":"2015-11-03T22:07:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start work on shell and sexpr parser\n"},{"hash":"820c7c66829f4c64b7566f45163cdadf31480163","date":"2015-11-04T01:24:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"progress on wasm-shell\n"},{"hash":"d64776c06b70afac0a05c51f4538743cbb74a8c2","date":"2015-11-04T01:28:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"main for shell\n"},{"hash":"f9ccaa4157bacd3a4690497bc8b5fa2e49ef739c","date":"2015-11-04T01:49:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"shell fixes\n"},{"hash":"687a7c439987b8cc5ee7d298f14b948a8c98350c","date":"2015-11-04T01:56:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"sexpression debugging\n"},{"hash":"0756845309f2cf3e5cd817dd3d25e727c96499ce","date":"2015-11-04T02:00:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start module parsing\n"},{"hash":"6e4bf311175ad8c8b4e2874ee1bfa0a997343c28","date":"2015-11-04T02:49:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement new select operator\n"},{"hash":"dd98b084f15b16f5a5a86c2d611f0c41f3bd724e","date":"2015-11-04T05:02:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parsing improvements\n"},{"hash":"48d593f3ba3505a60a6f37bc244998b8562e6137","date":"2015-11-04T05:02:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more parsing\n"},{"hash":"a0de6e95733602f7f246bb537af79e87c4a6070a","date":"2015-11-04T05:18:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"factor out float_\n"},{"hash":"e9b3051ed21cb6c406a95acbcb2a2d1f88396676","date":"2015-11-04T05:23:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix load and store\n"},{"hash":"643352df3c52022c3a13898fa00bdfa975e4e63c","date":"2015-11-04T05:28:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"break, if and nop\n"},{"hash":"0866a86b24beaccaf5f711a8aa99d1cbfbf77046","date":"2015-11-04T05:31:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"string parsing improvements\n"},{"hash":"200a70965a58698422b239b42a8b889eb8336abf","date":"2015-11-04T05:32:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add the functions\n"},{"hash":"6dc54fdfd2b0c40f43fe854e7a463d5b726fd650","date":"2015-11-04T17:39:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"build wasm-shell\n"},{"hash":"a99e4f20a773aa7d6698e126ff7f39290db54675","date":"2015-11-04T17:39:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start testing wasm-shell\n"},{"hash":"e28c0efc48adb5f49f4ef131681ddf55cf3b8de5","date":"2015-11-04T17:42:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix compare inputType\n"},{"hash":"0b54b574ba7227dd7ab60ab32fb2b7947cdecc32","date":"2015-11-04T19:50:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't put c++ types in a union if they need a constructor\n"},{"hash":"2cf75357101099e9bb6c59ca2688ee244286686b","date":"2015-11-04T21:30:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse function type\n"},{"hash":"af7374115dc89eda2365778ece51e71259b24745","date":"2015-11-04T21:38:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse loop\n"},{"hash":"240e35cdc436d705bc2ec6bbda0719944a34cc6e","date":"2015-11-04T21:50:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse calls\n"},{"hash":"c93259f03f7ff3c870e760fc04c954e546875885","date":"2015-11-04T21:55:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix load sign detection\n"},{"hash":"7b19d4aa053df8d48647d919d9e88dadc38976dd","date":"2015-11-04T21:56:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix rem sign detection\n"},{"hash":"c28bc968fb79fe144bfc08ada568936933a28edd","date":"2015-11-04T21:57:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update .gitignore\n"},{"hash":"4e062c10fb8d57be88da2e03fb58c86d57b07f2f","date":"2015-11-04T22:03:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"3fe4d9915bedb9abe564556d9c4de5d2b44783db","date":"2015-11-04T22:26:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add submodule for spec test suite\n"},{"hash":"76cd27e2e25db7d08578a261d29730b10491d1b5","date":"2015-11-04T22:36:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare for spec testing\n"},{"hash":"0ee26b62aa9a0a957f61c338ff4d9f8f0a1efdf2","date":"2015-11-04T22:52:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse import\n"},{"hash":"1f6860afeb96795bd3a2478dda2c55b2ecce34c8","date":"2015-11-04T22:54:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle ;; comments\n"},{"hash":"734241d4061886009b6f31913672a615d499f230","date":"2015-11-04T22:57:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit offsets\n"},{"hash":"87f90374a799beeb5b3541bb8e2870f0eaedd80a","date":"2015-11-04T23:05:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit align only when needed\n"},{"hash":"89ade169dc44964b55dbb1bcb584fb14beb70ebb","date":"2015-11-04T23:27:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"offset and alignment fixes\n"},{"hash":"98719470da218f2cbe2a256e478f56520a29f4dc","date":"2015-11-04T23:40:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable spec tests by default, for now\n"},{"hash":"2bb4b33e296f999d45b95b2252dfaa11e2ea61b5","date":"2015-11-04T23:40:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory\n"},{"hash":"9390921427885c22133933fb0b93d4ee39c3e726","date":"2015-11-04T23:45:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory fixes\n"},{"hash":"7f4bc21e8068a0463dfdff442a0d8d0f17d48fae","date":"2015-11-04T23:48:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse segments\n"},{"hash":"913dfe73a9fad60e8498160fcabb715cb966bc97","date":"2015-11-04T23:54:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor s-expression parser\n"},{"hash":"822857a28cec499a8ab2688f2784c961ae1d4c19","date":"2015-11-05T00:12:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare to run assert tests\n"},{"hash":"cb88dc19d126e9083011a5a72b3703abecea570a","date":"2015-11-05T00:36:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"compilation fix\n"},{"hash":"bd3840e9892389f7a3d415e673a5bd0878fb13ee","date":"2015-11-05T00:41:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an init method to wasm-interpreter\n"},{"hash":"452ba27711102ed0515b76761b86b3f1987292f5","date":"2015-11-05T01:17:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement shell interface\n"},{"hash":"8272166eb79bfff9e7aab73af125085ea7198b46","date":"2015-11-05T01:22:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement print\n"},{"hash":"8ba70395b294b8525f52c511054ca95eef1f2686","date":"2015-11-05T02:01:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"write segments into memory, and parse all lines of functions\n"},{"hash":"4a464bbd20dda5f67adc8721b7cc3df6f0f0f06f","date":"2015-11-05T02:03:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement assert_return and assert_trap\n"},{"hash":"f36058e50d0aadcdeeb68716e69af83c75a51cff","date":"2015-11-05T02:07:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix load/store traps\n"},{"hash":"d5629c6dbb9b8ab05963ea900be526087f5b0b00","date":"2015-11-05T03:26:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get first spec testcase passing\n"},{"hash":"c4fb7473071da6b26e2d1f3f32101e77e8aed26f","date":"2015-11-05T03:39:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add first passing spec test\n"},{"hash":"e0023d29a8beade034a219b060ddf00b7c4302e9","date":"2015-11-05T03:55:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more conversion ops\n"},{"hash":"6802e5795929d3725a96a3e2095b1ce836fb5335","date":"2015-11-05T04:03:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more conversions\n"},{"hash":"0a4c572572944f19f839ec3052ca79c4b2d950ea","date":"2015-11-05T04:16:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement conversions\n"},{"hash":"1b693d221566b017b63e002526bfbe724522e679","date":"2015-11-05T04:25:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"literal ==\n"},{"hash":"9b50ed1c8702c1e9236ae146a31c79be443f6c84","date":"2015-11-05T04:25:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify return values\n"},{"hash":"10d59ea332a69971a0284ae08379672eb0fb8477","date":"2015-11-05T04:25:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more interpreter debugging\n"},{"hash":"8bc2c03d245df4eab03f6545d55a9f2d34c261a3","date":"2015-11-05T04:46:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix hex parsing\n"},{"hash":"578461d1ad4fe34235f67016d703f568fdf92c6a","date":"2015-11-05T05:03:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"numeric fixes\n"},{"hash":"71447b6490106f5ce6c77ee882213aaac4548a35","date":"2015-11-05T05:06:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"trunc fix\n"},{"hash":"9db25c0958470f3da763861967c842f42fd112c5","date":"2015-11-05T05:17:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix string parsing\n"},{"hash":"e2b0a2a26eac53661964739c2be344c90850626d","date":"2015-11-05T05:33:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"trap on i2f overflow\n"},{"hash":"69f0f91c03f593ea6b5c30515afdf33d5c7827fb","date":"2015-11-05T05:46:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"infinity\n"},{"hash":"04388516db30df7184bd4eb3ef36498af9b9d9c7","date":"2015-11-05T05:51:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nan\n"},{"hash":"29677188899bb00ec7a06b85349ce9fc1b344094","date":"2015-11-05T05:57:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more conversions\n"},{"hash":"8e6f7d38f17c0d2c8f80a1f459405e07cce02e1e","date":"2015-11-05T17:52:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use a js exception in wasm-js trap\n"},{"hash":"1de298f63480e5ff006a09a50dc99d635c639b4d","date":"2015-11-05T17:59:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parsing fixes\n"},{"hash":"8839251f5148bcaff3b9b784afdf8937d2ba032e","date":"2015-11-05T17:59:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to test spec tests\n"},{"hash":"2266390bc8055693b26438ddd3544a8cb20d0db0","date":"2015-11-05T18:07:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix float conversions\n"},{"hash":"f50602c3b20810a6f83fc178145b99aaba478766","date":"2015-11-05T18:15:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix overflow check\n"},{"hash":"a1b24a29d50d6e060adf1ffd97d406bc5d71f290","date":"2015-11-05T18:22:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more overflow checking\n"},{"hash":"d16e8900cb98af97775e406c25d4a8b0c8c86039","date":"2015-11-05T18:29:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more conversion fixes\n"},{"hash":"9c5850f24085ac5843a799692d5099c8af98def7","date":"2015-11-05T18:42:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"conversion and parsing fixes\n"},{"hash":"f117fd69b9568aa31fd4b78b9ce0413220f4eb40","date":"2015-11-05T18:49:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nan reinterpretation\n"},{"hash":"445bfe103df655fa2c2b69bc61290bc13cbb7ac8","date":"2015-11-05T18:56:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix silly break bugs\n"},{"hash":"35e529924880d72103ee9f83b587821917f7a45a","date":"2015-11-05T19:10:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix load2 parsing\n"},{"hash":"180e1ce3f8e371fb790d1aa8f810bdff4bcd102d","date":"2015-11-05T19:10:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix store2 parsing\n"},{"hash":"01ef67f22fb597b7c749d2c82c93556cc8eea5b2","date":"2015-11-05T19:11:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add i64 load to shell\n"},{"hash":"272cf05739fb95e85d2cabb0dd7600c0f03c7906","date":"2015-11-05T19:15:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"i64/32 load fixes, and nice colors in shell\n"},{"hash":"a858f83483527f978c9ee70db4a91bc9c2c7022b","date":"2015-11-05T19:37:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor memory bounds checks\n"},{"hash":"c7751d19598dcb6262114f45a91ec2d05dd2f974","date":"2015-11-05T19:52:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"i64 ops\n"},{"hash":"2caa3c2dca33bb0a2b765c0fb75319ecc8a0e0db","date":"2015-11-05T19:54:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"i64 stores in shell\n"},{"hash":"eddea1fef9822b9444bc2e24c56ffdee1e05093e","date":"2015-11-05T19:54:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"endianness test passes\n"},{"hash":"4c7dc453f761391cc44646a5058036977272ca15","date":"2015-11-05T20:50:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"op type fixes\n"},{"hash":"a3df15c2c6e7cfad29ce41603f954573f0726659","date":"2015-11-05T21:04:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"error callback in SExpressionWasmBuilder\n"},{"hash":"126c556960bf550fdbab9e34ca5b666657c03a7e","date":"2015-11-05T21:15:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a validation checker to Module\n"},{"hash":"aea64c6fa801b926e090ef3feb2f16fe068b6f71","date":"2015-11-05T21:15:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix compare type bug\n"},{"hash":"cbfb617529f162889652548d5cbcc6232f9a02d0","date":"2015-11-05T21:35:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix shell bug\n"},{"hash":"5f96c2d7b8cf685547f8d5f08d9979dad816ee4d","date":"2015-11-05T21:37:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse denormals\n"},{"hash":"86c4e807f469b0133ec959a700ce6b76be31c2d0","date":"2015-11-05T21:38:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nicer note at end of shell\n"},{"hash":"ebc45c89ca10c0e91a717abf83d914bb225ced0f","date":"2015-11-05T21:44:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse more unaries\n"},{"hash":"8568369a26510b61db639f55142797385e59abcb","date":"2015-11-05T21:54:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"negative zero\n"},{"hash":"06eda827f3a5ec67e5302b8d51d82e300d07ff23","date":"2015-11-05T21:56:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"negative zero for f64\n"},{"hash":"cf40973ef6a2b96ba755626f71bec9802f8aca95","date":"2015-11-05T21:58:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"copysign fix for nan\n"},{"hash":"accc583fb7e0c859d7beffeab4120a79f527b282","date":"2015-11-05T21:59:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print negative 0\n"},{"hash":"a991641006b201ce99878d09d7c2ee61ab5d138f","date":"2015-11-05T22:06:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"negative nans\n"},{"hash":"842ed2be4c19fd72ba6c13457d59b58e9839027d","date":"2015-11-05T22:14:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unary ops\n"},{"hash":"6942a84d371eb80fdc066cac6a573a0a6a275f09","date":"2015-11-05T22:16:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use std:: in all unaries\n"},{"hash":"a3f479d3694ddfcbf7fe35658dff435fce0ae59b","date":"2015-11-05T22:18:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add more passing testcases\n"},{"hash":"18ed75e5a7da5dfd14e5a2c8d3fee5b9eaf7f284","date":"2015-11-05T23:01:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle ;; comments on top scope\n"},{"hash":"b991b575a8b97a4ff83cb99448c0249526e86549","date":"2015-11-05T23:21:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parsing improvements for local unnamed\n"},{"hash":"75e6a46d07ab4a641c2c5676e5276bab014555aa","date":"2015-11-05T23:24:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"b3ee570f3f513e580958e020806df5b014c8b7c0","date":"2015-11-05T23:39:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unnamed naming fixes\n"},{"hash":"6570d8cafc74e2ed6cf877f9b4a12c40ceac5e52","date":"2015-11-06T00:13:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor data structures\n"},{"hash":"a8a78dd5e6f83263085cb3e4dea21c0f10a60b4f","date":"2015-11-06T00:27:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse funcs with a named type\n"},{"hash":"9b8cbda9322b4aec1c86460396fcb472c768843b","date":"2015-11-06T00:47:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow accessing module elements by index name\n"},{"hash":"2c7f50ed2663212f4fe9e0b2b6b9b7d4822add36","date":"2015-11-06T00:55:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"function parsing fixes\n"},{"hash":"be88a262864f1bb3fa0f36be20030546451a2735","date":"2015-11-06T01:00:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"functions may have both params and a type\n"},{"hash":"9c14e35d31a91558e2a4efe02d11406665f1f6f0","date":"2015-11-06T01:12:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"find locals by index\n"},{"hash":"2d62cad7e131ffb8b7bde80542f72dd8d278a859","date":"2015-11-06T01:12:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Name::fromInt\n"},{"hash":"6106ce2475998d4c0564c7c71a2351cc8b539516","date":"2015-11-06T01:23:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor invocation in the shell\n"},{"hash":"46393bd1004c8fd679394ceaf0d64d1d5c3c616c","date":"2015-11-06T01:26:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"some error checking\n"},{"hash":"9f375280e1168645ba9be9a6b5889c58ebcf565a","date":"2015-11-06T01:37:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remember function type name, for later checks\n"},{"hash":"8e379d5409507acc75c3c2b1bdf6291297bfdbee","date":"2015-11-06T01:38:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor trap code, and add some CallIndirect traps\n"},{"hash":"ed491cb6677b1f992beae3c8935855aa8f05fb5d","date":"2015-11-06T01:40:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test\n"},{"hash":"2ad311f635c3d2d545283255cfdf1e7c0f4c7bc9","date":"2015-11-06T01:46:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle expected output from spec test suite\n"},{"hash":"12d6877a9361fa1a647541ba83e35272aeb319f3","date":"2015-11-06T01:56:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"addFunction properly\n"},{"hash":"2b314faa4c50738473f977dcf9adae3708363e16","date":"2015-11-06T02:12:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"discard return value if function has none\n"},{"hash":"0500af8981f03982aa68bee6d28e3ad339c01e28","date":"2015-11-06T03:08:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"has_feature\n"},{"hash":"9c9c4861ff747525d827dfd604700e6dd72066d3","date":"2015-11-06T03:14:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse inner comments and add more unaries\n"},{"hash":"72b5a8e5effd9043f1e868e399ef84648a869a15","date":"2015-11-06T03:16:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print all unaries\n"},{"hash":"bafa09a4ae9df0a1eb97847a2c1eb51bfac0de5c","date":"2015-11-06T03:18:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"divide by 0\n"},{"hash":"0f96bc8b34c00562597bbfbacead38d94cd14319","date":"2015-11-06T03:23:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove unnecessary Flows\n"},{"hash":"d6837db077213c218599e33042f1006118d97be4","date":"2015-11-06T03:29:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more int traps\n"},{"hash":"a7aef882a766e12847d021981b2f445c310aaf5e","date":"2015-11-06T03:48:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"shift corner cases\n"},{"hash":"194d152e26edca924dd272ee578c493d92154298","date":"2015-11-06T04:09:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clz and ctz corner cases\n"},{"hash":"a858e75a26e387d9d937ad72bc805c2624d61692","date":"2015-11-06T04:23:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"i64 clz/ctz fixes\n"},{"hash":"826fc908280887d57a6e7203c7da8326b9e40ba2","date":"2015-11-06T04:23:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test\n"},{"hash":"00588550c369ec56feaafe6993e2192d9def72d6","date":"2015-11-06T04:23:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update test\n"},{"hash":"2298da8a685268e0f4bdf6a7a03e47429c39105a","date":"2015-11-06T04:41:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clz fixes\n"},{"hash":"b78563b607f3a851dee9495ad21307b23e2c2666","date":"2015-11-06T04:55:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"64-bit popcnt\n"},{"hash":"d17aaea3ddf73369af3c7fad3f42a23928d4009d","date":"2015-11-06T05:02:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix print, and add imports test\n"},{"hash":"f85fca65799a61910d43a1099e7f33299df327ac","date":"2015-11-06T05:04:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add passing test\n"},{"hash":"52ef3cda1cd6f093f5260d685149fbbda9881bc3","date":"2015-11-06T05:44:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test\n"},{"hash":"b26bffbb8bb96fa6ba04779cceb9916d881b2517","date":"2015-11-06T05:45:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle (param i32 i32), noting when the 1st index can be either a name or a type\n"},{"hash":"dc9ef1be919cee495cfdc48ee10fcee184e93e58","date":"2015-11-06T05:56:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix shell memory access\n"},{"hash":"eeba133dffb9e50e8cb3cbd58b46ea02a9e34c1b","date":"2015-11-06T05:57:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test\n"},{"hash":"034596930c9d4ca3e771e78e03e06efc026fadff","date":"2015-11-06T17:08:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"convenience methods\n"},{"hash":"38b6e18b5b563ee235f426d695a89c20cb08ada5","date":"2015-11-06T17:08:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"host ops\n"},{"hash":"ec70dbcb17d8acace08e8abe9cc0ea30e0c825d1","date":"2015-11-06T17:20:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more module validation\n"},{"hash":"651b8e1bdac39036f5c3658966e55e6ba5897072","date":"2015-11-06T18:23:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"addExports properly\n"},{"hash":"d1d4442df4388bdcfd283a2cfb789ddce4834ef8","date":"2015-11-06T18:24:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"tolerate empty string as a name\n"},{"hash":"40a7faed41cfb05d7d877878e14a553457e284b1","date":"2015-11-06T18:24:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call exports, not functions, from the outside\n"},{"hash":"9a565d05ebafca5dd24ba4316af7efdfa0175a38","date":"2015-11-06T18:29:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse escaped double-quotes\n"},{"hash":"f5322cdb712db7bd12b6133164e6c5f95edd1873","date":"2015-11-06T18:32:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"assert=>trap\n"},{"hash":"bbd01fb6f40d315b24e061c6a99e5eb72ba33322","date":"2015-11-06T18:53:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print host ops\n"},{"hash":"74363f311d7fd4c2ead5bd6fcdcdb58648640864","date":"2015-11-06T18:57:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set max memory default to -1\n"},{"hash":"57f090cb36ac54f8077444af0be7b7605f7e4a17","date":"2015-11-06T19:01:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory fixes\n"},{"hash":"99d106aa4f8528e3ac537ecdc5d1cc8879c2f522","date":"2015-11-06T19:16:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory fixes\n"},{"hash":"3bb8401c5d8ae826da4ee42f67e7cf2bbda07c57","date":"2015-11-06T19:25:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"1c62fc77b7ac612f4a09a9b64aa1f6823809665a","date":"2015-11-06T19:38:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"trap on runaway recursion\n"},{"hash":"2de858ae8ed2d33011d7c0ad224438033cacc2e4","date":"2015-11-06T22:02:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"resolve local names at parse time\n"},{"hash":"b99d42ef849a5e655be40d6514d24bafe5febf79","date":"2015-11-06T22:08:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse select\n"},{"hash":"ce6e00f2b32c63fb6f2a74f67b4d8c574d7143c6","date":"2015-11-06T22:22:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate setlocal result\n"},{"hash":"487f0080559bedb473b5dd0e3e034a19b9916e2e","date":"2015-11-06T22:26:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add testcase\n"},{"hash":"c66aca505a96c5e043bc00aa6311101de9339854","date":"2015-11-07T03:10:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"54cc7b3916c61a0fefd66455ed6de7efe6d317bd","date":"2015-11-07T03:33:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fake return\n"},{"hash":"80e27d2fcba39ef96f3043f79e0fd3fb9e92241d","date":"2015-11-07T03:52:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix negative hex parsing\n"},{"hash":"414d7cc09edadde3bbef527a2568d9f56e0b9b44","date":"2015-11-07T03:54:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make maxCallDepth more conservative\n"},{"hash":"36ba5d1679c1dda83573730145e2aafc03608d07","date":"2015-11-07T04:14:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse \\a7 etc. in data segments\n"},{"hash":"8ba1707d4f3fe2f3f342a56cdae67895a4b014aa","date":"2015-11-07T04:47:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"detect implicit block in loop\n"},{"hash":"264a3bdab4496d907a934dc1e8e680846b3254b5","date":"2015-11-07T04:50:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old comment\n"},{"hash":"a54be54b62f68ccf99ff3487783e2b8619371ae1","date":"2015-11-07T22:23:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix export calls in wasm.js\n"},{"hash":"f1e0e4742168d920cc0ca65eb0d147e62474400d","date":"2015-11-07T22:23:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add testing\n"},{"hash":"14f71b7a6bacaf71a4240dccd1b86c16cb86d968","date":"2015-11-08T01:32:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more debugging\n"},{"hash":"591048f13ba61e42383ab520ea61c3d1ddfc08cb","date":"2015-11-08T01:46:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wip switch\n"},{"hash":"87bc980afc4658f1e33a7e540e525cb4636dbc45","date":"2015-11-08T02:02:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix host return types\n"},{"hash":"74613082bcdd62ea7aeb78f5783a4b1421ace460","date":"2015-11-08T05:51:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use view info in detectAsmType\n"},{"hash":"35a8d0862150622841f9ef545a30ee2b37ae610b","date":"2015-11-08T17:19:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"return from switch\n"},{"hash":"01363d0daeb33c93a166ae00ed5e9791d7de8f9f","date":"2015-11-08T17:19:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"switch parsing improvements\n"},{"hash":"92ac805edc6ebe06e5ad850c8a03202bd1a7f397","date":"2015-11-08T18:19:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"switch fixes\n"},{"hash":"4d8022da3af7d2604e7779e43f721ade1f04b89e","date":"2015-11-08T18:30:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more switch fixes\n"},{"hash":"2c8edcc0fa082a21e90ac18d39c11855cbe042ac","date":"2015-11-08T18:46:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix 64-bit switch\n"},{"hash":"887c03898b4a8e59cecb0d8f9dc37d2b7e494ee8","date":"2015-11-08T18:54:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"accept 64-bit offsets, for now\n"},{"hash":"c4b4b9ae5d19dd12b9cc00719c57dfa5fd216853","date":"2015-11-08T18:54:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check all spec testcases\n"},{"hash":"8bbc4d10232a73bb8c61a315b224d0b93c4713c6","date":"2015-11-08T18:57:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"blacklist the remaining spec failures\n"},{"hash":"57481a28ac4935928bca3deae8d202d88c780789","date":"2015-11-08T20:38:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print and compare nans properly\n"},{"hash":"a0d9673cf965c72f7ea8f4484f23e98e5ec3ba65","date":"2015-11-08T20:40:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse nans\n"},{"hash":"504b1a981cf6d0d560a1160b106a1b49eaea4cd7","date":"2015-11-08T20:41:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable test\n"},{"hash":"c2dc40d42a0f88465861f0fc26a5f47552970e58","date":"2015-11-08T22:59:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix printing\n"},{"hash":"f6700a3a9bc6ee5dba59b0d61e8815d71d7272db","date":"2015-11-08T23:00:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse hex properly\n"},{"hash":"36530dd093564b642219bd0d84dc0c62cf937c20","date":"2015-11-08T23:01:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure nan-ness\n"},{"hash":"d60432e933d6940dd2030addb6be13ec64a927b1","date":"2015-11-08T23:07:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix hex nan parsing\n"},{"hash":"733d78b0584b1b5dbf2fb3545dfa36e4268e0177","date":"2015-11-08T23:11:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"negative nans\n"},{"hash":"93559fcddc5cf02074189f6bad391c632a423e32","date":"2015-11-08T23:12:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"+nan\n"},{"hash":"ca0dc47b386a74e0493be77cfcbdcd7cd2fff61f","date":"2015-11-08T23:16:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix negative nans\n"},{"hash":"78a8208beb12e3a1640670dc9a8fc4ecbb4b6085","date":"2015-11-08T23:36:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nan fixes\n"},{"hash":"3d161f19c82bc6eb2e2788f8a0446a0cf839e4a7","date":"2015-11-08T23:37:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add final spec testcase; everything passes\n"},{"hash":"be1bbc6bb827a13a450262a9ab872816ba94cefb","date":"2015-11-08T23:38:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove blacklist entirely\n"},{"hash":"2c6f7cfa8156448e5ce82ebd1a7526b523dfc7f0","date":"2015-11-09T01:29:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up check.py\n"},{"hash":"6098d7c270a3b16c4c68dd6996597eae2a74a5f4","date":"2015-11-09T19:24:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"restructure code, put emscripten-optimizer stuff in its own dir\n"},{"hash":"884c1de0f6dd282881029f03525c1bc8b93c134c","date":"2015-11-10T01:16:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print if-else\n"},{"hash":"9c6476efe9403658bb69851bfa3aa30f67a32868","date":"2015-11-10T02:59:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests, use a proper label stack, and start to update control flow changes from spec\n"},{"hash":"b8b815a6cc5f6d43222f623e63f9e665ff460085","date":"2015-11-10T03:19:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update control flow operators, blacklist some new float errors for now\n"},{"hash":"b6ea5a37e0ec47df1bafed35c629d46fe98d613f","date":"2015-11-10T03:21:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle empty switches, and some more temp blacklisting\n"},{"hash":"78e71886c5ca119ffd16b0baed9bfa511764172f","date":"2015-11-10T03:41:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wip switch work\n"},{"hash":"0073656f9d1a0f74da798bf3b1890f94e9502517","date":"2015-11-10T03:47:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"gcc workaround #1\n"},{"hash":"404846caeaf2f866aeffc3523403c2272e323dac","date":"2015-11-10T04:15:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle some switch errors, get the switch testcase passing\n"},{"hash":"0afa7808bb7e791ba39c51f3d691a1192d8706a7","date":"2015-11-11T00:52:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasts\n"},{"hash":"f067c29c08a6f4299e68cc34bb8e4979730dd94d","date":"2015-11-11T01:01:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests, and update shift behavior for latest changes\n"},{"hash":"b0c93d1d664dca6f6269517101bfca298e495b3d","date":"2015-11-11T01:06:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"restore almost all spec tests\n"},{"hash":"0cb8d3e030c9cd5c5df49d3bd513c6a8b412e5ff","date":"2015-11-11T18:06:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comments\n"},{"hash":"1135df1ed8aade5b64c3c4ddd8944e8ed4f38644","date":"2015-11-11T18:07:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unreachable\n"},{"hash":"3afe5626da1ef2946c66aa36c49b01932bd4f879","date":"2015-11-11T18:12:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"62543cf4800ae728924fe461b1e62972eeb09d00","date":"2015-11-11T18:13:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update blacklist\n"},{"hash":"8c447d4e5a7d0eca389699305476727b172a33fd","date":"2015-11-11T18:37:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable g++ again for wasm-shell, looks ok\n"},{"hash":"e82c94a9720f69ad689d91c811d0eb338d7b8e19","date":"2015-11-11T18:42:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove debug print\n"},{"hash":"e21c014dfd50a2a0cd89b6988ccf74a48d12ad3f","date":"2015-11-11T18:54:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to handle new nan rules\n"},{"hash":"be42e377272dbdee8c592706bbce8753aa6539b6","date":"2015-11-11T19:28:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more nan fixes\n"},{"hash":"6cbb5943f93e0edcee676569751748547e6ee990","date":"2015-11-11T19:38:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nan fixes; test suite fully passes\n"},{"hash":"3bce77f4aa50b1d070b852de484256e32220ce0b","date":"2015-11-11T19:41:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"break => br\n"},{"hash":"df5801fd2b8d3d128bca238d22eb19039251ffba","date":"2015-11-11T21:49:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't store caseMap in Switch, it's a pure optimization\n"},{"hash":"6002ab916590ef634edeb306a14846913a4e626a","date":"2015-11-11T21:55:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"15903fda75b5392df886b512bae8b8d74fafc61f","date":"2015-11-11T21:59:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't allow direct access to the vectors on the Module object\n"},{"hash":"3a8876cbde436085f6361e93377ee96e3578e2dd","date":"2015-11-11T22:50:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate offsets in s-parser, remove hack\n"},{"hash":"498577be5fbec6c251f71356f4e03f085c58ae34","date":"2015-11-11T22:51:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move validation to a side .h file, with a full WasmWalker\n"},{"hash":"83994c9c54f7300701e1736ac0c6d8f2f5adf2c6","date":"2015-11-11T23:09:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use Name::fromInt\n"},{"hash":"e5ec713b7e404084b3fc5561849525d90d7f644b","date":"2015-11-12T02:01:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wip\n"},{"hash":"7725a4b87feead9416e419b3c95228c4515813da","date":"2015-11-12T02:37:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"9349a87c141540a028633dc50a5b680f3afb2e99","date":"2015-11-12T02:56:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"name\n"},{"hash":"ed6621625b2e4c058866d31a6bf56c68e3a87c95","date":"2015-11-12T03:34:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme updates\n"},{"hash":"ecc5ea47b7c9c8df9d7c24b32724b933f3a47c0f","date":"2015-11-12T03:44:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"argument handling in shell\n"},{"hash":"05185ec99098d8b0e21a20952e1df4955e40edc2","date":"2015-11-12T03:45:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update .gitignore\n"},{"hash":"955995a59d6ddfebd09b73d727fc0795f81a5c96","date":"2015-11-12T03:47:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"dc5a2bf6f34b2eea26919b79e6ae9c020e750538","date":"2015-11-12T03:49:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update check.py\n"},{"hash":"2e93ee803907bcea3724b67e80d44d6c02cb2d9a","date":"2015-11-12T03:51:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update env var\n"},{"hash":"ed47fbc9ce48e712548d937195e0f7d333da55c4","date":"2015-11-12T03:54:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve printing\n"},{"hash":"a43caa75ce7293a4aea91228daf379f06817f5d8","date":"2015-11-12T04:38:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add simple example\n"},{"hash":"4427bdc5a1697d1eb255cf95237856f5bc7796bf","date":"2015-11-12T04:39:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"17a0a9dfd614859d46d9021c71e4d7e9928573dc","date":"2015-11-12T04:40:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"7176e82d1e3dd728b2f36913693f31cc89fda31d","date":"2015-11-12T04:41:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix\n"},{"hash":"d66ced45eeab6f890972a4789789164f026cb259","date":"2015-11-12T04:42:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix\n"},{"hash":"e53badb26a1a3d2de0c7df30bb7e656299d91b21","date":"2015-11-12T04:49:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"1ac690c7adddebeaa4d73a96bca0153b5f92db5b","date":"2015-11-12T04:50:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"faq movement\n"},{"hash":"10c67d791dca5db1feb388db3afa21e8077d7ff5","date":"2015-11-12T04:51:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"faq movement\n"},{"hash":"608547e56c97592fbc0c919fc310b86890268d62","date":"2015-11-12T04:52:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"faq\n"},{"hash":"0cf476441af11dfec2f351a8f6cae83acd9ff7b7","date":"2015-11-12T05:29:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"53c3592f51861d8568be66f18bafbedda44d1484","date":"2015-11-12T18:17:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"max memory is 32-bit, for now\n"},{"hash":"d226b1f67d2f42867e83e59fb362cf032b893c21","date":"2015-11-12T18:18:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme update\n"},{"hash":"afce1de1495cc5782ec55b016d4e864b316d9920","date":"2015-11-12T18:18:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify find_div0s\n"},{"hash":"3a2768127856e7113317e5d907ead6cc41f60299","date":"2015-11-12T20:45:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge branch 'binaryen'\n"},{"hash":"674c2f10a2cdb6547fc1592c2e9cb407f8fd40e6","date":"2015-11-12T20:55:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"f80d7b23b6b9d3a335e83bf6d1cd8cc9c0fbdd25","date":"2015-11-13T02:04:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"reorder check\n"},{"hash":"1e3caa2d4e603691e6a9b8f569cbc8e697961f12","date":"2015-11-13T02:09:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests for latest emscripten\n"},{"hash":"79ebd738bcfc07a8479632ff7b804e60d907880d","date":"2015-11-13T04:01:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move todos to issues\n"},{"hash":"06a9c12ea045dfb9b1dd4f4ccf959ac715d4df8a","date":"2015-11-13T17:10:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use sse2 for math\n"},{"hash":"97b943c832dd3389b81c0896826977e0c447de28","date":"2015-11-14T02:11:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"pass support\n"},{"hash":"2d141917e87e73e2853cbf2538e7ccacc6095041","date":"2015-11-14T02:44:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add shell tests\n"},{"hash":"06f34506dd1a190e3886097a528a9cdea7c834e1","date":"2015-11-14T02:47:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"514a7e8b88b727bfa0871b5df0ba362fa6b529fb","date":"2015-11-14T04:21:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add descriptions to passes\n"},{"hash":"f08d6fbd7c24dc9dc07081c72869095dab3647ea","date":"2015-11-14T05:28:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set seq type properly in asm2wasm\n"},{"hash":"749cd728ee33223423055aa02baeaeae61eb90a4","date":"2015-11-14T06:12:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove unneeded emscripten optimizer.cpp file\n"},{"hash":"84c8a4b2deade2ecfe0780813d976049c5e7f1fb","date":"2015-11-14T06:20:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"docs\n"},{"hash":"80689f9cf86724c75b5c8cab80fff808c89dee12","date":"2015-11-14T06:23:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"docs\n"},{"hash":"1f0d6fbb8a83450d52750dbe66e5255059a1b415","date":"2015-11-15T20:06:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text\n"},{"hash":"0fff336950b8397ae7db7081eafe075565366b25","date":"2015-11-15T22:54:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"faq entries\n"},{"hash":"46b1677c8020e20b4b27689646022090ced3c07b","date":"2015-11-15T22:58:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comments\n"},{"hash":"ee74df535b0c9757642410957ac478085f6ba6ae","date":"2015-11-16T02:01:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update build flags\n"},{"hash":"4aee30b209d5394f539af0000eb24064af11fa0c","date":"2015-11-16T22:35:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use the new BINARYEN option in emscripten\n"},{"hash":"6457e86fe40f8b0ee5cfddd2685d537462ea24f9","date":"2015-11-16T23:36:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use memory growth in wasm.js, as some codebases are very large\n"},{"hash":"ba6c4700fd22e3c0ccfb9cb4f3bfe8af5e910993","date":"2015-11-17T00:10:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve auto updater\n"},{"hash":"ecc9cb452e71e22b70e9f29ad03cd7789f052251","date":"2015-11-17T00:10:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch printing\n"},{"hash":"f47a02e09028434fab7c094a390eaf4e87a3313e","date":"2015-11-17T00:11:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit switches in native builds, and offset the switch value\n"},{"hash":"dc22040358e467763c80c233f01a384f17d19c30","date":"2015-11-17T00:14:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add switch testcase\n"},{"hash":"a83195692cc33020a03ec9599766bd8067ea8012","date":"2015-11-17T00:14:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"udpate tests\n"},{"hash":"ee3fb8aa23ed03593d9a1b8ef7d09c5c35377481","date":"2015-11-17T01:12:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"adjust build params\n"},{"hash":"797dd8d4119e0b02abd3ddd4d99557d8dfe591e9","date":"2015-11-17T01:13:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle import calls with no parent node\n"},{"hash":"df2d946238e80e2b3ef6b198301b3947e28646dd","date":"2015-11-17T02:13:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit a special call to a special import to handle floating-point remainder, which exists in asm.js but not in wasm\n"},{"hash":"c8804f12e3d37030e1b2f158d5932e0626933c89","date":"2015-11-17T02:22:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle imports with a return type\n"},{"hash":"8a802c8bd50e9c84646ee6b92a969a6f97a1d2f8","date":"2015-11-17T02:22:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add frem test\n"},{"hash":"689d7cf5d1c1f96a44cc614c16ee2f9cdee0ea4e","date":"2015-11-17T04:36:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support fround(0) global constants\n"},{"hash":"a2c0146a8540d3c8485a43767172ce56dd8f8621","date":"2015-11-17T05:02:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ASM_FLOAT\n"},{"hash":"7aae938750a981baf4f2d3ba3b47a7a98c4ea0c8","date":"2015-11-17T05:49:26.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Add license file, for consistency with other repos"},{"hash":"9d3c3cadb3b383f64a45dbfa20d07a144ff59c8d","date":"2015-11-17T05:50:22.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Update README.md license"},{"hash":"cbb918466e8acff5dfd443a8931500fe19a84ca9","date":"2015-11-17T05:51:01.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Create Contributing.md"},{"hash":"574b5add085113d7dedfa784d01e19d6ea8187fd","date":"2015-11-17T18:37:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement was function table by concatenating all asm tables, and offsetting. this supports all asm function table usages without hacks\n"},{"hash":"a439812485b58cf555d02735668b53cfc5889ba4","date":"2015-11-17T18:40:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"eab9bb324d4a88fe94b044bf773fa27c3e842b7a","date":"2015-11-17T19:45:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"return undefined from wasm.js when return type is none\n"},{"hash":"297d6048ea0c1350f7b6418084fc57ab560677a8","date":"2015-11-17T23:21:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"port detectSign from emscripten asm optimizer, and use it\n"},{"hash":"c93a347a702e556c3ccbc517fe048577fe347e01","date":"2015-11-18T00:05:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"annotate traps\n"},{"hash":"d48bd66a54633f94b7c499c490660280ac77c6e7","date":"2015-11-18T00:26:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refine trap texts\n"},{"hash":"05333ef74607f88cca53723a2aa8f731d0396a91","date":"2015-11-18T00:27:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do asm2wasm f64 to i32 conversions in js, so we do not fault, as asm.js expects\n"},{"hash":"875df2b921ae704a3a820b2922ce732fc574d727","date":"2015-11-18T04:31:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parser update from emscripten\n"},{"hash":"65db7e5e8f3994a7d4ca1b4e01f87eef13c7c87b","date":"2015-11-18T04:35:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle + as a float-to-double conversion\n"},{"hash":"ea0015403b3695d873a2c7eabc6fcdf0641b8e2e","date":"2015-11-18T05:26:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fround improvements\n"},{"hash":"a88651b6b9853c62fdc8e38948375fe894172298","date":"2015-11-18T05:29:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle fround call coercion\n"},{"hash":"280936837010d75a9a8863e486e05e13b1ef964a","date":"2015-11-18T05:53:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add asserts\n"},{"hash":"c988fb1a8b66f4c2241e98cbabc2068c968d6003","date":"2015-11-18T05:53:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"return float in wasm-js load of float\n"},{"hash":"50876c7e6893b4b86d72767dc93e3565fcb0afb9","date":"2015-11-18T18:10:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set call types in a post-pass in s-parser\n"},{"hash":"362102c3540ccbe8dc0892b34eeae26f81d3fc84","date":"2015-11-18T18:17:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mark host types\n"},{"hash":"f948a0e9f1c75f3275b219100a901adb3f96083f","date":"2015-11-18T18:17:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve interpreter debugging\n"},{"hash":"47add7947265b99c6c68add694e6ae70911f4f4e","date":"2015-11-18T18:46:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix call types based on coercions, but do not modify other things automatically\n"},{"hash":"c4e71c7e1a18594735cb49b013dd42d9f5826e23","date":"2015-11-18T18:57:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up + coercion handling code, and make it work on +HEAPF32\n"},{"hash":"25804b0a505beda9efb0b0fa2e8a1bde7e401042","date":"2015-11-18T19:30:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"store f32 properly in wasm-js\n"},{"hash":"cb41c9a8b11970a01e3f2f1eb2d8d38e29e7489b","date":"2015-11-18T19:32:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add precise float tests\n"},{"hash":"876495a6c436a0a0fe6980e3dce49d3a7f0a5cf6","date":"2015-11-18T19:43:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"HEAPF32 is an f32 heap, and we need to cast f64s before writing to it\n"},{"hash":"913114cd027722b8576c83f2bb334701c0b9a518","date":"2015-11-18T19:45:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle f32 params in wasm-js\n"},{"hash":"98c318e18c6fc43e851429a2a5e43bac16ae1ee1","date":"2015-11-18T21:48:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle negative zero properly in asm2wasm\n"},{"hash":"fda902dce36c78fe358b48252af5e0e1e4b2ad75","date":"2015-11-18T21:55:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle debugger keyword in asm2wasm\n"},{"hash":"a3c2d97c0d8c0f2d33ea9e381e98d9dec8172d63","date":"2015-11-19T00:05:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add some interpreter debugging\n"},{"hash":"262bf6fbddf19eb1b365de91aab36c7d4578c135","date":"2015-11-19T00:07:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to special-case asm math builtins\n"},{"hash":"0b02cbdc0af0a42032b35344bc2f8d3f768766db","date":"2015-11-19T00:22:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use builtin types to mark CallImports directly, they do not need coercions to be understood\n"},{"hash":"8936d78d84473b258aa1b0245d2f0f22c79643f4","date":"2015-11-19T00:37:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"stop working around import issues in spec interpreter\n"},{"hash":"7749b84bfaf5f7d95d22332b520ea541c6f9ae80","date":"2015-11-19T01:26:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle overloading of Math.abs\n"},{"hash":"1bdbc52f2949c427c92da74575d57b9c64a50d92","date":"2015-11-19T01:34:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle more import parsing in s-parser\n"},{"hash":"55f0836d239e5580eeed10df888bef4076d323d0","date":"2015-11-19T01:35:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"b9fe7a26991c6baead28716f7ca37bc94ec68521","date":"2015-11-19T01:36:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix i32 abs\n"},{"hash":"5f855e559ce9e4a976951cdddfa527e26a66d242","date":"2015-11-19T01:39:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update test\n"},{"hash":"154a6c210d89cf4270ff32fc9c996c8d8b5de63e","date":"2015-11-19T02:13:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"receive TOTAL_MEMORY from emscripten in wasm.js\n"},{"hash":"fc5ee5c99bc8cdf383563c791d175da5002cb963","date":"2015-11-19T05:09:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"runtime debugging for wasm.js\n"},{"hash":"ebb4cc7d0c655975cfc7b5538ed61bd09fd9a507","date":"2015-11-19T05:11:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add assert on breaking\n"},{"hash":"d9324eaf694af686fe81f05847dac640875b5499","date":"2015-11-19T05:17:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use labels on switches in asm2wasm\n"},{"hash":"a2505ffa27be948780e3c0953ed8883f6dddc1e5","date":"2015-11-19T05:17:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"some label asserts\n"},{"hash":"b800f24ee3bc90fcd22b55fb04dd4e30de3510d5","date":"2015-11-19T18:49:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"stricted break checking, per latest spec update\n"},{"hash":"72df9069a59ffcdfe88bcb5caa8bec87d3f4de93","date":"2015-11-19T18:49:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"missing word\n"},{"hash":"c233b37837dd8a1a768741b19ab8221384d4441e","date":"2015-11-19T18:50:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"f7070e21f92a2fedb61bdc9fa1f28a092852d7aa","date":"2015-11-20T01:46:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to parse asm.js memory growth code\n"},{"hash":"c8ae18ee624867d1d7598a9a936ebf7c381903ae","date":"2015-11-20T04:35:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"work towards memory growth in asm2wasm code\n"},{"hash":"58c138333ade389a592083b095093107d5e935f3","date":"2015-11-20T04:51:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm.js memory growth fixes\n"},{"hash":"9c55ad5d1c7c4110bab82e412a510ca39d58256f","date":"2015-11-20T05:00:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement growMemory in wasm.js\n"},{"hash":"39891e0c123103ceef18150c9d1145924dced2bf","date":"2015-11-20T17:57:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"b974e9351405880fe1d021e3ae7fda92f1b3bb4f","date":"2015-11-20T17:58:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"br_if\n"},{"hash":"0c6095401fe1305774b9d70f72d65c3fd44f6d42","date":"2015-11-20T18:14:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add printing in module validity tests\n"},{"hash":"38454808a9e7d7c69458579ccda031486cc73bb0","date":"2015-11-20T18:19:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate unary type\n"},{"hash":"7e236af057510394f1572a93da86b16f85035784","date":"2015-11-20T18:26:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate function result type\n"},{"hash":"29200f6d693af396385013e89a7b048067302393","date":"2015-11-20T23:54:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"-Oz for wasm.js\n"},{"hash":"f54b8332c7fd00cc7b431b3aae2cd015e0cf333f","date":"2015-11-20T23:55:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor wasm.js integration code into a method\n"},{"hash":"001f91409ce55cc416565e2e28b3a0d4a171d728","date":"2015-11-21T04:11:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"detect seq sign\n"},{"hash":"02d9f159c96f46730c6a2f472521b11ec537a26c","date":"2015-11-21T04:27:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"detect minified fround\n"},{"hash":"1f84970eab7c99122e50d475c4328ef1e76b7d53","date":"2015-11-21T04:47:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle labels on blocks in asm2wasm\n"},{"hash":"7389fd34ad5addd48daf775c67e365220b2b06ba","date":"2015-11-21T04:55:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle breaking to labeled blocks\n"},{"hash":"e7856871eac50658ed648e4a7f36dcf0e7dbeb43","date":"2015-11-21T04:55:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test\n"},{"hash":"471489a264a386d1a9cd08b3dfc955c0e2e44247","date":"2015-11-21T05:33:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"some more function debugging in interpreter\n"},{"hash":"386296c58bf9222c36affe7de8d7b27833cf078a","date":"2015-11-21T05:33:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"detect minified fround in detectType\n"},{"hash":"09025d02feee02e07c8df1871d8a1c51ceed902e","date":"2015-11-21T05:46:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"minified wasm.js build\n"},{"hash":"d5201343e9f494c14ecc730e632fddd5a037731e","date":"2015-11-21T05:46:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme on passing the emscripten test suite\n"},{"hash":"bf599213828a42ee1723305abcba6569751298f0","date":"2015-11-21T05:47:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme\n"},{"hash":"8b77837812708b1ca87b8b38ab1a6a3d243dd0aa","date":"2015-11-21T18:10:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if_else returns a value, but if does not\n"},{"hash":"46a76c03e09f3854d76aba0f076a01ce4e0441cc","date":"2015-11-22T01:06:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor memory allocation code to create the buffer during asm.js link\n"},{"hash":"24398d3d05d7f1276e6c464a7a20626a9bd35fdc","date":"2015-11-22T02:44:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare for native wasm suport in wasm.js\n"},{"hash":"ae28357303c157015d37bd730a6949613c3f3da5","date":"2015-11-22T03:35:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"loops do not automatically loop\n"},{"hash":"43df3fc2ff0252bfd2343c2b023e0e0bf6d8a7bf","date":"2015-11-22T03:45:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit an automatic continue in while loops, since wasm loops do not loop automatically\n"},{"hash":"9eefdcb1adea44b7c9b05e767f98ed5fef8f5401","date":"2015-11-22T03:48:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"c7140e7bd23a36c9a8e8f869617c2f8e55d1f780","date":"2015-11-22T03:55:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix do-while loops\n"},{"hash":"8d146b65fe461fbf3fb3d04fd785cc5af4484b30","date":"2015-11-22T03:56:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"ec8eaa4cca92eaa64fa8179bc920dc1b5d65e7fa","date":"2015-11-22T04:05:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up br printing\n"},{"hash":"54c460ea4e4d23cdba56c2d5f1d3407cf5f676d9","date":"2015-11-22T04:30:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up import double space\n"},{"hash":"021e145f74b217aa83d088d3da32692c79fcc80d","date":"2015-11-22T04:47:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify wasm.js loading code, since we are now embedded where we can use the outside module's\n"},{"hash":"3ab1d2c459ed6a235ba04c4ec70ff654530a7de9","date":"2015-11-22T05:16:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"spacing\n"},{"hash":"89dd1fc5eaf9b19038d98388b6d3082f37c1fcf1","date":"2015-11-22T05:50:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"notice minified fround in function params and locals\n"},{"hash":"c750ead5ac06a906d17756ca41420d4ca649f84d","date":"2015-11-22T05:55:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add minified output test\n"},{"hash":"14ad84c09bd93958cc8fcfa4a38bbcc7e7267169","date":"2015-11-22T06:11:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle -f32\n"},{"hash":"9b5be208da3c32658c5aa6487c5f6d91039b063d","date":"2015-11-22T06:20:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle indirect calls with floats\n"},{"hash":"02c94097fcff0aef304e7b4b46fb2d2d81c9e503","date":"2015-11-22T18:00:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix import merging logi\n"},{"hash":"5288a513d3075469e130349d93b7b5b9dd94a616","date":"2015-11-22T18:06:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"special-case floor and sqrt in asm.js, which are overloaded on float/double\n"},{"hash":"f9764009d8df47eeddf9e542705bb6a5e7d397b0","date":"2015-11-22T18:11:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"return to optimized builds\n"},{"hash":"ac1d0f855f3fde65753aeea546c6781dbfd331ba","date":"2015-11-22T18:35:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix detectSign on recursive calls that need minified fround\n"},{"hash":"860e52c64da5200676d4226a2e48c849945f6687","date":"2015-11-22T22:37:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor pass tests\n"},{"hash":"5b590e4bbba075bba5fe87c44986939f26816549","date":"2015-11-22T22:41:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add remove-imports pass\n"},{"hash":"0313ab7a9816481bbdcbdb902710f1e3fbd2ca9e","date":"2015-11-22T22:57:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print logging prints to stderr\n"},{"hash":"295c4718d924f5d31e1bd25fe63add1833cc9c98","date":"2015-11-22T22:57:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove imports before calling spec interpreter\n"},{"hash":"45a011e1071ba511b3deee134219dd2f9eb6c8aa","date":"2015-11-22T23:17:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve interpreter error printing\n"},{"hash":"f5beae2835377e452c95c5b64a90a75b97b3234e","date":"2015-11-22T23:39:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit constants instead of callImport when there is a type necessary\n"},{"hash":"5fc4bde436bc51be040abb7375b61c5d106a6a44","date":"2015-11-22T23:40:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix check.py\n"},{"hash":"d504e759a6d343d321128d1f98be683f80ccda87","date":"2015-11-22T23:41:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"another check.py fix\n"},{"hash":"4504594bdf832a24d19ae3a70019bb5242422e0e","date":"2015-11-23T00:11:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix case printing\n"},{"hash":"3365cb2f426345370ce7caf03d77be64a38edc0a","date":"2015-11-23T00:17:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix testcase\n"},{"hash":"9db247422037009967c3ef4657b231477a76cb44","date":"2015-11-23T05:46:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor asm2wasm proprocessing into a shared location\n"},{"hash":"6e83fe2f9e9fdfb88fc9a62bb31c1f79768aa31a","date":"2015-11-23T05:50:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor memory growth code to a central location\n"},{"hash":"7d0250a6e0f6a656637abce0a29cb4618eeedd68","date":"2015-11-23T05:54:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support memory growth in wasm.js native wasm integration code, which an work now that memory growth is shared in asm2wasm in both shell and js\n"},{"hash":"f904394c1a9eff5aa8607e7409aebfd8e3ad1352","date":"2015-11-23T19:27:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"design principles section\n"},{"hash":"e97c5c94c14e83ff7535bafb80a9ae0bae332030","date":"2015-11-24T00:34:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mention passes in binaryen-shell description\n"},{"hash":"83cd8a4e2618e2883c97fc3a2fe58b544f8bf778","date":"2015-11-24T23:09:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"create an AllocatingModule which handles allocation for its elements\n"},{"hash":"9734a1899224de1d29ca2174a372d1870694642f","date":"2015-11-25T00:05:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"a1d8724f01ad324754cfbab6a175ad47001b87a9","date":"2015-11-25T01:53:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add deStat from emscripten optimizer\n"},{"hash":"78560acbd0da7238cbf619ada67e4ad98d17605a","date":"2015-11-25T01:56:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"initial work on wasm2asm\n"},{"hash":"dbe75f327b170a714a11b70f3076617fab03d5f5","date":"2015-11-25T04:06:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"b407d091d729b03d94c62cc788cb09ea7b0b120a","date":"2015-11-25T04:25:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"f981a0b24e53464762022ac052521f667b9f66dd","date":"2015-11-25T05:18:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"48823c099b0418b975c9a7c0c3ea042cd5077a94","date":"2015-11-25T06:08:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"0cffb67b5dad635115e0687832ad7766479d24de","date":"2015-11-26T02:10:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"e0174f1c03175a687265815da32f71266eb64521","date":"2015-11-26T04:34:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"65d2cd95a07db06be01242c5be705c52aba98543","date":"2015-11-26T05:59:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"dc42799c04f9c7efdbc01086b4f48dc5b1985777","date":"2015-11-26T22:14:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"3aa164ab9a7b447f6c5f52e5ac4d0faf65e68eac","date":"2015-11-26T22:45:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"d029c2fe9570c04060e3586eb3369e778200be57","date":"2015-11-26T23:05:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"6b58eeb25fd37489d57a997d33619f773fd01fef","date":"2015-11-26T23:32:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"7ea9b53194e78fc6655dfca8f69f3f8ef84d9939","date":"2015-11-27T03:45:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"05d212cb44ec58c83f714338fb9c5089373a581e","date":"2015-11-27T04:10:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"a7bfbd7ab12aca7d1592e04165c3d0ec00c962e8","date":"2015-11-27T04:24:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"6f91d9e310b206ae801768f45f4a82aa647df1c6","date":"2015-11-27T05:22:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"26842a8da165276fd9f38dc4bab2267269c237a0","date":"2015-11-27T21:18:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix makeCall\n"},{"hash":"e7461ed17e5f0cc9e49ada34b0fb340dce8e9b49","date":"2015-11-28T02:45:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unify convert/compare into unary/binary, and do a pre-pass in s-expression parser for function types, to fix new assertions that notice some missing types\n"},{"hash":"013c4987d4d14047aef036188d8d7bcea693c1cf","date":"2015-11-28T02:56:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure memory is initialized to 0 in native shell\n"},{"hash":"fafb8ad3b144bb84282004689fcd91f332f0ae78","date":"2015-11-28T03:05:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle empty blocks in s-parser\n"},{"hash":"60b6bf5509e56a96b9498eae9b8f629b8ccc58a8","date":"2015-11-28T03:05:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle no default when printing switch\n"},{"hash":"8ac3bc71809fddadf14bb9cbedcd2d9f87fcb09c","date":"2015-11-28T04:03:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"a6c2f37ca6b0f1031ca706904766a836e1ea5668","date":"2015-11-28T04:10:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"86491ff1fb2a7bebc357b28db74385785c0644ef","date":"2015-11-28T04:18:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"6d36e9640efa7bbefc05e4db0fc6c97d79053c9b","date":"2015-11-28T20:59:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor wasm.js so that it will be able to support multiple wasm loading methods\n"},{"hash":"d98de7569efadb1c654cd53c6404f40b15ad7ae7","date":"2015-11-28T22:08:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"when using native wasm support, we need to merge the written data with the mem init that wasm provides\n"},{"hash":"bbefe366f4d585ae1103c59b3c20a3f1dfc9f225","date":"2015-11-28T22:15:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support interpreting wasm from either asm2wasm or wasm-s-parser in wasm.js\n"},{"hash":"f30c01daf0375dee57d0d88896cad1c3dbd59db8","date":"2015-11-28T23:14:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use new on ArrayBuffer\n"},{"hash":"b4a8d4f3e58426e3807f7f4f5d1e983ee2737c03","date":"2015-11-28T23:14:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"work on s-parsing in wasm.js\n"},{"hash":"2d43e52b3ae1589d0f3127373e92a689e651ed33","date":"2015-11-28T23:25:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare to test s-parsing in wasm.js\n"},{"hash":"5c19367f08d59d0edb17f7acdafe122e1d10e2a6","date":"2015-11-29T03:02:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optionally emit mappedGlobals in asm2wasm, and use that to help when parsing s-expressions\n"},{"hash":"37b7e93a71e1a51fcb826cb2bce88f47bd396674","date":"2015-11-29T03:11:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable wasm-s-parser tests as binaryen method\n"},{"hash":"d8f258e8e74b17d06ee7d94fc7c4dd3165819f0d","date":"2015-11-29T04:16:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"be very careful when converting doubles to ints in asm2wasm\n"},{"hash":"b7967131b07daca8826945828c3fd155e3889ba6","date":"2015-11-29T04:50:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm.js/s-expression-parsing global mapping\n"},{"hash":"b2aef8cfb300f5095486e66c59cf4fd0dd7bf320","date":"2015-11-29T05:34:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme update\n"},{"hash":"f1cb59bda5688f761fadad997bda18658bf9a32c","date":"2015-11-29T05:35:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme fix\n"},{"hash":"ddb9959668e64b4bc81153407aef679fc352baaa","date":"2015-11-29T18:48:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"apply mapped globals in wasm.js on all asm2wasm output, whether done on the client or ahead of time\n"},{"hash":"00a1f43f3c6572a8d7d5a4e71f4e4e49f691be9e","date":"2015-11-29T19:22:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle memory in load_s_expr2wasm\n"},{"hash":"7a0879dc88c49b38b75e8fc61d1f65570380fafc","date":"2015-11-29T21:34:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use wasm-s-parser method by efault\n"},{"hash":"587b3b9573c503c32ea09bb702d894a33217798d","date":"2015-11-30T05:33:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor wasm.js method and add testing\n"},{"hash":"22ad6ab514be34b586aea7ada24f3c3917e83ccc","date":"2015-11-30T05:52:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more just-asm checking\n"},{"hash":"754654a7e261ca64bcbd2e9389e979e161862fb5","date":"2015-11-30T23:21:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"spec tests update\n"},{"hash":"2f724fe14e6ad05da26ba918a826466091bc3a20","date":"2015-11-30T23:54:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"limit check.py error output\n"},{"hash":"9b3e915cb4e8bde6c371fcbe7dbfac1684fc0f7b","date":"2015-12-01T19:04:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm.js imports refactoring, and temporary flattening of imports for native wasm\n"},{"hash":"39360bab029b18aeb82ba13e5c558d5385787d2e","date":"2015-12-01T22:26:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec test interpreter to new spectest module name\n"},{"hash":"fec53d40e6cbd7948ca1a9fb86e3699c6ac276c8","date":"2015-12-01T23:07:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm progress\n"},{"hash":"10ed2e48ef88dafc347f17ebeb07191be261913f","date":"2015-12-01T23:15:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finish first pass on wasm2asm\n"},{"hash":"e0cff3c71ffa5683173f968641bd78e6014cd5e3","date":"2015-12-01T23:55:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement getTemp/freeTemp\n"},{"hash":"e7707396ea86ded822848b0fb40b8b1180ac4a84","date":"2015-12-02T00:53:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactoring, and wasm2asm arags and locals\n"},{"hash":"be0ddfa9844389df8956f30528a021dc194d7a5a","date":"2015-12-04T01:53:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"0d2c26a5578447097d061a68ebaa6cd07b32d688","date":"2015-12-04T01:59:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start on wasm2asm tool\n"},{"hash":"03c06d780abcd463375a6fb2dd41a61a084faf13","date":"2015-12-04T02:07:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fixes for wasm2asm\n"},{"hash":"3f57e66627adff9e6ff5ef4ce4533f69b37e57c2","date":"2015-12-04T02:08:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more wasm2asm fixes\n"},{"hash":"3d9dd361a2d7f5d3a26d0c95ea9f7c6cdd502ceb","date":"2015-12-04T22:32:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use a br_if on do-while loops\n"},{"hash":"15d52de57ac98e822abcef0fa5b06d58335d59ac","date":"2015-12-04T23:16:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more wasm2asm fixes\n"},{"hash":"016ba0d2f6d078b133dec713987c663c937f7de6","date":"2015-12-04T23:25:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix continue logic in wasm2asm\n"},{"hash":"5b062214c3696cb2a9d1ac3a782b9380d08fbb64","date":"2015-12-04T23:47:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more wasm2asm progress\n"},{"hash":"3a5fe5c481ba2b2424a97e58820d3b5285c34c1b","date":"2015-12-04T23:58:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get wasm2asm building\n"},{"hash":"1bc7f6017c343335b0221124dda6c3434b170ad0","date":"2015-12-05T00:01:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix frees[]\n"},{"hash":"0b468697da93e7495ecd2a22c89509d271ed4c02","date":"2015-12-05T00:04:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix params\n"},{"hash":"f646dbde5e485c88dd904b95d962e1b8674395d5","date":"2015-12-05T00:20:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get wasm2asm to start printing\n"},{"hash":"ef4553db21e7e93fb82b375df4d32feb7f3f5915","date":"2015-12-05T00:27:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more statements\n"},{"hash":"3e1bb693f27039d308d941c1399ff920fa10aae7","date":"2015-12-05T00:31:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle functions whose entire body is an expression\n"},{"hash":"194f8a85f2913c04063347b756f923dc54ec5cfc","date":"2015-12-05T01:25:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm fixes\n"},{"hash":"396d4c0466819235464f379d19f93399121400da","date":"2015-12-05T01:25:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start building wasm2asm\n"},{"hash":"a834d6e9523d65710c09cd61e5d95c1a2a5a8d34","date":"2015-12-05T01:35:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to handle f32 in wasm2asm\n"},{"hash":"f81abd08214a17e257d08c24408ff395b919e2dc","date":"2015-12-05T01:54:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix scanwalk and scopedTemp in wasm2asm\n"},{"hash":"ed4e14a5fc0f928db29690b35c06ada80ef68102","date":"2015-12-05T01:58:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a return in the non-expression case in wasm2asm\n"},{"hash":"eb9ec0570b19dd58ef1cd7f2ab64254c2b28539b","date":"2015-12-05T04:39:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm2asm store\n"},{"hash":"6c37ba0c87208cf0e1a5f3a84ba9df26a93aab9f","date":"2015-12-05T04:45:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename temp file\n"},{"hash":"19109e4228c2687427257f06f80b19f3c95e1642","date":"2015-12-05T04:45:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"return result from block\n"},{"hash":"1dc1d8a7958c85d4768afa1abcc4f2706510bee1","date":"2015-12-05T05:00:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm2asm fixes\n"},{"hash":"315e543f60541284af52983f10eabc4172ca8937","date":"2015-12-05T05:08:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more statements\n"},{"hash":"56c1189004dbfa1713dfe418c322906403402d60","date":"2015-12-05T05:35:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"infrastructure for wasm2asm testing\n"},{"hash":"23f28802796080813f0e806248a91a9ad5fc6275","date":"2015-12-05T05:40:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add first working wasm2asm testcase\n"},{"hash":"e72f45c46d7f0416dda883c9ba35cd3f62feb7be","date":"2015-12-05T05:52:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add another wasm2asm testcase\n"},{"hash":"baf52c53ae9af1f55012e4b31ea6c32aeb639c86","date":"2015-12-05T05:54:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename some files\n"},{"hash":"473ea1f21189c413ebc81f3f4d5b75ab3064ef8c","date":"2015-12-05T06:22:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more unaries in wasm2asm\n"},{"hash":"9024b061cbf4609a3925bfd0100a6a5734ce9d92","date":"2015-12-05T18:53:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"switch in wasm2asm\n"},{"hash":"164805eb14c4ecdad1088cf92f241509552a85ec","date":"2015-12-05T20:16:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor call and add callIndirect in wasm2asm\n"},{"hash":"440894df858f8f408352d9a2e52840a992d9b537","date":"2015-12-05T20:20:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix DemoteFloat64 in wasm2asm\n"},{"hash":"34a8ec55d8bb2cfa63f0a3738426503d4350c32c","date":"2015-12-05T20:21:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"pretty print in wasm2asm debug\n"},{"hash":"dca96ba53339695ea4131d374cee00e916b0ac70","date":"2015-12-05T20:22:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wip unit.wast testcase\n"},{"hash":"41ff4225d80f881f42fd9daf8cc7d5ba804238f2","date":"2015-12-05T21:13:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wasm2asm to auto_update_tests.py\n"},{"hash":"05684cead0dfa8c553d1bed38a5b8746b45e0dec","date":"2015-12-05T21:13:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix asm doubles in wasm2asm\n"},{"hash":"e1ad2c5541e3e9e8b00c387d7aa072a6b76e3008","date":"2015-12-05T21:33:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add makeSigning method\n"},{"hash":"3ca8dd6de1093d67fd9eb76c6c0da823cf39c5a8","date":"2015-12-05T21:34:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix signing in wasm2asm comparisons\n"},{"hash":"730c770784cc83922bcfdf43fe04064319d191d5","date":"2015-12-05T22:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use breakResults in break\n"},{"hash":"b2812d358ef291cee41f4670d2a0622876c5b113","date":"2015-12-05T23:02:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"flatten out blocks in wasm2asm\n"},{"hash":"538e2d9813dd46e76aa226143b978f2b1acfb8e6","date":"2015-12-06T01:59:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call coercions in wasm2asm\n"},{"hash":"2b38d9587a5dff98f918ccf7d1112e8db2b357fe","date":"2015-12-06T02:04:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to fix up invalid names for js in wasm2asm\n"},{"hash":"4752e205dc84df8b41cd6dbc7282f85a38a89e8e","date":"2015-12-06T03:40:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"coerce call arguments in wasm2asm\n"},{"hash":"29ced06333527018db02cecdfae9b4761326da25","date":"2015-12-06T03:57:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix binary in wasm2asm\n"},{"hash":"51f4b2c655ff868f139b3e38d14d1f9721c44c68","date":"2015-12-06T03:59:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use visitAndAssign in more places\n"},{"hash":"1cdd8c414e3eeef6b69a4016ef23d639ce33cdee","date":"2015-12-06T04:11:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"flattenAppend\n"},{"hash":"0f592cc75ce20168a76264a76ed8dd62d7d00885","date":"2015-12-06T04:20:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm2asm switch\n"},{"hash":"a7a20cc4a0323ebd4743da5219650cc139264d3a","date":"2015-12-06T05:12:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle negative zero in wasm2asm\n"},{"hash":"9722b016a63726cc790fb3db38d7bb7503c9bf27","date":"2015-12-06T05:19:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use flattenAppend in the top level of functions\n"},{"hash":"5c3a102d7476b2200787aa66a84175bb47862c36","date":"2015-12-06T05:25:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid unnecessary return\n"},{"hash":"1585a63c8846eef56b95f076be2ffe2f7e2f15da","date":"2015-12-06T06:08:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix do-while label\n"},{"hash":"34e45ae6426706ae31c4df8e0b36a4d14ea1f682","date":"2015-12-06T18:48:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix if_else return value in wasm2asm\n"},{"hash":"fa27379216ea90f1a1c80ffbdc6d83307c3474ee","date":"2015-12-06T18:52:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure if branches are statements\n"},{"hash":"7fd4379192eb8d1296373ff454ea643f1b147fa0","date":"2015-12-06T18:53:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if is not statable\n"},{"hash":"3e5ee789acecd01c092d9c834530f3ee2bf382c8","date":"2015-12-06T22:17:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle nested blocks with returns in wasm2asm\n"},{"hash":"72bca2037dd1699132e34c17d4b55ba29bafacf6","date":"2015-12-07T00:11:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify wasm2asm emits valid js\n"},{"hash":"7efb88f9806799357f026dd15ffe28e898bf283d","date":"2015-12-07T00:15:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit 'use asm' in wasm2asm\n"},{"hash":"52c8004d2b5c7bbd059ee36089e5724498933fc5","date":"2015-12-07T01:47:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit heap views in wasm2asm\n"},{"hash":"095de9bebfff3e609cfeddd57248a0b6f74b5663","date":"2015-12-07T01:56:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"coerce loads in wasm2asm\n"},{"hash":"79d04e7fd2fc6a09f2318e227b1d68bfd3bc0325","date":"2015-12-07T01:58:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"sign eq and ne in wasm2asm\n"},{"hash":"43ddf341c47350db98618c49a5d0acb0af6960ab","date":"2015-12-07T02:00:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"coerce returns in wasm2asm\n"},{"hash":"09771ea21a3f30ade4a8abb7482fdd3b6eaaba7a","date":"2015-12-07T22:03:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit function table calls in wasm2asm\n"},{"hash":"c44dc7b23fae93222c8a38da53e50c0b0aaa0366","date":"2015-12-07T22:06:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use Math.imul in wasm2asm\n"},{"hash":"0fb0a68db70f2720d93a182129e73e4a0eaeb3cb","date":"2015-12-07T22:11:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import Math.imul\n"},{"hash":"75e8b709fe900efcfb53813f884a1cde6e81907b","date":"2015-12-07T22:42:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle imports in wasm2asm\n"},{"hash":"4b23bd513d926fb03e549bc1cf704a6016a91a70","date":"2015-12-07T23:00:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit asm function tables in wasm2asm\n"},{"hash":"a3e8e7d7ee21808051fba70ee8990ad20beb0223","date":"2015-12-07T23:09:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit exports in wasm2asm\n"},{"hash":"4fe0ddde6db8d21bd30f7f5ee1fa5322aa49bd5b","date":"2015-12-07T23:16:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't quote keys in object printing when not necessary\n"},{"hash":"567ac5040752e1e06910f97fe181b95f19e0613d","date":"2015-12-07T23:25:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check for tool existence in check.py\n"},{"hash":"f9782b01cd76e76d5921a7e526e2e4577dbf29e4","date":"2015-12-07T23:29:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check asm.js validation in wasm2asm output\n"},{"hash":"4ddbf14c65b0217720cc794838a75df8faaeb8c7","date":"2015-12-07T23:29:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit Math.fround in wasm2asm\n"},{"hash":"aa3adeff8a9052e82db4353cd7d77e4da64e9a9d","date":"2015-12-07T23:36:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"assume flattened imports in wasm2asm output\n"},{"hash":"4ef7b2ef49787bc22a73a13b24819a43d7d133d6","date":"2015-12-07T23:38:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix signed int-to-double\n"},{"hash":"e7e2fe18e406aae3cade9200884014eda1f41f51","date":"2015-12-07T23:40:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import Math.abs in wasm2asm output\n"},{"hash":"7c506037b668d4d4cc7c21534da4b325d3eae36c","date":"2015-12-07T23:50:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix unit.asm.js testcase, table contained a method of the wrong type\n"},{"hash":"4bb84be7e05946fadf38695074bd2854a6d6fff5","date":"2015-12-07T23:51:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update gitignore\n"},{"hash":"940de255e89a4d4f5b85602a51ff09c05e4927e5","date":"2015-12-07T23:52:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"restore temporarily disable example testcase\n"},{"hash":"fc46fce89fe13dbc10596efbdc5ca92ff3cc8229","date":"2015-12-08T00:31:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix vector of scoped temps\n"},{"hash":"9cf484e68a8c200f997f001ce111c92bc3b970a7","date":"2015-12-08T00:36:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix double eq and ne\n"},{"hash":"4f542922b1b42536be31f6c1987b976f39a921b7","date":"2015-12-08T00:39:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix double mul\n"},{"hash":"246bf84adcba84abc96cc6910ca4b5a0898d6c46","date":"2015-12-08T00:42:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix sign-aware div/mod\n"},{"hash":"465a85fb977fd569f8f04cbc117f68d894b77a66","date":"2015-12-08T00:45:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import Math.clz32\n"},{"hash":"298b7f81a832eabda73e5ff4be1236fe87d38ce4","date":"2015-12-08T00:46:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add now-passing emcc_hello_world.wast testcase to wasm2asm tests\n"},{"hash":"321f427c789895b8c13e9aa3bf719bf2a8ebd609","date":"2015-12-08T01:35:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix numeric names in wasm2asm\n"},{"hash":"30212c13effee262b1810babcbc7d7e12d8fd003","date":"2015-12-08T01:38:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old code\n"},{"hash":"8337e254c6dff7d5983779b2d5546da1c52f0318","date":"2015-12-08T01:38:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update comments\n"},{"hash":"c69ce72e2f1c256b99e2f5e293936825c6a6621c","date":"2015-12-08T01:40:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove more unneeded code\n"},{"hash":"fad93f9d6a9589d92d01c0399901ecec9f07f662","date":"2015-12-08T01:42:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old comment\n"},{"hash":"d05c5eb177687b3b0e41683027720b3d03b77ced","date":"2015-12-08T01:45:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update comments\n"},{"hash":"3bb2ec9cbaece20ce5930db64aa82d2018bbc10d","date":"2015-12-10T21:10:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor const parsing\n"},{"hash":"bfd65fee1403ca93e847ee2cbd109aca46d7e41c","date":"2015-12-10T21:59:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"process on s2wasm, and first working testcase\n"},{"hash":"c415467d30eb104c33d5211e22d4a7069f75b521","date":"2015-12-11T02:55:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse call\n"},{"hash":"46041b5b73c0f88e07bf1ed7b5af0ce2c2301267","date":"2015-12-11T03:15:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":".s progress\n"},{"hash":"d60ffc7021ecf4dfcf0785362afdd5efffe817c5","date":"2015-12-11T03:54:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more binaries in s2wasm\n"},{"hash":"41757a06fbc13466e7f71cfe65c878685d76c457","date":"2015-12-11T04:07:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"control flow in s2wasm\n"},{"hash":"3c0faf1bce309974c82e96620113bf29dbf4a99a","date":"2015-12-11T04:18:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"almost enough to parse basics.s\n"},{"hash":"9b9f6ad461fd2aa98591a9bbe6260a63f4563edb","date":"2015-12-11T18:28:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"stack fixes\n"},{"hash":"1260181dfb5f975c72661bd611cbc651744de6da","date":"2015-12-11T18:30:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix comment\n"},{"hash":"1ff97c6de3d8dcd67f85433d1142ade65c9f2360","date":"2015-12-11T18:31:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wip .s testcase\n"},{"hash":"8fe1dcbf33748b18d309cebe5f8b70e64e39a996","date":"2015-12-11T22:56:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix block handling in s2wasm\n"},{"hash":"7fbb349bde8ede4542b81b14cea52dcc3e93a02d","date":"2015-12-11T22:58:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add the loop in s2wasm\n"},{"hash":"927242bc9be3c5aaace97fd01de9eb44f6c71abd","date":"2015-12-11T23:09:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix out label in loop in s2wasm\n"},{"hash":"83c7d3f4c38157f2750f0f6cb7dc89693eab15eb","date":"2015-12-11T23:42:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove imports from basics.s, as they may be vanishing from the .s format anyhow\n"},{"hash":"32240a18abfdfcf70796bb72b0851163f0314e19","date":"2015-12-11T23:43:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse data in s2wasm\n"},{"hash":"15f1677713a2b9eb6180788ae3f26bc1ecffec5a","date":"2015-12-11T23:46:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix up static allocation code in s2wasm\n"},{"hash":"2ceaaf0c976e4fdb9bb10bdf1d5fb8ef56406de5","date":"2015-12-11T23:52:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix up static addresses in s2wasm; basics test is complete\n"},{"hash":"0c6b382c3a893a5be98878bf8451627204427c97","date":"2015-12-12T03:14:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add experimental submodule, for the tests\n"},{"hash":"17b16f075fd0c70d5f809712967ecd869bb6b525","date":"2015-12-12T03:15:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"e2a00ea9d0450f250ef8eaf27adf3b23111f6575","date":"2015-12-12T04:01:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"better aborts\n"},{"hash":"8bd7af92305240767d231cb482f767d00e79842e","date":"2015-12-12T04:10:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"s parsing improvements\n"},{"hash":"339b2bfa765a95cdb7d7a991257b59fafe23aef1","date":"2015-12-12T04:12:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"func names in .s\n"},{"hash":"84288282ef586d5664159b9a9fc54dacfc89c052","date":"2015-12-12T04:16:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle missing assign in call as a discard\n"},{"hash":"6e31f25903dd0fb7dd43da64aff0e0ed020a4641","date":"2015-12-12T12:27:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"share operands in a base class for all calls\n"},{"hash":"a6be5ae3d999d514359fdd4a2f5284555ade54a0","date":"2015-12-12T14:13:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse call_indirect and skip imports\n"},{"hash":"54e70e4b391d87482024efcf0829e967e46da866","date":"2015-12-12T14:19:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add call.s\n"},{"hash":"722bb6a82070fa8bd3a263f478b3d2779eee7f1d","date":"2015-12-12T14:33:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"work on call_indirect in s2wasm\n"},{"hash":"f4182a31c0c3cbf7121166b982447e8f8a24aa9d","date":"2015-12-12T14:49:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"const fixes and more comparisons in s2wasm\n"},{"hash":"7bdcdb2f5ee6e2346f946637dc6ba766256badea","date":"2015-12-12T14:52:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle type.op for non-i32 as well\n"},{"hash":"fc4018f7f5f83f91c61276430f2e7da6ad0ccb22","date":"2015-12-12T14:59:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add function types in s2wasm\n"},{"hash":"b93d65397055283791fb9034f5d80a9455d2c091","date":"2015-12-12T15:12:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"load and store in s2wasm\n"},{"hash":"56fc0562393cbeab434c3caa3a7cbdfef158c73f","date":"2015-12-12T15:15:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unreachable in s2wasm\n"},{"hash":"9918cd1666e5083286d4db6ea96f1d35b6a59a3b","date":"2015-12-12T15:15:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add cfg-stackify.s\n"},{"hash":"22ec2948019182bb7792e66f38e083bbe5b950ef","date":"2015-12-12T15:21:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"float comparisons and another .s\n"},{"hash":"79727c13bb60eeb5899c87e7564ba31a844217df","date":"2015-12-12T15:23:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more comparisons .ses\n"},{"hash":"efbc76812555d28241ae7fc7687a0ae4e588006a","date":"2015-12-12T15:24:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix debug name\n"},{"hash":"082b484ed36bbab55e22898bd268ba961df2f213","date":"2015-12-12T15:37:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"many more ops in s2wasm\n"},{"hash":"ecc6d59826d1fc47db3b53efc2ab2e564d679bd3","date":"2015-12-12T15:37:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"cpus.s\n"},{"hash":"525f0a16e22d3a4b2ff95b985d609b6b36c4771c","date":"2015-12-12T15:40:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support multiple locals\n"},{"hash":"69235e272d211e5d5f0aa545a8ae4830f720dbb4","date":"2015-12-12T15:43:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"copy_local\n"},{"hash":"187394be5d5f8ac230b61170161466791c589567","date":"2015-12-12T15:50:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more ops\n"},{"hash":"30b612178e4059b4f5012a25bc1d961da932470a","date":"2015-12-12T16:01:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more load and store\n"},{"hash":"979c212d64fdfaa2017ebf19b8cc97b063ea09de","date":"2015-12-12T16:03:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"7986699edb9974c546937c69738cb5f51f69b997","date":"2015-12-12T16:05:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test update\n"},{"hash":"1bdc7ea94745412d73821e7ab3846f1693423756","date":"2015-12-12T16:30:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix memory_size printing\n"},{"hash":"1ad63eecab0cf8ad49b553827d623e43b074f883","date":"2015-12-12T16:30:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"most hosts, and better const parsing\n"},{"hash":"97670cdc62b48cea0237496996cabdfbe0ac5bad","date":"2015-12-12T16:51:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more data parsing\n"},{"hash":"d4727a75ad4c199d5fa59002b10341936b895b91","date":"2015-12-12T17:02:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more .type parsing, and negative getInt\n"},{"hash":"b330c295d6ca2b2787bf99f0e036b3a46f9e4448","date":"2015-12-12T17:11:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"many more ops\n"},{"hash":"5b97dfbf7cd4ecffbde111020f992b2c7a9bd03a","date":"2015-12-12T17:13:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix s2wasm load\n"},{"hash":"611652074f94d8878cf6ee695b54d2f711dc3803","date":"2015-12-12T17:22:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"quoting and data fixes\n"},{"hash":"819b22e163f5f1f51fbf150fe1efa6c3145ab29d","date":"2015-12-12T17:47:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wip data parsing fixes\n"},{"hash":"ba882732bbe63010cd2b3fe3ad2bd57c16cf6eec","date":"2015-12-12T17:47:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"data parsing fixes\n"},{"hash":"53bfa6cae963c62c40c1eac305ae94b6dea6e59c","date":"2015-12-12T21:19:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more escaping\n"},{"hash":"500c47b78571f6bcffba00ae2519782814c9d29e","date":"2015-12-12T21:30:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finish escaping and add many more .s files\n"},{"hash":"63c53fea0b37c2af8e3a106428625e227943dc25","date":"2015-12-12T23:10:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable switch.s which looks nonstandard\n"},{"hash":"b9adbb829ccd3232d4bb3026c88944f08bb88ca9","date":"2015-12-12T23:23:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more escaping\n"},{"hash":"d429bbcc5d9aa402b8902274dce5b9a71653676f","date":"2015-12-12T23:31:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more escaping\n"},{"hash":"062518cbe64d096186c5b48e1de0717bc02486f9","date":"2015-12-13T02:15:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"scan function result types in s2wasm\n"},{"hash":"8b5dfadc89a2e08b4d7ff3c28c4f91dd7815b52a","date":"2015-12-13T02:21:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test file\n"},{"hash":"de14ec0b8b1d6a40b5ec9a2e0131c2fe89b4f268","date":"2015-12-13T15:06:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme updates\n"},{"hash":"4b5c9e7fb5e5323cd558e33ac4c6c8f85cba2fbb","date":"2015-12-13T23:03:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mention s2wasm usage\n"},{"hash":"cf5d4c86462e4da31d6a6e10f9104828dc6eb64f","date":"2015-12-13T23:18:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more readme stuff\n"},{"hash":"91c353b3c9f1f4121992bd3bd04eed84907ddeb4","date":"2015-12-14T03:53:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"export all methods in s2wasm, for now\n"},{"hash":"07e236b06dfb8d223b93c893ffe92a2b1d64bc9d","date":"2015-12-14T23:27:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update experimental tests and handle new call syntax\n"},{"hash":"1d9bacd6187703e2dff43a09d034e4ac094b241c","date":"2015-12-14T23:37:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle more loop/block combos in s2wasm, and update more test outputs\n"},{"hash":"0b41a7d99f7652d607b14897e2ee963b28b6916e","date":"2015-12-14T23:48:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse switch in s2wasm\n"},{"hash":"4a6a88ae8387c9db99acda5b4fb1d2bff999a8a0","date":"2015-12-15T00:10:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add relocation support\n"},{"hash":"d2e86e43d69252f7262c5a17f9c4e0ff8ba75753","date":"2015-12-15T00:31:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"relocation.s now works\n"},{"hash":"bea7c5af891e0a6dee9b2551cd3632848f652fa1","date":"2015-12-15T01:22:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"detect which calls are to imports in s2wasm\n"},{"hash":"76617512d2bbffb6abf0a1b3ba13da433c194425","date":"2015-12-15T01:29:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add imports in s2wasm\n"},{"hash":"89e0212e5cb1824dc936a5994176de85f259df0b","date":"2015-12-15T03:02:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to emit metadata from s2wasm\n"},{"hash":"3fe9c430f321a5cdf948a903509367ba872e37a6","date":"2015-12-15T03:14:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"escape asm consts\n"},{"hash":"119896a6688ff3ae78bdd0b0cc47328c3383ac2a","date":"2015-12-15T03:24:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit asm const ids\n"},{"hash":"bd3a35d28606220000b160cbd4494242542d0502","date":"2015-12-15T03:29:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"patch emscripten_asm_const calls with the sig\n"},{"hash":"2ce78b61261357ce1c9391e318ed87e992a02587","date":"2015-12-15T03:31:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix asm const arg\n"},{"hash":"dcef40dbc73de2496c05476379603bdf521b34fe","date":"2015-12-15T03:52:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix imports for asm const methods\n"},{"hash":"7314f30d61b4850b2b4c7850901725ea287fd715","date":"2015-12-15T04:03:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emscripten_asm_const needs a prefix '_'\n"},{"hash":"03e1465919fe68416fc4b4e19a14f96456578002","date":"2015-12-15T04:18:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add first WASM_BACKEND output testcase\n"},{"hash":"5cced1f88657b628f55cc48c486f85f772001472","date":"2015-12-15T22:24:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix stack popping in s2wasm\n"},{"hash":"7df1e482dcdc2305767ab483406a60490fe98555","date":"2015-12-15T22:27:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add another wasm-backend testcase\n"},{"hash":"c9d8cd2b39a286687b917ff1b4f32c2ebb827ba7","date":"2015-12-15T22:54:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor type parsing in s2wasm\n"},{"hash":"7e9bc12167a0f92a82f3615cedef6f4c818d8c10","date":"2015-12-15T23:16:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add memops .s benchmark\n"},{"hash":"8291fd4a435dbb95661e13c5f823498312db4d79","date":"2015-12-16T00:46:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support offsets in relocations\n"},{"hash":"d1bfe365bbf163e94b741c715787da23f5cdd3e9","date":"2015-12-16T00:48:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update .s tests\n"},{"hash":"cdc654c5a132cda78d0f4760b499daa7a10f6cde","date":"2015-12-16T00:52:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test outputs\n"},{"hash":"b61b273ad7ed9b6b27170f3726be79b527198788","date":"2015-12-16T00:52:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't emit zero segments\n"},{"hash":"cdb2e4c0cf106ee145f5a32ba5d17c62df2e92d2","date":"2015-12-18T01:25:21.000Z","author":{"name":"Bruce Mitchener","email":"bruce.mitchener@gmail.com"},"message":"Fix missing override warning.\n"},{"hash":"2a761fa9c8ebe419a547db69e3c636a01b68eaa8","date":"2015-12-18T02:42:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #8 from waywardmonkeys/missing-override\n\nFix missing override warning."},{"hash":"8fbc5c08f87c978914a7dfafb55b2869297145e5","date":"2015-12-18T03:38:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix s2wasm comment output #9\n"},{"hash":"c5b829c88862b3a0bf996696a6bc29f51f825cca","date":"2015-12-18T03:57:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support constants global addresses in loads in s2wasm\n"},{"hash":"738feca9aa0ca0b21e47d0a6d9bf5f572902d2a3","date":"2015-12-18T04:08:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"accept more things in s2wasm\n"},{"hash":"3369c929b2da94428c6f2055d58236352354af43","date":"2015-12-18T04:09:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support global offsets in store in s2wasm\n"},{"hash":"33b580d7a61b0666970855510992619fa1cab467","date":"2015-12-18T04:26:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"generalize relocations and add multiple elements in a global name\n"},{"hash":"4148c6e4ebd7d9e631365e092c04c34a769ca63a","date":"2015-12-18T04:27:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add new test files\n"},{"hash":"3673eb319c9d6674d257cd13ca702d606d053e57","date":"2015-12-18T09:35:01.000Z","author":{"name":"Ying Ruei Liang (KK)","email":"thumbd03803@gmail.com"},"message":"Use https for url to prevent permission problem\n"},{"hash":"e6afdf3d6c679e7cf09ca31641dbfd8fc7dcc184","date":"2015-12-18T09:50:08.000Z","author":{"name":"Ying Ruei Liang (KK)","email":"thumbd03803@gmail.com"},"message":"Update git submodules while running build.sh\n"},{"hash":"4fdeac9210714cd902f8e6db52b47b16a326c231","date":"2015-12-18T14:38:52.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"fix typo in readme\n"},{"hash":"174ab890d66bcaeda615204ae94a733e95dbb19a","date":"2015-12-18T17:23:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #12 from loganchien/fix-readme\n\nfix typo in readme"},{"hash":"4cc1485b11726a5c6fd0eda25fe2b092f174bedb","date":"2015-12-18T17:25:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme update\n"},{"hash":"f7037892baf98635764e0baadb17963409f65165","date":"2015-12-18T21:43:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #11 from TheKK/makeThemWorks\n\nUpdate submodules while running build.sh, and make it runs well"},{"hash":"ee704bf65d71e63fc6d268204ede55e247261872","date":"2015-12-18T21:46:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme notes on git submodules\n"},{"hash":"e7e30dfabf39b84ad11179a3638acbbbaa8ef071","date":"2015-12-18T22:05:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix block label parsing\n"},{"hash":"1728102c32ee94dae1269bbba15e1c9836fdc8fb","date":"2015-12-18T22:18:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"2651a7c315cb5bf7343fe889585659074d5056c8","date":"2015-12-18T22:19:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update upstream tests\n"},{"hash":"884b9f8a688766e08907431cd6759bfaa89399dc","date":"2015-12-18T23:06:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove Label, which was removed from the spec\n"},{"hash":"8c19c7eefe4980cfba39e835fd6ab7bb95c3f9ad","date":"2015-12-19T01:31:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"be more careful about parsing s-expression comments\n"},{"hash":"1a533352acd93cbad0c48f532a1e83cd5e262939","date":"2015-12-19T16:38:49.000Z","author":{"name":"Bruce Mitchener","email":"bruce.mitchener@gmail.com"},"message":"Initial start on CMakeLists.txt.\n\nThis is not yet complete as it doesn't perform the emscripten\nbuild stage, nor does it attempt to run tests.\n\nThis is work in progress on issue #2.\n"},{"hash":"c743580ccc6e34dc498cd0a8ed24c6aaeee119ec","date":"2015-12-19T17:05:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old debug code from s2wasm ; closes #14\n"},{"hash":"bc560295e015020d9b9e60fdab329c36e91d0260","date":"2015-12-19T17:53:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #15 from waywardmonkeys/cmake\n\nInitial start on CMakeLists.txt."},{"hash":"d004ea9799ec3f0a9a25071ca3ced5ee3cd7144f","date":"2015-12-19T17:54:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"lower required cmake version so ubuntu 14.04 lts is ok, which should be a bunch of users\n"},{"hash":"552e8f2f912811022d8bae1a10b9430c9205903c","date":"2015-12-19T17:55:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"specify c++11 in cmake\n"},{"hash":"843ff2b613e734a31a6acb061476a105f1669949","date":"2015-12-19T17:56:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve gitignore\n"},{"hash":"05d96f1517dc801b14c69ae3b72f590c86286448","date":"2015-12-19T17:58:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"cmake notes in readme\n"},{"hash":"e0e17362506d63ed0ffb5509f9ba5b0d41d5e578","date":"2015-12-19T17:59:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add float args from build.sh to cmake\n"},{"hash":"bbc008136ca948101229d2d7c8eb9773001596dc","date":"2015-12-19T18:00:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimized builds in cmake\n"},{"hash":"105adf640bd6b2ef8c8e5722fe21bfe93d8b9985","date":"2015-12-19T18:04:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more gitignore\n"},{"hash":"7becfbed08e5404c19e1f241f160576354e402a8","date":"2015-12-20T01:18:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve joke\n"},{"hash":"42000f2ed456c05747c04e8b4a159bb8a3464c21","date":"2015-12-21T03:15:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse 'weak' in s2wasm\n"},{"hash":"c7eaa6261215689f4cea1264da8b44494bc7f2a9","date":"2015-12-21T03:25:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore .section inside objects in s2wasm, and update .s tests\n"},{"hash":"b58eadbc45b58322c1efa1f94f14bf0f15ae4d23","date":"2015-12-21T18:17:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update experimental submodule\n"},{"hash":"2654fe23914c87afb2dd7340709db2cea5e2b047","date":"2015-12-21T18:50:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"look through >>>0 coercions in asm2wasm\n"},{"hash":"13ea1c52bbd620ba1818dd3ed6bbeb77fd7b06ab","date":"2015-12-21T20:33:31.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":".gitignore ninja files\n\nThey get generated when using cmake -G Ninja.\n"},{"hash":"14bc8843341ccbd9a8fec4aba7954dd2a201fd20","date":"2015-12-21T20:34:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #21 from WebAssembly/gitignore-ninja\n\n.gitignore ninja files"},{"hash":"007c2960ee5790c83bd105a6a7ec1c6dc6e7e69c","date":"2015-12-21T20:37:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #5 from WebAssembly/jfbastien-patch-1\n\nLicense and contributing"},{"hash":"c0dcfbc09887ed3bfaa978fc64d9293946ff7aad","date":"2015-12-21T20:41:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename post.js as we will have other js components\n"},{"hash":"73345105034640d09d9557c55ce5e9077c2cb8f8","date":"2015-12-21T20:56:01.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix the license headers\n\nThis applies Apache 2.0 properly (as far as our lawyers have told me). We can do this early since all of the code was written by Alon Zakai.\n"},{"hash":"fab26d37f7e107596bd733d70d2330410eae24cf","date":"2015-12-21T21:02:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse imports early, as they may be at the end\n"},{"hash":"157a0eb6577464ffffe4a16ac42f39fd3f8a7bca","date":"2015-12-21T21:14:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update experimental tests\n"},{"hash":"b65195fdd982b3d3c741f4e91f375ae92351143a","date":"2015-12-21T21:20:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle return with no value in s-parser\n"},{"hash":"37ea049f1135bda96e00ed58b25fe9fa462016a6","date":"2015-12-21T21:24:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add more debugging to wasm-s-parser\n"},{"hash":"bcfa3e8520d220ae274ffe98701a13b032da3cd7","date":"2015-12-21T21:34:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Revert \"add more debugging to wasm-s-parser\"\n\nThis reverts commit 37ea049f1135bda96e00ed58b25fe9fa462016a6.\n"},{"hash":"20ffcb30b5d9d58de0a2be55c998610ae01cb45f","date":"2015-12-21T21:35:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to verify that experimental wasts parse ok\n"},{"hash":"b860ac84f6fb286793c9dfcbc4fd767de9cbfa24","date":"2015-12-21T21:39:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #22 from WebAssembly/fix-license-headers\n\nFix the license headers"},{"hash":"bdb9bf5a59073ca6ff45cb851fa85ee67fefe22f","date":"2015-12-21T21:42:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"reformat blacklist for experimental wasts\n"},{"hash":"a032c1bedf0df186f5f6166ba41af82a42e7db2f","date":"2015-12-21T21:45:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more escaping\n"},{"hash":"6f8a5cd09ad3bb3a171689e344ac5e6846df81d8","date":"2015-12-21T21:46:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable a test\n"},{"hash":"869dabbb011e80b26018f38de06823fb159b05e0","date":"2015-12-21T21:47:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable another test\n"},{"hash":"97f639e459643de5e6659080335174cb795dff4d","date":"2015-12-21T22:50:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move wasm2asm testcases later, after spec testcases are set\n"},{"hash":"f0dbc606f7217e1151edd14c9ecfa80290b3009b","date":"2015-12-21T22:53:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support load/store offsets in wasm2asm\n"},{"hash":"d41d290af2e14261ccbe35744514bee00d2d0623","date":"2015-12-21T23:37:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unaligned loads and stores in wasm2asm\n"},{"hash":"299ab38173483b22ee754f147c74b0e6f53d7432","date":"2015-12-21T23:42:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add first spec test for wasm2asm\n"},{"hash":"681b4d1c5b5e28ea96b8f54b48e6de1e823afd61","date":"2015-12-22T00:37:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use concrete list of passes in build.sh\n"},{"hash":"3e342a74b272a2d395b00b8d1e73d54ab29d4d0e","date":"2015-12-22T00:37:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start work on LowerInt64 pass\n"},{"hash":"0abd164bcb5c8fe0c2ff2b9d69a5b39519e64573","date":"2015-12-22T00:41:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve auto updater\n"},{"hash":"ce6b595a23455004af001109979467a462dbc076","date":"2015-12-22T01:26:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"getlocal and setlocal in LowerInt64\n"},{"hash":"8794a809838ba609400f7f8c5d41571700cbf289","date":"2015-12-22T01:29:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare for functions in LowerInt64\n"},{"hash":"05a6eb48c1258a9d8f7cb8356e541d0fad50bc30","date":"2015-12-22T19:29:34.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"s2wasm: add outfile\n\nUse some C++ in a few places. I'll propagate similar changes to the rest of the codebase later. I also need to turn off colors when outputting to a file (isatty on stdout doesn't do that with -o) but I'll do it in a separate PR because it'll touch more files.\n"},{"hash":"dc9f3977561017924e08a8f87727f1ee1bcf8f97","date":"2015-12-22T19:43:20.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix uninitialize variable warning\n"},{"hash":"8c8294bad3068267940f293be9c2c26b64e66219","date":"2015-12-22T19:49:44.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Move command line to its own file.\n"},{"hash":"e546e2fec81baf447c7146b5f84274ca653fb7cb","date":"2015-12-22T20:29:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update test newlines\n"},{"hash":"475bc5601fcacc260d4aac6f71cfff5b224c4847","date":"2015-12-22T20:31:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #24 from WebAssembly/uninint\n\nFix uninitialize variable warning"},{"hash":"2c1cf74201b03852f19082c1346ee5a80e6ed7cd","date":"2015-12-22T20:42:44.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix warning on mixing struct / class\n"},{"hash":"bf680f7553433c2cd0ffdd641e4e37fceed8b7ed","date":"2015-12-22T20:44:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #25 from WebAssembly/warn-struct-class\n\nFix warning on mixing struct / class"},{"hash":"48d8e31f81f16b059728b4b098223ec0ef4c7510","date":"2015-12-22T20:47:47.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add missing virtual dtor\n\nDeleting a Pass* wasn't doing the right thing.\n"},{"hash":"1749331c841d5ecc42d4b82617cb958766cbdfb6","date":"2015-12-22T20:48:46.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Don't put -Wall yet.\n"},{"hash":"afd2e66106d08792f54aea7ddfa408853ce229ed","date":"2015-12-22T20:51:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #26 from WebAssembly/virtual-dtor\n\nAdd missing virtual dtor"},{"hash":"dd1b898e98ae19012ef18a990a9283ab7d349652","date":"2015-12-22T20:57:27.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix unused variable / function warnings.\n"},{"hash":"8e3fa9c80d50a6b3e883d218aaaddf02ff4b94d3","date":"2015-12-22T21:04:55.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Restore getStr(), but dicard result.\n"},{"hash":"4726dcfd02ca4bea786fe4b6ef4629e3e2a1561d","date":"2015-12-22T21:05:14.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #27 from WebAssembly/unused\n\nFix unused variable / function warnings."},{"hash":"e3c5ca02fde4282a3797be6ecea5a473ac8c3a1d","date":"2015-12-22T21:51:20.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix warnings found by GCC\n\nMy previous patch addressed all LLVM warnings, this one addresses all the GCC ones as well (mostly signed / unsigned mix).\n\nThe patch also turns on -Wall -Werror.\n"},{"hash":"58cb71723a5243f8a347e51e9ceb20b664719585","date":"2015-12-22T21:52:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"load in LowerInt64\n"},{"hash":"e54299ed9f4f53b441689dbe96281947247ef138","date":"2015-12-22T21:52:41.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add compiler-support.h\n"},{"hash":"5f7c296dbaba32bc4dad65cbee84ee95a01919bf","date":"2015-12-22T21:56:21.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"32-bits are enough since this is an asm.js pointer\n"},{"hash":"397ddb4bbced30b96d6f05dddaea6a395269cf34","date":"2015-12-22T21:59:54.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add curlies.\n"},{"hash":"89972f57fc1d98a2990a635878df39867d1f98f9","date":"2015-12-22T22:03:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #28 from WebAssembly/wall\n\nFix warnings found by GCC"},{"hash":"b221bd91e51ef404f14ac938f111833b4892320e","date":"2015-12-22T22:19:26.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add list of known GCC torture test failures\n\nI'll run the tests on the bots, and then triage the failures and fix them.\n"},{"hash":"353df280a0343b5b3180055da331ef20c993275f","date":"2015-12-22T22:35:36.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"It is known (in tests).\n"},{"hash":"7c39b5ee5dcaf2182d20ca1cb540bbff9adc4c0b","date":"2015-12-22T22:36:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #29 from WebAssembly/s2wasm-known-failures\n\nAdd list of known GCC torture test failures"},{"hash":"b6786d8187e79d60fcb24e3e6589444cf463128a","date":"2015-12-22T22:53:34.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix / uniformize include guards\n"},{"hash":"50dca4285a53bf5107e0f44e695a1085d6a55d00","date":"2015-12-22T23:00:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #30 from WebAssembly/include-guards\n\nFix / uniformize include guards"},{"hash":"9fd7cfcb3f50eac87016170e8c130674fd37fcd0","date":"2015-12-22T23:16:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"visitStore in LowerInt64\n"},{"hash":"175da4d20630afd2c0ab5b9be5842c41694c2b35","date":"2015-12-23T00:50:59.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"s2wasm: support .int8 and .int16 data\n\nThis fixes a bunch of the torture test failures.\n"},{"hash":"30e50a249b5addeef577dfd59501a569f34de920","date":"2015-12-23T00:55:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #31 from WebAssembly/int8-int16\n\ns2wasm: support .int8 and .int16 data"},{"hash":"8c2f9320fc3eff1080a1e98c79c8b83d372ca6cf","date":"2015-12-23T01:16:19.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"s2wasm failures: identify one bug in LLVM\n"},{"hash":"fe912e2582e7589a890f3c1a317252e8d2738a2c","date":"2015-12-23T03:20:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update experimental tests\n"},{"hash":"125f085cb5d28e75635844f1b72b8b3ce82b314c","date":"2015-12-23T03:36:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix parsing of large offsets in 32-bit\n"},{"hash":"a79329fbe135bab9a319fd3afc911620b12f0124","date":"2015-12-23T04:09:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"misc minor s2wasm fixes for globals\n"},{"hash":"32490684ab0fa568d4e539c24f7c560295da57de","date":"2015-12-23T17:29:24.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Fix a few Windows/VS2013 compile errors\n"},{"hash":"a009c9c935c732c357f73358630bd1c55e4a87a9","date":"2015-12-23T17:44:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"s2wasm const parsing fixes\n"},{"hash":"65f8f24c7bb1da884eb74d5fd742fcf35526483c","date":"2015-12-23T18:17:50.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Implement feedback\n"},{"hash":"3d35e0ad734716d1f7c2bb123d7d6150d6fadbac","date":"2015-12-23T19:23:18.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Emit error message when an unknown symbol is found\n"},{"hash":"cb256d096ff2c6b53bb8e0175920e1c9734c476b","date":"2015-12-23T19:31:26.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Output the symbol name.\n"},{"hash":"06952cee2becd83ab5a531b3e5649ad5f137d09f","date":"2015-12-23T19:35:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #37 from WebAssembly/extern-error\n\nEmit error message when an unknown symbol is found"},{"hash":"441f3a1d04a698bc9e71cbd29be085ca2a80b3c4","date":"2015-12-23T19:39:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve check.py\n"},{"hash":"253d42efc00510ce7a07e7ab05930ff93bd3c70d","date":"2015-12-23T19:39:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor memory merging code\n"},{"hash":"dd48f32a130a4c45d7b2ca0df95f4a27cadd117e","date":"2015-12-23T20:05:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"generalize commandline options and add global-base option for s2wasm\n"},{"hash":"e06c85acfe7332640aadfea2c4f62ab71d159a88","date":"2015-12-23T20:39:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit staticBump in metadata\n"},{"hash":"781ac0929c76862c9988867a731b4699b459f5fd","date":"2015-12-23T21:08:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix s-parser handling of memory segments with 0s\n"},{"hash":"6f573309b3ee704eff76068297511934ca13009f","date":"2015-12-23T21:11:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wasm-backend globals testcase\n"},{"hash":"24c5e1807f583ecc5b6fdeb87eeba2c501f0bac4","date":"2015-12-23T21:18:42.000Z","author":{"name":"Andrew Scheidecker","email":"andrew@scheidecker.net"},"message":"Change colors.h to isolate and minimize code that isn't compiled on all platforms\n"},{"hash":"b6214708e08fe8cc894bfd4ace866beb6bb3606f","date":"2015-12-23T22:40:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle combined globals better in s2wasm\n"},{"hash":"b414b0e0b2d8b7e35375bcff4696f608f9e5bd14","date":"2015-12-23T22:45:26.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update expected s2wasm failures\n\nThese tests now pass. New ones are failing unexpectedly, though. Investigate separately.\n"},{"hash":"070b1102338a7baa8d0c5f0e5c6731b93cf0e09a","date":"2015-12-23T22:58:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit tables in s2wasm\n"},{"hash":"a96c0af450174cb6d07db5e93a43795a280d3c3b","date":"2015-12-23T23:02:21.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Portable bit functions\n\nAs discussed here:\n  https://github.com/WebAssembly/binaryen/pull/34#discussion_r48379297\n\nIt's useful to have portable bit functions instead of relying on compiler builtins which aren't always portable.\n"},{"hash":"138dee6fb54ef464c0a674f359aff71ab9d0c868","date":"2015-12-23T23:07:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #34 from AndrewScheidecker/windows-fixes\n\nFix a few Windows/VS2013 compile errors"},{"hash":"24bb902bf9c80311718c98e34c97363e41790849","date":"2015-12-23T23:08:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #39 from WebAssembly/bits\n\nPortable bit functions"},{"hash":"8823074de217c11ad4fcbf2d21ff588c297704c2","date":"2015-12-23T23:09:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #38 from WebAssembly/update-expected-fails\n\nUpdate expected s2wasm failures"},{"hash":"9ec32cf1ee5f67de5fc3782ce175ef2324b202c0","date":"2015-12-23T23:11:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix typo\n"},{"hash":"3b52cb1fc5909198e42c9813e289f11e898b0a6b","date":"2015-12-23T23:35:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"note bug for failing test\n"},{"hash":"05cf6cc7750d41377c95a66f15976acf527a3bf3","date":"2015-12-23T23:37:35.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update expected s2wasm failures\n\nUsed to fail with:\n  s2wasm.h:937: void wasm::S2WasmBuilder::parseObject(wasm::Name): Assertion 'seenSize == size' failed.\nFixed by:\n  b6214708e08fe8cc894bfd4ace866beb6bb3606f\n"},{"hash":"ce86316ecc8f028265e6557488a064f8623dbf26","date":"2015-12-23T23:40:32.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"merge.\n"},{"hash":"df0e9b04330a0df3aab31856ad4567312a8affcd","date":"2015-12-23T23:41:08.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #40 from WebAssembly/update-expected-fails2\n\nUpdate expected s2wasm failures"},{"hash":"a40e154b2cfc9eaf0b55c1a478f848e4f851dbd0","date":"2015-12-23T23:51:44.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Use the new bit functions\n"},{"hash":"b055995ff2cb99d10d5be3ffd9ed3757b499ede9","date":"2015-12-23T23:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle indirect calls with no parent in asm2wasm #36\n"},{"hash":"cef89df8e5ad80a0fb881af31804eef854909552","date":"2015-12-23T23:58:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #41 from WebAssembly/use-bits\n\nUse the new bit functions"},{"hash":"d049ae31248fd3db11717a3ea006c5d1f59c913d","date":"2015-12-24T00:07:43.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"bits: return 32 on ctz32/clz32 of 0 instead of -1\n"},{"hash":"fa3d3bab09730f7bbce4e6d6889ebda3be3795d6","date":"2015-12-24T00:10:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #42 from WebAssembly/bits-ub\n\nbits: return 32 on ctz32/clz32 of 0 instead of -1"},{"hash":"686551ec7012aa293730c4836edfe3003b519d95","date":"2015-12-24T00:15:28.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"clz32: handle 0 as with ctz\n"},{"hash":"6874599d894b925ee5708c30de0cd3d355fed729","date":"2015-12-24T00:19:49.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add curly.\n"},{"hash":"5ae3515596921ca5721a540d9aeb74fdf1af87ae","date":"2015-12-24T00:20:00.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #43 from WebAssembly/clz32-0\n\nclz32: handle 0 as with ctz"},{"hash":"a8f29286f99b8cde3dbb4656d5ac24a0ec2bdf5c","date":"2015-12-24T00:20:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure proper literal type for popcnt results\n"},{"hash":"fa5c5abb890371fabc5c4091c72675568a3d6c8e","date":"2015-12-24T16:53:24.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update expected s2wasm failures\n"},{"hash":"35df36e4c18498c72bd8345d99e27856582d9054","date":"2015-12-24T17:17:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #45 from WebAssembly/update-expected-fails3\n\nUpdate expected s2wasm failures"},{"hash":"f2773d476c835fcc95e4e67d775736affa224552","date":"2015-12-24T17:26:04.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Simplify the bit functions... a bit!\n"},{"hash":"207af0d877d195cf22540c00ebe8607c9ef41316","date":"2015-12-24T17:38:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge branch 'simplify-bits'\n"},{"hash":"42039d1a5f2d53f64828a378bc5ce59b816ef8de","date":"2015-12-24T17:53:39.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add a support static library\n\nFor now I've only moved the color check (and made it check the environment only once, note function local static initialization is thread-safe in C++11). This will make the builds slightly faster and allow us to move platform-specific code out of header files (reducing the amount of #include gunk). I'll eventually move other parts of the code to support, especially the command-line parsing (once it's reusable).\n"},{"hash":"4fda7967edabc917a2be541c2bd3f0ba2cfcb63a","date":"2015-12-24T17:57:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #47 from WebAssembly/support\n\nAdd a support static library"},{"hash":"fbf23be76c01b706ff3cd661a1463546291c5f9c","date":"2015-12-24T18:01:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update check.py for libsupport\n"},{"hash":"61fd115827c9dc02965fc56ee84d0f6b41ce0caf","date":"2015-12-24T18:11:11.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Specify a library and archive output directory\n\nOnly archive is needed for static libraries, but while I'm here also add the library output directory.\n"},{"hash":"fe9fb1844dec17fe48ef8c70ef6cec0679e63cb6","date":"2015-12-24T18:51:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #48 from WebAssembly/lib-dir\n\nSpecify a library and archive output directory"},{"hash":"35be999879f7af5366c0195dbe45b1fd8a22a539","date":"2015-12-24T18:54:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update check.py\n"},{"hash":"a03ffe19481eb0d9fa8497dd9695cbf4fe981dcc","date":"2015-12-24T21:00:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update build.sh\n"},{"hash":"6f57800cedfcb6903783ca2d495f6033645dcb11","date":"2015-12-24T21:38:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix relocations into a segment with multiple parts\n"},{"hash":"d13a16c17de50546a2272627fee29e1ec5f64385","date":"2015-12-24T21:39:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable another now passing test\n"},{"hash":"9ed14f5b12e1b6b2000f13952e6a075c9c307d9b","date":"2015-12-24T21:47:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore function alignment, and parse globl in main process loop\n"},{"hash":"b300e9bafb4d4085e7cc2fc5c3d37630d0cc61d0","date":"2015-12-25T15:52:45.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Update expected GCC test failures\n\nFixed by r256402."},{"hash":"49eff55076f009630c859424df932ad1e78bf33f","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix const literals in s2wasm on 64-bit\n"},{"hash":"a62d9e30d85cef666055a3afe33942017766b008","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle function indexes in relocations\n"},{"hash":"0cdd61e4552509a9f06f729421eb5045114cebac","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit memory size in s2wasm\n"},{"hash":"b9dd33226924ac299166169b1b58a00aae20b85a","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle global addressings starting with '_'\n"},{"hash":"f9a5d31370a0e021c3384245f19a2c751afa02ea","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"no need to reverse call operands anymore\n"},{"hash":"23834dd0c7de36cf054db7178619b0755eec9b98","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix function indexing in s2wasm\n"},{"hash":"bf3eba4084311696937f88b93b7a9ecbcc333f3b","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add indirect call testcase for wasm-backend\n"},{"hash":"58f9fb42a8be00e56aa23778c01da21b06207936","date":"2015-12-25T23:41:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to update tests after latest changes\n"},{"hash":"09c2af18e4581a45c7765279a9c3af1f265f7351","date":"2015-12-25T23:54:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore lcomm for now\n"},{"hash":"7e1189e72938f23b463b7b531c1e91faea1f2c5e","date":"2015-12-25T23:54:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more updates\n"},{"hash":"0f7bffb6b66698d21cb2f44a4a5b7bbaa3acd59c","date":"2015-12-26T01:28:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to implement lcomm\n"},{"hash":"714df6b655f5d5f7da33ef091f3c8c758549597b","date":"2015-12-26T01:31:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finish updating .s tests\n"},{"hash":"fc2d299ffe1877a635277acff15574d987da9a53","date":"2015-12-26T01:31:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests/experimental\n"},{"hash":"b258f03455399fcadc6a4ba7426fa447fe6dff66","date":"2015-12-26T21:20:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement a temporary hack for __stack_pointer\n"},{"hash":"871ae55b7e1d12af157e46914182651dbc204f8b","date":"2015-12-26T21:30:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add testcase output\n"},{"hash":"100cfe1c40ef0304a1721fa2148ae2e5a9842b8f","date":"2015-12-27T15:59:00.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Update expected GCC test failures\n\nSome new unexpected symbols, a lot fewer (Alon added a workaround), finds a new bug with negative relocations."},{"hash":"00cad7e5794087bd4f3062af655cad0b11a4e29a","date":"2015-12-27T16:20:34.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #51 from WebAssembly/jfbastien-patch-1\n\nUpdate expected GCC test failures"},{"hash":"55a5d2c8ddfd24e94c56448ffc3ba904f69b267d","date":"2015-12-27T16:29:21.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Update s2wasm_known_gcc_test_failures.txt"},{"hash":"49bc6a370abf20ee2b2749ee3ca73373bfeceeb7","date":"2015-12-28T01:30:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"merge addressings and relocations, improve getConst, and use that to easily implement negative offsets\n"},{"hash":"600d2c32cc347d77826de8e0c996949536f5c209","date":"2015-12-28T01:31:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test with negative relocation\n"},{"hash":"b800b555d79b0a4219bb4a160498109d70644832","date":"2015-12-28T16:41:29.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Update expected GCC test failures\n\nNegative relocations fixed in 49bc6a370abf20ee2b2749ee3ca73373bfeceeb7, fixes #52."},{"hash":"edc992eb3cd3afece4ba623c382f408aecde4e4a","date":"2015-12-28T21:33:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #53 from WebAssembly/jfbastien-patch-1\n\nUpdate expected GCC test failures"},{"hash":"e8a564897cfd3945a097bd07c553d7a5d29355b8","date":"2015-12-30T01:19:32.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Start moving command-line processing to libsupport.a\n\nThis only moves things, no functional change yet.\n"},{"hash":"c17a9376713fc4aaef9f3ff40b6a12bab0153ea0","date":"2015-12-30T01:22:17.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix include guards"},{"hash":"e78f6ad3b4c9af4eaaec7309768525ea541d1c3e","date":"2015-12-30T01:22:45.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix include guards.\n"},{"hash":"3bf113b601de6d1a55f54ed1b788037cd5514419","date":"2015-12-30T01:29:13.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add a help to avoid out-of-bounds.\n"},{"hash":"50223b341b38c35034821250683635d1fd6a4f76","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update check.py disabled test reasons\n"},{"hash":"782b708984d38fdcd2191f65236227cf6ea11702","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add some s-parser debugging\n"},{"hash":"a372e22c7a54bcfce2b485f57b38c0eafee8ee7a","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more check.py explanations\n"},{"hash":"d0eaa583d99a4c116b054fe7431d76d1d7ae8529","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove obsolete comment\n"},{"hash":"358f8d614e34c240a089ea02d08da47da4393d7b","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove another obsolete comment\n"},{"hash":"0421bd0c27ea57c7c5c9bc3b1ce6f71f8ce240dc","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start work on binary format, per v8 spec\n"},{"hash":"41e1551c99a8f7378e5941e684c95b615c5b120d","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more binary work\n"},{"hash":"d62b5863dc8231bfdea1b72291b7c854dec64f8c","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to emit AST nodes in binary format\n"},{"hash":"e9a2d9dc3dcbd6523b30853ae0708290c1eed32f","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"loads and stores in binary\n"},{"hash":"1e765b3b8b34ec48c8cdccd79667d2e5c957d983","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"const in binary, and avoid char()\n"},{"hash":"a7dccb1294a258793203720b1dc889a5993c95bb","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more binary stuff, all but unary+binary\n"},{"hash":"d26cd0e48e948862b545d4fbf98c98b0978d1022","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"unary in binary format\n"},{"hash":"fb895476f8ba11c27a4732be28ec53356f6d759f","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"binary in binary format\n"},{"hash":"44a8aeaf5820ee06e8c6dbc061d131d7b4d39cd3","date":"2015-12-30T06:16:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"BufferWithRandomAccess\n"},{"hash":"c34dd278a73ecb34fb10825f238ef98d394e4f0b","date":"2015-12-30T17:03:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #55 from WebAssembly/support-command-line\n\nStart moving command-line processing to libsupport.a"},{"hash":"9ab2086e41da78925826d22bb5020c2962a8ae0b","date":"2015-12-30T17:30:21.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Typo"},{"hash":"33b823c5467ca915db85f644084f978c6ea28148","date":"2015-12-31T22:00:12.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update test/experimental\n"},{"hash":"c823a8c37f1eb12d93fab1755788c010afadf405","date":"2015-12-31T22:02:39.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add test/__init__.py.\n"},{"hash":"0ccfca7138cbbd483e23703e11c832a08e10d027","date":"2015-12-31T22:05:28.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix check.py license\n"},{"hash":"4c55b2ef14e414ae2098c3b358006975d25230e3","date":"2015-12-31T22:25:07.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Create update.py\n\nThis is an offshoot from #54 which will use the buildbot output to run tests.\n"},{"hash":"cab54599715f9e8c6c2a111d37b4083754b8ea78","date":"2016-01-01T19:20:48.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix __init__.py exec bit.\n"},{"hash":"0a85cbe347f410df8d9e88fe1122450914ddfadf","date":"2016-01-01T19:22:03.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update test/experimental\n"},{"hash":"ae24c9056d05b5f3ebe90cf4c345a986a6539bf4","date":"2016-01-02T21:49:11.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Generalize command-line parsing more.\n\nThis should allow other programs to use the same command-line support.\n"},{"hash":"0c0afc1a2960972fc7aa24cfb85289ead5b3441d","date":"2016-01-04T02:00:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"README: mention cmake build"},{"hash":"6f21a0a07e6ec8e326a49cdbe2af08ca06f79cda","date":"2016-01-04T18:36:25.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Mention ninja below"},{"hash":"2410eccb2a4bc7bbda87b299a6cd6fc434c77c01","date":"2016-01-04T18:36:48.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #59 from WebAssembly/jfbastien-patch-1\n\nREADME: mention cmake build"},{"hash":"ec87a4d54110965a2145349c697764a06db6bf21","date":"2016-01-04T18:46:13.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add curlies.\n"},{"hash":"7e6e3c78074101931bca83d9f7383fde55d6f380","date":"2016-01-04T18:46:28.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #58 from WebAssembly/command-line\n\nGeneralize command-line parsing more."},{"hash":"666d84802c36550f586e4849fbb68386eb3558d0","date":"2016-01-04T18:50:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #56 from WebAssembly/fix-check.py-license\n\nFix check.py license"},{"hash":"816deb062f33d6396e1bcd4eecb57634d2abd381","date":"2016-01-04T19:06:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #57 from WebAssembly/update.py\n\nCreate update.py"},{"hash":"a9b0fd332b67d1aaff723a3d57b52f39be80dece","date":"2016-01-04T19:19:15.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"README: mention update.py"},{"hash":"95f3e51691d865a0429bd579cce4918dfe27aef1","date":"2016-01-04T19:24:45.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Typo"},{"hash":"f9fba61d0ad055a57db2b13d8b7672a36db16b9a","date":"2016-01-04T19:24:51.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #61 from WebAssembly/jfbastien-patch-1\n\nREADME: mention update.py"},{"hash":"9a92d6fd774221d66f5d6fdab17b517180535a6b","date":"2016-01-04T19:30:07.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix off-by-one in option parsing with '='.\n"},{"hash":"1f8e4a4da473f6a76e48c3ffb6f0aec2d3c1b5a3","date":"2016-01-04T19:30:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a test for s2wasm options\n"},{"hash":"c7e7a9215e4c833653549b806a29b02399320bd6","date":"2016-01-04T20:43:29.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Test s2wasm using buildbot's last known good .s files\n"},{"hash":"5e82fc26d6bb0cec8863156e052250a4e441595c","date":"2016-01-04T21:03:12.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update test/experimental.\n"},{"hash":"c6d08d97c196e2ceae5e3b960befcd6c66916cad","date":"2016-01-04T22:27:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse for loops in asm2wasm #60\n"},{"hash":"3f4b5c1a4286ced0f1ffab14226246fe8b83b89e","date":"2016-01-05T01:11:16.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Move file input / output to support.\n"},{"hash":"15043f71f901882203cbaf0d98a6e325ed97f56a","date":"2016-01-05T01:16:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add RemoveUnusedNames pass\n"},{"hash":"908539ab1f4cc54a9511f076ae670457533806a4","date":"2016-01-05T01:22:58.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Disable colors when outputting to a file\n\nThis will allow other tools to consume the output.\n"},{"hash":"4abf3e03f772348e193f00219da8b2f0baa454ee","date":"2016-01-05T01:24:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run RemoveUnusedNames in asm2wasm\n"},{"hash":"aea8cbf812299d85567daf9eaeca4543ede43192","date":"2016-01-05T01:35:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #63 from WebAssembly/support-file\n\nMove file input / output to support."},{"hash":"44e07a9ba2c53dfae94b41f9c24acd0d57b4d6bf","date":"2016-01-05T01:35:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #64 from WebAssembly/color-disable\n\nDisable colors when outputting to a file"},{"hash":"ee448c9d83abc710f567c389f53afc4bc6b3b5e3","date":"2016-01-05T01:39:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update build.sh\n"},{"hash":"680fdff9b7bad8653548fb4145c983ded41d466a","date":"2016-01-05T17:54:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update experimental submodule\n"},{"hash":"4c9e463f2c2012f72d701d96f62f1c4e03a27595","date":"2016-01-05T17:54:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix RemoveUnusedNames\n"},{"hash":"618c1737be20acd60a2653dfd0d65bfed5990480","date":"2016-01-05T18:08:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not print a toplevel block in functions if we don't need one #32\n"},{"hash":"6c3b37355c7e24a763e0f6e65829391f5fe29b42","date":"2016-01-05T18:24:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"RemoveUnusedBrs #32\n"},{"hash":"8452a0b54562590e568b5f86fe35c0fb4001a78c","date":"2016-01-05T19:21:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"MergeBlocks #32\n"},{"hash":"644ef3072d389b9097e3a2709af5c40811e95839","date":"2016-01-05T19:40:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix parsing error in s-parser with functions with just a block and then more content\n"},{"hash":"72668529806f67c2bc719f9a21071cdcdebe98a4","date":"2016-01-06T00:02:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix return handling in s-parser\n"},{"hash":"be04d8bfca5ca3a84d4497c689fdf00f028c4dff","date":"2016-01-06T00:31:50.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Fix build.sh script.\n"},{"hash":"77ed10771007a2d3a9b69f29741711341cc57d82","date":"2016-01-06T00:38:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #65 from mbebenita/fix-build-sh\n\nFix build.sh script."},{"hash":"68a09177f896484be3796dcaa611f4ef743bf879","date":"2016-01-06T00:42:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make build.sh use cmake as much as possible\n"},{"hash":"4d772e54ad5711dd5ee690daeb3813c06fb98c30","date":"2016-01-06T00:42:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update experimental submodule\n"},{"hash":"c00f9d8e54bdbfccdc86f7cb0546f92db764f48a","date":"2016-01-06T16:37:30.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"s2wasm: load/store swap offset/align params\n\nThese should probably be commutable so humans don't have to remember which order to read/write things in, but there's pushback and this really doesn't matter so fix it here, bikeshed on github.\n\nThis will require an associated fix in sexpr-wasm's GCC torture test failure list.\n\nRef: https://github.com/WebAssembly/sexpr-wasm-prototype/issues/17\nRef: https://github.com/WebAssembly/spec/pull/205\n"},{"hash":"da223dd8af711c47554dddce0727fe927a769a17","date":"2016-01-06T18:34:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #66 from WebAssembly/offset-align\n\ns2wasm: load/store swap offset/align params"},{"hash":"c1ad16b5426ab621c380433dca815355e000fb9f","date":"2016-01-06T19:09:22.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Import hand-written tests from prototype-wasmate.\n"},{"hash":"05c0f27ec6e36de1bd137343d236ac69a42518d5","date":"2016-01-06T19:09:22.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Initial auto-generate of .s tests from LLVM tests.\n"},{"hash":"9099f5020db191e0189f5b7b9784f721fcc4d29f","date":"2016-01-06T19:10:43.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Check in the llvm-to-s.py script used to generate the tests.\n"},{"hash":"b376986e36c7ba9bb85bb558be54842280633877","date":"2016-01-06T19:25:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set function type of imports in s2wasm #68\n"},{"hash":"ea5e4f70785f3a8f3039e1d59ba4378caa665ed0","date":"2016-01-06T19:34:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #69 from WebAssembly/import-wasmate-tests\n\nImport wasmate tests"},{"hash":"2b46381bf4fcf8c00b15f7b1b6fd2a261908dcf4","date":"2016-01-06T20:51:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix missing slash in reinterpret/i* #73\n"},{"hash":"200a93c606b72b9694b69e2ec0bafe43153ddcf5","date":"2016-01-06T20:58:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix type of ne and neg in s2wasm #72\n"},{"hash":"acfb322187321f69b8f3cf71009c423ab594e200","date":"2016-01-06T21:12:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print infinity properly #71\n"},{"hash":"004bb9433e8e6143968530f9f0f60102aa5f7715","date":"2016-01-06T21:57:59.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Commit the torture .s files\n\nupdate.py used to just download them in a folder that .gitignore hid. They'll now be checked in instead, under test/, and lkgr will identify which version of LLVM built them.\n"},{"hash":"1deb9c22d62c853ae3701fdae0e605436c9ed648","date":"2016-01-06T22:06:17.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Add tests for more assembler constructs that LLVM may use soon.\n\nThis adds tests for the kinds of assembly constructs produced by\n-ffunction-sections, -fdata-sections, -fvisibility=hidden,\n-fvisibility=protected, and -fvisibility=internal.\n"},{"hash":"d7632fc6d76289ab2d66f54cb8eb87049b743818","date":"2016-01-06T23:32:35.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add test/torture-s\n"},{"hash":"fe7f311a4365ac5740ba89fdfaea706ddd2c8b7a","date":"2016-01-06T23:32:47.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #75 from WebAssembly/commit-torture-s\n\nCommit the torture .s files"},{"hash":"9053bd501b9e69c044410900fdeac25bd38b078e","date":"2016-01-06T23:50:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get proper full type, including result, for indirect call types #77\n"},{"hash":"3cfb90c2acac907dfbf9db7ad0940a06183dcda4","date":"2016-01-07T00:14:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle/ignore visibilities in s2wasm\n"},{"hash":"176a955c63f7891f00c1f29e33079dc3d77539da","date":"2016-01-07T00:15:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge branch 'sections-visibilties'\n"},{"hash":"bde95949f89e8f288ed0a9a8356460f9e3bbbbbf","date":"2016-01-07T00:15:25.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Replace the experimental/prototype-wasmate/test tests.\n\nUse the llvm_autogenerated tests instead.\n"},{"hash":"b0abc686c4dae518f1ff7b1d71e5710eb36ae61e","date":"2016-01-07T00:15:25.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Run binaryen-shell on the dot_s test .wast files.\n"},{"hash":"f2cd4b8f141de2b71bbeeef06783b4d53f817f2f","date":"2016-01-07T00:15:25.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Remove .wast files that now live in llvm_autogenerated.\n"},{"hash":"f754b307a6cc55fa882a90bb66bfa5576bff6a27","date":"2016-01-07T00:15:25.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Print nan literals as `nan:0x...` rather than `nan:...` to match the spec.\n"},{"hash":"10d9c8223360714918808aeafa24308039c1518b","date":"2016-01-07T00:15:25.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Remove .wast files for tests that are currently blacklisted or removed.\n"},{"hash":"8ae085fb1f79d6a72d234c5d33704f6106fe6f4b","date":"2016-01-07T00:20:12.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Merge pull request #74 from WebAssembly/llvm_autogenerated\n\nReplace the experimental/prototype-wasmate/test tests."},{"hash":"3c32e7144c787fdba4953d98d9eb997abf407306","date":"2016-01-07T00:27:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch br/case printing #70\n"},{"hash":"88b14beb1009e81bbaf1144806c36fdee11846e1","date":"2016-01-07T00:29:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update auto_update_tests.py\n"},{"hash":"750cb1029cea2dfe5ae98ac4aa9fa47e522228e0","date":"2016-01-07T00:30:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update switch outputs #70\n"},{"hash":"d8c94b6ad4094b580f4a788de3733b5433ca4c2a","date":"2016-01-07T00:35:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch parsing and semantics, for br in the table\n"},{"hash":"d73b0be51bc1d64c0fcb6a992927ace75876abde","date":"2016-01-07T03:32:56.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"update.py: update only if needed\n\n@kripken asked if test/lkgr could be updated only if the downloaded content is different. This patch does just that.\n"},{"hash":"0c7e5beba6a1e2f5a6f23d20acc4cdce72f29f20","date":"2016-01-07T03:52:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #78 from WebAssembly/update-if-needed\n\nupdate.py: update only if needed"},{"hash":"6c4c158537c3ad0b8819312c8a6c737df1cdfdc6","date":"2016-01-07T19:07:20.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"LLVM is now emitting private labels with a \".L\" prefix. Update binaryen.\n\nThe .L prefix convention is admittedly not the prettiest convention\npossible, but it is widely used in the ELF ecosystem.\n"},{"hash":"2faeb4e6608807455e6411e02c48ef5c03bae654","date":"2016-01-07T20:32:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix default being a br in switch #70\n"},{"hash":"7d69ee4af775c4cd48e509c66330fa8ceecf4a24","date":"2016-01-07T22:09:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge branch 'private-label-names'\n\nConflicts:\n\ttest/llvm_autogenerated/cfg-stackify.wast\n\ttest/llvm_autogenerated/switch.wast\n"},{"hash":"85eec55eda839bf691dc88e122e90968d8b485c4","date":"2016-01-07T23:10:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle .zero x, y\n"},{"hash":"e7aebfe111b6a854fc12131e8d790b90378c08c5","date":"2016-01-07T23:27:16.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Handle .skip\n\nLLVM will generate this now.\n"},{"hash":"5110e2adc9351c7df283419041c154bf79eaddc7","date":"2016-01-07T23:29:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #83 from WebAssembly/skip\n\nHandle .skip"},{"hash":"d0863fa49acc642353c99aa9c46a1aacc4be57d0","date":"2016-01-08T00:23:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize RemoveUnusedBrs some more - handle values #84\n"},{"hash":"05383c0dc2e0f45a82bbd655d7148047e1ca8c55","date":"2016-01-08T00:23:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"updat experimental submodule\n"},{"hash":"2dc5714c7b80d4d53dbebae2dd851d4b056266ab","date":"2016-01-08T15:36:25.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Temporarily mark tests as passing, even if they shouldn't be"},{"hash":"f4958962bce2035f9de1ca409672607e68e4b5a3","date":"2016-01-08T17:47:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize if_else in RemoveUnusedBrs\n"},{"hash":"3c0cf0b29b8cb468469844e7d1bb38e311b6692d","date":"2016-01-08T17:58:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify print output in passes tests\n"},{"hash":"ae2a84670ff06f2d06df01a0e384f6944f1ad939","date":"2016-01-08T18:09:26.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Undo the TODO, waterfall seems un-borked now"},{"hash":"b2760f93e66c628f58d92484bb2885713bb9877c","date":"2016-01-08T19:28:24.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"s2wasm: only create output file when successful\n\nPreviously the file was created but was empty when s2wasm failed. This caused sexpr-wasm to be sad because it tried to use an empty file."},{"hash":"48a4607463cbff966a0212b2bcc25f8707b9a8c6","date":"2016-01-08T20:03:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #86 from WebAssembly/jfbastien-patch-1\n\ns2wasm: only create output file when successful"},{"hash":"631c527e2eda16819d4c24b19e2b5b8a3f075336","date":"2016-01-08T20:46:48.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"pr24716 is failing sexpr-wasm, not s2wasm"},{"hash":"6e5eb6bf9c9450428b418e65167e488416dbc9ec","date":"2016-01-08T20:49:28.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"s2wasm torture test: delete output dir when done.\n"},{"hash":"3a5cd7dc0360d1b12a0558758fa587f0268122b8","date":"2016-01-08T20:54:09.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Use waterfall instead of experimental, now the repo has moved.\n"},{"hash":"ff29d891b7b58376712a48152b0a1406b08d5fd7","date":"2016-01-08T22:47:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update waterfall\n"},{"hash":"a695f82586d452dfc7ba51c18a5b76aa0cd8fb22","date":"2016-01-08T22:51:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a testcase\n"},{"hash":"382ea607d99c73a6e893f4f92b0b63bde698e487","date":"2016-01-08T23:05:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve RemoveUnusedBrs: unify an if-else's brs into one br outside\n"},{"hash":"02910f3defc1be94ee1d4af6d43ec05b1c37d18d","date":"2016-01-08T23:11:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"RemoveUnneededBrs: remove all code in a block after a break\n"},{"hash":"d390f154a8e769621ab2a239e61f9d0c4c034dc4","date":"2016-01-09T00:29:49.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Allow force-updating to the latest waterfall hash.\n\nAllow overriding hash.\n"},{"hash":"0b7c518f556857fd0ac02d95b463e37d48ab486b","date":"2016-01-09T00:30:52.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #87 from WebAssembly/not-just-lkgr\n\nAllow force-updating to the latest waterfall hash."},{"hash":"487058c8e0d8449596ea6117ad4b4190956f90ba","date":"2016-01-09T01:05:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add -O option to shell that runs default optimization passes\n"},{"hash":"cbd9d53ac1e034c315993d88c1572c900389e670","date":"2016-01-09T01:07:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add test for -O\n"},{"hash":"c6cefdac99c511bdd05b68f8e2b53a0edb7ff815","date":"2016-01-09T18:06:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start work on SimplifyLocals\n"},{"hash":"c32dc275c594f83e652d419a1452b65a3b628779","date":"2016-01-09T18:15:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use simplify-locals by default\n"},{"hash":"e385996f5a2bba427bbda7437e160e25a83fd076","date":"2016-01-09T22:28:59.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update test/waterfall\n\nThere's a fix that should make some of the testing faster when there are failures.\n"},{"hash":"e878d88f7febd35e2711a19dd8796a68249dbcb1","date":"2016-01-10T00:52:13.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add basic Travis CI build\n\nNo setup or tests yet, I first want to get the basics working properly.\n"},{"hash":"88fed02162ac940fdd1cfdec236e6ec44441d370","date":"2016-01-10T00:53:28.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #88 from WebAssembly/Travis\n\nAdd basic Travis CI build"},{"hash":"5ad3dfa6447685a3b436140780721d21db6d5a51","date":"2016-01-10T01:31:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use CXX for example testcases, if defined\n"},{"hash":"dbc1be8a3b029513c643387ccaa8caf940477a26","date":"2016-01-10T01:36:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start to add testing in travis\n"},{"hash":"f637ed52c79a04b60806cf0e031847a4d7da7ff6","date":"2016-01-10T01:40:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #89 from WebAssembly/more-travis\n\nStart to add testing in travis"},{"hash":"60c26fcb2bfec74b0a8d0bf13cedd1014d81db17","date":"2016-01-10T18:02:11.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"A few Travis change\n\nInitialize the git submodules to the index (I'm not sure what they're initialized to right now).\nMove exports to before_script, and print out compiler version.\nInvoke check directly (the shebang and x permissions should take care of it).\nRemove the sleep on warnings, it slows down Travis.\n"},{"hash":"75a562190a9f4588c8ffb19b8304f76c15a850c6","date":"2016-01-10T18:19:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #90 from WebAssembly/more-travis\n\nA few Travis change"},{"hash":"e3c38c14e7dd9c115da960daafd109d2687f1a08","date":"2016-01-11T01:40:15.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add Travis builds with sanitizers\n\nThis triggers 5 independent build / test runs:\n - clang, no sanitizer;\n - clang, UB sanitizer;\n - clang, address sanitizer (disabled for now);\n - clang, thread sanitizer (disabled for now);\n - GCC.\n\nEnabling UBSan led to these changes:\n - Fix a bunch of undefined behavior throughout the code base.\n - Fix some tests that relied on that undefined behavior.\n - Make some of the tests easier to debug by printing their command line.\n - Add ubsan blacklist to work around libstdc++ bug.\n - Example testcase also needs sanitizer because libsupport.a uses it.\n"},{"hash":"16ed70cb09569b881b6416955000fa7902119264","date":"2016-01-11T03:51:50.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Asm2WasmBuilder: allow building u/s int32.\n"},{"hash":"eb0444e0870052b8ea8021eb50563a9f4d957486","date":"2016-01-11T03:56:36.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Safe integer: assert before converting double to integer.\n"},{"hash":"873e5b0500a3edb07a09ed285ba8421be375cd25","date":"2016-01-11T19:32:25.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Check for negative overflow.\n"},{"hash":"4e98f922cb2d727a319f62d32e51afabb2e46d24","date":"2016-01-11T22:16:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #91 from WebAssembly/sanitizers\n\nAdd Travis builds with sanitizers"},{"hash":"cb9700ce0513cf0dd3dfac58f3d16a1e06c7cc6f","date":"2016-01-11T22:52:00.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update tests for upstream changes.\n\nChanges include:\n - the @FUNCTION symbol kind\n - .skip instead of .zero\n - the allocarray_inbounds test\n"},{"hash":"91a244f733b7db2c7779b215b5d0748ae43bae1b","date":"2016-01-11T23:01:21.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Add @FUNCTION suffixes to hand-written tests too.\n"},{"hash":"a54e90879958c3f89a74c15160cf10b2276a54ab","date":"2016-01-11T23:19:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore @FUNCTION\n"},{"hash":"20f01a9f8277111b69f3d916ec2e066f1f996c7d","date":"2016-01-11T23:19:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update userstack test output\n"},{"hash":"91becc1a6cfa3c57eb6d2cb5f3c42f312d65f8b2","date":"2016-01-11T23:42:48.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Merge pull request #92 from WebAssembly/at-function\n\nUpdate tests for upstream changes."},{"hash":"4037b2886731c2ff6f6d18da3cb03c89f5f974e0","date":"2016-01-11T23:45:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update build.sh\n"},{"hash":"c64a73ae12fdbc39176c8d94ffaa21840606e516","date":"2016-01-12T00:08:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement LEB128 writing in binary format support #13\n"},{"hash":"500e88b8ed4f94f9f2a9aec04128a0aed2eb3b78","date":"2016-01-12T00:15:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit data segments in binary #13\n"},{"hash":"1b3600b0aca6a8f23b6d9e8ae33dcd75c9493810","date":"2016-01-12T01:23:27.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"asm2wasm: use support's command-line\n"},{"hash":"e821979eb433ee0cefed786d46c870caec7a6234","date":"2016-01-12T01:28:38.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Shush Travis I don't want your emails\n\nI like you but stop emailing me."},{"hash":"e59b572bf59f2e2b07ca5f2262a1fdc8a5ef124d","date":"2016-01-12T01:38:45.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to include @FUNCTION change from LLVM\n"},{"hash":"e982e93d68671443214dd91b4aefc6fe5992ac6b","date":"2016-01-12T01:56:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #93 from WebAssembly/asm2wasm-use-command-line\n\nasm2wasm: use support's command-line"},{"hash":"0aec75b1d1f38b262da4e6f8454d259401a203d9","date":"2016-01-12T01:57:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #94 from WebAssembly/update-4cato-55c12e7fae4702634a2406298f4d601c3fe74jfb\n\nUpdate to include @FUNCTION change from LLVM"},{"hash":"f816012ca318555b1cac6d822fe8abad275c2864","date":"2016-01-12T02:08:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finish initial pass on wasm-binary, and add wasm-as tool #13\n"},{"hash":"efe369358fd6c8ede5145f12bfa511b515d2a32a","date":"2016-01-12T04:08:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #95 from WebAssembly/wasm-as\n\nFinish initial pass on wasm-binary, and add wasm-as tool #13"},{"hash":"686a8334090f57e1ba218e552819b3c6374059b5","date":"2016-01-12T04:58:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor FunctionType to always be accessed from the Module's central store, which is necessary for simple binary writing\n"},{"hash":"dad2bf5e5ffe3cfc3557d11a8310e4218123ea3d","date":"2016-01-12T06:01:02.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update tests for upstream changes.\n\nThis updates the tests following the changes in http://reviews.llvm.org/D16105 .\n"},{"hash":"b4c6e2bfb11dbdec9e801f36cecd860d5270eed5","date":"2016-01-12T18:24:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update s2wasm for new block and loop format in .s files from llvm #97\n"},{"hash":"cca18b7e44c91334462ef6386ed2ae0b25bf72b0","date":"2016-01-12T18:40:52.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update basic.s for the new label syntax.\n"},{"hash":"e3e589f54b426ec057fdc1079b85a7b535b17206","date":"2016-01-12T18:41:06.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update memops.s for the new label syntax.\n"},{"hash":"c5913b6ab62bb2a638981344b9e10d8765f6c357","date":"2016-01-12T18:54:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add option to run check without torture\n"},{"hash":"3cb2281ac161edb08a2fd79cd66302caa330d583","date":"2016-01-12T19:20:59.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Merge pull request #97 from WebAssembly/cf-depths\n\nUpdate tests for upstream changes."},{"hash":"2e5363210f7ef4861bf734e89fef96176b4157bc","date":"2016-01-12T19:25:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure function types for all functions in wasm-as, as the binary format requires it\n"},{"hash":"84211500dbf6860d745a3f0a251cdd169896deac","date":"2016-01-12T19:36:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test wasm-as does not crash when binarifying testcases\n"},{"hash":"944b56ad5d6a0f0df040cac684109a5e3f50f653","date":"2016-01-12T19:40:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix some macros in wasm-as\n"},{"hash":"e404e460b93eb8aee8995827dfbe29840315a572","date":"2016-01-12T19:54:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement switch in wasm-as\n"},{"hash":"860d56e5c724d32ce8cc890ff97a02dbdf379259","date":"2016-01-12T19:56:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"implement br_if in wasm-as\n"},{"hash":"783eea2fff10a315b728c952ef78293c7957390a","date":"2016-01-12T20:01:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid unit.wast in wasm-as, as it uses f32.demote/f64 which is not in the binary format currently\n"},{"hash":"c7c035b043902f3b4847b1f6ee390f0fa8d70b38","date":"2016-01-12T20:06:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable torture tests for current known breakage\n"},{"hash":"7daceb70fd2b97751d47fa9b792a0ba7bb846284","date":"2016-01-12T21:23:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"default torture tests to on\n"},{"hash":"c54dadc397030412b566bfa1e1d80eb65be0aa23","date":"2016-01-12T21:23:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #98 from WebAssembly/wasm-as_testing\n\nwasm-as testing"},{"hash":"3da40ef949ddfac78df2db33e6b35e14f54cb78c","date":"2016-01-13T18:04:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests submodule\n"},{"hash":"2a0404579a2c061a965e2ac032801e250ab7f2bc","date":"2016-01-13T18:48:29.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Don't check Python indentation.\n"},{"hash":"80d0b8eb31b1bb15ecd2245ef6ad57ca4d3a2575","date":"2016-01-13T18:48:44.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Merge branch 'master' of github.com:WebAssembly/binaryen\n"},{"hash":"9a3a2cb975ab171c4f23c5bf5e938db940c707d4","date":"2016-01-13T21:59:28.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"update.py: support json output\n\nI'm updating the waterfall separately.\n"},{"hash":"2a6045447873a92ccb7dfbb6cb7546b715c5dcd5","date":"2016-01-13T22:56:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"some function parsing changes in s2wasm, due to upstream llvm\n"},{"hash":"7e3efaec50e59ebe1e267f50328a88d639d08947","date":"2016-01-13T23:01:47.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update torture tests.\n"},{"hash":"8ae75a62d0974273a6ece5e3fb1b72f58c85224f","date":"2016-01-13T23:02:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update waterfall\n"},{"hash":"a21fb164cd00e7683661c6dbd343f34cc973333e","date":"2016-01-13T23:04:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #99 from WebAssembly/update-torture\n\nUpdate torture tests."},{"hash":"11569ac8ad89517afc1601e07674109fd2bdad53","date":"2016-01-13T23:08:25.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"update.py: fix argparse for --force-latest"},{"hash":"4937306bfaa78ed030f4805cdba58b8887528f59","date":"2016-01-13T23:37:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid unportable sizes in wasm.h\n"},{"hash":"8bf0cb2d0661fb49e7ceb93c4518f13a5a6065d5","date":"2016-01-13T23:38:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"initial work on wasm-dis\n"},{"hash":"4b47bb5d717ca9afdd12c13767f5b716d4d9f25a","date":"2016-01-13T23:38:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare for wasm-dis testing\n"},{"hash":"1f608d0138162db54a3727c6de3c0ebc9cf6120f","date":"2016-01-14T00:28:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add debugging for wasm-binary.h\n"},{"hash":"fa00663d82ea1f641368a4d10327c102805e4bde","date":"2016-01-14T00:28:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix LEB128 bug\n"},{"hash":"1466e072717f6516eae1885296ace1d7acb38f2f","date":"2016-01-14T00:32:39.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"flake8: also ignore E114"},{"hash":"fea7841e9e5f5a04c341303ccbe33d2dfcc120b4","date":"2016-01-14T00:49:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid char casting bug in wasm-binary\n"},{"hash":"91e8b41c32d050408948995f7560e9a1a9b1f7bc","date":"2016-01-14T01:07:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more debugging\n"},{"hash":"9d54e79c390713e8103e1244e8e8a1d9f8445a3d","date":"2016-01-14T01:42:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use unsigned types in wasm-binary.h\n"},{"hash":"4f559956ed0082347002ac257f7eda93c78dbaad","date":"2016-01-14T01:46:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix maybeVisit logic\n"},{"hash":"3c6a18dae8e1efc115c3ddaf663ee0fbdeea4536","date":"2016-01-14T02:00:48.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Travis: check style of update.py\n\nSee the flake8 docs: https://pypi.python.org/pypi/flake8\nAnd pep8: http://pep8.readthedocs.org/en/latest/\n\nExclusions are specified in setup.cfg, currently we only ignore the 4-space convention and use 2-space.\n"},{"hash":"3334c090c73f861a1b94145dd6105255d7d21a6b","date":"2016-01-14T02:02:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a call assert and debugging\n"},{"hash":"cca4d2b10054906d1603c6a4b7fba91bd495fb50","date":"2016-01-14T02:02:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more testing prep\n"},{"hash":"77c55b36cf5cc4b72d62e24b69ca7de61b671328","date":"2016-01-14T02:05:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #101 from WebAssembly/jfbastien-patch-1\n\nTravis: check style of update.py"},{"hash":"503e6779973e95417de1729c726e1fbedd291947","date":"2016-01-14T02:25:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"functions must be parsed after all their targets are known\n"},{"hash":"477e456f1ac5e7572f280993bd6eda9b4c7b0db5","date":"2016-01-14T02:29:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more debugging\n"},{"hash":"01455820d430120c694dbc9978ed4dc8192185e0","date":"2016-01-14T03:43:29.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Avoid potential setjmp clobber\n\n-Wextra adds checks for potential clobbers which triggered in binaryen-shell.cpp:\n  might be clobbered by ‘longjmp’ or ‘vfork’ [-Werror=clobbered]\n\nThe fix moves the setjmp/longjmp using code into another function, and passes in potentially-clobbered values from the parent frame so they can't be clobbered. We could also mark them as volatile but that's a big hammer.\n"},{"hash":"ab3b76b29488ca8f85c39491c5ac96d6274fac7c","date":"2016-01-14T04:05:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #102 from WebAssembly/clobber\n\nAvoid potential setjmp clobber"},{"hash":"7e3bdd00f9b390c36461291fa5b884ace55e82d6","date":"2016-01-14T04:09:10.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"A more generic compiler pass system.\n"},{"hash":"e165020f87f807179d27203195843c88fb8afe55","date":"2016-01-14T04:13:04.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Use LLVM style static polymorphism for WasmVisitors.\n"},{"hash":"8e629f9cd68966cf531e1d7789c38543b74a3c3f","date":"2016-01-14T04:28:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix buffer writing bug\n"},{"hash":"6bc27c2f165bc9f409165eed8c831c47359acc48","date":"2016-01-14T04:48:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix binary skipping bug\n"},{"hash":"12bef76986cb6c3b915d811640581faab4977b05","date":"2016-01-14T04:52:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix locals in binary format\n"},{"hash":"d4f713522f1580b6f2aa7a0716c8ec8df7b48275","date":"2016-01-14T05:00:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more binary fixes\n"},{"hash":"0bfe85636f9068819387edcad5d39d33af65f491","date":"2016-01-14T05:02:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix function size offsetting\n"},{"hash":"6431ed05813b76d583a7ca98bf193c66c834b993","date":"2016-01-14T05:28:02.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"update.py with lkgr\n\nEverything is now green.\n"},{"hash":"1345f70a7d5c56196fb42ab9ae3cc1162c2c46bb","date":"2016-01-14T17:48:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix call_import\n"},{"hash":"d053ddfa70f5a2bccfd9ff997f98130088d84b98","date":"2016-01-14T18:44:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more binary debugging\n"},{"hash":"ded8b2557912c77322d20c6feb7fd170f8c0d220","date":"2016-01-14T19:17:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"artisinal debugging\n"},{"hash":"9bf5aa7c0727e6e287f17fa89705a1af65c4fc87","date":"2016-01-14T19:23:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix recursion debugging\n"},{"hash":"666822e6cfaf53944e2eb2792dfe1b9c85446952","date":"2016-01-14T19:27:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix binary writing of BrIf\n"},{"hash":"76db2f00068f732c6bee8346085c794d26061fc0","date":"2016-01-14T19:30:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix binary writing of CallIndirect\n"},{"hash":"786e95242caa4343edc6781a5738ebfbe1df1592","date":"2016-01-14T19:39:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add locations for recursion debugging\n"},{"hash":"db7285b8f8e1a536fdfee60103bafc4ecfe3ed1f","date":"2016-01-14T19:45:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"break assert\n"},{"hash":"aa3b46f7fd0699aa5ae0df5f83eee6e067c0c532","date":"2016-01-14T19:52:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"break/switch fixes\n"},{"hash":"b78c9900f8908fbd28689e1c254fa6a443050504","date":"2016-01-14T19:55:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add local assertions\n"},{"hash":"3c1b7750e9ba8e0c6205b305890d973948ff4fae","date":"2016-01-14T21:27:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix an LEB128 bug\n"},{"hash":"af146aa19fa7ebee5b7def5fdf3c61b225857be4","date":"2016-01-14T21:28:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable binary format testing\n"},{"hash":"4bcda1c61bf9d5138980db34b49a9ccf37d1fd09","date":"2016-01-14T22:08:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run s2wasm outputs from torture tests through binaryen-shell, to verify they parse\n"},{"hash":"e696560332211216d26e9396033b8ba50af0fa82","date":"2016-01-14T22:43:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"--entry option in binaryen-shell, which lets you call an entry point. also support exit()\n"},{"hash":"14d497a1b60509af54619b4b36660ade48f3fe38","date":"2016-01-14T22:44:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prepare for running binaryen on s2wasm torture outputs\n"},{"hash":"99c8870d4220d180575cc645b46e54ed5947a745","date":"2016-01-14T22:55:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run shell on s2wasm outputs, with a list of known failures\n"},{"hash":"68bf9868afae04d603810c862642c794e8eb998f","date":"2016-01-15T00:03:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add assert on wasm segments\n"},{"hash":"b03afb04b43d435f39fecd7b443e8323a3cdf80a","date":"2016-01-15T00:03:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check.py note\n"},{"hash":"0ec26a1ffa95bf1d2e4fa28dab7e188bdfaf599c","date":"2016-01-15T00:04:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add continues in s-parser\n"},{"hash":"831f8e982fdaa447950571b5e5cc5d179aa132cc","date":"2016-01-15T00:07:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update known failures\n"},{"hash":"1e80630b009ecd5e63206353292fd63197ac9bdd","date":"2016-01-15T00:14:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comments\n"},{"hash":"1897786b3643095ab3560afac6b8171885e5b6d2","date":"2016-01-15T00:16:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"minor binary updates following comments\n"},{"hash":"52fe6cabbbaa59cd50e95306bb1b6d357037fa50","date":"2016-01-15T00:18:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve a for loop\n"},{"hash":"1b89d3b0dc0191db3fcaf2c5f5f8914eccfff35e","date":"2016-01-15T00:20:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a constant for natural alignment in the binary format\n"},{"hash":"280289a07e706691dae64ea8579da91b0ffa350f","date":"2016-01-15T00:21:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use std::pow\n"},{"hash":"2c4a72b3148700d2a5175c6af5cbe3f9378b3dc1","date":"2016-01-15T00:42:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add expected outputs from text->binary->text test\n"},{"hash":"4c0f7e27bfff16daf610463c326f3a11b36d7e6e","date":"2016-01-15T00:44:42.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Some cleanup.\n"},{"hash":"faca86f35240da34558006f29706f34b3da27ea2","date":"2016-01-15T00:53:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add missing types in binary reading\n"},{"hash":"3f61f46ef2e660ad8001d2dd93218c1e830188c8","date":"2016-01-15T01:01:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix type of const values from binary\n"},{"hash":"38d8e5d627f1694586e84f475a4879336cad9623","date":"2016-01-15T01:21:29.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Add default case so that GCC doesn't complain.\n"},{"hash":"921c9d96698c9c515aa274eaeb42b8fd1c140abd","date":"2016-01-15T01:44:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve for loops\n"},{"hash":"30abeaa9e2151cd5d7b0ad730ee26eec12d69636","date":"2016-01-15T01:48:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #100 from WebAssembly/wasm-dis\n\nwasm-dis"},{"hash":"5192fc38ca377939b4411f52e73e1a4bc3127d2d","date":"2016-01-15T01:50:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #104 from WebAssembly/more-torture\n\nMore torture"},{"hash":"3d3d3ccd7214c09cf6c2fe96567557b7d9580dfb","date":"2016-01-15T07:17:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Travis: run asan / tsan, but allow asan to fail\n"},{"hash":"1abc08f121413b671d3890065c63c479f6a39b82","date":"2016-01-15T18:07:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #106 from WebAssembly/jfbastien-patch-1\n\nTravis: run asan / tsan, but allow asan to fail"},{"hash":"8d7dba5d0ce1bc0bbd15c5fc453ccfdced99c491","date":"2016-01-15T23:51:44.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Disable importing of the offset-folding test.\n\nThe LLVM test its generated from has external global variables, which\nisn't supported in s2wasm.\n"},{"hash":"1021013aa7efdd6d071a8b053f87de846a6d30bd","date":"2016-01-16T02:39:44.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Add unreachable macro for the default case.\n"},{"hash":"7b52fbbbedafd46f7c74c304e2a41cabad1cf75b","date":"2016-01-16T04:49:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #114 from WebAssembly/disable-offset-folding\n\nDisable importing of the offset-folding test."},{"hash":"8e3dde6a4d2c861edc25df5f7d3d0e8b1eaac1e9","date":"2016-01-16T21:46:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve abort on unknown symbol\n"},{"hash":"1fa790550e38043ba388e5e927821c1beabdfa2b","date":"2016-01-16T21:54:50.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Factor out some support code\n\nPatches such as #112 could use them.\n"},{"hash":"307fa22e522d5ca82829a117bffa0060cddc72e2","date":"2016-01-17T00:18:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #117 from WebAssembly/factor-out-support\n\nFactor out some support code"},{"hash":"7dd053aa3cc99e63b3be57514c28ac2b94932e2e","date":"2016-01-17T03:25:22.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to build 2016.\n"},{"hash":"74b3798652f65fbbbe94b9aac2cb4f0fb8ccea09","date":"2016-01-17T04:08:36.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Make the untar API more intuitive\n\nAs discussed in #112.\n"},{"hash":"0c78665777e244741bfe6e2ab30fedded96354bd","date":"2016-01-17T13:06:50.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"The break operation may have a value, and must with the v8 encoding.\n"},{"hash":"c45e278c53d44e823b7814a454f7bbb921f6cd8b","date":"2016-01-17T16:34:52.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Allow updating to specific build ID\n\nEven if the downloaded content is the same. #112 adds usage of the binary tarfile, which is separate from the torture tests.\n"},{"hash":"5cbf5020590d61a5d9dbfcc77d7eb7cc144694c7","date":"2016-01-17T16:35:17.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to build 2026.\n"},{"hash":"d59d14ffa46bcf9d061a6f3d1e941ac8a70d5bda","date":"2016-01-17T17:54:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #116 from JSStats/br-value\n\nThe break operation may have a value, and must with the v8 encoding."},{"hash":"7ec2f95c5684dbdca9d443a56e14578b52c8466b","date":"2016-01-17T18:31:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use visitNop for break values\n"},{"hash":"c01ef410c9c3df8c12504f365e04190935ac2376","date":"2016-01-17T19:28:58.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"untar: don't compare when a dir doesn't exist\n\nFixes issues in #112.\n"},{"hash":"2db4c1648bdf2f3382c8daba73665f50b18c6d9a","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add emscripten submodule on vanilla branch\n"},{"hash":"58be64a9b1f00d399383852a858df7e514d7b535","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print check.py warnings at the end, where they have a chance to be noticed\n"},{"hash":"0d9a88446723b5558ce0328e5fc6a8351c4ce457","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wip waterfall build fetching\n"},{"hash":"be4cc9edd28aa12fd70ca6c8145d02723dbeb16c","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"0284de4884e77a63eeb23fcde5174d173dab9101","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move wasm-backend tests to use emcc from emscripten submodule\n"},{"hash":"d0876f3fef94b59ae1bc3803c3c500529a846e56","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set LLVM env var, so emcc can find the waterfall llvm build\n"},{"hash":"106dad088baedf7847c4d2f4cfec9a3afd24032c","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve check.py warnings\n"},{"hash":"f0199de2037543538441b2ea532f7329b6b8a6e0","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if we can't use the waterfall llvm, avoid it, but warn\n"},{"hash":"4da9d3c3a4494f588d174a6f988fd67bf6334ed2","date":"2016-01-17T19:57:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve warning text\n"},{"hash":"268175dc4bbeeb682e015ff6330b08e1ddfb405c","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"english grammar fixes\n"},{"hash":"a42db3fff0cb64a8aff57c1a1d67d00ba04fb822","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"3b4af6bab9b92c6639e56c0e3ad88afef0575517","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use WASM_BACKEND in the env now, per new emscripten\n"},{"hash":"455eff4d01b5b9502ef66a220bacb58e77ed1fe0","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mention checking in node\n"},{"hash":"19fa7c8e14844f7a25c2ef143cb89464d639c8a9","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make sure a.wasm.js is emitted by the backend tests\n"},{"hash":"4de7679d71fe4ed87bff14eebf5b1dcc9b0f76ec","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run vanilla emcc to make sure it's set up properly, if it was never run before\n"},{"hash":"0f72c9053c64188ad8c5b0500f5fb8918f5b08af","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print contents of LLVM env var\n"},{"hash":"efc4500c917f0fdd1f01cfb416ff6d722b077a0c","date":"2016-01-17T19:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"e70476124fb665ef7736de5e87a7aec44d9abb30","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wasm.js build\n"},{"hash":"77fecceff0959987e08b7a387cc0400e48151b65","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use nodejs in travis\n"},{"hash":"3a51b0a4553b1d98ecec232593dc02d5db8e7259","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"look for node as either nodejs or node\n"},{"hash":"ed22b7970e6a63112337c8196820110b3ed78f59","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"try again to install node on travis\n"},{"hash":"320df8eea98ceeb3aa2339de2bd06f3510f5ad67","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"6f693f31c1e4f2f15ca5bb93ca426ca8c340f460","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"no need to set env var for emcc if using vanilla llvm\n"},{"hash":"aaf927d137498ff131d546f1c0be42a8ae8e3c2d","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"1c4f49e8e94d888feceeac9e920386914c0fd1d5","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor code to use #117\n"},{"hash":"c2b77f33023d7946c8024cdc81428b4880c4b44c","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve warnings in check.py\n"},{"hash":"8d2e027a90399020f20e15076f911ee27767da9a","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update waterfall build dir\n"},{"hash":"fa4cad6f178842d1901dbcd680dfe80dfde6853f","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"e324eeb799d94645baa497731d82b46624494599","date":"2016-01-17T19:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve clang checking reporting\n"},{"hash":"eb9d676d358ce154d56aca5162e9f8f5c4d04ad6","date":"2016-01-17T19:57:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"try untar() on the base dir, because it doesn't like the full target dir\n"},{"hash":"a2acebabb40b09ae2d0c2dc3c49a2d445754fe61","date":"2016-01-17T19:57:11.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix untar usage\n"},{"hash":"e96540b5bc824924b3ddefcce4b609781b0f22de","date":"2016-01-17T21:14:30.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Function section has the flags before the signature index.\n"},{"hash":"32228f3c5b9eec4c9ec8f575c3948efe7013c1d8","date":"2016-01-17T22:33:04.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Remove older tarfiles properly.\n"},{"hash":"705fe594cbabd272a99bfd626be00c2835c94141","date":"2016-01-17T23:55:12.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix 'remove' call.\n"},{"hash":"0f21cd9beeb828b3b0206f308a63541f7823edb6","date":"2016-01-18T00:02:15.000Z","author":{"name":"Douglas Crosher","email":"info@jsstats.com"},"message":"Memory access offset flag is bit 4.\n"},{"hash":"1f21f5769429f81acfe0b6d316b27c743e000671","date":"2016-01-18T00:06:08.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Improve diagnostic for download_tar.\n"},{"hash":"f99d4a1f30dfd1892c88ca5d9cf38d21836280b4","date":"2016-01-18T00:10:12.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Improve update.py diagnostic\n"},{"hash":"9877cd7629d9346b6e4e4c74eeada7baa161c692","date":"2016-01-18T01:00:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"go back to simpler method of getting waterfall in check.py, we'll refactor later once the shared api stabilizes\n"},{"hash":"8821914decb0b479847123b46489d23a59af6fa5","date":"2016-01-18T01:42:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #112 from WebAssembly/vanilla\n\nVanilla LLVM testing"},{"hash":"0bfc82d51f2b781cd7640cee783c86a23845c5b9","date":"2016-01-18T03:33:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme\n"},{"hash":"cef2b2b2e3431d2735c30fae3796a8dceb614a8d","date":"2016-01-18T17:40:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #113 from JSStats/func-sig-order\n\nFunction section has the flags before the signature index."},{"hash":"7c08bb7983cb9cef688d674fe93d25e98be11c29","date":"2016-01-18T17:44:50.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update waterfall.\n"},{"hash":"c7e77be94e042768a6a3d20e1d5a55103f51cb59","date":"2016-01-18T17:45:04.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Merge branch 'master' of github.com:WebAssembly/binaryen\n"},{"hash":"25bf857873bd92e88327d7e6d6d09d8c6b35c182","date":"2016-01-18T18:31:23.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update revision to 2053\n\nThis revision contains the shared-library version of LLVM and is much smaller.\n"},{"hash":"adc13b1322830e5a8133fa4886ca7426b38ab424","date":"2016-01-18T18:50:49.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Detect whether vanilla emcc works\n\nOnly run WASM_BACKEND tests if it does.\n"},{"hash":"239d2cff28354e32800a4272165b85340a40800c","date":"2016-01-18T19:06:50.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"strip rev, removing newline\n"},{"hash":"bc02d17a59a5fa6387cc399b919e3e144f4b3a99","date":"2016-01-18T22:12:57.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #120 from WebAssembly/node\n\nDetect whether vanilla emcc works"},{"hash":"0b0fecfabcfabd3002a7cbfbe772adf6b2709382","date":"2016-01-19T03:37:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix check.py after recent movement of code\n"},{"hash":"d3390ed43dbfb4834273b4296521f95b4d448654","date":"2016-01-19T19:11:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #119 from JSStats/mem-offset-flag\n\nMemory access offset flag is bit 4."},{"hash":"22ed7f49494e6ecf6c431b40ab6961953c2e3a8b","date":"2016-01-19T23:26:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #103 from mbebenita/static-poly\n\nUse LLVM style static polymorphism for AST Visitors"},{"hash":"4fc14789140316a3636f3c43dc3f0a7ae00f87ae","date":"2016-01-20T00:44:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set LLVM for vanilla llvm, and remove it later, to not confuse normal emcc\n"},{"hash":"960043a359046b1536c75aeca2f7092e15714d45","date":"2016-01-20T02:07:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix mapLocals in binary format handling\n"},{"hash":"64923a04cf9795482cc55264b75d1294c32a007d","date":"2016-01-20T18:35:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve wasm2asm switch emitting, and add testcase\n"},{"hash":"daf75cc0649ad6e615de98afdc10154a14af8e9b","date":"2016-01-20T18:46:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix non-vanilla llvm testing of wasm-backend testcases\n"},{"hash":"13548a538ae581411841506884c28f1be223079c","date":"2016-01-20T20:11:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch default in binary format #123\n"},{"hash":"f7101c51ae61b52ba56e4240a649cb0a1582e990","date":"2016-01-20T20:59:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"further fix for not having vanilla llvm workable locally\n"},{"hash":"b970cc7bfcacd7e0d3dc145121cc7ba1c990fd44","date":"2016-01-20T21:33:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clear global state for each function in binary processing #125\n"},{"hash":"b942d638054b4d17a228de483f2677a47087b6ed","date":"2016-01-20T21:48:41.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix format"},{"hash":"db405e1b6cbe6be6a6bf5231340260d7fa53b5ee","date":"2016-01-20T22:13:09.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Name: support std::string ctor\n\nThis makes other code less verbose"},{"hash":"f757481c15046d3fe68d96135401c34e883cb802","date":"2016-01-20T22:55:53.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Don't allow re-using memory"},{"hash":"9f52fd46b6c6c961c8eeb9891e2a5c4f36fe09b2","date":"2016-01-20T23:04:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #126 from WebAssembly/jfbastien-patch-1\n\nName: support std::string ctor"},{"hash":"f032a4a7b14fc8c60b1a07d44c38fdff573b3baa","date":"2016-01-20T23:05:29.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix command-line help when there's only long or short"},{"hash":"8e44bc31fd60a51906123685976609fc2adf4382","date":"2016-01-20T23:20:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"only the IString constructor for Name can avoid memory copying\n"},{"hash":"5f3c6cf04945591a2322238134172d7b68463b41","date":"2016-01-20T23:20:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mapLocals even if no locals, but there are params #127\n"},{"hash":"ccea1fb53442cccaa80945dc8f7a97264af673a5","date":"2016-01-20T23:44:11.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Use command-line & waterfall for binaryen-shell\n"},{"hash":"1de108fcc050dc3f63a7674f5946e1e005c40d29","date":"2016-01-21T00:45:33.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"wasm2asm: use support/command-line.h\n"},{"hash":"cda8084b61a1d9f67c4cdd201bad3e4138b942f2","date":"2016-01-21T00:54:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #130 from WebAssembly/wasm2asm-command-line\n\nwasm2asm: use support/command-line.h"},{"hash":"4e7c814b4d37cbb1bffcb205f19ab2167ce6815d","date":"2016-01-21T01:04:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #129 from WebAssembly/binaryen-shell-command-lines\n\nUse command-line & waterfall for binaryen-shell"},{"hash":"41952a28f66f63c19520b445aa5ef30da7bf9efd","date":"2016-01-21T01:53:29.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add --help test.\n"},{"hash":"89a89095b9bc170c62a210bc4531ad22587bce37","date":"2016-01-22T04:18:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove sys.exit that surely was not intended to be pushed\n"},{"hash":"7b043e38223b1e5d5673f87b704ef220a42525eb","date":"2016-01-22T04:40:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update auto updater\n"},{"hash":"0d512c9013aa8410a05bf1b3b4bb203dd1d526cc","date":"2016-01-22T04:40:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add missing binary opcodes\n"},{"hash":"bb72adc023a0c1484ed0a12deffeec189f199db7","date":"2016-01-22T18:48:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add I32ReinterpretF32 in binary format, for now\n"},{"hash":"31c6f4b2b0d79e7fe1e801432537e627d11f3091","date":"2016-01-22T18:59:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add more binary opcodes and a kitchen sink test #136\n"},{"hash":"8bf766c858c996c88017c589d921da3326210801","date":"2016-01-23T00:01:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"missing file\n"},{"hash":"91ed39b09313549924be949e706d1bbe9c970234","date":"2016-01-23T00:02:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more flexibility in section reading in binary format code\n"},{"hash":"c41dbabf22b069c1dd766e6a44dbe6f4858b7dbf","date":"2016-01-23T00:06:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove bad comment\n"},{"hash":"627b4f16433739136dc9f51a7dc9db93ce0384a1","date":"2016-01-23T01:19:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allocate __stack_pointer completely\n"},{"hash":"0e6ba7b1ee49bacd2a5ff4ae1b01982f624463f6","date":"2016-01-23T19:03:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid emitting a block in a loop when the .wast format allows doing so #139\n"},{"hash":"da726f060373d957704c51cdb019026e6c3c0a41","date":"2016-01-23T22:18:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fold if-br into br_if\n"},{"hash":"28adf7c1bdbed96e97499ca5955594790a0022b9","date":"2016-01-25T17:58:31.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Latest LLVM + http://reviews.llvm.org/D16534\n"},{"hash":"c0c72f2fed5cd7ef4512cffa8c18152658f20e2c","date":"2016-01-25T20:02:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle new alignment format from llvm\n"},{"hash":"513cfdc94d0b2e99c48fda4dbbbdfcff0aa97a0b","date":"2016-01-26T00:43:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #140 from WebAssembly/alignment\n\nLatest LLVM + http://reviews.llvm.org/D16534"},{"hash":"30b67c29dfd9a075b526043dfbf8556c918c6e5a","date":"2016-01-26T01:44:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"accept either align or p2align on globals in s2wasm\n"},{"hash":"c57934eb52a0a415bb362f4e6f09065a40515e3f","date":"2016-01-26T01:48:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support p2align for function alignment in s2wasm\n"},{"hash":"2f37781a6714d20a5e564a9027fa9ce477369e45","date":"2016-01-26T05:08:50.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update llvm_autogenerated tests to LLVM r258792.\n"},{"hash":"1f807e7caec06649e8329fdf9266768644ef9a64","date":"2016-01-26T05:15:21.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update .wast files with expected output.\n"},{"hash":"d9bb568c5693e042676bfd2d8797270dc6e55922","date":"2016-01-26T05:38:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #142 from WebAssembly/update-tests\n\nUpdate llvm_autogenerated tests to LLVM r258792."},{"hash":"413a7e6dfd8b278e0cc951ad47102846ee7d9e3f","date":"2016-01-26T18:41:23.000Z","author":{"name":"Alexander Meißner","email":"AlexanderMeissner@gmx.net"},"message":"Ignore meta data emitted by clang on Mac OS X\n"},{"hash":"5e0a7f42b82f1096a41a51ada2a370e0f465ea93","date":"2016-01-26T19:17:04.000Z","author":{"name":"Alexander Meißner","email":"AlexanderMeissner@gmx.net"},"message":"Added test case for .*_version_min * meta data\n"},{"hash":"c2f0a42a36ea4a6047c483aa51d9fced98b96ada","date":"2016-01-26T19:33:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #143 from Lichtso/master\n\nIgnore meta data emitted by clang on Mac OS X"},{"hash":"b886afc6f023c9aa4fe1dd84e1d2f8ec2a233a99","date":"2016-01-26T21:16:46.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update waterfall repo\n\nNeed to update arguments.\n"},{"hash":"fcc6ebb468c0b48c2fbc6efff9c512503747f805","date":"2016-01-27T01:17:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor a binary format check method in check.py\n"},{"hash":"787dbd34f57318d79cc1cf6011beafa601b72474","date":"2016-01-27T01:30:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix GrowMemory parsing\n"},{"hash":"d4fd9f214b888db359748b04c5a0dcb255448acd","date":"2016-01-27T01:31:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify we can convert the spec tests to binary and back\n"},{"hash":"3ab7b505d3ccfe2351eea8e3ccb1a5c958b27886","date":"2016-01-27T01:52:14.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Fix colors on OSX.\n\nApple OSes define __APPLE__ instead of the lower case __apple__.\n"},{"hash":"ca07ba59a12584bc61a9d76553abdb31fd091481","date":"2016-01-27T05:24:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"increase function and block sizes in binary format, to get more real-world code to build\n"},{"hash":"691e179fe4fc0d7349e7066e2a14f080f9488ca9","date":"2016-01-27T19:06:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #144 from mbebenita/apple-colors\n\nFix colors on OSX."},{"hash":"79e05f5d713b90f50ece22dfc6410f065de78be7","date":"2016-01-27T21:48:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve assert\n"},{"hash":"3bb222899258e32e17692a18a6e65c3051a0cf20","date":"2016-01-27T21:48:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix function results in binary format reading\n"},{"hash":"de4fcd7a0118072991ad1ab0bb11d798ef895458","date":"2016-01-27T21:48:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix MemorySize type\n"},{"hash":"f0dd7c4c98566751a63807572b9ca66b294ef434","date":"2016-01-27T21:48:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix select type\n"},{"hash":"24992f477f21167efafdc8d5f1a2a9fd197baab6","date":"2016-01-27T21:48:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse 0-size blocks\n"},{"hash":"f329e28d111ea3462fa89dacf53024fba1c52415","date":"2016-01-27T21:48:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify binary outputs are valid wasts\n"},{"hash":"aca3e33790045db5db58df711d3e03030f5076eb","date":"2016-01-27T23:10:13.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Latest LLVM + http://reviews.llvm.org/D16650\n"},{"hash":"047e78d18d997cb206ee121a23bdf466dba17034","date":"2016-01-27T23:15:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support tee_local in .s files\n"},{"hash":"ace3199b27b4f15f30fd6a2f3dbe5534a0ccf6b5","date":"2016-01-27T23:22:53.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Parenthesize macro arguments.\n"},{"hash":"d378fd9a098572d1517f8ac9ce8909fd38f11122","date":"2016-01-27T23:43:24.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Merge pull request #146 from WebAssembly/update-tests\n\nLatest LLVM + http://reviews.llvm.org/D16650"},{"hash":"002080c03eca29fb26901b5953e29cb1dac34c9f","date":"2016-01-28T01:01:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore zero-size segments in binary format\n"},{"hash":"9effac86e9679d723f17d999d233f5b15ce61094","date":"2016-01-28T01:02:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test all parts of spec tests for binary format, even when multiple modules in one file\n"},{"hash":"54c77ff7c48d250a1a5b0aa2a262689fa8184d78","date":"2016-01-28T02:34:14.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Adds a --metrics command line argument to print metrics about .wast files between optimization passes.\n"},{"hash":"6f0e64113c98dec8fa32270b7c7556ce266190a3","date":"2016-01-28T03:23:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #147 from mbebenita/metrics\n\nAdds a --metrics command line argument."},{"hash":"be3ee4d97e81af88dcc9ac97b86da53d0d49c302","date":"2016-01-28T03:44:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"sort keys in metrics\n"},{"hash":"dbe29fc629356ca5abdfeeaf0da573b1208eb3de","date":"2016-01-28T03:55:26.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"s2wasm: support aliased functions\n"},{"hash":"9ced7de31c9317f2c9ad579bb6c7ff466741b968","date":"2016-01-28T04:48:45.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Add s2wasm option to ignore unknown symbols\n\nThis is useful for bringup.\n"},{"hash":"30a371284f7a8128c52beec39ccbac03103a2b5c","date":"2016-01-28T05:19:11.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Write each memory segment on its own line\n\n30k+ column files are silly.\n"},{"hash":"700c910cd1be1dcfd84f3a2bc4252a47999b9341","date":"2016-01-28T17:01:07.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Output NaN payloads only\n\nAs discussed with @binji and @sunfish in https://github.com/WebAssembly/sexpr-wasm-prototype/issues/28\n"},{"hash":"76b1a52626151906b769d8537c16a5144b1cd3b3","date":"2016-01-28T18:27:29.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Don't emit NaN payload when zero.\n"},{"hash":"876c24812ae7660553b47797bb45461fcea1cc20","date":"2016-01-28T18:42:01.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Factor out bit_cast.\n"},{"hash":"a6198ed82965e40145bc7e14096e7333a2590be6","date":"2016-01-28T18:48:34.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Use bit_cast in parseConst, avoid UB\n"},{"hash":"d4b6c15705fc45834e9d3557c6f0796fb1e9381e","date":"2016-01-28T19:26:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #151 from WebAssembly/nan\n\nOutput NaN payloads only"},{"hash":"892a59c999fe5af096d18d27c8bdc4f16f2bb7a9","date":"2016-01-29T00:35:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor check.py in preparation for running spec tests after being converted to binary and back\n"},{"hash":"1dda2d7a26d4cf214ad723d8ea43a6dc126aa563","date":"2016-01-29T00:37:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"gather invokes when splitting wasts\n"},{"hash":"991891ef329f099ab2927af173dc920bfe2f9234","date":"2016-01-29T01:23:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix memory segment reading in binary format\n"},{"hash":"8ed5ab1e5610df34d781d346c1e50ec04d1a4036","date":"2016-01-29T01:25:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"current binary format has power of 2 memory, so use ceil to ensure that the conversion only increases memory, and does not make it too small for the segments\n"},{"hash":"e723adfc542a0dd0440c2429fcd2e7fcfcddd4e0","date":"2016-01-29T05:05:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"join adjacent identical ifs\n"},{"hash":"5019e941939734347e535e117960df8452a8b990","date":"2016-01-29T05:09:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add import module.base to binary format\n"},{"hash":"da0f9511ea7be4f32c1aedfba0463dc91cd4e422","date":"2016-01-29T19:20:46.000Z","author":{"name":"PaulAustin","email":"canoetime@gmail.com"},"message":"Update README example for test name change.\n"},{"hash":"9683f9fd119afb81787d1d3032c7b4616831fb2d","date":"2016-01-29T19:37:09.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update torture test expectations\n\nFrame pointer support was recently added to LLVM, exposing more tests\ndown the rest of the pipeline.\n"},{"hash":"337569fded88e177de01afd380ecf83abffa4c09","date":"2016-01-29T19:42:04.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"cmake: add debug option\n\nUse -DCMAKE_BUILD_TYPE=Debug to use the debug build (by default you get Release). I was getting tired of manually changing the cmake file.\n"},{"hash":"db708900111b720e62af4abd2cc0e278c69f8b38","date":"2016-01-29T19:52:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #155 from PaulAustin/master\n\nUpdate README example for test name change."},{"hash":"72b94954b52a40abc996f5f451be4c73780350fe","date":"2016-01-29T20:08:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #156 from WebAssembly/cmake-debug\n\ncmake: add debug option"},{"hash":"0bc7b7dbdc15fc144a8cb7d750fa585408b4d745","date":"2016-01-29T21:40:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove outdated comment\n"},{"hash":"6d8015094f49f5403d9b9a54bab694e41014cc2a","date":"2016-01-29T22:18:14.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Revert s2wasm_known_binaryen_shell_test_failures.txt change\n"},{"hash":"e81ed44795bcb3e3c181177009cb6390d1b0a555","date":"2016-01-29T22:54:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix conversion opcodes in binary format\n"},{"hash":"6537e5205b9d2e319dc0d7642aebba2cd32a2790","date":"2016-01-29T23:03:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix more conversion opcodes\n"},{"hash":"2ecdaa083088588e39705bdbe5d78338283fa9e8","date":"2016-01-29T23:09:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix ConvertSInt64 in binary format\n"},{"hash":"df10192f3445648b797977e54ae64ae955d5e21c","date":"2016-01-29T23:21:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix printing of i64 loads of 4 bytes\n"},{"hash":"fa3b5371b8d0587cf9489110bcbc77e86da44076","date":"2016-01-29T23:44:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clarify Export fields\n"},{"hash":"c4b9d323f28109a4e918d7f1d31e11931c4aaf58","date":"2016-01-29T23:44:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support exports by a different name in binary format\n"},{"hash":"03d1a16684c9b13ad0df9e86fa6c7bd89138798f","date":"2016-01-30T00:20:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix float payloads based on #152\n"},{"hash":"a52a8cb20e03c786f846cf66ef19b72de8de4104","date":"2016-01-30T00:21:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update test outputs\n"},{"hash":"b055cb0bc90482d41d52b62a3664df2d0d61c06f","date":"2016-01-30T00:29:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update test/s2wasm_known_binaryen_shell_test_failures.txt\n"},{"hash":"dd74f3a36493fec082f44bf6c4f8b954e48e0300","date":"2016-01-30T00:53:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix function type parsing in s-parser\n"},{"hash":"1ce6cc0d79fe819648c5df2033ad508a98da933d","date":"2016-01-30T00:53:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print named types of functions\n"},{"hash":"ef2b1b630496dc695de5f9b722576682580a5a3f","date":"2016-01-30T00:53:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if functions are already type-named, do not change their types\n"},{"hash":"fd0488f48cd2561aacb0f2eb02df6e9524dc9b62","date":"2016-01-30T00:54:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"6c52601dde6699e0655c9a61dc2df3089e0a0204","date":"2016-01-30T01:00:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix I8Const usage\n"},{"hash":"1cf76c3293fdf8e0326384c39696df844d8d6aed","date":"2016-01-30T01:06:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow memory size 0 in binary format\n"},{"hash":"9ec15cf362ac5df76e2021282489ab414dfd6fd6","date":"2016-01-30T01:12:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't let ceil in binary memory size computation let us get to UINT_MAX which can overflow\n"},{"hash":"d569cf1db86179981d27145c6e126247d4d89ae3","date":"2016-01-30T01:44:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor binary format break code\n"},{"hash":"17ab9b60b0cd48b2fd37217fd91a3c65feb03e5f","date":"2016-01-30T04:17:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch in binary format\n"},{"hash":"a0e109c8bf15d55af2280dbd95df67d89fa65520","date":"2016-01-30T04:17:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable binary format spec tests\n"},{"hash":"fece87ba4008c20978639580a8dc7264c57c489d","date":"2016-01-30T04:19:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable binary format spec test outputs\n"},{"hash":"4a182068c6f3360dbf9c27420bbb0a11f34af3dd","date":"2016-01-30T04:32:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #153 from WebAssembly/binary-spec-tests\n\nBinary spec tests"},{"hash":"2d966169a94a5f852491310c4f8868f71ea65631","date":"2016-01-30T16:13:32.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Do relocation properly when ignoring unknown symbols\n\nMy previous patch didn't perform the relocation, so it stuck around. Make it a nullptr instead.\n"},{"hash":"ae918ff5f5746398d0393cf871f6208e582b82d2","date":"2016-01-30T23:02:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor some binary writing code\n"},{"hash":"48832b5d4dbd06f6f7f6afca5822055f219a7392","date":"2016-01-31T16:44:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle initial comments in wast splitting\n"},{"hash":"9cbcb0753617a61f34bd716cfceb0555035772c2","date":"2016-01-31T16:45:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"36df20b097e074c3f37a6a2b2bc0bb3b174cdd30","date":"2016-01-31T17:08:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix block type in LowerIfElse\n"},{"hash":"6defea9c1b451051714cabbcdd8fbe22872c78c9","date":"2016-02-01T02:32:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize load offsets from emscripten output\n"},{"hash":"4eeee5fbc1b60f02c4c2c75b8d6ab0e7c05ea2de","date":"2016-02-01T02:41:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize store offsets from emscripten output\n"},{"hash":"805d930305d792f472881a06f72fc0974d704c48","date":"2016-02-01T18:31:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor call processing code in s2wasm to not share as much between call_indirect and the others, as we need to rewrite the call_indirect code\n"},{"hash":"d7e7328addef046ef103837e24e6df40645f4040","date":"2016-02-01T18:37:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up refactored call processing code\n"},{"hash":"27bdda2e01d83a5b4023a729ed2a427f1ee9fe41","date":"2016-02-01T18:48:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix call_indirect s2wasm parsing order #162\n"},{"hash":"34c5a1756596119e84349d97b01946a3522a5902","date":"2016-02-01T19:04:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set type for loop #161\n"},{"hash":"45aa22043f265eafe701d5dda76f78cf50b2bf9c","date":"2016-02-01T19:04:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an unreachable type, so we can properly type check binaries with an unreachable side (which we then ignore) #160\n"},{"hash":"b4e04afe0a74edf35642908e715e2497f6c18e7f","date":"2016-02-01T19:14:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use getReachableWasmType in if_else and select\n"},{"hash":"cc92414e1145557c17d90cae8b8acb028c377196","date":"2016-02-01T20:31:35.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update LLVM build to 2566\n\nThis pulls in support for frame pointers in LLVM and exposes more tests\nto binaryen, so update the test expectations accordingly.\n"},{"hash":"f275618272a6a5802458beea2e66491d207e14f5","date":"2016-02-01T20:32:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"relax wasm.js assertions on alignment, and update wasm.js build\n"},{"hash":"f18096a0d7d355499a218e1ff4196b296a1f82b1","date":"2016-02-01T21:14:14.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #157 from WebAssembly/test_branch\n\nUpdate LLVM build to 2566"},{"hash":"5a2217d4d50c5302562ba29fb38a60edbe84d262","date":"2016-02-01T23:01:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add return node\n"},{"hash":"a9fee5a35d0ac49d8a90c5fcbd5a8ac0506c3724","date":"2016-02-01T23:04:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use Return in asm2wasm\n"},{"hash":"fb96a666713bbef6de104366fe5d834f46fb1e4c","date":"2016-02-01T23:11:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use Return in s2wasm\n"},{"hash":"46ea8b27b10a718053ab46f3bf11cba25489834c","date":"2016-02-02T10:40:51.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to waterfall build 2678\n\nUpdate the .s torture tests, and update+classify the binaryen shell failures.\n"},{"hash":"9a0faea4e061d0ce6686914543204e05cc7b93c3","date":"2016-02-02T12:09:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #164 from WebAssembly/update-2678\n\nUpdate to waterfall build 2678"},{"hash":"c0c40ceaf1c5e2c4fc966b36ec04592e6c67979f","date":"2016-02-02T13:51:04.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Shell: fix --entry parameter numbers\n\nWhen running the shell with --entry it was assumed that the signature had zero parameters. This isn't true for main, so look at the function's parameter list and construct a zero-initialized arguments vector of the right types. This fixes a few failures, some of which were hiding other failures.\n"},{"hash":"4044cbd8fe593a118456079eaddfb393c84b9e76","date":"2016-02-02T13:59:58.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #165 from WebAssembly/entry-params\n\nShell: fix --entry parameter numbers"},{"hash":"b20025479124b041c94f9bf6f8053eaa95e46c0c","date":"2016-02-02T14:14:34.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Make Literal's ctors explicit\n\nThis tends to avoid silly mistakes, which I'm worried about after adding an explicit ctor with the enum WasmType parameter. See 'C++ Coding Standards: 101 Rules, Guidelines, and Best Practices' rule #40 'avoid providing implicit conversion'.\n"},{"hash":"b4ab45dca8698a1c65a85e6c767c42c3416cc1c5","date":"2016-02-02T14:37:10.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #166 from WebAssembly/explicit\n\nMake Literal's ctors explicit"},{"hash":"0cd317a9f870ea701a54badee9f34329f3430744","date":"2016-02-02T19:17:01.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to revision 2686\n\nIt adds 3 new tests which clang can now generate as of r259508, but one fails to execute properly.\n"},{"hash":"793cb20b7b8e94c607ad83b18892cc339862f96f","date":"2016-02-02T21:34:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't accept -+ #163\n"},{"hash":"1eb620220ba91257d080721f194874960f4fb5fe","date":"2016-02-02T21:36:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"26e30285dd5b91742feb18dd6b924e359dae8901","date":"2016-02-03T03:20:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"save int bits in Literals, only bitcast to float/double on explicit request\n"},{"hash":"9a4dc90db0433473fbcf2b0ba3fa99efc9e77a31","date":"2016-02-03T03:20:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"convert Abs to use int bits\n"},{"hash":"b1cd906c688f52228a59a8ff244ec581d062550e","date":"2016-02-03T03:20:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"convert Neg to use int bits\n"},{"hash":"a28ccaece49c9c5a59eba7d951f2a61b9c27f18a","date":"2016-02-03T03:20:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"convert CopySign to use int bits\n"},{"hash":"5273c5c4eb03e78c6226e928973301566c8abc2a","date":"2016-02-03T03:20:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse nans with all due care\n"},{"hash":"edc07c0cb8e66f8ca33de759b02cf1d3171b5df9","date":"2016-02-03T03:20:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify interpreter int reinterpreting\n"},{"hash":"d467c8f522d7ed8e495b548a753b5f599f7778fa","date":"2016-02-03T03:20:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"in assert tests, verify nans are identical\n"},{"hash":"bdcc9c30e68e63ac2b17a415d9aceff3e62bbd07","date":"2016-02-03T03:20:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix nan comparisons\n"},{"hash":"b6d45f364779f40c7ba43973cc4404d7cf9b953a","date":"2016-02-03T08:25:10.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Shell: don't use unaligned memory\n"},{"hash":"66da1ee9cc70e3848c45745c21a244e54512fa9c","date":"2016-02-03T09:42:22.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Move bits.h to support/\n\nFaster compiles.\n"},{"hash":"5c9cb3b2176a20f3a645546c1f7e97e5414f0309","date":"2016-02-03T09:42:49.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #167 from WebAssembly/unaligned\n\nShell: don't use unaligned memory"},{"hash":"ff497f7a261331b3aa6a1e7a1f8a5e476f856d3c","date":"2016-02-03T10:06:25.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #170 from WebAssembly/bits-support\n\nMove bits.h to support/"},{"hash":"fda7aeb6547e98419b220676b9fe829c8635962a","date":"2016-02-03T10:27:10.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Fix import parsing.\n"},{"hash":"136cb714d38df62f7f100904a8088a425ff6ae93","date":"2016-02-03T15:32:22.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Shell: improve memory trap\n\nThis makes it easier to debug, the message looks like:\n[trap final > memory: 1 > 0]\n"},{"hash":"b1ba1b81ae7a382018f5b5769e25d9431fd462b9","date":"2016-02-03T18:19:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix type of large consts\n"},{"hash":"1ceff1c7ede8014782cae7170e75ce6cd3a52a16","date":"2016-02-03T19:17:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #152 from WebAssembly/float-refactor\n\nFloat refactoring and nan comparison change"},{"hash":"6dab47590562df6e542ff3f0c105db138b8f4fd9","date":"2016-02-03T19:32:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix gcc 4.8.2 breakage due to 66da1ee9cc70e3848c45745c21a244e54512fa9c\n"},{"hash":"83b368381eb1e9e499f213129627d0c188d0008f","date":"2016-02-03T19:36:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge remote-tracking branch 'origin/improve-memory-trap'\n"},{"hash":"0c4e4521b5ede340a7060bf052ccdf84269c3f0a","date":"2016-02-03T20:20:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Break and Return have unreachable type\n"},{"hash":"353e6ee10dc15c8ad01533c0adfc4fc5413b64f0","date":"2016-02-03T20:21:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"83616f8a27bfc0966435b2d96f3ee201eed6c9a7","date":"2016-02-03T20:53:19.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix ambiguous constructor call with explicit cast\n\nShould fix the Travis build.\n"},{"hash":"26d5aa903a1f5908e26e63095fd92749e1bc9544","date":"2016-02-03T21:21:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #178 from WebAssembly/fix_ambig\n\nFix ambiguous constructor call with explicit cast"},{"hash":"2aa80630b873cfe32c7df6617d5bc644d4c937a4","date":"2016-02-03T21:32:24.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Remove assert.\n"},{"hash":"9a79c2f7b83fae35eef47ca307d834ba5a632689","date":"2016-02-03T23:42:26.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"De-inline signed wrapper templates for bit manipulation functions\n\nThis fixes the clang build.\n"},{"hash":"838a5fcf62995c17cdac3a6d39cf139b44e9ba0d","date":"2016-02-03T23:54:28.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #181 from WebAssembly/de_inline\n\nDe-inline signed wrapper templates for bit manipulation functions"},{"hash":"ddaca4202886f036bf525eb174a1b2fd339fa42c","date":"2016-02-04T09:07:38.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Use unsigned types to evaluate i32 and i64 binary operators\n\nInstead of defaulting to signed types and casting as necessary, use\nunsigned types. Explicitly make signed copies of them and us them where\nappropriate, avoiding lots of casting and improving readability. Avoids\nundefined behavior of signed overflow.\n"},{"hash":"b1cda3d4cabc068eb46aa1508814df886fd27f63","date":"2016-02-04T09:09:02.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #180 from WebAssembly/unsigned_binary\n\nUse unsigned types to evaluate i32 and i64 binary operators"},{"hash":"3b89982be258921b120dfb2e951533b3e87b70e1","date":"2016-02-04T09:23:39.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"NFC: improve minSize rationale\n\nAs discussed in https://github.com/WebAssembly/binaryen/pull/167#issuecomment-179496231\n"},{"hash":"0c0b6bab2ed651a92d36a74ddb737cb7e7f4c985","date":"2016-02-04T22:52:22.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Formatting.\n"},{"hash":"c081e08014473a66f7e1a496fdeb3477c1325d7f","date":"2016-02-04T22:56:47.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Add an option to  allocate space for user stack at link time\n\nCurrently s2wasm pre-allocates space for the special __stack_pointer\nvariable but not for the actual stack, and __stack_pointer is null. On\nreal systems the stack is allocated by the dynamic linker, thread\nruntime, or other toolchain/system-provided startup code. Since we don't\nhave any of that in wasm yet, just add an option to allocate the stack\nin the linker for now, so we can continue to run single-file libc-free tests.\n"},{"hash":"9b12bb3742534c25b8c2e5906ca663b66b4be766","date":"2016-02-04T23:04:02.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #179 from WebAssembly/allocate_stack\n\nAllocate space for user stack at link time"},{"hash":"f8c16d02b9ddb42a71424fe8a33e6c1d1f7a5f80","date":"2016-02-04T23:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"756b12bea5f313ba0f2811254e2826b30987f42f","date":"2016-02-05T00:21:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #174 from mbebenita/fix-import\n\nFix import parsing."},{"hash":"3c62319b021279d1f715b86884868abb4957ea53","date":"2016-02-05T00:27:22.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall build and revision\n\nThis brings in the changes to pass --allocate-stack to s2wasm, and\nupdates with a lot of new expected passing tests.\n"},{"hash":"c1f9026c2788e4ef6f6af0c6d9aa04d22fc00320","date":"2016-02-05T00:49:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #185 from WebAssembly/waterfall_update\n\nUpdate waterfall build and revision"},{"hash":"3fbae879fc1b678e748ab3f8c24148e1c3818f45","date":"2016-02-05T08:51:24.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Support start\n\nAs spec'd in: https://github.com/WebAssembly/design/pull/495\nAnd discussed in: https://github.com/WebAssembly/spec/issues/231\n\nThis will make it simpler and more uniform to add a start entry point.\n\ns2wasm is the right place to add start because it'll eventually need to\ndo other basic setup, e.g. put code in start to setup the stack, as\ndschuff is doing in:\n  https://github.com/WebAssembly/binaryen/pull/179\nOr rather, the linker is the right place and s2wasm happens to act as\nour linker right now.\n"},{"hash":"31409184708b04bae830869c7b6ce61726020444","date":"2016-02-05T09:25:56.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Review comments.\n"},{"hash":"8f67b6e27a38c93fbca7f3c44a88889b3896952f","date":"2016-02-05T10:23:11.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #182 from WebAssembly/start\n\nSupport start"},{"hash":"7459e5af01fbe3a8e75e73783794b4cdffda34e9","date":"2016-02-05T13:11:50.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix select\n\nThe ordering changed in: https://github.com/WebAssembly/spec/pull/221\nWhich changed the spec tests, breaking sexpr-wasm because it pulls in the spec tests. This was then fixed:\nhttps://github.com/WebAssembly/sexpr-wasm-prototype/commit/23dc368148fc7827a603e3853f5a40287eb9effe\nWhich in turn breaks when binaryen feeds sexpr-wasm .wast files with the old select operand ordering.\n\nNote that this PR has new failures when running the torture tests in binaryen-shell: the order of evaluation is correct in binaryen-shell but isn't emitted properly by LLVM in the .s files. This will require another patch to fix LLVM.\n"},{"hash":"9cfdb12d4976e4a9fbf6d902065904ffa48bdbec","date":"2016-02-05T13:14:10.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #187 from WebAssembly/select\n\nFix select"},{"hash":"29eb5d43d47fad7be03536ef50638dd14fd1dc5c","date":"2016-02-05T13:28:05.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"auto-update: pass --start when needed\n"},{"hash":"323b61318d81a140584aae22fad102209b42294a","date":"2016-02-05T14:04:15.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to build 2804\n\nThis updates a bunch of LLVM .s tests, but doesn't have any other fix (e.g. select). It'll make the next diff easier though.\n"},{"hash":"22ec908443eec3b7e1112562c089398692fb5feb","date":"2016-02-05T20:44:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix import parsing\n"},{"hash":"0c98499bf13673c1ff4344edb99cd73655f88419","date":"2016-02-05T21:57:22.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Suppress leak detection in ASan builder\n"},{"hash":"64452d23768464f9be9463cfb3037b501c380f40","date":"2016-02-05T22:03:24.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #183 from WebAssembly/asan_no_leak\n\nSuppress leak detection in ASan builder"},{"hash":"66719ac9e42d5fc85e3defaa52ab25c0ca547a23","date":"2016-02-05T23:40:31.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix travis ASAN build\n\nApparently ENV is something special for Travis and isn't just for\nsetting environment variables. Instead manually export the variables in\nbefore_install.\n"},{"hash":"31c0fb8bdf84a21d7c71953bec9107f504662f56","date":"2016-02-06T01:08:02.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix .s parser to accept new order of select operands\n\nAlso update waterfall revision and LLVM-generated tests.\n"},{"hash":"271504de91e3f396251041f94c0f29094af92207","date":"2016-02-06T01:16:55.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #188 from WebAssembly/select_parse\n\nFix .s parser to accept new order of select operands"},{"hash":"79d405b82b648cc406a12ce7164a4ef31279c67c","date":"2016-02-08T19:40:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests and shift to putting the br_if condition at the end, as was just changed to in the spec\n"},{"hash":"74d54530b2405f67332d636de19f79894cb2a419","date":"2016-02-08T19:40:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove wast => wast operation in auto_update_tests.py, as it breaks when the spec changes, and remove some unnecessarily big wasts\n"},{"hash":"7dc054d36488bdea267dfb394758fc56a28e397e","date":"2016-02-08T19:40:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check break types in validator\n"},{"hash":"32ead1ba35e0ad6575e9d27370aba80160f11f7c","date":"2016-02-08T19:40:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update test outputs\n"},{"hash":"d241be7ea16782273b626ce88da4fe87bd206455","date":"2016-02-08T19:45:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"28ac77ff3f5668d543a6c7a99f3e1b1dceff6201","date":"2016-02-08T20:01:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make mem.cpp test less sensitive to stack positions\n"},{"hash":"2262204746437423211930d83d8ea336be3efac2","date":"2016-02-08T21:33:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #189 from WebAssembly/br_if-changes\n\nbr_if updates"},{"hash":"a9158298ebd8fcf2fe369a46635a458ce9f9f5d4","date":"2016-02-08T22:45:47.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update binaryen and several tests for the new br_if operand order.\n"},{"hash":"e9df05441f31bca550cc7f89935f10bf052b1464","date":"2016-02-08T23:06:39.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall build and torture-test .s files to 2907\n"},{"hash":"d3bbf5a4ddd70940d22eb3f1690c2637d725e43e","date":"2016-02-08T23:16:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #190 from WebAssembly/br_if-operand-order\n\nUpdate binaryen and several tests for the new br_if operand order."},{"hash":"d5cc09449032972b07aaf4625349991fe61b62c1","date":"2016-02-09T00:49:50.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Align the stack allocation to 16 bytes to satisfy the aligment ABI\n"},{"hash":"03495efec37b331652701e64dc72f985e6e9f7c2","date":"2016-02-09T19:45:50.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Fix out-of-bounds read\n\nFound by asan\n"},{"hash":"b528843ea6b68fe932ccad1d2ff5611b7c27a6d8","date":"2016-02-09T23:42:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #176 from WebAssembly/asan-op-parse\n\nFix out-of-bounds read"},{"hash":"2576165beae767f73cffdc449c80537030e59387","date":"2016-02-10T01:41:02.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"longjmp -> throw\n\nOlder tsan doesn't like longjmp. Use throw.\n"},{"hash":"67c4675514ec9c220a74274f6fea10a47c7d5bac","date":"2016-02-11T02:10:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix store printing\n"},{"hash":"837ac371eaa356ba381ed01a872c56a8245669f8","date":"2016-02-11T03:03:29.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #192 from WebAssembly/longjmp-throw\n\nlongjmp -> throw"},{"hash":"7b778798f1bbecfd95ff65ea94317957e79b9ee7","date":"2016-02-11T05:11:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix s2wasm store parsing\n"},{"hash":"c21d0b14b1e5e94c82549926b2f5e7a68e291895","date":"2016-02-11T05:14:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #194 from WebAssembly/store-parsing\n\nStore parsing fix"},{"hash":"fd0c6cd9bb8f44d27bef15c46160b7bcf8e6e48b","date":"2016-02-11T21:07:22.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update test revision and torture tests to waterfall build 3002\n\nThis brings in the LLVM changes for varargs, so new tests now pass.\n"},{"hash":"4c579d0079ae0454290c425d8ab4dede06758355","date":"2016-02-11T21:13:04.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Allow failures on TSan Travis build, require ASan to pass\n\nWe've fixed the ASan errors, so this bot can stay green. Now there's\nflake on the TSan bot :(\n"},{"hash":"760fca8004d8b1d47f9b53aadfd75bbf94407be5","date":"2016-02-11T21:43:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #195 from WebAssembly/swaptsan\n\nAllow failures on TSan Travis build, require ASan to pass"},{"hash":"9dc79642d9ec619af46d3717111fbb5348f7bca1","date":"2016-02-12T19:03:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor binaryen-shell to accept a wast that begins with a module invalidity test\n"},{"hash":"f2f05739d41a4e96953dc184dd768ff308ad4983","date":"2016-02-12T20:29:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate start\n"},{"hash":"3d3c666bfbac06f34566a3cfcd1a2b969ce0c4a9","date":"2016-02-12T20:40:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add start to binary format\n"},{"hash":"f061ca831b4ec6d9d3fab0043a42fce0a0b52cf7","date":"2016-02-12T20:40:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call start method in interpreter\n"},{"hash":"adadace7899133b4a25dab47044a373879647ddb","date":"2016-02-12T23:29:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor operations into Literal\n"},{"hash":"6395ca27a90fdb50f1b74ca0b17e25d39f80342e","date":"2016-02-13T05:36:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #196 from WebAssembly/spec-start\n\nFully support start in wasm modules"},{"hash":"a53cf3b263c26bacdac24b0a4a67a8c3189645ca","date":"2016-02-13T22:13:18.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update waterfall\n"},{"hash":"551005d16fd71c47271f2fc84d806c04c136603b","date":"2016-02-13T22:20:09.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to build 3113\n\nA few more LLVM tests make it through.\n"},{"hash":"145243a99e2669cdd53a9a2932c48c01108c3161","date":"2016-02-13T22:26:48.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #197 from WebAssembly/update-3113\n\nUpdate 3113"},{"hash":"afbb7dbfd3034f33e41f28a1e361ad96c6ba7fa4","date":"2016-02-15T17:21:25.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to build 3140\n\nNo changes, but the waterfall is finally caught up (infra was having issues) so updating now is nice.\n"},{"hash":"d4bd7dd9c6024db514c34435ce3476875360ede4","date":"2016-02-16T04:11:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add sm code to parallel v8 code in integrateWasmJS\n"},{"hash":"6f6813c152ab90f811102f19128b82902e7f62ea","date":"2016-02-16T06:13:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"send flattened output to v8 and structed to sm. send only functions to both\n"},{"hash":"4c43d933a5b2f773363cb47cc61d7279d9ad012a","date":"2016-02-16T22:03:58.000Z","author":{"name":"Alexandr Skachkov","email":"gskachkov@gmail.com"},"message":"Fix TYPO in README\n"},{"hash":"396a5118f502f5ce9b9a50d09e02609d76f796ba","date":"2016-02-16T22:11:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #198 from gskachkov/master\n\nTiny fix in readme file"},{"hash":"f606ae65312c82bcb69de4f60a53610bf097df58","date":"2016-02-16T22:21:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js build\n"},{"hash":"f268d8ae74cc6a2b43fcb1b0f47ebbfe09b4b9da","date":"2016-02-16T22:41:36.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update LLVM build and tests to 3913 (r261014)\n\nIncludes recent bug fixes. Also update waterfall and spec repo.\n"},{"hash":"aac1151e72c416406ed35e8ee74a2e90a8ae189b","date":"2016-02-17T18:57:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory max is optional, don't emit it when not necessary\n"},{"hash":"f1f7875381b8407f926c805eb71810bc9a5729f1","date":"2016-02-17T20:52:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm_backend testcases require vanilla_llvm, anything else may be too old\n"},{"hash":"252962faba97b68684a470447c7202cf27ad8c05","date":"2016-02-17T20:52:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add example testcases to auto-updater, and update it\n"},{"hash":"dbb5f32bafcf3c8f51eefb95e6c298ce6b9ac8cc","date":"2016-02-17T22:25:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move printing to a pass\n"},{"hash":"51a0ffcc0a6bdd205e3979cc147adcf0e1186af4","date":"2016-02-17T22:50:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wasm-printing.h\n"},{"hash":"8b7548707893cf2a643325db8dfdfc6f437f7f86","date":"2016-02-17T22:58:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update auto updater\n"},{"hash":"5648c5bea8433116aeb0f267fe7e4443de28dd17","date":"2016-02-18T00:43:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix date\n"},{"hash":"29370f0fc7ad44f506e1bd54441f19111fe9ff5f","date":"2016-02-18T00:46:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove --print-before and --print-after flags, since we now have --print\n"},{"hash":"10b929720a8701ef2a960f5b45e39d7a999cca41","date":"2016-02-18T00:53:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"overload wasm printing in std namespace\n"},{"hash":"849322a1135479f79f7d94b8b032486efe7955a8","date":"2016-02-18T01:46:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #200 from WebAssembly/print-pass\n\nMove printing to a pass"},{"hash":"1f36e3a7ba07ba4460a2682805d259b19113727e","date":"2016-02-18T19:16:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"LowerCase pass\n"},{"hash":"a684cff9e123db38eec9a6c7fbd423aed0b127ab","date":"2016-02-18T19:23:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #201 from WebAssembly/lower-case\n\nAdd a optional pass to lower cases"},{"hash":"1547a9c0c6b702d86b4efb584c910ffbc0fb6b23","date":"2016-02-18T19:28:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix copyright date\n"},{"hash":"47b9763af12799e1845677106de1f9c0a00ee2c4","date":"2016-02-18T21:45:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix the topmost/switch label in LowerCase\n"},{"hash":"846579362c2cc2dc4d129abddd01a97be41d01dd","date":"2016-02-19T21:38:57.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Reorder locals.\n"},{"hash":"6422258ee076d29bdb611d32268afbe692c59bc4","date":"2016-02-19T22:06:34.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Remove empty function.\n"},{"hash":"3205dc9c54e49d4bc57c9cbfcb9163407b097580","date":"2016-02-19T22:12:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure a stable sort in ReorderLocals\n"},{"hash":"c2a7d79c3a44c8064f5e5099e7b14a12423b0d77","date":"2016-02-19T22:12:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge branch 'reorder-locals'\n"},{"hash":"0df6175fa445c1925d41a2ca1d489a1b6d199d1f","date":"2016-02-19T23:01:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use 3321 for now, for newer llvm\n"},{"hash":"a3bbf686b5bd350b6339fd4f96f9dd2cbce3b04b","date":"2016-02-19T23:01:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use newer vanilla emscripten\n"},{"hash":"4eeeb2d30d095af620ab34144927ee9440b94d32","date":"2016-02-19T23:33:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update build.sh\n"},{"hash":"dc7b490d57736def99a40920ad4e6e8ef1cfa3a4","date":"2016-02-19T23:33:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add unaligned memory accesses to wasm.js\n"},{"hash":"5ec0fdb423075356756c3f791a938b23f0495084","date":"2016-02-19T23:47:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support 64-bit stores in wasm.js\n"},{"hash":"5a1adcc357995089766ed333a55ff93204fe75ae","date":"2016-02-19T23:52:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add unaligned access wasm_backend testcase\n"},{"hash":"33fc36930b2b73ff98eba6037138eaa8d3a20404","date":"2016-02-20T00:08:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make wasm.js tolerate wrong alignments, as per the wasm spec\n"},{"hash":"21bea4589aaf5d0de92cd6917ec284444ad6557a","date":"2016-02-20T00:15:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle aligned and unaligned int64 store in wasm.js\n"},{"hash":"af854dd0e98c0b3185ead411ffb9164cb9cb8796","date":"2016-02-20T00:42:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix unaligned wasm.js load/store\n"},{"hash":"5fa252b63c29121ea4e240f5ccccb32f0a7327c8","date":"2016-02-20T00:42:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js build\n"},{"hash":"8039a98d3b4b978a4aa2d8486c35596165981c3d","date":"2016-02-20T01:47:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #203 from WebAssembly/wasm.js-improvements\n\nWasm.js improvements"},{"hash":"417c43cc20e4a9aa3af290e954944f9493753139","date":"2016-02-20T16:24:39.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update torture tests to 3321\n\nTwo new tests fail because of imports, on that used to pass now uses memset because LLVM is smarter.\n"},{"hash":"21daeab0f1fdfe799af93d35f1744873dad2ea8d","date":"2016-02-20T19:41:15.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #205 from WebAssembly/3321\n\nUpdate torture tests to 3321"},{"hash":"ed77a619dc1550ce4ac4c0c420093b25e687996a","date":"2016-02-21T02:25:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not print alignment if it is the implicit default, which is the number of bytes\n"},{"hash":"ebfac87c82cb8faa8cb55c0f51552bdb4ecb9169","date":"2016-02-21T04:11:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print out total nodes in --metrics\n"},{"hash":"7bf31d447bca02947b56f05edf0a171c68c92c7a","date":"2016-02-21T04:11:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #206 from WebAssembly/align-implicit\n\nDon't print the default alignment"},{"hash":"2532fb4f2ffac65e287f7a26a4b84e19a83f42e5","date":"2016-02-21T19:39:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"debugging tweaks\n"},{"hash":"1e53c3f4776ce442a63fdc9548b2cb9134813392","date":"2016-02-21T19:53:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support asm.js ceil\n"},{"hash":"1956794aa5200274d7b67329be55bf97af83f49e","date":"2016-02-21T20:02:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js build\n"},{"hash":"ed567a4f49d3296dcf91bdb966c0deb077dacff7","date":"2016-02-21T20:10:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #209 from WebAssembly/asm-fixes\n\nAsm fixes"},{"hash":"75a6357e2b57a908f955e4cc7b3e9e627524f385","date":"2016-02-22T20:38:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"document that env.exit support is a hack for torture tests\n"},{"hash":"af0f6ef999e8ddf9c168b697710fd313883e8807","date":"2016-02-22T23:20:23.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Bug fix and adds printing / parsing tests.\n"},{"hash":"8c12e60328a9491104df2937c1528b354141d5d3","date":"2016-02-22T23:47:57.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Whitespace removal.\n"},{"hash":"e20fd0a5fec82a48ff3389acae47cfbb601b8f90","date":"2016-02-23T08:18:48.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Fix switch offsets.\n"},{"hash":"817d92d7dd48752f6c0a82989ecfbde4553ad066","date":"2016-02-23T21:48:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #211 from mbebenita/fix-switch\n\nFix switch offsets."},{"hash":"3121d8ce04d265032e1d7753b97a0cf17f8725c3","date":"2016-02-23T21:55:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"grow memory returns a value now, and we can update the spec tests after doing that\n"},{"hash":"9c16dbe573d2fda9fca45f6ef9d60ac90fec9f79","date":"2016-02-23T22:04:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #210 from mbebenita/fix-parsing\n\nBug fix and adds printing / parsing tests."},{"hash":"ac3a3bb22be94bf253558c43ad6d8c96340e1553","date":"2016-02-23T22:05:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #212 from WebAssembly/grow-memory-returns\n\nGrow memory returns a value now"},{"hash":"c28b1a17ea319393a3c193626cb0acd353ad497a","date":"2016-02-23T22:47:08.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to waterfall revision 3450\n\nSome new tests, some of which abort (and I haven't investigated).\n"},{"hash":"0bc91f2983cfcf44cb94a94454e8b689b58dec43","date":"2016-02-23T22:57:58.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #213 from WebAssembly/3450\n\nUpdate to waterfall revision 3450"},{"hash":"654feec8e99413bd989ede7143fcf5a9c67c9db6","date":"2016-02-23T23:06:36.000Z","author":{"name":"Michael","email":"mbebenita@Michaels-MacBook-Pro-4.local"},"message":"Remove MinifiedPrinter from the header file.\n"},{"hash":"51c52bb5e1547c4abece7e9ee0ca0c5fa1e8f4e2","date":"2016-02-25T18:15:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support block comments in check.py\n"},{"hash":"324962ecf1dd63eebfc94993df0d7e91c86a96f0","date":"2016-02-25T18:33:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support function indexes in tables\n"},{"hash":"ad4ce50e5c4d0ef1e530f286f4ebedba4f8a121f","date":"2016-02-25T18:33:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec test repo\n"},{"hash":"84aa340d56ca3bf8b3ae9a2ea3ba4990f975977e","date":"2016-02-25T18:48:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #214 from WebAssembly/new-spec-changes\n\nNew spec changes"},{"hash":"9d71ab268097ede5fa4cac5262c1e8129250d81a","date":"2016-02-26T21:56:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"switch to postorder\n"},{"hash":"11c52f9ca64ccec0d8db6dac22247c8b0eed503f","date":"2016-03-01T00:25:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #204 from mbebenita/print-compact\n\nCompact printing."},{"hash":"c90de4964d89f8e0aeb0d36e2c2571e391c6b664","date":"2016-03-02T00:49:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #215 from WebAssembly/postorder\n\nPostorder"},{"hash":"eaa724a423b98be047459fb4db4e2b048fce3673","date":"2016-03-02T04:08:18.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"update for emscripten PR4135\n"},{"hash":"91f6a135f9accf0dfcf1a47bb1da45635d1d943e","date":"2016-03-02T04:17:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #216 from WebAssembly/emscripten_config\n\nUpdate check.py and documentation to match emscripen PR4135"},{"hash":"af8073f0d361ee232152e411b89f48c6309281c2","date":"2016-03-02T18:30:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix assertion in interpreter that was too strong - we can have blocks with no return type, but that still end up returning a type due to a branch\n"},{"hash":"14cc71b380005d3b2c5289ebfd20f5bf82ff4c79","date":"2016-03-02T18:36:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update select changes in spec\n"},{"hash":"7543689ae566f2cde0fc4d2d0898f969d1e96c75","date":"2016-03-02T18:36:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec test repo\n"},{"hash":"de2d1e41de14e7885dc98781d302c52c45a4d075","date":"2016-03-03T01:28:00.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update wasm.js\n\nThere have been several changes to wasm-js.cpp since its last update.\n"},{"hash":"e68cf04a0df1dfbfa2d7f5f892669b728c5d8b11","date":"2016-03-03T01:35:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #218 from WebAssembly/update-wasm-js\n\nUpdate wasm.js"},{"hash":"e5f02a129130d873ba3bd855a06ba488512abf65","date":"2016-03-03T01:36:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #217 from WebAssembly/spec-fixes\n\nFixes for latest spec test updates"},{"hash":"edb841114c10a771c041ede482ca6bb0f326b621","date":"2016-03-04T00:32:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"00e3875bb7feda59faf347b6887fcdb143d7e50b","date":"2016-03-04T00:49:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #221 from WebAssembly/update-vanilla\n\nUpdate emscripten"},{"hash":"b9443f47b084b1931d459490ecfd465dfcef68d3","date":"2016-03-04T18:38:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve check error logging for wasm methods\n"},{"hash":"23d0b0a717cd139c27e9127b2a0bdcaf19abf6ec","date":"2016-03-04T18:39:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix mergeMemory\n"},{"hash":"5d54bd1c2713ac802d919351f668e2316ab27d70","date":"2016-03-04T18:40:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove optimization for interpreter memory generation, make it always return a memory like in the native code path\n"},{"hash":"e054eda4d85d01aba5cd61d97429b7456b0bc3d8","date":"2016-03-04T18:42:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js build\n"},{"hash":"7c498ab3df26edbb6077e0c84b379bea4a066f44","date":"2016-03-04T19:14:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm.js glue integration is now added by emscripten as a pre-js, so it's optimized with the rest of the code, and not as part of the wasm.js executable\n"},{"hash":"7b604a383873b0042056cf9b78f9cb6ab466953c","date":"2016-03-04T19:14:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix providedTotalMemory setting, must be before it is used\n"},{"hash":"e82c6e77e2fa2a2443fd3cc4ef4f4c9c0ba0ca62","date":"2016-03-04T19:28:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support memory segments in wasm modules, which we get if the wasm backend was used\n"},{"hash":"4bde5052f0183a33cbaa454e1a4d01785c0d257b","date":"2016-03-04T19:46:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #222 from WebAssembly/memory-merging-fix\n\nMemory merging fix"},{"hash":"90ec61b409e3a4d0fc2418d2ba19264b38cdf095","date":"2016-03-05T04:49:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move to more unification of import handling in interpreter and native paths\n"},{"hash":"463842bd3456abda471e4031c100d2586fae9783","date":"2016-03-05T05:05:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #226 from WebAssembly/integrate-wasm-fixes\n\nMore wasm integration fixes"},{"hash":"c4ba893ba88b7560c31d6c5c7cc0b93a3ebaeab7","date":"2016-03-05T05:37:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use lookupImport directly\n"},{"hash":"c5f98754c9c2938c1eaa493f8103bff11ebab628","date":"2016-03-05T05:38:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"WASM => Wasm\n"},{"hash":"2a36300d4318a0a7b7275eac4939d4badfe74877","date":"2016-03-05T05:39:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"pass buffer to instantiateModule\n"},{"hash":"d576691b9a62dbae733e86af69569e9de1a2abb5","date":"2016-03-05T05:50:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #227 from WebAssembly/integrate-wasm-fixes\n\nIntegrate wasm fixes"},{"hash":"04889b818323309d1b6ddd2b628409a83dcf4ba1","date":"2016-03-05T05:57:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move WasmTypes in integrateWasmJS to the right place\n"},{"hash":"a0fe0c518d95a90137d7a28898add5eee1532142","date":"2016-03-05T05:57:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"send a typed array to instantiateMemory\n"},{"hash":"e9be280e476026af4ecb0b0bc839e0a9d967168d","date":"2016-03-05T06:00:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"place NaN and Infinity on global\n"},{"hash":"a96bf5cbb71ee5923f4f534db49cedeccf6d51d0","date":"2016-03-05T06:15:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #228 from WebAssembly/integrate-wasm-fixes\n\nIntegrate wasm fixes"},{"hash":"2c6f442fe58bfddc0736312ce107a5cbf6179b13","date":"2016-03-05T18:52:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add spidermonkify script\n"},{"hash":"bb4c679ebd25594c1efa797ec2d643c15abc4fa7","date":"2016-03-05T19:46:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"spidermonkify improvements, enough for -O1 hello world to work\n"},{"hash":"9445c4900b120455583fbf48c8a08666a050bc5a","date":"2016-03-05T23:21:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix global.Math imports\n"},{"hash":"3f838fd9c42eb9408b82120a43da0caeae44963e","date":"2016-03-06T00:28:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"harmonize ffi calls in asm2wasm, adding arguments as needed. this helps with asm ffis which tolerate overloading, unlike wasm\n"},{"hash":"d8232efb1664c162f834a3d540d8bbefb7035ec0","date":"2016-03-06T00:35:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"python formatting\n"},{"hash":"69b457cd2da748175f8fc46312c8f7b40e368205","date":"2016-03-06T00:45:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"warn when we should grow wasm memory in mergeMemory\n"},{"hash":"d1b8d2fc754aca8e4313e28d6440d0ebe958e804","date":"2016-03-06T00:48:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more python fixes\n"},{"hash":"198ddd04e5c464839448fdfa9fc5dcf0faac13c6","date":"2016-03-06T00:57:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more python fixes\n"},{"hash":"49b8031ecf4695850d060ef11926caddf4bd3352","date":"2016-03-06T01:00:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable flake8 - i have no idea how to make it happy\n"},{"hash":"c1823df9feea7ea90e3886cb18fedee56df48156","date":"2016-03-06T03:06:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"cast f32 to f64 before calling f64-to-int in asm2wasm\n"},{"hash":"5acbb8d34f88eae9b5b50cf5d00f86dc56a7057c","date":"2016-03-06T06:31:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle continues in one-time loops\n"},{"hash":"573aa7adf10858b0bf8f566f72142be2775076c4","date":"2016-03-07T00:21:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"assume wasm binaries were preloaded on the web, where we lack sync binary reads\n"},{"hash":"8f16bf557b9bc261b10aeee9aafd544ff2c1e082","date":"2016-03-07T00:35:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"no need for .buffer for instantiateModule\n"},{"hash":"60bfb02f752e6d7383f077e892b8c10096c40824","date":"2016-03-07T18:32:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove temp file\n"},{"hash":"91008b47488fe87943b7c2b66c3f362907d37bee","date":"2016-03-07T18:32:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow setting total memory in asm2wasm\n"},{"hash":"b65a994c24e83694f27cb835845b3b281207fc2f","date":"2016-03-07T21:10:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #229 from WebAssembly/integrate-wasm-fixes\n\nIntegrate wasm fixes"},{"hash":"7ffdc335c7c899c282cb3d8216773dca1c26455b","date":"2016-03-07T21:19:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix min.wast testcase\n"},{"hash":"2e761e571f7b3d3df7ba7407a13b37c81ee4e9eb","date":"2016-03-07T21:20:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a finalize() method for blocks\n"},{"hash":"6edb9f8958f155e289babad80fa234c2074af4d2","date":"2016-03-07T21:20:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"min test fixes\n"},{"hash":"6299a2d2fb198845c9b140a308b6b7d433d5902b","date":"2016-03-07T23:03:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update if parsing to new spec rules\n"},{"hash":"1a3a0d839ce0e8f7cc523694f40142eea656331a","date":"2016-03-07T23:30:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactoring in preparation for then-else parsing\n"},{"hash":"029bf12684e9b1a659614cb6a99e9f49a2959ad5","date":"2016-03-07T23:39:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse then and else\n"},{"hash":"2e9bc3d4f2799bfcb7876d3edbbead8cd8a444b0","date":"2016-03-07T23:39:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec test repo\n"},{"hash":"a94f9938701920fe11c4f21a875ed3174ff7e9ba","date":"2016-03-07T23:58:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse empty blocks properly\n"},{"hash":"8efa11fbb9ff8cfd8bacc9d16642e13e2bbac9b4","date":"2016-03-08T01:03:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #224 from WebAssembly/spec-updates\n\nSpec updates"},{"hash":"ea3a9db4a071292d4e976ef36f4c197a9e8a5fea","date":"2016-03-08T01:42:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable wasm2asm for now; it was never fully functional anyhow, and there is too much flux\n"},{"hash":"284ae677cca8794a464f9bf702e3ec6aace6c65b","date":"2016-03-08T02:27:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"br_table, no more cases\n"},{"hash":"8d71da97f2901971c136bf5902fe5e5f128b6aba","date":"2016-03-08T04:14:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old and invalid optimization pass in asm2wasm\n"},{"hash":"26e4710625d3b50fca6f1fe0b88d9e4a1c7875ef","date":"2016-03-08T04:16:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"a59745b73d1206a78a8a0ac8ae98ac717f9ff756","date":"2016-03-08T04:19:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove br_table hack in spidermonkfiy\n"},{"hash":"1f9c5923b370e532815e07ad95a7b631e466c7ce","date":"2016-03-08T04:37:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove lower-if-else from spidermonkify\n"},{"hash":"f99a4155e9221922a8f50646507cd3cb38e02376","date":"2016-03-08T04:37:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"better error logging\n"},{"hash":"9407880de631fb4e9f8caa0c746e4d39f40be91d","date":"2016-03-08T05:18:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"be more precise in br_table parsing\n"},{"hash":"bc74a6478aa229abf6dbf7269e67aeeb570e7554","date":"2016-03-08T05:25:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #231 from WebAssembly/spec-updates\n\nSpec updates"},{"hash":"f2f91c4eecf34c12748af0bdfafd035c725ceb6e","date":"2016-03-08T20:22:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"ae8a296440017c83fc70d9435ca567e7d3dafd5a","date":"2016-03-08T21:33:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule again\n"},{"hash":"6c12704bf58c32a1c1436f53e5d8994452a273fd","date":"2016-03-08T21:56:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #232 from WebAssembly/update-emscripten\n\nupdate emscripten submodule"},{"hash":"ec003c7b1ab24a0b2248664c2278a32439f56862","date":"2016-03-08T23:26:42.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update s2wasm for tableswitch->br_table change\n"},{"hash":"78214a4de784379722187042c8d6fa7a803d883a","date":"2016-03-08T23:35:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #233 from WebAssembly/br_table\n\nUpdate s2wasm for tableswitch->br_table change"},{"hash":"ff6e75ea41d85935a640f5494cfd946906675b50","date":"2016-03-09T01:46:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move to a cleaner way of emcc.py integrating with wasm.js-post.js\n"},{"hash":"f19f5c387941ee6a91145f043a1bbc0baf199f6a","date":"2016-03-09T01:56:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"dc395f29a075a33370e68ec853f763fd3894630d","date":"2016-03-09T03:41:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #234 from WebAssembly/integrate-wasm-fixes\n\nMove to a cleaner way of emcc.py integrating with wasm.js-post.js"},{"hash":"c9d6856a65d06a1f092c7f1ad91bd41d32f35227","date":"2016-03-09T18:28:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"e9bdbf509ad08b4a0a0bf27ce2b94aff5db5b325","date":"2016-03-09T19:03:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten to latest incoming, no more vanilla\n"},{"hash":"e9d98deed872a72a826f78c8525464c446c6f21b","date":"2016-03-09T19:17:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #235 from WebAssembly/update-emscripten\n\nUpdate emscripten to latest incoming"},{"hash":"1b45938aadd6e03e9210d88436be9c393623fb42","date":"2016-03-09T21:04:18.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Make initial and max memory sizes be in pages instead of bytes\n\nThe AST and everything that uses it treats the values as\npages. Javascript continues to use bytes.\nThis matches v8 and sexpr-wasm, and the consensus from live discussion\nand  PR209 in the spec.\n"},{"hash":"0c0850ed5e2a2e82ad42f803894defcc53692ccd","date":"2016-03-09T21:05:41.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Implement rotates\n"},{"hash":"589e3006d139884e25a399d3a52f8657d4abba4a","date":"2016-03-10T01:22:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"ac9d61d45fec988640b57dc6b9de97e7d46c41f5","date":"2016-03-10T01:24:18.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Move rol/ror to src/support/bits.h\n"},{"hash":"864fa9c37ba1b33605805d89ab920e6fa4e67a38","date":"2016-03-10T01:38:56.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #225 from WebAssembly/memory_pages\n\nMake initial and max memory sizes be in pages instead of bytes"},{"hash":"5598931f54d2aefc0ea1550e41f424b830331a22","date":"2016-03-10T01:39:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #238 from WebAssembly/update-emscripten\n\nUpdate emscripten"},{"hash":"b91486c4e796e3a50bd1afe3a00135024131ff9f","date":"2016-03-10T01:54:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use .exports\n"},{"hash":"2eab69ff78311c03757de89d0020306d4977eb83","date":"2016-03-10T02:30:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix imports when arriving from wasm backend, which does not prefix\n"},{"hash":"a3d89e6a1973670230fe304d8c204150b33263ff","date":"2016-03-10T03:05:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"54eec1104b34be2c8342942870fb62390606dedf","date":"2016-03-10T05:02:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #239 from WebAssembly/s2wasm-prefixing\n\nFix up exports when arriving from wasm backend output"},{"hash":"68ee6d97130dfb7da474b85fd99382a0569e602f","date":"2016-03-10T05:12:20.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"s2wasm: don't export functions unless they are marked with .globl.\n"},{"hash":"0467407decb3cd30ad407f553a078b9f533b479d","date":"2016-03-10T05:24:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #240 from WebAssembly/globl\n\ns2wasm: don't export functions unless they are marked with .globl."},{"hash":"7734ce6ef5f95697c5bdebc18b96d3902c766b8e","date":"2016-03-11T00:30:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"de-recurse operations on nested blocks\n"},{"hash":"c0dd2398aa0d16c63d02ae875ff2d8c83f44ea1a","date":"2016-03-11T00:30:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"udpate wasm.js build\n"},{"hash":"a8e570c75d3a6cc398a4b1a4c3d492d56c4d8091","date":"2016-03-11T00:30:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add big switch test to check heavily nested blocks\n"},{"hash":"eb1e5b6cc7f32b704bb14b147f47ee7919241503","date":"2016-03-11T03:26:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #241 from WebAssembly/spec-updates\n\nSpec updates"},{"hash":"2ab5a35bbf64b8e910eda87b248c460a8abefec2","date":"2016-03-11T22:20:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support a comma-separated list of methods in wasm/js integration\n"},{"hash":"0df60eadd9bcba09b0288ad5b5733cd79aed490f","date":"2016-03-11T22:22:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check for WasmJS in polyfill glue\n"},{"hash":"b3e7a79fc90ac61641723974296c90624742e92a","date":"2016-03-11T22:25:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"log failures in wasm/js integration\n"},{"hash":"ea3a2f2c276c76ff27665e168877ebb771fa12b4","date":"2016-03-11T22:42:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten and add testing for not including wasm.js polyfill unnecessarily\n"},{"hash":"6fc08966aeaace7db8220e8ba9c3f85297564abb","date":"2016-03-11T22:52:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix test harness assignment\n"},{"hash":"b8b54704bf510ad49e6897b9903d74a9553fd9d1","date":"2016-03-12T01:47:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #242 from WebAssembly/methods\n\nSupport a comma-separated list of methods in wasm/js integration"},{"hash":"88013fea2df72949e1e3d6c29a05c1a8c2f0bd69","date":"2016-03-12T20:39:03.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Re-enable flake8\n\nWas disabled in https://github.com/WebAssembly/binaryen/pull/229\n"},{"hash":"7702b4f1b46939c31666e0684f4db7d72f80e04f","date":"2016-03-12T20:47:46.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #243 from WebAssembly/flake8\n\nRe-enable flake8"},{"hash":"f02c4903db7368a108067723e2ab66a8bc60b7b7","date":"2016-03-12T22:28:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor wasm.js and prepare for loading and interpreting binaries\n"},{"hash":"cb24663efde2d12d94e358d63d32b1cf97c4d342","date":"2016-03-12T22:39:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spidermonkify.py to not fix page size, which is already done now\n"},{"hash":"0cfe85c2d52a5cb5c64065d029375b005c9bc541","date":"2016-03-12T22:39:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add optional native wasm checking\n"},{"hash":"6b215997b21fdf86c430fc184909804af7b44069","date":"2016-03-13T00:41:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finish wasm-binary method and update emscripten\n"},{"hash":"f1702697bab8f8ab40428f40ac809c9d0dd43118","date":"2016-03-13T00:45:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"python fix\n"},{"hash":"d5a7f3ffe79a8c1169d40b21fb2d56f5ec1ab17f","date":"2016-03-13T01:03:55.000Z","author":{"name":"Sohail Somani","email":"me@sohailsomani.com"},"message":"binaryen-shell does not have --print-before/after, only --print\n"},{"hash":"e70981caae2ed0f6ce9cd2f2d80bc0a8e0ae30a9","date":"2016-03-13T04:17:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"de-recurse binary block reading\n"},{"hash":"9aeb16ac2c9a545c96338ce948539bb2a16dc062","date":"2016-03-13T04:19:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"a1287af38f12b5ba3d2874424f67289fe1ea49e7","date":"2016-03-13T19:34:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #245 from kingcheez/master\n\nbinaryen-shell does not have --print-before/after, only --print"},{"hash":"f41c310f8da01d082e776112a643d6483757999f","date":"2016-03-14T00:15:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use a 32-bit int for break offsets, as it is necessary (e.g. for bigswitch.cpp)\n"},{"hash":"cf04149b2dfa51093c6ad0676171cf7c8c506238","date":"2016-03-14T00:16:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test wasm-binary method on wasm.js testcases\n"},{"hash":"a398457c9e4089f0349a99c5147bd9129f56bc51","date":"2016-03-14T01:07:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove some unnecessary tests\n"},{"hash":"8de76ffa8588a72788f3967806df43d4d4e43453","date":"2016-03-14T04:10:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add two missing finalize() calls in wasm-binary\n"},{"hash":"48a12f0cf134a15434432954c56c893ea1fc6eca","date":"2016-03-14T05:05:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #244 from WebAssembly/interpret-binary\n\nwasm-binary method"},{"hash":"5a5a322f74fbeaa9a5cf80c2cddcb26f6fb794d0","date":"2016-03-14T22:56:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add binary header\n"},{"hash":"00f0c39b82f0a46bacce7f884699c3f01d51cd8e","date":"2016-03-15T01:11:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update binary format to use sections as in the spec\n"},{"hash":"f04dd1bb5b06d64ebfdd347a852a55322743b363","date":"2016-03-15T09:56:12.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Don't reinsert in set when interning strings.\n"},{"hash":"ac2a4a62dd903e11be089018bcd11d7a7584a973","date":"2016-03-15T10:24:55.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Remove recursion from s-expr parsing.\n"},{"hash":"e35a06baa37f2b392fd4bb9796f71317665a0b08","date":"2016-03-15T17:38:48.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"fix block comments\n"},{"hash":"f156316aebdba6a26eb6cddcef1034612f32e087","date":"2016-03-15T19:09:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #247 from mbebenita/opts\n\nMisc Optimizations"},{"hash":"34b3761d3daf29c181da8c72edfc9a0b9bf1e6db","date":"2016-03-15T19:44:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"num params in signatures is LEB128\n"},{"hash":"23ceb9808a5332a6599d669c2a46d2431a1343e9","date":"2016-03-15T21:59:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"write imports as separate section\n"},{"hash":"7256ad317c061afabab8f79c38667529de4c72d4","date":"2016-03-15T21:59:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"c68e1ebb0c63f427400230cd71e46dd7629b735f","date":"2016-03-15T22:18:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add function signature section\n"},{"hash":"a0156dbc900c642dd9f1b8f44ab13c06ff2e8fb9","date":"2016-03-16T00:26:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add explicit memory export support\n"},{"hash":"dd69e1a4029dcfd747a735170a81e23595269734","date":"2016-03-16T01:12:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add call_import in binary, and split imports from functions\n"},{"hash":"32fff6e2a757589e234fb2d224791f6cf58a0ad5","date":"2016-03-16T01:15:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"59c18e0a395cd73d1bd9069b2c447600907a6357","date":"2016-03-16T01:21:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add exports section\n"},{"hash":"fa0dbae5b907cc25715b070d64a30275a191f3f0","date":"2016-03-16T01:21:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"2f128693cd5b029aaa59d7cc51fe67f2fcbb529c","date":"2016-03-16T01:28:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit start after functions, and as a function index\n"},{"hash":"493998e54d63be8d7efcdd857334ee621295dd9d","date":"2016-03-16T01:40:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse start properly when it is an offset\n"},{"hash":"0e9bcd36bc8b7e24f3ca2cb7160d922769a7af60","date":"2016-03-16T01:42:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"854f30c5e2a9cc0b4835e467e05f63bcbc6204c2","date":"2016-03-16T03:01:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update data segments in binary format\n"},{"hash":"e72838760425ea77f5b075e6bad0ecf90b820b69","date":"2016-03-16T03:03:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"b51dcb905311c9d808c6ff0123b107e735a45c2e","date":"2016-03-16T03:07:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make function tables entries LEB128\n"},{"hash":"e266b793ec120daf77ae2d40407b04d98ba45984","date":"2016-03-16T03:08:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"d588ecdea2b423bc4de22580f20b0647c4100399","date":"2016-03-16T03:44:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #246 from WebAssembly/spec-binary\n\nBinary spec stuff"},{"hash":"a824194957e5a82f1c2cf19e8406f34625b1cd14","date":"2016-03-16T07:50:18.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Optimize function => index mapping.\n"},{"hash":"789b8b24f162e4f0ca2a5c64435ac70a9ebd539a","date":"2016-03-16T18:35:42.000Z","author":{"name":"Harris Brakmic","email":"brakmic@users.noreply.github.com"},"message":"added link to the tutorial on building under Win32\n\nThis is a link to a tutorial on how to compile Binaryen under Windows 10 x64 with CMake & Visual Studio 2015."},{"hash":"d7b08243dcdf1d6bb37f7a8db3dc38afe6330fc9","date":"2016-03-16T18:47:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #252 from brakmic/patch-1\n\nadded link to the tutorial on building under Win32"},{"hash":"e6689ebc5237ffa282d937f88ad1edd840ed6594","date":"2016-03-16T19:21:24.000Z","author":{"name":"Harris Brakmic","email":"brakmic@users.noreply.github.com"},"message":"switched HTML-link to Markdown-Link\n\nReferencing https://github.com/WebAssembly/binaryen/pull/252#discussion-diff-56397106"},{"hash":"2e2cbb4e5349fe20209a9e8f4ca740eea6fb9f6f","date":"2016-03-16T20:11:02.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #253 from brakmic/patch-1\n\nswitched HTML-link to Markdown-Link"},{"hash":"55502aaa3d91c8a28e9db6eb4e421e2166d6c51d","date":"2016-03-16T21:14:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use getFunctionName in another place\n"},{"hash":"3b2f6ad3db1b6fecd9e8e67c27a441cc62cf91a2","date":"2016-03-16T21:14:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"todo\n"},{"hash":"227f4e473b39d28f749f4252a0a922517d3a4938","date":"2016-03-16T21:46:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor an LEB128 placeholder method\n"},{"hash":"8c47cbf61b8751e0f82d002bea57e24f3461458f","date":"2016-03-16T21:53:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"backpatching LEB128 always fills all 5 bytes\n"},{"hash":"b00602830cbae7d820aa96bb0787e9c83bba8cc3","date":"2016-03-16T21:59:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"0c73e0b7462fa353a7865768375694f48e937aea","date":"2016-03-16T22:38:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"stop assuming we know function names as we decode the binary\n"},{"hash":"4af293a357d6db3726b57deeacbbb37b5f9dab1e","date":"2016-03-16T22:38:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"cec883550664a64b9f6a425dd68a3caf529fa306","date":"2016-03-16T23:00:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use names section for function names\n"},{"hash":"fcc348ac052f213d7b57d27f82a743fbc932ef45","date":"2016-03-16T23:05:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use function body sizes like in the spec\n"},{"hash":"fbd820246f8e721aab2e6696d22dacdf3271e6ae","date":"2016-03-16T23:18:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"write function locals per the spec\n"},{"hash":"41e662bc564c99b54f64360f97c97db57d755754","date":"2016-03-16T23:19:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"9c374b6a2368ef5cb0c102e3e2f164410289f454","date":"2016-03-16T23:52:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use leb128 in breaks\n"},{"hash":"1574710289a5ff49f983d96fd9782800d8d87c00","date":"2016-03-17T00:18:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update switch encoding\n"},{"hash":"65716c4ec22ad2edb9326920487d804f91ba75b4","date":"2016-03-17T00:18:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"31e92024ae8859c9387dbdcda1dfebb888f82510","date":"2016-03-17T00:33:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a 64-bit LEB\n"},{"hash":"b0e342231cab63668a98c8b1caac700e4a1cb0fc","date":"2016-03-17T00:33:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update const to binary spec\n"},{"hash":"41173e4fa1469a3b5a1d99da5f75148be89d5b9a","date":"2016-03-17T00:35:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"3245c24d1fd59c2d4a969570743f764022eb5033","date":"2016-03-17T00:46:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add Log2 and Pow2 support methods\n"},{"hash":"2467f6f72ecdd1e3f5353abecc67e8e8241f93e6","date":"2016-03-17T00:51:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update memory access in binary format\n"},{"hash":"b25d38b20934cd22955fd86438703139659a3360","date":"2016-03-17T00:51:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"a3312f5f2390bf3fe515c99d29d22dff201eeaf9","date":"2016-03-17T01:01:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #254 from WebAssembly/spec-binary\n\nMore spec binary updates"},{"hash":"127abbb171c3595bf37f3155836ac5dcf900169d","date":"2016-03-17T03:50:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix names of LEBs\n"},{"hash":"72c5e955d27436d9a6dae4191f6cc6a52676438e","date":"2016-03-18T19:40:10.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Make --debug a boolean\n\nAs discussed in #248.\n"},{"hash":"ac74a808876a27f44a0eb66cef7cb441be1c2017","date":"2016-03-18T20:55:23.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Check for debug\n"},{"hash":"31c278f2480bfa164e841c248b1cfe399d841d5f","date":"2016-03-18T21:06:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"link to emscripten wiki for emcc-binaryen usage\n"},{"hash":"cd87eb847378d038342a8e9b73960e74352d29ed","date":"2016-03-18T21:09:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #256 from WebAssembly/debug\n\nMake --debug a boolean"},{"hash":"e120fe8163125a7a8d5cb5879863873a47eb0f4c","date":"2016-03-18T21:19:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve method names\n"},{"hash":"6f1cf66e71f3db6af5c2c8087e001fe0c77b0fc4","date":"2016-03-18T21:32:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #257 from WebAssembly/better-method-names\n\nBetter method names"},{"hash":"7ef0e0117f522f87b56a810633b882a3421a3be7","date":"2016-03-18T21:36:30.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Make pretty with fancy Unicode ⇒ rightward double arrow"},{"hash":"c10391b1128094210602b27c7d8efb7fee3f9cd2","date":"2016-03-18T21:38:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #258 from WebAssembly/jfbastien-patch-1\n\nMake pretty with fancy Unicode ⇒ rightward double arrow"},{"hash":"9d2ba77ecb2bfa848beaff4307b8f60a2a3df45b","date":"2016-03-19T01:08:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"proper signed LEB\n"},{"hash":"45d4cb781b0b6fddbe410f0762147e59784555c8","date":"2016-03-19T01:08:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"abc902c1037ca26293bcd25d100c5256afe4c282","date":"2016-03-19T02:06:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #255 from WebAssembly/leb-fixes\n\nLEB fixes"},{"hash":"ae4d2f092bbe973542c18a2b948838ac79af1f39","date":"2016-03-19T04:36:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"readme update\n"},{"hash":"c8faff5ddbc7e93134763a845371b66bc2be56a4","date":"2016-03-19T04:39:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve docs\n"},{"hash":"eb135274e30454715fca36e6b0db640778982018","date":"2016-03-19T22:56:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests and support eqz\n"},{"hash":"ff792474724765983b14f8088c259ff55fcf567e","date":"2016-03-19T22:59:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"d802638ea36ce950f260c42e8bc8e2195c625efa","date":"2016-03-19T23:31:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #261 from WebAssembly/eqz\n\nUpdate spec tests and support eqz"},{"hash":"2fc279ed7e106a01aa0529ead93dc3f04af8e77c","date":"2016-03-20T21:39:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix float to int trap text\n"},{"hash":"da80a33ba574ae76e5f560e53b8c0c8ac6edefb2","date":"2016-03-21T00:39:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add option for imprecise asm2wasm opts\n"},{"hash":"c67c3b8d9b5d09b1f04a602c6248be50ef51569f","date":"2016-03-21T00:41:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"b3f029d8b3be1cfc74a035a6549f4ab2e62e9931","date":"2016-03-21T03:28:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #265 from WebAssembly/asm2wasm-opts\n\nasm2wasm opts"},{"hash":"c733dd24ba5df55272feb4880fe302bed42d5568","date":"2016-03-21T18:38:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use binary_format_check on asm2wasm outputs\n"},{"hash":"3437e886f32275ba385dfc7ae2c2473ed672c01d","date":"2016-03-21T18:57:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"special case the asm.js memory growth function\n"},{"hash":"c4c132bd59acec4b81c5c6d5807499c9b3108be3","date":"2016-03-21T19:33:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix unit testcase\n"},{"hash":"3dd7f17b10a1c6d0de11f3fa297beb9b18016e38","date":"2016-03-21T19:34:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add memory growth asm2wasm test\n"},{"hash":"ff45fb37885b66a60b22e40eca41628b83cdc748","date":"2016-03-21T19:46:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #266 from WebAssembly/growth\n\nMemory growth fixes"},{"hash":"7c6be8c282a6a45031768ce7e2f45b47d9f2c742","date":"2016-03-21T19:48:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use eqz in asm2wasm\n"},{"hash":"c34ed229b2df8bf4e8d0773917d0301c034980e3","date":"2016-03-21T20:04:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #267 from WebAssembly/asm2wasm-eqz\n\nUse eqz in asm2wasm"},{"hash":"b2489b81b9b6fef70e4cbb0af913734442d2bd03","date":"2016-03-21T22:33:46.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Make type of EqZ unary operators always i32\n\nThis makes them symmetric to binary relational operators.\nAlso support eqz in the s2wasm parser.\n"},{"hash":"83a7310f1126a91c2b8472c3d5f802865aa8e4de","date":"2016-03-21T23:02:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"18ac67a3a23f4c54d4deab2d6621601662af899e","date":"2016-03-21T23:38:29.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Support --initial-size and --max-size to specify linear memory size\n\nIf not given, fall back to size calculated by the link step.\n"},{"hash":"c46ef0905565dfa9e24067a050d6c5095178c4ec","date":"2016-03-21T23:55:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #268 from WebAssembly/eqz-type\n\nUpdate EqZ operators and support specifying memory size on the command line"},{"hash":"8782986ee1942b3c0592d0b2fd10b936621c711b","date":"2016-03-22T00:01:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"bfe7270aa561bac1c261d58713df10ef0b9fbb94","date":"2016-03-22T00:07:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make --debug work\n"},{"hash":"59f3f635e1ebd7975c9a75600058e8350341211b","date":"2016-03-22T00:35:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #269 from WebAssembly/update-wasm-js\n\nupdate wasm.js"},{"hash":"232327c1a687fa7571dac7c4742a3db1b2a7e166","date":"2016-03-22T16:46:24.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Remove useless forward\n"},{"hash":"12a5d972ec7c5144cd54afe7bdee7351219aaca0","date":"2016-03-22T17:06:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an option to not optimize in asm2wasm\n"},{"hash":"996416ccefc4f079b14495bcb4ac66e7aa705f4f","date":"2016-03-22T17:13:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"only reuse nameless blocks in blockify in asm2wasm - if they are named, they can be broken out of, which is bad for our loop constructs\n"},{"hash":"49a5fedf0e9ab16d294d9aba860a0375fc4debd9","date":"2016-03-22T17:17:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"94bf9d12986fb069323738247bea5a480cfd8ef6","date":"2016-03-22T17:55:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #272 from WebAssembly/asm2wasm-fix\n\nasm2wasm fix"},{"hash":"98106a0a81a2bf1b0e1865236b7857a8108a2de9","date":"2016-03-22T22:03:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix memory growth #270\n"},{"hash":"3cde7acb07202af8f04f73eaaa9c7579e19a32cf","date":"2016-03-22T22:06:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add memory growth testcase\n"},{"hash":"468e0dde46724e2a40fa311a878d0d50cac8f831","date":"2016-03-22T22:20:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #273 from WebAssembly/memory-growth\n\nFix and test memory growth"},{"hash":"b4c0c719e14327df55a2b70f92475e89ce1e055e","date":"2016-03-22T23:58:31.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Flip condition.\n"},{"hash":"c5a6210d4a60d194f6ab690f6f1206c6076e222d","date":"2016-03-23T01:06:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #251 from mbebenita/opt-wasm-as\n\nOptimize function => index mapping."},{"hash":"9a4d9f5e59fa6c5a88148ee077936924b76bb8cd","date":"2016-03-23T18:31:41.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Add rotate support to s2wasm\n"},{"hash":"6ae3a452453cce6513f27d5ed302c3fe1ff1cce3","date":"2016-03-23T18:35:07.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update LLVM tests and waterfall to 4425\n"},{"hash":"a67434f2dd05f7590c2b7ab18b6bf9d6215f79f2","date":"2016-03-23T19:48:36.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Merge pull request #274 from WebAssembly/rotr-s2wasm\n\nAdd rotate support to s2wasm"},{"hash":"4967e68bcb7f59134c35675a46f6020d2996eb99","date":"2016-03-23T21:07:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"quote strings for closure compiler\n"},{"hash":"10159a897c404ec52d63faeb54a052c48cb1a6c9","date":"2016-03-23T21:55:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add function stack printing in interpreter\n"},{"hash":"85959a42f97857491bac46a25e9634029f6eb3b4","date":"2016-03-23T21:56:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"359c895db53b99fd176aac926914ecebcb4ddd93","date":"2016-03-23T23:10:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #275 from WebAssembly/closure-fix\n\nTest suite corner case fixes"},{"hash":"1ad605a7e2f413d90213ae50824af20b8cac2397","date":"2016-03-24T01:40:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"note when we are using wasm\n"},{"hash":"cbbdaf782716e7a66fc95513e56eac58f2db1dc3","date":"2016-03-24T23:18:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if Module.asm is already set, use that\n"},{"hash":"b0d45999db49576baee192145d06d310653c4b81","date":"2016-03-25T18:47:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests, and new memory page size usage\n"},{"hash":"cb4322e8504cce394383e0a5ebcf37c2a4d5cc18","date":"2016-03-25T19:00:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #276 from WebAssembly/spec-update\n\nUpdate spec tests, and new memory page size usage"},{"hash":"696c76cc5abf7dec13f437e38027a3a2e70e341c","date":"2016-03-28T11:58:31.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Remove /Wall warning level when building with Visual Studio. It is counterproductive since it spams thousands of warnings from Visual Studio runtime headers themselves.\n"},{"hash":"c9ebb2e4f469831d0db0b8e14ac74778380ab3dd","date":"2016-03-28T18:00:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove bogus asserts from safe_integer casts\n"},{"hash":"b8d01b47e5f53a92cd5db528d1939462f919d5f6","date":"2016-03-28T18:18:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #282 from WebAssembly/safe-int-fixes\n\nRemove bogus asserts from safe_integer casts"},{"hash":"1c915b86558f32cfceaa8331bc26f5f17624c198","date":"2016-03-28T18:40:15.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Visual Studio 2015 no longer has the /arch:SSE2 compiler flag, so only pass it for VS2013 and older.\n"},{"hash":"77b998fc2711a1f46e699d581c50a6cf9d50c7c2","date":"2016-03-28T18:40:15.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Hide Visual Studio build warning on casting 64-bit int to 32-bit when we know it is safe to do so.\n"},{"hash":"85f814e17f7d4e8d665fee4281831c8f4576e40f","date":"2016-03-28T18:40:16.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Fix function trapIfGt() to operate on 64-bit integers even when building a 32-bit executable.\n"},{"hash":"f5446dfe4d569cf4d3fae0693385620985ab956c","date":"2016-03-28T18:40:22.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Ignore Visual Studio compiler \"warning C4146: unary minus operator applied to unsigned type, result still unsigned\", this is used commonly in bit manipulation.\n"},{"hash":"432163d499f183ed794f50ec4d38919a169fb80f","date":"2016-03-28T18:40:23.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean Visual Studio build warning C4800: 'int64_t': forcing value to bool 'true' or 'false' (performance warning).\n"},{"hash":"6dabb50603975681c5ae6ac8048abd66a582bf40","date":"2016-03-28T18:40:23.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Avoid the use of CRT pow(2, n) function to generate integer bit patterns, since pow() returns a double. Cleans VS build warnings C4244: '=': conversion from 'double' to 'size_t', possible loss of data.\n"},{"hash":"ef0d9f61157ae22bd7c57cf9211bf4bdfe76284e","date":"2016-03-28T18:40:24.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean unsigned long long -> size_t assignment build warnings on Visual Studio 2015.\n"},{"hash":"9da4e6ea0e2631f0643578e8c3603d1f5f825179","date":"2016-03-28T18:40:24.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Fix wasm::read_file() to abort if input file is too big to read in when building a 32-bit executable and size_t is not 64-bit.\n"},{"hash":"5340abb9ebd1ea73df0c3cf724522510637a9a1c","date":"2016-03-28T18:40:24.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean up build warning C4244: 'return': conversion from 'double' to 'uint32_t', possible loss of data in src\\support\\safe_integer.cpp(40).\n"},{"hash":"a6c00e1fee1a840902cb10e715e2571e824666fa","date":"2016-03-28T18:40:24.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Also clean up Visual Studio build warning in wasm::toSInteger32 for double->int32_t cast.\n"},{"hash":"a471455c7fb4ffc01badedbb2ac9328a646f4693","date":"2016-03-28T18:40:25.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean up src\\wasm-interpreter.h(286): warning C4800: 'int64_t': forcing value to bool 'true' or 'false' (performance warning)\n"},{"hash":"bce9c632434bafd99bc18e57a0ba077785b333fa","date":"2016-03-28T18:40:25.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean up src\\wasm-interpreter.h(307): warning C4244: 'argument': conversion from 'int64_t' to 'unsigned int', possible loss of data\n"},{"hash":"6f7f0286a93a0356f8548760082d082bede57ed8","date":"2016-03-28T18:40:25.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean up src\\wasm-interpreter.h(644): warning C4244: 'initializing': conversion from 'double' to 'int64_t', possible loss of data.\n"},{"hash":"c685cc43c8b8a3a36837b26a358408c5d8da68d0","date":"2016-03-28T18:40:26.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean up truncating cast warnings:\n  src\\binaryen-shell.cpp(181): warning C4244: 'argument': conversion from 'int64_t' to 'int8_t', possible loss of data\n  src\\binaryen-shell.cpp(182): warning C4244: 'argument': conversion from 'int64_t' to 'int16_t', possible loss of data\n  src\\binaryen-shell.cpp(183): warning C4244: 'argument': conversion from 'int64_t' to 'int32_t', possible loss of data\n"},{"hash":"6f2d0dc9b17bfd7039418681bb34386c69aaed22","date":"2016-03-28T18:40:26.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Cleanup redundant '> 0' check in src\\binaryen-shell.cpp(251): warning C4804: '>': unsafe use of type 'bool' in operation\n"},{"hash":"4b019795697ddd33bd66089881b351f9f0549c78","date":"2016-03-28T18:40:26.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Clean up unused variables warnings:\n  src\\binaryen-shell.cpp(262): warning C4101: 'x': unreferenced local variable\n  src\\binaryen-shell.cpp(290): warning C4101: 'e': unreferenced local variable\n  src\\binaryen-shell.cpp(310): warning C4101: 'e': unreferenced local variable\n"},{"hash":"246c58952f4f56ebc9614459b218cbc885dd13d4","date":"2016-03-28T18:40:45.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Use std::numeric_limits<uint32_t>::max() instead of 0xFFFFFFFF.\n"},{"hash":"cefb6b6e05c985524e885af17160b9e146f9b088","date":"2016-03-28T18:41:33.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Add missing <cctype> include.\n\n# Conflicts:\n#\tsrc/wasm-s-parser.h\n"},{"hash":"e34634c2448d0de88284ec01356e8cb98af54ada","date":"2016-03-28T19:52:56.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Tighten safe integer\n\n#282 removed the assert, but the code didn't handle negative -> unsigned conversion properly, and doesn't behave well with -0.0. I'm not super comfortable with 64-bit int min / max to double conversions either, but that'll be for another patch.\n"},{"hash":"68e15c423d92dd69138702cc572e503a33b31782","date":"2016-03-28T20:42:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #284 from WebAssembly/tighten-safe-int\n\nTighten safe integer"},{"hash":"1a09f6d5162df5177cf7209f9898cfd5e6705b6c","date":"2016-03-28T20:51:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use strncpy #283\n"},{"hash":"97972db66d30c1acb716e4f7a421f1fbe7410927","date":"2016-03-29T00:38:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #285 from WebAssembly/safety-first\n\nSafety stuff"},{"hash":"5c1d36fb66b5aad63b02ab44433af201d22eebe0","date":"2016-03-29T01:10:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge branch 'vs2015_fixes' of https://github.com/juj/binaryen into vs2015_fixes\n\nConflicts:\n\tsrc/support/safe_integer.cpp\n"},{"hash":"5cc2c2182332cd17bf12e3cdb58e61d0582eafc1","date":"2016-03-29T01:13:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"streampos may be signed on some platforms\n"},{"hash":"fb0d9509f23472df14d03d93d333d242d23bd2bd","date":"2016-03-29T01:26:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #287 from WebAssembly/vs2015_fixes\n\nVS2015 fixes"},{"hash":"ecca6d3153e787c345cae1d94b84b1324df5f6a0","date":"2016-03-29T17:36:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid constexpr since visual studio doesn't like it\n"},{"hash":"baac207cf0fe3f207f067b7edec2d6ea6e9e4f65","date":"2016-03-29T18:05:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #288 from WebAssembly/more-vs-fixes\n\nMore Visual Studio fixes"},{"hash":"137f11440fb6639b4ec6a30ca1bc817f4fba8e88","date":"2016-03-29T18:16:55.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Use static const, and init in-line\n"},{"hash":"9c549743e741fd9ace8c6832a1e9b2c4cd2bb3eb","date":"2016-03-29T20:11:05.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Use local enum.\n"},{"hash":"9a9cf237bd52c1587094f4521ad823fa7a17aa13","date":"2016-03-29T20:41:47.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #289 from WebAssembly/minor-fix\n\nUse local enum, and init in-line"},{"hash":"43ceb0359156f6e1a7e8e8dd994bc899f0ee1fcf","date":"2016-03-29T22:28:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid alignof for the sake of vs\n"},{"hash":"9a9d5cd4bc8999f184a48b5db16b79d738929c9d","date":"2016-03-29T22:29:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"62db86d38e0b8253c8777d0f1738047a73b5af0b","date":"2016-03-29T23:05:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"1604b4b7e265095c7d7d22455312684ee8dc0790","date":"2016-03-29T23:58:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #291 from WebAssembly/updates\n\nUpdates"},{"hash":"4e71858950c4d1bb7ddfac871e72e5802c2e8362","date":"2016-03-30T03:39:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use ensureFunctionType in s2wasm, to ensure consistent function type names\n"},{"hash":"da01ed78f16d6793dfe09f70016efba904bcaf4f","date":"2016-03-30T04:20:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add explicit function types for indirect call targtets in s2wasm\n"},{"hash":"a3626f94e5e7ae2243beded3e3fa796352ca2033","date":"2016-03-30T04:53:11.000Z","author":{"name":"tzik","email":"mail@tzik.jp"},"message":"Fix grow_memory translation on s2wasm\n\ns2wasm used to mistranslate grow_memory operation in .s into memory_size\nin .wast, and this CL fixes it.\n"},{"hash":"915089d275ddf28b4b129de047187474d234f8b7","date":"2016-03-30T04:57:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #293 from WebAssembly/fixes\n\ns2wasm function type fixes"},{"hash":"cb71620e64a267bb39412b3b578379835feb64b2","date":"2016-03-30T17:14:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #295 from tzik/grow_memory_fix\n\nFix grow_memory translation on s2wasm"},{"hash":"9dbec27cb6b65312360dab5175f1ac5574a36dfd","date":"2016-03-30T20:12:59.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Suppress CMake from generating Debug/, Release/ etc. subdirectories under bin/ and lib/ output directories when building with a CMake multigenerator like Visual Studio or Xcode.\n"},{"hash":"292269159ceab5d2443d6931b9cc6f0163665a65","date":"2016-03-30T22:55:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm.js loads of i64 that read <8 bytes\n"},{"hash":"94e6dbab5d9d8449f09d787201831ab322f60374","date":"2016-03-30T22:55:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"acf12735450c275a937e5133df618608c9990e18","date":"2016-03-30T22:55:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"we export memory properly now, no need in spidermonkify.py\n"},{"hash":"84bb319442fc0bc333924679e910c5a3475ca236","date":"2016-03-30T22:55:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"d984d25273c512b0a2de9f60fadbf26500a7abbd","date":"2016-03-30T23:34:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm.js loads of aligned i64s\n"},{"hash":"bb124a9d8bf891d2482600396a7495f3051a3455","date":"2016-03-31T00:01:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid hardcoded function pointer addresses in indirect_call.cpp test\n"},{"hash":"57275446a9cca19ab58bb937753cf75cbd1481fb","date":"2016-03-31T00:08:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add testing for vanilla llvm + emcc without the hacks, as things are now starting to work, and add a full/real hello world testcase\n"},{"hash":"9b79d4ccac0c47e58ce3cfe033730106b6fd302f","date":"2016-03-31T00:46:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #297 from WebAssembly/frist_wasm_backend_full_test\n\nMore tests for wasm backend"},{"hash":"4848d6f15206dd4a92205fdf6b34885c7463d512","date":"2016-03-31T00:47:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #296 from juj/no_cmake_multigenerator_subdirectories\n\nno_cmake_multigenerator_subdirectories"},{"hash":"122a26b01657b4be63c0e25ae140c9994a8d446a","date":"2016-03-31T15:11:01.000Z","author":{"name":"Csaba Osztrogonác","email":"oszi@inf.u-szeged.hu"},"message":"Fix the build with GCC 5.3.1 and Clang 3.8.0.\n\nFixes #299\n"},{"hash":"2a6d8344caa4d52864a08440535eec1752b94302","date":"2016-03-31T15:26:24.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #300 from ossy-szeged/buildfix\n\nFix the build with GCC 5.3.1 and Clang 3.8.0."},{"hash":"a20ae57a77332f8c49fdfb0c5536f46c3627d141","date":"2016-03-31T17:58:50.000Z","author":{"name":"pjuftring","email":"uftring@hotmail.de"},"message":"Repair broken file-size check\n"},{"hash":"57bd72bee0153ad41c9e4f9441cd2cf19ab89d81","date":"2016-03-31T18:08:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #301 from pjuftring/file-size_check\n\nRepair broken file-size check"},{"hash":"286b5bebd2c2f9bfe66b84b9b258c63afaac89f1","date":"2016-03-31T18:12:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set the binary bit on files we need to open in binary mode\n"},{"hash":"d0ae4a2d778a92be712d3f510f94273bb3e394da","date":"2016-03-31T22:12:04.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Merge pull request #303 from WebAssembly/binary-files-for-windows\n\nSet the binary bit on files we need to open in binary mode"},{"hash":"59972bd1b723d6a2441ef74d724b1355e07fea2f","date":"2016-03-31T22:37:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor file flags into enums\n"},{"hash":"b22f29a4ee0858721278df7d9cea1a487bc7b543","date":"2016-04-01T17:50:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #305 from WebAssembly/enums\n\nRefactor file flags into enums"},{"hash":"bca89bde3e532e0632dd08c478cf5ca14645b2ed","date":"2016-04-01T22:46:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a test for bitcast patterns in asm2wasm\n"},{"hash":"63fb0a4c2541a622275948cebec2fdf30434f848","date":"2016-04-01T22:46:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize bitcast patterns in asm2wasm\n"},{"hash":"6daea13bd8e31bbf098a2c0bef92932f70a6f47f","date":"2016-04-01T22:46:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle minified tempDoublePtr\n"},{"hash":"dd3086a32e790c423c48bf2cfe6a7d8cc8754a15","date":"2016-04-01T23:02:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #286 from WebAssembly/asm2wasm-opts\n\nasm2wasm opts"},{"hash":"1bf1dd8864d7752ef23d55907f3664e43cabc059","date":"2016-04-01T23:31:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix reallocBuffer to send growWasmMemory a size in pages\n"},{"hash":"493e2d928189e97b0309cf25844a98061fbbf906","date":"2016-04-01T23:32:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"8140bfd01a50374b3511434d89514af7e9e5c3cf","date":"2016-04-01T23:43:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #307 from WebAssembly/updates\n\nFix memory growth"},{"hash":"c0c0abc12c62dc4f86eb42a09b0f47b212eb273d","date":"2016-04-02T00:22:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"64f173d71a0cc97de0d5b77b572b5637f481e2df","date":"2016-04-02T00:34:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify imports are valid in wasm.js, do not wait to abort if/when they are called\n"},{"hash":"ef7e49682a06f5e07eb240c70caabcbd786410b1","date":"2016-04-02T00:34:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"c70c7513aa97229d0008aa22319ac44caad8205e","date":"2016-04-02T00:44:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #308 from WebAssembly/update-emscripten\n\nUpdate emscripten"},{"hash":"a76de5b15b946b677faca9b830071761cd969579","date":"2016-04-04T15:24:54.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update to waterfall 4893\n\nNew failure with: [trap final > memory: 18446744073709551600 > 65524]\n"},{"hash":"e959e9b05a7e24b4bfff252ac9b959e9eecd35af","date":"2016-04-04T17:07:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #309 from WebAssembly/update-4893\n\nUpdate to waterfall 4893"},{"hash":"47c88ce06292b77fe75522cfa8d8f8b4126bb19c","date":"2016-04-04T17:43:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle unaligned i64 loads in wasm-js.cpp\n"},{"hash":"891807fbf2c97df974b38fae5abc353d6843c8f1","date":"2016-04-04T17:43:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"f84152a645d5585bb16f37164f838f87bfcf972e","date":"2016-04-04T18:02:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #310 from WebAssembly/load64unaligned\n\nFix unaligned 64-bit loads in wasm.js"},{"hash":"9fb040740ec3ca1c298ecd95f21c071ab1ab170e","date":"2016-04-04T21:34:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add apis for accessing module elements\n"},{"hash":"e6e701474b102b0f9b9d15f6b2c82f26cf956b6d","date":"2016-04-04T21:34:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"b243bf42bf89bee18ece60fb0607cf1fb70ce702","date":"2016-04-05T00:24:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #311 from WebAssembly/module-access\n\nAccess module elements using calls"},{"hash":"10196a4dfae03b08748af26d930c141998cf3e21","date":"2016-04-05T00:38:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up old comments\n"},{"hash":"178b869dcdab8ad5877101cbc0347a23e80b02c0","date":"2016-04-05T00:38:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up callExport types\n"},{"hash":"70a61e1b1fc2f85c81201b6a1e7d2e71e36dcee3","date":"2016-04-05T00:38:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add simpler constructor for SExpressionWasmBuilder\n"},{"hash":"5f7257a970cb3bedfbb26da77843c85db8af83b3","date":"2016-04-05T00:38:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor shell interface into its own file\n"},{"hash":"cebc941e9d0772faa74aeb8cf2ebf6c4ceaaa15b","date":"2016-04-05T00:39:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update example\n"},{"hash":"526ef65bf5b5424784074b44f705e9e90934d858","date":"2016-04-05T00:46:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add debug param for SExpressionWasmBuilder\n"},{"hash":"475a152951e5ca2a675640dfb6155ea4f1b9c137","date":"2016-04-05T01:06:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add necessary idl constructors\n"},{"hash":"c93cb496e9decf897f4a9b28d8be5c7afc94e577","date":"2016-04-05T04:01:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor printing\n"},{"hash":"8388772a8a41a7e65e2285b9ca37ba8c2cfe103f","date":"2016-04-05T04:01:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more idl\n"},{"hash":"57779ed47c2e126a5455c5eb560928e958312015","date":"2016-04-05T04:02:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"idl test fixes\n"},{"hash":"4ba903820b63ba9137d297ff05030b754099803d","date":"2016-04-05T04:31:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"trap on bad callExport, don't assert\n"},{"hash":"55d0683bfe07485c4b53cad0433da3f0e91bddd3","date":"2016-04-05T04:38:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more idl additions fix idl test\n"},{"hash":"391d5cebaa5ad227a6e97f821bedee1dbf92b59a","date":"2016-04-05T04:49:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add testing for binaryen.js\n"},{"hash":"ea448f35ada45647c200019cc34b4315cb16cdd9","date":"2016-04-05T15:57:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix example testcase\n"},{"hash":"155223a2a0dd222817881dab85fa11166cc5bbb3","date":"2016-04-05T16:49:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #312 from WebAssembly/webidl\n\nWebIDL bindings"},{"hash":"559c3372cfc68a338a204f58cb5e559a35f4ae4b","date":"2016-04-05T18:24:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"reorder section size location in binary format, see design#639\n"},{"hash":"e14cbf695a6f30373a94d00f1e06c0af5c556892","date":"2016-04-05T18:28:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"b2ecb1b9d1403fad7b0f8796b9b3ed257007780a","date":"2016-04-05T21:49:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"binary codes update and if/else update, see design#641\n"},{"hash":"e776a41a97756d9f0c2efee84d48c7b25b477fee","date":"2016-04-05T21:53:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"656fc9ec3161111b27be861b1e920e4f77b4bf60","date":"2016-04-05T22:07:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix assertion\n"},{"hash":"176cac16a7a7910620f88d62b6a5675cdca87741","date":"2016-04-05T23:13:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #314 from WebAssembly/binary-updates\n\nSome binary format updates"},{"hash":"c885ca69d19e7bd2c58b44eef242de334ac8c9dd","date":"2016-04-06T16:05:09.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Handle static initializers\n\nLLVM emits static initializers in the ELF style, by placing pointers to\r\n\r\nthe constructor functions in a .init_array section. Handle this in\r\n\r\ns2wasm for now by converting these to standard emscripten metadata."},{"hash":"62c07b549d14dfb974f73554026f0b9fff365968","date":"2016-04-06T18:58:55.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Properly align the stack pointer\n\n* Properly align the stack pointer\r\n\r\nBy default (if no global base is given) the global base is 1, which\r\nseems wrong. In this case the stack pointer gets an address of 1, which\r\nis unaligned and definitely wrong. So, start the global base at 0 instead of\r\n1 by default and align the stack pointer. Also factor allocation of\r\nstatics into a function.\r\n\r\n* unconditionally allocate stack pointer; explicitly reserve address 0\r\n"},{"hash":"0d1a66c540a2c89e1d4543fe318976ad1c6411f1","date":"2016-04-06T21:38:03.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Allocate __dso_handle in s2wasm\n\nUnlike asm.js modules, wasm modules cannot have imported/extern\r\nobjects. So allocate __dso_handle (which is traditionally defined in\r\na crtbegin or similar toolchain file linked with the user code) in s2wasm.\r\n"},{"hash":"c4c82597aaf43d7fee3cd8877801d9dd91e33f7b","date":"2016-04-06T22:12:14.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix s2wasm handling of aliased functions\n\nThis fixes 2 bugs in s2wasm:\r\n\r\n* Handle address-taken aliases (i.e. when they appear in relocations), by looking up and subsituting the address of the aliasee.\r\n* Skip whitespace at the top of the scan() loop instead of requiring it to match. When there are multiple alias declarations in a row, the match(\"FUNCTION\") at the end of an alias delcaration consumes the whitespace at the beginning of the next line, causing it to fail to match the tab character specified in the match pattern at the top of  the loop."},{"hash":"265225f703a6d94dd20d42c322233b52d73f22f8","date":"2016-04-06T22:28:30.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix output of initializer list metadata\n\n* Fix output of initializer list metadata\r\n\r\nTurns out trailing commas aren't valid JSON\r\n"},{"hash":"a3279d60a87539301186f0558231f726dc905cdc","date":"2016-04-06T22:37:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize if-eqz"},{"hash":"eee81f13cf8e7652cd9733d03de57bd9e9e7def7","date":"2016-04-06T23:06:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor wasm traversal code into separate file\n"},{"hash":"41b7c45e6ad662161a8cdc5fd5c88e3bae3363fc","date":"2016-04-06T23:06:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove obsolete comment\n"},{"hash":"3c6203ab0c936570c0e9cf25d810c911fc93fc05","date":"2016-04-06T23:06:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add FastExecutionWalker\n"},{"hash":"c0f0be986d9009a05a3bbaf42c841b863d9b83c1","date":"2016-04-06T23:18:05.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Ensure that all static initializer functions are exported"},{"hash":"e5b5e0111879ef7bd80c7d36f22bd9844faa8d4f","date":"2016-04-07T00:05:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor a WasmReplacerWalker class\n"},{"hash":"53f4c97487e90baa226614e63867add700ed12e5","date":"2016-04-07T03:51:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"EffectsAnalyzer\n"},{"hash":"7bfdd4fc4e0328ab60796f9fc2bf37cb6b81c3b5","date":"2016-04-07T03:51:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move some methods to WasmWalkerBase\n"},{"hash":"1ba1cee0514b1ba16ef474daf3f2b964d5f784eb","date":"2016-04-07T04:20:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"traversal improvements\n"},{"hash":"5d7631a655926f57f824c31505694adac1f44c39","date":"2016-04-07T18:05:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rewrite SimplifyLocals to use FastExecutionWalker\n"},{"hash":"2bf63aadfbf30494455ac31c2fe90bdbc6774d71","date":"2016-04-07T18:21:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add vacuum pass\n"},{"hash":"068a3ed6efdb3f6b0c3b93cdf89bf6a02a5bb113","date":"2016-04-07T18:54:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add more simplify-locals testing\n"},{"hash":"6279be0fb7013db1bc89755f9bc8db4befef2ddf","date":"2016-04-07T19:03:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix effect invalidation logic\n"},{"hash":"67762b6f5639d1ef5ab6861895713f7860d3d9fb","date":"2016-04-07T19:06:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"f86afff36d364ba2daf2102264880d70907bd6ab","date":"2016-04-07T19:13:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"24b0cf11a4b2482ceae7d9e64af576ce2f472479","date":"2016-04-08T00:33:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"start with passes in check.py\n"},{"hash":"0d267afdf948de326055e58a94e5f48d9310a52a","date":"2016-04-08T00:54:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"derecurse blocks helper, and use it in SimplifyLocals\n"},{"hash":"e98b5a7d1866a9f29c5bf06a9b231894222ad30b","date":"2016-04-08T02:04:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix invalidation logic in SimplifyLocals, visit each node as we hit it, do not walk it to look for invalidating elements that are children, we already saw them\n"},{"hash":"0a03aacd4ea32476714066eebe0cded77c87ca66","date":"2016-04-08T02:09:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"blocks must mark as branching in effects analyzer, as control flow can join there if the end of the block was branched to\n"},{"hash":"e444aefddd6e491e193e5eb53beae0c3f9252422","date":"2016-04-08T02:19:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle loops in effect analyzer\n"},{"hash":"e39dfc187c9d9582c3cb786447ddab57ecdd341c","date":"2016-04-08T02:22:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"db3d83e79532cd48fbd852f7ab1370d0218dfe91","date":"2016-04-08T03:39:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor checks in SimplifyLocals\n"},{"hash":"1b6a1099f857d70005380cb4f980c9defeba4b22","date":"2016-04-08T03:42:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add missing checks on nested blocks in SimplifyExpressions\n"},{"hash":"540056ededd811b859e0cf4db9782d8cb7711215","date":"2016-04-08T03:44:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"d30b98d47697daa167333db66ac0fe3d8a693eae","date":"2016-04-08T04:28:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #319 from WebAssembly/traversal\n\nRefactor traversal into its own header"},{"hash":"6efa130aaf02ef6b5ae838308eb2a85e70db2858","date":"2016-04-09T01:52:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize llvm.cttz.i32 into i32.ctz\n"},{"hash":"f046fa3a19252e2dc301a82e7f699aec4dc2eb43","date":"2016-04-09T04:27:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix bug in If.finalize\n"},{"hash":"8efc401621d1794c057bfb43345b6ac4d615b2e0","date":"2016-04-09T04:27:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"AST Builder class, and use it to optimzie umoddi4 in asm2wasm\n"},{"hash":"b7fbe0910cddf984426505de51200ed263d834d8","date":"2016-04-09T17:04:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix asm2wasm udivmoddi4 optimization when there is no getTempRet0\n"},{"hash":"98a76440fa47c784b3e425aa3ae4d3a3bad05f25","date":"2016-04-09T17:46:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize asm2wasm loop branches using eqz\n"},{"hash":"f03404e14317b79e47d11300ab21f8e92036fa85","date":"2016-04-09T17:55:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fold eqz+comparisons\n"},{"hash":"07cd2e2902124e667dd136a77cf7ebaa06ae60ae","date":"2016-04-09T18:45:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add tests for eqz-comparison folding\n"},{"hash":"27db261724ad96e8251fa2dcd28806cd887bb667","date":"2016-04-09T19:14:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add counter for expression ids\n"},{"hash":"d70661f8372ebd72a15e39675eddda463d8cdb31","date":"2016-04-09T19:26:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up in Print\n"},{"hash":"4c98c3f9c6d0c98fbcbaa44a4fc5eb3b7e21b201","date":"2016-04-09T19:34:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add option to print full ast, no elisions\n"},{"hash":"3e00d9a1481c6f61cef163b186c2b13b8160cdad","date":"2016-04-10T01:34:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #329 from WebAssembly/opts\n\nBegin an AST Builder helper class, and more asm2wasm opts"},{"hash":"675c045de41d609e431a5b97f8b00fe433dd18cd","date":"2016-04-10T23:22:12.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Update to revision 5147 (#332)"},{"hash":"65d9334b3066bae667e729f3202f7aa2d7c11530","date":"2016-04-11T20:40:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"De-recurse traversals (#333)\n\n* refactor core walking to not recurse\r\n\r\n* add a simplify-locals test\r\n\r\n* reuse parent's non-branchey scan logic in SimpleExecutionWalker, reduce code duplication\r\n\r\n* update wasm.js\r\n\r\n* rename things following comments\r\n"},{"hash":"2df4d555ae85e0748a26e7f2a278a64f13281c50","date":"2016-04-11T20:48:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"track individual locals in EffectAnalyzer\n"},{"hash":"2b195ce5d72da0786183c169d6e56e1d0c60042e","date":"2016-04-11T20:48:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add more simplify-locals tests\n"},{"hash":"59a4bb90b9214f66df0854979c5bf6a180b286e7","date":"2016-04-11T23:22:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove set_locals with no remaining gets in SimplifyLocals\n"},{"hash":"9663f99fa5beb06255d9b564ae9926cfb80a53d8","date":"2016-04-12T00:26:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove unneeded virtual destructor\n"},{"hash":"1044d6cbca6d279d457cdd1cf7000671ec48e841","date":"2016-04-12T00:34:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"dyn_cast => dynCast\n"},{"hash":"73c606a04d01dc7018d028eed3216a507ab03ee9","date":"2016-04-12T02:43:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #334 from WebAssembly/opts2\n\nMore optimizations"},{"hash":"dbfe22ed34ac3941ff14946b34f4ac4acfda3359","date":"2016-04-12T03:02:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor default optimization passes to a central location\n"},{"hash":"57c8e86a69e7d191e3a5698f81bc7e7627716bf0","date":"2016-04-12T03:17:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add simplify-locals testcase\n"},{"hash":"cfa616dffc11e82390070315cc2e4635e42c437e","date":"2016-04-12T03:26:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow overriding startWalk(Function*)\n"},{"hash":"3c961d1383629e9907bc8d4c5b6f1f566d13a3f2","date":"2016-04-12T03:40:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"continue simplifying locals while opportunities present themselves\n"},{"hash":"546a234d6e195a69c5e0b89cf20ed020f8d09db5","date":"2016-04-12T04:20:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add reorder-locals testcase\n"},{"hash":"5da280167ac6f3e76d27c109ee08ae1747405b5c","date":"2016-04-12T04:24:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"drop completely unused locals in ReorderLocals\n"},{"hash":"6302b75a023154bad7e11551e27d54bc35b415da","date":"2016-04-12T16:19:59.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Add a method to generate a dyncall thunk (#337)\n\nCurrently it's not called anywhere.\r\nThe bulk of this change is refactoring to add makeFunction, makeCallIndirect, and makeReturn\r\nto wasm::Builder, and make S2wasmBuilder call it"},{"hash":"f2753329c4c647cc6950f62f944a39de06ab4c88","date":"2016-04-12T16:54:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #341 from WebAssembly/opts\n\nMore optimization goodies"},{"hash":"b3f9bb4c4a2f919ae0d73aa880609ad51abdc6b8","date":"2016-04-13T23:10:15.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Generate emscripten dynCall thunks in s2wasm (#342)\n\n* Generate emscripten dynCall thunks in s2wasm\r\n\r\nPart of the usual emscripten glue for asm.js is thunks for calling\r\nfunctions on the module given a function pointer; aka a dynCall. This is\r\nimplemented via thunks generated on the Module called\r\n'dynCall_<signature>'. This gives support to s2wasm to generate these\r\nthunks in the wasm module along with other emscripten glue. It also\r\nintroduces a flag to s2wasm to make generation of emscripten glue\r\noptional."},{"hash":"2887883029de293458344a5d564039074d93246e","date":"2016-04-14T17:38:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove excessive wasm-s-parser debug logging (#345)"},{"hash":"4bbc4fda9623a92377552c83d99686d010b4e364","date":"2016-04-14T17:49:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor check.py to use a run_command method that checks proc return codes, instead of hackishly looking at stderr for errors (#346)"},{"hash":"f0c739b5f78e63e9ad4c11bfdc50a55ef18b388f","date":"2016-04-14T23:39:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Add a debug mode to PassRunner, which logs out times (#344)\n\n* add a debug mode to PassRunner, which logs out times\r\n\r\n* address comments\r\n"},{"hash":"3e28445757a8904dc0927698c5b9f33d3a0caeaf","date":"2016-04-15T00:39:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename function locals, to params and vars, which together are all the locals. preparation for #336 (#349)"},{"hash":"8e1d662f4e7b1611e39d6deaadc60e2ed2da7e85","date":"2016-04-15T18:17:58.000Z","author":{"name":"Jan Wolski","email":"jan@wolski.fi"},"message":"Clarified wasm.js & binaryen.js use cases (#350)"},{"hash":"e61a73d633769473e26d534bd7cac26d7891ef19","date":"2016-04-15T20:54:24.000Z","author":{"name":"JF Bastien","email":"jfb@chromium.org"},"message":"Update waterfall, get rlimit bump\n"},{"hash":"f2905f962984df939555aad134c48a194b9e270d","date":"2016-04-15T21:25:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Don't allow tsan to fail (#351)\n\nShoulnd't timeout anymore."},{"hash":"4dfeb1c3a84b13188c22e158c5947c68964cddff","date":"2016-04-15T22:34:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Function parallelism (#343)\n\n* allow traversals to mark themselves as function-parallel, in which case we run them using a thread pool. also mark some thread-safety risks (interned strings, arena allocators) with assertions they modify only on the main thread\r\n"},{"hash":"1b1df06741db2368ed05d7589b5588edfeb68fae","date":"2016-04-18T18:19:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow limiting # of cores in thread pool, useful for debugging\n"},{"hash":"60f1c1516df1218b37f1cd2caba847c48ba93f67","date":"2016-04-18T18:19:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix ThreadPool::size, we don't have any thread objects created if there is just one core, since then we run it all on the main thread anyhow\n"},{"hash":"d929ba9756378b4b67a921714f608b505cb6cb99","date":"2016-04-18T18:19:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use -pthread as a compile flag, not link flag\n"},{"hash":"bbc39d6e75e8b87170f7a3cd72dd34976687e7f6","date":"2016-04-18T18:40:27.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Fixes typo in hex number parsing in asm2wasm. (#362)\n\nFixes #352"},{"hash":"4b5d4efc7091e25b303cb57076ebdee980b8b464","date":"2016-04-18T18:44:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"nicer pass printing (#358)"},{"hash":"c611306758e6c811642623500a51b0da52758303","date":"2016-04-18T18:44:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #353 from WebAssembly/thread-tweaks\n\nThread fixes"},{"hash":"b08aa103597b00a2b4a54d81cde6454f3082b4d5","date":"2016-04-18T18:47:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"index locals, so that get_local and set_local have just an index, and local names are kept on the Function object (#354)"},{"hash":"a2b0849ab7e2ca0d6136c57db7321d20965b89f4","date":"2016-04-18T18:47:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"let traversals access the current function (#355)"},{"hash":"5494c531db30145e7bf8745b46e9784967781616","date":"2016-04-18T18:52:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove the AllocatingModule class, and just make Module have allocations. the distinction is not really that useful, and passes do need to allocate, so we would need to pass around AllocatingModules all around anyhow. (#361)"},{"hash":"ae7bc10828f64f06647cd45449d3c67acb1effb3","date":"2016-04-18T19:06:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update binary section names per latest design (#363)"},{"hash":"0438aa2383724cf0b29554ecb396c9ef26dab92d","date":"2016-04-18T20:15:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use a vector for get_local counts in SimplifyLocals (#356)"},{"hash":"b2fbce4f40c4b8adfdb7cd291d510de9e7219fc6","date":"2016-04-18T20:44:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"create a UnifiedExpressionVisitor for passes that want a single visitor function, to avoid confusion with having both visit* and visitExpression in a single pass (#357)"},{"hash":"d0c419f70938023bfc1c72365f9901a718a9eec6","date":"2016-04-18T21:11:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old comments in SimplifyLocals\n"},{"hash":"d3653cb44c4798290ce6bb579789fc2792986d5e","date":"2016-04-18T21:11:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle dead stores in SimplifyLocals\n"},{"hash":"003834c73f30268f5314cc717b994368cd548d98","date":"2016-04-18T21:49:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #359 from WebAssembly/dead-stores-in-sl\n\nDo some TODOs in SimplifyLocals"},{"hash":"684ed50648fd45199edca7532c743b16a7050695","date":"2016-04-18T22:27:43.000Z","author":{"name":"buddhabrot","email":"maarten.mortier@gmail.com"},"message":"Fix README.md - Ninja documentation (#263)\n\n* Fixed README.md mistake for Ninja generator\r\n"},{"hash":"0b5d70e43b4b984ed7a25cf16ee2ccece3812dbf","date":"2016-04-18T22:54:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix br_table order of evaluation, the value is first\n"},{"hash":"f0f98a3480394495a11d73c74ea81808bea44530","date":"2016-04-18T23:00:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update MemorySize => CurrentMemory\n"},{"hash":"9f61ec61a3c46705ac0b81e87a591ae9e58d030c","date":"2016-04-18T23:05:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"current_memory now returns in units of page size\n"},{"hash":"d06406cc9d05e5654a3df73ab1d09252c774aadb","date":"2016-04-18T23:07:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"grow_memory now returns in units of page size\n"},{"hash":"650928c4c4877186134556ae684938662d9e23ec","date":"2016-04-18T23:09:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable wasm2asm tests in auto_update_tests.py as well, not just in check.py\n"},{"hash":"fcdea4f9f43e8b96c5b5af972fc144780b3d2130","date":"2016-04-18T23:09:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"237cb832673ba6478bcd9bfa395f2f2c07e97a9d","date":"2016-04-18T23:22:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"eb50dce005ad4ca10aaad7d15aa7a518d39ae887","date":"2016-04-19T00:56:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #364 from WebAssembly/updates\n\nSpec test updates"},{"hash":"2553dbe4c01a0f7d04f230bebe3ba41825ede46e","date":"2016-04-19T15:57:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"save the module on Walker objects, so passes have an easy way to access the module (#366)"},{"hash":"31dd39afd6197743d3ccbb2cfa4276134c6751d2","date":"2016-04-19T17:56:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"extensible type forms, update for design#640 (#367)"},{"hash":"84b176f04bdea84ebcbddc5c661920b7966491c5","date":"2016-04-20T14:54:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update binary version to 0xb\n"},{"hash":"3fb82c630ac40fdbf879e191448aeb3bd1ce9c9e","date":"2016-04-20T14:56:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disable asm2wasm i64 opts until browsers are ready\n"},{"hash":"d9d594dfab8f7f31c8e54751f28147d7eb53d574","date":"2016-04-20T14:56:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"877d785ad57a96020257ed38f9e1ccbb13692350","date":"2016-04-20T14:56:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten\n"},{"hash":"6159981ce829941a6950610d1f56f763adaaedc7","date":"2016-04-20T14:56:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update check.py for the wasm default method now being native with binary support\n"},{"hash":"0bd8ffe12c3375706504e9af8440dbe9cd271bf8","date":"2016-04-20T14:56:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"589fb94100c02f8a6e6e923b73d5f7e578fe978a","date":"2016-04-20T14:57:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"86154bff23044b24e18235c8c92721eb463e616a","date":"2016-04-20T15:24:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #368 from WebAssembly/zero_x_b\n\n0xb updates"},{"hash":"b9637c4b74d340e1e8f5a3ab7a4f11e4fee7ce76","date":"2016-04-20T22:15:52.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Parses more than one entry in the .init_array section.\n"},{"hash":"c2d9d476b853212e96f301106cf00ceb19baefca","date":"2016-04-20T23:13:16.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Merge pull request #371 from yurydelendik/initarray-mutilple\n\nParses more than one entry in the .init_array section."},{"hash":"a6112412ce60546f9d9523476edddc0a891ad11e","date":"2016-04-21T00:40:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a utility to check for results being used\n"},{"hash":"6b7963ca2c79836a984a4c74121a55e523f797f0","date":"2016-04-21T00:48:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run merge-blocks later, so it can optiize simplify-locals output\n"},{"hash":"39afd2a64d72b251fc2da067d338d826b06985b7","date":"2016-04-21T00:48:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not crash when printing an expression whose function is not known\n"},{"hash":"7ce2aefd8e14d6507fbe4abdcbbba9b0507944f0","date":"2016-04-21T00:52:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize --vacuum a little\n"},{"hash":"34a74e9e72d2a572bb8ae9f820f4b553fa06632a","date":"2016-04-21T01:39:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #374 from WebAssembly/opts\n\nA few tiny optimization tweaks"},{"hash":"20ecea3457553e308bede7037a5ac625916e074f","date":"2016-04-21T19:49:23.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Factor linker-related functionality of S2WasmBuilder into its own class (#372)\n\nThis is the first of a couple of refactorings in for #370\r\n\r\nNo functionality change, and minimal code change to make it work."},{"hash":"36bb0ed43c9e0644cc92b6508ec2fff290c17034","date":"2016-04-21T20:16:59.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Move Fatal into utilities.h (#376)\n\nFollow-on from #372. Probably we should do even better for error\r\nhandling, and that might mean a cpp file in support, but for now this is\r\na small improvement."},{"hash":"a4aba7acd77a2e86ae23f243962be78e889c35d3","date":"2016-04-21T20:31:13.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Removes wasm-s-parser debug logging from binaryen.idl. (#373)\n\nContinuation of #345 (see https://github.com/WebAssembly/binaryen/commit/2887883029de293458344a5d564039074d93246e#diff-499c4e70c8aadb9837261ebcc4725f78R262)\r\n\r\nCurrently building of binaryen.js fails with\r\n\"src/../glue.cpp:102:14: error: no matching constructor for initialization of\r\n      'wasm::SExpressionWasmBuilder'\""},{"hash":"bf110a08e4e717961d811170a49a72212fbf0b96","date":"2016-04-21T20:46:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support not exporting memory in binaries\n"},{"hash":"7b180b286a3df1a231454399869516ae8571d9bb","date":"2016-04-21T20:52:18.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Move wasm-linker into its own cpp file (#375)\n\nStill making things nicer for #370\r\n\r\nPulling wasm-linker into its own file also necessitated pulling asm_v_wasm.h into a cpp file. It goes into a new lib directory, src/asmjs.\r\n\r\nNo actual code changes in this PR."},{"hash":"9310952685937ea824b8b49288e3a30180ff6dc1","date":"2016-04-21T21:52:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix file size for binary files read\n"},{"hash":"d0aa7bd92d4ccd0148c082fb4df5c0d21aba88ba","date":"2016-04-21T21:54:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"function ending fixes\n"},{"hash":"fab4db7cd141388b9fdf5c0632f50912fff38891","date":"2016-04-21T22:50:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"name unnamed functions in binaries\n"},{"hash":"d5afd73f49c592315200e02d6f56313fbc9d8c3e","date":"2016-04-21T22:50:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"spidermonkify debugging comment\n"},{"hash":"a90070a487d232555831959d78e1c47e9274c97d","date":"2016-04-21T22:50:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update eqz opcodes\n"},{"hash":"569eeebd307710b3de0a0da60a85f123dd9cf0c5","date":"2016-04-21T22:50:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"e9ba8d7dfe1754cb48b1efeb6eb9572bd6388a4e","date":"2016-04-21T22:55:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix a reinterpret opcode\n"},{"hash":"bcfa7289f5df48f40e59542f66c0504cfae3a19b","date":"2016-04-21T23:04:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix spidermonkify\n"},{"hash":"07c4e7b75f91e1d332a33073838098e23befe8c4","date":"2016-04-21T23:06:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix nop printing in br_table\n"},{"hash":"10766f949b05379f543ed1f2f4e148fdc9e9ea96","date":"2016-04-21T23:06:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update br_table in binary format\n"},{"hash":"29b750807ec1f017a6b0d5c581608b06e4152ea1","date":"2016-04-21T23:10:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"a7ddd9614b4a7b567258eb018d5e7827d3f48cba","date":"2016-04-21T23:32:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if condition is popped from before, not pre-order inline\n"},{"hash":"66412d32a863fff2308ffc349eeca7f6ffbc2a31","date":"2016-04-22T00:36:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix loop binary parsing\n"},{"hash":"51283a2da84f8cbd606b64a1883777a4a3a6aff0","date":"2016-04-22T00:36:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix if and else bodies, which can be lists\n"},{"hash":"bc8f5204f0ced242dac61957ce0d46e7e9cb6390","date":"2016-04-22T00:36:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"89292a31f04882a51338e6c1b98532de2d4ad750","date":"2016-04-22T01:24:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ifs in the binary format always have a break scope\n"},{"hash":"523cfa206c06fd900cafbe75213e362aaccb4ef0","date":"2016-04-22T01:25:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"cae6b923c96655c1b81cbe821e9b838e87ae7313","date":"2016-04-22T01:36:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"block helper utils\n"},{"hash":"c24d8add1582e6c9caa6c8951d7bcc5c3d64b8c9","date":"2016-04-22T01:37:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"function toplevels is a list\n"},{"hash":"171668684ad91dc8d397ef411ce5fd337bc7a976","date":"2016-04-22T01:40:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"a180c863ac4b6882f47e5e05ceeebe94b1208a7d","date":"2016-04-22T02:01:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #377 from WebAssembly/zero_x_b\n\nMore 0xb work"},{"hash":"a35db41bcca092212328b6be2fa0eddb635f2f3f","date":"2016-04-22T03:37:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"put segments in right order\n"},{"hash":"8a58f27b7cc8effa4ebabc30c633a895cd1fa4b9","date":"2016-04-22T04:00:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"put segments in right order (#378)"},{"hash":"0a43823615155f956f078ce7b7a8a580bc01fbe1","date":"2016-04-22T17:12:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"br_table offsets are int32s, not lebs\n"},{"hash":"70233cc553b8ab314cf15120e35e7a49ad9b76ab","date":"2016-04-22T17:45:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #379 from WebAssembly/zero_x_b\n\nMore 0xb fixes"},{"hash":"41b62f9e8c525f899177a7d34cf24312e65b1337","date":"2016-04-22T18:54:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix conversion opcodes (#381)"},{"hash":"c12647ea31f3bb312e721ca8ca6a53246733106d","date":"2016-04-22T20:35:22.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Simplify statics, segments, and relocations (#380)\n\nAlso defer address assignment until layout time in preparation for\r\nseparating linker objects out from Linker"},{"hash":"a493b1dfcfbac5165beed3e05891fd467dd4da25","date":"2016-04-24T00:28:27.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Add missing algorithm and string headers\n\nAs in #382."},{"hash":"e9349f082af7d3057aa475a76a58cba7adac2b21","date":"2016-04-24T16:04:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"build cleanups (#385)"},{"hash":"2cc2b8288f0179b8e506d420dd27fada5652e0c3","date":"2016-04-24T16:09:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow allocations on side threads (#365)"},{"hash":"759bafb906ba3addc5ab470ca41455ef452f30ab","date":"2016-04-24T16:10:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"vacuum dead code after unconditional brs\n"},{"hash":"c2dfbb512297e0d008de6ffad4a97799e68b3ed1","date":"2016-04-24T16:10:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"vacuum dead code after br_table\n"},{"hash":"9f1849ef99db9fa8a8a44daec348b7f2bb562453","date":"2016-04-24T16:10:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle general control flow in RemoveUnusedBrs\n"},{"hash":"203d502f9c3c5fc1f16822d3432087785653d767","date":"2016-04-24T16:36:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get rid of nops in ifs\n"},{"hash":"7dcb613e392757bd5a442c89f45f885a63d7b1dd","date":"2016-04-24T16:36:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run optimize-instructions a second time at the end\n"},{"hash":"186765307f12e6c7628ad6da11b332c2bfbcaa07","date":"2016-04-24T16:36:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run multiple cycles of RemoveUnusedBrs\n"},{"hash":"f885aad48c55a0e293c5387f88b82c581a5e5c7e","date":"2016-04-24T16:57:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #386 from WebAssembly/improve-remove-brs\n\nImprove RemoveBrs"},{"hash":"e677013be90a55bdd06cd0752ffee3612ebd6034","date":"2016-04-24T22:30:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"go back to using a mutex in mixed arena, until we get the atomics working\n"},{"hash":"f86771d7a7752656bbbca17f7a1a4e6a148d4a4d","date":"2016-04-24T22:31:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make optimized build optimized again\n"},{"hash":"c2abbda652e2fc92e6bdd710952198ee3005653b","date":"2016-04-24T23:00:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #389 from WebAssembly/fixes\n\nThread fix"},{"hash":"4a12b112defaa80dfb2d661793c809abd4757c0b","date":"2016-04-24T23:01:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix EffectAnalyzer, blocks and loops do not branch by themselves\n"},{"hash":"16eb3c65245bb8a6c60ee3bb3ec7b96e18fe62c6","date":"2016-04-24T23:01:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"provide the current expression to noteNonLinear\n"},{"hash":"308a2e24f8690a76d3ada08f4c5cfb70c6cccbb5","date":"2016-04-24T23:01:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment on replaceCurrent\n"},{"hash":"1fa7f7fef75d2cb795f04b2737efb46a280c9cdc","date":"2016-04-24T23:01:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize block and if returns, by merging set_locals that flow out of them\n"},{"hash":"f9cc3ba2d568cc43ff33dbe21606c40e4ddff596","date":"2016-04-24T23:01:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"e62602d6295f9e0c782b720e51ba14217844adbf","date":"2016-04-24T23:57:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #387 from WebAssembly/block-returns-nice\n\nOptimize block and if returns"},{"hash":"902ab1ec7c91597f5cd9be8b9f43d820f19c7960","date":"2016-04-25T00:27:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update build-js.sh\n"},{"hash":"0d17b75113d4f50d4b05ef3b243dcad962483def","date":"2016-04-25T20:02:09.000Z","author":{"name":"Jan Wolski","email":"jan@wolski.fi"},"message":"Use Module instead of AllocatingModule in binaryen.js tests (#391)\n\n* Use Module instead of AllocatingModule in binaryen.js tests\r\n\r\n* include compiled binaryen.js, too\r\n"},{"hash":"27ef6de772ca90824018819b91b8a230136f56c3","date":"2016-04-25T20:16:18.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Separate LinkerObject from Linker (#383)\n\nCreate the LinkerObject class, which has a wasm Module and represents the module plus the information needed to relocate and lay it out. Each Linker owns a \"main executable\" LinkerObject, and S2WasmBuilder requires a LinkerObject instead of just a Module because LLVM asm files require relocation/linking before they represent a full wasm module.\r\n\r\nNo merging support yet, but the real functionality for #370 is coming soon."},{"hash":"cb417c68cd75e01b9eaef7bb9d06c38c3068e19b","date":"2016-04-25T20:56:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use arities on breaks\n"},{"hash":"15c400329191072a59db433056fbdfcc12b67257","date":"2016-04-25T21:03:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use arities on returns\n"},{"hash":"ef494cae68946b631abeba80ba6556f320475f0b","date":"2016-04-25T21:04:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use arities on switch\n"},{"hash":"3bbde4f1d28e2cc664d8e29cacee7e429251efcf","date":"2016-04-25T21:07:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use arities in calls\n"},{"hash":"921b57fd7b595d8657c696b8471583f9bf95a0da","date":"2016-04-25T21:14:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"b48cfe91be0381a049a413e1c6d7d1ba83514a95","date":"2016-04-25T22:48:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize breaks with values in RemoveUnusedBrs, check if their value can flow to the target anyhow\n"},{"hash":"8a68b4e6506e66312d75c3cff8aa0b36563548e3","date":"2016-04-26T00:09:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize returns that flow out\n"},{"hash":"cb35ee67868bdc2b8839766b7e10b65e8fcc122a","date":"2016-04-26T00:27:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #394 from WebAssembly/more-br-opts\n\nMore control flow optimization"},{"hash":"791c765cda070e47d90577de2d798f046431d095","date":"2016-04-26T03:16:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"selectify if-elses with no control flow in them\n"},{"hash":"75f0736812804980272729c6c3e9dda84539a3d6","date":"2016-04-26T03:47:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #396 from WebAssembly/more-opts\n\nSelectify if-elses with no side effects"},{"hash":"1db57d5b4275a107f43e29c16a4e87a9abd15845","date":"2016-04-26T16:48:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #393 from WebAssembly/arities\n\nArities"},{"hash":"62ed39b5806e75c3c8835b6d996cd3b07a6cec23","date":"2016-04-26T17:03:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"BreakSeeker needs to look at br_table too\n"},{"hash":"ea1d1e60d48159c15075fb86b7e442329101f79c","date":"2016-04-26T17:06:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit ifs in an optimized way in binary format\n"},{"hash":"25a81de39898b7acd4d813779f3f605784203d27","date":"2016-04-26T17:31:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #397 from WebAssembly/binary-opts\n\nImprove emitting of ifs in binary format"},{"hash":"a0ec089707a33be6a4e29d917a7664519df50afc","date":"2016-04-26T18:08:43.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Defer creation of CallImports to link time (#395)\n\ns2wasm currently creates a Call AST node if the target is implemented in the current object (thus far assumed to be the final executable) and a CallImport node if not. In preparation for adding additional objects to the link before layout time, we make only Call nodes until link time, and then convert them to CallImport if they are undefined at that time."},{"hash":"1b01c37546262069391e5a41e8a4a6daf2471a36","date":"2016-04-26T18:31:47.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall and LLVM torture tests build to 5780 (#398)\n\nThis brings in the fix from LLVM r267511"},{"hash":"dd778824cfc60c4478bbe7690769f444dad92803","date":"2016-04-27T00:39:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ast_utils improvements (#399)\n\n* make EffectAnalyzer a little more fun to use\r\n\r\n* create a convert() method that can turn a node into a smaller node, reusing its memory, and use that in nop()\r\n\r\n* use convert in wasm-linker\r\n\r\n"},{"hash":"895e3e016d4875f70517411d195fbab5193784ea","date":"2016-04-27T00:57:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove old globalAllocator\n"},{"hash":"c8a7755461d5e806bd734b75f441ac61c9963ee9","date":"2016-04-27T02:49:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor arena to allow allocating space directly\n"},{"hash":"f9e69902fbe143f72251721a305bd1f2466154e8","date":"2016-04-27T02:49:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make chunk size flexible in arenas\n"},{"hash":"7fd8aac5084223c48901ca20f9d233e9764d536a","date":"2016-04-27T02:49:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not ignore stderr in binary format check tests\n"},{"hash":"d9096704dfa84aea94bb6ac2ffa02d88fa546bfa","date":"2016-04-27T02:50:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an ArenaVector for internal array allocations in expression nodes\n"},{"hash":"206338a6c4e3f9739abd7a2ad082d1770b3a628f","date":"2016-04-27T03:06:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Prep for arena vectors\n\nArena vectors"},{"hash":"d63486d0ef085f905dafdb14a76cfb2ca1fb452e","date":"2016-04-27T16:18:37.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Split construction, scanning, and building phases of S2WasmBuilder (#400)\n\nInstead of doing all of the S2Wasm work in the constructor, split\r\nconstruction, scanning (to determine implemented functions) and building\r\nof the wasm module.\r\n\r\nThis allows the linker to get the symbol information (e.g. implemented\r\nfunctions) without having to build an entire module (which will be\r\nuseful for archives) and to allow the linker to link a new object into\r\nthe existing one by building the wasm module in place on the existing\r\nmodule."},{"hash":"65dd0079b21cc72a3e2e6f5bc2f43ab0e2d3abfd","date":"2016-04-27T20:29:08.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Fix zero-extension in i64.load32_u.\n"},{"hash":"3b2b18dc06da3895f0b54a0660ab561f2b305c92","date":"2016-04-27T20:46:31.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Remove UB (#405)\n\nubsan fails with: wasm-binary.h:97:32: runtime error: left shift of negative value -1\r\n\r\nAlso use type_traits for is_signed."},{"hash":"a4967c271b106032c0264d3ec13c04c41481c3e4","date":"2016-04-27T20:46:35.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Add a testcase.\n"},{"hash":"afcba6ce6e24d775c66bb82e23777a6ff1271f4f","date":"2016-04-27T21:02:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"63271d39f8a1100a703adc50861e02caefc2a9d5","date":"2016-04-27T21:41:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use ONLY hack only for _only files in test/wasm_backend\n"},{"hash":"4a85f62e8a83117a081e9691d8830b6a7a876d1d","date":"2016-04-27T22:15:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #406 from WebAssembly/i64.load32_u\n\nFix zero-extension in i64.load32_u."},{"hash":"de7f3480d1ba898bc5ec270ef24b69f5408de633","date":"2016-04-27T23:59:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use arena allocation for s-expr Elements\n"},{"hash":"46f99e692014e714ffeed7f3db870ffd12bf077c","date":"2016-04-27T23:59:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't leak when running tests in shell\n"},{"hash":"127f9688cc26ab362dabadac5494af23cd78ac8b","date":"2016-04-27T23:59:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allocate only expressions in arenas - functions, imports, exports, function types, can more simply be held by unique_ptrs on the owning module. this avoids need to coordinate arena allocation for their elements, and only the far more plentiful expression nodes are a perf factor anyhow\n"},{"hash":"6db9e90affac38d9bbcec89d978f67877923f207","date":"2016-04-27T23:59:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use an arena vector for switch targets\n"},{"hash":"f4aaf7bfce3808c95554100606cc73916a09fc44","date":"2016-04-27T23:59:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up in emscripten-optimizer arenas\n"},{"hash":"2c8e64a91197beed1792e65a9d409ca50e12697c","date":"2016-04-27T23:59:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up import if not passed to wasm module in asm2wasm\n"},{"hash":"90bdf763537815a523d0dbe75a67e7f0b14b0d9e","date":"2016-04-27T23:59:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not leak in IStringSet\n"},{"hash":"f22e2796f5ac72c64c36cb562d1462093741f8d7","date":"2016-04-28T00:00:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"just use a simple vector in data segments\n"},{"hash":"36b8c029b90c9f0dd3ba564cf040dadbbe96d970","date":"2016-04-28T00:00:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't leak when parsing segments in s-parser\n"},{"hash":"09d356d7438ea9a9497820fc2fbf9c018ea0d139","date":"2016-04-28T00:00:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't leak currFunction in s-parser\n"},{"hash":"5512058de8984a0a782e9af055b9a7e6b3d0fa40","date":"2016-04-28T00:00:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid leaks when s-parsing hits an error\n"},{"hash":"3e99796818f8a774e9c88a5d04aadfe12846ee36","date":"2016-04-28T00:00:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable leak checks\n"},{"hash":"f0a4f15dc27ffff9505503a8168854b7662b2657","date":"2016-04-28T00:53:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"cleanups following review comments\n"},{"hash":"6a6bdc1cef5ec35cb9f7caf6e10ec76ee1107d0d","date":"2016-04-28T02:25:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #403 from WebAssembly/leaks\n\nFix leaks and enable leak checks"},{"hash":"5b29a636cb092bcc9e21568db0dfe845538d34c0","date":"2016-04-28T16:58:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid dynamic allocas (#410)"},{"hash":"91c8337db2421f027de77e9dfa6085b69a195f2c","date":"2016-04-28T17:31:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor js/wasm glue to defer the wasm/wasm-polyfill/asmjs-fallback as late as possible. this lets us recover from wasm compilation failures and still do a fallback method\n"},{"hash":"1620162471a60a905e1e8e6072e676d73b8ddfff","date":"2016-04-28T17:50:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fall back from wasm compilation errors, and add logging\n"},{"hash":"eff3a393493f5ce4c906f50f4b360c3f9ecdf2eb","date":"2016-04-28T19:53:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #411 from WebAssembly/flexible-methods\n\nRefactor js/wasm glue to defer the wasm/wasm-polyfill/asmjs-fallback point"},{"hash":"5c11c30dad7ac608acf9ee6bf473f6407547bca2","date":"2016-04-28T19:55:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix asm2wasm f64->f32->i32 bitcast (#412)"},{"hash":"1b5bd6e3e6102aa96cc4e1047d0684c726881705","date":"2016-04-29T01:06:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix size detection on reinterpret operations in binary format\n"},{"hash":"a04e5b17fb97fe67747fcc070b06d872a5904c9b","date":"2016-04-29T01:29:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get the reinterpret opcodes right on float/int\n"},{"hash":"eb2ea67bf52eac93de977922763a0ee3787be240","date":"2016-04-29T02:49:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #413 from WebAssembly/binary-fixes\n\nReinterpret binary fixes"},{"hash":"623918767242c36b9197e83a9e3b4e35ee17f8db","date":"2016-04-29T21:57:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"warning on BreakSeeker\n"},{"hash":"8ac323bb58c0e1891dea6492160939eb1b6bb1d2","date":"2016-04-29T22:03:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add wasm.cpp which does full type detection for blocks, and prepare for full type checking everywhere\n"},{"hash":"af6b1a77673b1c49f4501918385bd463c50cb28b","date":"2016-04-29T22:03:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate in binaryen shell and on wasm binaries, and fix type checking\n"},{"hash":"199c7d3e558d4c2f3dc6be1e0fc826ca45b52b8f","date":"2016-04-29T23:30:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #416 from WebAssembly/full-validation-nice\n\nFull validation"},{"hash":"e11b0c43df135d473baf4ce3878e83de7da9bf5d","date":"2016-04-30T22:11:28.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Check LEB128 encoding fits in destination integer (#408)\n\n* Check LEB128 encoding fits in destination integer\r\n\r\nAs found by #404, the insignificant LEB128 bits were silently dropped\r\nwhen dealing with signed LEB values which tripped UBSAN in hello_world.\r\n\r\nThis fixes #409.\r\n\r\n* Fix typo.\r\n"},{"hash":"203d8b2f4021e61dede148a9f0ada0f0b0a02da9","date":"2016-04-30T22:14:31.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Changed type of flags to fix Visual Studio 2015 error (#418)\n\nChanged type of flags (line 26) in read_file() from auto to std::ios_base::openmode to fix Visual Studio 2015 error."},{"hash":"2559cb90937b4b88377a0e17e0725771511a08a7","date":"2016-05-02T21:47:11.000Z","author":{"name":"Ben Smith","email":"binjimin@gmail.com"},"message":"Fix {i32,i64}.trunc_{s,u}/{f32,f64} in interpreter (#421)\n\nCheck the binary representation of the float instead of converting it to\r\na float first."},{"hash":"91c62dd70ec09a762542e2835273942f97509c5d","date":"2016-05-02T22:55:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix memcpy UB (#422)\n\nCan't call memcpy with size of 0 and nullptr init."},{"hash":"5456ae59515d08c1c3de3aaca7331d420ede8a32","date":"2016-05-02T23:08:23.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"f32.demote/f64 fix UB (#423)\n\nAnother fix for #404."},{"hash":"757084eec25159a1f34a1a6fde7754dee18ac8b9","date":"2016-05-03T01:03:16.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix UB with FP divide by zero (#424)\n\nAnother fix for #404."},{"hash":"40f9359713c9aff3a735901a7e3c2370559bfad8","date":"2016-05-03T01:42:02.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix alignment UB (#425)\n\nThere may be some other places which are broken, but they don't trigger ubsan right now. This is another fix for #404."},{"hash":"13c428a6850afb00937732eac227979cf0604e8f","date":"2016-05-03T03:32:34.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"ubsan: only recover from some of the failures (#426)\n\nI fixed a few of the existing ubsan failures as part of #404, but would\r\nlike to prevent regressions. This patch allows some of the sanitizer\r\nchecks to continue execution (null, shift, signed-integer-overflow) and\r\nmakes all the other ones hard errors (preventing regressions).\r\n\r\nOnce the remaining errors are addressed we should commit #404 which\r\nmoves ubsan to -fno-sanitize-recover=all. This likely requires a good\r\nchecked-math library."},{"hash":"318746771e7ff11a1223cc5d08433fe5dfeab9db","date":"2016-05-03T04:04:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"makeLoop and makeBreak\n"},{"hash":"e888c841832895f292e8582c0043c8bf232e5d96","date":"2016-05-03T04:04:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a default finalize() so it is valid to call on any node\n"},{"hash":"5d2c7a86ba47ef0a0cb27508d81669c4a923a857","date":"2016-05-03T04:41:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"C API plus test\n"},{"hash":"09153904803c628393a8ff65c1791d3bc57c756b","date":"2016-05-03T20:22:07.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix null UB (#428)\n\nAs a continuation to #404, fix a dereference of a std::vector's zeroth element when the size of the vector is zero.\r\n\r\nSymptom: stl_vector.h:866:9: runtime error: reference binding to null pointer of type 'char'"},{"hash":"b6ec3620376a8b9cf7cedfe7f61fd4c943e0275b","date":"2016-05-03T21:05:44.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix shift UB (#429)\n\nGetting close to finishing #404."},{"hash":"d435670997e524df9707354d468a22432a181411","date":"2016-05-03T21:46:28.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix signed integer overflow UB (#430)\n\nThis puts us back where #404 wanted to be: all UB that ubsan knows about now causes an abort. This ins't to say that it's all gone, merely that our tests don't trigger any more UB which ubsan knows how to find :-)"},{"hash":"fd14d9cfc4cd744a8d143bb6a2622c68f5d33cfd","date":"2016-05-03T22:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"kitchen sink test for c api\n"},{"hash":"5b2adeb4b2a66dfcda7667ce7a4c27ec49c62b1b","date":"2016-05-04T00:14:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #427 from WebAssembly/c-api-nice\n\nC API"},{"hash":"c7d7083920ddd9ff7d1a44577287b8ecc048a221","date":"2016-05-04T05:01:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Harmonize the internal opcodes with the binary format (#433)\n\n* harmonize the internal opcodes with the binary format, so they clearly parallel, and also this helps us avoid needing the type to disambiguate\r\n\r\n* comment on GetLocal in C API\r\n"},{"hash":"1397997bc91663f19c387c69c7e47930efe57539","date":"2016-05-04T21:10:37.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Nicer shift masks (#431)\n\n* Nicer shift masks\r\n\r\n* Yet nicer shift mask.\r\n\r\n* Fix typo.\r\n"},{"hash":"2811727a118e92e6b7ef293458f9bab1cf5dacdc","date":"2016-05-05T15:01:57.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"[Linker] Handle archive files\n\nAdd a class to parse archive files.\r\nSupport linking archive files, with archive semantics (i.e. an archive\r\nmember is linked in if it satisfies an undefined reference).\r\nArchive files must be gnu-format archives containing .s files.\r\nAdd tests for linking semantics.\r\n"},{"hash":"f85e310924535da09822f3d43aeee9265eb12760","date":"2016-05-05T16:20:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Import emscripten's relooper, port it to the binaryen AST, and provide a C API (#434)\n\nalso ignore libstdc++ bug in ubsan"},{"hash":"a23899ddfde13d400abac29f2cf04b71b743093b","date":"2016-05-05T16:23:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a relooper test\n"},{"hash":"adda43ea1e59f401d874cfcb41c9ffb17f87f44d","date":"2016-05-05T16:30:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix archive.cpp on 32-bit\n"},{"hash":"aa1cf3d0c20d5bc6f98ac3ab96c06f0ff6c2eb61","date":"2016-05-05T16:32:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify PassRunner API, get a module directly\n"},{"hash":"5d91adec8d601faba388960b15b630f3895b4009","date":"2016-05-05T16:47:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"better error on missing passes\n"},{"hash":"9afdb5e5512ae4c9c23d7f2d41a35e63ecc3a0f5","date":"2016-05-05T17:22:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle missing local names in ReorderLocals\n"},{"hash":"715d1becddcb89c49d71aa19e62ed27f967e5860","date":"2016-05-05T17:26:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add optimization to c api, and so that we can find all passes in the c api library, make it dynamic\n"},{"hash":"bbf846554a407e0385f91f5b7eeb9594c12e0bc5","date":"2016-05-05T17:30:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve test\n"},{"hash":"bb3dbb2784e91a517916f366e710e01a2e7331f6","date":"2016-05-05T18:47:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #435 from WebAssembly/more-relooper\n\nAdd optimization to C API, and with that, more relooper tests"},{"hash":"e6f6d700054ce30e9455697a39328f5366543096","date":"2016-05-05T19:19:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"note defaults of switches in SimplifyLocals\n"},{"hash":"f81355b2750717584e309699dfcae3c814167578","date":"2016-05-05T19:25:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clear sinkables on unoptimizable blocks, as they have a control flow merge\n"},{"hash":"b0e91ae0c42ddd8fa92408cbfc18e4f25b574acf","date":"2016-05-05T20:44:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make print flags in archive.cpp nicer (#437)"},{"hash":"6ca7e6915aa32e14ddad45d5c0671040ab1885a0","date":"2016-05-05T21:45:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix set_local finalize()\n"},{"hash":"99576530e6067863486dbbacf39b9a8adb98876e","date":"2016-05-05T21:46:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve validator error message on set_local\n"},{"hash":"b39f2dd816cfb518a9327e8df4545556b8ad4c30","date":"2016-05-05T21:52:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add validation to the C api, and fix things that uncovered in the C API tests\n"},{"hash":"b92edd31f2b819f62cd38f49b6feb828cac60b38","date":"2016-05-05T22:43:33.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"[Linker] Make repeated passes over archive members (#440)\n\nAn archive member can depend on any other archive member, so adding a\r\nmember to the link can introduce new undefined references that must be\r\nsatisfied. The linker must continue to iterate over the members until\r\nnothing new is added to the link.\r\n\r\n\r\n"},{"hash":"fae63cb6a26ab5a9cc2fdaa56d778215d1a1fc35","date":"2016-05-05T22:47:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make wasm.js safe in closure compiler (#438)"},{"hash":"1d267ad1ecf7e9fd5ea6b22679beeb82585723f0","date":"2016-05-05T22:47:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #436 from WebAssembly/fix-switch\n\nFix switches in simplify-locals"},{"hash":"4dfa39338f188ff8e70b8b796dc61d89aadfd3b0","date":"2016-05-05T22:54:17.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix LD_LIBRARY_PATH (#441)\n\nIt needs to be concatenated, not overwritten."},{"hash":"727c08faf01da99d57dfe86b3fb0fee9db415f41","date":"2016-05-05T22:54:23.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Fix NaN / 0 (#442)\n\nAs discussed in: https://github.com/WebAssembly/spec/pull/282#issuecomment-217280544"},{"hash":"6ea92a08db051ce3eea56081150caac9432210cf","date":"2016-05-05T23:48:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #439 from WebAssembly/c-api-more\n\nValidation in C API"},{"hash":"b253b083e1fc96434527511b68d6fd07f8d6f233","date":"2016-05-06T00:26:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix breakage on master from #441 (#445)"},{"hash":"07f0bad2540a6023ab7b0029b9532e1d44b41c03","date":"2016-05-06T01:12:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add reading and writing binaries to C API (#443)"},{"hash":"cff4b04d4306e0192c914c2a6281992e2610109c","date":"2016-05-06T18:10:46.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Fix BreakSeeker for switch default targets. (#447)"},{"hash":"5f2b05fd3d03e353e5f461a6d334e2c8e2eadd3a","date":"2016-05-06T20:31:27.000Z","author":{"name":"Adam Smaza","email":"adam.smaza@gmail.com"},"message":"using find_package(Threads) for setting the compilation flags (#390)"},{"hash":"a3b3a516bd8117cd83aa0625839e614110d1fc0b","date":"2016-05-06T22:19:55.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Use rpath instead of LD_LIBRARY_PATH for shared object use (#448)\n\nUse the -rpath linker flag to locate libbinaryen-c.so instead of\r\ninjecting paths into the user's LD_LIBRARY_PATH\r\n\r\nAlso Link libsupport and libasmjs into libbinaryen-c\r\nFixes #444\r\n"},{"hash":"e4d6be7f1a92bd8809777e59583e2d7544b065a0","date":"2016-05-06T23:31:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comments in c api header\n"},{"hash":"ffb9e4b9cfac5091dfe19b9b5215c43bd0f98e72","date":"2016-05-06T23:51:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a return type parameter to call and call_import in the C API. we need it since we don't know the type while building functions\n"},{"hash":"a2cfae4c54ba79d7e8b348da10c77840ca934595","date":"2016-05-07T00:52:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a fuzzer for the relooper through the C API\n"},{"hash":"254601c78a03b2012d42f15d64c51b773a8fbe4c","date":"2016-05-07T01:28:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #449 from WebAssembly/fuzz-relooper\n\nFuzz the relooper through the c api"},{"hash":"40068a9f3c614ba15131a8a90d8586816799f11a","date":"2016-05-07T05:20:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"relooper fuzzing improvements (#453)"},{"hash":"a4eb7ae40abbd0a7b01829edf1ce5e719143089d","date":"2016-05-07T11:47:55.000Z","author":{"name":"John Bentley","email":"john@johnbentley.ninja"},"message":"Added additional files to gitignore.\n"},{"hash":"64532d175bdca6e0ac8699be61ca0133b42c727d","date":"2016-05-07T11:48:02.000Z","author":{"name":"John Bentley","email":"john@johnbentley.ninja"},"message":"Changed empty parameter functions in C API to void.\n"},{"hash":"b80ff5c73351d0e6762d8122914bb6c10bcd8d9f","date":"2016-05-07T17:41:41.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Use more static libraries in the CMake build (#451)\n\n* Factor passes and emscripten-optimizer into static libs\r\n\r\nThis removes the redundancies from the source sets in the main\r\nCMakeLists.txt.\r\n\r\n* Make passes an object lib\r\n\r\n* Use static libs with --whole-archive because Travis has old cmake\r\n"},{"hash":"a3a8ac3af0a36ba35a6723b45340b9d826688951","date":"2016-05-07T23:06:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove obsolete comment from relooper fuzzer\n"},{"hash":"bd90eaea7daae8c57d611becd897b8b5ed395fe5","date":"2016-05-08T00:03:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix block finalize(type) (#457)"},{"hash":"59bf80e9844822698d66ec5cdb8fce963142b7ab","date":"2016-05-08T00:04:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use atomics on MixedArena list generation instead of locking (#456)"},{"hash":"6521cbe4b58ba45eecbc97021c0b434d3cfa958a","date":"2016-05-08T00:37:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #454 from MI3Guy/master\n\nMinor fixes for C API"},{"hash":"b0f8df05f1d4f751629296f48675b46a017f7925","date":"2016-05-08T02:28:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename binaryen-c library to binaryen (#458)"},{"hash":"9c9fb503a8a5ffce9eae4b48cce4b06d41146fc1","date":"2016-05-08T02:51:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix relooper fuzz testcase to be valid old-style c (#459)"},{"hash":"da1b3b84f04113d5ea3b05f21dd30dca0e113ade","date":"2016-05-08T03:01:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use CMAKE_THREAD_LIBS_INIT as a target link library, which unbreaks breakage from #390 (#450)"},{"hash":"f6d5a9df297997af5165ff164cb1609fbc0239e6","date":"2016-05-08T21:12:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Be more careful when loading i64 in wasm-js glue, we had a bug where the bits were trampled before we read them (#460)"},{"hash":"cd73748368e7da8d4f82c4a7aa909b60d7e6d089","date":"2016-05-09T17:16:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests\n"},{"hash":"d6034d9790030efa3f1cb4fce62abba36f014646","date":"2016-05-09T17:36:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor string to binary parsing in s-expression code so that we can use it in more places\n"},{"hash":"795303fcbca40586ed9b0cd3b4406fb3f41a6d34","date":"2016-05-09T17:45:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove wasm2wasm from the build, which was no longer tested and is no longer maintained\n"},{"hash":"aca5642e0d8d17c31c86f6da3dff4256ae53babd","date":"2016-05-09T17:48:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse binary modules encoded in wats\n"},{"hash":"d36b1975100f3c73557fd303d095ee8e57306089","date":"2016-05-09T17:52:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow appending in stringToBinary\n"},{"hash":"7cb38a21e3e1085a39048b20dbbbb5c06f9dc4c5","date":"2016-05-09T17:54:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse binary modules encoded in wasts that arrive in pieces\n"},{"hash":"bc307c19ddca4bef900db3ff9d512bd21a57be60","date":"2016-05-09T18:02:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow error handling in binary parsing\n"},{"hash":"b519fd87f7f1e1adead0ed648f29301303518ff0","date":"2016-05-09T18:07:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add error handling for binary errors in new spec test\n"},{"hash":"1db8ae1f4909b5949a48a2266fce6eef2edd6742","date":"2016-05-09T20:33:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #461 from WebAssembly/spec-update\n\nSpec test update"},{"hash":"ee563858b128512c9fa29eb6a66c8dda8313172c","date":"2016-05-10T22:58:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use an int32_t for BinaryenLiteral in the C API, simpler and good enough since we translate anyhow (#462)"},{"hash":"7ab2885a399f4f8084c92546a82375af598371c1","date":"2016-05-11T15:46:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove no longer supported wasm2wasm tool from readme\n"},{"hash":"0cd4f81442cdeac61ec611d94f381832bdbd361f","date":"2016-05-11T16:03:44.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Add a pass to order functions by their use frequency. (#452)"},{"hash":"fe952e30e5a796a0f5d14c66deb7e6dd237fc402","date":"2016-05-11T16:05:48.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Change NULL to nullptr. Quiet Visual C++ 2015 optimizer errors by using \"!!\". (#465)"},{"hash":"ca5a37818565504ce78f6a807b4f8b7f6ea0b5ba","date":"2016-05-11T16:23:23.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Replace NULL with nullptr. Quiet VS warnings. (#466)\n\nReplace NULL with nullptr. Quiet Visual Studio 2015 optimizer warnings by prepending \"!!\"."},{"hash":"3e526d08aceaba90aa2449e8bc9975dadb047a6c","date":"2016-05-11T17:30:32.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Fix VS warning in Relooper.h (#467)"},{"hash":"20de99e0243cb385e92c74e17a22f23b44b6ad2d","date":"2016-05-11T17:30:56.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Fix VS warning in wasm-validator.h (#468)"},{"hash":"a8af7ade78bf1f0f5c7ba14cb31b6a7495de1a87","date":"2016-05-11T17:31:18.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Fix VS warning in ast_utils.h (#469)"},{"hash":"80764746479e34a982c62e8c4801766836032271","date":"2016-05-11T17:50:15.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Pass sort comparison function arguments by const-reference (#472)\n\nFixes build failure with libstdc++ 4.8"},{"hash":"5a077dc419c97a67455bd5181dac8bbc6008f92b","date":"2016-05-11T17:54:26.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Fix Visual Studio 2015 C++ warning about negating unsigned value by adding typename U in bits.h (#471)"},{"hash":"fe53b91511f29b0dafeb66616481a96afe072317","date":"2016-05-11T18:51:53.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"VS warning fix in c-api-kitchen-sink.c, double constants shouldn't be used as float args (#473)"},{"hash":"9c79f86a3f518c60840b416287a5d26502911ad6","date":"2016-05-11T19:38:17.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall and torture tests to 6423 (#476)"},{"hash":"ac827e35fec84074d9d8141ca2c94ad01ca9c5c3","date":"2016-05-11T22:34:49.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Introduce a separate type for linear memory addresses (#477)\n\nWe've been using size_t (and other things) for addresses, which is\r\ngenerally wrong because it depends on the host, when it should in fact\r\ndepend on the target. This is a partial fix for #278 (i.e. it's the\r\nright fix, I don't think it's applied quite everywhere yet).\r\n"},{"hash":"b048e6e18fba54527f1d9492b6f9f7f764a9c080","date":"2016-05-12T03:16:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests (#478)"},{"hash":"a74dac17dbb9a0a871c8a52a89b6782dc3439238","date":"2016-05-12T18:32:52.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Fix VC warning in s2wasm.h (#481)"},{"hash":"87c583fb258bd373219fdfae3fa181c2d10b56b7","date":"2016-05-12T18:34:31.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Fix Visual Studio 2015 warnings about casting from double to int32_t in safe_integer.cpp (#480)"},{"hash":"a18b153e1940b6e1504084c60f3feca46dfa2870","date":"2016-05-12T21:44:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use exceptions consistently to report input errors\n"},{"hash":"d84fd5be60d4ead6bc9fbb3f27a710bef0c688c8","date":"2016-05-12T21:55:47.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Use a class with implicit overflow checks for Address (#486)\n\nIt includes implicit conversion from u64 and implicit conversion to address_t. This makes it easier to use without ugly casting and but still gets the overflow checks.\r\n"},{"hash":"031f22eb8e84e098afceffa787126d8b6ab79e92","date":"2016-05-12T22:38:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse error details\n"},{"hash":"fb02ea5328089ab92493ec2ca784b0bd635d0c85","date":"2016-05-12T22:38:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"show parse errors in shell\n"},{"hash":"9f4e494a74a0f2d30c4288f20657bc8fac186a4a","date":"2016-05-12T22:41:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"show parse errors in c api\n"},{"hash":"c8293a3f9112ad486f6f3639fc5680d73e7559ca","date":"2016-05-12T23:12:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"show parse errors in wasm-dis and wasm-as\n"},{"hash":"f518f097c80c0659fbacf11fe12f89955093282b","date":"2016-05-13T00:18:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #488 from WebAssembly/error_reporting\n\nBetter error reporting"},{"hash":"4a720eca42c463d53db1c81f9957a3e5d9011836","date":"2016-05-13T00:50:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move console tool sources into src/tools (#490)"},{"hash":"4513ec24ad33a4d0157d562217b310390d9cdb1b","date":"2016-05-13T18:17:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add line and col info in s-parsing errors, and fix an small bug made noticeable by that change\n"},{"hash":"7ccc6a3dcc3b2945e03dff20c6ecb0b6e1074ac4","date":"2016-05-13T18:17:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"break type system fixes, avoid spurious errors on mismatched types\n"},{"hash":"d58c26e37a40ab7fe796c639b6a652fb01b6d109","date":"2016-05-13T18:17:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not error on s-expr comments starting in strings\n"},{"hash":"7861d1558490df98febd4b6498f9bec0b64722ad","date":"2016-05-13T18:17:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support new syntactic sugar of export names on functions\n"},{"hash":"377f1f661d373afe5770d1ff0d3a4772a71ef893","date":"2016-05-13T18:17:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix spurious validation errors on unreachable types\n"},{"hash":"348565b6a9a823c0fee30c96d8d783810d540a78","date":"2016-05-13T18:20:28.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Fix the maximum memory size to be valid. (#492)"},{"hash":"22d10db3a9b04e5c225b0f472c07dba7ce9dc6d3","date":"2016-05-13T19:38:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #493 from WebAssembly/error-improvements\n\nError handling improvements"},{"hash":"311ce634f772886939af75524dee52b955f78a59","date":"2016-05-13T20:31:18.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Disable MSVC warnings about unsafe C runtime functions. (#487)\n\nWe aren't going to switch to MSVC's alternatives for those functions because they aren't portable.\r\n"},{"hash":"6b9ec2184292cd0fa2b0a947e798476a404b2e87","date":"2016-05-13T22:37:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more validation checks\n"},{"hash":"87af1a5002bf7e44b8bcb3b0629645fc3fb23a43","date":"2016-05-13T22:37:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make reinterpret printing more precise\n"},{"hash":"7a2073cad4e532be94d954a00611762630674da2","date":"2016-05-13T22:37:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix binary reinterpret opcode bug\n"},{"hash":"e2250bcb5e35c2382b9bc7fd9da8b7a0efe9a86f","date":"2016-05-13T22:37:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove wasm2asm stuff from auto_update_tests\n"},{"hash":"3a92901ed09535a4fbcbf1dc97a85bd2c40c8df8","date":"2016-05-13T23:30:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test fixes\n"},{"hash":"ee5a2454b7b49b645383754b19f4dfc93ef35014","date":"2016-05-13T23:30:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validation improvements\n"},{"hash":"63bac0a2ec0b22feadf9652a2292ce66ea6174d7","date":"2016-05-14T00:42:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #499 from WebAssembly/validation-fixes\n\nValidation fixes"},{"hash":"ec15c34698d91a3e8d315ee853ca4a9b75ca1373","date":"2016-05-14T01:05:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow not providing a name for function types in c api (#501)"},{"hash":"9f25d3db7fae275160880721cf67a27c89e6a122","date":"2016-05-14T18:03:22.000Z","author":{"name":"JF Bastien","email":"github@jfbastien.com"},"message":"Use typedef instead of explicit type (#503)"},{"hash":"a76a828b7b086d80b6673fa8e87887d84f7c5488","date":"2016-05-15T23:28:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make an instance per function in function-parallel passes, so passes don't need to clean up internal stuff\n"},{"hash":"22686b6bb91361c3ab20e07bc8b9ce17fdac661f","date":"2016-05-15T23:36:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add cfg-building traversal and a pass to coalesce locals using it\n"},{"hash":"0239e3d01cb1c049770e99044516ed0479a0ce48","date":"2016-05-15T23:46:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't create a basic block for a block that has no branches out of it\n"},{"hash":"adfb6372da4286c754d7c3c328950194725533b7","date":"2016-05-16T01:02:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use a sorted vector for live locals\n"},{"hash":"dbeb12e41075f4f271a194a49de6225d569aeb92","date":"2016-05-16T04:21:58.000Z","author":{"name":"BSalita","email":"BSalita@yahoo.com"},"message":"Update c-api-kitchen-sink.c (#504)"},{"hash":"6c3e068a87d81cc10204971706ff848162d4c751","date":"2016-05-16T17:40:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't emit an extra endline in s2wasm (#506) (#508)"},{"hash":"a39994f434a3cb7ce0b05987365e3ad550f03d71","date":"2016-05-16T18:03:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #507 from WebAssembly/coalesce-locals\n\nCoalesce locals"},{"hash":"4d636a67c71548b9e627e747e9ef859252472b84","date":"2016-05-16T18:56:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add timer class\n"},{"hash":"1f86eb85ec0a110528a635cc35a109b826d84523","date":"2016-05-16T18:56:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add optional timing of CoalesceLocals flow\n"},{"hash":"04ee5b924d1cf27a822c9c503cdc519be6c1987c","date":"2016-05-16T19:08:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use an unordered set for the main flow queue\n"},{"hash":"824c2effb943db981b163c77593d30e15ee03021","date":"2016-05-16T21:49:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"debugging improvements\n"},{"hash":"72b196f92b7c326349b0c6053af30dc29f4878f5","date":"2016-05-16T22:36:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"restructure CoalesceLocals to not have everything inline\n"},{"hash":"568ea92489f883094c12b8be33c6b1ec05017bf0","date":"2016-05-16T22:41:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize adding new conflicts from merged starts\n"},{"hash":"e4f97c2dd9cd6b4b2e4e0c2b74b9a73867eca9b2","date":"2016-05-16T22:54:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"canonicalize usage of interference vector\n"},{"hash":"017440afd21551a0ea4d01490e7e0bb963ef53f9","date":"2016-05-16T23:42:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove dead get_locals in vacuum\n"},{"hash":"0a081486bb4eb7e1962a9463cb919ae3deed4d99","date":"2016-05-16T23:44:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run merge-blocks after vacuum\n"},{"hash":"d920c7252da51fba9580648abad16a8a8baee295","date":"2016-05-16T23:46:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #509 from WebAssembly/optimize-coalesce\n\nOptimize CoalesceLocals"},{"hash":"70e761dd4e75f658797457c427e1388dd91f678a","date":"2016-05-17T00:01:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit total in metrics in a way that shows its diffs too\n"},{"hash":"3a01c5d7d1f03fb88d249ca1ecca6325b77e799a","date":"2016-05-17T00:06:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add total vars (non-param locals) to metrics\n"},{"hash":"ec184cc9df650b2b7e047633a407d55a21ba3760","date":"2016-05-17T00:07:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #510 from WebAssembly/vacuum\n\nVacuum improvements"},{"hash":"ed9f3272b911ffb69aec9d0ee854f725a80b3baa","date":"2016-05-17T00:23:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #511 from WebAssembly/metrics-better\n\nMetrics improvements"},{"hash":"f5ad1c2d4488feea9711516fff40602f3f8031bd","date":"2016-05-17T11:31:21.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Quietly extract the waterfall tarball (#512)\n\nVerbose exctraction makes the Travis build much less readable. Also print the\r\nURL before downloading it."},{"hash":"5302ec27da80e035f8f97731fcdddc0421278f14","date":"2016-05-17T11:37:31.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall build to 6633 (#513)\n\nNew expected failures are mostly due to a change in the way the torture\r\ntests are compiled (https://github.com/WebAssembly/waterfall/commit/160171e51dbd37724a11c902b84f8f1fa86e9a4e)"},{"hash":"90d4fa0164ab0fad4ca7b60489c43eebd41ed9e3","date":"2016-05-17T17:49:51.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Fixes wasm-js build after Address and SExpressionWasmBuilder refactoring. (#514)"},{"hash":"d3b2d24fddc1f7aa065a8ea2d324e94fffec2c0f","date":"2016-05-17T18:03:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor index picking\n"},{"hash":"e86d46fb38ece8c35e50bf1f483cac49796a8b39","date":"2016-05-17T18:03:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add genetic learner\n"},{"hash":"700846f46148cc92485c59b37b46272978ab3e42","date":"2016-05-17T18:03:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow inheriting function-parallel classes, add a hook for creation\n"},{"hash":"5d76c53d350cc4565c8c4f4298c8fd346ca8fcb5","date":"2016-05-17T18:04:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a learning local coalescer\n"},{"hash":"92cbfdb2fb58986724bb796489b8138d217ca5f1","date":"2016-05-17T20:42:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #515 from WebAssembly/learn-coloring\n\nSmarter local coalescing"},{"hash":"a76f0a4a17a0da8431e5a0ab2ab3078991460196","date":"2016-05-17T21:31:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"calculate interferences after finishing the liveness flow (#516)"},{"hash":"e420a217b8dd0253379deaae1275209becbc511f","date":"2016-05-17T22:52:56.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Rename $discard to $drop in the .s syntax.\n\nThis is shorter and is more consistent with terminology being used to\ndiscuss WebAssembly.\n"},{"hash":"ecf110239a8cada6de219cee8bd5c7b178c9e51b","date":"2016-05-17T23:02:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"tweak learning index picking\n"},{"hash":"0231f518d830c31545448e515b515eb5bba5ab4d","date":"2016-05-17T23:02:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"learn using multiple generations\n"},{"hash":"748f581e712bb0715f19867af5b251d970c682f6","date":"2016-05-17T23:24:04.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Merge pull request #519 from WebAssembly/drop\n\nRename $discard to $drop in the .s syntax."},{"hash":"7dc410d13171219af8903480539d393979d75b8b","date":"2016-05-18T00:06:35.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Print a newline at the end of the METADATA line. (#521)"},{"hash":"3f137abe061fd060b2c9bbffcb8796144ecbada9","date":"2016-05-18T00:06:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #518 from WebAssembly/true-learning\n\nActivate true learning in local coalescing"},{"hash":"9700fca02229f4c3e15425a2396740384f7736cb","date":"2016-05-18T01:22:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't emit extra unnecessary blocks for loops in binary format (#523)"},{"hash":"4a7080b8dc98422b63dc5db3245029d3f689de15","date":"2016-05-18T04:29:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid deprecated random_shuffle (#524)"},{"hash":"cf224aa34a3660aa5154091759d396936e946b28","date":"2016-05-18T21:24:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"spec test updates, and many validation fixes\n"},{"hash":"b88e9de7df6a8b2ba9381e27dff3aa3dff64f764","date":"2016-05-18T23:38:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use separate internal opcodes for unary variants\n"},{"hash":"9070ff54453bec5e90727cc586b4a702b54628d4","date":"2016-05-19T01:28:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use separate internal opcodes for binary variants\n"},{"hash":"013644bd98de23f0e1c303dd72994956486b455a","date":"2016-05-19T01:28:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finalize s2wasm blocks once at their end, not constantly\n"},{"hash":"d8adcc182d69974096063ad57b50e8fec3fcccf8","date":"2016-05-19T01:56:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"be more careful with checking total memory limit on 64-bit\n"},{"hash":"50c94e3e9fb6cdf043c7841d73299ee8be5d2cbd","date":"2016-05-19T06:11:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"store locals in a vector in the interpreter and update wasm.js. also fix address usage in wasm.js\n"},{"hash":"ce03a34d97b1afa3b7abd88d04bbbaffe346f1d9","date":"2016-05-19T06:25:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #526 from WebAssembly/spec-test-update\n\nSpec test updates, and many validation fixes"},{"hash":"d541e4fdaff224d61c9ff0036d707d423de76ed8","date":"2016-05-19T17:04:11.000Z","author":{"name":"MI3Guy","email":"pcguy49@yahoo.com"},"message":"Added static_cast to prevent direct conversion from subclasses to void*. (#502)"},{"hash":"63c7898825c50fbfce9a0ec54113ab2274c7a077","date":"2016-05-19T18:34:31.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Avoid double dollarsigns in s2wasm local names. (#527)\n\n* Avoid double dollarsigns in s2wasm local names.\r\n\r\nRecognize '$' as part of the .s syntax for register names, and exclude it\r\nwhen forming the wasm local name. This changes names like \"$$0\" to \"$0\".\r\n\r\n* Fix a comment.\r\n"},{"hash":"1f4d6d05d48cf60f6761525942815a8fefc92313","date":"2016-05-19T20:09:21.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Allows running check.py on the Mac OSX. (#517)\n\nAlso tries to cleanup example.dSYM files and hide libbinaryen.dylib."},{"hash":"08abcbb9211cc1452a8b6420d4e160aaad061e01","date":"2016-05-19T22:12:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"vacuum away everything not tied down\n"},{"hash":"322e89791721ce5130242c87eb1c01163f0ad21d","date":"2016-05-19T22:26:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add --no-opt testing to asm2wasm\n"},{"hash":"fe1bda7da797e5586d39122aec931a8a84df4ac7","date":"2016-05-19T22:46:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"vacuum after passes that create garbage; this makes the total time better\n"},{"hash":"579010855a134a78cab8ed129cbbbe52bd52a380","date":"2016-05-19T23:13:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"vacuum the top of functions too\n"},{"hash":"e396635727ca7fd571aa4fd19ba310942767307e","date":"2016-05-19T23:35:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #528 from WebAssembly/vacuum-better\n\nVacuum improvements"},{"hash":"373cfe3a4364d657b04ea9c35e84324e9edec097","date":"2016-05-20T00:05:58.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Allow implicit function returns. (#529)"},{"hash":"244da920eedafec42da4e91b83c09d0021a36a7f","date":"2016-05-20T02:57:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"notice only branches out in EffectAnalyzer, internal control flow can be ignored (#530)"},{"hash":"41d11f1feb622494aeae9f7dd6a0115972b077e4","date":"2016-05-20T17:05:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix loop s-parsing\n"},{"hash":"fe93b86e0e1dd470c3508fa2ef9f3affbf18b146","date":"2016-05-20T17:20:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"in makeMaybeBlock, alloc a nop if there is nothing\n"},{"hash":"e9c7c20ef84fc5a66823b9fa871f54f98a8a714a","date":"2016-05-20T17:38:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"type check loop output type properly\n"},{"hash":"a2f3fbdc80b72fcf04a789e723de7f5561387dcc","date":"2016-05-20T17:48:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"type check return types fully\n"},{"hash":"b28a3a6eba4c4fbe64333dd544977a0c4f37c650","date":"2016-05-20T18:21:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #531 from WebAssembly/fixes\n\nType checking fixes"},{"hash":"89a3fcbc78903d1a904354dd6eb2c4bd1ac44e8e","date":"2016-05-21T03:08:54.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Update s2wasm for LLVM changes, and regenerate tests. (#532)"},{"hash":"5d16d4b3b344aa1dbe07deff0d282adea6f8c369","date":"2016-05-22T22:05:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't depend on asm.js type detection in binary formation in asm2wasm, use the full asm global info we have (#535)"},{"hash":"f5aad6d1614ca32e7ade296dc9bce8c7c74d3f63","date":"2016-05-23T04:23:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"dead code elimination pass (#536)"},{"hash":"a78daa409853b106228d0cca0c5564222c489e04","date":"2016-05-23T12:12:42.000Z","author":{"name":"Dan Gohman","email":"sunfish@mozilla.com"},"message":"Avoid a redundant return in dynCall functions. (#533)"},{"hash":"03d5f2a3d11151887d8c2a1a0ef93011b75979c7","date":"2016-05-23T22:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate in asm2wasm, and fix some validation errors for that\n"},{"hash":"6d280bb282553b5eb832729a42b919c36926ca90","date":"2016-05-23T22:51:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate after running passes in shell\n"},{"hash":"8022c3c1bff02f2c33f37ac1a0566a38e78fbff9","date":"2016-05-23T23:01:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"9a59635c2148511cb72cbd9e1f9cf1026b4a1f3a","date":"2016-05-23T23:50:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix isResultUsed bug with ifs\n"},{"hash":"57ec2122cf0971d7869e56699b768026268745ea","date":"2016-05-24T00:20:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #538 from WebAssembly/asm2wasm-validation\n\nMore validation"},{"hash":"3a993f98daefc9a851824f5099b76b4a427f81ed","date":"2016-05-24T02:59:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a pass to drop return values in set_local and store (#539)"},{"hash":"10d1257f6fa637415b4b4b1becb8055f3d9ea93d","date":"2016-05-24T19:02:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"catch parse exceptions in s-parsing too\n"},{"hash":"ab05c684e570951c39e081cc15fa659296445186","date":"2016-05-24T19:02:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"show a parse error for empty stack\n"},{"hash":"f1384f6c98765de6ac9777ae44661c1a713a6e11","date":"2016-05-24T22:50:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move blocks outside in merge-blocks so that they can be merged later\n"},{"hash":"e89c819e741f3a2059a24b30c8eaa1c8e213b924","date":"2016-05-24T23:07:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #540 from WebAssembly/merge-blocks\n\nMerge blocks improvements"},{"hash":"43a9ecd084b828bb715211d91bf412727ff58cff","date":"2016-05-25T20:16:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests, and handle the new .fail. tests (#541)"},{"hash":"21d93d50b8eba98ca619897528fb707d1b15e265","date":"2016-05-26T00:50:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow passes tests with more than one pass\n"},{"hash":"bbff98549d2c29b050ea1b867c226ec09c9d78f5","date":"2016-05-26T00:51:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix a merge-blocks bug where we merged named blocks\n"},{"hash":"5b6918ec2245a6e3c512dcee45766731b49805cc","date":"2016-05-26T00:54:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a merge-block test\n"},{"hash":"948f6fe7c4d2a9256310c07c54724685f27874ac","date":"2016-05-26T02:26:57.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Add remove unused functions pass. (#463)"},{"hash":"45618ddc8eee4f288a2d11d1afe763dbdeab8559","date":"2016-05-26T02:27:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #543 from WebAssembly/fix-merge-blocks\n\nFix merge blocks on named blocks"},{"hash":"1963afd6894c1f408b65a0f893e009b4e9f36e55","date":"2016-05-27T00:26:36.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Allows parsing of debug information in .S files\n\nCurrently it ignores this information. Also it allows parse files with -asm-verbose=true.\n"},{"hash":"0ffa458ed98c71b8106ff659c3335d0408e1fe28","date":"2016-05-27T00:43:28.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Merge pull request #544 from yurydelendik/parse-debug\n\nAllows parsing debug information in the .S files"},{"hash":"1715b4a1ec845f1dd6b08f48a599f346beb0f758","date":"2016-05-27T04:06:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update functions map in RemoveUnusedFunctions (#545)"},{"hash":"2ae825133430a71e3b16a2699edf08ae63a03d7f","date":"2016-05-28T21:52:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add getBits and not-equals helper funcs for Literal\n"},{"hash":"4c07db98d1d02856549c1478902d4d44ad57c50c","date":"2016-05-28T21:58:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"note number of functions in metrics\n"},{"hash":"5615ca92dd2c3c60bcc13d87cbb20267495a8a89","date":"2016-05-28T22:01:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"canonicalize the order in reorder-locals, by using first-appearance to break ties\n"},{"hash":"b426fda5e43f612ddd122b6aa25a8dd0a549b64f","date":"2016-05-28T22:02:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add hash utility, and support for hashing and comparing expressions\n"},{"hash":"44aeb85b2fa2c743e2d0f7e00349f99cfcbc7639","date":"2016-05-28T23:47:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a pass that eliminates duplicate functions\n"},{"hash":"f33f1dbbee7b3f95d8437f1ee60c9075013858b6","date":"2016-05-29T23:39:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #550 from WebAssembly/dfe-nice\n\nDuplicate function elimination"},{"hash":"fa7573de6c3b17f831217e30745ea1092935eb54","date":"2016-05-30T16:54:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor walk logic into walk* and doWalk* methods, for a more regular API that is clearer where it should be overridden (#551)"},{"hash":"6c1baf1971adaf9f8a393943d4ba31d280e04e77","date":"2016-05-31T21:46:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle duplicate exports in asm2wasm\n"},{"hash":"b43d48965bcb26e2a0388c308d87963e70685186","date":"2016-06-01T02:31:38.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"fix bugs found using afl (#546)"},{"hash":"9e9e6c29f3734c1fa871d36d72fbbe30b6f3f2ae","date":"2016-06-01T17:42:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle stack frames we skip over by jumping up the stack, and update wasm.js\n"},{"hash":"208959079a9c4b97a2457e8d6b11c5bc295c0754","date":"2016-06-01T17:53:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #552 from WebAssembly/dup-asm2wasm-exports\n\nasm2wasm regression fixes"},{"hash":"031c55702bd3770cbf014b7f834e8765dd22a158","date":"2016-06-01T18:11:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"note default in type checking of switches\n"},{"hash":"f740552daa7c717f3cc0c3c266fa84549b0f203d","date":"2016-06-01T18:42:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"invalid break labels are parse errors\n"},{"hash":"db2ae40be2c52c0821da355285384aa0db8fc948","date":"2016-06-01T19:33:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if we use the zero-init value of a local, we cannot coalesce it with a param (#556)"},{"hash":"ee909d82d0e5f7f11d280df44b4c27f15eae0404","date":"2016-06-01T19:34:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #555 from WebAssembly/spec-test-fixes\n\nSpec test fixes"},{"hash":"9087f362507bdf7a033c3d3b24baba1318689877","date":"2016-06-01T19:49:46.000Z","author":{"name":"Sven-Hendrik Haase","email":"svenstaro@gmail.com"},"message":"Specify version of python interpreter (#547)\n\nWithout this, the script won't work on distros that use python3 by default."},{"hash":"d595e89003dc3636952de4c561679e3a077e6015","date":"2016-06-01T20:23:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"missing test file\n"},{"hash":"d4dc216888d5028f41e6189e65001694e49a66c2","date":"2016-06-02T21:30:30.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Generate thunks for address-taken imports (#554)\n\nUnder emscripten, C code can take the address of a function implemented\r\nin Javascript (which is exposed via an import in wasm). Because imports\r\ndo not have linear memory address in wasm, we need to generate a thunk\r\nto be the target of the indirect call; it call the import directly.\r\n\r\nThis is facilited by a new .s directive (.functype) which declares the\r\ntypes of functions which are declared but not defined.\r\n\r\nFixes https://github.com/WebAssembly/binaryen/issues/392"},{"hash":"803a9f108d750eff57e9f88e3fadd48308acefc8","date":"2016-06-02T21:59:16.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall to 7426 (#559)\n\nAlso update torture tests.\r\nThis brings in a clang with the compiler-rt libraries, for\r\nhttps://github.com/WebAssembly/binaryen/pull/557"},{"hash":"b37bd96ea3345cf7015e9e925e0d33524cd1c3db","date":"2016-06-02T23:05:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Use clang from the waterfall (#557)\n\nThis avoids relying on clang from llvm, which sometimes is down (see #553)"},{"hash":"c8a57dee5e9c99c51433f3d08da3edc2aadb0140","date":"2016-06-02T23:06:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an option to run passes on individual functions, and to get default optimization passes suitable for that, or not. refactor visitFunction/Module for this.\n"},{"hash":"bed10e24a9a1818e8583a1f3b30a6dfdd3b57bfa","date":"2016-06-02T23:06:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor a getNumCores method\n"},{"hash":"e4a81f9ea487441e0c01f399d15026672fdeadf9","date":"2016-06-03T01:46:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add OptimizingIncrementalModuleBuilder for faster incremental module building + optimizing\n"},{"hash":"f64e1852dc065c17d7c78b43a7cfb7fbe64e3cb4","date":"2016-06-03T03:20:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #560 from WebAssembly/func-running\n\nOption to optimize while building modules"},{"hash":"e2a6ee77c6acf518036259ca11c18e9abc834b19","date":"2016-06-03T17:27:03.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix leak of FunctionType from parseFuncType when not already in the module (#563)\n\nPass ownership into the wasm module."},{"hash":"f0e79fc18be7013f43f79317836dc71d623c40d6","date":"2016-06-03T17:48:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add nm pass, that prints function names and sizes (#562)"},{"hash":"cfc0029a95c8be562a595adb507b0aa171f01a31","date":"2016-06-03T19:16:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check calls more carefully in validator\n"},{"hash":"eb0ce0ea23ae6d74da3d2d805faf37ce8aeb8b8e","date":"2016-06-03T20:29:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check locals in s-parser\n"},{"hash":"4f323502ff00e0ca4a45759ed958f508812a7781","date":"2016-06-03T20:40:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve some parsing error texts\n"},{"hash":"eafdf9dc78e858b6d823771a2add8302564d93ef","date":"2016-06-03T20:52:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"trap on invalid call_indirects with bad arguments when no type provided\n"},{"hash":"74bc353d4fedd9fff308aecfae183b6b7525c7d3","date":"2016-06-03T20:52:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check function types in s-parsing\n"},{"hash":"1826f4132d52a1c767f012fad5d1ab3e746e632b","date":"2016-06-03T20:53:53.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall to 7268 (#566)\n\nAlso update torture-s tests.\r\nThis brings in the .functype directives and causes 2 more tests to pass.\r\n"},{"hash":"b76818e23eab75876f1981800ef12d55ce2f579b","date":"2016-06-03T21:21:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #567 from WebAssembly/spec-test-update\n\nMisc fixes for new spec tests"},{"hash":"f6b5c1e5c1c0de26fd078d336782508dd0186820","date":"2016-06-03T21:55:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move function parallelism to pass and pass runner, which allows more efficient parallel execution (#564)"},{"hash":"c8ec0cd6c053f9e68daf4ba4fdf8137957c1b236","date":"2016-06-03T22:48:53.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Do not generate duplicate import thunks at link time. (#569)\n\nPreviously every address-take of an import would cause a new thunk to be\r\ngenerated. Now check in getImportThunk if the thunk exists already and\r\njust return it if so."},{"hash":"b6668d8ca5b08bdf69f057ecdc6ad8a588429761","date":"2016-06-03T23:31:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make call_indirect type a name, so that it is not a dependency on the module, which would break consistency and make some parallel passes tricky (#568)"},{"hash":"ca46b0772a8e7bb8d2237a27dcf538117842def4","date":"2016-06-04T18:37:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if we start to parse an s-string and find it empty, that is invalid #570 (#571)"},{"hash":"1a4c50e562cf5ed1e18e2bbbf6eec839cf4d28f2","date":"2016-06-06T17:03:32.000Z","author":{"name":"Alexander Meißner","email":"AlexanderMeissner@gmx.net"},"message":"Fixed missing type assignment of host operations in s2wasm (#572)"},{"hash":"208d1806972d20f22f76ab3a880310d3104d1603","date":"2016-06-06T18:10:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle breaks to the function's implicit block scope (#573)"},{"hash":"74906514eed3196212b370f09946ba76d1fccee3","date":"2016-06-06T22:53:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix if type; if one is none and the other is concrete, still none (#575)"},{"hash":"3bec8b4c39d86c165fd80a7c046bceaa7ffbc54f","date":"2016-06-06T23:05:39.000Z","author":{"name":"Peter Jas","email":"necmon@yahoo.com"},"message":"Updated .gitignore for VS meta noise (#576)"},{"hash":"71f276cecc03a1af68a9bc349df9ba2d23c85ea3","date":"2016-06-09T04:30:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a pass to remove memory segments (#580)"},{"hash":"59542c98459771905ef25c5fe48079f3353d6869","date":"2016-06-09T04:31:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use WASM_UNUSED in some places to fix compiler warning/error on unused variables we only use in asserts (#579)"},{"hash":"996262dcdb88388717aab72bd8f37841aaabb24c","date":"2016-06-10T20:08:58.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"s2wasm: Validate the result module (#574)\n\nAdd an s2wasm option `--no-validate` to disable validation for debugging purposes.\r\nAlso fix several validation errors by adding calls to `finalize()` after creating expressions, and ensuring that an import is created earlier in `Linker::getImportThunk`."},{"hash":"a3c339c259d0dafc87fac565fac308e9699726f9","date":"2016-06-12T00:31:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix br_if with value optimization in remove-unused-brs\n"},{"hash":"9a4007e0ba7a77e1eed742278cd24a3914daae30","date":"2016-06-12T00:42:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run remove-unused-brs after simplify-locals\n"},{"hash":"24fa19071d309c59eee5c2bd966139eaab45b5ba","date":"2016-06-12T02:21:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #583 from WebAssembly/br-more\n\nFix and improve br optimizations"},{"hash":"8f524e8f926b6993878f02334e730fe5f65096f6","date":"2016-06-14T18:32:10.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Add mode to wasm validator to check for web-environment constraints (#584)\n\nIn the web embedding, modules are not allowed to import or export\r\nfunctions which have i64 params or return values. Add a mode to the\r\nvalidator to check for this, and add flags to s2wasm and wasm-as to\r\nenable or disable this check. Also add tests.\r\n"},{"hash":"6fdd9dd2137a563bc41a85cf45178cc734e499a2","date":"2016-06-14T22:46:30.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Do not create dyncall thunks for functions with i64 results or params (#586)\n\nDyncall thunks are meant to be used with emscripten on the web; however\r\non the web, functions with i64 results or params are not allowed to be\r\nexported.\r\n"},{"hash":"fe8e92e1a8bb3079a9f13e007022536836bd6b58","date":"2016-06-17T15:22:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix interpreter on indirect calls, do arguments before checking and doing the call (they might flow)\n"},{"hash":"873a1d5db152530f089a009aa4ce8005c3bd9e07","date":"2016-06-17T15:40:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix an assert to a proper error, in bad func decls\n"},{"hash":"40a40a9bf6dd5385dfa703e98a376222f03882aa","date":"2016-06-17T15:41:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support parse errors in .fail. tests\n"},{"hash":"ec931e717a07dc21f22ac543ab0fe5af78879cc8","date":"2016-06-17T16:01:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #589 from WebAssembly/spec-fixes\n\nSpec fixes"},{"hash":"d82816166d9cfb7912368af20dffe8b8ffa5e7cf","date":"2016-06-18T16:46:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor interpreter code to provide expression executors for both standalone and full funtime execution\n"},{"hash":"e85c594b0a8897da88d976859159db7f2d994b61","date":"2016-06-18T16:51:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a precompute pass\n"},{"hash":"d6bda73f13fe17434f3bd78b58da6961d297361a","date":"2016-06-18T16:55:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run precompute after every optimize-instructions\n"},{"hash":"b06555e330e48a42918492086cbf4b24353ed62d","date":"2016-06-18T17:27:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #590 from WebAssembly/precompute\n\nPrecompute expressions at compile time when possible"},{"hash":"0b19905878d0a34964163431257284ed380dc5bc","date":"2016-06-18T21:12:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update readme with links to new talk (#591)\n\n"},{"hash":"509319ac42a18b5a120ae9e45daac624affc07e1","date":"2016-06-18T21:49:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support -o in binaryen-shell (#592)\n\n"},{"hash":"52821472b93e551375b8df43cc1b8a7bfc18e8f5","date":"2016-06-21T20:34:39.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Build fixes/workarounds to support Visual Studio 2013 build, which has trouble with some new C++11 constructs. (#581)\n\n"},{"hash":"cd788a1a62025fed3832672cb539dda4c4ce1329","date":"2016-06-21T23:03:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test only c api examples; c++ api is internal and unstable, it is tested by our own codebase\n"},{"hash":"41689a5dde63c96eb1bf7daf50bc192979aa0452","date":"2016-06-21T23:44:14.000Z","author":{"name":"Jukka Jylänki","email":"jujjyl@gmail.com"},"message":"Add initialization functions for passes to avoid missing pass registration due to linker dead code elimination. Fixes #577.\n"},{"hash":"463bef3f8afeadb658612896384cc439897533a0","date":"2016-06-22T00:11:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #593 from WebAssembly/remove-div0\n\nExplicit registering of passes"},{"hash":"a654dc03933af4e6ff5f3b992300474263afbc26","date":"2016-06-23T20:12:54.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"make assertion error more useful (#597)\n\n"},{"hash":"51e7034690b3db8b18b2dee59e896181cf2eca24","date":"2016-06-23T20:13:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"prefix make_unique in binaryen_shell for visual studio workarounds (#595)\n\n"},{"hash":"ed4e614430e8864c9f02508f5920c45fd137faf1","date":"2016-06-24T19:00:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add BinaryenExpressionPrint to c api (#599)\n\n"},{"hash":"a88f8f275e068d6cdfb8879dc3bab1fe3201efbc","date":"2016-06-24T20:06:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finalize blocks properly in relooper (#600)\n\n"},{"hash":"c410d93d3af9813f889b4011f964d4becf43bc27","date":"2016-06-25T19:03:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add c api method to interpret a module, calling its start method (#601)\n\n"},{"hash":"0da770d9660919b03553374d36ce1d5ca93cf78f","date":"2016-06-26T17:00:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add shared-constants.h for wasm constants\n"},{"hash":"5f6b81a8c75eab046eb38b41f501cb604a5aab52","date":"2016-06-26T17:00:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add ExpressionAnalyzer::flexibleEquals\n"},{"hash":"287f85e3e8c247dcec669f1169b8929e095b3dc9","date":"2016-06-26T17:00:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"expression copying utility\n"},{"hash":"4ad7b4317d77c161cab69f5ae2b52b1583c96f11","date":"2016-06-26T17:04:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make makeCallImport more similar to makeCall; do not assume all imports exist, let functions be created in a way independent from global state\n"},{"hash":"87f3020cf4e666a6eb6620106e48ee042cd2f666","date":"2016-06-26T17:05:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rewrite OptimizeInstructions to use a dsl of patterns\n"},{"hash":"45b358706c86415c5982f9e777fa9e19a33b27a3","date":"2016-06-26T18:00:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #602 from WebAssembly/dsl-nice\n\nUse a DSL in OptimizeInstructions"},{"hash":"29afb7a67fafb7b6325d5e8f60d37be0f65b0cb0","date":"2016-06-26T20:39:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make creating functions and types parallelizable in c api (#603)\n\n"},{"hash":"6f0609ae19a3124010eaceba17de02c026cbb9df","date":"2016-06-27T23:05:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify wasm-builder: it has an allocator, and should never need to access a module (#605)\n\n"},{"hash":"e26a90b337fbf31b62276afb8eb3a561544cf840","date":"2016-06-27T23:49:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid exceptions in Precompute pass (#606)\n\n"},{"hash":"04fa143e85bc870c80c50aa57cdbce833df0aa2d","date":"2016-06-29T14:24:17.000Z","author":{"name":"lqd","email":"remy.rakic@gmail.com"},"message":"Add the option to build libbinaryen as a static lib (#610)\n\n1) the option is OFF by default\r\n2) cmake -DBUILD_STATIC_LIB=ON .triggers it"},{"hash":"854f4d98e0d35bf129ab07e1c147dbb4db39a51c","date":"2016-06-29T17:10:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update emscripten submodule\n"},{"hash":"4ab71c88f4b25cb456f43b58bd8f30e8444206a9","date":"2016-06-29T18:16:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix wasm interpreter bug on checking indirect call params\n"},{"hash":"a0fcba4f5f188268f8f1b4dc659cf63ec6aa1ffd","date":"2016-06-29T18:16:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve validator errors\n"},{"hash":"b182295345c10f6e19226fc6bee19ff7e7194f4d","date":"2016-06-29T18:19:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js, and stop optimizing in asm2wasm in wasm.js\n"},{"hash":"b3cd0621ff58d6a6e02c77ab29caa6efec097988","date":"2016-06-29T18:50:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't do asmjs tests on all wasm.js tests, the one hello world is enough\n"},{"hash":"b7420eb7b37a589c7fc2fb3a59d91a36c19e6dcb","date":"2016-06-29T20:28:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #611 from WebAssembly/updates\n\nUpdates"},{"hash":"b1975e28f0f188191e0588c5ad2f6a4a774128c6","date":"2016-06-29T23:28:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm optimizes functions before they are all built, so we cannot rely on nodes staying the same for fixups. Do a proper fixup at the end (#612)\n\n"},{"hash":"44290db4fc014c8e032fb61f95ca9805d2ce57bc","date":"2016-06-30T23:45:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parallelize asm2wasm fixups (#614)\n\n"},{"hash":"ef93042503a61e5a051536ba7f02b41fffcd69bc","date":"2016-07-02T17:05:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Relooper switch support (#617)\n\n* support switches in relooper and c api\r\n\r\n* update relooper fuzzer for switches\r\n"},{"hash":"8a1f1de079e9098df8ba2f51c108ea63f9707106","date":"2016-07-05T17:26:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add parse error on array misindexing\n"},{"hash":"0f8430da631fe3292d5ac50354a9a94fbef37308","date":"2016-07-05T17:39:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"quote names in s-format that need it\n"},{"hash":"50eff30d0ccda99dc2af71c1636f782cdf9dafa6","date":"2016-07-05T18:17:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Printing fixes (#619)\n\nPrinting and parsing fixes"},{"hash":"05d7bd3028793de007043eacc6e73b1c0cedb7ba","date":"2016-07-06T16:23:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate set_local types against the function #618 (#620)\n\n"},{"hash":"d4d55f9c45740df17f9fc2896e54378c2561d58a","date":"2016-07-06T18:33:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print line numbers when running tests in shell\n"},{"hash":"5287706104bc07394e64bd73b1e1ddbc06b957b5","date":"2016-07-06T18:50:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix parsing of large ints\n"},{"hash":"fa050b2f9c1e4b68c5067487515d1f67ae9bf9cf","date":"2016-07-06T18:50:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests, and handle some flux in call_indirect in upstream\n"},{"hash":"9455a8749e1bb2c4788c37495b9cd319f046f6ff","date":"2016-07-06T20:10:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #621 from WebAssembly/spec-update\n\nSpec test update"},{"hash":"b8685c30fc9b566cf0fcc397334e5e0fb20a2ecd","date":"2016-07-07T17:23:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a relooper test for duff's device, showing irreducible control flow and helper var use\n"},{"hash":"4215d5f76f151fe2c4609db7f6041c4354851af3","date":"2016-07-07T18:06:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clarify the local/var/param distinction\n"},{"hash":"e74dcc425dfb95bbf0bb296fa0d6c4494355b6e1","date":"2016-07-07T19:49:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #622 from WebAssembly/duffs-device-test\n\nAdd a relooper test for duff's device, and c api improvements"},{"hash":"7f4c1297eef1b5d846acbb52ad8ea9e4cb807683","date":"2016-07-11T19:42:21.000Z","author":{"name":"Peter Jas","email":"necmon@yahoo.com"},"message":"Add appveyor.yml for Windows CI (#623)\n\n* Added jobs for MinGW (64 bit) and MSVC (32 and 64 bits) with Release\r\n  configurations as well as MSVC (64 bit) with Debug configuration.\r\n* Added badge to README."},{"hash":"8c2ef78baf1bd93afe48a9112eda56aea6cb884d","date":"2016-07-11T20:52:19.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Fix Appveyor badge URL to be unambiguous (#626)\n\nThe URL using the name of the GitHub project only works if no other appveyor project is using that github repo; that is apparently not true now. So use the unique URL for the WebAssembly appveyor account's project, and use the status of the master branch instead of the global status."},{"hash":"8e936ce0635b66a3b2754292bab7c6c262b0bb1f","date":"2016-07-11T21:29:59.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"add support for symbol assignments, closes #4422 (#615)\n\nAdds support for aliases to objects, to go along with the existing support for aliases to functions."},{"hash":"6bb2deb73d48e3d0a773bc6018fb02aa8e36e48d","date":"2016-07-12T20:53:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix relooper leak\n"},{"hash":"91e38285dc27e5dbac3291258342835fc3e90eab","date":"2016-07-12T20:53:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a tracing option to the c api, which logs out a runnable program from c api calls\n"},{"hash":"f050b6300ceb6039d608abc20939ebf241378cdc","date":"2016-07-12T20:53:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow multiple traces\n"},{"hash":"9d9211beb0c1b1d66232eefba74b11987d02bbcc","date":"2016-07-12T20:53:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"relooper tracing + fixes\n"},{"hash":"43ae9d622a33ca6ede829524a99bdec9f6b2bfc6","date":"2016-07-12T20:56:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"cd707e8ef504cca1e1a6a73580672af14bc40d38","date":"2016-07-12T22:00:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #627 from WebAssembly/trace-c-api-nice\n\nAdd a tracing option to the c api"},{"hash":"a5e2d3a40690e2a258e7e7b13edd6ba37230a7de","date":"2016-07-12T22:15:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle param overloading in asm2wasm ffis (#629)\n\n"},{"hash":"1a07fc4cc4f729b116d41e6ea4a6a22207af53b8","date":"2016-07-13T16:03:35.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"Handle aliases without size (e.g. weak symbol), add redefinition warnings (#630)\n\n"},{"hash":"9d3801039d2e2f9738d2c4829ee59aa047da1cc6","date":"2016-07-13T18:46:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"rename binaryen-shell to wasm-shell\n"},{"hash":"bb8a2aa3e5b02e297a2ef79131a511efe21d78d8","date":"2016-07-13T18:54:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Don't emit empty array literals in trace output (#631)\n\n* don't emit empty array literals in trace output\r\n"},{"hash":"9e2f21c9aa1993325b5a7043d206e2baf07e9180","date":"2016-07-13T23:07:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"separate wasm-opt out from wasm-shell: opt optimizes, shell runs wast shell tests\n"},{"hash":"1cc8b854d6f32f44a2f60b3e090a805954e6377c","date":"2016-07-13T23:08:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use with-open\n"},{"hash":"b0fc363b3a86ade1b5da54b3452bf00568b5b360","date":"2016-07-13T23:08:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate properly in wasm-opt\n"},{"hash":"5936f053848a7e878096158e207f4e59fbd62ab6","date":"2016-07-13T23:30:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #632 from WebAssembly/too\n\nTool renaming and refactoring"},{"hash":"4994da80284c337e5395ad836948ee38ffb967f1","date":"2016-07-14T16:32:58.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"Fix waterfall submodule (#634)\n\nThis brings in the updates for the renaming of the binaries from 5936f05"},{"hash":"e4f99f6c81a5f23318787adba6fea1137dc755bb","date":"2016-07-15T00:59:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit safe calls for i32 div/rem when in precise mode in asm2wasm, as they can trap (#637)\n\n"},{"hash":"8364330269151591f435ea0328aeee1c34decf79","date":"2016-07-15T17:48:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't simplify using de-morgan's rules on floats, because of nans (#638)\n\n"},{"hash":"184cc11cee2a65d30c7696eb3284e132099e4acb","date":"2016-07-15T20:19:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"eq/ne are ok to optimize even if they are nans (#640)\n\n"},{"hash":"ce8ee20462a465f00520dbe0dd2aa3e1601f4ca1","date":"2016-07-16T21:45:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix unreachable constructor without allocator (#643)\n\n"},{"hash":"8597c85a6066bb2f814f5ab821d307d415493c58","date":"2016-07-16T22:51:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix dce bug in non-parallel mode, which happens in debug mode, and add debug testing\n"},{"hash":"07170478897c81aa973217ae8070d2d155d16b2e","date":"2016-07-16T22:59:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make sure to create instances of function-parallel functions, even in debug mode\n"},{"hash":"cd61f6a1ae959cc3ee22f4e72f0f4ba73c2abbd1","date":"2016-07-16T23:27:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #644 from WebAssembly/fix-debug\n\nFix dce bug in non-parallel mode, which happens in debug mode"},{"hash":"52497a2f34cb3cf98afe706f57e9a60d8ab4990d","date":"2016-07-16T23:28:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize to remove as many copies as possible in coalesce-locals\n"},{"hash":"0c7476b4e1e1d6312c2c56021eb31cb12fbe350e","date":"2016-07-17T18:13:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"try natural and reverse order in coalese-locals\n"},{"hash":"6fab89853edd16f2a0e1d31e753c6339cda751a5","date":"2016-07-17T21:50:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize types in CoalesceLocals\n"},{"hash":"4a6e828989ab6f627e6b35c66bd8c6130c9d65e2","date":"2016-07-17T22:31:49.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize updating of interference and copy table in CoalesceLocals\n"},{"hash":"9f0c103be14144488c9bc64823d63e2c398eaa6e","date":"2016-07-18T00:17:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #645 from WebAssembly/coalesce-copies\n\nOptimize to remove as many copies as possible in coalesce-locals, and other opts"},{"hash":"4fcd68852b622e59da22af02f974ea840ebc92e9","date":"2016-07-18T19:18:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update relooper fuzzer\n"},{"hash":"1335cf78817d993a50c62a1c6395ffb35d0a0c63","date":"2016-07-18T19:18:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove some old code in relooper\n"},{"hash":"8ae76ea9554267a5cf482b7f0443080656e13a5a","date":"2016-07-18T22:31:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove an unneeded param in the relooper\n"},{"hash":"6f5062bc67c775f2bf9b5dfd80f57adb541783fc","date":"2016-07-18T22:38:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor calling of MakeMultiple in relooper\n"},{"hash":"24a0f28153c65db7f489f3b6c4e3f5457f8eb1c0","date":"2016-07-20T00:18:34.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update .gitignore and README.md from wasm-shell/wasm-opt split (#647)\n\n"},{"hash":"9528fd93bb1317b9e22973b415b06326271dfd45","date":"2016-07-20T18:16:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve a validation error\n"},{"hash":"b5642384c47ddb33187868e1d4cfc002797b2111","date":"2016-07-20T18:16:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add more relooper testing and improve existing\n"},{"hash":"97ad14b01a9fccf1c52e79468b7983c16e0693a8","date":"2016-07-20T18:40:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid label variable usage in relooper for forward branches, just use a stack of blocks for them. after this change, only irreducible control flow should cause label variable usage\n"},{"hash":"5e9058c9b108298406da7474c524e8d452431710","date":"2016-07-20T22:45:21.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall to build 8774 (#649)\n\nAlso update torture test .s files"},{"hash":"56901f8cb6fb6db4622937479d3a375744289ff0","date":"2016-07-21T02:32:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove unused labels from loops too, and general clean ups for RemoveUnusedNames\n"},{"hash":"fa60ade30e03c6a13bbce26ff81c03ed1ae4da0b","date":"2016-07-21T03:05:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more RemoveUnusedName opts: merge names when possible, and do block/loop merging based on their names\n"},{"hash":"12abb63203788cba23f5c65a971a2af922e05bfc","date":"2016-07-21T04:31:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #648 from WebAssembly/relooper-opts\n\nRelooper improvements"},{"hash":"fdbba5eb702a945c0a72ae5c4ab00c5579730f4a","date":"2016-07-21T23:07:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support wasm globals (#650)\n\n"},{"hash":"b17a18ada8a6b4bdc8fcd9957f88f566bcbfa766","date":"2016-07-22T19:42:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"binary support for wasm globals (#652)\n\n"},{"hash":"3dc2e2579199fb0457846a22b3759ef16531b3da","date":"2016-07-22T23:39:57.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"Fix trailing whitespace, single-character strings, checking map element presence, and eliminate explicit index counter (#633)\n\n"},{"hash":"cffbc4bc36f5e5f53e34f16ba4e687fdf130131d","date":"2016-07-28T21:16:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wast function type name desugaring is changing in spec:301 (#654)\n\n"},{"hash":"4268555dfd7887ff1110fb02717807f42616125e","date":"2016-08-02T03:36:43.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"update gitignore for autogenerated test files (#657)\n\n"},{"hash":"959bc7638aebb27fcdf7079daf0d0cafe845f56a","date":"2016-08-03T01:01:26.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"support pre-assigning indexes for functions that are called indirectly (#616)\n\nThis patch adds support for an \".indidx\" primitive that pre-assigns table indexes for functions that are called indirectly. It is used by the upstream LLVM WebAssembly backend to support fine-grained control-flow integrity for indirect function calls by emitting instrumentation at each indirect call site to check that the destination index is within certain ranges that correspond to disjoint equivalence classes of indirect call targets. The reason that this primitive is necessary is because the layout of the table section isn't determined until the WebAssembly linker is executed, but indirect function to table index mappings need to be known when opt is executed to generate the correct range checking in the LLVM IR."},{"hash":"e45b9a772f2e25cca99fcff9e0decaf7580a3236","date":"2016-08-03T22:26:00.000Z","author":{"name":"Dominic Chen","email":"d.c.ddcc@gmail.com"},"message":"Create a dummy function to prevent NULL miscomparisons, if necessary (#658)\n\nResolves WebAssembly/spec#312"},{"hash":"e8da13d1e4d0b553ef103d196e83a93f0e64ed8a","date":"2016-08-04T21:32:09.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall build revision to 9397 (#662)\n\nIncludes torture tests and new expected passes"},{"hash":"49b99e6675424ff0866a670ed83f2393330198dd","date":"2016-08-05T15:41:48.000Z","author":{"name":"Heejin Ahn","email":"aheejin@users.noreply.github.com"},"message":"Fix a parsing bug introduced by #615 (#661)\n\nName lhs = getStrToSep();\r\nif (!skipEqual()){\r\n  s = strchr(s, '\\n');\r\n  if (!s) break;\r\n  continue;\r\n}\r\n\r\nThe above code snippet introduced by #615 has a bug when there is only\r\none word (e.g. \".text\") in a line. If there is only one word in a line,\r\nskipEqual() also skips the newline character at the end of the line, and\r\nstrchr(s, '\\n') moves the cursor to the end of the next line,\r\neffectively skipping the whole next line.\r\n"},{"hash":"8e8c311aaeecf9b5433e4a651585914465731f0c","date":"2016-08-09T03:47:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"in DemoteFloat64, if the truncated value is exactly at the limit, return it (#665)\n\nand update spec tests"},{"hash":"1448c6bb26a60b26e70f7e913e56e0d0bf03b5da","date":"2016-08-12T04:02:33.000Z","author":{"name":"Heejin Ahn","email":"aheejin@users.noreply.github.com"},"message":"Implement asm.js style exception handling for Wasm (#664)\n\n* Implement asm.js style exception handling for Wasm\r\n\r\nConverts invoke wrapper names generated by LLVM backend to real invoke wrapper\r\nnames that are expected by JavaScript glue code.\r\nThis is required to support wasm exception handling (asm.js style).\r\n\r\nLLVM backend lowers\r\n  invoke @func(arg1, arg2) to label %invoke.cont unwind label %lpad\r\ninto\r\n... (some code)\r\n  call @invoke_SIG(func, arg1, arg2)\r\n... (some code)\r\nSIG is a mangled string generated based on the LLVM IR-level function\r\nsignature. In LLVM IR, types are not lowered yet, so this mangling scheme\r\nsimply takes LLVM's string representtion of parameter types and concatenate\r\nthem with '_'. For example, the name of an invoke wrapper for function void\r\nfoo(struct mystruct*, int) will be \"__invoke_void_%struct.mystruct*_int\".  This\r\nfunction converts the names of invoke wrappers based on their lowered argument\r\ntypes and a return type. In the example above, the resulting new wrapper name\r\nbecomes \"invoke_vii\".\r\n\r\n* Address comments\r\n\r\nChange variable names to camelcase\r\nAdd a small (semi-)handwritten test case\r\n\r\n* Export malloc and free from wasm when available\r\n\r\n* Add a test case for exporting malloc/free feature\r\n\r\n+ cosmetic 'file' name change in text_before_type.s\r\n\r\n* fixInvokeWrapper -> fixEmExceptionInvoke\r\n\r\n* Add a TODO\r\n"},{"hash":"79029eb346b721eacdaa28326fe8e7b50042611c","date":"2016-08-13T00:15:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parsing fix in compiled-to-js parser (#669)\n\n"},{"hash":"7e3917884152eda021cff9107b5f789aee92fb1b","date":"2016-08-13T03:16:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support expressions in segment offsets\n"},{"hash":"35bd9109ab07aa21f9e55214a61390fa61c93638","date":"2016-08-13T03:16:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support function table initial and max sizes, and new printing format\n"},{"hash":"086c4c0f89bbe626f4c98ae95716084db0541b0d","date":"2016-08-13T03:16:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"113efcaa1e814304662ccc56312d8c59014a3a6c","date":"2016-08-15T22:03:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"offset support in table\n"},{"hash":"7851e3a7a3bea679f422116862c5801f1938806d","date":"2016-08-15T22:03:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js\n"},{"hash":"e268d939b86d8639d014b8036e7664d66b6a32e9","date":"2016-08-16T01:07:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"interpreter debugging fixes (#672)\n\n"},{"hash":"e5e3bf39f25ed3a2fb45a9ca1f55d6828d81a3eb","date":"2016-08-16T16:40:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #668 from WebAssembly/tables_n_memories\n\nTables and memories"},{"hash":"5e87de50ae9be4a3348623b7dc9c7d9cd7054fd9","date":"2016-08-18T23:30:07.000Z","author":{"name":"Seth Samuel","email":"seth@airtime.com"},"message":"Update README.md with full hello_world.asm.js source\n\nThis tripped me up as a complete beginner, since I had copied out the example code from the README rather than the test file."},{"hash":"e168e2b9b6dd099c97c7ec313c3062d80fa1a9a8","date":"2016-08-19T00:03:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #677 from sethsamuel/patch-1\n\nUpdate README.md with full hello_world.asm.js source"},{"hash":"eb15a35ecbe2acd3437cff474686df8fde9bf42a","date":"2016-08-25T18:06:27.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"Replace std::unique<T>(new T()) with make_unique<T>().\n\nThis commit modernize the code base by replacing:\n\n    std::unique_ptr<T>(new T(...))\n\nwith:\n\n    make_unique<T>(...)\n\nor:\n\n    wasm::make_unique<T>(...)\n\nThis is a step closer to adopt C++14 std::make_unique<T>(...).\n"},{"hash":"a08643d788dd025345c63798f2e3ed7ca9b12e06","date":"2016-08-25T18:09:35.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"Remove unnecessary type cast.\n\nstd::thread can forward the arguments to main function properly.  We\ndon't have to cast them from/to void*.\n"},{"hash":"a008d4fd7af3b04a3d351a03d56df7c28998690e","date":"2016-08-25T18:47:00.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"Fix asm2wasm dead lock caused by empty modules.\n\nThis commit fixes an asm2wasm dead lock when asm2wasm is compiling an\nempty module, i.e. a module without any functions.\n\nWithout this commit, worker threads are likely to leave `workerMain()`\nand decrease `liveWorkers` early.  Consequently, `waitUntilAllReady()`\nwill never observe `liveWorkers == numWorkers`.\n"},{"hash":"2cb8b275caf090bf56cc78424aaa97766cd02fb6","date":"2016-08-26T15:56:42.000Z","author":{"name":"Heejin Ahn","email":"aheejin@users.noreply.github.com"},"message":"Fix alignment bug in .lcomm (#680)\n\nWhen parsing .lcomm directives, s2wasm does not parse the alignment\r\nnumber and skip it. This causes alignment bugs in some cases. (In the\r\ntest case attached, 'buf' should be 4 bytes aligned, but it does not\r\nalign it properly, so this code was generated:\r\n```\r\n(call $foo\r\n  (i32.const 13)\r\n)\r\n```\r\n13 is not 4-bytes aligned. This patch fixes this bug."},{"hash":"801baed1ca81d87380d56298289fe8cc0b4f1e1a","date":"2016-08-26T17:13:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #682 from loganchien/fix-empty-deadlock\n\nFix asm2wasm dead lock caused by empty module"},{"hash":"4a04fc609133313ab18ef49599f365d3587af55b","date":"2016-08-26T18:29:18.000Z","author":{"name":"Heejin Ahn","email":"aheejin@users.noreply.github.com"},"message":"Asm.js-style setjmp/longjmp support for wasm (#681)\n\nThis needs to export realloc as well, in addition to malloc and free\r\nhandled in #4469. To support asm.js style setjmp/longjmp, wasm\r\nneeds to export realloc as well, in addition to malloc and free\r\nhandled in #4469. saveSetjmp() uses realloc within it, and realloc is\r\nnot implemented in JS glue code."},{"hash":"800c1f4ba3b658c9ea1b664329aa13d7069529a6","date":"2016-08-31T00:47:25.000Z","author":{"name":"aheejin","email":"aheejin@gmail.com"},"message":"asm.js-style setjmp/longjmp handling for wasm: add handling for\nemscripten_longjmp_jmpbuf name\n"},{"hash":"328824ae754b46a65b3fad55d840c816fdd3f347","date":"2016-08-31T04:35:28.000Z","author":{"name":"aheejin","email":"aheejin@gmail.com"},"message":"Method name fix\n"},{"hash":"b781f8518985e5aa07e0b8fd3d3ed800621150eb","date":"2016-08-31T05:22:09.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"asm.js-style setjmp/longjmp handling for wasm (#687)\n\nChange calls to emscripten_longjmp_jmpbuf to emscripten_longjmp (imported from JS)."},{"hash":"a1f3b147439885d61a86724632ed42ca50f83ad3","date":"2016-08-31T23:05:39.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall build to 10372 (#689)\n\nThis brings in LLVM changes up to r28025, which includes a fix for\r\nPR29127 and includes disabling the store-result optimization.\r\n\r\n* remove extraneous wasm-interpreter.h change\r\n"},{"hash":"1651ac798181107f8547b58c4c129c977f2b11e8","date":"2016-09-01T22:42:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Update readme for stack machine plans (#690)\n\nUpdate readme for stack machine plans, see #663."},{"hash":"f872f2d456921df1c2b256b9c448031371d8a713","date":"2016-09-02T20:41:08.000Z","author":{"name":"Rasmus","email":"rasmus@notion.se"},"message":"Improvements to build-js.sh and JS API (#679)\n\n* Adds command-line argument to build-js.sh for specifying the location of Emscripten. Also spreads out program arguments on separate lines\r\n\r\n* Exposes WasmBinaryWriter and BufferWithRandomAccess in the JS API to allow writing WASM modules and access the produced bytes via the JS API\r\n\r\n* Updates bin/binaryen.js and bin/wasm.js from changes to build-js.sh\r\n\r\n* Adds exclude patterns to .gitignore for some files generated by build-js.sh and .DS_Store for macOS\r\n\r\n* Changes build-js.sh to use EMSCRIPTEN env var instead of a command-line argument to provide the path to emscripten\r\n\r\n* Improvements to JS builds\r\n\r\n- Adds -g flag to build-js.sh that will build unoptimized and unmangled versions of binaryen.js and wasm.js (output has a \"-g.js\" suffix to allow co-existence with regular optimized builds).\r\n- Enables closure compiler for non-debug builds\r\n- Adds browser test for s-expression parser + WASM code gen (requires wasm to be enabled in the browser.)\r\n- Adds iterator interface to BufferWithRandomAccess (when Symbol.iterator is available)\r\n- Adds toArrayBuffer to BufferWithRandomAccess (when TypedArray is available)\r\n- Adds compileWast(sourceText :string) :ArrayBuffer to the module, parsing & compiling s-expression code to a WASM module\r\n- Changes the way binaryen.js is exported to allow usage in CommonJS, AMD and UMD envionments.\r\n\r\n* Expose \"Binaryen\" global in a better way to work with a.js generated by check.py\r\n\r\n* Fix to binaryen.js to only export a global variable when running the test (a.js) while inside a module (avoids polluting global in e.g. nodejs). Also fixes a spelling mistake.\r\n\r\n* Better \"no WASM detected\" message in test/binaryen.js/browser.html\r\n\r\n* Small change to error message in build-js.sh where $EMSCRIPTEN does not point to a directory\r\n\r\n* Changes emcc args in build-js.sh after investingating a large number of argument combinations. Also adds a browser benchmark. The result of emcc arguments and the effect on performance is summarized in this doc: https://gist.github.com/rsms/e33c61a25a31c08260161a087be03169\r\n\r\n* Enable inferring emscripten path by looking in PATH when EMSCRIPTEN is not set in env\r\n"},{"hash":"fbe77b167002e8a49225b607ca8c37dc7e4b41fe","date":"2016-09-07T16:49:50.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Color support for Windows (#693)\n\n"},{"hash":"b349c227aad37db102c644e6fe8030e9f939ef89","date":"2016-09-07T16:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"better printing when assert_invalids fail\n"},{"hash":"96c47400b8bce7b51d161432ff0cc03a9622cf3d","date":"2016-09-07T16:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"debugging in print\n"},{"hash":"981c7efa1ae4b27d1efd212284e61b77e89977a5","date":"2016-09-07T16:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make sure to create unique implicit block names in s-parser\n"},{"hash":"c846fb7dad4f18485979cf8c80c77bbb5d65c35f","date":"2016-09-07T16:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix parsing in split_wast\n"},{"hash":"f9020a0bdb3912a65f3f051b3b841fad412d2f13","date":"2016-09-07T16:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove drop-return-values pass\n"},{"hash":"9507066763db50de86db4d1ffead766f23d63116","date":"2016-09-07T16:54:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove lower-if-else, as it's no longer needed\n"},{"hash":"0783d60d9490666ab4b365e738b0132b378c6018","date":"2016-09-07T16:54:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove wasm2asm tests, temporarily disable .s tests\n"},{"hash":"9d27d6818f83308c4853e3d8870d5b88a374453f","date":"2016-09-07T16:54:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add drop and tee expressions\n"},{"hash":"1cc33903a0b1b9dddd40674d792a59ee0d1bccf7","date":"2016-09-07T16:54:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"it is not cool to return a nop\n"},{"hash":"72616971b2a35cbc37ea974e47c870556ef8ef4d","date":"2016-09-07T16:54:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call_indirect now has the target at the end\n"},{"hash":"f30d9f6cde023b29409f73aba68f472c06c3b11c","date":"2016-09-07T16:54:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"loops no longer have an out label and other upstream loop updates\n"},{"hash":"42155057a56a979eccb6d811671cfbf290cf429e","date":"2016-09-07T16:54:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"move drop into blocks, dropping all the breaks as well, when possible\n"},{"hash":"f48690ceeea66cf44e8f64be6543d6ed6b9e6bb5","date":"2016-09-07T16:54:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"select values must be valid\n"},{"hash":"e9d057d097f3875be50bba44d874e66ad71e40f2","date":"2016-09-07T16:54:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix compilation error on recent clang\n"},{"hash":"abb498167e4c8178a5cb6cd22dcf106959eaa7d4","date":"2016-09-07T16:54:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't depend on order of operations in calls, it varies by compiler\n"},{"hash":"676be6636f69acbe05098b8308498340e607d6ee","date":"2016-09-07T16:54:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"TEMP no torture tests for now\n"},{"hash":"fb5d853af156eeec3e12d85db6d134e8e17c43ad","date":"2016-09-07T16:54:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"TEMP no wasm backend tests for now\n"},{"hash":"15240ea1537d00f03af1abec8633e3890918be8e","date":"2016-09-07T16:54:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update binary version to 0x0c\n"},{"hash":"ef82c858b9ca6e1a9e34e79398195e7b549507aa","date":"2016-09-07T16:54:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm-shell improvements: print out which module is built, add option to skip lines\n"},{"hash":"0b6faf409ff92f6c4f81b5dd2474f43a4238878c","date":"2016-09-07T16:54:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"throw a parse error on bad result arities\n"},{"hash":"af7985c92a79f46eb1e10cd2964ad03c581e745e","date":"2016-09-07T16:54:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"tolerate returning a nop\n"},{"hash":"08293f0f451b398d3fa816c4d1bc6c87bbe6f102","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore unused return values in functions\n"},{"hash":"f0bc2a7937f775e722740e9c6aeff010c7d0c639","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"WIP get spec tests to pass by ignoring stacky stuff\n"},{"hash":"5d1af1e3b6836a4cd621d114ef30b6cf52882356","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse s-expression quoted strings more carefully\n"},{"hash":"b19f9feb9f45774272fa0f26f7a561b3b1bd9e3a","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"print wasm types in full mode\n"},{"hash":"8014a63b064a497ee4c18a70500f89fa51f75c79","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"check store value type, and validation printing improvements\n"},{"hash":"34d614a7e9026b793dd5b34d268fa7176d3771bd","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call_indirect is now structural, so no need to pass the type name around\n"},{"hash":"c774db526decf16bfd69d322afc45cc41b4ec070","date":"2016-09-07T16:54:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"a table is needed if there is a call_indirect\n"},{"hash":"a8356e139ffcbaa17715a2213a47a4c75051396a","date":"2016-09-07T16:54:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support (memory (data ..)) notation\n"},{"hash":"ccec65e3d0c980bb1079fd0946f48dea069d224e","date":"2016-09-07T16:54:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"some additional validations\n"},{"hash":"2f5c81810d827be6412056fc33188bdae622d55d","date":"2016-09-07T16:54:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"SetGlobal should not return a value\n"},{"hash":"38fdfdd800bc9c029ebd334ac9a08649b4d4d42e","date":"2016-09-07T16:54:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"globals printing fix, handle the case with no module\n"},{"hash":"99410c94d3a03aad24a9a6f53f5fc137bd336e71","date":"2016-09-07T16:54:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"interpreter debug and asserts fixing\n"},{"hash":"1780339679e771f8ffe94ea5f7c38cb1272e0994","date":"2016-09-07T16:54:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"grow_memory no longer traps\n"},{"hash":"094a4e8b4d1d8f163e8f8601d908727a37c7c97c","date":"2016-09-07T16:55:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update tests\n"},{"hash":"fbd3c89390220d304a93640664f7b8351523ca99","date":"2016-09-07T16:55:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update check.py skip lists for spec tests\n"},{"hash":"15a264ee9c67816693d92a5454ad7469f1f255ff","date":"2016-09-07T16:55:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an ExpressionStack traversal\n"},{"hash":"ada1e2671ac3095e62f52932d3358489fdf195f0","date":"2016-09-07T16:55:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a drop for final elements in blocks if they are not used\n"},{"hash":"e0809680bb82ecfc950aef97537827442b559fcf","date":"2016-09-07T16:55:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support (data .. ..), separate strings in a data()\n"},{"hash":"2e2e0241a10c0eccb89365c1b50217d6d0d3a386","date":"2016-09-07T16:55:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"export kinds\n"},{"hash":"793863a5d0e2f864f46dac86baa8e12c63b5b004","date":"2016-09-07T16:55:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import kinds\n"},{"hash":"a10ca64dc04bdba4fbf4a468604c0c88f62a4a8d","date":"2016-09-07T16:55:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import type for globals\n"},{"hash":"9660c200eff60c10266a85aae0637b495c4cba39","date":"2016-09-07T16:55:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"get_global and set_global use a Name instead of an Index, to be more consistent with refering to other global objects; e.g. this avoids ordering issues with imported vs non-imported globals\n"},{"hash":"266e922cddf0a5c78ed22f046eeebc053a9305c0","date":"2016-09-07T16:55:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use globals in asm2wasm\n"},{"hash":"db5ee8d83eb32fc7fd007f9e3d9b46d748161ae7","date":"2016-09-07T16:55:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"set type of calls to their target, instead of the previous behavior where the asm.js context informed us. this lets us add drops where necessary\n"},{"hash":"3eb8c8b19383418416b7512a87e5353a9aa88cc0","date":"2016-09-07T16:55:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm debugging asserts\n"},{"hash":"26070505e9885f6bb6dbf8a5039ef537b3c61ba2","date":"2016-09-07T16:55:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix ControlFlowWalker handling of ifs when looking for break targets\n"},{"hash":"9c1947f84e13dcf79b50e53e6abbf6ce4db6573a","date":"2016-09-07T16:55:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve full mode printing\n"},{"hash":"83e0dde16f381b28c1ee0d099de25444b0f34e58","date":"2016-09-07T16:55:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix AutoDrop block handling - the block type might change as we modify its contents\n"},{"hash":"f3bb9debe6af0576d76bda1580df2570e749bd36","date":"2016-09-07T16:55:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle asm.js globals that are set and the return value used\n"},{"hash":"d044aeab0c2f66c4bb8aa4b85f91c8af0ed633ae","date":"2016-09-07T16:55:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run vacuum again after autodrop in asm2wasm, if optimizing\n"},{"hash":"c9b4cd0716ddd1b0def1cc7b26aa94355ab9ef6f","date":"2016-09-07T16:55:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"drop the first element in a block too, if necessary\n"},{"hash":"31fca059e62a10b0f1d3de3a3f517721a41a7595","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finalize loops in asm2wasm, which is now necessary as they may need to be dropped\n"},{"hash":"c05ac6a217cb7657c7aa4e248bcc76d47e65983d","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a test for loop finalization\n"},{"hash":"eb1def34a4183c5a4227686fee5209e2419ecce7","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add some finalize() calls for ifs\n"},{"hash":"1d3f3dda67c24c148dce13734c21cdab487ddc87","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow forcing full print mode in the env\n"},{"hash":"14fe75e4d6e670d2e7f3e171d3d96c340b574eab","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"when replacing an if with its condition (when it has no body), we must drop it\n"},{"hash":"8384ada03f9ffc5d09d2a39e1dfa49cd1e1c8686","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use ControlFlowWalker in CFGWalker\n"},{"hash":"e125ae76b29b84563892263663e66ff072852c99","date":"2016-09-07T16:55:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't simplify locals out of loops if they contain branching, as it may invalidate the branch\n"},{"hash":"323e32bc1ca73c92d81b7fe28fd54e62c2218801","date":"2016-09-07T16:55:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"autodrop must be run before we optimize in asm2wasm, as otherwise its input is not yet valid\n\nthen after finalizeCalls, we must autodrop again to drop things that finalizeCalls changed\n"},{"hash":"e073b8f59e7cddd3a86443444f00b0b1f48691f1","date":"2016-09-07T16:55:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"sink a drop into a single if arm\n"},{"hash":"fd3f6dbe31f07e142ac87f599e7315cfacbe61fe","date":"2016-09-07T16:55:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do a little more optimization at the end of asm2wasm processing\n"},{"hash":"5e8ae1770e66d3a7ff00b3991195fd15c27ac65b","date":"2016-09-07T16:55:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"FIXME disable spec tests on the bots for now\n"},{"hash":"b8ff5de842769fe2c1cc7c6d626c29ac5d503572","date":"2016-09-07T16:55:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add asm2wasm option to import a mem init file\n\napply memory segments only if there isn't a memory initializer (which we need for asmjs and asm2wasm modes)\n\nuse wasm-opt to check recreated wasts for validity, as wasm-shell would try to execute them\n\nadd testing for combined modes like asmjs,interpret-binary\n"},{"hash":"88e8b7138e4e37ee092d9e0657257f079f8c279e","date":"2016-09-07T16:55:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update empty.fromast test output\n"},{"hash":"304fef1d997f1c43249996737ef7ce6deb961481","date":"2016-09-07T16:55:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor reallocBuffer assignment location, it is not technically part of mergeMemory\n"},{"hash":"42ad2cdbe5baa32dd1b0aea143a4e45f81e8b9b5","date":"2016-09-07T16:55:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import memory #684\n"},{"hash":"28767f631cfdae86ff16ca112bc5b1855b1368c4","date":"2016-09-07T16:55:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import table\n"},{"hash":"fd0160dafa25699404c1603adfcf965c75115854","date":"2016-09-07T16:55:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import memoryBase and tableBase\n"},{"hash":"d58adf43956c65615c9cd8d6c2f4c2a3cceff8bb","date":"2016-09-07T16:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support HEAP8[x | 0| notation in asm2wasm\n"},{"hash":"0793f2f87ca023e1769c7e7d4c64fa16d7fec1a2","date":"2016-09-07T16:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Add a ReFinalize helper, and use that to properly handle asm.js imports whose return value is polymorphic\n"},{"hash":"f1c74afc64d9f195729e1ad7e203f27566248e26","date":"2016-09-07T16:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"re-enable spec tests\n"},{"hash":"e62f54d9d38e8f6b999d5f18f052424b7d603b6b","date":"2016-09-07T16:55:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"new import syntax in spec repo\n"},{"hash":"6b216592116cdf23738df4aebabe7c6d759674e6","date":"2016-09-07T16:55:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"new export syntax in spec repo\n"},{"hash":"a07797f1b1264e60912a8c18cb673b829ae0d1a5","date":"2016-09-07T16:56:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"additional parsing support for new spec things\n"},{"hash":"52b0fe21ad36ef0e81193d4418916dbec7352fa4","date":"2016-09-07T16:56:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"new validation checks for upcoming spec tests\n"},{"hash":"b116d3a45854f9c92e98c5526c1d6bccd3d9cfbe","date":"2016-09-07T17:01:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if we don't recognize the platform in colors.h, just do nothing for colors\n"},{"hash":"dd197d3212ac28e778d372df9d03e58b21386648","date":"2016-09-07T17:21:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js and binaryen.js\n"},{"hash":"135a20cd110d356d5d098a08a7b447205adaed7a","date":"2016-09-07T17:55:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #678 from WebAssembly/stack\n\nStack machine + 0xc update"},{"hash":"5d3fbce683a80a2dcbe17d9e100d6a0a287412ff","date":"2016-09-07T19:04:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make sure to use the right order of operations when loading composite ints in binary format reading\n"},{"hash":"c24b9f9f6af61abd9ef124837bee41cbba35a8f2","date":"2016-09-07T19:04:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ensure we create the OptimizeInstructions database on demand, avoiding global ctors\n"},{"hash":"87f65f1623983bfc516ff4b222a3bb2537971837","date":"2016-09-07T23:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #694 from WebAssembly/binary-order-fix\n\nOrdering bug fixes for windows"},{"hash":"8f0726cc87494f6721baab55ec035fa3facae0e3","date":"2016-09-08T01:41:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use eqz as an optimization\n"},{"hash":"92ec03790fb9c6a5c72002eb739e017178eabf3e","date":"2016-09-08T01:41:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add option to remove duplicate funcs by name\n"},{"hash":"779c2a20af50c351fb725b785a0ed6932143280d","date":"2016-09-08T01:41:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize out eqz^2\n"},{"hash":"c2072c3f7c96eed6abbc7901c181bec92e3b9ced","date":"2016-09-08T01:42:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize loads+shifts into signed loads\n"},{"hash":"2b98366e3f4787fc8d3d21ba0c01a577b8ea0d66","date":"2016-09-08T01:42:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"track globals in EffectAnalyzer\n"},{"hash":"96ae0dda155b47299245a89e6a68fbb97ccda33f","date":"2016-09-08T01:42:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize out a set of a get of a global\n"},{"hash":"e9dfbe4de951ff6c3f3830fbcd1229d3d31a1190","date":"2016-09-08T01:42:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"flip select-eqz when possible\n"},{"hash":"c02e76e5a61c507df4c48f644f3702b660f6fab9","date":"2016-09-08T01:42:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a test\n"},{"hash":"d8af68954309ef2cd34449a50b4d82d3bb96c7e7","date":"2016-09-08T01:42:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do a first pass in SimplifyLocals that focuses on single-use locals\n"},{"hash":"443d7a8e39c4ccfaeab6066160aae17e1fee8cc8","date":"2016-09-08T01:42:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"vacuum drops better\n"},{"hash":"b518e564be25cc2705ab3993b71f0170feabac7e","date":"2016-09-08T01:42:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"properly handle blocks with return values in vacuum - we cannot remove their final value directly, we can only do that if it is dropped, from the drop\n"},{"hash":"282369b5430287c2397eb9e3cdd859ad12fa3937","date":"2016-09-08T01:42:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"autodrop if body if no else\n"},{"hash":"e93486b7936153e21312bcc11f2c99ed9a151300","date":"2016-09-08T18:37:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"enable udivmoddi4 opts in asm2wasm\n"},{"hash":"2065ecbe1ad951dc7263f76040b085019423ada9","date":"2016-09-08T18:38:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use -O2 in debug wasm.js/binaryen.js, as they are so large without js opts they are too unwieldy\n"},{"hash":"ac078dcb1c677f83527693536cb1c06157095447","date":"2016-09-09T17:41:00.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Add flag to s2wasm to export __growWasmMemory function (#696)\n\n* Add a flag to s2wasm to export grow_memory\r\n\r\nBinaryen's wasm.js-post.js calls back in to wasm in order to grow the\r\nlinear memory, via a function that asm2wasm exports called\r\n__growWasmMemory.\r\nThis changes exposes that method through s2wasm when invoked with a\r\nflag.\r\n\r\n* Move AsmConstWalker from wasm-linker to wasm-emscripten\r\n\r\n* Add test for memory growth in s2wasm\r\n\r\n* Move makeDynCallThunks into wasm-emscripten module\r\n\r\n* Move mutation in getTableSegment into a separate method\r\n\r\n* Move emscripten metadata generation into wasm-emscripten\r\n\r\nAlso make AsmConstWalker internal to the wasm-emscripten module, as it's only used for the metadata pass."},{"hash":"1775473f735f40412899676469f3d7e8fbba93dc","date":"2016-09-09T18:16:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize loop endings in RemoveUnusedBrs\n\n * rotate an if near the end of a loop as it can let a break out flow naturally and be removable\n * turn a br_if into an if it allows such an optimization in cases where it helps remove other structures\n"},{"hash":"2427725215ad4a9a52c89c7d791a9277cc23db14","date":"2016-09-09T23:36:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"take into account removed copies even when number of locals is the same, in coalesce-locals\n"},{"hash":"3158ada0ee9f5e3d2daf019cfda545498b55285b","date":"2016-09-10T17:49:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"sort locals by number of total copies\n"},{"hash":"facfa01e3ffa3f89de4e2a2453fabf01be15eb4c","date":"2016-09-10T17:49:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"test name fix\n"},{"hash":"91b33ce4d692c221336f2d6d4345eb239ead401e","date":"2016-09-10T19:03:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimization comment\n"},{"hash":"1c6a1375140c7b2ef720e706d7d97efe7140cdcc","date":"2016-09-10T21:25:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize eqz^2 in select and br_if\n"},{"hash":"7c0edee0dec829f6c739533aa4c4631978ff4632","date":"2016-09-10T21:41:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize if-else to br_if when in a block\n"},{"hash":"3d6b218cc288bb1c9f234cb9a54796f512294107","date":"2016-09-10T23:05:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor an optimizeBoolean method\n"},{"hash":"8a25e5ccdb2d43d9966247c737f963d53c4edb73","date":"2016-09-10T23:47:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run another optimize-expressions at the end of asm2wasm\n"},{"hash":"6eccbd4c70fb31a788e6a93ee2a163bb7dc6d06b","date":"2016-09-12T04:27:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate in debug mode in passRunner\n"},{"hash":"4ed9d8f6608d768fe9ef2e2916e770d605e6b0e1","date":"2016-09-12T04:27:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove final elements in vacuum carefully: we must preserve a return value if there is one\n"},{"hash":"d44d104c26c09e408dddcac6c382a66fc1db5812","date":"2016-09-12T17:14:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix up types in remove-unused-brs at the first opportunity, not later\n"},{"hash":"2e543e392bdd24194f693191b6fb8c39aed0da93","date":"2016-09-12T17:14:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor pass hooks, creating a proper way to run code before a pass is run\n"},{"hash":"ff9757dd827f16e132fdab16bc615ba29f07b415","date":"2016-09-12T17:14:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up database-ensuring code using the new prepareToRun method\n"},{"hash":"4d0fea95aec72f932efa83a0601b98c177e59a85","date":"2016-09-12T17:36:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"thread relooper jumps\n"},{"hash":"284865e47ed545beeff40629caa59f169885f560","date":"2016-09-12T19:24:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simple jump threading\n"},{"hash":"b4a77cf9b0780248c1a62c4409899ee1e23573ef","date":"2016-09-13T04:22:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix bug with turning if into br_if without checking for reordering dangers\n"},{"hash":"39ed7c6477f24b06e7ec33d03a86d932aa9a6a5f","date":"2016-09-13T17:50:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update br type when turning it into a br_if in remove-unused-brs\n"},{"hash":"02e43255350e8d9336b658dfcfd73ed5696fbb58","date":"2016-09-13T23:42:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix if finalize()\n"},{"hash":"6cb6d65dd0c19dc5cba43d9367bcbdf691f80df3","date":"2016-09-13T23:58:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add ExtractFunction pass\n"},{"hash":"da407c06333857f153f9fd1dba780dfbc64677bc","date":"2016-09-14T00:50:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"drop if-else arms as necessary\n"},{"hash":"d8f45bca8141f6d4dcd46c46ef354756728848c6","date":"2016-09-14T17:27:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"avoid threading jumps when there is irreducible control flow, as it is hard to know if it is safe to do so\n"},{"hash":"7d748241d3c69d0d87cf8d78174f174c234e406e","date":"2016-09-14T21:01:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"when optimizing a block return value, replacing the sunk set with the value is only possible if the break is unconditional; if it is condition, we must tee the value so that if the break condition is false and we do not jump, then we have the new value in the local on the line after it\n"},{"hash":"63b499e3ec9bbdf4e79ab6d9dc198299516e8aec","date":"2016-09-14T22:32:57.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"In AsmConstWalker, don't assume a segment exists (#697)\n\nIt's possible to generate an EM_ASM call with empty contents (due to\r\nifdefs, for example), and this gets converted to an empty string.\r\nAsmConstWalker assumes that by this point any addresses it is pointing\r\nto have a corresponding data section, which is reasonable. However in\r\nthe case of an empty string, we don't create a data section, but just\r\nleave that address uninitialized, i.e. set to 0.\r\nIn the case of AsmConstWalker, a correct thing to do is to emit the\r\nempty string as metadata, which becomes an empty emscripten_asm_v call."},{"hash":"fe5d3c1f034770dd8fe948c3f2361d457fe182c0","date":"2016-09-15T00:30:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix getCopies return type, so that we take into account the full range of values\n"},{"hash":"77be43eb794dd0268fbf8298639ca2f717ef0663","date":"2016-09-15T03:08:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix switch traversal order\n"},{"hash":"76a621f50b579e24f4210c1e2d35a9b3f72b0f94","date":"2016-09-15T03:31:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"coalesce-locals code cleanup\n"},{"hash":"d90f13b7fd15b688f03fd8f1dad481d2f2236a59","date":"2016-09-15T03:38:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allocate newCopies on demand in coalesce-locals, to avoid n^2 allocation when in practice we need a lot less (and on e.g. sqlite, n^2 is very large)\n"},{"hash":"af3bea2786fe62070522b7fd7add4290a4cb4e6d","date":"2016-09-15T03:47:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a comment\n"},{"hash":"e567fa8675831e79f855cea2181fa58beb107e42","date":"2016-09-15T04:28:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #695 from WebAssembly/opts\n\nGet optimizer on par with emscripten asm.js optimizer"},{"hash":"22548bf789359be1f3c14aa41ffd4a23fda38542","date":"2016-09-15T22:49:03.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update s2wasm for 0xc changes (#698)\n\nSeveral updates for s2wasm and its tests:\r\n\r\nAdd explicit drops where they are emitted by LLVM already\r\nConvert loops (which are still modeled in the old way by LLVM) to wrap them in an explicit block (for the exit label). This also allows simplifying the loop creation (no need to post-process the implicit block which is the loop's body). After the engines update to 0xc we should update LLVM to model loops in the 0xc way, but for now it remains compatible with 0xb and 0xc.\r\nFix the order of the calls to setTee() when creating tee_locals\r\nAdd an explicit drop when creating the _start entry function wrapper if needed\r\nUpdate dot_s and llvm_autogenerated tests to remove store-results optimization (and few other minor updates)\r\nFix the test auto-updater to fail if subprocesses fail\r\nThere still seems to be a validation failure when building libc (I think it's from the stricter drop rules, but it may be in the source rather than the compiler), but this at least makes Binaryen's tests pa"},{"hash":"a969d443230c82212164e4d3d3792ed723fee057","date":"2016-09-16T02:53:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix remove-unused-brs bug when checking if it is safe to conditionalize code\n"},{"hash":"88c92cbfe7d9f69fa8605fa406e5dbb2ac628172","date":"2016-09-16T03:20:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle getTempRet0 having extra code, which can happen in emterpreter assertions mode\n"},{"hash":"7292ef9c863a0766c697cc0a77516447ff652820","date":"2016-09-16T17:34:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #699 from WebAssembly/opts\n\nFuzz bug fixes"},{"hash":"444d7f66182c091b2e207a7bc842309f0925e228","date":"2016-09-16T22:14:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"call_import changes: no more call_import, shared index space with functions\n"},{"hash":"5126ebef968cd27ae3cb8f61357c95626c25ad25","date":"2016-09-16T23:45:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"s-expression modules can have names\n"},{"hash":"8ff678788ada565d15273ca6ca872946f14584d6","date":"2016-09-16T23:48:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support assert_malformed in shell test runner\n"},{"hash":"f0546a0c8322a4e2f1777c8a749207a70cdca681","date":"2016-09-17T00:51:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"block signatures\n"},{"hash":"0a9df805f688d5eab8be380ab7c9dde115d88852","date":"2016-09-17T01:28:28.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"br_if returns its value\n"},{"hash":"4ebe1f0c41c3d9311853b79f2cbeb4ec5b4b886c","date":"2016-09-17T02:05:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use export name as internal name if no internal name, for better s-expr debugging\n"},{"hash":"d46a737d421d53f68fc13d55fe405cf8c3c5d4c0","date":"2016-09-17T03:30:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parse empty modules without error\n"},{"hash":"0201f77b30f875de0d0fc8e407ffc985d47f8535","date":"2016-09-17T21:56:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support module operations in shell tests\n"},{"hash":"456e3e8625064370281629c71d9c29d8f7d09d06","date":"2016-09-18T00:04:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"parsing and validation fixes\n"},{"hash":"5f6a5dea206fafd140534f8c494208eb96f7994a","date":"2016-09-19T19:01:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"new-style import parsing\n"},{"hash":"38dc263c303be13bec2fcee713bdb18fa89057c8","date":"2016-09-19T22:14:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"global parsing\n"},{"hash":"ba0a6541885d324b9562a79a8977ed8733191b7f","date":"2016-09-20T01:49:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"globals mutability fixes\n"},{"hash":"e9e6b5aeee24f36e92c1e02de6eff31154ca4f07","date":"2016-09-20T03:36:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"import parsing fixes\n"},{"hash":"552d700c7e21afae03e55b6d6574a67946510972","date":"2016-09-20T17:38:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"global importing fixes: use the right counter for globals and for functions\n"},{"hash":"1338ad989ba30007bc1ba7f0fd05237a9fbec474","date":"2016-09-20T18:06:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support spectest.global\n"},{"hash":"469d90aaf3d708ffcb0f9f28b29120524055ba6f","date":"2016-09-20T18:13:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate spectest.print as a function\n"},{"hash":"6e6abe73ddf77755c08ba473c52d111fa8fda768","date":"2016-09-20T18:13:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"mark table as present if seen as an import\n"},{"hash":"4a2c27df27f3415ecd9950110ceddde84008dae4","date":"2016-09-20T18:46:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"table parsing and executing fixes\n"},{"hash":"48a0da1be94a8cabb36dc84d0bc6203c20c22b15","date":"2016-09-20T19:01:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory and table parsing fixes\n"},{"hash":"2aa7ba43b59782243cd4960df43c7936292c41f4","date":"2016-09-20T20:16:51.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory parsing fixes\n"},{"hash":"947cd3f224623f2d1e76f3c6cc30487ea8fd79ef","date":"2016-09-20T20:45:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory and table printing fixes\n"},{"hash":"dc3990106d0363da5fc0e9e1de766459bf67161c","date":"2016-09-20T20:55:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"max memory and table fixes\n"},{"hash":"3308ed63f2556dc969ea9fffd265705469e797e4","date":"2016-09-20T21:39:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"table elem parsing fixes\n"},{"hash":"98f2a79dd9ceb95c8df55d3fd755a886e65c567f","date":"2016-09-20T21:47:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memory data parsing fixes\n"},{"hash":"64bfe1d84db6c0b9b63aa27bb2c2cb1d79f3f504","date":"2016-09-20T23:24:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"function numbering fix in wasm-s-parser\n"},{"hash":"e0b2af0827e98fb91f4ff90b57b7579da1608365","date":"2016-09-21T20:53:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor wasm.h to remove numericIndex hacks, and move indexing to the parsers\n"},{"hash":"228b9a1cfc89ede2dcc064de9b2e60f53a047128","date":"2016-09-21T20:53:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"loop block signatures\n"},{"hash":"3355792fba29e62f02cf1f1acb3a219cf5a69970","date":"2016-09-21T20:53:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"new if label behavior\n"},{"hash":"d8229dcfa82a24809a17384df4220b4f3e70a82b","date":"2016-09-21T21:14:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix start section in binary format\n"},{"hash":"da134d909f0b9dbd49545ceed77e37721b32f0d1","date":"2016-09-21T21:57:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"auto-generated import names must be unique by kind\n"},{"hash":"c79bbb19b59161e0768674816b477f74355912b1","date":"2016-09-21T22:30:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"error on putting spectest.print in a table\n"},{"hash":"182fa17148031a162f4b8cb2c2adea54ffd9e996","date":"2016-09-21T22:30:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js and binaryen.js\n"},{"hash":"5b315375b5a98c2b57454e3b062f85ea99c80747","date":"2016-09-21T22:31:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests and check.py's handling of them\n"},{"hash":"32fbcf2d042292860e6c0a64e82becefe585fb6f","date":"2016-09-21T23:03:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm.js needs wasm-emscripten.cpp\n"},{"hash":"740e36eab98d679387fea60cd642591a69ce809f","date":"2016-09-22T01:01:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix use of endOfFunction in an uninitialized state in wasm-binary\n"},{"hash":"8be82627c6a8cbded0dab67ad1f31906a54ba78c","date":"2016-09-22T02:33:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #703 from WebAssembly/spec-update\n\nSpec update - get us passing the 0xc spec tests (minus stacky stuff)"},{"hash":"44978317c4068cea4778e264d03efb5537c009ea","date":"2016-09-22T16:17:36.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update binary format toward 0xc (#704)\n\nUpdates section headers and formats for type, import, function, table,\nmemory, and export sections, as well as \"names\" section, which is now a\nuser section.\n"},{"hash":"dc82f588309f1a4413be18460159699df74661c4","date":"2016-09-22T23:02:55.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update binary encodings for call instructions and segments (#706)\n\n* Call instructions no longer encode the arity\r\n* Segments encode the linear memory index (0 for MVP)\r\n"},{"hash":"8f897c7d5543fd1529b8279801ddbb59ffff7f1b","date":"2016-09-23T22:30:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"autoDrop fix\n"},{"hash":"8ef9aafab1a2c47f9a09c8e64636da570870dc00","date":"2016-09-23T22:46:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"replace two drops in an if-else with one on the if\n"},{"hash":"7d5180a5b3e369634dbc1442117068d332d71049","date":"2016-09-23T23:23:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix a simplify-locals bug where we didn't notice and if already had a result value\n"},{"hash":"b6469ed600832887e8874d1a0407b993dd2c03e8","date":"2016-09-24T03:34:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #710 from WebAssembly/autodrop-fix\n\nAutodrop fixes"},{"hash":"49ddf2f8ba2439f767cdbeb656c6ff42d5530cf8","date":"2016-09-24T04:14:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a pass fuzzer script (#709)\n\n"},{"hash":"f28bba29833bad06a76c7aabf31cf0257e12f5ba","date":"2016-09-24T21:05:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"precompute void expressions too\n"},{"hash":"97cf0d7bf6f115d44636dd52dc7c0036567ca798","date":"2016-09-24T23:47:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize if(const)\n"},{"hash":"f6bc44f11bace70754470694f9101ba9cc5c2887","date":"2016-09-25T01:25:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #714 from WebAssembly/precompute-void\n\nPrecompute void expressions, which helps ifs"},{"hash":"ad79b7d1a8773ea08203ebece5da49a432dd8877","date":"2016-09-26T04:34:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"precompute breaks and returns (#715)\n\n"},{"hash":"ea5b5e20910d8b1773a2adeaad5c92a5f37d0cab","date":"2016-09-27T04:40:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Make wasm-as emit the names section/debug info only with -g (#705)\n\n"},{"hash":"ef22ce6c360b70b5bfad40b2930c481d48ed9780","date":"2016-09-28T05:38:56.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update binary encoding for block, loop, and if signatures (#711)\n\nAlso updates the tests and has a few other changes for binary 0xc:\r\nUpdate nop/unrechable opcodes\r\nFix for \"name\" section\r\n"},{"hash":"2da1b20451a744daa613e818f71e8f52de3a818e","date":"2016-09-28T20:10:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Type check block/loop/if sigs (#717)\n\n* type check using block/loop/if types provided in text and binary formats.\r\n* print if and loop sigs which were missing.\r\n* remove dsl from OptimizeInstructions as after those changes it needs rethinking.\r\n"},{"hash":"093894012d86673fd6bca304da08ccfba88deb44","date":"2016-09-28T22:59:26.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"s2wasm: Do not add drops for void values (#718)\n\nFixes #708"},{"hash":"345b04253dcf7d42dcefabdec4e4b0edc3a3ca44","date":"2016-09-29T00:00:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix signed int64 LEB bug with large negative values (#719)\n\n"},{"hash":"2234cc7374797d188761916f6b1e82ce9ade1fa3","date":"2016-09-29T00:38:44.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Print the name of memory along with size (#720)\n\nOtherwise when we export it as \"$0\" it's an undefined name.\r\nThe spec interpreter actually rejects this, although I think it's\r\nintended to work, given the tests in export.wast. wabt also accepts it."},{"hash":"a82528f17feba6b1c34794c645ea5c78892a57d0","date":"2016-09-29T19:55:52.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update waterfall to 11453 and re-enable torture tests (#721)\n\nTorture tests from the clang were disabled with the first 0xc\r\nudpate. This PR updates the tests to a new waterfall build and turns\r\nthem on (also updating the known failures for 0xc). It also updates the\r\ndownload URL since mac and windows bots have been added to the\r\nwaterfall (they are not up yet and support in this script is not tested\r\nyet)."},{"hash":"2a543b48db250ea9cd7172b6db9a0b8d3657475a","date":"2016-09-30T16:15:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate drop (#712)\n\n"},{"hash":"cbe71a99f3b53db81cfd23f7a12f2010daeff65d","date":"2016-09-30T17:47:52.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Make the linker always create a table segment (#722)\n\nPreviously a table was only created if there were any address-taken\r\nfunctions. New module validation rules require the existence of\r\na table for any call-indirects to validate (even if they are dead and\r\nnever called). However this use case seems common enough that we might\r\nwant to make it continue to work. So the linker now always creates an empty table segment (indicating an empty table)."},{"hash":"58832ad0b8a197ece6165bfe163f634a21f8bd6d","date":"2016-10-01T00:04:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm i64 support (#723)\n\n* support i64 intrinsics from fastcomp, adding --wasm-only flag\r\n\r\n* refactor callImport logic in asm2wasm to avoid recomputing wasm types again\r\n\r\n* legalize illegal i64 params in exports and imports\r\n\r\n* do safe i64 binary ops depending on precision\r\n\r\n* fix addVar, only assert on names if we are using a name\r\n"},{"hash":"926e4ab3c19c0adc965a3b75d9bd2624a4a2b58f","date":"2016-10-02T22:19:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"passRunner debug and validation improvements (#726)\n\n"},{"hash":"31ceb6ef95835952097ecc868eff9bdd7fb17d34","date":"2016-10-02T22:36:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"More wasm-only opts (#727)\n\n* wasm-only loads and stores\r\n\r\n* wasm-only 32-bit bitcasts\r\n"},{"hash":"9046e5fb540c92c7d994ba72893c724415ab371b","date":"2016-10-02T23:35:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix vacuum big where we changed an unreachable node to a nop (#728)\n\n"},{"hash":"652d70cecc75fbcb4933bdc695be4d2be168f16f","date":"2016-10-03T04:38:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm-only additions: i32.cttz, copysign, popcnt (#729)\n\n"},{"hash":"08136f5d7fd042539e69f9a330f2e55d28b738b9","date":"2016-10-03T19:03:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Use new WebAssembly API (#724)\n\n* use new WebAssembly.Instance/Module API\r\n\r\n* detect presence of wasm with WebAssembly object\r\n"},{"hash":"eab1c956d2dbdcc83a861c94f95662bfc0af38cc","date":"2016-10-03T20:02:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Document and clean up validation options (#730)\n\n* document and clean up validation options\r\n"},{"hash":"d19721bc110f0c4545eeaed825de99f963834a0a","date":"2016-10-03T23:40:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Refactor Import::Kind and Export::Kind into an ExternalKind enum class (#725)\n\n"},{"hash":"5046a524d506add48cb3779b39b4983e78292410","date":"2016-10-04T04:38:40.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't create an unnecessary duplicate block in asm2wasm switches, when there isn't a default (#734)\n\n"},{"hash":"c4e70a04c42cdad380707d2e4b4f6f9503462414","date":"2016-10-04T04:41:43.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"More binary updates for 0xc  (#733)\n\nRefine tables to explicitly exist or not. Previously they were printed\r\nor encoded if it had any segments, or an initial or max size. However\r\ntables can be defined but empty, so we had a special hack that defined\r\nan empty segment when we really just wanted an empty table. Now, just\r\nmake the existence explicit.\r\n\r\nUpdate Function table encoding for 0xc (Table and Element sections)\r\n\r\nAdd end opcodes after function bodies (these are consumed by\r\ngetMaybeBlock with the same behavior that it had before when it reached\r\nthe function end, so no explicit decode)\r\n\r\nUpdate call_indirect encoding for 0xc (no arity, call target is last)"},{"hash":"be02365a017f93febcae641705945e9df55ff907","date":"2016-10-04T18:02:52.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update wasm.js (#737)\n\nUpdate the build so it accepts the binary format changes from #733"},{"hash":"a78bd60bc68993c746a9f236d01558e04b6765bd","date":"2016-10-04T18:27:25.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Update i64 stores for 0xc (#731)\n\n* Update i64 stores for 0xc\r\n\r\n* Update autogenerated LLVM tests\r\n\r\n* Update known torture test failures\r\n\r\n* Add i64.store32 test to unit.wast\r\n"},{"hash":"a8386c3d6fcf6bf28f369b85784a89a8f272b59d","date":"2016-10-04T22:03:00.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Write global mutability into wasm binary (#739)\n\nFor compatibility with 0xc\r\nAlso update opcode for get_global\r\n"},{"hash":"c5b8f379fc3834bc5df10743b525570ffe1a5a73","date":"2016-10-04T23:29:21.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Binary 0xc: Remove arity on return instruction (#740)\n\nAlso skip binary roundtrip on stacky spec tests\r\n"},{"hash":"4e1667aa3454f56b3e96df674c504cb16366b628","date":"2016-10-05T03:04:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle ifs with an i64 condition #741 (#742)\n\n"},{"hash":"45ba1270e8d99c0c7fdc008c0db7c9d7fa0a4f38","date":"2016-10-05T03:05:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"DCE bugfix (#736)\n\n* fix a dce bug where it is invalid to truncate a block if it leaves a final element with a bad type (wasm doesn't always allow removing unreachable code)\r\n\r\n* add wast pass fuzzer"},{"hash":"9caad5e1f85a301b1123420eab45ca8caaf6e837","date":"2016-10-05T06:08:36.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update wasm.js (#743)\n\nCompatible with #740"},{"hash":"fcdadc6c124c3a93c68b33c26207ecd5ead47273","date":"2016-10-06T20:46:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate get_local type (#745)\n\n"},{"hash":"b910f49ede15d27391418b0056e1817e462d855f","date":"2016-10-06T22:12:27.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Remove hard-coded paths from LLVM test auto-generator (#748)\n\nUse the command-line instead.\r\nAlso update the blacklist to handle new tests."},{"hash":"7b637b77437157fdf207304e3179079a78de72b9","date":"2016-10-06T22:55:21.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update s2wasm for removal of store results (#749)\n\nCorresponds to LLVM change https://reviews.llvm.org/D25122\r\n"},{"hash":"3370c630d4f3fe9590e78be48b417b87d6771455","date":"2016-10-06T23:35:12.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Update for removal of loop's bottom label from LLVM (#750)\n\nCorresponds to LLVM change https://reviews.llvm.org/D25122, r283502\r\n"},{"hash":"eb958269b8f3c5dd98bb24f99e9f1d5deceaa032","date":"2016-10-07T00:00:17.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Dot s block signatures (#747)\n\n* Support block signatures in s2wasm's .s format\r\n\r\n* Autogenerate tests\r\n\r\n* update cfg-stackify tests\r\n\r\n* Remove conflict files\r\n"},{"hash":"caf0a3db20bbc03d2261b2c5a112bc0eddd3ca73","date":"2016-10-07T00:37:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Require unique names in binaryen IR (#746)\n\n"},{"hash":"cbeb4c9f9ba7c8f50fcb938ef668842bbd5dacb4","date":"2016-10-07T17:57:50.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Change print order of top-level module components (#751)\n\nIn wast files, the spec and WABT require imports to appear before any\r\nnon-import definitions (see also\r\nhttps://github.com/WebAssembly/wabt/issues/152). This patch re-orders\r\nvisitModule in the wast printer to meet this requirement, and more or\r\nless match the order of the binary sections. Also remove extraneous\r\nwhitespace around table definitions."},{"hash":"1b32ff705c52443fc855cdfce446dcff6bf7b85c","date":"2016-10-08T01:06:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use 0xc Memory and Table in JS glue (#752)\n\n"},{"hash":"18c332220f655dbad552c369ccde5da6e5b7fde2","date":"2016-10-08T04:14:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up some unneeded processing in cfg-walker\n"},{"hash":"99e50f51ba9917ee45d336e204e1c8d59e9ccc9e","date":"2016-10-08T17:59:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove unneeded param to doStartBasicBlock\n"},{"hash":"b211e9d70456b995996aa9c0d656650177590927","date":"2016-10-08T19:14:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"track unreachable code in coalesce-locals, we know what is unreachable anyhow, and it just adds overhead to not ignore it\n"},{"hash":"9cfbe71f45a1234737178eee514b003387ff35de","date":"2016-10-08T19:22:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve comment\n"},{"hash":"2a8fea01444dac7d95eea64c2d49b86bb58713d3","date":"2016-10-09T18:23:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #753 from WebAssembly/cfg-opts\n\nMinor cfg-traversal opts"},{"hash":"56c6ca407f3232ede398b78e7f284f6ed80c9f00","date":"2016-10-11T16:15:05.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Don't create table sections for imported tables (#756)\n\nPreviously the Print pass searched the imports for a table import and skipped printing a local table declaration if found. Instead this refactors to make importation explicit, and also create importation records (previously we were inconsistent about whether such records were created in the IR depending on the wast syntax)."},{"hash":"1dbdfff8e997f74154dfebce124756e415aa431a","date":"2016-10-11T18:02:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"put heavy pass debugging operations behind BINARYEN_PASS_DEBUG (#755)\n\n"},{"hash":"717bbe620aa36bc7b85040eade18b1a0300bcec4","date":"2016-10-11T18:51:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use wasmTableSize when provided\n"},{"hash":"5e3f26285100854cead459effe409e250a6b4d2f","date":"2016-10-11T22:01:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spidermonkify.py\n"},{"hash":"a3dc8bf8cba7cd1b5ece8abf0489a9dcacfa3f2e","date":"2016-10-11T22:01:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor memoryBase and tableBase init to a shared location, so it affects native builds too\n"},{"hash":"1e783f3e96f904b88b692522de04f786feaf41a0","date":"2016-10-11T22:01:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow a maximum 0 size for a table\n"},{"hash":"6e04c61c78cdf8196b6944c290041611d1f68d2d","date":"2016-10-11T22:01:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"if we see no asm.js function tables, the table size is 0\n"},{"hash":"943fd287247f9d23d463a24e8eb4b0f666900c43","date":"2016-10-11T22:01:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasmTableSize of 0 is allowed\n"},{"hash":"85900965a12a3f07c9cca8ef620d4bee039f16fc","date":"2016-10-11T23:15:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #757 from WebAssembly/js-api\n\nTiny fixes for native wasm support"},{"hash":"859686c79388b5c34022a8bf8d7794480c9ad2bd","date":"2016-10-11T23:29:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove memory maximum in asm2wasm when memory growth is on\n"},{"hash":"0f42a9d1d43dcffc76cd816725f278ed8cf28702","date":"2016-10-12T00:16:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle memory growth with native wasm support: the result of grow_memory tells us if it succeeded, and then the new buffer can be found on the Memory object\n"},{"hash":"7e543286b099d7f78816e087c230c2ef23f34beb","date":"2016-10-12T01:24:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #759 from WebAssembly/js-api\n\nmemory growth fixes"},{"hash":"2aad55d7fd4c8ad99d06937ab6838b0a0455e10a","date":"2016-10-12T18:13:24.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Implement binary search for coalesce-locals (#744)\n\n* Implement binary search using <algorithm>\r\n"},{"hash":"a08ccc3cdc2e53354f0eaeba419655b641b2b056","date":"2016-10-12T18:32:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix bug where we set memory max to the initial value if the max wasn't specified (#760)\n\n"},{"hash":"ada5fb540164823f8dab45330a190479afa24120","date":"2016-10-12T18:32:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle unreachable tee_local properly in coalesce-locals (#761)\n\n"},{"hash":"b4d7c60d82fc336e401026e7ba6dd67138259ae2","date":"2016-10-12T21:37:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update spec tests, now using binary-0xc branch as our stack test refactoring landed in upstream (#754)\n\n"},{"hash":"95d00d699c9e05b8a04885d019a09d8d2eebd0b5","date":"2016-10-13T17:41:59.000Z","author":{"name":"Benjamin Bouvier","email":"public@benj.me"},"message":"Don't create a memory section for an imported memory; fixes #772 (#773)\n\n"},{"hash":"ff360121bf73d969af14ad4a8e42d7fe052df08a","date":"2016-10-13T17:48:02.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Fix crash on loading archives, firstRegularData member field was not initialized to null which caused dereferencing a garbage pointer. (#770)\n\n"},{"hash":"a4ea106957a29620e6b90839060d9acb8abaaf08","date":"2016-10-13T18:10:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle globals in dce\n"},{"hash":"502f14c83aa5bb80171916062e9f30a5363dc59a","date":"2016-10-13T18:11:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"don't convert unreachable -> unreachable in dce\n"},{"hash":"98e7ff034aa0c5d370ce3dcca3f48c30eb470ad8","date":"2016-10-13T19:34:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"pass/wast fuzzer improvements\n"},{"hash":"7077f78538be1364df24477fc713dfe480e63558","date":"2016-10-13T19:34:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"when simplify-locals give br_if a value, the br_if also returns it, so it must be dropped\n"},{"hash":"db0e551d2a64e47b59c9196f580fb306bb8205bb","date":"2016-10-13T21:49:37.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Remove non-CMakeism that depends on a fixed CMAKE_BUILD_TYPE at configuration time. This allows doing other types of builds than Debug or Release and fixes multigenerators such as Visual Studio or Xcode. (#764)\n\n"},{"hash":"34d354b2de094671d10f479cc84ca6ef1da3c993","date":"2016-10-13T21:50:49.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Add .gitattributes that enforces all archive files are treated as text. (#768)\n\n"},{"hash":"6e397e4ee50ba09a6f555fcf36406273e5f40d29","date":"2016-10-13T21:52:45.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Expand \"a.js\" export check in binaryen.js to also work when running on Windows. (#767)\n\n"},{"hash":"edd94ad2fa4c4b4f529aa3778760ad0f9209e279","date":"2016-10-13T22:00:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #774 from WebAssembly/dce-fix\n\ndce fix for globals"},{"hash":"46bd45f74a7dde15b7feb042f880da5526b7a664","date":"2016-10-13T22:00:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #775 from WebAssembly/sl-fix\n\nFix simplify-locals when adding a value to a br_if"},{"hash":"89844da32a940042f0fcd61506e5c422e82c7536","date":"2016-10-14T16:02:32.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Fix check.py to run on Windows and improve it to be configurable to be executed in different environments. (#771)\n\nRelates to #762."},{"hash":"392995b646d2f5f36bf3110eac149892ebda74df","date":"2016-10-14T16:57:17.000Z","author":{"name":"Taiju Tsuiki","email":"tzik@users.noreply.github.com"},"message":"Do not use exported memory as a root set of RemoveUnusedFunctions pass (#763)\n\n* Do not use exported memory as a root set of RemoveUnusedFunctions pass\r\n\r\nRemoveUnusedFunctions pass of wasm-opt fails when the memory is exported.\r\nThat's due to a wrong root set handling on the exported symbols.\r\nThis CL fixes the failure by ignoring non-function exported symbol.\r\n"},{"hash":"0dee67086c9340380975d6e7469fe223a5c8b924","date":"2016-10-14T16:58:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"reuse code in add*Passes\n"},{"hash":"5881b541a4b276dcd5576aa065e4fb860531fc7b","date":"2016-10-14T17:00:06.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"run remove-unused-functions by default\n"},{"hash":"87c3aab6500f2a3a3ca8cecfaf65cc14e407a0cd","date":"2016-10-14T17:26:48.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Fix crash when loading archive files, dereferencing iterator .end() is undefined behavior. (#769)\n\n"},{"hash":"58f7d6cd477701d7fb4c87ffa9e795ddc6423abb","date":"2016-10-14T17:27:36.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Import memory instead of defining/exporting it when using emscripten glue (#777)\n\nThe emscripten JS module code creates the memory using the native wasm\r\nAPIs, and imports that into the wasm module.\r\n"},{"hash":"16b9087e17effc544d82a69b93de17d8f8c979e2","date":"2016-10-15T00:27:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #778 from WebAssembly/passe\n\nAdd remove-unused-functions to default passes"},{"hash":"f38142569b0fc29f3831ada7b23ac928b58c5b42","date":"2016-10-15T17:18:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize loads and stores that mask their values, as the load/store operation masks itself\n"},{"hash":"6deb76d51d58ec910855c38eaf4f2cdd5619076d","date":"2016-10-15T17:28:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize out i32.and of -1\n"},{"hash":"c749ad6c43ad34a23356b80870612028437d79d2","date":"2016-10-15T18:30:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #780 from WebAssembly/load-store\n\nOptimize some common asm.js patterns"},{"hash":"360b5ee6d941995fdc97bb030527537c957ae70f","date":"2016-10-16T23:37:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"reorder locals after simplify-locals, to remove unused locals before coalesce-locals, making it much faster (#783)\n\n"},{"hash":"e2013e6fb81da197fbabacb689cc0d28a0d3fd39","date":"2016-10-17T18:04:58.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Fix some relative paths to absolute to not depend on a fixed CWD. (#781)\n\n"},{"hash":"f386510e65c8d20b69372eb684aa4a1f32931468","date":"2016-10-17T18:31:30.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Use steady_clock to measure code execution time (#776)\n\n"},{"hash":"af0e9e358f3464d7dede48562db7ce7a37f051aa","date":"2016-10-17T19:49:24.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Add new CMake option -DRUN_STATIC_ANALYZER=1 to enable running Visual Studio static analyzer during build. (#786)\n\n"},{"hash":"d9aff8254f82af4cdcbcb5046a3603dfd5093b96","date":"2016-10-18T01:25:27.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Add support for running tests with valgrind. (#785)\n\n"},{"hash":"c3d2775402d74a920577ed317930f3693305354f","date":"2016-10-18T17:49:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add table and memory contents to metrics (#787)\n\n"},{"hash":"b9698cc7076390ae2bb937537850395ae7bad056","date":"2016-10-18T17:50:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Pass options (#788)\n\n* add PassOptions structure, and use it for new -Os param to wasm-opt\r\n"},{"hash":"f94bbcdc60e7e435b15a2f95dfce465766e940a3","date":"2016-10-18T18:01:21.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Minor improvements to the wasm-interpreter debug messages (#784)\n\n* Minor improvements to the wasm-interpreter debug messages\r\n\r\n1. Indent nested blocks for more readable structure (with numeric labels\r\nto make it even clearer)\r\n2. Print the names of the variables used for NOTE_EVALs\r\n3. Print the values of arguments when entering a function call\r\n\r\n* Move Indenter class to wasm-interpreter.cpp\r\n"},{"hash":"f08f75cf2fe1b6b8275f7f7fd4356919616ba95c","date":"2016-10-19T22:07:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Add -O0,-O1,etc. options (#790)\n\nAnd use them in wasm-opt and asm2wasm consistently and uniformly.\r\n"},{"hash":"00354666afcc5c9fa489c446e23febe7efbcd311","date":"2016-10-19T23:49:36.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Add support for i64.store[N] (#789)\n\n* Add support for i64.store[N]\r\n\r\nPreviously storing i64 in the interpreter assumed an 8byte store. Stores\r\nlike i64.store8 would then use the special-case i64 storing code, when\r\nthey could just use the i32.store8 code.\r\n\r\n* Add printf test for interpreter\r\n\r\n* Update wasm.js\r\n"},{"hash":"d9e63fed50f4bfc032123d6fdc5fe052f0e31b2f","date":"2016-10-20T17:23:57.000Z","author":{"name":"juj","email":"jujjyl@gmail.com"},"message":"Fix some C6246: \"Local declaration of 'i' hides declaration of the same name in outer scope.\" warnings. (#795)\n\n"},{"hash":"d887023271985fcf2caa91067e636a0697849589","date":"2016-10-20T19:08:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm-js.cpp code for asm2wasm constructor change (#793)\n\n"},{"hash":"245d63551b520078feb76167fa58444821ae0c22","date":"2016-10-20T19:09:19.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize to i64.store[less] (#792)\n\n"},{"hash":"ec7476c108c6ec7eead873fe76943c3d58df4f4a","date":"2016-10-20T19:10:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Add priority to copies on backedges (#791)\n\n* add a coalesce-locals test for costly backedges\r\n\r\n* add script to strip local names out, for convenient diffing\r\n\r\n* prioritize backedge copies\r\n"},{"hash":"e687b4483c79e37ec5c7c411600a2b332deef4d1","date":"2016-10-20T19:38:09.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Move wasm.cpp and wasm-s-parser into a library (#796)\n\nAlso moves the bulk of the code in wasm-s-parser into a cpp file.\r\nAllows namespace and #include cleanups, and improves j4 compile time by 20%.\r\nShould also make any future parser changes easier and more localized."},{"hash":"b02b5ec36f706d704e19888412d51cd2abf02ca9","date":"2016-10-20T21:27:45.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Adds a pass to print call graphs in .dot (graphviz) format. (#794)\n\n"},{"hash":"9afa80951a3e9e59d5348780370a8b67d829ded1","date":"2016-10-20T22:50:53.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Move wasm binary reader and writer from the header file into libwasm (#797)\n\n"},{"hash":"5177e11e24b08c6a53215b59fe1ac25141763429","date":"2016-10-21T20:40:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support pass test files with -O plus a level, like -O1, -Os, etc.\n"},{"hash":"8f0bfac3a2b7618e2af6e813357193f7d1540219","date":"2016-10-21T20:41:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"LinearExecutionWalker cleanups: call noteNonLinear for only necessary blocks, as some do not have branches, and add a missing call for unreachable which just like return halts control flow\n"},{"hash":"64e9b3fa53e5b4a88ad424f4cdf00f923664246f","date":"2016-10-21T20:42:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"pass PassOptions to OptimizingIncrementalModuleBuilder, so that it can pass them to all the PassRunners it creates, letting them have the proper options at all times\n"},{"hash":"58123ff10f075100bfb4fc5885cae04607564139","date":"2016-10-22T16:10:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #799 from WebAssembly/pass-cleanup\n\nSome tiny pass cleanups"},{"hash":"f4900d69e884f7a40468c4084907bb87405984db","date":"2016-10-22T16:10:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix binary format regression from 9afa80951a3e9e59d5348780370a8b67d829ded1 - we must handle float literals carefully to not change their sign bit on some platforms/compilers, and that commit made relevant functions non-inline which hit a bug (#801)\n\n"},{"hash":"94511d74d495bed63da81d742ea61ea6e1ccabf1","date":"2016-10-24T21:53:10.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Update s2wasm for reordered call_indirect (#802)\n\n* Update s2wasm for reordered call_indirect\r\n\r\nhttps://reviews.llvm.org/D25708 fixed call_indirect for 0xc by\r\nreordering the operands. s2wasm needs to be aware of that too.\r\n\r\n* Update llvm_autogenerated tests\r\n\r\n* Update torture-s tests\r\n\r\n* run auto_update_tests\r\n\r\n* update handwritten dot_s test that had call_indirect with args\r\n"},{"hash":"dc35ac6e83694fda26a78d8b11712c3210e30b36","date":"2016-10-25T18:57:38.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Create CMake install targets for libs and JS files (#798)\n\nThis creates install rules for the binaryen shlib and the C header, as\r\nwell as for the various JS files (wasm.js and binaryen.js, as well as\r\nthose used by emscripten). It recreates in the install target the\r\ncurrent layout used by an in-tree build."},{"hash":"ded69c16a2b3f27dd9b12b184d7045596d2a21d0","date":"2016-10-26T00:03:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize out bool & 1 (#804)\n\n* asm.js corrections to unit.asm.js test\r\n\r\n* optimize out bool&1\r\n"},{"hash":"c5ab566cc3343d3b9e07eab4855b0dbfb2c81afe","date":"2016-10-26T17:11:27.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Binary 0xd changes (#803)\n\n* Renumber opcodes for 0xd\r\n\r\n* Unified type encoding\r\n\r\n* Add reserved flags fields to host instructions and call_indirect\r\n\r\n* Rename flags->reserved\r\n\r\n* Fix line numbers in wast parser\r\n\r\nAlso don't throw if the memory is defined in the same Element as the\r\nexport of memory (the validity is checked later anyway).\r\n\r\n* Skip spec binary.wast\r\n\r\nThe spec testsuite is still on 0xc, so 0xd doesn't match. In order to\r\nupdate to 0xd we need to implement some additional functionality for the\r\nimport test, namely (register)\r\n"},{"hash":"e120601c0b2cbc5722950fb1ce7d0901842f5dff","date":"2016-10-26T17:42:48.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Conditionalize boolean operations based on cost (#805)\n\nWhen we have expensive | expensive, and both are boolean, then we can execute one of them conditionally if it doesn't have side effects."},{"hash":"cf80d22442549707fb748e81028f41c88d41cb87","date":"2016-10-27T00:50:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js and binaryen.js (#806)\n\n"},{"hash":"7047ed25b3ca34aeddb67d0082a998fec0841372","date":"2016-10-27T03:24:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Code pushing (#807)\n\nPush code forward, potentially letting it not execute"},{"hash":"afad1ee305719cf2a34b6dcccff72b07e1a5e34d","date":"2016-10-27T16:19:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize ne of 0 in a boolean context (#808)\n\n"},{"hash":"82639c7c658f4335850fe290f4cd6b34f3fb91f5","date":"2016-10-27T17:56:11.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Set the type of the implicit blocks we use for a loop body in s2wasm (#810)\n\nLoops are modeled in Binaryen IR as having a Block as a body. The block\r\nis added to module walkers and validated like a normal block.\r\nIn s2wasm when we add the blocks, we need to make sure that the type of\r\nthe loop body matches the type of the loop itself, or we run into\r\nissues."},{"hash":"aa06410ccd112d6276e734f8413f2754d32a1f47","date":"2016-10-27T18:28:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"recurse in optimizeBoolean (#809)\n\n"},{"hash":"498210cf0b006ff86e57bd6a68816bda2467266b","date":"2016-10-27T19:28:07.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"recreate simply ifs\n"},{"hash":"af021c52634d66db1a3815f553602b9f9464e023","date":"2016-10-27T21:24:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"merge adjacent br_ifs\n"},{"hash":"a83d29e019f28c0940730bc58f96d703aa614345","date":"2016-10-28T02:42:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #811 from WebAssembly/iffify\n\nSome minor if/br_if opts"},{"hash":"1cdee58fed2479997c1e386236879be87036d60c","date":"2016-10-28T21:35:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor get_local counting out of simplify-locals (#812)\n\n"},{"hash":"c7cb56099d6a3b8b1dfb540cc64f6572c1101ed4","date":"2016-10-29T18:01:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle the case of a br_if whose value is used in merge-blocks\n"},{"hash":"68bf64141dc4d35e6ff174fb68ce5bc50ff27c79","date":"2016-10-29T19:12:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix break value removal in merge-blocks: a br_if's type changes without a value, so finalize the node, and remove the drop\n"},{"hash":"73a2bae85261757303deb9e3ff5be230483d5ba4","date":"2016-10-29T22:19:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize child blocks in merge-blocks when we drop values in them, they may have new subchild blocks\n"},{"hash":"adc568e7d0bde50419a0bae8a96f7dbb0f69cf4d","date":"2016-10-29T22:46:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #813 from WebAssembly/fix-mergeblocks-drop-br-if\n\nFix mergeblocks drop br if"},{"hash":"c8f1c1fc99905e286c15538957e24545a5c72536","date":"2016-10-29T22:46:54.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add an inlining pass (#814)\n\n"},{"hash":"119564e943fb47f081021d69a5456de8d051fe83","date":"2016-10-31T20:42:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize away copies through an if (#816)\n\n"},{"hash":"c8eccc4ceb1d538fc394578c23ba87bb50835b3f","date":"2016-11-01T00:12:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a --memory-base options to asm2wasm, to fix the memory base instead of depending on an import\n"},{"hash":"26cf3235f9f73a8f187fa75f274bc517a65c3fe9","date":"2016-11-01T18:25:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a pass to optimize memory segments, and pack memory in asm2wasm\n"},{"hash":"1bcbf5fd9b6cbedf302309eaae719115b2d83d4a","date":"2016-11-01T22:44:03.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Work around dot quirks related to updating node styles. Remove indirect call edges as they greatly increase the size of the graph. (#818)\n\n"},{"hash":"0ff4359de75b4dd2a786dfa50cb17b3ec01a701a","date":"2016-11-02T04:31:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix large f32 consts, fixes #817 (#820)\n\n"},{"hash":"22699ebad0972fa7604dd8ffd26f9f6607e82fb0","date":"2016-11-02T04:32:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #819 from WebAssembly/optimize-memory\n\nPack memory segments"},{"hash":"5af71eea09abfa9078c62633cea89b121ec4ec08","date":"2016-11-04T21:55:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Fixes fround of an unsigned integer (#821)\n\n* fix fround of unsigned\r\n\r\n* add testing for f32 ops, and remove a duplicate test (now that f32 is on by default in wasm, we don't need to check with and without PRECISE_F32)\r\n\r\n* update wasm.js and binaryen.js\r\n"},{"hash":"fd5d26f549ec95f46d8696dac51ba5b5f7316248","date":"2016-11-05T00:19:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"remove-unused-brs after coalesce-locals\n"},{"hash":"13ce3488333f70607411eb504ea2046fe2dc7c6d","date":"2016-11-05T00:24:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize booleans through i32.or\n"},{"hash":"5447c53b612c8d0f0d0902efe5053f2f81bd1595","date":"2016-11-05T23:49:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add variants of simplify-locals with and without teeing and structural opts\n"},{"hash":"57d0a549d715a25b471c8913c3013fc407eceea6","date":"2016-11-06T18:13:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve local simplication: simplify without if/block structure values before coalesce, so that coalesce can remove all copies, then do another pass of full simplification after it\n"},{"hash":"033b5e161e677173bda01aad9e6850545b93c97e","date":"2016-11-06T19:07:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #826 from WebAssembly/opts\n\nA few minor optimizations"},{"hash":"962c9a63f854f888e4f0fc48f217beefccce4266","date":"2016-11-07T00:48:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make ExtractFunction use an env var instead of a hardcoded string\n"},{"hash":"4a3892d31288bded757e3805cb53d4e20ccc6be0","date":"2016-11-07T01:16:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle a label setting inside the if-body of a label value in RelooperJumpThreading\n"},{"hash":"89d393ed02f6b15a3a8dc60b489f969184070625","date":"2016-11-07T18:20:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #827 from WebAssembly/relooper\n\nReloop if-loops with label targets"},{"hash":"3dac399ba503e05ee014e96a7ce9c82f29f6981c","date":"2016-11-08T00:47:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support assigns of f32 to HEAP64 in asm2wasm (#830)\n\n"},{"hash":"7d0bb485aa40492c85181f477ae39e6bca56234b","date":"2016-11-09T21:38:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a --symbolmap option to wasm-as, which emits a side file with the name mapping (similar to Names section, but external)\n"},{"hash":"f0c32b28cb01fe17cf86c0f48b56bb221407ad76","date":"2016-11-09T22:43:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit entries in the Names section for imports as well, as was recently changed in the spec\n"},{"hash":"a3afc150c3768b351434c734448b7ab456d17f57","date":"2016-11-11T00:45:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #831 from WebAssembly/symbol-map\n\nSymbols fixes"},{"hash":"d0ee29345f9c697073d5dee7949dae0ee45be836","date":"2016-11-11T00:46:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"show a warning with guidance when a memory size incompatibility issue makes wasm compilation fail (#834)\n\n"},{"hash":"08050a4cc65958c92dbfbd62dfdaf8031beb3955","date":"2016-11-11T17:41:59.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Fix Windows colors (#833)\n\n* Fix Windows colors and update README.md\r\n"},{"hash":"76c9f5b2ad40efab9d712c4903782ba1059cc2dc","date":"2016-11-11T18:21:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js (#836)\n\n"},{"hash":"f9695926d067cd66a296c38b42da2ae3bcb1131d","date":"2016-11-11T18:22:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve memory growth ignoring code in asm2wasm, we may not have the marker symbols (e.g. in ONLY_MY_CODE that is the case) (#835)\n\n"},{"hash":"485b1dca62848be92f9fcce4a70a5c63eb5015ee","date":"2016-11-12T01:05:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Run wasm natively by default, no fallbacks to interpreting (#838)\n\n* run wasm natively by default, no fallbacks to interpreting\r\n\r\n* improve error message, suggesting people add methods if they want more\r\n"},{"hash":"4f18246f37becf6aae00bd8863401ec44462a08c","date":"2016-11-12T01:07:00.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add --mem-max option to set the maximum size of memory, overriding the default (which is the normal size of memory if no growth, or infinity if growth) (#837)\n\n"},{"hash":"d9e318c9d8228212ea83cf3baad38db88852ff1a","date":"2016-11-15T19:24:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix python spacing in some scripts (#841)\n\n"},{"hash":"3da6038303d25ffa2599971c94967a86a2300886","date":"2016-11-26T01:13:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix a reordering bug in merge-blocks (#846)\n\n"},{"hash":"e2581997bbf81b828d9c60601b003b0f7330aef3","date":"2016-11-28T20:05:27.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Wrap description (#839)\n\n"},{"hash":"d0ba62047ed64a7169ec4565020adaff7b2649ed","date":"2016-11-28T23:02:21.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"increase limit in RelooperJumpThreading (#847)\n\n"},{"hash":"724814c5adafaacac693f9a11e3517e411c4c5de","date":"2016-11-28T23:11:17.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"more consistent placement of & and *, on the type (#848)\n\n"},{"hash":"7d2d9ec9f2f936d0a53b7dc60089456a0654d29c","date":"2016-11-30T03:35:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize added factors into load/store offsets (#850)\n\n* optimize added factors into load/store offsets, removing the add\r\n\r\n* optimize offset of load/store of a constant into the constant"},{"hash":"36be3e0151dd7357e47b2d8f432bdd706a30466c","date":"2016-11-30T23:02:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Fix regression from #850 (#851)\n\n* fix regression from #850 - it is not always safe to fold added offsets into load/store offsets, as the add wraps but offset does not\r\n\r\n* small refactoring to simplify asm2wasm pass invocation\r\n"},{"hash":"4caea4872aed6d1cb7ef42c9a2364870eb574e41","date":"2016-11-30T23:34:39.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Handle importing globals in s2wasm (#843)\n\n* Handle importing globals in s2wasm\r\n\r\n* Make importedGlobals a set of Names, make Names hashable\r\n\r\n* Revert \"Make importedGlobals a set of Names, make Names hashable\"\r\n\r\nThis reverts commit 1d0ca7a5e3839b15ca60593330979864c9c3ed60.\r\n\r\n* Refactor relocation parsing to handle expressions directly\r\n\r\n* PR Feedback\r\n\r\n- Move comment where it belongs\r\n- Add comment about ownership to addRelocation\r\n- Remove do-nothing parseImportGlobal\r\n\r\n* Reword \"imported globals\" to \"imported objects\"\r\n\r\n- Flip isObjectImported to isObjectImplemented, for consistency\r\n\r\n* Add tests for s2wasm globals.\r\n\r\nAlso implement import relocation expression handling\r\n\r\n* Simplify globals.s test\r\n\r\n* Fix memory leak of relocation\r\n\r\n* Use unique_ptr instead of delete in getRelocatableExpression\r\n"},{"hash":"1a9f60907a7e5c36c4040b4af004dc09d29595f7","date":"2016-12-01T19:36:37.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Generate global imports separately from emscripten glue (#852)\n\n"},{"hash":"ba7638d561f09ec24f90d571763b2ef84b775318","date":"2016-12-01T22:07:37.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Update known test failures and waterfall revision (#854)\n\n"},{"hash":"9f78d931f450163da81672b42697b98776746918","date":"2016-12-06T15:41:54.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Refactor check.py so that groups of tests can be split into separate … (#849)\n\n* Refactor check.py so that groups of tests can be split into separate files\r\n\r\n- Move helper util functions into test/shared.py\r\n- Move scripts/support.py to test/support.py\r\n- Split s2wasm tests into its own file\r\n\r\n* Fix flake8 warnings for shared.py and s2wasm.py\r\n\r\n* Move test scripts from test/ to scripts/test/\r\n\r\n* Replace 'from shared import *' with explicit imports\r\n"},{"hash":"76ddda73d630d50839c2eef5e86a96e16625b6ed","date":"2016-12-07T01:58:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use exported static base and bump (#853)\n\n"},{"hash":"6c4f6d7022ebdd640f2a8e4df8c4885774b9b184","date":"2016-12-08T00:30:52.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ignore unknown user sections, fixes #857 (#858)\n\n"},{"hash":"e44343a76d96a836e7f0abc0779d774e90621674","date":"2016-12-08T00:31:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"hash the type of nodes (#856)\n\n"},{"hash":"e0d5a85961d21d651298d6f069a3753e011aa280","date":"2016-12-08T02:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add table-max option, and make it and mem-max set the limit to no limit for -1\n"},{"hash":"22f7562e2291c6b8f377c41dd5af797c4bb9df4e","date":"2016-12-08T02:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix table import size when no maximum is provided\n"},{"hash":"d88cd2ddeb3c8a690533b4d758f74a83f057eb06","date":"2016-12-08T02:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix the order of emitting the start section\n"},{"hash":"2b0a4276cac1bb247e4f3a5e4333734a6e35794e","date":"2016-12-08T02:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use wasmMaxTableSize\n"},{"hash":"5242ab0fe2ec18f249aafc34fd73a0b36d1e48ac","date":"2016-12-08T02:50:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"export the wasm table on Module\n"},{"hash":"49bdfd20094e909fb6f4ea989e2a2cbfe01e8741","date":"2016-12-08T02:50:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use tableBase for the table segments\n"},{"hash":"98e9e604c7e2e4f928abe8f05691df90cddf09e4","date":"2016-12-08T02:50:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a RemoveUnusedModuleElements pass, and make LegalizeJSInterface create TempRet0 if needed (otherwise we might remove it before we use it)\n"},{"hash":"7bd25106baf71882badec1e03f45f6cae5d31560","date":"2016-12-08T02:50:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"support asm.js numeric exports by creating a global and exporting that\n"},{"hash":"420f28ff46322b1d9eddd20ce4bd4f30b42fa311","date":"2016-12-08T02:50:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"convert ftCall_* and mftCall_* into table calls\n"},{"hash":"0a498b945e6fe51db9fd3e5b76997e3f40b735a7","date":"2016-12-08T02:50:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make legalizeJSInterface handle f32s as well, which are not valid in asm.js ffis\n"},{"hash":"b0d3056aa9dfda88f86db9d580989372ab198f11","date":"2016-12-08T02:50:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"lower min and max in asm2wasm in wasm f*.min/max\n"},{"hash":"9cd6b3ef888e992fd2e0d90106ebd6a3b1ae83ec","date":"2016-12-08T02:50:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"comment\n"},{"hash":"92fb30a71c901c08bf676215efa0103cf23bcab8","date":"2016-12-08T02:50:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify we don't legalize table elements\n"},{"hash":"8ce6594dc19cb3203267d1f5e8f335f0ee5a450e","date":"2016-12-08T02:50:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix legalization issues with f32s\n"},{"hash":"7a7d142903b6eb18854cb9b955fc728a7e3853bd","date":"2016-12-08T02:50:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"properly legalize imported table elements\n"},{"hash":"97968a879d0b55baccb5f72627fca84a6a015356","date":"2016-12-08T02:50:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle imports in tables in interpreter\n"},{"hash":"e5704f392404b1f69d762217b89e3b8736277f08","date":"2016-12-21T19:10:24.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix copy of call_indirect bug (#860)\n\n"},{"hash":"575d695762f545e1c2784595d9c926488062f383","date":"2016-12-28T02:42:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #859 from WebAssembly/linking\n\nDynamic linking"},{"hash":"c25d24447aeede9df0e76aac5176cf525522343b","date":"2016-12-30T22:02:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"emit globals before table and memory, because they may use a global for their element/segment offsets\n"},{"hash":"585fd8af473354b9dfa7e57c5c6af396fa60945e","date":"2016-12-30T22:02:14.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"memoryBase and tableBase should not be mutable, as we need to use them in segment/element offsets\n"},{"hash":"892e6524c147c8ff21e68556efee799a9c67f63c","date":"2016-12-30T22:02:15.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not add memoryBase/tableBase if already there\n"},{"hash":"a47a3e7b4181f8cef2e7a7b371e52da71a859d2d","date":"2017-01-03T18:51:32.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Print long string in one call (#864)\n\n"},{"hash":"f5d0aa800e45488aa2277e97edf9383722c00969","date":"2017-01-05T00:43:52.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"ensure exports are added deterministically from binaries\n"},{"hash":"967c1e4181702f6058b7bfbad1d6ed54887813b7","date":"2017-01-05T01:09:36.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"mark memory as existing when it is created in the C API\n"},{"hash":"e1371b9c6ae1ad9a7e758f43af4d56def1f331d3","date":"2017-01-05T01:32:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Handle stacky code (#868)\n\n* handle stacky code in binaries, using a block+local\r\n"},{"hash":"649bbfc66fff32bf2bb34eec2106e28a4adef585","date":"2017-01-05T01:33:52.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle a module which has no globals at all\n"},{"hash":"9be46c626ce03d2967c817a3f8f2ffce0bc06a26","date":"2017-01-05T01:33:52.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle a binary that breaks to return\n"},{"hash":"4935b96a60fc2d45dd5229acb9c784f278c37b78","date":"2017-01-05T18:59:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #871 from WebAssembly/fix-c-api-unused-mem\n\nMark memory as existing when it is created in the C API"},{"hash":"90e06072f321507e61120bed891642f191c63547","date":"2017-01-05T23:33:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #863 from WebAssembly/linking-fix\n\nLinking cleanups"},{"hash":"9ccea0e0f97538c8c2349144e83c20bbc6c8c413","date":"2017-01-10T21:07:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #865 from WebAssembly/fix-ab\n\nFix AngryBots parsing"},{"hash":"7e933f4e5a8870e7dfa282c86cfd9b6c49118d0a","date":"2017-01-12T20:24:55.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"add a test showing unreachable code after a return\n"},{"hash":"d14499fd0696e5acc5f3c06ab2fb551ff654c2be","date":"2017-01-12T20:27:00.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"add a dce at the end of asm2wasm, so it handles code changes from intermediate optimization passes\n"},{"hash":"d908ea7ba67c3544bcaa7906ce8e61cb5bf0846d","date":"2017-01-12T22:21:29.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #880 from WebAssembly/dce-moar\n\nDCE at the end of asm2wasm"},{"hash":"370029bf981bee0c88dfdc7b9f4739959a1b8c05","date":"2017-01-12T23:40:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm: when a switch is too big, create an if-else chain instead (#877)\n\n"},{"hash":"eafc06f8cf2b815d151b67c67086f33b3dae6b8b","date":"2017-01-14T01:45:01.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Allow release builds with asserts on windows (#882)\n\nThe posix build enables assertions on release builds with\r\nADD_NONDEBUG_COMPILE_FLAG(\"-UNDEBUG\")\r\nbut the windows build does not. This PR adds /UNDEBUG to the release\r\nbuild flags but has the additional complication that /DNDEBUG is added\r\nto CFLAGS by CMake by default, and MSVC will warn about having /UFOO\r\nafter /DFOO on the command line. So we scrub DNDEBUG from CFLAGS\r\nas well.\r\n\r\nAdditional windows build cleanups:\r\n\r\nDisable conversion/truncation warnings\r\nCanonicalize flag style to use slashes everywhere instead of mixing\r\nMSVC uses /Od (not /O0) to disable optimization"},{"hash":"665de854468175e9254ed7218fe7dd65bc5bc55e","date":"2017-01-19T18:31:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle an unreachable param to an export in asm2wasm, which is ignorable (#885)\n\n"},{"hash":"00f432220444234e6ddca827f82cabcb6a2ef92a","date":"2017-01-19T18:34:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"DCE even in -O0 (#884)\n\n"},{"hash":"009f172a595d5554e7e85f6acacef34e9d4e8010","date":"2017-01-20T03:05:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix bustage caused by conflict between last two landings (#886)\n\n"},{"hash":"21eb2c7cba6af6e01219f1f3b06e82dfcf2788e8","date":"2017-01-24T21:44:04.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Export memalign along with malloc and friends (#888)\n\nEmscripten's mmap2 syscall started using memalign instead of malloc with kripken/emscripten#4874, so we need to export that as well."},{"hash":"8bcdfb20d73c931529a458fb0dd3078724c38315","date":"2017-01-26T19:04:47.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"code-pushing fix: we cannot push a set_local with side effects, as it may not execute any more (#890)\n\n"},{"hash":"64284970344ce5463adada38e348230256b31226","date":"2017-01-26T23:11:43.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Read/Write Abstraction (#889)\n\n * Added ModuleReader/Writer classes that support text and binary I/O\r\n\r\n * Use them in wasm-opt and asm2wasm"},{"hash":"818fa1dc19b0edcaaf1a8aa78b94bf052420252d","date":"2017-01-30T23:25:56.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"refactor asm.js ast to use a number node directly instead of [NUM, number]\n"},{"hash":"abb48f7460b26e14076fd34ed1f7274ab3a949cc","date":"2017-01-31T18:43:19.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"refactor asm.js ast to use a string node directly instead of [NAME, string]\n"},{"hash":"e8d6188499260d599b2002d1b17405220d22869a","date":"2017-01-31T22:17:39.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"use MixedArena in asm.js ast\n"},{"hash":"7bc8f14d8699f56777a763f99ad8098fcf7c0583","date":"2017-02-01T00:27:50.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Make ast_utils into a library (#892)\n\nSplit ExpressionAnalyzer and ExpressionManipulator into cpp files, and turn their giant template functions into simple functions which take a callback.\r\nMore organization, fewer mammoth headers, makes the build a few seconds faster, and the binaries a couple MB smaller."},{"hash":"f2af5a9d587cbdeb8f164fb5d37d20daef527213","date":"2017-02-01T00:47:00.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"refactor asm.js ast to use an Assign node\n"},{"hash":"f6c0bc26b65c6cfd58d1bb011c1587d343c42ab5","date":"2017-02-01T04:25:01.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"refactor asm.js ast to not use STAT nodes - we don't need to print the asm.js anyhow, so knowing where ;s are is unnecessary bloat\n"},{"hash":"ae6612e4c394af30bb0871ad9735ac853811f807","date":"2017-02-01T04:55:42.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"refactor asm.js ast to use an AssignName node, for the common case of assigning to a name and not an arbitrary ast node\n"},{"hash":"5725c4376cf674378084e700073d0e3a7f3c95f3","date":"2017-02-02T05:28:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #893 from WebAssembly/shrink-asm-parser\n\nShrink asm.js ast"},{"hash":"47457e4d7d5fa750c343d288b3f5a607d27f66ff","date":"2017-02-02T16:58:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"only read first 4 bytes to check if a file is a wasm binary (#894)\n\n"},{"hash":"04fc050edf3eeff85a77910a4d6821bff59fade2","date":"2017-02-04T00:06:02.000Z","author":{"name":"Eric Holk","email":"eric.holk@gmail.com"},"message":"Remove unused captures to fix warnings/errors when compiling with Clang (#896)\n\n"},{"hash":"985bcba6239792ebcb3808f1066ca6ea20ac5688","date":"2017-02-07T00:24:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Improve handling of implicit traps (#898)\n\n* add --ignore-implicit-traps option, and by default do not ignore them, to properly preserve semantics\r\n\r\n* implicit traps can be reordered, but are side effects and should not be removed\r\n\r\n* add testing for --ignore-implicit-traps\r\n"},{"hash":"76c8f82d5cf98171ff46ed4bf36791d3b891357f","date":"2017-02-07T19:24:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm debuginfo (#895)\n\n* parse file/line comments in asm.js into debug intrinsics\r\n\r\n* convert debug intrinsics into annotations, and print them\r\n\r\n* ignore --debuginfo if not emitting text, as wasm binaries don't support that yet\r\n\r\n* emit full debug info when -g and emitting text; when -g and emitting binary, all we can do is the Names section\r\n\r\n* update wasm.js\r\n"},{"hash":"08345e231133cd44b956f11a68f72a5c7b5fd1d9","date":"2017-02-15T23:18:59.000Z","author":{"name":"Loo Rong Jie","email":"loorongjie@gmail.com"},"message":"Hide dead code (#909)\n\n"},{"hash":"97077693a6458d51bd5b3dc85187d5a4bd16c3ee","date":"2017-02-16T19:34:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize precise mode integer ops (#907)\n\n* improve precise integer operations: call into a wasm function to do the possibly-trapping div/rem, which handles the corner cases, instead of an ffi. also fix a bug in the existing parallel 64-bit code for this\r\n\r\n* remove no longer needed wasm.js-post.js file (it moved into emscripten repo)\r\n"},{"hash":"5e29a613bb8bf059f5f7b9ec2f166f8d2e413ac5","date":"2017-02-16T22:27:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Fix emitting of unreachable block/if/loop (#911)\n\n* an unreachable block is one with an unreachable child, plus no breaks\r\n\r\n* document new difference between binaryen IR and wasm\r\n\r\n* fix relooper missing finalize\r\n\r\n* add a bunch of tests\r\n\r\n* don't assume that test/*.wast files print to themselves exactly; print to from.wast. this allows wast tests with comments in them\r\n\r\n* emit unreachable blocks as (block .. unreachable) unreachable\r\n\r\n* if without else and unreachable ifTrue is still not unreachable, it should be none\r\n\r\n* update wasm.js\r\n\r\n* cleanups\r\n\r\n* empty blocks have none type\r\n"},{"hash":"4d2978f8a82a8999c1b6ced85a7ec4996b10f36b","date":"2017-02-16T23:20:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm version to 0x01 (#913)\n\n* update wasm version to 0x01, in prep for release, and since browsers are ready to accept it\r\n\r\n* update wasm.js\r\n"},{"hash":"1d72468f464a725afdee4b28c5f6bd4d7a631c92","date":"2017-02-17T00:50:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add sqrt test (#912)\n\n"},{"hash":"a78dddbcf2bf9f23840c7074ce16c04a8d55c3df","date":"2017-02-17T05:37:39.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize sign-extends (#902)\n\n* optimize sign-extend output\r\n\r\n* optimize sign-extend input\r\n"},{"hash":"0728a53fb6bf0540b9789c7bcd26e195800c5ecc","date":"2017-02-17T06:11:13.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize linear sums (#904)\n\n"},{"hash":"c6ea79d1532face076c2dfeb8eadb58319e4e5fd","date":"2017-02-17T06:42:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize \"squared\" operations (#905)\n\n* optimize 'almost' sign extends: when we can remove one entirely, then extra shifts can be left behind. with that in place, we can then optimize 'squared' operations like shl on shl, as doing so does not break our sign extend opts\r\n"},{"hash":"41eee37bc153a68b0f0c46162e21f825d1784499","date":"2017-02-17T06:45:35.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"optimize sign-extends to ne\n"},{"hash":"51d57932a34dd265a8c3c35a6773387e5dd7bc9e","date":"2017-02-17T06:45:36.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"optimize sign-extends to eqz\n"},{"hash":"f57637d7164d8a6369d2ba281559b8d3cef7bd33","date":"2017-02-17T06:45:36.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"optimize sign-extends to a boolean\n"},{"hash":"2553266cf716df3f03d5d057887ed660c12f4fb6","date":"2017-02-17T06:45:37.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"optimize out add/sub of 0\n"},{"hash":"c06b3762a09e95443fd0f159b2675209db1dbb29","date":"2017-02-17T06:45:37.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"optimize out a sign-ext into a store of the same size\n"},{"hash":"85d2c4ffdaf3934f7e529cc43842a03c3304107b","date":"2017-02-17T06:45:37.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle tee_local in getMaxBits\n"},{"hash":"6affe6fb4d06550a40b4d73efe19c085317854d7","date":"2017-02-17T06:45:38.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle load in getMaxBits\n"},{"hash":"8a4edd97499120430fe1c6f2fdcbb0f5920cceab","date":"2017-02-17T06:45:38.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle fallthrough values in load_s/u and sign/zero-extend optimization\n"},{"hash":"53b94fca7da5eeb08bb9b9802367a29c3e811e92","date":"2017-02-17T06:45:38.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"fix fuzz testcase, xor maxBits is the max, not the min\n"},{"hash":"f05efb982f8472c1dd6beb0e8dbc8afc73e82fcb","date":"2017-02-17T06:45:38.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"tiny refactoring in OptimizeInstructions, for clarity\n"},{"hash":"04d38f6f881b16a014c47e897a4590d76ec548ff","date":"2017-02-17T06:45:39.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"remove unneeded masks using getMaxBits\n"},{"hash":"eec567640d154147fb88754fd13aada738a63eef","date":"2017-02-17T06:45:39.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"use local info about maxBits and sign-extendedness in OptimizeInstructions\n\nfix the maxBits of a signed load, which this uncovered - all the bits may be used in such a case\n"},{"hash":"ced44f4fd543b50980d4bf674fa6a30f9c31790f","date":"2017-02-17T06:45:40.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"take into account loads into local info in OptimizeInstructions\n"},{"hash":"ff8705ef08502411093cef7a90c7f30833147af1","date":"2017-02-17T06:45:40.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"optimize a compare of a load_s and a sign-extend into a load_u and a cheaper zero-extend\n"},{"hash":"5b248af887acdce430c97eb953e3bbdfe0494c6e","date":"2017-02-17T06:45:41.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"fix and clean up fallthrough logic in OptimizeInstructions\n"},{"hash":"13f9265b9632f887e6c22a024c4c4d8ded187dd1","date":"2017-02-17T06:45:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor sign/zero extension code into nice headers, and prepare PickLoadSigns pass\n"},{"hash":"63230c06a8d98f4326de5d1a2ef6e908ed6a5945","date":"2017-02-17T06:45:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finish PickLoadSigns pass\n"},{"hash":"67fd2a8bece9b4ecad4d0bef2d357245492a66bb","date":"2017-02-17T06:45:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix a sign/unsigned compare compiler warning\n"},{"hash":"dafe89619cfae269b8f3e9e01ead6102a9d168ad","date":"2017-02-17T16:00:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #906 from WebAssembly/opts-super-4\n\nMisc opts"},{"hash":"359c6133b3d7d6451cf65f3edce0bcf319f9af22","date":"2017-02-17T21:28:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow traversing the offset inits of table/memory segments (#916)\n\n"},{"hash":"d946d68963d4731020d7dc0e41f331e0ab89591c","date":"2017-02-17T21:49:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up raw pointer import->functionType, make it a Name like everything else (#915)\n\n"},{"hash":"a32c0eff473d39b816679a5f7c65b522886726b0","date":"2017-02-21T18:29:59.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"allow traversing the inits of globals (#917)\n\n"},{"hash":"c27040e315f75f5b5c50078e539714973dc21d12","date":"2017-02-21T18:54:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"read unknown users sections as binary data stored on the Module (#918)\n\n"},{"hash":"38a029f5b697878d13e41d5ecdc6c5fa69837b77","date":"2017-02-21T22:09:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix asm2wasm import type setting - set the type of used calls based o… (#920)\n\n* fix asm2wasm import type setting - set the type of used calls based on the context, early, so it's valid in the optimizer\r\n"},{"hash":"7e133b55c7babaabb83fc0f665b4a60022d4b8fb","date":"2017-02-23T15:27:08.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Fully handle EM_ASM in s2wasm (#910)\n\n* Fully handle EM_ASM in s2wasm\r\n\r\n* Iterate with size_ts, remember to erase from importsMap as well\r\n\r\n* Fix dot_s test EM_ASM signatures\r\n\r\n* Move Name out to its own file, support/name.h\r\n\r\n* Move removeImportsWithSubstring out of Module class\r\n"},{"hash":"3ddf9405cf887c1e0e0034b364c453e7c31acf4c","date":"2017-02-23T18:22:02.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Default Walker subclasses to using Visitor<SubType> (#921)\n\nMost module walkers use PostWalker<T, Visitor<T>>, let that pattern be\r\nexpressed as simply PostWalker<T>"},{"hash":"7c183a6ec06fa32098c9eb61993f857d821e0afe","date":"2017-02-23T18:48:02.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Refactor AsmConstWalker to use smaller subfunctions (#923)\n\n* Refactor AsmConstWalker to use smaller subfunctions\r\n\r\n* Replace cashew::IStrings with Names\r\n"},{"hash":"db6f2bf0fa8cd1913bd498ca17641e2bda44a263","date":"2017-02-23T20:59:42.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix BINARYEN_PASS_DEBUG option (#908)\n\n* fix BINARYEN_PASS_DEBUG option\r\n\r\n * Add isNested property to passRunner"},{"hash":"6df76ac7cffc27ed181f26b40b63676bfecb78b2","date":"2017-02-27T19:34:23.000Z","author":{"name":"Kazuki Oikawa","email":"k@oikw.org"},"message":"Fixes compilation error on clang (#925)\n\n"},{"hash":"9607b1b7692edad2fe379ade5ee146132fa5f0d7","date":"2017-02-28T19:00:34.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm import overloading fix (#924)\n\n* asm2wasm should not promote an overloaded import result to f64 if it is a single type and void\r\n"},{"hash":"8968a50fd4248860cc79ee20eabf4071336f0481","date":"2017-03-01T03:21:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"do not merge a drop out of an if if the sides have different types, then the if would be invalid (#927)\n\n"},{"hash":"a452f92aeb96e9617a20146503720cd5acb64f29","date":"2017-03-06T23:02:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"stop doing dce in -O0, which was just need temporarily while browsers figure out the spec (#932)\n\n"},{"hash":"71804e2bfd1ba49b7dd4ce82b6ad26ba13f1bca8","date":"2017-03-07T21:56:35.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Use 3 modes for potentially trapping ops in asm2wasm (#929)\n\n* use 3 modes for potentially trapping ops in asm2wasm: allow (just emit a potentially trapping op), js (do exactly what js does, even if it takes a slow ffi to do it), and clamp (avoid the trap by clamping as necessary)"},{"hash":"d6508e1f9cef33c43016e4da7dd4b94392f280a9","date":"2017-03-08T21:54:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Local CSE (#930)\n\nSimple local common subexpression elimination. Useful mostly to reduce code size (as VMs do GVN etc.). Enabled by default in -Oz."},{"hash":"be4be557567251a73f40bfd7a48220b33f5ddc58","date":"2017-03-09T21:32:03.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use a single space for pretty printing of wasts, so massive wasts are less unruly (#928)\n\n"},{"hash":"d79d71ac7dfe807a5e98b94c9d1f67df4da7998a","date":"2017-03-10T00:46:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix sign-ext opt issues (#935)\n\n* fix a bug where compared sign-exts of different sizes were turned into zero-exts\r\n\r\n* fix a bug where we consider an almost sign-ext as ok to change the sign of a load inside it, ignoring that the load has the extra shifting\r\n"},{"hash":"d54c03e99f9a43bde1b6cec94f05b0af412d0e4f","date":"2017-03-10T18:44:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize pow (#934)\n\n* optimize pow(x,2) => x*x\r\n\r\n* optimize pow(x, 0.5) => sqrt(x)\r\n"},{"hash":"62e9f5d881e2d7e7f9f5da845ed2dbc176bc0bc5","date":"2017-03-10T21:10:17.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Wasm h to cpp (#926)\n\n* Move WasmType function implementations to wasm.cpp\r\n\r\n* Move Literal methods to wasm.cpp\r\n\r\n* Reorder wasm.cpp shared constants back to top\r\n\r\n* Move expression functions to wasm.cpp\r\n\r\n* Finish moving things to wasm.cpp\r\n\r\n* Split out Literal into its own .h/.cpp. Also factor out common wasm-type module\r\n\r\n* Remove unneeded/transitive includes from wasm.h\r\n\r\n* Add comment to try/check methods\r\n\r\n* Rename tryX/checkX methods to getXOrNull\r\n\r\n* Add missing include that should fix appveyor build breakage\r\n\r\n* More appveyor\r\n"},{"hash":"c1e18d8aded2b86cfd8fb86886ad74cee2f14535","date":"2017-03-13T23:48:38.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"finalize interim ifs in relooper, and other if handling issues (#940)\n\n"},{"hash":"a407b989ecc0c57ed4862ceaaa25acb0a41af63c","date":"2017-03-14T21:06:36.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix emitting of unreachable ifs (#944)\n\n"},{"hash":"5079b89949d4c5c5c7b6d29658d058db459be9e6","date":"2017-03-16T20:57:26.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Skip .size directives that follow .import_global directives (#949)\n\n"},{"hash":"ee501dfb427e675adee7790a6dbc7e90f9f5a4ca","date":"2017-03-16T21:12:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"add a pass to log execution traces via instrumenting the code (#950)\n\n"},{"hash":"7b71bb6b0d3966ce42b631d433c772e24d6e68be","date":"2017-03-22T01:25:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Fix comparisons of sign-extends to weird constants (#956)\n\n* fix eq/ne of sign-ext with a constant, when the constant can never be equal to it as it has the effective sign bit but not the upper bits above it set, which the sign-ext would emit\r\n"},{"hash":"f1c992f946438ba8785c418e769ee024606fdde0","date":"2017-03-24T22:45:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"New binaryen.js (#922)\n\nNew binaryen.js implementation, based on the C API underneath and with a JS-friendly API on top. See docs under docs/ for API details."},{"hash":"114e4cec95f6b0d1aafd9d7a976b0fb2c0fddc36","date":"2017-03-29T17:20:25.000Z","author":{"name":"Morris Hafner","email":"mmha@users.noreply.github.com"},"message":"Fix build with gcc 7 (#957)\n\n1. Add a missing <functional> include\r\n2. Put the // fallthrough comment after the closing bracket so the compiler does not emit a implicit fallthrough warning."},{"hash":"6d617838304dd753bd4eea3b1bc1d38f467d8d37","date":"2017-04-07T18:35:44.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"Don't iterate over removed-but-not-erased functions (#961)\n\n"},{"hash":"4d452bd81adbd18ef793ab1a02f28c15abc080d3","date":"2017-04-11T20:04:13.000Z","author":{"name":"Marco Trivellato","email":"marcot@unity3d.com"},"message":"fix asm2wasm stack-overflow on windows (#962)\n\n* fix asm2wasm stack-overflow on windows\r\n\r\n* set stack size to 8mb for consistency with Linux/Mac\r\n"},{"hash":"0f3102d13617e70b598e7d82f12684d8fa01969b","date":"2017-04-12T17:21:02.000Z","author":{"name":"Jakub Jirutka","email":"jakub@jirutka.cz"},"message":"Fix install locations per FHS and allow to customize them (#958)\n\n* Fix install locations per FHS and allow to customize them\r\n\r\nInclude built-in cmake module GNUInstallDirs that defines customizable\r\nCMAKE_INSTALL_* variables with common defaults per FHS.\r\n\r\nNew FS structure when installed with `CMAKE_INSTALL_PREFIX=/usr`,\r\n`BUILD_SHARED_LIBS=ON`:\r\n\r\n    usr\r\n    ├── bin\r\n    │   ├── asm2wasm\r\n    │   ├── s2wasm\r\n    │   ├── wasm-as\r\n    │   ├── wasm-dis\r\n    │   ├── wasm-opt\r\n    │   └── wasm-shell\r\n    ├── include\r\n    │   └── binaryen-c.h\r\n    ├── lib64\r\n    │   └── libbinaryen.so\r\n    └── share\r\n    │   └── binaryen\r\n    │       ├── binaryen.js\r\n    │       └── wasm.js\r\n    └── src\r\n        └── js\r\n            ├── binaryen.idl\r\n            ├── binaryen.js-extended.js\r\n            ├── binaryen.js-post.js\r\n            └── binaryen.js-pre.js\r\n\r\nSee https://cmake.org/cmake/help/v2.8.7/cmake.html#module:GNUInstallDirs\r\nfor more information about used variables.\r\n\r\nFixes #951\r\n"},{"hash":"5fb669ac8cca51baff8b3a6478d6fd3ef92a7c97","date":"2017-04-12T20:15:31.000Z","author":{"name":"Max Klein","email":"max.kleinleibold@gmail.com"},"message":"s2wasm: Add command line option for importing memory (#963)\n\nThis option allows to import the linear memory from JS code instead of exporting it.\r\n--emscripten-glue does this too but often the emscripten glue isn't needed, so this option only affects the memory.\r\n\r\nAll the code necessary for importing the memory basically already exists, so nothing except for the command line option itself had to be added."},{"hash":"57a2bb96c7b8a98433446828aca845a9e9be8c3d","date":"2017-04-13T15:49:52.000Z","author":{"name":"pipcet","email":"pipcet@users.noreply.github.com"},"message":"Extensible name section (#933)\n\nSee https://github.com/WebAssembly/binaryen/issues/914.\r\n\r\n* extensible name section support: read function names, too\r\n\r\n* c-api-unused-mem.txt: change expected size to match new name section\r\n\r\n* * check subsection size matches\r\n\r\n* print warning for unknown name subsections (including the local\r\n  section)\r\n"},{"hash":"ec66e273e350c3d48df0ccaaf73c53b14485848f","date":"2017-04-13T22:12:48.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Replace text annotations with explicit file/line for debug info (#967)\n\nRather than storing debug info as text annotations, store explicit file and line information. This will make it easier to experiment with outputting other serializations or representations (e.g. source maps), and will allow outputting debug info for binaries as well."},{"hash":"2e210c1fca804a4ec86bef8855f819747d8bd7ca","date":"2017-04-17T20:26:33.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"wasm-merge tool (#919)\n\nwasm-merge tool: combines two wasm files into a larger one, handling collisions, and aware of the dynamic linking conventions. it does not do full static linking, but may eventually.\r\n"},{"hash":"0c850464aa7f6466dba6bf975bf40f14c9d6d55e","date":"2017-04-18T00:31:41.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix s2wasm.py hanging indent (#969)\n\n"},{"hash":"0dc8efbf7f5ac474fadff934eb78cd5f8551d0bb","date":"2017-04-18T18:54:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Fix bustage (#975)\n\n* support -g in wasm-opt, which makes it easier to upgrade binaries for bustage\r\n\r\n* upgrade binaries in test/merge to new names section format\r\n"},{"hash":"e1bfd0c5851122762d54d0f578f049e7005bde86","date":"2017-04-18T18:55:21.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"add test for f64-to-int signed/unsigned\n"},{"hash":"12e8c5c20bf9f7d1e5fd85a56c722adf786b5bab","date":"2017-04-18T23:58:58.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle unsigned float-to-int properly in asm2wasm\n"},{"hash":"a9b1d78072bd1875d926cfb0ae51a6eb4dc49b4e","date":"2017-04-18T23:59:02.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"test interpreter on trap mode = js, as we try values that can trap. we recently changed the default trap mode in emscripten, which makes this change necessary\n"},{"hash":"c945f3be7732e77402d696389482b290be7626cd","date":"2017-04-19T00:27:32.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #976 from WebAssembly/fix-f2u\n\nFix asm2wasm unsigned float-to-int"},{"hash":"b5ea3ad86bb22f17c5ea40d8896c4137c0b0c954","date":"2017-04-19T18:38:05.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Use Trusty instead of the defaut (Precise) on Travis bots (#973)\n\n"},{"hash":"943715f274088fe748249c1b62399f3cd2e704d0","date":"2017-04-19T20:56:27.000Z","author":{"name":"Wink Saville","email":"wink@saville.com"},"message":"Fix typo in --finalize-table-base short name to -ftb (#972)\n\n"},{"hash":"b16768ec9b72d075ae2e36cc85aa216fdf4fd354","date":"2017-04-20T02:18:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"update wasm.js and binaryen.js (#977)\n\n* update wasm.js and binaryen.js\r\n\r\n* update test output for new names section\r\n"},{"hash":"a0b162d13c7e8d5df1f1b6e33efd4d9e3f699aa9","date":"2017-04-24T18:52:09.000Z","author":{"name":"H-Plus-Time","email":"hydrogenplustime@gmail.com"},"message":"Fixed issue 965 as per @binji's wabt fix (#978)\n\n* Fixed issue 965 as per @binji's wabt fix, add platform-specific build options, which fixes building on ARM.\r\n\r\n* Added logging for platform-specific flags\r\n"},{"hash":"5d4f9eb82226acc0fdb5e2dea1a04e17c340c371","date":"2017-04-28T17:48:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Preserve debug info through the optimizer (#981)\n\n* add debugInfo option to passes, and use it to keep debug info alive through optimizations when we need it\r\n\r\n* add fib testcase for debug info\r\n\r\n* when preserving debug info, do not move code around call-imports, so debug info intrinsics remain stationary\r\n\r\n* improve wasm-module-building handling of the single-threaded case: don't create workers, which is more efficient and also nicer for debugging\r\n\r\n* process debug info in a more precise way, reordering it from being after the node (as it was a comment in JS) to before the node\r\n\r\n* remove unreachable hack for debug info, which is no longer needed since we reorder them, and make sure to finalize blocks in which we reorder\r\n"},{"hash":"a88d9b83a4629f4bf4c3b210b07d11d2396c594d","date":"2017-04-28T21:34:25.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ctor evaller (#982)\n\nAdd wasm-ctor-eval, which evaluates functions at compile time - typically static constructor functions - and applies their effects into memory, saving work at startup. If we encounter something we can't evaluate at compile time in our interpreter, stop there.\r\n\r\nThis is similar to ctor_evaller.py in emscripten (which was for asm.js)."},{"hash":"5bd7b2869f9ec664fd3e8746c1d469a04566a548","date":"2017-04-29T20:17:31.000Z","author":{"name":"Michael Bebenita","email":"mbebenita@gmail.com"},"message":"Add pass to instrument loads / stores. (#959)\n\n* Add pass to instrument loads / stores\r\n\r\n* Simplify instrumentation.\r\n\r\n* Document.\r\n"},{"hash":"b6d42e0c28460667d9e9c992833be668d0897362","date":"2017-05-01T22:11:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle a drop of an if with both arms unreachable, which is possible since wasm added if types, which mean the if can be i32 even if the arms are unreachable etc (#991)\n\n"},{"hash":"6ae56e73d0eb3a5769af3920a2e75e0a910777bb","date":"2017-05-01T22:55:02.000Z","author":{"name":"Joel Martin","email":"github@martintribe.org"},"message":"--no-js-ffi opt to disable JS FFI mangling. (#984)\n\n* Always use scripts.test.shared for bin paths.\r\n\r\nUpdate scripts/test/shared.py to add WASM_MERGE relative to build\r\ndirectory.  Update auto_update_tests.py to use scripts.test.shared\r\nvariables for all bin paths. Update check.py to use\r\nscripts.test.shared for wasm-merge path (this was missing).\r\n\r\nThis allows check.py and auto_update_tests.py to be run from the\r\nsource directory using built binaries in a different location.\r\n\r\n* --no-legalize-javascript-ffi disables JS FFI mangling.\r\n\r\nFor JS/Web platform, calls to JS imports are wrapped to convert i64 to\r\ni32 and f32 to f64. Likewise calls from JS into exports do the inverse\r\nwrapping. This change provides an option to disable that wrapping and\r\nuse the original types for the call.\r\n\r\nIncludes tests test/noffi_f32.asm.js and test/noffi_i64.asm.js to make\r\nsure neither f32->f64 nor i64->i32 type mangling is happening when\r\n--no-legalize-javascript-ffi is specified.\r\n\r\nTo fully disable JS FFI mangling when using emscripten, the fastcomp\r\nFFI mangling must also be disabled using the\r\n-emscripten-legalize-javascript-ffi=0 flag.\r\n"},{"hash":"7addcae1ea9a09b8c82e0ad660323a42d6535baa","date":"2017-05-02T20:45:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Parsing fixes (#990)\n\n* properly catch a bunch of possible parse errors, found by afl-fuzz\r\n\r\n* clean up wasm-interpreter, use WASM_UNREACHABLE instead of abort\r\n\r\n* detect duplicate names in function names section\r\n\r\n* detect duplicate export names\r\n"},{"hash":"1f1018564c472b75335bf4bddbf65cfebb226fb0","date":"2017-05-02T20:46:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Validation fixes for issues noticed by afl (#988)\n\n* properly validate block endings\r\n\r\n* blocks with a value must not have a last element that is none\r\n\r\n* fully validate input types to binary expressions\r\n\r\n* validate i32.eqz/i64.eqz more carefully\r\n\r\n* if condition must be i32\r\n"},{"hash":"5de55af88eaac818f86eaaec3f686eaede01397e","date":"2017-05-02T20:46:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"improve dce to handle more cases of nested unreachable code (#989)\n\n* improve dce to handle more cases of nested unreachable code, in particular, when the child is unreachable in type but not an actual Unreachable node, e.g. if it's a br. in that case, we just need to verify that the br is not to us where we are a block or loop\r\n\r\n* handle unreachable switch conditions in dce\r\n\r\n* handle dce of br condition which is unreachable, and host arguments\r\n\r\n* handle dce of block i32 etc. which is actually unreachable\r\n"},{"hash":"e10a6e22921889970ceb6e1fb76e786bc66d79d7","date":"2017-05-02T20:47:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"disallow empty blocks with a type - if they return a type, they must have contents. make s2wasm avoid outputting that as well (#992)\n\n"},{"hash":"d0df9588b9adb5c9000d008c8cb739dd3289e68d","date":"2017-05-02T21:02:16.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"when creating blocks during dce, make sure they have the same type as before the transformation, as the outside might care about that\n"},{"hash":"a8f493f24d41295b63c6834fe8efb4996370fee5","date":"2017-05-02T21:36:56.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"fix unreachable typing: for all nodes, if they are not reached - e.g., a binary with either side unreachable - then they are unreachable. this makes our usage of the unreachable type consistent\n"},{"hash":"b6526bbfeb12a793654f918d142ba07852df69af","date":"2017-05-03T18:29:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #993 from WebAssembly/dce-types\n\nMake use of unreachable type consistent"},{"hash":"d0f4e932110812a35cfee9d213e9cd0ce610011a","date":"2017-05-04T03:57:37.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"make function name duplicate testing handle the case of just some functions being named, and colliding with others' original names (#994)\n\n"},{"hash":"5af21d6692c130a69af6bc96e74bed9717e4d4a3","date":"2017-05-04T20:28:58.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize duplication checks in binary format reading (#995)\n\n"},{"hash":"7ba0e4e55dc4cced9de62ef8c76c4638c24f3136","date":"2017-05-04T20:29:45.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Make header guards consistent (#997)\n\n"},{"hash":"0b8acfc0139652d1c0f284c7650812a309574586","date":"2017-05-05T16:42:31.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"ctor-eval fixes (#996)\n\n* fix wasm-ctor-eval, we need to look for the STACKTOP etc. imports, they may not be named, if this build is not with -g\r\n\r\n* pack memory after ctor evalling, since we merge it up which is less efficient\r\n\r\n* do some useful opts after ctor-evalling, to clean things up\r\n"},{"hash":"c72d10b7ffbc3083cf52de001407f89935422112","date":"2017-05-08T21:05:05.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix an afl-fuzz bug where precompute alters a br to remove its condition, but does not properly modify the type (#1000)\n\n"},{"hash":"b856925f6c25df22a0901d8f9e24e4247b4acc18","date":"2017-05-08T21:05:22.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"text format parsing fixes (#1002)\n\n"},{"hash":"64aa81e0e9655cf16e3af65e1bbe98e7fc6cf974","date":"2017-05-09T16:36:45.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Unreachable typing fixes (#1004)\n\n* fix type of drop, set_local, set_global, load, etc: when operand is unreachable, so is the node itself\r\n\r\n* support binary tests properly in test/passes\r\n\r\n* fix unreachable typing of blocks with no name and an unreachable child\r\n\r\n* fix continue emitting in asm2wasm\r\n\r\n* properly handle emitting of unreachable load\r\n"},{"hash":"647271a97ac534320ef5477367d1eb511afdebd5","date":"2017-05-09T23:04:30.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix autoDrop, now that we properly set block types, unreachable can easily happen, and autoDrop wasn't handling it (#1005)\n\n"},{"hash":"dbe3384034e12909694c554149a1fb536fbece21","date":"2017-05-10T01:10:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"asm2wasm: properly infer return type of a call inside a sequence (#1006)\n\n"},{"hash":"6efa4a97b2c643bf35756bb6e989b90d6b3e44bc","date":"2017-05-10T21:38:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Flatten control flow pass (#999)\n\nThis pass flattens out control flow in order to achieve 2 properties:\r\n\r\n * Control flow structures (block, loop, if) and control flow operations (br, br_if, br_table, return, unreachable) may only be block children, a loop body, or an if-true or if-false. (I.e., they cannot be nested inside an i32.add, a drop, a call, an if-condition, etc.)\r\n\r\n * Disallow block, loop, and if return values, i.e., do not use control flow to pass around values.\r\n\r\nAs a result, expressions cannot contain control flow, and overall control flow is simpler, more structured, and more \"flat\".\r\n\r\nThis should make things like re-relooping wasm code much easier, as they can run after the cfg is flattened"},{"hash":"a42f2247e0f4ddd7c4560a9d466f65ee88753bd7","date":"2017-05-10T21:51:41.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"allow values to flow out of loops in RemoveUnneededBrs, and simplify some unnecessary complexity in that pass as well\n"},{"hash":"b3c97a9d6e9c0858c7a021c6437a4f38ceb7a156","date":"2017-05-10T21:55:34.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"merge blocks before and after remove-unused-brs\n"},{"hash":"77802a63e5814bcde5ac9af3f4694507d8bae9e9","date":"2017-05-11T03:49:16.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #1007 from WebAssembly/brs\n\nMisc minor remove-unused-brs improvements"},{"hash":"6331e094380bc538cc7dcd5a716968b764939f81","date":"2017-05-16T23:35:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Parallelize istring creation (#1008)\n\n* parallelize istring creation, by having a thread-local set and a global set guarded by a mutex. each time a new string shows up in a thread, it will be added to that thread's set, after accessing the global set through the lock first, which means we lock at most once per new string per thread\r\n\r\n* don't leak strings in istring store\r\n\r\n* since we now create names in a parallel thread-safe manner, we don't need to pre-create names in RelooperJumpThreading\r\n"},{"hash":"443cfe929d094e34d8d84270965c738743d06585","date":"2017-05-17T01:27:46.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Re-reloop pass (#1009)\n\nThis adds a pass that converts to a CFG, runs the relooper, and re-generates wasm from that. This depends on flatten-control-flow being run before.\r\n\r\nThe main goal here is to help code generators other than asm2wasm (which already receives relooped code from fastcomp)."},{"hash":"bb1c44a3f975bf8fb72216b9c04bcd34e31bd815","date":"2017-05-17T18:29:11.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize if and select in the case their values are identical (#1013)\n\n"},{"hash":"9c6b8e0f626ade30cee113294019edbdbf29dd36","date":"2017-05-18T17:47:23.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Validate finalization (#1014)\n\n* validate that types are properly finalized, when in pass-debug mode (BINARYEN_PASS_DEBUG env var): check after each pass is run that the type of each node is equal to the proper type (when finalizing it, i.e., fully recomputing the type).\r\n\r\n* fix many fuzz bugs found by that.\r\n\r\n* in particular, fix dce bugs with type changes not being fully updated during code removal. add a new TypeUpdater helper class that lets a pass update types efficiently, by the helper tracking deps between blocks and branches etc., and updating/propagating type changes only as necessary."},{"hash":"a5416d2a10490602beb49e5a356828111d229720","date":"2017-05-18T19:18:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"optimize dceing of blocks and known-to-exist children (#1015)\n\n"},{"hash":"2ddb7cb1f45cf9aeef90ec5c8000a2d279f0302b","date":"2017-05-18T21:47:27.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Address review feedback for #1014 (#1016)\n\n* address review feedback for #1014\r\n\r\n\r\n"},{"hash":"9e0958982d2044949746c2d8290dbc0368546ebf","date":"2017-05-20T17:50:02.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"afl-fuzz bug fixes (#1018)\n\n* values cannot flow through an if without an else, they never return a value\r\n\r\n* check pass tests in pass-debug mode too\r\n\r\n* add missing finalization in binary reading\r\n"},{"hash":"1462c0dbfa9980481058e17d2aac317420e45acc","date":"2017-05-20T22:08:47.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"use TypeUpdater in vacuum\n"},{"hash":"2f3bcb914b55f469426418fed1d85e00d0e4db1b","date":"2017-05-20T22:08:50.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"relooper improvements\n"},{"hash":"026accbe55dde6b9d769292195c3ad1ac0a3b8b0","date":"2017-05-21T04:13:52.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"add --fuzz-exec option to wasm-opt, which (when possible) executes results before and after optimizations are run, checking for changes. this can be used when fuzzing\n"},{"hash":"21cb9e8fa9f12680df0a25d969c935c79b388d3e","date":"2017-05-21T15:07:56.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #1019 from WebAssembly/fuzz\n\nMore fuzz bug fixes"},{"hash":"20e127088a39342c65c2af1e8e860beca8fc070b","date":"2017-05-23T01:21:10.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"More fuzz fixes (#1021)\n\n* validate that memory/table segment values fit in the initial range\r\n\r\n* validate that select condition should be i32\r\n"},{"hash":"dd621a6c6cf94ea7f371181d8eb7a80ef2b2f0f1","date":"2017-05-24T20:10:09.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"be more careful when deleting files when testing binaryen methods - the files may not exist, and it is not an error if they do not, we just want them to not be there (#1024)\n\n"},{"hash":"c977ef7266b13a16d6abe26a38bd9098a02360ac","date":"2017-05-24T20:10:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Refactor optimization opts (#1023)\n\n* refactor optimization opts helper code to a class\r\n"},{"hash":"fcbe14a64d082117d7aab9bbf479e941964cd0de","date":"2017-05-24T23:38:08.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"simplify reloop testcase\n"},{"hash":"0dc07eaa7db35cf65edbbccebe5c89b995613745","date":"2017-06-01T19:53:42.000Z","author":{"name":"Yury Delendik","email":"ydelendik@mozilla.com"},"message":"Exporting/importing debug location information from .wast/.asm.js/.s formats (#1017)\n\n* Extends wasm-as, wasm-dis and s2wasm to consume debug locations.\r\n\r\n* Exports source map from asm2wasm\r\n"},{"hash":"adbb5e5c4469d720c4804d5825719cf57b9f18c8","date":"2017-06-01T20:16:53.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"in extra pass-debug validation, don't assume there is always a function, the error may be in a global init\n"},{"hash":"4f33690ae906622adcf06f2c4b1f3436da4c3448","date":"2017-06-01T20:16:53.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle the wrong number of functions being provided in binary format\n"},{"hash":"61f0890c258753dd08afeb24ec822e2f6f99d794","date":"2017-06-01T20:16:53.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"fix wasm-opt with INTERPRETER_DEBUG\n"},{"hash":"a5e32dfc7c3cd2899739298d80a2e707cc025bb2","date":"2017-06-01T20:16:53.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"fix call depth detection in wasm-opt interpreting\n"},{"hash":"b29b88ac31f552dae5b2976f39fb6f08f92b5649","date":"2017-06-01T20:16:53.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"harden s-expr parsing\n"},{"hash":"e0166ea8978928436813a3cf7d3cee73961baa7a","date":"2017-06-01T20:17:43.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"harden parsing.h\n"},{"hash":"18e83cb152447a07fc0b3fe9c16b2b8c60aab328","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"s-expr parsing: handle empty switch\n"},{"hash":"7438fbd5cb4d882584f405ae37e726fd14928f4d","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle a parse error of a function declaration with mixed import inside\n"},{"hash":"989c5295deebe71e4bf80e6cc5ae4f334134f9ea","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle duplicate imports and globals in s-expr parsing\n"},{"hash":"a13a4ea6d71d2bd06bc906ab5d26f3323c8d3cf6","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle duplicate function types in s-expr parsing\n"},{"hash":"f53de1118e63f091494a8b106f6fe8abbd3f07ae","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"throw parse errors in UniqueNameMapper\n"},{"hash":"a2822077c5f92a11e02fba2aba83495254027a31","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle duplicate functions in s-expr parsing\n"},{"hash":"1a5dffbba9c247786ccfe4dd0a510d4e0f156595","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"host op parsing error handling\n"},{"hash":"b32e1a966681e5d480d2beb81310a4c8bf65ecdb","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle empty stack in sourceToUnique\n"},{"hash":"4cb970fa052d5f2f5d29de60f612dc1e22fb81ee","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"trap on bad result types in shell-interface callTable\n"},{"hash":"2ce31515cbb0953344dd5d67cfadb718a9abc8d8","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"validate memory/table Address values in s-expr parsing\n"},{"hash":"08849db00cca62b3886458665b0bf2952f42a9d5","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"verify s-expr parsing of alignments\n"},{"hash":"1c7e82a4c6035d9ab52d892065bfff709a4424f8","date":"2017-06-01T20:17:44.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"handle out of range break offset parsing\n"},{"hash":"fd71c67747c3a85db9670a0d558670c4cb124c91","date":"2017-06-01T20:17:45.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"handle out of range memory size values in s-expr parsing\n"},{"hash":"9b3594b4c704d8562b583da7f27711373ff17f3c","date":"2017-06-01T20:18:18.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"fix fuzz-exec catching of traps, they can occur during init, not just call\n"},{"hash":"ed21d9ce96f51851a4fa357804f58972f4b66284","date":"2017-06-01T20:18:19.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"error if select sides are concrete but different\n"},{"hash":"f47d054dcc34dd709f36716c9fab07087db829e1","date":"2017-06-01T20:18:19.000Z","author":{"name":"Alon Zakai (kripken)","email":"alonzakai@gmail.com"},"message":"remove unneeded code in interpreter\n"},{"hash":"0db29f6e05f03800b05b4778c118818149a193f9","date":"2017-06-02T00:23:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"refactor s-expr parsing code to remove duplication and unnecessary things\n"},{"hash":"89cb24ae1f91132315479475c70a1224a224aab6","date":"2017-06-02T00:24:12.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"use atoll in getCheckedAddress string parsing\n"},{"hash":"bd001c187b90a570ce8babaad83af3b420f48eb5","date":"2017-06-02T00:24:57.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"clean up unnecessary spacing\n"},{"hash":"6611f548cc1e6b373693cde09e9a7379659e8832","date":"2017-06-02T01:45:26.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Merge pull request #1033 from WebAssembly/fuzz2\n\nMore misc fuzz fixes"},{"hash":"4eb81f6cf14b02e77f84f6a5a89d926d4eac535f","date":"2017-06-02T18:15:04.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"validate returned values in all cases, even if the function returns none we should still not have returns with a value, etc. update spec tests to remove some stacky tests that do not fit these new validation rules (#1034)\n\n"},{"hash":"3f0db5a7aafaaa4de713ff3ba3c3bbeb59fe566e","date":"2017-06-05T16:34:15.000Z","author":{"name":"jgravelle-google","email":"jgravelle@google.com"},"message":"S2wasm runtime funcs (#1027)\n\n* Generate stackSave function in s2wasm\r\n\r\n* Generate stackAlloc in s2wasm\r\n\r\n* Generate stackRestore in s2wasm\r\n\r\n* Update dot_s tests for runtime functions\r\n\r\n* Add s2wasm check for exporting runtime functions\r\n\r\n* Fix flake8 for s2wasm.py\r\n\r\n* Rename wasmBuilder to builder\r\n"},{"hash":"2c220f5cebd915447e786f0b365b0bac1e2f719f","date":"2017-06-07T18:28:08.000Z","author":{"name":"Daniel Wirtz","email":"dcode@dcode.io"},"message":"Update binaryen-c/binaryen.js, fixes #1028, fixes #1029 (#1030)\n\nThis PR adds global variable support (addGlobal, getGlobal, setGlobal), host operations (currentMemory, growMemory), a few utility functions (removeImport, removeExport, getFunctionTypeBySignature with the latter being scheduled for removal once a better alternative is in place) and it introduces an additional argument to specify the result type in BinaryenBlock (effectively breaking the C-API but retaining previous behaviour by introducing the BinaryenUndefined() type for this purpose). Additionally, it enables compilation with exception support in build-js.sh as exceptions are thrown and caught when optimizing endless loops, intentionally resulting in an unreachable opcode. Affected test cases have been updated accordingly."},{"hash":"df58435d385ddf49c501eafd4e324ebe0caa8cbb","date":"2017-06-07T20:38:53.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"C API fixes (#1042)\n\n* fix mutex usage in C API, and some minor cleanup around it too\r\n\r\n* update testcase that was forgotten to be updated before\r\n"},{"hash":"314a97687fc0acc7d5b9fa9d58447dc54cf09288","date":"2017-06-10T01:46:27.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Fix path to wasm-ctor-eval binary used in test code\n"},{"hash":"22e06c81bbf5c6f717a1e4873725f9cc466dfbfc","date":"2017-06-10T01:57:29.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Output inf/-inf rather than infinity/-infinity\n\nwast2wasm wes recently updated to only support the\nformer: https://github.com/WebAssembly/wabt/pull/482\n"},{"hash":"07b104d9aefe4ccaf3a6452587cffde8232f783b","date":"2017-06-10T02:23:28.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"update tests\n"},{"hash":"e82a9c4602a42c674155594e73595488bc5b9720","date":"2017-06-10T03:28:31.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Merge pull request #1038 from WebAssembly/fix_ctor_eval_path\n\nFix path to wasm-ctor-eval binary used in test code"},{"hash":"3b81197bd37484a43921076f6592950734d4f3f4","date":"2017-06-11T23:45:59.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Merge pull request #1046 from WebAssembly/inf_symbol\n\nOutput inf/-inf rather than infinity/-infinity"},{"hash":"ec76c8c1d7bf28e025770eb3a84d5ee6c7040d82","date":"2017-06-12T21:43:54.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Log callImport fatal error to cerr so it is not buffered. (#1036)\n\nUse Fatal() rather than stdout or report callImport error\r\n\r\nWithout this the write to stdout can be lost (Since the following line\r\naborts)\r\n"},{"hash":"d1448e7903ed175eca23a3867b348bad42d36271","date":"2017-06-12T23:00:35.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Don't add C++-only flags to CMAKE_C_FLAGS (#1052)\n\nI noticed that when settings -DCMAKE_C_COMPILER=clang I was\r\ngetting a cmake warning when building dummy.c:\r\nerror: invalid argument '-std=c++11' not allowed with 'C/ObjC'"},{"hash":"93c65f98b7a9b0977578dbf55778529efec646f1","date":"2017-06-12T23:04:20.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Optimize/merge duplicate function types (#1041)\n\n"},{"hash":"68dc2eddc24844c7582cafa85afeb4023a47888f","date":"2017-06-12T23:50:28.000Z","author":{"name":"Sam Clegg","email":"sbc@chromium.org"},"message":"Support new result syntax for if/loop/block (#1047)\n\nSupport both syntax formats in input since the old spec\r\ntests still need to be parsable.\r\n\r\n"},{"hash":"61b409bc845f385f1d7ea7ac81d1649b63435828","date":"2017-06-13T01:00:18.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"fix interpreted code from wasm.js (#1043)\n\n* fix interpreted code from wasm.js, when the result is none, we must return an empty Literal (the interpreter now asserts on this, it didn't before)\r\n\r\n* update js builds\r\n"},{"hash":"b5b40c9ab0c35ed74e97a6491e15651382091b2e","date":"2017-06-13T23:05:01.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"SSA pass (#1049)\n\n * Add SSA pass which ensures a single assign for each local, except for merged locals where we ensure exactly a single assign from one of the paths leading to that use\r\n\r\n * Also add InstrumentLocals pass, useful for debugging locals (similar to InstrumentMemory but for locals)\r\n\r\n * Fix a PickLoadSigns bug with tees not being ignored, which was not noticed until now because we ran it on flatter output by default, but the ssa pass uncovered the bug"},{"hash":"8aa91ecb38cc7beaec1f56982e25bb2833cbab39","date":"2017-06-14T04:04:50.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"S-expression parsing in C API and binaryen.js (#1050)\n\n* add C API and binaryen.js support for parsing s-expressions\r\n\r\n* update js builds and tests\r\n"},{"hash":"7179572c7fe842df688bcf6b2a1c08e7623ab284","date":"2017-06-15T05:05:55.000Z","author":{"name":"Alon Zakai","email":"alonzakai@gmail.com"},"message":"Untee pass (#1053)\n\n"},{"hash":"b21be864eea9d6e5193797e010a716f322ff3a24","date":"2018-02-20T19:02:35.000Z","author":{"name":"Khaled Al-Hassanieh","email":"khaled.alhassanieh@gmail.com"},"message":"Fix for .weak match, static variables\n"},{"hash":"b99690543098952ad348379c2659df986428fcd4","date":"2018-02-26T20:53:32.000Z","author":{"name":"Matt Witherspoon","email":"spoon@Matts-MacBook-Pro.local"},"message":"A few changes for building binaryen within eosio\n\n* Change some cmake messages to make it clear only binaryen is being built with some particular flags\n* Rename s2wasm to eosio-s2wasm\n* Make eosio-s2wasm built statically\n* Remove installation of anything but eosio-s2wasm\n"},{"hash":"0b980a9e87740db4d657ee38b2668da35752264e","date":"2018-02-26T20:58:54.000Z","author":{"name":"wanderingbort","email":"bart.wyatt@block.one"},"message":"Merge pull request #1 from EOSIO/submod_build_changes\n\nA few changes for building binaryen within eosio"},{"hash":"14f82f4c99d5dca3db08eca954d1cc3fd9ca022a","date":"2018-03-13T20:03:41.000Z","author":{"name":"Derek Schuff","email":"dschuff@chromium.org"},"message":"Make several derived classes final (#1180)\n\nRecent versions of clang turn on -Wdelete-non-virtual-dtor at our warning\nlevel, which fires when deleting a non-final class that has virtual functions\nbut a non-virtual destructor. Pre-C++11 standard rule of thumb is to just always\nhave a virtual destructor if there are virtual functions, but C++11 final is\neven better since it may allow for devirtualization optimizations.\n"},{"hash":"4f8980c8398a90efe30d94fc7b988c290560e1fd","date":"2018-03-13T20:07:24.000Z","author":{"name":"Matt Witherspoon","email":"32485495+spoonincode@users.noreply.github.com"},"message":"Merge pull request #2 from EOSIO/eosio-fixclang6\n\nclang6 fix for binaryen"},{"hash":"3d46d1bdc648ee1261b7ce15cc7581c86b4af281","date":"2018-03-21T19:04:18.000Z","author":{"name":"Matt Witherspoon","email":"32485495+spoonincode@users.noreply.github.com"},"message":"Fix uninitialized branch in binaryen's Load opcode handler\n\nThere is a boolean signed_ in binaryen's Load class that is checked against during the interpreter;s load opcode handler. However, this signed_ boolean is never initialized. Ultimately it should not matter as our implementation of loadXs and loadXu should be the same. Fixing it anyways.\n"},{"hash":"429d649c35d912bcd529412405519f138f449f9d","date":"2018-03-21T19:10:08.000Z","author":{"name":"Kevin Heifner","email":"heifner_k@ociweb.com"},"message":"Merge pull request #3 from EOSIO/fix_uninit_load_branch\n\nFix uninitialized branch in binaryen's Load opcode handler"}]