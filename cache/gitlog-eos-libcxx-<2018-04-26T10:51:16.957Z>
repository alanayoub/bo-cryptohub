[{"hash":"bc8d3f97eb5c958007f2713238472e0c1c8fe02c","date":"2010-05-11T19:42:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"libcxx initial import\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103490 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c21737c03f3b266d8679d56faa6b6d091e7f2f1","date":"2010-05-11T19:53:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"updated web page with clang mailing list link\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103491 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"58971966d3908581afd7c85ce5bbae453977040f","date":"2010-05-11T20:29:17.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"add css files, also, test commit.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103498 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b748953a2d51c34127aa9c593477966242e1898","date":"2010-05-11T20:37:52.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"cxx not cpp\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103501 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76e1ffc6036a7e772827228e4626280caddbc354","date":"2010-05-11T20:51:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed svn link\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a535ffd99d3702ab065647e28e83c2b7d720be3d","date":"2010-05-11T20:53:16.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"fix more links\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103511 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5256e16dfc425c1d466f6308d4026d529ce9e0b","date":"2010-05-11T21:36:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Wiped out some non-ascii characters that snuck into the copyright.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103516 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03aad81afdf77c64e50d0df3f1a8767ea24aa827","date":"2010-05-11T23:26:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.bern.bin].  The evaluation function for this binomial distribution is hopefully just a placeholder.  It is using the simplest and slowest method for computing the distribution and needs to be upgraded.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103524 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e52d5ab2b4e9cf74209c3f2040ff8412a15f0bb","date":"2010-05-12T13:31:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Pruned test results to just the past 6 months\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103611 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f9b133e2cd3b000056bdda641b94ebb611d4653","date":"2010-05-12T13:33:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"tests for [rand.dist.bern.bin]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"30a840f5f0774e4527c91147d3f39fbd4bad3f9e","date":"2010-05-12T17:08:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.pois.exp]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103621 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a64111c95ac2e7bc337def0426d512c81307c166","date":"2010-05-12T21:02:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.norm.normal]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103646 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24173b81dd527a38b32e037082f7d1578213d626","date":"2010-05-12T22:21:15.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"improve the 'current status' section to say what *is* there in\naddition to what is not.\n\nAdd a big \"why libc++\" section to address a pretty major FAQ.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103655 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5058d9a0d5e60adcd9118dfe7f886effd6a6206","date":"2010-05-12T22:30:22.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"tweak from cjefferson\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103656 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f33824922812487c1e7f24852975b0e06792eb7e","date":"2010-05-12T22:33:00.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"wording\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103657 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfa808e093b1bd53832a9aa245d27b1b95827bbf","date":"2010-05-12T22:34:21.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"wording.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103658 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7c4913b466b864d22c2b34c5c474211528a0f0d","date":"2010-05-13T17:58:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"partial [rand.dist.pois.gamma]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103722 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d0e811a37d2c263a602ace05648f9ecaf8b59663","date":"2010-05-13T20:10:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"weekly test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f417abe6837f1b3a0aaaf9a0e0f4e9dde414829d","date":"2010-05-14T18:43:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.pois.gamma]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b75862d1a1b567b05deeacf2d5d6c4c02dae4ea3","date":"2010-05-14T20:17:42.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"change test case to verify unexpected() calls terminate - not is terminate\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103794 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"804b6e73d41fc61cae5be513276183c69a4530b5","date":"2010-05-14T20:19:37.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"add headers and implementation for <new>, <exception>, and <typeinfo>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103795 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56b373c97eb393e5e2721555616a4087bdf7eafe","date":"2010-05-14T20:22:09.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"fix strip options and properly copy include/ext\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103796 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ff556cf6266463174770171a41cd270798b72b3","date":"2010-05-14T21:38:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.pois.poisson]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103814 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6add8ddfef4081e35ecfb7e67a457bfab97e1fe3","date":"2010-05-15T21:36:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Revisited [rand.dist.bern.bin] and [rand.dist.pois.poisson] with better algorithms\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103886 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"97dc2f35c3d0d797ece43f5598023c6952144f37","date":"2010-05-15T23:36:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.norm.chisq]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103888 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9de6e307619416ae6903d22616dcaf6682d3e93f","date":"2010-05-16T01:09:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.pois.weibull]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103891 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4bd6cc9f30fb15f61d1e3f2df0bf11d633c04ebe","date":"2010-05-16T12:42:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Replaced :: with _ in several path names\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103906 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9cb70437e29f88448eb325298eaadd2c0eff6e4d","date":"2010-05-16T12:46:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Replaced :: with _ in several path names\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103907 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df40dc6c1a8ca0bf00fb6aec030f69042f61d974","date":"2010-05-16T17:56:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Beefed up the tests for all of the distributions to include checks against the expected skewness and kurtosis\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103910 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2fe5d5a61d1f5842068793620aaff1e88173f7f","date":"2010-05-17T00:09:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.bern.negbin]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103916 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34e8a57b76d3340fd0402becc7d7806612c9691f","date":"2010-05-17T13:44:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.bern.geo]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103937 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c2b0dc7e336a8d1282a0f1c7a83576af71a18373","date":"2010-05-17T16:21:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.pois.extreme]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2bc36fcff3de1ace5c74bb7c1459def41a67e862","date":"2010-05-17T18:31:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.norm.lognormal]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103957 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d90b0a41a8f0995602f0f7ee2541ff724079b20b","date":"2010-05-17T20:38:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Got rid of more :: path names\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103970 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7d01132954e05ba41137195f26a265e7e255e6a","date":"2010-05-17T21:55:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.norm.cauchy].  I'm having trouble testing the output as all statistical properties are undefined.  They do not converge upon any one value as the number of samples increases.  Suggestions for tests welcome.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@103983 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0873a52ca8ce2f7301d3170dd098cc591822c79b","date":"2010-05-18T00:06:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"more :: to _\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104005 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72215c2dbf0bbff4ad9f73879d346be95facdd83","date":"2010-05-18T00:09:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"more :: to _\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104006 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed9b2aa21db6cc9e538f0da0759789e8065a68f4","date":"2010-05-18T00:34:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Better cauchy tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104008 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8bc09b616ef60b71cd4440c5df92ab35b6eaba8","date":"2010-05-18T17:32:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.norm.f]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104035 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"321b4bb7ae50ef318c51ec58db550d7846c3edae","date":"2010-05-18T20:08:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.norm.t]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76fdaa7c7099d653e0a03470cfafb9cd5b36d756","date":"2010-05-18T22:17:13.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"Add set_new_handler and nothrow implementations\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104073 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"551d8e4ddb087da09eeb315d5d072c37412544b4","date":"2010-05-19T01:53:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.samp.discrete]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104103 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d6d1171f2c3f254582ae1d5b9e14cea0ea8e701b","date":"2010-05-20T15:11:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.samp.pconst] plus some bug fixes in the tests of the other distributions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104224 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"daf0ff111f3d9385ebb477cbc91732d1b3dc2971","date":"2010-05-20T19:58:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"weekly test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104266 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a59254a44563109cb54cc46755552b17bd88336","date":"2010-05-24T00:35:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Optimized [rand.dist.samp.pconst] and several bug fixes in other distributions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104478 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"adff4895b2746f30b271bc219713e7ded5ae9677","date":"2010-05-24T17:49:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"patch by Jeffrey Yasskin for porting to Ubuntu Hardy.  Everything was accepted except there were some bug fixes needed in <locale> for the __nolocale_* series.  For the apple branch I ended up using templates instead of the var_args solution because it seemed both safer and more efficient.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104516 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fff534ee48a549b19cecddc2c583f262f14b228a","date":"2010-05-24T19:09:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"sync with working paper\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104542 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5430540d57b86c7dcc4a29e4ceb4b24c01a23b34","date":"2010-05-25T00:27:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[rand.dist.samp.plinear].  This means we've got a fully tested and functional <random>! 489 tests over 48 sections are passing. :-)  The only thing still on my plate in this area is to back-port some of this technology to random_shuffle/shuffle in <algorithm>.  That will involve shuffling header bits around (<random> depepends on <algorithm>), but it won't entail that much development (compared to what has been required for <random>).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0bfe8809b4805696036c5801f06a652402088505","date":"2010-05-25T17:25:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"For compiling on FreeBSD\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104616 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c326721e65fe4e1631cc79a5408f3bf8b154f086","date":"2010-05-26T17:49:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Completed [alg.random.shuffle].\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104708 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebef7459b2128e379999c3cd7f353376b5ed64bb","date":"2010-05-26T18:53:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[numeric.iota]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104719 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed2c2916b218361524764b6da427db2f2cb249f6","date":"2010-05-27T17:06:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[except.nested]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104850 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13c98cc20d7381aa14ce673cf94b593c141894ca","date":"2010-05-27T20:06:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"weekly test results plus a bug fix clang found\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104877 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6bb9f58bc8c71818464501c98533deb0e6f3ed19","date":"2010-05-28T13:35:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected rethrow_if_nested\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ec31849dfebedd223d6c1ab4271afe67ef1c8e8","date":"2010-05-28T15:49:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implemented some adaptor constructors which I had missed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104946 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85d7b339d404e56661a7b11fd33a931cc8272d22","date":"2010-05-28T16:37:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"UTF-8 data in this file somehow got garbled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104952 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a309da151ca640732a0f6153701806eb1d4a40a4","date":"2010-05-28T16:53:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected a test bug in reverse_iterator\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104960 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcc593875c9e7a45b3ffea76a02cb6e3d9d35f7d","date":"2010-05-28T17:53:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[support.initlist.range]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104975 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e056924cd2585f626e43277f8f776bca69d0bc8e","date":"2010-05-28T18:04:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed [support.types].  <cstddef> wasn't definining NULL or offsetof.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@104982 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87d1a8a4d81892ccfaf1319d056880e89a17528e","date":"2010-05-30T21:39:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[locale.stdcvt]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105174 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d23b464e21648e252d5ae501b2db2e93dc02b1f7","date":"2010-05-31T20:58:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[conversions.string]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105254 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b53f508efcd857b2dddeff092a8509def5bc6bd","date":"2010-06-01T20:09:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[conversions.buffer]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a6a062df66fe49704bd074464af30bf8c3db6ea5","date":"2010-06-02T18:20:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[string.conversions]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105336 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6184db9c5ac425a21cd1c7561aaebc1316499be","date":"2010-06-02T18:41:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I've reverted the changes needed for Ubuntu.  The changes for Ubuntu should go under a #if and I'm not sure what that #if should look like.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed30e070ac84191fc69078663d6a46cb88840cec","date":"2010-06-02T18:53:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"for Ubuntu\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105338 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21aefc3a6135c6447b8b43ac3f2349bf568e2900","date":"2010-06-03T16:42:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[util.smartptr.hash]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45dc2253aa045c8bc84498108c39967b1e250e66","date":"2010-06-03T17:05:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"test results are now stored internal to Apple.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105394 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"89f2606e7f4409aa4a5d4a8cb75a46670f15228e","date":"2010-06-03T19:31:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"updated by-chapter-complete chart\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105402 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b3a0887d0e1643022acab902a83e4e05836781c","date":"2010-06-04T14:16:02.000Z","author":{"name":"Dan Gohman","email":"gohman@apple.com"},"message":"Fix an apparent typo.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@105467 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3257c9853f0612761bbde4adfd56dce566d9f2a6","date":"2010-06-17T00:34:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Just getting our toes wet on <regex>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@106187 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"80d88f35d29e1dd18f69cf11820185686a7e414f","date":"2010-06-18T16:13:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"updated for weekly tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@106288 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f409d2f2fc3b8ee5d2af59ae83dae8b7cbba6135","date":"2010-06-21T21:01:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Finished [re.traits].  I'd like to acknowledge the help of Bjorn Reese with <regex>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@106478 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c2c18d57ced35ef97f2e97d426a8c334093c4b3","date":"2010-06-24T21:28:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Continuing to work through regex, and updated libcxx_by_chapter.pdf with weekly test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@106790 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0de86b6338b4bf222acfee1384ac1fd9b2a08bd9","date":"2010-06-25T20:56:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"regex: learning to crawl\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@106882 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db0bc3427e99d1c4b39f6b57a06c8cc452fb3c17","date":"2010-06-28T17:19:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Minor fixup\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107022 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd85b9ee137e179cf38d935fc500e12521ccd3d2","date":"2010-06-29T18:37:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[re.submatch]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107187 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7e9d84b746028b7c3eb182754b5e8b5592a26428","date":"2010-06-30T00:21:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"two steps forward, one step back...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107230 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b80f2b044116eaf94dd53cc8cfa929f2844e397","date":"2010-06-30T17:22:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"First, very primitive, search results on one engine\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107294 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0dca5fc7adc2245aa33409dcfa33879d02d4bfb9","date":"2010-06-30T20:30:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"First test for marked subexpressions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107317 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43b4decac5e0281c24619f4c350cdeac2580e192","date":"2010-07-01T21:39:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated chart with weekly test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107431 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f8ce459f8d601ade094fcd1b6738951d41b66e11","date":"2010-07-07T19:14:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"First loop test passed.  The data structure and search algorithm is still crude and in-flux.  But this milestone needed to be locked in.  Right now every loop is implemented in terms of a structure that will handle the most complicated {min, max} loop.  Though only *-loops are tested at the moment.  In a future iteration *-loops will likely be optimized a little more.  The only tests are for basic posix so far, but I have prototype code running for extended posix and ecma.  The prototype code lacks the complicating properties of the real <regex> requirements though.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107803 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e77aa5e7f401393370ee04461d48cf392f269095","date":"2010-07-08T17:43:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Marked subexpressions in a loop in basic posix working (only lightly tested so far)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107889 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37f9f9c587fd2f67eea1bdf5cb327fd33c8fc540","date":"2010-07-09T00:15:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"weekly update to by-chapter-summary, plus left and right anchor support in basic posix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@107938 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac30386dfea77197345cbdb1d63231ad70620e60","date":"2010-07-12T15:51:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Redesign number 3.  The previous design was not handling matching of empty strings inside of loops.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108151 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cba352d3484c5d1bb524ff77c569c4be27a1bf45","date":"2010-07-12T18:16:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"back references for BRE\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108168 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e34f17d38307c68323bd5f6db205c2ec495e6faa","date":"2010-07-12T19:11:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"regex_constants icase and collate for matching a single char and for matching back references\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108178 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"173968a5f23744dd6d776b9ddce2ae637983f9a5","date":"2010-07-13T21:48:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bracket expressions are working (lightly tested).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68025ed084bc20e29d1d05dd005705222a4b45d3","date":"2010-07-14T15:45:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Minor optimizations.  Minor bug fixes.  More tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108331 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22ce0b4a1c8ecded25b52335a1944a60db9d6b6a","date":"2010-07-14T21:14:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed to work with generalized iterators.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"639a668b4c4ef29d10739ca4d945c3444dc124e1","date":"2010-07-15T18:18:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Tests for basic posix regex templated on wchar_t\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa69808da909e2b041b4b3a095da5a4c2944593c","date":"2010-07-16T19:08:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A good start on extended posix regex.  Loops working.  Alternation working.  Also update by-chapter completeness summary.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@108548 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1371b2e56e6a500464e6be06c66f12e520d2ff3f","date":"2010-07-22T14:12:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A few more tests for posix extended alternation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2ade7c27f852ca8f303a54ca4ac813d64d2d566c","date":"2010-07-22T17:53:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I believe posix extended expr is feature complete.  Getting started on ecma exprs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109126 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ddff70e8790654093233066df4db0a737b2d597b","date":"2010-07-22T20:29:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated weekly by chapter summary\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109135 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17615b040d3afba693b55542d28fb88d559fb910","date":"2010-07-27T01:25:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A good start on ecma regex's.  Maybe even feature complete, not sure yet.  Also an unrelated fix to is_constructible thanks to Daniel Krugler.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109479 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad2a7ab9a9a370dad9d6a70bcefa9d8471bb2ed6","date":"2010-07-27T17:24:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"continued regex development...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109512 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"856846b66fec574311eeeb30d42d029c7bb86a27","date":"2010-07-27T19:53:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"grep and egrep grammars\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109534 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9de5ff443e7f5ff297f867442c0a9352063007f","date":"2010-07-27T22:20:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"lookahead for ecma\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109548 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15476f345d78e8d9e533bd45a685c4b4480e6908","date":"2010-07-28T17:35:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed some bugs in the ecma bracket epression regarding escaped characters, and got the awk grammar going.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"588ea08124e8e0787855659479535fd3203ca297","date":"2010-07-28T23:23:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"weekly by-chapter summary updated\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0d045b7878d0ae7119326ccd2be269048459853","date":"2010-07-29T00:36:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"fix parse bug in ecma non-greedy loop\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8daa733576426cfef4cb2fa9ba679a1e882c0fa6","date":"2010-07-29T01:15:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"fix bug incrementing past end in search\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3dcca049bd6114e378dc5d3f880991375f23ce0","date":"2010-07-29T15:17:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"bug fix concerning search not at beginning of string and word boundaries\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d78b3159353e7ed0d43aa28fe6b276b502d4cc63","date":"2010-07-29T18:43:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make complex.h play nice with C\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109791 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3da2d48b031093d5d415ac7b8544086971b951c0","date":"2010-07-30T21:28:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Let C lib supply stdbool.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109894 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45783d2dfd87c92b95b08802a7ad77c064bd8a13","date":"2010-07-30T23:15:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"buildit adjustment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@109931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60a0a8ef24f0f3a7d351efda444bf62025c78b47","date":"2010-08-10T20:48:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"patch by Jesse Towner, and bug fix by Sebastian Redl\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a68a4d7391e77e1231bd8bae77b2e77d71c4064","date":"2010-08-10T21:57:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix conflict with cstring and using namespace std\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b271eff4c697ea278dc38088c95246b1c5a278e5","date":"2010-08-11T14:05:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Modified the definition of std::foward to address National Body Comment US 90\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e13d4f9c455ba600ffbe6f1a8a9e8029a8432a8","date":"2010-08-11T16:27:20.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Include sys/endian.h on FreeBSD and use that to detect the byte order.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81e68580b2c1fc311e2393fafdfb56adc2a240fd","date":"2010-08-11T16:52:41.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"#ifdef around Solaris/Linux/Darwin-specific error codes and replace them with their BSD equivalents if they are not available.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110827 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d444470d6cd1cad554139c4ba7f3c4f3fe921a5d","date":"2010-08-11T17:04:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"now works with -fno-exceptions and -fno-rtti\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110828 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e353f23635c13872ccc86874ba33a42bd1f1157","date":"2010-08-11T18:11:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Didn't mean to change lib/buildit on the last check in\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110834 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"878465043ff69cb10c3e65385c31384ef853d9ab","date":"2010-08-12T21:14:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Filling out regex tests...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@110955 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7026a17a482a9f7fdd9fc41aead6a167167efb1b","date":"2010-08-13T18:11:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Everything under [re.regex]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111024 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27405f91a83821e659963bec5f3e71be7e4c08e6","date":"2010-08-14T18:14:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Everything under [re.results]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111074 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa78f9cdb3c8a049660deb39c9296501d2467d78","date":"2010-08-14T19:58:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[re.alg.match]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111075 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a712c724998564430e8b588e1c037010e19017c3","date":"2010-08-16T20:21:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[re.regiter]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111178 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"262b779f1d1635f10b3fdbb28cc45c55d0b3ff42","date":"2010-08-17T20:42:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[re.tokiter]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111278 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8d775970841ca062fcd44fb16f7b164ce4f3aae","date":"2010-08-18T00:13:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[re.alg.replace].  This finishes all of <regex>.  That being said, <regex> is exceptionally difficult to thoroughly test.  If anyone has the ability to test this, combined with the interest to do so, now would be a good time. :-)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a23e1e0606833eb7aa35237b1247d61a20b1257","date":"2010-08-18T18:52:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated by-chapter chart with weekly test results.  Also did some prototyping on result_of, but if-def'd out the prototyped part (which the LWG may or may not accept)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111389 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba590bdc97371cafb8767bbeb9e08373c25e71e4","date":"2010-08-19T17:40:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1278\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111532 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e92c3d74cefe87767b620688ef083be8f976e62d","date":"2010-08-19T18:39:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"US 107\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c1ffbabc1d4510813cedbf83ae3dd06af9476df","date":"2010-08-19T18:59:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"US 98, US 99\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111542 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2794e6cca5ca868e5a78e04a878f189a340fe47a","date":"2010-08-19T19:09:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"DE 19\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111544 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3263b4dbe7ed2353dfca6dc59a59124edf104ef","date":"2010-08-19T19:15:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"GB 85, GB 87\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111546 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e00e030f580d40813564e582d6cb74c209284cd2","date":"2010-08-19T19:20:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"JP 3 & JP 4\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111547 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"725528086c5850ad2340d192c16cd39e1143a8cf","date":"2010-08-20T19:36:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Installed allocator into std::function\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111672 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98e5d974006989c505d7b2ec7b9e4b20b0f01e26","date":"2010-08-21T20:10:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"US 122, N3106\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a2523b201eb46508db7570718da915f8f982a4a","date":"2010-08-21T20:58:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"US 117\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a785e4e4695f217f3bc2e60a90ab7ab0a86bb347","date":"2010-08-21T21:01:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"DE 23\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92172b891fabc4d92cc6fa32b1c70d7d926571fa","date":"2010-08-21T21:14:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"US 108, N3109\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111747 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"324bb03bb94f67ae7f9092810e4e4f6bd8bf506e","date":"2010-08-22T00:02:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16e6e1d72fd6a10fc165eba4ca4ed2fa7c45df78","date":"2010-08-22T00:03:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111751 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb564e76cc3904d811c981a50ecce0659f444cc9","date":"2010-08-22T00:08:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111753 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6046aced820aaab4f14f2026531dd11d10690691","date":"2010-08-22T00:15:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111755 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa20444a4fb4f1e6deaa35c8f81498186ca17a12","date":"2010-08-22T00:20:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111756 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74231bfbc0d6f648bad6cde44eac204fc1cd0d00","date":"2010-08-22T00:22:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111757 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"256813f4e7915d64776a4edd5f4765d893b9f062","date":"2010-08-22T00:26:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111758 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"712522cfd8f61321b4f197ec0de02b0146afb5a5","date":"2010-08-22T00:29:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111759 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf6dcc35e14a3d2dafe67cf76a200b2e1a671e7d","date":"2010-08-22T00:31:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111760 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22a74dcf50ff4338767607fa5a9d2916c2c85525","date":"2010-08-22T00:39:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111761 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e20cae1a5be18fba591cd884aa2a389b66a3f49","date":"2010-08-22T00:42:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111762 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbd8086ee3448f38026219777112e787fde8504d","date":"2010-08-22T00:45:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111763 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e0a1f458e41c08112a130f50636ced03907e29e","date":"2010-08-22T00:47:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111764 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f11ea144609929bb96a05f583ad7c29abd142730","date":"2010-08-22T00:50:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111765 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c52f43e72dfcea03037729649da84c23b3beb04a","date":"2010-08-22T00:59:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111767 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2bb03207523e55aa2423570bcaaad03e779450c","date":"2010-08-22T01:04:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing whitespace problems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111769 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d510977c4dccbc249dff951e73ea0651d1fa59d7","date":"2010-08-22T13:53:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove tabs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e705bb5ad8cfdd7dee90eab0c259a8e65e05913","date":"2010-08-23T21:23:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Accidentally changed a data file during the whitespace cleanup\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111845 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef0036c5aa3c3e78ee97af78caa649d657a6372c","date":"2010-08-23T21:41:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected some int -> char narrowing conversions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@111849 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a652172d86b1063983c20bfc1c3f9d44d0e7c5bc","date":"2010-08-25T17:32:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Getting started on <future>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98ccdeca3b2d90e52330472930a450e140b01a53","date":"2010-08-25T19:45:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated for weekly test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112078 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47499b162ae741a247e5f89b7bdb513e51c3648a","date":"2010-08-27T20:10:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"future continues ...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112284 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f39daa8e5a5f7d7eb19f391497a29b4fa0eec28d","date":"2010-08-28T21:01:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[futures.promise].  Depends on rvalue-ref support to work 100%.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112388 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7158e5c38b300b7950ad908977b33d737cffb7ff","date":"2010-08-29T14:20:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[futures.unique_future]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112423 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"54da338f59b56e267dd6d1c0981e3c607c94c2b7","date":"2010-08-30T18:46:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[futures.task] and [futures.async].  Requires variadics and rvalue-ref support.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112500 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae153b985515ec7d1c1455bc967b551863362c6e","date":"2010-09-01T20:33:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated for weekly test results.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112737 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99be8237db0c69ea05bb82bbb8fc8a2273c05743","date":"2010-09-03T18:39:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[futures.shared_future]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@112990 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6e4d015530014978920fa46cfe294518dc3490a","date":"2010-09-03T21:46:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[futures.atomic_future] and notify_all_at_thread_exit.  This completes the header <future> and all of Chapter 30 (for C++0x enabled compilers).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113017 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"171a9a7cc33e8d290b9d55e38e9b8bc7ee2a4642","date":"2010-09-03T23:03:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Configure libc++ to recognize and use inline namespaces for clang.  Many, many thanks to Sebastian Redl for implementing it in clang, and to Daniel Dunbar for rattling my cage about it.  This is huge for libc++.  Thanks to you both\\!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113026 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04acacadca196a2587b52942c33d4fea51411e1b","date":"2010-09-04T03:15:51.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"Fix typos, noticed by Clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73d21a4f0774d3fadab98e690619a359cfb160a3","date":"2010-09-04T23:28:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Changed __config to react to all of clang's currently documented has_feature flags, and renamed _LIBCPP_MOVE to _LIBCPP_HAS_NO_RVALUE_REFERENCES to be more consistent with the rest of the libc++'s flags, and with clang's nomenclature.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113086 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfd5530c064923efa0d345dfce3548b873565daf","date":"2010-09-04T23:46:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix whitespace\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113089 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b02310e4878b06f25e7089370812e0ef57181b46","date":"2010-09-05T00:49:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"sync with N3126\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3e488eb61abdccb12fbdc88f645258cdb25086d","date":"2010-09-05T00:57:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"sync with N3126\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113098 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c2683d77c84eeec74ec4166ed25bbc2ebb0c3f6","date":"2010-09-05T01:06:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"sync with N3126\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113099 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2ccccce89dd50f1ef286a6ca1cdb86980e106f0","date":"2010-09-05T01:10:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"sync with N3126\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113100 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3991b553df1bd28c5fdaba38bac1c01a2b9919b4","date":"2010-09-05T01:14:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"sync with N3126\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6547cbf61511c557d3780f736502cce0a06e69d","date":"2010-09-05T17:31:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated current status.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113110 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1387038988ea3c93c9f0adcb62d2725160f07cf2","date":"2010-09-06T19:10:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Working the type_traits area: Hooked up to clang's __is_union.  Got has_trivial_copy_assign working.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fd6d25bf1758218aa71938ab343dcaefff4ffeb","date":"2010-09-07T15:53:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"has_trivial_default_constructor hooked up to clang.  Filed http://llvm.org/bugs/show_bug.cgi?id=8097 to take care of void and arrays of incomplete types which don't work yet.  If there is some reasons we don't want to handle these types in the compiler, I can handle them in the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113205 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6fd2e09b360c4e5e65feb318206ae967b862d666","date":"2010-09-07T17:15:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"has_nothrow_default_constructor hooked up to clang.  Filed http://llvm.org/bugs/show_bug.cgi?id=8101 to take care of void, arrays of incomplete types, and classes with virtual destructors which don't work yet.  If there is some reasons we don't want to handle these types in the compiler, I can handle them in the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113217 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb73d762b29801994c38279abd249d19a858f3f5","date":"2010-09-07T17:47:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Made a stab at has_default_constructor.  Got it mostly working for g++-4.0, but only works for scalar types on clang.  Ultimately this needs a compiler-supported is_constructible which clang is missing, and won't be able to use until it gets variadic templates.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113225 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87eea6d801490df49256d86480343b95b7f77654","date":"2010-09-07T20:31:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"has_trivial_copy_constructor hooked up to clang.  Filed http://llvm.org/bugs/show_bug.cgi?id=8105 to take care of void, arrays of incomplete bounds and complete bounds which don't work yet.  If there is some reason we don't want to handle these types in the compiler, I can handle them in the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113270 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aad0db393f6724c5ce975bfc66dfcd4ef616bdf1","date":"2010-09-07T22:09:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"has_nothrow_copy_constructor hooked up to clang.  Filed http://llvm.org/bugs/show_bug.cgi?id=8107 to take care of several types which don't work yet.  If there is some reason we don't want to handle these types in the compiler, I can handle most of them in the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113294 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"954b36631786ed851ad7b08d30ec3e6348a16112","date":"2010-09-07T23:11:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Made a stab at has_copy_constructor.  Got it mostly working for g++-4.0, but only works for scalar types on clang.  Ultimately this needs a compiler-supported is_constructible which clang is missing, and won't be able to use until it gets variadic templates.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113304 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99ad7652614642881e7aa344ff0d9cd13a87196d","date":"2010-09-07T23:38:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"has_trivial_copy_assign hooked up to clang (without workarounds).  Filed http://llvm.org/bugs/show_bug.cgi?id=8109 to take care of several types which don't work yet.  If there is some reason we don't want to handle these types in the compiler, I can handle most of them in the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113312 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27031115bffa54c786c775512e1221bd555b6c1a","date":"2010-09-08T16:39:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"has_nothrow_copy_assign hooked up to clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113364 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"745d473ac1e3f7385b9cac82bac9b452fad6f64a","date":"2010-09-08T17:55:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Hooked the following up to clang:  is_class, is_enum, has_nothrow_copy_assign, has_trivial_destructor, has_virtual_destructor, is_pod.  Implemented has_copy_assign.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113373 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e764f0b648d00aaa80e1a542a44481dfba74f905","date":"2010-09-08T20:31:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated by-chapter-summary with weekly test results, and fixed up some bad paths in some tests caused by aligning the test suite with N3126.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb2deb26524d4955d523af8e844cb0755d65c584","date":"2010-09-09T13:58:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Yonggang Luo fixed gcc version checking for type_traits support.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113487 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"36cdf027d21e4ca2ee2c4af33f530d7c49082168","date":"2010-09-10T16:42:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I am experimenting with putting visibility-default attributes on all struct/classes in libc++.  This checkin decorates only basic_string and vector as an experiment, and for review by those in this audience that might know more about visibilty than I do.  If I get no negative feedback on this procedure I will begin to decorate the entire library in this way.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113590 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7e4d82bc01d13ec7dbf7823fd38aea9873d0a21","date":"2010-09-10T20:42:36.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"<rdar://problem/8279559> [libstdcxx] use new linker options to make symbols non-weak\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113616 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fdc5a0f321f325876c31914548eea576cd7c8816","date":"2010-09-11T15:09:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix const bug in function\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113684 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0f1dc9f46e9403c192579c6b9252bf9ac771d57","date":"2010-09-11T15:33:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix another const bug in function.  Thanks to Daniel Krugler for finding this and the previous bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113686 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2a9251977be7d3cb9421b263d8a604dff709dad","date":"2010-09-13T01:43:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Experimenting with a new forward fomulation (kudos Daniel Kruegler), updated insert iterators to work better with pproxies, and doubled the speed of __next_prime.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45f57178127e368bbf510c7482c44cdfe14b0bbb","date":"2010-09-14T20:26:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Cement ABI on clang for char16_t and char32_t.  Also fixed some comments in <iterator>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113842 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5eadcd8d5b6fcff5cb04d7bf954731525cc1004","date":"2010-09-15T03:57:04.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"tests: Sketch a lit config for running libc++ tests; currently expects libc++ to have been installed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113925 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7e0c57b20372b7a3fb6b995f726afcd3cdd76d80","date":"2010-09-15T04:11:29.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"tests: Fixup lit config, which got garbled somehow...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26a43c25d7bf0b085b01663822667d85c5ee43f8","date":"2010-09-15T04:18:37.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"tests: Remove some stray cleanup code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113934 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"611581b8530e4597557004fcd1e9417c605cc56f","date":"2010-09-15T04:31:58.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"tests/lit: Split options into two groups, so we don't get driver warnings about\nunused linker arguments for compile only tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@113935 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"049734ed85758d47934be7a7f683ed03e838f94c","date":"2010-09-15T21:56:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated chart for weekly test results.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3975ebd4f5ec2f141e44476526b723c6c4af2322","date":"2010-09-16T23:27:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Tweak clang support for char16_t/char32_t\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114129 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0de2e48ffee394fa1b3d5fb96518b49dded5b6d","date":"2010-09-21T16:04:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Getting started on a visibility-decoration sweep.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114440 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99acc5008b67926de7efd66cf76620ee75035b9c","date":"2010-09-21T17:32:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0be42b2ce0dbde30fb64a96586411f35d2b1aed","date":"2010-09-21T18:58:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114465 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"333f50d30cd7b9f6e171e0ea1285a9cfbaa1342a","date":"2010-09-21T20:16:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114470 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"422a53fd7a28c73bfd4be5543249571ce01dbac7","date":"2010-09-21T21:28:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114486 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42a63a781f10217fc240afb89b601491a6a37dae","date":"2010-09-21T22:55:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114496 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c6cbb24e852c1bc6753c11e308ded31d32b92d2","date":"2010-09-22T14:16:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114543 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68a8e90b3dab67d60763c2938146a39156e070a3","date":"2010-09-22T15:29:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"828948148d334656de3ad671cc34a2e8b1b63cb1","date":"2010-09-22T16:48:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114551 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9af2eae4a419a05b377ce0483ca1bf313f06829","date":"2010-09-22T18:02:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114559 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aef07cbffd4d47a5f75e9e738b4aac218ba6534d","date":"2010-09-23T15:13:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114647 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28c97e6ee1a4286e7823b0011bb14c262cb4d3b6","date":"2010-09-23T16:27:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114658 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d7a9557b7dff2421a694148970d162125e7c0d3","date":"2010-09-23T17:31:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114671 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee6ccd0e3233471a6d5f7858f0cb012396362dce","date":"2010-09-23T18:58:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"visibility-decoration sweep completed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114685 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e049cc5f7558b15d673c565dfb21cae7d99cadc5","date":"2010-09-27T17:54:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Cleaning up some tuple code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114848 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d05c6e646bc6bbe4b19cd197e4879fdea0bc5bf7","date":"2010-09-27T18:09:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bugzilla 8231\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114851 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f73c63658091e6d6bdf3770307b778496eabdbd","date":"2010-09-27T21:17:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Getting started on <atomic>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114887 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1176e29b01bebab9ca1b35bc9d457a4730cf84b","date":"2010-09-28T17:13:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[atomics.order]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0ce02245a96edc9d1b2d60653fc06e9941e6fd2a","date":"2010-09-28T17:19:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"fixing whitespace\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@114967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed760f40b7a6eb817f3804ccf052c7641bea155c","date":"2010-09-29T18:13:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Wrestling with the slowly dawning realization that <atomic> isn't implementable on any compiler at my disposal...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115054 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c260b063667d18cc6b66080149745202fe69dad0","date":"2010-09-29T18:33:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Didn't mean to commit that one\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115058 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5b6af69387575214f4f6cec0f3bec00ea01df026","date":"2010-09-29T20:15:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"updated per weekly tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115081 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"767ae2b483cad62b360a9ce55348d20fdfd5770a","date":"2010-09-29T21:20:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Contemplating this <atomic> reorganization...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115087 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f701e25c49dbfd660ab15ceb5d0828d8b8f945e4","date":"2010-09-30T14:04:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Name change of intrinsics as suggested by Jeffrey Yasskin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115145 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"79101aec3ad3070ad1378ca1450b72edf8ed67da","date":"2010-09-30T21:05:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[atomics.flag] completed.  Initialization is not working on clang and can't be made to work without defaulted default constructors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115207 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1348fba3e2fc90f727ef88c17d9073a2b5e9686e","date":"2010-10-02T23:23:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bug 8254 by Bernhard Rosenkraenzer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115430 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"364f5965dadc362dc019ccc4a7f641c00a50e6df","date":"2010-10-02T23:27:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bug 7984 by Bernhard Rosenkraenzer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7c0c696afd1f0f4e1e15894fbb8bba41c4b6d3dd","date":"2010-10-03T13:59:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Tweak to make clang blocks work with std::functional (very fragile)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"611fdaf2290948d7359836520802b4ce8dfad0e1","date":"2010-10-04T18:52:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Still working on the basic design of <atomic>.  I'm working towards a system by which the compiler only needs to define the strongest intrinsics it can.  Weaker atomics in the library automatically try stronger and stronger variants, picking the weakest compiler intrinsic available.  If no compiler intrinsics are available for a given operation, the library locks a mutex and does the job.  Better documentation to follow...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26994e383c00471d23476a569b00803be0e201a4","date":"2010-10-04T19:01:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"__has_feature crutch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115540 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"002f1d341b37c6db55f1a260f6a6d93233b9eb70","date":"2010-10-04T23:55:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Filling out the infrastructure in <atomic>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115577 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4ac745466ed2f9dcfbc04c7277d496b754520e0","date":"2010-10-05T13:38:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Thanks Sebastian\\!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cac2c2c9c36c1988205a48fce0ec806c53a61c5","date":"2010-10-05T14:02:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make flag type configurable by the compiler\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56f0d5be064ed82f439e1596a272237697077ec3","date":"2010-10-05T16:44:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A compiler writer's guide to <atomic>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e78d1f548bf42701c4c6d8ae5dd9159b7224b056","date":"2010-10-05T17:22:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A compiler writer's guide to <atomic>, minor update\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115633 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"086b718734ba35c81faa05f5c723baaa148e40b1","date":"2010-10-06T16:15:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated <atomic> docs with three design options\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115791 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"77868b9d9ade601fc5a3af5d99db49ea28c839f1","date":"2010-10-07T14:18:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update atomic design A\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115913 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"251aaa1064308efd1bf4b4517dfa93d8849e6f93","date":"2010-10-07T16:25:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Relaxing timing test a bit to avoid spurious test failures under load\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115920 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffb9a4e235d0909859fdc4e1f98aa0fae5480ee4","date":"2010-10-07T18:03:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected an inconsistency with recent changes in tuple, and perfect forwarding within bind\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@115930 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08f2969220ade83dbba368e186f8588ed4a2f6cd","date":"2010-10-08T17:36:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated atomic design docs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116065 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c143ad882aa3929cebc5e6d7d67a08769f8e3b2","date":"2010-10-13T14:37:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Patch by Marshall Clow to make the assignment operators of piecewise_constant_distribution and piecewise_linear_distribution exception safe.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116404 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4d892491857f816891e7158de70379cb395c1dbe","date":"2010-10-13T20:24:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"updated for weekly test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116425 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"373a9d18d39e7965ba023c0786f9d3bce0029c05","date":"2010-10-13T21:11:52.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"update export list for when building with clang++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116434 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9734c831f63b160d1e64f3af2ebacfef7d4ed12","date":"2010-10-13T21:12:41.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"temporarily use cc to link instead of clang to work around issue with -Xarch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8177207f3cd64f4f4d0042132ed9041f6086e67c","date":"2010-10-14T17:11:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bug 7983 fixed by Bernhard Rosenkraenzer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116487 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5306d68019dd52a3dc3989ff02958e3f21e9655c","date":"2010-10-14T19:18:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Convert __thread_local_data to the singleton pattern\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116500 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b742dcdd52a5c1647dde082ca68023d017d621fc","date":"2010-10-14T19:24:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Convert __thread_local_data to the singleton pattern and change export files...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116501 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d5dff18974650a994e020eda4ba6fe4c16808f9","date":"2010-10-14T21:08:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix two test bugs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116515 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6fe084fd45d1f835c46406dc2c92bc1fc6e6251","date":"2010-10-18T16:02:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update atomic Design A spec\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be22ed405a6bddf82f663d80f516b38d1913e6ce","date":"2010-10-18T16:40:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update atomic Design A spec with reference C++ implementations for the purpose of documeting the semantics of each atomic operation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116713 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21ef47f436bd01aada17e757959352b6b82d40bf","date":"2010-10-18T20:39:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Changing <atomic> to follow Design A\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e738501eb32ba925b87b51e5571bfccf48a1f728","date":"2010-10-19T16:51:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"atomic_char\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116813 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5bbe97ddaad68812802c6b514e13ce44c1e5174e","date":"2010-10-19T21:22:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"atomic_schar, atomic_uchar, atomic_short, atomic_ushort, atomic_int, atomic_uint, atomic_long, atomic_ulong, atomic_llong, atomic_ullong, atomic_char16_t, atomic_char32_t and atomic_wchar_t.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116860 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f26262dde064e95650bf5508fe8baa9951ca7059","date":"2010-10-20T20:15:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated chart with weekly test results, and updated export files for chnages in <atomic>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@116943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bce9c3132d75041bcc1e693fd2cc25a13cc497d6","date":"2010-10-21T17:44:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"[atomics.types.address]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@117033 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4e5994824958a4615181f50c05eddcbc7c3a6641","date":"2010-10-22T15:26:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed bug in random_shuffle to avoid swapping with self\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@117098 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e87ad178cc1a8e91eb5c82d9222d7b0a33ed75e4","date":"2010-10-29T14:10:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Secure __next_prime from overflowing\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@117650 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8feecea670c12b6095944e4601f297ca9521467","date":"2010-10-29T19:46:14.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"update to use new linker option to re-export from libc++abi.dylb\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@117691 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"726a76fb47b47a4999a981d66a8c5e44fcf8c57c","date":"2010-11-16T21:10:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I have reverted all contributions made by Jesse Towner in revision 110724\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28dbbe0596878c12e13507aad6b40d33e5a8fa20","date":"2010-11-16T21:33:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dave Zarzycki showed how the efficiency of shared_ptr could be significantly\nincreased.  The following program is running 49% faster:\n\n#include <iostream>\n#include <memory>\n#include <chrono>\n#include <vector>\n#include \"chrono_io\"\n\nint main()\n{\n    typedef std::chrono::high_resolution_clock Clock;\n    Clock::time_point t0 = Clock::now();\n    {\n        std::shared_ptr<int> p(new int (1));\n        std::vector<std::shared_ptr<int> > v(1000000, p);\n        v.insert(v.begin(), p);\n        v.insert(v.begin(), p);\n        v.insert(v.begin(), p);\n        v.insert(v.begin(), p);\n    }\n    Clock::time_point t1 = Clock::now();\n    std::cout << (t1-t0) << '\\n';\n}\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119388 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"662497edd2aa71cc9c84cd89baadc632720b3c04","date":"2010-11-16T21:39:15.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"add a credits file for libc++\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f38bc6efc52ff2c773582d5b62dd53aaa92c186c","date":"2010-11-16T21:40:19.000Z","author":{"name":"Chris Lattner","email":"sabre@nondot.org"},"message":"libc++ is now dual licensed under both UIUC and MIT licenses.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b64f8b07c104c6cc986570ac8ee0ed16a9f23976","date":"2010-11-16T22:09:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"license change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119395 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e32b5e2f232ab345a2a842790eb86707ab83dcd8","date":"2010-11-17T17:55:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update <string> to use allocator_traits.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119522 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86ed8aefb29692a231ce218815ad1077f2329cc5","date":"2010-11-17T19:22:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1118\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119541 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd2254b454e9398d1287e44630f3ac654cf9f43c","date":"2010-11-17T19:52:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1191\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b2cb48cc1de3c367e32920d04c6bc8b99d01e7b","date":"2010-11-17T21:11:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1323\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119560 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34d6b19721973b004c99b080853f29bc72100f99","date":"2010-11-17T21:53:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1325\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119571 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47761071be811e5815311294b71ad6ac9414963e","date":"2010-11-18T01:40:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1404\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119609 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"278bf2d2897a1fb1525b2ece34487bf510eab763","date":"2010-11-18T01:47:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1432\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119611 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f6a6273948e56d9d39843ba1074830049222e18","date":"2010-11-18T16:13:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1339\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119699 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9650b6cce32bd021c5d6116089a45fc18712c1cb","date":"2010-11-18T17:01:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1439\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"995676a98e8029e729543130b0bba7ca00955652","date":"2010-11-18T17:34:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1522\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119710 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9835d761695b7d54e7d231dd1fe682597f249349","date":"2010-11-19T01:38:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"type_traits intrinsics design\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119775 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01feecb7890a2531a53a421accd024f36d47f8a5","date":"2010-11-19T01:48:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"type_traits intrinsics design\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119776 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1468b668aa964beb1220e9b36162b092fb54952b","date":"2010-11-19T22:17:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3142.  Many of these traits are just placeholders with medium quality emulation; waiting on compiler intrinsics to do it right.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119854 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f048fe3a09ec018990c055bc9308deffcaff89bf","date":"2010-11-20T18:25:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3123\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119906 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f8f852138f86e4588916021e1afedfcab25298c0","date":"2010-11-20T19:16:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3191: C++ Timeout Specification\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@119909 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6689564040267cf8a2f4e1bd148a08e3fabad302","date":"2010-11-23T18:33:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3188 - Revision to N3113: Async Launch Policies (CH 36)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120027 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"091f2ab44f35b044a14359c3dc794d3688ee074f","date":"2010-11-23T19:15:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73d2f94f6b92a53a7918c9323ac80a3fa087d49b","date":"2010-11-23T19:52:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6587dfe980eab8c9c74eab096c0f56dd31f13375","date":"2010-11-23T20:21:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120040 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5711e4daf0caea386db832171412f4a400e387b3","date":"2010-11-23T20:22:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120041 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17c3a8104822a4ff5f0459440e678195975f3321","date":"2010-11-23T20:25:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120043 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"afff5aacd637ee3d228a59f49156785672b200b8","date":"2010-11-23T20:26:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120045 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59a5ddbbd1afd47ed471bf2859f5dd125d0e0371","date":"2010-11-23T20:27:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120046 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83b6979fa2bfd51598cef721bd784587c3c7ec59","date":"2010-11-23T20:29:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120047 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa5043d878f0407476d17e714fe4949f93e97aaf","date":"2010-11-23T20:41:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120050 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46ab5def6222d8ffaebb73dee29f13e43f7ea41d","date":"2010-11-23T20:45:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8771430346958c5e47fcb6216bacc1a706b0508f","date":"2010-11-23T20:47:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120054 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"adaa6266fedc73dd2112fd074dcb5e12710fceb3","date":"2010-11-23T20:55:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120057 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6051e24e4596509435b63be32824d91ac5cc7b62","date":"2010-11-23T20:55:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120058 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c706565c88e296f3902eccf052907dad69711c3e","date":"2010-11-23T22:13:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testsuite strucuture to latest draft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120064 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d397d03651652be4ec2d6e819d6a3a01f57b1bfd","date":"2010-11-24T17:05:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add template alias emulation to <ratio>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120098 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac417faebc02fe301cb2764ff2bdabf9cccfeaa6","date":"2010-11-28T19:41:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Minor fixup in <ratio> and add optional support for shared_mutex and upgrade_mutex which must be opted into with #define _LIBCPP_SHARED_LOCK\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120258 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7de47902d08e6cd08977b573b134f21b5782fc4b","date":"2010-11-30T20:23:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implemented N3194\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120458 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a445151f4a1a9abf852cd7b84d6328687bb3294c","date":"2010-12-02T16:45:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3189 Observers for the three handler functions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120712 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55ddb21dd4ba7f63ca7cd14266271b85e1db28da","date":"2010-12-03T17:25:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add typeinfo for char16_t, char32_t and nullptr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120810 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f970ad73a9d57680b747ac8342097b30190eebb","date":"2010-12-04T19:54:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix up uses of new/terminate/unexpected handlers to use the new getters.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120914 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d42c4beeff6b709d3df456e2e3eaa2b0e08b4192","date":"2010-12-04T19:56:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"oops, forgot std::\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@120915 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a0248d2d71b86fbf4658ca2f8ee1bd7a0601f14","date":"2010-12-06T15:11:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add a couple more std-qualifers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121002 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4777bf2799c59a847691094ae2c43df986ab55ce","date":"2010-12-06T23:10:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Getting <atomic> warmed back up.  We have a hopefully more stable spec now.  And I believe the intrinsic spec at http://libcxx.llvm.org/atomic_design_a.html is still good.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121064 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91e2f26fec72dfbd0cc39d5e5e8e7c0c25b6e155","date":"2010-12-07T20:46:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Work on <atomic> continues.  The file size is actually sane now...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121181 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f02417b600ee58299effa60b5ffd9d58b8bc3129","date":"2010-12-07T23:20:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"atomics ...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121202 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57e5e87323b3b8df1f8ac740544b733927887b19","date":"2010-12-07T23:24:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"atomics ...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121203 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2f6afbfab2c84672cacfc2ebbfbed9db0ebbb77","date":"2010-12-07T23:24:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"atomics ...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121204 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c9f5d9fca6df48bee03bd7aee3ba429d0cdc776f","date":"2010-12-08T17:06:47.000Z","author":{"name":"Michael J. Spencer","email":"bigcheesegs@gmail.com"},"message":"test: Rename string_op+= to string_op_plus_equal. Windows git doesn't like it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"770d1c4ea75402457c5ed3895b5ec044defce01c","date":"2010-12-08T17:20:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"After a long break to wait for the atomic spec to settle, this completes the library part of <atomic>.  It currently won't even parse as it depends on the existence of the intrinsics specified at http://libcxx.llvm.org/atomic_design_a.html.  Everything has been tested using fake intrinsics which have now been removed.  As the intrinsics come online, the ATOMIC_* macros will need to be adjusted to reflect which operations are lock-free.  These macros will probably need to be #ifdef'd for each supported platform.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121267 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b18a48e280f039560e772befed75b30413a455a","date":"2010-12-08T20:09:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"cleaning up...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"31aaf55f4cb0c69483b4198406c56b5c7c36fbd2","date":"2010-12-08T21:07:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3158 Missing preconditions for default-constructed match_result objects\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121282 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f190e97885da12c040ec63a417a820ab6cd6a0a1","date":"2010-12-10T19:22:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This got accidentally removed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121502 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8f787b18830ae120fc195f47735a02e84d1a344","date":"2010-12-10T19:22:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Test adjustment for recent changes in allocator_traits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121503 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"626916fc255c40bc45e0f20ee69faf48f5094cac","date":"2010-12-10T19:47:54.000Z","author":{"name":"Michael J. Spencer","email":"bigcheesegs@gmail.com"},"message":"Add CMake build and fix major Linux blockers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eee7698bac6527a616dbfde4c91fffdf08e31ded","date":"2010-12-11T00:05:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The implementation of the new definition of result_of (N3123) resulted in some test failures in [func.memfn] that I failed to previously notice.  This corrects that mistake.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121600 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e1493ec5e125adfb7531b2a05c26bff26325cb2","date":"2010-12-11T20:47:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"LWG 1385 [FCD] tuple_cat should be a single variadic signature (http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#1385).  This issue is only in Ready status, meaning it is not official, but probably will be this March in Madrid.  It was tentatively accepted in Batavia with the previso that Bill and I didn't have any problems implementing it.  This is my part of that agreement.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121619 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e48e36623b011f4c9036b9a774e4016d1a476440","date":"2010-12-12T23:04:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reduced copying cost of tuple_cat from quadratic to linear.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@121655 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d72b1e393e35d61917d6d0ce069482ab11e96d1","date":"2010-12-17T14:46:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Effort to reduce the number of exported symbols\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@122057 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"93c382bf45f023eb63476b32e0a80bd0b50bce1f","date":"2011-01-04T19:21:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Marshall Clow's fix for Bug 8421.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@122825 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04240d90ef5da1da2d729088f0820c3bbc96626c","date":"2011-01-04T19:53:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reverting an old optimization that conflicts with the new allocator model, and causes some test casees to compile that shouldn't.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@122830 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"52c4eb23e06f647e1a70db15b77fb5e86304f920","date":"2011-01-08T20:00:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Two minor fixes:  1.  Put integral_constant conversion to integral in even without constexpr support.  2.  Add ios_base to <iosfwd>.  The latter is being tracked by LWG 2026.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@123080 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac38bae75b0f08669e168762d45b41b9bab49085","date":"2011-01-11T20:02:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"fix guard\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@123269 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6fd4b669caa15aa2ea40b0d87679fd23629d8b15","date":"2011-01-12T22:56:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing an ambiguity in variadics found by clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@123337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f5859c45be0278700ad6a87883a6ff4f0901605","date":"2011-01-13T20:05:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add attribute to inlined member.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@123392 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e76496ce46dc76cb0947dddc14187b513343cce0","date":"2011-01-23T01:05:20.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Teach the Lit configuration to actually use the cxx0x setting when\nconstructing compile flags, and to link against the 'rt' library on\nLinux for clock_gettime and friends.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f83417b8232b4c3853c2e1dfab2c0a9e80d07661","date":"2011-01-24T16:07:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chandler Carruth changed >> to > > in several places.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124120 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9e1c7e3674284efe4fea3be799e83d72aa92dfe","date":"2011-01-25T01:15:41.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Eliminate the C++0x-only is_convertible testing function that accepts\na cv-qualifier rvalue reference to the type, e.g.,\n\n  template <class _Tp> char  __test(const volatile typename remove_reference<_Tp>::type&&);\n\nThe use of this function signature rather than the more\nstraightforward one used in C++98/03 mode, e.g.,\n\n  template <class _Tp> char  __test(_Tp);\n\nis broken in two ways:\n\n  1) An rvalue reference cannot bind to lvalues, so is_convertible<X&,\n  X&>::value would be false. This breaks two of the unique_ptr tests\n  on Clang and GCC >= 4.5. Prior GCC's seem to have allowed rvalue\n  references to bind to lvalues, allowing this bug to slip in.\n\n  2) By adding cv-qualifiers to the type we're converting to, we get\n  some incorrect \"true\" results for, e.g., is_convertible<const X&, X&>::value.\n\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124166 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6c669943b3e5ddb36b3d75b7f17450d271e634ce","date":"2011-01-25T16:14:21.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"An rvalue reference cannot bind to an lvalue, so static_cast the\nresult of the __tuple_leaf::get() call to an rvalue reference when\nreturning from tuple's get().\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124190 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56a85ca8bfae450e58f64d3f8ed3209dba10fec0","date":"2011-01-25T16:31:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"tweak for readability (no functionality change)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ff9d3599c76921c13a5c75cc1a67b0eac0dba7f","date":"2011-01-25T16:32:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"placeholder test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124193 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ea2e37c0856ce9dc45a52c9da7c1240cee37afa","date":"2011-01-25T23:11:15.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Remove an (incorrect) compiler workaround in the __mu function. The\nworkaround relied on rvalue references binding to non-function\nlvalues, while the original formulation (with std::forward) does the\nright thing.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124241 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f193f202ffd8427cdde1ced9ece3974f802b00e","date":"2011-01-26T00:06:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add always_inline to string move constructors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124252 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aab015a9294d47daf2234f316ac1f765af141d02","date":"2011-01-26T00:12:48.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Teach move_iterator that rvalue references cannot bind to non-function\nlvalues, nor can one take the address of an xvalue, by adding\nappropriate static_cast's (in the first case) and a temporary (in the\nsecond case).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124255 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"497ac97247791e251d94c85602ae44d2ededadc4","date":"2011-01-26T15:39:56.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Inline namespaces are always available in Clang. Rely on that without\ntesting via __has_feature, since __has_feature for C++0x features no\nlonger evaluates true in C++98/03 mode.\n\nAlso, eliminate the redundant using directive. Inline namespaces make\ntheir members visible in the enclosing namespace automatically.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124293 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"091c5ace7876d6da4fcc6a20127dd1b22aa79ed5","date":"2011-01-27T21:00:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reverted previous fix to is_convertible as it caused more problems than it fixed.  But this reverted fix will only matter for non-clang compilers.  Installed __is_convertible_to for clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124429 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99b2f7660d953d4040db63530f68edb4a9cd23c7","date":"2011-01-27T21:00:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make forward_list splice_after and merge work for lvalue lists\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124430 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a21a019461a1d84e1798080fea4347296bf3d67","date":"2011-01-27T21:01:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"clang found a missing return statement.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124431 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"30bbc930887511b08eecee38089ee0afd3f80fba","date":"2011-01-27T21:01:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"updated buildit to work with recent clang updates\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124432 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65451f15493a16a541d82f0591ba27506f2793b1","date":"2011-01-27T23:18:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated getting started directions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ca45e21b8247fe6477b3dfb29d82b7c8602daac","date":"2011-01-27T23:36:08.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Eliminate extraneous {};\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"80f918072974dbe4dc7d2fdb5bbc2cab96ef0701","date":"2011-01-28T20:00:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"minor corrections to test, and hook is_base_of up to clang intrinsic\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124502 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"211f0ee1be4a4eaa0fab353904a8986af3f39e50","date":"2011-01-28T23:46:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bug 9096 - list::iterator not default constructible\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124508 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2529d02b5da548f75d4c7d27c1a5c1c267a9b558","date":"2011-02-02T17:36:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Qualify calls to addressof with std::.  Bug 9106\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124726 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47a7cce01e02f66274c16c425e7a9560f98d1706","date":"2011-02-02T17:37:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Missing traits::to_int_type in fstream\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@124727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"31b8e617b6d429ec2ebfdd882d23f9df26aae04d","date":"2011-02-10T17:46:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Installed __has_feature(is_convertible_to) and __has_feature(is_base_of)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@125290 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"621ee222d97b4ff4392117b85c928bb6b307c56e","date":"2011-02-10T21:34:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"fix stupid type-o\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@125311 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4cbb5b6b7626e4a8b74e0f61a4c5a88591f36a0","date":"2011-02-14T18:06:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update testit to default to clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@125498 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cf5d8c3aaab7aeaedac2a89085790b9f92d1a4c","date":"2011-02-14T19:12:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson noted many places where function calls needed to be qualified (thanks Chris).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@125510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08774c5a2292d3338f4cd980001723a4f005e3c9","date":"2011-02-16T00:40:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change install name to libc++.1.dylib\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@125626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a245dbf526fb8edb6cdc350f6a0901663f09437","date":"2011-02-22T14:18:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Jean-Daniel Dupas fixes install directions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126222 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b2080c70d4fc91f83afe25506240e73ad7dddf65","date":"2011-02-25T00:51:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson spotted a problem with messages_base::catalog while getting libc++ to work on boost.  The standard says this type must be an int.  But this type is the key returned by the OS facility catopen.  On OS X the type returned by catopen is void*, which doesn't fit into an int on 64 bit platforms.  Chris suggested using ptrdiff_t instead of void*.  It still isn't compliant with the standard, but chances are that this change will fix what is ailing boost.  Chris also supplied the algorithm for distinguishing high-order pointers from error conditions.  Thanks Chris.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126462 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7c8da6f2d1189bc49427fa0b8d5cbf388131c62","date":"2011-02-25T19:52:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9326\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126504 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df85e57f4a33ccaa56e044bac98e2752ace52303","date":"2011-02-27T18:02:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed two problems found by Chris Jefferson:  Made operator>> for char consistent with gcc.  Opened an LWG issue on this one.  2) Renamed some private typedefs which are causing boost grief.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"171869e27ce52cf45386baf45f8d2b6bd5e3bf27","date":"2011-02-27T20:55:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix copy_n to increment only n-1 times for an input iterator.  This works much better with std::istream_iterator<int>(std::cin).  Credit: Matan Nassau.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fddf722f4e1c118fe752b2156220ad3112358e35","date":"2011-03-01T14:27:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson found this bug to pair/tuple introduced by a recent change to the draft that I missed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"542b0f0cf59ada30acad97188302e37ebafa5e8c","date":"2011-03-02T17:29:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9349 I have not personally tested this patch.  Please let me know if it causes problems.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126846 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8dcad976e02e5520bf4fddb4bdc5c70aaadb3ed0","date":"2011-03-03T01:59:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9349 I introduced a bug with the last fix and Ryuta Suzuki has corrected it.  And hopefully I committed Ryuta Suzuki's directions correctly this time.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@126917 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"80586729e4aa608e29239a20df23bd7f6f5aded5","date":"2011-03-09T01:03:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson found a defect in the C++0x working draft by trying to run libc++ against boost.  I've submitted an issue to the LWG, and this commit attempts to implement the proposed resolution of that defect report.  I'd point to the issue but it hasn't been put into the LWG list yet.  The title of the issue will be: Stage 2 accumulate incompatibilty\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@127303 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5885da34ce3938035719862cdda2bc84ad2f9ab6","date":"2011-03-09T15:10:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Walter Brown brought to my attention that type_traits was failing to correctly classify nullptr_t\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@127334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e5e7e78ee8390aca9441281af8161d47b430937","date":"2011-03-09T17:17:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected const-correctness on nullptr type_traits, and beefed up the test for nullptr_t.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@127338 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9b8998795b9b4d0dc352d4c1234232373ffeb0e","date":"2011-03-10T17:27:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I have to revert this recent fix to tuple conversions until clang implements cwg 1170.  Without this fix pair and tuple don't convert properly.  With it, associative containers get access errors when they shouldn't.  cwg 1170 fixes the latter.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@127411 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d0a2fbfe6045aed56999eee4cdb65fca7b77cb31","date":"2011-03-10T17:27:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9444\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@127412 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"770a3c511660cc1e1ac6dad19bd79b00910b60ad","date":"2011-03-11T22:33:07.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"<rdar://problem/9073695> std::uncaught_exception() becomes true before evaluating the throw-expression rather than after\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@127499 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86e78d694c9a85c171335644a8276ace61bdce23","date":"2011-03-26T19:58:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Jonathan Sauer updated is_base_of traits status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128349 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"41fb6e1432a7f6d3f0ff2b55d68ff2e3c0387335","date":"2011-03-26T20:02:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Jonathan Sauer found a bug in the way ^ was handled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128350 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"154002bb5d6a161bb9a9a76030349fcec8ec40fe","date":"2011-03-31T16:39:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Provide a more readable error message for <atomic> until it is implemented.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128636 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d615e47bea43d3ae207e039644bf4414ecba3744","date":"2011-04-03T20:05:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson submitted this patch to fix http://llvm.org/bugs/show_bug.cgi?id=9351\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128796 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8a03c763abdc4049ce1c8f480fbee3ea6947c02","date":"2011-04-03T20:06:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"... And these wonderful tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128797 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e93e96dffda6748f0f577bf827ad271c5e3bfbe","date":"2011-04-04T01:42:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected tests for http://llvm.org/bugs/show_bug.cgi?id=9351\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128807 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a02851e8a2b24c51748fa0e4abe00f420cdb7500","date":"2011-04-05T14:55:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson found a missing const (Bugzilla 9632)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@128885 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"506b36487c1eb2ad213ebaac34e79d25c22edf79","date":"2011-04-10T17:54:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"time_get was missing the %F specifier.  This change impacts the binary.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@129251 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c1aa2c24d5984c2258a839f61e3bab40f865947","date":"2011-04-10T19:46:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Changes to cerrno to protect against the case the ELAST is not defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@129255 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9dbeff919b6959f63c63b88d14313f0112d2749f","date":"2011-04-11T02:18:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9672\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@129266 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef3b2e2e34aef788ea45ca554636f1c62e616f2a","date":"2011-04-11T18:22:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix bug in Sseq constraints found by Seth Cantrell\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@129285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"75f7695c62d2938521cdefdd1ddb21c870ac0ea3","date":"2011-04-14T15:59:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Think-o in poisson_distribution at mean == 10\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@129520 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e14ea5835edb70d884a47ff0ba1a4f079041674c","date":"2011-04-21T14:29:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9765\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@129910 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ac6af70272f87973753911605032914f9192591","date":"2011-04-29T16:20:26.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Qualify calls to std::next(), to avoid conflicts with\nlibraries/applications that define their own 'next' template.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@130511 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"469d419a17e5af13d95c217a406a92621bc9ed32","date":"2011-04-29T18:10:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correction to set of overloaded pair constructors for C++0x\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@130521 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6e08d6c449243e65929be1bc570a2142c9ae434","date":"2011-05-04T21:50:46.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"<rdar://problem/9014045> more support for Apple internal build environments\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@130872 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffadfd4c1e8968ce09cd54c75b068686f91a0996","date":"2011-05-05T18:45:41.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"add support for setjmp/longjmp based exceptions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@130938 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d982028b921fd3de546fb7a21835e5e60c2d2513","date":"2011-05-06T01:13:20.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"change RC_BUILDIT to RC_XBS for detecting Apple build environment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@130970 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3666695f0d3809239d7240d786ac4970c539cbaa","date":"2011-05-09T19:21:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated type_traits and the type_traits design doc with recent work done in clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131090 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d37fb32d2a235381a6efe96ebbcfa5e79db97af","date":"2011-05-11T20:19:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Redid nothrow traits in terms of non-nothrow traits when noexcept is available\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131198 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b41c6047ba9016a4a183fd77522db941bc32392","date":"2011-05-11T20:21:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected some bugs in both memory and the tests.  Preparing for being able to turn on support for alias templates.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131199 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7bbce3c0e76922b7a656f763f3a598f656ac0c4a","date":"2011-05-13T00:01:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated to reflect updated use of existing clang support\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5c2f255c5f02f5d8f80b05572443c62c33c9619","date":"2011-05-13T00:03:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Corrected misspelling\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e604b442c44e9f3dda83d2c5c15a8a7dc529dad","date":"2011-05-13T00:32:09.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"__is_trivially_copyable now supplied by clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cfa1f7cbd39a6a73d14b3c134fd2cf1175b27a7","date":"2011-05-13T13:39:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"CWG 1170 has been fixed for destructors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131290 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6063ec176d5056683d6ddd310c2e3a8f1c7e1b46","date":"2011-05-13T14:08:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A much improved type_traits for C++0x.  Not yet done: is_trivially_constructible, is_trivially_assignable and underlying_type.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131291 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11a58a68e16a7747ef934cdd21291780b45abeb7","date":"2011-05-13T17:16:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9118\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131296 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a111118a60290ec0c650fbd0327403c4b118bdd","date":"2011-05-13T21:52:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9854.  Also created an emulated hexfloat literal for use in some of the tests. <sigh>  And cleaned up some harmless but irritating warnings in the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131318 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d01bf0665357d8c10706af243a9253aa68b8b8d","date":"2011-05-13T23:59:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Suppress some warings in the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131326 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1151efcb1536554cc781a6d09f1c0d36a3f488c","date":"2011-05-14T00:04:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Suppress some warings in the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131327 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d515df2a50342d2324563f175d90d80284da00d4","date":"2011-05-14T00:07:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix test bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131328 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e80c36e27b3f8870bf44afa396aaff63c6e40b5b","date":"2011-05-14T14:33:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correction to hexfloat hack.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131340 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5a0ba86c8420a8407c23f2ac7665bc1ac5f597e","date":"2011-05-14T14:53:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Warning suppression in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131341 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"783b810cae1c7bae385e7677c67c64bae5bf9656","date":"2011-05-14T15:36:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Warning suppression in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131343 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6cc833ae7ce197d5210e56924a13697341e8efc","date":"2011-05-14T15:38:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Warning suppression in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131344 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e06b9965ad05b39891ba24817e832a4fac046e0c","date":"2011-05-14T17:24:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix type-o found by Justin Hibbits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131346 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ec7f5a5187cba2145e1addc5f279a18f0e1f747","date":"2011-05-14T18:20:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix type-o found by Justin Hibbits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131348 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37c53b6221010370ac818ec33cb89211566e9a98","date":"2011-05-16T16:17:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Redesign of result_of to handle reference-qualified member functions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"496934a80360042b07e0291e61b4fb43296498eb","date":"2011-05-16T16:19:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Supply missing move ctor in __bind_r, though this one will eventually be defaulted\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"941138f8c92cb95359146b93005e59a39f489b21","date":"2011-05-16T16:20:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Spit 5th bullet __invoke into function pointers and everything else because result_of doesn't deal with function pointers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131409 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed22f562e5ac3cda3a8ed054b9cc6fa83b903349","date":"2011-05-16T16:20:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Supply missing std::qualifier to call.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131410 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"656bdc3667f65f4d9c2bd2252c0d62122b97b5a0","date":"2011-05-16T18:40:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Brought thread variadic constructor up to current spec, which allows move-only functors and move-only arguments, but disallows functors with non-const lvalue reference parameters.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad935d583d1775c96ca1ebb3644eccbf531949d0","date":"2011-05-16T19:05:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Brought call_once variadic call up to current spec, which allows move-only functors and move-only arguments, but disallows functors with non-const lvalue reference parameters.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131414 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"97ecd6491374d756bd9c6da9ef84ab173f5049d6","date":"2011-05-17T19:12:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Clean up a bunch of warnings in the tests, 3 of which actually turned out to be test bugs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131479 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cbf9f9b25b5754a3a8398f0dbe582c5c105e029","date":"2011-05-17T20:10:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix and beef up test bug for move_if_noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131483 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b9826b2dcf326aca7e71f19110f9e6f79aa8fb0","date":"2011-05-17T20:27:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed bug in recently introduced bind move constructor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131484 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fead2e2de96ff49b39cb1c712aa88918b2be6a72","date":"2011-05-17T20:41:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix ambiguity in operator== of scoped_allocator_adaptor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131485 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"932209b344cfd0845b8c9b155702a8f1fdf60e8c","date":"2011-05-17T23:32:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A bunch of future tests got invalidated with the latest updates to thread.  Fixed the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131509 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3dd965bdf9700998ef65cb8a2a4abb88e9bae6ed","date":"2011-05-18T00:47:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This commit was accidental.  Reverting.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131514 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57cff290a4772dadb895b15a472376d4918fc9e3","date":"2011-05-19T15:05:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I had a giant misunderstanding of what 'synchronizes with' meant in [futures.async]/p5.  This invalidated the current design of async in <future>.  This is a new design, based on my new understanding, which has been confirmed on the lwg mailing list.  The summary is that ~future() (and ~shared_future()) will block when they are created from within async, and the thread hasn't finished yet.  As part of this work I created two new type traits:  __invokable<F, Args...>::value and __invoke_of<F, Args...>::type.  These are what result_of<F(Args...)> wanted to be when it grew up, but never will be. __invoke_of is carefully crafted so that it can serve as its own enable_if (type doesn't exist if the signature isn't invokable).  All of this work is C++11 only.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131639 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0148a838d09499a457ee2dbd07e5573711e7f32e","date":"2011-05-19T19:41:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Simplied bind using __invoke.  In the process, found and fixed a couple of bugs.  C++11 only.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131667 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd89e4b0dd7387252fb55369a7cd478b731215eb","date":"2011-05-20T22:02:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This is a simplified (and superior) implementation of __invoke, __invokable and __invoke_of.  It is superior in that __invoke now handles reference qualified member functions whereas the previous implementation did not.  And it simply has less infrastructure in its implementation.  I'm still learning how to program in C++11 (and probably will be for a long time).  This change does not impact the behavior we're seeing in http://llvm.org/bugs/show_bug.cgi?id=9975\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131761 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e003ce4899cb7d6e0752cfa43ea66d36a3c864d2","date":"2011-05-22T00:09:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"__invokable and __invoke_of now check for incomplete types and issue a compile-time diagnostic if they are used with incomplete types for anything except a return type.  Note that both arguments *and* parameters are checked for completeness.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131818 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef54251a84b976a17ce7a9cc8e55e644f090c6dc","date":"2011-05-22T15:07:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix const correctness bug in bind involving reference_wrapper found by Jonathan Sauer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131852 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"20542c0b94b43f5da68db4ab6fb0cf643205b4c9","date":"2011-05-24T12:54:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=9399 fixed by Ryuta Suzuki\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131961 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1122fec9739f205835239e63475d316e63136566","date":"2011-05-24T20:26:04.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"on Darwin re-export C++0x type infos\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131995 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8feadca3fac957372fa2de587e6aac05a293d03c","date":"2011-05-24T20:27:31.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"support another Apple build environment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@131996 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b7a43da34a986ad356993d9ccea8c99a45a958a","date":"2011-05-26T17:07:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Added [[noreturn]] attribute everywhere it should be\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132125 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed56921d6e491eb96f489cedf24fed393fdfc0bf","date":"2011-05-26T18:23:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Applied noexcept to everything in [language.support] (Chapter 18)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132129 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19ce6a4792d0ed6027655dadf3ca3b93884a29ef","date":"2011-05-26T19:07:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Turn on cxx_alias_templates support\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132134 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e15fd1856a34a4bc0f7c1d649d2e22df9033326","date":"2011-05-26T19:48:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Applied noexcept to everything in [diagnostics] (Chapter 19)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132137 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9b2c2d6692f08489c28b8694cde5ad78ef06f12","date":"2011-05-27T15:04:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <utility>.  This included a little repair on pair, and some noexcept workarounds.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132186 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5e0121b8dcae2b6e1980d46522ab5a03b9a610e","date":"2011-05-27T19:08:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <tuple>.  And in the process learned that I had done it wrong for pair's swap.  I needed to create an __is_nothrow_swappable<T>::value trait that was smart enought to answer false when __is_swappable<T>::value is false.  Otherwise one gets compile-time errors when using pair or tuple of non-swappable types, even if you never try to swap the pair or tuple.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132204 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10f25d2739e803bccfc22adfb76645f91e95a17c","date":"2011-05-27T20:52:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <bitset>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132216 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1694d23e23d41c4037111d96324c0c16c744c09d","date":"2011-05-28T14:41:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <memory>.  I've added a few extension noexcept to:  allocator_traits<A>::deallocate, allocaate<T>::deallocate, return_temporary_buffer, and default_delete<T>::operator()(T*) const.  My rationale was:  If a std-dicated noexcept function needs to call another std-defined function, that called function must be noexcept.  We're all a little new to noexcept, so things like this are to be expected.  Also included fix for broken __is_swappable trait pointed out by Marc Glisse, thanks Marc|.  And fixed a test case for is_nothrow_destructible.  Destructors are now noexcept by default|\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132261 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"603d2c098945d33117fbe9c87c996d57bff31dc1","date":"2011-05-28T17:59:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <functional>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"756a1763d1a57d7d3439bb7c83b411c8f6dc4da8","date":"2011-05-28T18:34:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <chrono>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0667433587cad757c6d551f9c1f24202ad47b21b","date":"2011-05-28T18:51:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <scoped_allocator>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132266 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0687adca376ac24156967d402bda73384f0416c1","date":"2011-05-28T18:57:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <typeindex>.  This completes Chapter 20 [utilities].\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132267 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad1a5cc5f0f789cb30ed3379ab27d2be795c9288","date":"2011-05-29T13:53:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"minor documentation update\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5fed0377884a8b363bf2a4bcff8b78c58a1b7cb","date":"2011-05-29T13:57:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10045 .  Please review, I have not tested this on linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132287 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a6119a86c5285b013a4910674a0c5e3c688e5edc","date":"2011-05-29T19:57:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for Chapter 21 [strings].\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132296 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c26fd8061eaf3c6024d418b92742f07ef2215dbe","date":"2011-05-31T13:13:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add _ATTRIBUTE macro for gcc: Justin Hibbits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c983454d300a3a1f11055c9dbfedf383a58f56ce","date":"2011-05-31T15:34:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for Chapter 22 [localization].\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"20eda8b5633dc72b0ea4f3ae7a2956b50dbcdb7b","date":"2011-05-31T16:55:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Upgrade <ratio> to use template aliases when available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f0562af9ddb12e1fd1685b202988b2409549ad01","date":"2011-05-31T21:06:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <array>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"083ba5f5caace3deb76b550c6dadcd2271bb9cb8","date":"2011-05-31T21:45:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I've seen this question enough times to know that it should be fixed: http://stackoverflow.com/questions/6193734/implicit-conversions-with-stdfunction\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132363 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d737382dfda3b381025cd5ada1b796497d87a79c","date":"2011-06-01T17:25:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Turning on cxx_nullptr exposed a latent bug in is_function, causing nullptr to wrongly classify as a function.  Fixed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aabf28721bb8ecbff481dd7ea1c7dab62095a979","date":"2011-06-01T19:59:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Experimental support for a meaningful __is_swappable<T>::value.  This does not appear to be strictly needed for correct functioning of the library.  If it causes any problems, I'd rather pull it sooner rather than later.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132421 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a12beb35e52f5928ae26e7705395d1d32599686a","date":"2011-06-02T16:10:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for deque.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8790cabd86f609dde4b58c1e47bbcc411728e632","date":"2011-06-02T16:44:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for forward_list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a612b089184e84e78102c5faf3403337aad5ee6","date":"2011-06-02T20:00:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I've become quite disatsified with the lack of noexcept specifications on container move construction, move assignment operator and swap.  Without proper decoration on at least move construction, vectors of containers will have unacceptable performance.  Here's the fix for deque.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132480 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"18884f4e9f19f81e8772f4ce324e509e11928cdc","date":"2011-06-02T21:38:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Second try at getting noexcept on move and swap for deque.  I changed std::alloctor to propagate_on_container_move_assignment so as to make deque<T> move assignment noexcept.  What we really need is a compile-time switch that says an allocator always compares equal.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132490 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"93f2764b165fdcf62f4424d919d4713c9d2dbab6","date":"2011-06-03T01:46:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add noexcept tests for deque.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132523 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"009b2c4583bcbfc5d0893154eb0866aa21b494cd","date":"2011-06-03T15:16:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"After sleeping on it I've decided that all special members that can be noexcept, should be declared so.  The client has the traits to detect and branch on this information, and it is often an important optimization.  Give deque() a noexcept.  Add test for deque default constructor and deque destructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132549 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b965fed10bc47c74ed491717af082ecf5c8b815b","date":"2011-06-03T16:20:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <forward_list>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132553 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c560727d5e847f2628dc1246c1d35c4d9949389f","date":"2011-06-03T17:30:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <list>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132562 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53f7d4cc624477d8f503be22d89d83230960ea39","date":"2011-06-03T18:40:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bring noexcept for <string> inline with other containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1d27a4afaba2e3b708afd73f1533b7f8530008b","date":"2011-06-03T19:40:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <vector>.  This also includes installing move_if_noexcept() into vector.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132577 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7686add61e0a6c8e5abe28fb943cf2d698cd1266","date":"2011-06-04T14:31:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <map>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132639 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b2e2a8f6f3a1c47ea942bac99dd75c53be967954","date":"2011-06-04T15:22:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <set>.  Plus a few fixes to noexcept for <map>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132640 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b53768dac56eb88df9c4a6ed8829f738761843f","date":"2011-06-04T17:10:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Made more implementation  details of [multi]map/set noexcept.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132642 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f2f14c5d29b1a815cde3dcd8c775d91139f8889","date":"2011-06-04T18:54:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <unordered_map>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132646 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04dae1df2232276c6497dcaefec9f9d9d7d74890","date":"2011-06-04T20:18:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <unordered_set>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132647 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6a09441022a8b7e91ed7b84f3f968d3710110e0b","date":"2011-06-04T21:32:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <queue>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132650 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"58cd8231d80bb14c5e78fbedc00af191134cc99d","date":"2011-06-04T22:09:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept for <stack>.  This completes noexcept for Chapter 23 [containers].\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132652 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c28dbeee5231f573bc6402cf5e6b88e6f939609c","date":"2011-06-05T13:00:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Move nullptr_t to unversioned namespace:  Sean Hunt\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132665 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7c3891199213269ac26cbb9e950cdc379c12dee","date":"2011-06-09T16:53:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132780 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f5f2563aa2061dc7aafdceb170391163277bc89","date":"2011-06-09T23:31:35.000Z","author":{"name":"Nick Kledzik","email":"kledzik@apple.com"},"message":"more Apple build system tweaks\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@132819 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b1b2d40d71786272dfb2670cadc468c890e400c","date":"2011-06-14T19:58:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Provide names for template and function parameters in forward declarations.  The purpose is to aid automated documentation tools.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@133008 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d4b957820c6398f55184a63590a58846a41a11c6","date":"2011-06-19T19:12:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Miscellaneous minor fixes in <type_traits>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@133401 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7604fea08c1471c5670fa19290658f1269d207b5","date":"2011-06-19T21:45:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"More fixes:  One of my fixes to type_traits earlier today was incorrect, so that is reverted.  Recently clang appears to have tightened up its definition of is_convertible and that has caused some failures in [unordered_][multi]map.  I've switched to using is_constructible to restablish the desired functionality in [unordered_][multi]map.  Specifically, inserting rvalues of move-only types for the keys.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@133402 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5d76a7afce1d593634004566066c8e593a14ade","date":"2011-06-22T12:13:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add instructions for -U__STRICT_ANSI__ for Mac OS 10.6\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@133616 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35d2fcfc8e2462bccf0b078c457c052138dbc4ed","date":"2011-06-22T22:17:44.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Teach libc++ about the addressof() overloads it needs to work with\nObjective-C Automatic Reference Counting, where Objective-C object\npointers can have several different qualifiers (__strong, __weak,\n__autoreleasing, __unsafe_unretained). These addressof() overloads are\nonly provided in ARC mode, and the __weak variant is conditionalized\non having weak-reference support in the ARC runtime.\n\nFor historical reasons, Clang provides these definitions itself, and\ndefines the macro _LIBCPP_PREDEFINED_OBJC_ARC_ADDRESSOF to note when\nit as done so. The code belongs here, and this redundancy will be\neliminated in the future.\n\nAddresses <rdar://problem/9658274>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@133656 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2a08b43ee4ac077d703a00538a3b0128f50c83d","date":"2011-06-22T23:51:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"test for pair piecewise construction\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@133667 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d318d49e5c74179d0f4f9a79ab0f54a9531c5513","date":"2011-06-30T14:21:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Patch by Petteri Räty, http://llvm.org/bugs/show_bug.cgi?id=8992\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134155 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0949eedbd621bc1611266fb180d9a356ee1eaf9f","date":"2011-06-30T21:18:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"_STD -> _VSTD to avoid macro clash on windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134190 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"61aa6013c3377203aff484cf3300ac26511c26ac","date":"2011-07-01T19:24:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correct for new rules regarding implicitly deleted special members. http://llvm.org/bugs/show_bug.cgi?id=10191\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134248 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74248888ab9d6e32a3ab3d3d69719445e50a3d65","date":"2011-07-01T20:12:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Changed constraints on pair and tuple constructors from is_convertible to is_constructible.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134252 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90d7785eba35deb10bfb0258214ef04ccf77f207","date":"2011-07-02T18:22:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10250\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f03c3b461294e19ee0e5725e0a7b19fb8fb4c44f","date":"2011-07-02T20:33:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10248\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134327 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c8894b07803d02be0c876e420b00f46dd7b1efe","date":"2011-07-04T14:12:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make the default Makefile less destructive:  John McCall\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134375 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f66bffdbe23ae8b1ddfa43f451def27f30402b0","date":"2011-07-05T14:14:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix uninitialized loop counter. http://llvm.org/bugs/show_bug.cgi?id=10278\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134405 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12c3d374a5ecbaf1156c84f33efd1faf4afad102","date":"2011-07-06T20:52:28.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"<inttypes.h> does not necessarily include <stdint.h>. Accordingly, do\nnot test for this.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134531 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac6de546bd30d11eba9b1be40f7dc21cda6fa029","date":"2011-07-07T21:03:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixing up some ABI issues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134639 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb05a0801a6273fb850cc4cb3430702ea2a3c101","date":"2011-07-07T22:45:07.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Fix typo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134650 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"043fe1d93123ac56405165baff70c24d0a67bb33","date":"2011-07-08T00:04:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"provide ~future_error() definition\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134663 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62a6ac33a217b0e5a4c42367c6b72e51497246ae","date":"2011-07-09T00:56:23.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Implement generalized table lookups for upper, lower, and character\ntraits.\n\nTo the best of my knowledge, this will not break the ABI for Apple.\nHowever, it does introduce three publicly visible (although with\nreserved name) functions that will fail to link against the just-shipped\nApple version of libc++. Since they are not used in any inline\nfunctions, no actual breakage should occur.\n\nIf Howard doesn't want to put undefined functions (even internal ones)\ninto a header, they could be surrounded by additional conditional\ncompilation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134781 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e59f724f79c5388d6b0a7794fd6d610783bec62d","date":"2011-07-09T01:09:31.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Conditionally wrap the changes from r134781.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134783 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f0342cf2e4802f6d7948e1c5f59c41b4e25789e","date":"2011-07-09T03:40:04.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Don't assume that wctype produces a nice mask on all platforms. On\nglibc, for instance, it's a const char *.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134787 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2bf1c0851005fe3c6b3031e60fe8d710b7b11276","date":"2011-07-09T15:50:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make vector<bool>::reference and const_reference public\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134815 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66f2641ac9a743bebad4997066200a8ed9f69511","date":"2011-07-09T19:47:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Toralf Niebuhr: This is just a tiny patch fixing some small (probably copy & paste) errors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134843 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0389c53f4415eedf5da1f3b3ee35494fae4d7963","date":"2011-07-12T00:55:04.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Make sure that __time_put constructors properly on non-Apple platforms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@134947 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c97da3a5903449a3a679dd83cca3bd4c136e8d4f","date":"2011-07-13T06:40:50.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Implement the __nolocale functions properly so that they will work on\nall platforms. Unfortunately a lot of this remains conditionally\ncompiled so as not to break Apple's ABI.\n\nThe new _LIBCPP_LOCALE__L_EXTENSIONS macro can be defined on other\nplatforms that support _l suffixes for all functions in order to use\nthem.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135035 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d75632ad097796d6c25ec1e19a4e670a4796231","date":"2011-07-13T15:48:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reverted to 134947.  Once I got into it, I discovered there were too many problems to fix in 135035.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135044 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22ba71b8efecd6be5cad52b4201b6887205260cc","date":"2011-07-13T16:00:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10346\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135045 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"912012e9498ae6e315385c7284a96bcced67cb5f","date":"2011-07-14T01:34:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10353\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135125 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3907e6cc0b6ed9e9d4a45a9989ce961df307c8a","date":"2011-07-15T05:40:33.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Reapply 135035 with proper conditional inclusion, hopefully solving\nissues with it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135246 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a78264f87282a075009e5221cd7654e93be08645","date":"2011-07-15T05:44:47.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Fix wchar tests by not assuming that tm is complete and by using the\nproper va_list time on non-darwin platforms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a2078137f1245ffb26b38c6df8cd4f0a88a563c","date":"2011-07-15T14:25:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"_LIBCXX_STABLE_APPLE_ABI -> _LIBCPP_STABLE_APPLE_ABI\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bcbbd4d14f0ebb47ff39950470f1b177d2d74207","date":"2011-07-15T14:46:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Revert locale for apple back to original design, getting rid of now useless helper *_l functions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135272 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"464aa5cad3a94a3bc599e8999a270694873f48a0","date":"2011-07-18T15:51:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10390\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d81f3d1f399515f4107ef20acd1fe9335662f0a","date":"2011-07-18T17:07:53.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Give A an explicitly non-throwing destructor so that B's destructor is\nitself non-throwing.  Since nested_exception's destructor is\nnon-throwing, if B's destructor is not, this causes an error in C++03\nmode due to the overriding function having a more lax specification.\nThis did not occur in C++0x mode as A's destructor was implicitly\nnon-throwing.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135400 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"737a351850d18b63a8f89c195cb9ebfdfaa44f6d","date":"2011-07-18T18:37:21.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Given that __underlying_type is now available in clang, implement\nstd::underlying_type.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135410 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6440c6fa235c6933fc3a55a36752dc53a6098a8","date":"2011-07-18T20:46:16.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Do a litmus test of using tmpnam to generate safe temporary file names\nfor the tests that open new data files.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13aaf422e49fa4b66642966bfc6078b5d9adde12","date":"2011-07-18T23:51:21.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Make all fstream tests use tmpnam if creating files, rather than\nhard-coded names.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135444 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"541cb301a123086ac7889215aa032f7f81ea96b9","date":"2011-07-18T23:51:25.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Adjust two tests to account for a nasty change in copying behavior\nbetween C++03 and C++0x and its effect on exceptions, and another two to\nnot test move construction when rvalue references are not available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf6666f7a069886443fad5631e6570b6a96cd0e9","date":"2011-07-19T01:07:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correct test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135460 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3296ae5bc33d2516d8b7f3945c4d182f293ee8b","date":"2011-07-22T17:08:57.000Z","author":{"name":"Dave Zarzycki","email":"zarzycki@apple.com"},"message":"Test commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135774 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"099084d52f1919646be63e92c8ec2584f1ecf5bc","date":"2011-07-23T16:14:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10455\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135854 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2644a7b3da0f4b8c8aef38207f9cbc833923cd03","date":"2011-07-24T15:07:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10461\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135873 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa06d75e8df580bcb57418e67dbceb4168586d7f","date":"2011-07-24T21:45:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Optimization of string::operator< by M.E. O'Neill.  Discussion in http://llvm.org/bugs/show_bug.cgi?id=10461\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135893 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f598034d29abf6609ca1f697f98a02b3a786121","date":"2011-07-24T23:59:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"http://llvm.org/bugs/show_bug.cgi?id=10469\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@135897 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d36369d9107da9a33e49cbdce76b5ba1c0736ace","date":"2011-07-27T18:34:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix PR10510: http://llvm.org/bugs/show_bug.cgi?id=10510\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136232 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c59d3811270a94e170156eb757a321ce234a548","date":"2011-07-27T19:25:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix PR10509: http://llvm.org/bugs/show_bug.cgi?id=10509\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db8666322374d523784200a9c2288e5d82b8e865","date":"2011-07-27T23:19:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Optimizing valarray::operator=(some-valarray-expression)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136291 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"23369ee812cd529293ceb689358a13c579c03c5e","date":"2011-07-29T21:35:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Configure to get along with 2.9 clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136526 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e36a196049f022adcaced6641b5685b225b1c9ce","date":"2011-07-29T23:31:53.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Add two missing members from the extension hash containers. The first is\nthe type name 'data_type', which is specified by the SGI spec as being\nthe correct type name for the mapped type. The second is an overload of\ninsert found in standard containers, taking an iterator as a 'hint'\n(which we ignore in the standard containers as well). libstdc++'s\nimplementation includes these overloads, and they are needed to make\ninsert_iterator work (which I suspect is the real motivation for\nincluding them in the standard containers).\n\nThe motivation for including these overloads of insert and leaving the\nmapped_type typedef is to make it easier for clients to migrate to the\nstandard containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"affd9e5d4396fe0da3612f84cc6465665cb68566","date":"2011-07-29T23:31:56.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Add a new hash class in __gnu_ext for the extension containers. There\nare two motivations for this.\n\nFirst, this allows users who are specializing __gnu_ext::hash to\ncontinue doing so without changing their code.\n\nSecond, SGI specifies hash overloads for char* and const char* that\nperform a hash of the string, not of the pointer.\n\nIn order to support this, the hashing code for string is factored out.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"110b8bf57e49cec5a714571ab950991c30fc9339","date":"2011-07-29T23:31:58.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Explicitly invoke the size_type specialization of max and min. This\navoids bugs where, when the allocator's size_type was smaller than int,\nthe multiplication or division would cause integral promotions and, with\ntwo different integer types as arguments, deduction of the template\narguments would fail.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136540 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d50c1c742947b45e10f0dbf85cfac79d49c91e54","date":"2011-07-29T23:42:36.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Include an \"implementation\" if SGI's slist. This was quickly hacked\ntogether to get it working with code, and is neither optimal\n(erase(Iterator, Iterator) calculates the previous iterator twice,\nrather than calculating the previous iterator of the first one, then\nadvancing it until the second is found) nor complete (splice() was not\nimplemented). Most of the implementation is borrowed from forward_list\nvia using-declarations.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136542 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70bbcae9b58b021b9c353b580886561136cc1935","date":"2011-07-30T00:06:52.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Oops. That last commit was from an earlier revision of the file and was\nmore than just a bit broken. This one should compile and run without\ninfinite loops.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b59b929cc95fa64c04de06a376654b49af53f2f8","date":"2011-07-30T00:18:12.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Destruct elements of hash tables when removing individual entries from\nthe hash_table. I think this is the correct solution to PR10507, but I'm\nnot sure since this is a little bit cargo-culted. Howard, please review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136546 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f0396e443f24c859a78bfccbb3dbb78aece036c","date":"2011-07-30T00:47:53.000Z","author":{"name":"Sean Hunt","email":"scshunt@csclub.uwaterloo.ca"},"message":"Add the missing default argument for the allocator and use a cleaner\nimplementation of previous().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136547 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a73da5d2caa066cabb7adb3237001b243087927d","date":"2011-07-30T21:10:16.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Revert r136546, which was submitted without review.\n\nOriginal change:\nDestruct elements of hash tables when removing individual entries from\nthe hash_table. I think this is the correct solution to PR10507, but I'm\nnot sure since this is a little bit cargo-culted. Howard, please review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d7530935d1f0588bf537eb268af0571f80592e6","date":"2011-07-30T21:10:18.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Revert r136547, r136545, and r136542 by removing slist.\n\nThis was checked in without review. It is not clear its reasonable to\ninclude with libc++ at all, and needs discussion at a highlevel before\nmoving forward.\n\nIt's also completely lacking tests, and included several bugs in the\nimplementation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136577 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"199d0aec1b0d89395e26962b237f27ca2782b315","date":"2011-07-31T17:04:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed PR10507 (http://llvm.org/bugs/show_bug.cgi?id=10507)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136595 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8775816ba3fa3829850d1c896fb4b0f740b3865b","date":"2011-07-31T17:10:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change how _LIBCPP_HAS_NO_ADVANCED_SFINAE gets set.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136596 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8caf423916fd0d4c3b780a39c28e4b11273a2894","date":"2011-07-31T17:16:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correct misspelling:_LIBCPP_APPLE_STABLE_ABI -> _LIBCPP_STABLE_APPLE_ABI\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@136597 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3e3291f3ab4af96b0403cf6e255c833143ae3f1","date":"2011-08-12T21:56:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed PR10574: http://llvm.org/bugs/show_bug.cgi?id=10574\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@137522 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43edf2d1e18e19767d175518d0897e36d80e74c3","date":"2011-08-15T17:22:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix needle-in-haystack bug found by Walter Brown\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@137617 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3fdbbd2a6fabd404639fb3cece67a71be34677b2","date":"2011-08-17T20:36:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Don't move assign string::allocator_type when propagate_on_container_move_assignment is false.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@137862 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b56659c60c3c34a9a02158fb35256c2e8702aed","date":"2011-08-18T15:53:00.000Z","author":{"name":"Dave Zarzycki","email":"zarzycki@apple.com"},"message":"Merge the Apple branch into trunk\n\nWe will eventually rebranch for the next Apple release and when we do, we don't want to drop changes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@137940 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f255944ac5b4064a0606a723cc094e9d674a720","date":"2011-08-28T15:21:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"__split_buffer should only require default constructible.  Bug found and fixed by Jared Hoberock\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@138726 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92a836c03d9e2aa0f6eb24b41221c9f24d570178","date":"2011-09-01T21:02:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reimplemented much of <istream> such that single character extractions do not check to see if this is the last character in the stream and thus never set eofbit.  This fixes http://llvm.org/bugs/show_bug.cgi?id=10817 .  This fix requires a recompiled libc++.dylib to be fully implemented.  The recompiled libc++.dylib is ABI compatible with that shipped on Lion.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@138961 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b171c557beed2ef430bf917d732e10d0e319a33","date":"2011-09-01T23:13:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Up version number by 1.  This is a 'minor version' update.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@138978 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9cbee430da220344bd4d78067299e48270cf716f","date":"2011-09-02T20:42:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix const correctness bug in __move_assign.  Found and fixed by Ion Gaztañaga.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@139032 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b3fae3cc7f7b249884b16f95b1599d7e5bce775","date":"2011-09-12T14:15:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Address PR10909: http://llvm.org/bugs/show_bug.cgi?id=10909\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@139493 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a563db09ab5bec75c9f132958cc269032eb2862","date":"2011-09-14T18:33:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Initial checkin for debug mode (version 2)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@139711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"abe2628b43f13fd81fb90b43dc14472f88b927cc","date":"2011-09-16T17:29:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Create multilevel debug mode\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@139913 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0442b12591ef70f9fb3f120c782b6c8f2af19cb4","date":"2011-09-16T18:41:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The vector test suite now passes for no-debug, debug-lite and debug-regular\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@139930 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7608b4aac2bcdaa948387355a2248884758482ea","date":"2011-09-16T19:52:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Doug Gregor pointed out some problems with debug mode enabled in one TU and not another.  This patch helps detect those situations and offers improved error messages to help get debug mode enabled in more TU's when it is absolutely necessary to do so.  Thanks Doug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@139933 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68ebc448f0fd9a9e6914f776d9667e70f180ce9b","date":"2011-09-18T19:23:04.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Enable __locale to work on FreeBSD.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140005 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be969d7c7d24fde9734a168bad8682a50adf31f8","date":"2011-09-19T13:19:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Removed unneeded boost implementation of is_base_of\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140014 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6125bdeae72af590af7cfa2ca6cfb2602a6c6cf","date":"2011-09-19T16:34:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Chris Jefferson noted that vector iterator ownership can be transferred from source to target under move construction and move assignment.  This commit makes that happen for debug mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140023 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2f2a15066552758a508e8a7325e0ccad4a5389b","date":"2011-09-21T08:19:20.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Localisation test fixes to make the tests pass on FreeBSD, which does not provide shortened forms of the various locales (e.g. en_US, rather than en_US.UTF-8 / en_US.ISO{whatever}).\n\nReviewed by Howard Hinnant.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140242 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c512df1950baf9466843b2943855356c031fec08","date":"2011-09-21T08:39:44.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fixes for FreeBSD, including some fairly obvious copy-and-paste errors.\n\nlibc++ now mostly works on FreeBSD with libcxxrt and this patch applied to the base system:\n\nhttp://lists.freebsd.org/pipermail/freebsd-hackers/attachments/20110920/e666632c/xlocale-0001.obj\n\nSummary of tests on FreeBSD:\n\n\n****************************************************\nResults for /root/libcxx/test:\nusing FreeBSD clang version 3.0 (trunk 135360) 20110717\nTarget: x86_64-unknown-freebsd9.0\nThread model: posix\nwith -std=c++0x -stdlib=libc++ -I/root/libcxx/include -L/root/libcxx/build/lib\n----------------------------------------------------\nsections without tests   : 1\nsections with failures   : 48\nsections without failures: 1015\n                       +   ----\ntotal number of sections : 1064\n----------------------------------------------------\nnumber of tests failed   : 145\nnumber of tests passed   : 4179\n                       +   ----\ntotal number of tests    : 4324\n****************************************************\n\n(Many due to this clang version not supporting C++ atomics)\n\nMore fixes to follow...\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140245 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b8ac3acda1031a2302136b277e7a68d6ce421e3","date":"2011-09-21T12:09:17.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"More locale cleanups.  Fully specify locales in iostream tests.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb2c855c44fc030741f254827f7a0075779ccd85","date":"2011-09-21T12:23:11.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Don't check STREAMS error numbers on systems that don't implement the obsolete (as described in POSIX2008) XSI STREAMS extension.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140248 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a824f536004806c079b3b1dacdb5e1ef5bd533f9","date":"2011-09-21T14:48:49.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fully-qualify some more locales in the tests...\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140251 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db2e99f8528c17cdd1d6d53ac68a0c23a2b88049","date":"2011-09-21T14:59:10.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"More fixes to the tests.  Add UTF-8 encoding to all locales that don't specify one.  Undefine some stdio.h macros that break the tests.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140252 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"336f41ae0c781ac8b29178ac5d2b5533191c0523","date":"2011-09-21T15:12:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correct change to exception.cpp from r140245\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140253 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"709c3d27f5bcbd37d9c522e965e95f29722077a9","date":"2011-09-21T16:42:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix failure found by David Chisnall\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140255 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86698890db516536b963cf978369c9aa6a2c836f","date":"2011-09-21T17:35:42.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"More +.UTF-8 fixes.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140262 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fb1a9d1e8ce615b71a7a58f6092b5597223aeef","date":"2011-09-21T17:37:18.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Remove undefines in cstdio test.  Fix these properly rather than bodging the tests.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e02b90405a62bfbdabe9dbf4e6f8936c862d6ea","date":"2011-09-21T17:38:03.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fix locales used in re tests.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59832523acb4b3d9764bcdeeef1ea56ad690eb0e","date":"2011-09-21T18:33:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix test bugs found by David Chisnall\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92a07003b2ce449b22709fbd9b4f1e49b3a2fd3e","date":"2011-09-22T19:10:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Partial Windows port by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140328 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cd05eeb35636c33a5cd951a7b5501f51611b469","date":"2011-09-23T16:11:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Work on Windows port by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c3ec6d480ae2443d7fb25089a137b4a8d9d43cc","date":"2011-09-27T23:55:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Another installment on debug mode.  This addresses list.  However this should be considered a temporary state.  The API of the debug database and how vector and list use it, is unsatisfactory at the moment.  It is both inefficient and overly verbose.  I wanted to get this functionality checked in though.  In the next day or so I'll refactor what is there in an attempt to streamline things.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140660 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cbb3a16e258e2cebcb827af310ffe43ecaee508","date":"2011-09-28T15:44:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Ruben's Windows test results.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140700 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2ea1ca9bdd8d7f7cd7356e409b19ba409d74843f","date":"2011-09-28T21:05:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Attempt to enable locale simplification.  On which platforms can we now #define _LIBCPP_STABLE_APPLE_ABI?\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efbe4067f225856814465913bf51e87ec8f17bdb","date":"2011-09-28T21:39:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Work on Windows port by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"866569b8c31f680ce95fd403ac5e21bd4552a1b8","date":"2011-09-28T23:39:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Attempted locale refactoring.  _LIBCPP_LOCALE__L_EXTENSIONS now should be defined if one has all of the xxx_l() functions.  I've defined this for apple, freebsd and win32.  _LIBCPP_HAS_DEFAULTRUNELOCALE should be defined if there is a _DefaultRuneLocale.  I've defined this for apple and freebsd.  The block of code we're trying to migrate away from is now under #ifdef __linux__.  I've tested only on OS X.  I hope I haven't broken things too badly elsewhere.  Please let me know.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c466fc631a2a474d84ad6c29770a2cbdf40bf1b","date":"2011-09-29T13:33:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows patch work by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140781 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14fa9f9d8ff5a4541404f3e23b91188e74c56f31","date":"2011-09-29T20:33:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows port work by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2481cba8b7eb98b939a0b36d85f552917a63816d","date":"2011-09-30T16:58:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Provide link to developer's policy\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140857 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f8800b12c5bbd2a1e933fb4cfbc903bd4e7cd917","date":"2011-10-01T00:26:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix <rdar://problem/10217868>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140907 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8452d21f41d630b6ac173f6ce1139f1eb96a4dcb","date":"2011-10-01T15:34:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated testit to run on Windows and fresh Windows results by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@140950 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0d0cbad9ed434267a7af9531bdeeae52eb6d706","date":"2011-10-03T15:23:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows porting work by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141003 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15e48f92394ac3ff8bdf5d069f83816eb17f0600","date":"2011-10-04T01:25:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix <rdar://problem/10226704>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141054 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"96774589670831ab2c5a27aa5c64daf96bf2b581","date":"2011-10-04T23:11:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix <rdar://problem/10136825>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141132 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e0a0e51248348bb10524d8af69b3d8475c9cc299","date":"2011-10-07T19:52:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change compatibility_version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fdcbd1db257a235ae21d7b3f9806ec20e822846b","date":"2011-10-07T23:55:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"reverting change to compatibility_version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6fe8cafc3539c903f55cc96da4b7d12c4b9a1d5","date":"2011-10-08T14:36:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix <rdar://problem/10255403> match_results::begin() is off by one\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141494 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b97de444717590b20b87b2fbf5f92f51d74e729e","date":"2011-10-09T15:20:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix <rdar://problem/10256836> getline of an empty string mistakenly causes failure\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141506 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"907732644cfd2a5ddb1a02ebe5582412c641d09b","date":"2011-10-09T15:25:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update instructions for building on Mac OS 10.6\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141507 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc90e2a47de98085d952d889ab673d1227a29a98","date":"2011-10-10T17:36:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove  -Wglobal-constructors from flags.  This was an accidental addition.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141551 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11624459ef27e06ef2d8e71ec2d35bdd334dbbd9","date":"2011-10-11T16:00:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Starting on musl port by Arvid Picciani\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141672 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2baccd81f1d87265718035d32c0f4feffd451363","date":"2011-10-11T21:28:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11113\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@141714 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08e17472e4d5434b668dd4c63e3fa5f4b45337b9","date":"2011-10-17T20:05:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows support by Ruben Van Boxem.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@142235 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8db4acad3b67808114c495fc21d4db6e7e277087","date":"2011-10-17T20:08:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"de-tabbify\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@142237 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f46fc939cbcb2e2287575fd19b4ee01430591229","date":"2011-10-20T12:49:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows port work by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@142578 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"78b6828f1420a266e02687685bc2ab993a54eadd","date":"2011-10-22T20:59:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"More windows port work by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@142732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8faa95ff8cab3a1a959fd61591741a8b44d2b09f","date":"2011-10-27T16:12:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed bug in __independent_bits_engine found by Nick (from stackoverflow)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@143104 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f8884e6c18994360a5e580e5de3aad7a289205d","date":"2011-10-27T16:24:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows port work by Ruben Van Boxem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@143105 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cd051bc3416136175c16fadba27a92c89b388e1","date":"2011-11-01T21:06:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add include file install path\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@143497 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ce6884cc76bf2d1c5712909d6504c6cbb4b8562d","date":"2011-11-01T23:13:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix ratio arithmetic with zero\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@143519 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c13b1472806ebdf913c7540f79096c3815378771","date":"2011-11-04T15:59:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove support folder from Apple install\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@143702 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91a8272cbd2432cf01648f1075372cba67e6078c","date":"2011-11-13T17:15:33.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"On FreeBSD, define a macro that causes the unimplemented C99 math.h functions to be declared.  This prevents <cmath> users from being broken, unless they actually use the C++ wrappers that call the missing functions.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@144501 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"704f09b21245cee8a775fdb9962ed40de0f94b04","date":"2011-11-17T17:14:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Clarify building instructions for 10.7\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@144910 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0dd0b4d758f6d934e704107b84074cce14d26dc5","date":"2011-11-27T05:39:58.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Refactor libcxx makefile.  No functional changes intended.\n\nBesides cleaning up the repetition in the installhdrs target, the point of this\nchange is to provide a separate do-installhdrs target that can be used directly\nfrom clang's runtime/libcxx makefile to install a copy of the headers along\nwith clang.  <rdar://problem/10397739>\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34869adacb16a0bc597a8947c8a1a469996f7093","date":"2011-11-28T19:49:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove redundant iterator assignment detected by Marshall Clow\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66c6f9733b5fde00b3e07602cc8b5eef59c8f514","date":"2011-11-29T16:45:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add protection from min/max macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9996844df0f22a68a1af6d30c611be1f1ebf1486","date":"2011-11-29T18:15:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Further macro protection by replacing _[A-Z] with _[A-Z]p\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145410 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec3773c2dadbeadfc5def927116c2ee9d9c53066","date":"2011-12-01T20:21:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Quash a whole bunch of warnings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145624 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"438377c051ccfb662b88e38e86f085909ed2c2d7","date":"2011-12-02T17:22:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Jean-Daniel: __builtin_popcountll support for Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145684 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6d875f7f589ab9efcf01307a5fd6e375c14fc26","date":"2011-12-02T19:36:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11428.  Fix provided by Alberto Ganesh Barbati\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e814a90f74a7a8248f04c96e781a0e091fe18588","date":"2011-12-02T20:41:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11459.  Patch supplied by Alberto Ganesh Barbati.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f836d531b4146465342939fe32ae47d157ee07b2","date":"2011-12-02T21:23:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"unord test fixes by Edward Meewis\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62453ea71d329b3363d4c74129a85815e391aa62","date":"2011-12-02T22:52:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixes to hash for long long, unsigned long long, float, double and long double.  Credit Dave Zarzycki\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2891675aadafc594f59039156b05cbc71ec393b6","date":"2011-12-02T23:45:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I had picked up the wrong version of DaveZ's hash patches.  Corrected here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf2654bae716cbcc70a45adfcb46c211121565d7","date":"2011-12-03T21:11:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Version #next on the hash functions for scalars.  This builds on Dave's work, extends it to T*, and changes the way double and long double are handled (no longer convert to float on 32 bit).  I also picked up a minor bug with uninitialized bits on the upper end of size_t when sizeof(size_t) > sizeof(T), e.g. in hash<float>.  Most of the functionality has been put in one place:  __scalar_hash in <memory>.  Unfortunately I could not reuse __scalar_hash for hash<long double> on x86 because of the padding bits which need to be zeroed.  I didn't want to add this zeroing step to the more general __scalar_hash when it isn't needed (in the absence of padding bits).  I'm not ignoring the hash<string> issue (possibly changing that to a better hash).  I just haven't gotten there yet.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40c13d31c580d904d0c400f6bab1addf1535cf69","date":"2011-12-05T00:08:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Starting using murmur2 when combining multiple size_t's into a single hash, and also for basic_string.  Also made hash<thread::id> ever so slighly more portable.  I had to tweak one test which is questionable (definitely not portable) anyway.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@145795 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c00f75dc7520e88225b0e71b7c48f3d2d9a13334","date":"2011-12-10T20:28:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Installation of CityHash by Craig Silverstein\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d4cf215e0852a748a6881ba36f2b81eda7d40e85","date":"2011-12-11T20:31:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11461.  Credit Alberto Ganesh Barbati.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f8880d0b85e23dd5f9596b4374261473f76d8a66","date":"2011-12-12T17:26:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"As an extension, support incomplete types in the unordered containers to match what we already do in the associative containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146376 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e50a9cf73450c7a506b91a6279474b5979e5876","date":"2011-12-15T15:01:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove quotes from locale name identifier.  Credit Edward Meewis.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146655 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a63119a76fde68ef27f887b404c1b907f40c4fb","date":"2011-12-16T15:37:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Allow unique_ptr<T const []> to be constructed with a T* (in addition to a const T*)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e84350ebfc8199a9878c7727dedb9f9d19253fe","date":"2011-12-18T21:19:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Allow unique_ptr<T const []> to be constructed and assigned from a unique_ptr<T[]>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146853 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83b2c84a3c031beec3f039c587ad20bf3eff4e67","date":"2011-12-19T11:44:20.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Some fixes to <atomic> operations to explicitly use atomic types and operations.\n\nThe integral types now work with clang trunk (if you remove the guard), although we're still missing an intrinsic for initialising atomics (needed for C1x too).\n\nHoward: Please review.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146865 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cc99fa3383819459c999075d34b55b841a8922a","date":"2011-12-19T17:58:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11616\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@146881 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5586c020c9b9819062306522b76b09561d91d50e","date":"2011-12-27T22:20:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix memory leak in converting weak_ptr to shared_ptr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@147298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8292d742700b1ed5b64aad40beef86ef39a6b202","date":"2011-12-29T17:45:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The exception recovery mechanism for the uninitialized_* algorithms did not work for iterators into discontiguous memory.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@147343 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e4d24cec2489390d00dbbd203f5de24f4b1ff4d9","date":"2012-01-01T08:16:56.000Z","author":{"name":"NAKAMURA Takumi","email":"geek4civic@gmail.com"},"message":"Happy new year 2012!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@147395 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"571994088f4c0a4162be896037c642919b6cc82c","date":"2012-01-02T17:56:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"1.  Fix make_shared<const T>.  2.  Allow allocator<const T> as an extension.  3.  Refactor work which fixed unique_ptr<const T[]>.  4.  Remove no-longer-needed private declarations from unique_ptr.  5.  Add constraints to some shared_ptr and weak_ptr constructors and assignment operators so that is_constructible/is_assignable give the correct answers for shared_ptr and weak_ptr.  6.  Make defensive preparations in the shared_ptr free functions for the introduction of shared_ptr<T[]> in the future.  7.  As an optimization, add move constructor and move assignment to weak_ptr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@147437 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae8b16e047e8ff1255fb182dc4abc82522fe605e","date":"2012-01-10T15:15:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11734\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@147853 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1a7b04c5867b87674c0377e14dd7a86bfc694ac","date":"2012-01-12T23:37:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix http://llvm.org/bugs/show_bug.cgi?id=11752\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148069 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcf7bd1ffeec030fdcc9eab7a8b992fe1d5e84f9","date":"2012-01-17T16:09:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Stop installing headers, this is now done by clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9b932fdef9f48dde5cd0ca0dfaf2b11e7559f5c","date":"2012-01-17T17:01:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Put do-installhdrs target back into Makefile.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca1f44d19f0fc546334f4b432239a8d347e0fd52","date":"2012-01-18T00:30:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Create target installhdrs as a synonym for do-installhdrs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148365 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"798e8803644511354404529fdf1a0f0a41b509aa","date":"2012-01-18T16:07:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove installhdrs target from Makefile\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148396 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e4971fafe0b1f9f7f00d8e993822c595375ce5f","date":"2012-01-18T17:44:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Added installheaders target.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148399 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a18778751c13fa832302e842356a1057e5ac3128","date":"2012-01-19T23:15:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Enable full functionality of shared_ptr<const void> by adding allocator<const void>.  Credit to John Hurley for discovering this bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148508 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1dd5ccf06c969025c7af440e1204717be2114cda","date":"2012-01-21T06:16:39.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Fix .PHONY target to match new installheaders target.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@148629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1bc0c4975e70c49af0755aae1b7f7b373a7061b","date":"2012-02-02T20:31:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Explicitly convert int to future_errc.  Fixes http://llvm.org/bugs/show_bug.cgi?id=11428\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@149630 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dea7f39af1ae5a71adfc0434b111962345193ef2","date":"2012-02-02T20:48:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Prepare for running on top of new libc++abi.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@149634 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c8432fb5ba0a27d9d7fb699e9eff7b4d5b65b3e","date":"2012-02-02T22:01:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Added some more symbols to the v2 rexport list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@149636 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67872dde147ec11037bf17b162f34bd3b58506a1","date":"2012-02-03T18:31:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make attributes on definition consistent with those on declaration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@149701 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"982331b66e7d7beadb8da7764acd5ffe53b20d66","date":"2012-02-08T19:15:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix up narrowing conversions in switch statement.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150082 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f3f35fe648eb4f5af604952dacadbb97eb4259e","date":"2012-02-14T16:03:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Provide a move(const T&) overload for C++03 mode to enable moving from rvalues.  This is to support proxy references.  Fixes r10858112.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150488 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0bfd9bdd672bbce086bd1467645b54d4fc7f8ad","date":"2012-02-15T00:41:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement a few optimizations for vector push_back and insert.  Fixes r10828365.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150542 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e5285fd6b6379598c8e7b4ce8c0a315ddef225ca","date":"2012-02-15T15:08:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove reference from common_type definition.  It looks like a recent clang decltype implementation got fixed/improved and exposed this.  Fixes http://llvm.org/bugs/show_bug.cgi?id=12007.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7a2ad6a999094c981b36533cf00b742e71c7916","date":"2012-02-15T18:08:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Another stab at fixing http://llvm.org/bugs/show_bug.cgi?id=12007.  I earlier missed that there are two common_type definitions and corrected only one of them.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b04ad4162df9080ad93163c0aeb0b7227c465eb3","date":"2012-02-15T19:19:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Do not parse sign if a sign is not the next legal character when parsing floating point from an input stream.  Fixes http://llvm.org/bugs/show_bug.cgi?id=11871\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150609 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"284844495422a295597af5b93cbd798e920f3c44","date":"2012-02-15T20:13:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"tuple was accidentally lacking a valid copy assignment operator.  It went undetected because I had failed to test assigning from a const lvalue.  This fixes http://llvm.org/bugs/show_bug.cgi?id=11921\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150613 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e9f55f2d229a2b95c4e727b3b269d71edf3f10d","date":"2012-02-15T20:47:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Use __is_polymorphic if available.  This fixes http://llvm.org/bugs/show_bug.cgi?id=11983 .  Patch contributed by Jonathan Sauer.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1642e1c00d30993616c7293959b33fe2007ba2e","date":"2012-02-17T19:24:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Move typeinfos for exceptions in <stdexcept> to the abi\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150835 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01198b313ce92ad2ac64eeda548fd8d049ebe039","date":"2012-02-18T20:12:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Exercise rvalue arguements to make_shared for C++11 mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150887 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3508b3836b386b3e1aeff017aec3685b2deff5f7","date":"2012-02-18T22:01:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Give the emulated nullptr_t a default constructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150893 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6df1412ca6094eb5fd336a22d0f8cb0a26413c9f","date":"2012-02-19T14:51:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Relax pointer output test to accept glibc's output.  Patch supplied by Jeffrey Yasskin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150927 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3074a05cdcd53569d7c52d224c1adf0681decc0d","date":"2012-02-19T14:55:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Initialize all the fields of struct tm before passing it to strftime. One of the uninitialized fields, probably the pointer field tm_zone, was causing a segfault on linux.  Patch contributed by Jeffrey Yasskin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150929 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e0c3b1e55cfee487f01d1f60de726bbb373eb132","date":"2012-02-19T18:22:03.000Z","author":{"name":"Jeffrey Yasskin","email":"jyasskin@google.com"},"message":"Add myself to the CREDITS file.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150935 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"335b1518e475a697727b76c9050b48ba6d120a3b","date":"2012-02-20T16:51:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Silence -Wmissing-field-initializers a little higher in the source.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150964 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d41b60b2b42114bc7664b016f6be619c46095e59","date":"2012-02-20T16:56:13.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Add missing newlines at EOF.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@150965 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3fadda314ad3b1fd0ba16db83476a9d5a7b58d78","date":"2012-02-21T21:02:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Modernize relational operators for shared_ptr and unique_ptr.  This includes adding support for nullptr, and using less<T*>.  Fixes http://llvm.org/bugs/show_bug.cgi?id=12056.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151084 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7786188d151aeb60404fd4dd2d1268725e3b9f25","date":"2012-02-21T21:46:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Modernize conversion to bool to the explicit bool conversion operator (library wide).  This fixes http://llvm.org/bugs/show_bug.cgi?id=12058.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151088 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9344c218b0588e146181306a9743b6a4fd79717","date":"2012-02-22T00:20:30.000Z","author":{"name":"Dave Zarzycki","email":"zarzycki@apple.com"},"message":"Use Xcode relative compilers when possible\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4300839b5fbd7064dc65b743b83106c463e85467","date":"2012-02-24T23:32:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Hook up to the new clang __is_trivially_constructible and __is_trivially_assignable traits.  Fixes r10925427 and http://llvm.org/bugs/show_bug.cgi?id=12038.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"896baa2547b5e520c72cda5768d3af2d48f50285","date":"2012-02-25T20:04:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Silence some warnings in a test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8417c46f8da9484d8f4904c529358852f2234615","date":"2012-02-25T20:25:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"ReExport some mor symbols from libc++abi.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151453 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d84832741f9f2a136b95556df7e1b80b21ac3d0","date":"2012-02-25T21:36:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"At least temporarily move operator new/delete from the abi back to here.  I'm having trouble reexporting it as a weak symbol.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a231c37df77e4d78a7e1bf9fad1e4e1350ea0852","date":"2012-02-25T21:43:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"update test for explicit bool operator.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0438ea241e364452669658c1118713edb4839c00","date":"2012-02-26T15:30:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"vector::emplace_back was mistakenly requiring move assignable.  Fixed that and did a little drive-by optimization at the same time.  This fixes http://llvm.org/bugs/show_bug.cgi?id=12085.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151492 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a13b2dce9db1ce431303eced99299e75b645d08","date":"2012-02-28T19:47:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reduce the number of move constructions when constructing a std::function.  This fixes http://llvm.org/bugs/show_bug.cgi?id=12105.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151652 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e8b3f96c015e7e4a190eec7444b90d47be95540","date":"2012-02-29T12:59:17.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Some libcxxrt-compatibility cleanups (avoid defining things twice).\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fa14e97ca564d71826ac196560c55254c6b83b7","date":"2012-02-29T13:00:07.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Don't define __locale_raii if we are not going to be using it.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151718 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2b2cc6440fa517d3bc29f78aebbb9106040c411","date":"2012-02-29T13:00:44.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Make the failure reporting in testit a bit more useful.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151719 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"997e4541395abd2db274c3bda04beaf5085e746f","date":"2012-02-29T13:05:08.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Solaris port.  Currently sees around 200 test failures, mostly related to\nSolaris not providing some of the locales that the test suite uses.\n\nNote: This depends on an xlocale (partial) implementation for Solaris and a\ncouple of fixed standard headers.  These will be committed to a branch later\ntoday.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151720 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea2741973acd73619da693548388a05527b92d57","date":"2012-02-29T13:17:28.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Add support files required for building on Solaris.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d0ed21e94ddbc12cbec3cea0aab89d470adfbd57","date":"2012-02-29T15:37:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I'm reverting one of the changes made to exception.cpp in r151717.  I'm unsure what the change was trying to do, but it didn't do the right thing for __APPLE__.  So instead of trying to guess what was intended, I'm just putting it back the way it was.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcbaf48f21daac4d8ca0d75361116b1b7478bcfc","date":"2012-02-29T16:08:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add a warning to ctype<char>::classic_table() if not implemented.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26cba271cb442e0cf5efbd3254a1a0bbf6ea6c27","date":"2012-02-29T16:22:33.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Remove a spurious #ifdef / #endif pair with nothing between them.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6e7c305d4868de8f42af2eface9f343dfd98ac9","date":"2012-02-29T16:41:21.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fix MSVC / Sun #ifdef ordering.  Remove another #if-nothing-#endif.\n\nSorry for the churn.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b56a4ada3300ab23fd3c7559c0c40129618ca5f0","date":"2012-03-02T10:56:04.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Define _WCHAR_T in solaris/wchar.h.  This fixes a bug where Solaris 10 headers\ntry to define C++ keywords as typedefs (fixed in Solaris 11).\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@151890 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05b57d5cdf8acb3933b5f6f22cc81f9dee7408d2","date":"2012-03-07T20:37:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change some smart_ptr == 0 to smart_ptr == nullptr.  Fixes http://llvm.org/bugs/show_bug.cgi?id=12185.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@152240 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"558ae17391455e18d3cc63ead57ba0b8aba49a3f","date":"2012-03-10T18:31:43.000Z","author":{"name":"Jeffrey Yasskin","email":"jyasskin@google.com"},"message":"Fix moneypunct_byname algorithm to more accurately represent C locales in C++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@152501 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b407d45d834821fa3d8505d41c38efd160ee6233","date":"2012-03-14T14:02:15.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Don't refer to a function that doesn't exist in the quick_exit test.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@152716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2533a8798b0e48c1f811eeffaa81d90ab3aaed9","date":"2012-03-14T14:10:37.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Make sure [at_]quick_exit is in std::\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@152717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21a84cfb8fbbf6333baf8b59aa5c9a34aa5430ab","date":"2012-03-14T14:11:13.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Undo some overzealous #ifdefs for LIBCXXRT.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@152718 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1378397721435d2737ab494908918bfe88882789","date":"2012-03-16T15:13:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Alter the terminal streams such that they do not get added to the atexit chain, and thus never get destructed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@152926 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87c61a61fe68a584f93d001c8c55dd14ceb5a5a9","date":"2012-03-19T15:40:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Allow libc++ to be built with CMake from within the LLVM tree. The libc++ part is just some renaming as the variable  was already in use, conflicting with something else in the LLVM tree.  Contributed by Ruben Van Boxem.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9aa4e11451862c1f4e1d0b98bb7e2c065a010882","date":"2012-03-21T16:18:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"It appears that the standard accidentally removed the default constructor for error_category.  I'm putting it back in.  This fixes http://llvm.org/bugs/show_bug.cgi?id=12321.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153194 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dc1345fd4446b30f70a80c25db923ac09f14ade7","date":"2012-04-01T23:10:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I believe tuple is still under development in the standard.  Daniel Krugler is/will be making convincing arguments that a modified form of LWG 2051 (currently NAD Future) is easily acheivable and desirable.  He has demonstrated that a tuple<T...> where all of the T are implicitly convertible from U... should have a tuple constructor that is also implicit, instead of explicit.  This would support the use cases in LWG 2051 while not undermining T... with explicit conversions from U....  This check-in is an experimental implementation of Daniel's work.  I believe this work to be mature enough to warrant inclusion into libc++.  If anyone sees real-world problems that this check in causes, please let me know and I will revert it, and provide the feedback to the LWG.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153855 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27b4fd30ef673b28b3c6014cd56888abfa0e7797","date":"2012-04-02T00:40:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This is an initial commit of constexpr support as proposed by Richard Smith.  This by no means completes constexpr support.  Indeed, it hardly scratches the surface.  All it does is lay the foundation in <__config> and changes those few places in the library that are already using that foundation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153856 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2cf89a71df4737deda22d167f26849e679a4c5fa","date":"2012-04-02T15:00:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix test for default constructor of discrete_distribution.  This partially addresses http://llvm.org/bugs/show_bug.cgi?id=12436.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153873 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60cb7d267fa58998186e17cd04232b2aa6e84f9b","date":"2012-04-02T19:23:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update <limits> with constexpr support.  Patch contributed by Jonathan Sauer.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153888 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8efd3dac5deb4581795bcded571a52b93a239613","date":"2012-04-02T21:00:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update <random> with constexpr support.  Patch contributed by Jonathan Sauer.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153896 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"271a1c03c309f20bb8cdbb0b0af7ad563bdc866d","date":"2012-04-03T15:08:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated documentation contributed by Christopher Jefferson.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153955 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a5349ba6661a8e022093d79660e81f120a1f205","date":"2012-04-03T21:09:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"constexpr support for <utility>.  Patch contributed by Jonathan Sauer.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153968 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"616e92d7484f9b9312c3489ec8cea717507cd4c4","date":"2012-04-03T23:45:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Put std::piecewise_construct_t back into the dylib for ABI stability.  When clients are in C++11/constexpr mode this will be safely ignored because piecewise_construct is then declared with internal linkage.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@153981 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0341c820a0a8e524bb1089310a6f3dae126b56a3","date":"2012-04-05T13:13:24.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fix use of __atomic_is_lock_free() intrinsic.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@154093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1ee87fa41a6132b2af54fbb340e86d33b316f168","date":"2012-04-05T13:23:08.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fix test cases that were trying to make atomic things that are not trivially copyable.\n\nNow all of the test cases compile.  Some of them even run!\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@154094 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3eca759a2ce3125613fb840287c77ee1f372b10","date":"2012-04-05T13:48:16.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fix the remaining atomic tests, all of which were wrong for the case where a\ncompare-and-exchange failed (it should update the expected value to the current\nvalue, and the tests were checking that it didn't...).\n\nResults of the atomics part of the test suite on FreeBSD with clang trunk and\nthe atomic.c from compiler-rt (currently kludged into the test, not installed\nproperly):\n\n****************************************************\nResults for /root/libc++/test/atomics:\nusing clang version 3.1 (trunk 153415)\nTarget: x86_64-unknown-freebsd10.0\nThread model: posix\nwith -std=c++0x -stdlib=libc++ -pthread /tmp/atomic.o  \n----------------------------------------------------\nsections without tests   : 0\nsections with failures   : 0\nsections without failures: 14\n                       +   ----\ntotal number of sections : 14\n----------------------------------------------------\nnumber of tests failed   : 0\nnumber of tests passed   : 52\n                       +   ----\ntotal number of tests    : 52\n****************************************************\n\nYay!\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@154095 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b2292091cbfaf4d3b9f097accc64811989791e14","date":"2012-04-11T17:26:23.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Now that clang supports doing the right thing with regard to atomic\ninitialisation, do the right thing with regard to atomic initialisation.\n\nNote: clang r154507 or later required for <atomic> to work now.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@154508 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6186c7fe6a333a1653e0f96378eb1becca7e1729","date":"2012-04-11T18:55:46.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Switch libc++ from __atomic_* builtins to __c11_atomic_* builtins.\nPer discussion with Howard, we are not interested in maintaining\ncompatibility with older versions of clang.\n\nAll tests pass with ToT clang, except for two which assert due to\na pre-existing, unrelated bug.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@154521 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"300c67ab92e81f7c7c0f37cecf3223fd3aa46207","date":"2012-04-11T20:14:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply noexcept and constexpr to <atomic>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@154526 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9efdc0bd5f22b3d6815862ddb14dbd4aed5042f0","date":"2012-04-19T00:50:47.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"libc++: Add some missing #includes to atomics tests. libc++ doesn't need these\nat the moment, but they allow these tests to be used to test clang against\nlibstdc++. Add myself to the credits file, as suggested by Howard.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@155085 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c756f5b4e8b2eb4b8c808840f6bc81e504670cf8","date":"2012-04-19T01:36:12.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"libc++: only #include <cxxabi.h> if it exists. This allows libc++ to build\nout of the box on Linux systems. If you're building against libc++abi, you\nstill need to make sure it can find <cxxabi.h> so it knows not to export\nsymbols which libc++abi provides.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@155091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87073e4bfb7886a9af1fe0bfe07f33518a29d6c8","date":"2012-05-01T15:37:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Greatly scale back ambitions of emulating move semantics in C++03 mode.  It was causing more problems than it solved.  This fixes http://llvm.org/bugs/show_bug.cgi?id=12704.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@155918 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f07a529b7768f56f45503a3f54a58d01f2def52c","date":"2012-05-03T14:58:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change std::abs from a template function to three overloads for float, double and long double.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@156064 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2da6d2322a26ce9c3cda349220334a6f8908f8a","date":"2012-05-04T17:21:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Constrain __bind functor constructor such that it won't accidentally get used as a copy constructor from a non-const lvalue.  Fixes <rdar://problem/11359080>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@156182 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f867f6326b5bdf4fe027ecc76cdf4bfa52c906ad","date":"2012-05-07T16:50:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"SFINAE __bit_iterator such that it will only get instantiated with a container that has the nested type __storage_type.  This prevents accidental instantiation such as in http://llvm.org/bugs/show_bug.cgi?id=12755.  This fixes http://llvm.org/bugs/show_bug.cgi?id=12755.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@156308 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3cf4b5b5435afc9c8092a1c1a1ec3db3916b460","date":"2012-05-10T14:01:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add friends __count_bool_true and __count_bool_false to __bit_iterator.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@156543 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffa7fbef7bc99c122110efa887cfe1af235097ff","date":"2012-05-10T14:55:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix several bugs in find/count specialized for bits.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@156546 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"762657693d76b4e142c192ab778de2f496fb68fc","date":"2012-05-18T13:06:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Protect __shared_weak_count::__get_deleter declaration with _LIBCPP_NO_RTTI.  Fixes http://llvm.org/bugs/show_bug.cgi?id=12867\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157049 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9e4b855b834d9d1b89b24ecc20f5078ea11c7ff","date":"2012-05-19T04:41:25.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Move _LIBCPP_VISIBLE_INLINE from the out-of-line definitions of member\nfunctions to the original declarations, so that Clang will actually\nsee them. Part of <rdar://problem/11489333>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f20f0d3fc5ce55e465992d973c9a773bd6b2f684","date":"2012-05-19T07:01:14.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"valarray resize should not be _LIBCPP_INLINE_VISIBILITY\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0855ddeb24e6423946edb313cb6a457b83a1280c","date":"2012-05-19T07:14:17.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Revert my _LIBCPP_INLINE_VISIBILITY changes, r157097 and r157107\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b763e0945f966c11d7f6dc4f619231ae5644810","date":"2012-05-19T20:20:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Revert fix to http://llvm.org/bugs/show_bug.cgi?id=12867 for the reason now included in the code comment.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157128 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51065657aa5d421b8e41d16d66da707a7237adb0","date":"2012-05-20T13:03:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add documentation regarding -fno-rtti.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157157 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e3e5ebc72a84508e173b79b033bf59ed41178e2","date":"2012-05-25T15:55:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix memory corruption bug found and fixed by Andrew C. Morrow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157476 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"635ce1d127b617ae194b8aef03f52e810a6b6eff","date":"2012-05-25T22:04:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The rules for emplace in map, multimap, unordered_map and unordered_multimap changed a while back and I'm just now updating to these new rules.  In a nutshell, you've got to know you're emplacing to a pair and use one of pair's constructors.  I made one extension:  If you want to emplace the key and default construct the mapped_type, you can just emplace(key), as opposed to emplace(piecewise_construct, forward_as_tuple(key), forward_as_tuple()).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157503 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cbdd0896d3629a17d11be4078347e085b26099f5","date":"2012-05-31T19:31:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Protect use of alignas against older versions of clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157764 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6467aeb7c9a0cb71caaff48cf2dbb82bc6d86362","date":"2012-05-31T20:14:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix the new _ALIGNAS_TYPE per instructions supplied by Eli Friedman.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157765 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dbd9eacde092f89fbb822d91bfe1e9e3a0bcac86","date":"2012-05-31T23:12:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix dangling else clause.  Bug found and fixed by Dimitry Andric.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157779 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"caee2b093fc892335f666f1a074e8d2de40df467","date":"2012-06-01T20:02:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix a few testsuite bugs involving trailing null (or lack thereof) in strstream.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@157832 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9b6e7eeef7b8f4194661085e04b68b9f2e0bf11","date":"2012-06-07T22:26:00.000Z","author":{"name":"Douglas Gregor","email":"dgregor@apple.com"},"message":"Fix warning flags for CMake builds, from Andrew C. Morrow!\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@158172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe59276f04a2894eaba048ce5dbba7a6050ae9ab","date":"2012-06-09T20:01:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Revert pair constructors back to using is_convertible instead of is_constructible.  This should pull things into alignment with the final draft.  Fixes http://llvm.org/bugs/show_bug.cgi?id=13063#add_comment.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@158280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67c8082a187c85c0aed70a2dfff3b21a5016e66f","date":"2012-06-25T23:51:05.000Z","author":{"name":"Nuno Lopes","email":"nunoplopes@sapo.pt"},"message":"fix help with bash\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159177 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d62229b96cd5043fba4cfff903062d99ad34684","date":"2012-06-26T17:37:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed a bug regarding result_of reported by Sven Behne.  The fix is C++11 only mainly because result_of is a variadic beast and working with variadics is just such a problem in C++03 mode.  This should bring result_of up to full conformance with the C++11 spec.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159211 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"518d150040a7830d5dbd23076fe2a2ded1093536","date":"2012-06-28T16:47:34.000Z","author":{"name":"Nuno Lopes","email":"nunoplopes@sapo.pt"},"message":"mark operator new(std::nothrow) as noalias (aka __attribute__((malloc))\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"820e00755aa68e10badd62c78ab6defec5b3c64d","date":"2012-07-06T00:39:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"link to Marshall's notes.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159791 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a44515588edeea0ae4b916b8e5214c47c4b5fd1","date":"2012-07-06T17:31:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This commit establishes a new bucket_count policy in the unordered containers:  The policy now allows a power-of-2 number of buckets to be requested (and that request honored) by the client.  And if the number of buckets is set to a power of 2, then the constraint of the hash to the number of buckets uses & instead of %.  If the client does not specify a number of buckets, then the policy remains unchanged:  a prime number of buckets is selected.  The growth policy is that the number of buckets is roughly doubled when needed.  While growing, either the prime, or the power-of-2 strategy will be preserved.  There is a small run time cost for putting in this switch.  For very cheap hash functions, e.g. identity for int, the cost can be as high as 18%.  However with more typical use cases, e.g. strings, the cost is in the noise level.  I've measured cases with very cheap hash functions (int) that using a power-of-2 number of buckets can make look up about twice as fast.  However I've also noted that a power-of-2 number of buckets is more susceptible to accidental catastrophic collisions.  Though I've also noted that accidental catastrophic collisions are also possible when using a prime number of buckets (but seems far less likely).  In short, this patch adds an extra tuning knob for those clients trying to get the last bit of performance squeezed out of their hash containers.  Casual users of the hash containers will not notice the introduction of this tuning knob.  Those clients who swear by power-of-2 hash containers can now opt-in to that strategy.  Clients who prefer a prime number of buckets can continue as they have.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71499ad1763cd977ad80fa92f3782971c7b4e14c","date":"2012-07-06T18:39:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add noexcept test for offsetof macro per [support.types]/p4.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159846 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cac0c46abbcb4689b8a69c4042f3360935a2fd72","date":"2012-07-06T19:13:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply noexcept to those functions implemented in <cmath> as a conforming extension.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159849 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b12f23e307e65dd8cea8bff9c11aa884ee25153","date":"2012-07-06T19:16:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply noexcept to those functions implemented in <cstdlib> as a conforming extension.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159850 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0b5befbd3129c49a0b588073432e21da97e6a1e","date":"2012-07-06T19:35:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"New Windows libc++ test results provided by Ruben Van Boxem.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159852 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5394c1ed302f924bddddd87bffac19292efb099c","date":"2012-07-06T20:39:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Give tuple a constexpr default constructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159857 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4eebfc3394c081cc55657e053f5542039ba737a8","date":"2012-07-06T20:50:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"As a conforming extension give tuple a noexcept default constructor conditionalized on its held types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159858 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74f26f251b8275d0339a67ead8157d54f1706012","date":"2012-07-06T21:53:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply noexcept to tuple.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159865 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90d872347639ae5781b152a49c2c764120e9aede","date":"2012-07-07T17:04:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply constexpr to <bitset>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159899 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"384608e90d42cd8111b78efdea30fe06df19226a","date":"2012-07-07T20:01:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply constexpr to the mutex constructor.  As a conforming extension, apply constexpr to the condition_variable constructor.  These are important because it enables the compiler to construct these types at compile time, even though the object will be non-const.  Since they are constructed at compile time, there is no chance of a data race before they are constructed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159901 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46e9493c687004357f757d08335c3ec411a361fd","date":"2012-07-07T20:56:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Appy constexpr to <memory>.  Picked up a few missing noexcepts as well.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159902 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a58402abb97a84f34c4fb2e6e0015080c13e50ab","date":"2012-07-08T23:23:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change emplace for vector and deque to create the temporary (when necessary) before any changes to the container are made.  Nikolay Ivchenkov deserves the credit for pushing this problem and the solution for it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159918 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d586248597ab75d99a56a61d23902de152ec47f7","date":"2012-07-09T02:47:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add test for self-referencing emplace test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@159921 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"591e32d624295ff8a8a33bcfa4e82ca33980be42","date":"2012-07-11T09:35:47.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Teach libc++ to check for libc++abi and use its features if they're available.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160038 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1ca23672a0a694a6979b6e62d7893d8fe019a664","date":"2012-07-12T18:07:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed a bug in wstring_convert concerning zero-length inputs.  Thanks to Jonathan Coxhead for reporting this bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160136 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"473f838128bcf118ab50d08a65a83433ed1b015a","date":"2012-07-13T19:17:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Applied constexpr to <chrono>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160184 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c42530723824fa58b3e49e9dcd0fd794d5f85712","date":"2012-07-16T16:17:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Relax the complete-type checks that are happening under __invokable<Fp, Args...> to only check Fp, and not Args... .  This should be sufficient to give the desired high quality diagnostics under both bind and function.  And this allows a test reported by Rich E on cfe-dev to pass.  Tracked by <rdar://problem/11880602>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af3473404e13e758ac482a1fd59d7dad2bb0d612","date":"2012-07-19T15:57:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Jean-Daniel updates the libc++ index page to reflect not so recent changes in C++ standard status.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160509 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d87f6be1b828d81dc4910ca6630483ed97d41b6","date":"2012-07-19T15:59:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Jean-Daniel : clang now supports all required type_traits.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e41f475a4489a1e0d181b3ab942b374c7715cec1","date":"2012-07-20T18:56:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Further tweaks on relaxing complete type checking for function.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160562 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03d7181b0e6e38e1096bd50c1d5ed83c8f0a1205","date":"2012-07-20T19:09:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"constexpr applied to <string>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160563 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08bce1754d62bdee550b71aa0e9073f506676a6f","date":"2012-07-20T19:20:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"constexpr applied to <array>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160564 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d06a640ba7c50cae87f1cef794004c273d7601ba","date":"2012-07-20T19:36:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept applied to <iterator>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160565 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe4c9dd747bdfae4916dfd21869c306b3592b523","date":"2012-07-20T19:48:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Relax the tolerances on some timing tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160566 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c83960a9e45fb5f787404b2090e0b95bb35bf0ff","date":"2012-07-20T21:44:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept applied to <random>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160579 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"410f2def474e25c7997d0b539391f5715e287e65","date":"2012-07-20T22:18:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"constexpr applied to <complex>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd143086acac355ba992b2baa7d3899cee8a48a0","date":"2012-07-21T00:51:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept applied to <valarray>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f57bd564fd16203c8969aaa29631f3e1bbaa993f","date":"2012-07-21T01:03:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept and constexpr applied to <ios>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46623a09ee040e3782488cfd3f053cf583ca6f0a","date":"2012-07-21T01:31:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept and constexpr applied to <regex>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160594 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"499c61f999dd032510ecd4a70c90bf4410c9762b","date":"2012-07-21T16:13:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept and constexpr applied to <mutex>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160604 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8f7413908ecdc12f8461181700a2d3d6a8c522f","date":"2012-07-21T16:32:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept applied to <condition_variable>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160605 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e1d851be868839fa0ce3fecbd7edeeac82a074f","date":"2012-07-21T16:50:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept applied to <thread>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8bf01ddd300b7168a6264d99a2613f804be9d284","date":"2012-07-21T17:46:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"noexcept applied to <future>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160607 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8131a01a9c35754439cb1d7a5104f1638ea85d9b","date":"2012-07-21T19:34:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apple LWG 2067: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3318.html#2067 .  This is the only actionable change that has been made to the C++ draft since C++11.  In general it has not been decided exactly how libc++ will track changes made to C++11.  New features and design changes will probably be #ifdef'd, especially if they are not backwards compatible.  Defects and 'dumb mistakes' are more likely to just be put in.  Decisions on telling one from the other will be made on a case by case basis.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160608 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0405cc4ae0b74bab1f30830aa7bb03077b8280a6","date":"2012-07-26T02:04:22.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"libc++: switch from using _ATTRIBUTE(noreturn) (which conflicts with a\nplatform-provided macro on some systems) to _LIBCPP_NORETURN.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160773 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3d62ea57ff9ac61c5fd9860713d2d0f781f9e12","date":"2012-07-26T16:14:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"locale::id really needs to be constructed at compile time.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160785 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca8eb830dd5d767d86f6244862c8e1bab3ae6618","date":"2012-07-26T17:09:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"<algorithm> no longer needs to include <cstdlib>, but can get away with just <cstddef>.  This was brought to my attention by Salvatore Benedetto in his port to a bare-metal coretex-m3.  This exposed two test bugs where an explicit #include <cstdlib> was needed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160786 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b5bb3c5af878dbcbb548bac3579e46ad10189be","date":"2012-07-26T17:42:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Patch by Andrew C. Morrow:  Conditionally include cxxabi.h in new.cpp and typeinfo.cpp.  Both new.cpp and typeinfo.cpp have code that is conditionally compiled\nbased on the LIBCXXRT and _LIBCPPABI_VERSION defines, but those files\ndo not currently include <cxxabi.h> in the non __APPLE__ case. The\nattached patch updates those files so that for non __APPLE__ builds\n<cxxabi.h> is included if available or if LIBCXXRT is set. I'm\nmodeling this on the recent updates to exception.cpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160790 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"afcac1ac4625a3dfcf623809e8db6e4e460204a5","date":"2012-07-26T20:01:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Patch by Andrew C. Morrow:  shims to work around macroized getc and putc on linux.  On my eglibc 2.13 based Debian system 'getc' is a macro defined in\n/usr/include/stdio.h. This decision to make it a macro doesn't seem to\nbe guarded by any feature test macro as far as I can see.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160799 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"116ce6a3123c0f18e67c7df94a5335c55e973b92","date":"2012-07-26T20:22:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160812 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5fec82dc0db3623546038e4a86baa44f749e554f","date":"2012-07-30T01:40:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement [util.smartptr.shared.atomic].  This is the last unimplemented\nsection in libc++.  This requires a recompiled dylib.  Failure to rebuild\nthe dylib will result in a link-time error if and only if the functions from\n[util.smartptr.shared.atomic] are used.\n\nThe implementation is not lock free.  After considerable thought, I know of no\nway to make the implementation lock free.  Ideas welcome along that front.  But\nchanging the ABI of shared_ptr is not on the table at this point.\n\nThe mutex used to lock these function is encapsulated by std::__sp_mut.  The\nonly thing the client knows about std::__sp_mut is that it has a void* data\nmember, can't be constructed, and has lock and unlock members.  Within the\nbinary __sp_mut is currently implemented as a pointer to a std::mutex.  That can\nchange in the future without disturbing the ABI (as long as sizeof(__sp_mut)\nremains constant.\n\nI specifically did not make __sp_mut a spin lock as I have a pathological\ndistrust of spin locks.  Testing on OS X reveals that the use of std::mutex in\nthis role is not a large performance penalty as long as the contention for the\nmutex is low (more likely to get the lock than to have to wait).  In the future\nwe can still make __sp_mut a spin lock if that is what is desired (without ABI\ndamage).\n\nThe dylib contains 16 __sp_mut's to be chosen based on the hash of the address\nof the shared_ptr.  The constant 16 is a ball-park reasonable space/time\ntradeoff.\n\nstd::hash<T*> was changed to call __murmur2_or_cityhash, instead of the identity\nfunction.  I had thought we had already done this, but I was mistaken.\n\nAll of this is under #if __has_feature(cxx_atomic) even though the\nimplementation is not lock free, because the signatures require access to\nstd::memory_order, which is currently available only under\n__has_feature(cxx_atomic).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160940 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"30055c68d4760fac2c41650e43f9e6b7b725197f","date":"2012-07-30T02:29:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated the complete by-chapter graph\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a7b6d82839f3f5e13f6568fec74d425e497b966","date":"2012-07-30T13:59:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160959 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65f059b842cc5b7990933781e119a5f14abc3504","date":"2012-07-30T17:13:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Despite my pathological distrust of spin locks, the number just don't lie.  I've put a small spin in __sp_mut::lock() on std::mutex::try_lock(), which is testing quite well.  In my experience, putting in a yield for every failed iteration is also a major performance booster.  This change makes one of the performance tests I was using (a highly contended one) run about 20 times faster.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@160967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee7a0bf265499a87948e152e9d3a1bedcb9e896c","date":"2012-07-31T21:30:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: Attached is a writeup of the current state of the libc++ test suite on Linux.\n\nThere are a few tests that are listed as failing here for which I have\na patch in the works. I'll be sending those along soon. There are\nothers where I know what is going on but don't yet have a solution,\nand I've included some notes for those. Several still need to be\ninvestigated, mostly in localization and the regex test suite. I think\nthat many of these failures are due to locale implementation\nvariations that make the expected test results not match the actual\nresults. I'm not sure what the best way to make the tests accomodate\nthis sort of variation might be.\n\nThe failures in the unique_ptr test suite are very new and are caused\nby a clang crash which I've not yet looked into.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161079 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d39f9f356a1fa625001b94fc2e392f02e8b2327","date":"2012-08-02T18:12:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: This patch fixes\ntest/input.output/iostream.format/output.streams/ostream.formatted/ostream.inserters.arithmetic/pointer.pass.cpp\nto accept '(nil)' as a valid representation for NULL so that the test\npasses on Linux. The same thing is already done in some other tests,\nlike in /test/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_pointer.pass.cpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161188 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"403f91ad2cb76585f336faaab4812ff3ac5d27de","date":"2012-08-02T18:17:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: The attached patch is an attempt to implement\nstd::thread::hardware_concurrency for platforms that don't offer\nsysctl, but do provide a POSIX sysconf and _SC_NPROCESSORS_ONLN.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161190 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef793f2513b734d0827825b7857f5745529190d4","date":"2012-08-02T18:35:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: Among the various libc++ tests that currently don't pass on Linux are\nlocalization/locale.categories/category.collate/category.ctype/locale.ctype.byname/is_1.pass.cpp\nand scan_is.pass.cpp. The tests fail when the character class being\ntested is compound, like ctype_base::alnum or ctype_base::graph,\nbecause the existing series of conditionals in do_is an do_scan_is\nwill abort too early. For instance, if the character class being\ntested is alnum, and the character is numeric, do_is will return false\nbecause iswalpha_l will return false, 'result' becomes false, and the\n'true' result from the later call to iswdigit_l ends up being ignored\n. A similar problem exists in do_scan_is.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63b2f4f2dc6ff36603df850db940cebc82f31927","date":"2012-08-02T18:36:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: The attached patch updates the lit.config for libc++ unit tests so\nthat the valgrind configuration passed to lit.py is used to run .pass\ntests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161193 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"069bdd52c1a89e106cad3b8894b2bc8013632aa2","date":"2012-08-02T18:39:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: There are two tests under test/utilities/memory that heap allocate two\nintegers which remain unused and are subsequently leaked, so the test\nfail when run under valgrind. Unless I'm overlooking a subtle reason\nwhy they are needed I think they can be removed, allowing these tests\nto pass under valgrind. The attached patch removes the variables. If\nthere is a reason for them to exist, I can change this to just delete\nthem at the end of the test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd9923623167203ae0477cacb9fa49113595c298","date":"2012-08-02T18:44:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: The attached patch updates the initialization of the 'struct tm' in\n__time_get_storage<char> to match the initialization behavior in\n__time_get_storage<wchar>. Without the initialization, valgrind\nreports errors in the subsequent calls to strftime_l.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161196 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b2f4203a2310f28bfd805a19cbb181b10ce4d90","date":"2012-08-03T18:01:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Performance tweaking rotate.\n\nrotate is a critical algorithm because it is often used by other algorithms,\nboth std and non-std.  The main thrust of this optimization is a specialized\nalgorithm when the 'distance' to be shifted is 1 (either left or right).  To my\nsurprise, this 'optimization' was not effective for types like std::string.\nstd::string favors rotate algorithms which only use swap.  But for types like\nscalars, and especially when the sequence is random access, these new\nspecializations are a big win.  If it is a vector<size_t> for example, the\nrotate is done via a memmove and can be several times faster than the gcd\nalgorithm.\n\nI'm using is_trivially_move_assignable to distinguish between types like int and\ntypes like string.  This is obviously an ad-hoc approximation, but I haven't\nfound a case where it doesn't give good results.\n\nI've used a 'static if' (with is_trivially_move_assignable) in three places. \nTesting with both -Os and -O3 showed that clang eliminated all code not be\nexecuted by the 'static if' (including the 'static if' itself).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6886dd19c4cf8de8a00d1e4f720e39d0cf3d2f52","date":"2012-08-04T00:47:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Loosen up the timing requirements on 4 more tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161289 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e103a3d69b77cec2c9775a9f9225d36272009494","date":"2012-08-05T17:37:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Andrew Morrow: The current CMake setup for libc++ incorrectly uses the variable\nLLVM_ENABLE_ASSERTIONS instead of LIBCXX_ENABLE_ASSERTIONS when\nfiguring out what _DEBUG/NDEBUG defines to set. It also tries to test\nthe non-existent variable 'uppercase_CMAKE_BUILD_TYPE', which the top\nlevel LLVM CMakeLists.txt sets up, but which the top level libc++\nCMakeLists.txt currently does not. Changing the variable name tested\nand creating the uppercase release name variable allows libc++ to\nhonor the LIBCXX_ENABLE_ASSERTIONS option correctly.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161308 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"584db4287baabbf9c5e5c123bb4c797958d65553","date":"2012-08-05T21:43:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"std::equal operating on non-const __bit_iterators was not working.  This fixes it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4490c4aaed9e24f5dd57bc1260319214ccb97970","date":"2012-08-08T16:17:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change size of reference count field in __libcpp_nmstr from 32 bits to 64 bits for 64 bit targets.  This is controls the data layout of all exceptions defined in <stdexcept>.  This aligns the ABI with that of gcc-4.2.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161497 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e87514aa94773d81f492b468ba89f1d63cb018ee","date":"2012-08-13T12:29:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Patch constributed by Michel Moren in http://llvm.org/bugs/show_bug.cgi?id=13592 .  Fixes is_convertible<From, To> when To is an abstract type.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161755 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a03b71f09af6e05df4cf2ba85677a941d2a3f95","date":"2012-08-13T16:17:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove obsolete do-installhdrs target.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161760 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"364e94575b3699512632b3c6c3e5aeecc80e07c4","date":"2012-08-13T16:32:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove obsolete do-installhdrs target (again).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@161761 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ae952ab9a205e5b5fc5c159a1f76ad15782d6dd","date":"2012-08-17T17:10:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Consistently label __bit_array as a struct, not a class.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0852ffbe819026f1e4ddbfbea1b412685152619","date":"2012-08-17T17:54:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply patches supplied by Michel Morin in http://llvm.org/bugs/show_bug.cgi?id=13601 to correct bugs in is_convertible for the case that the intrinsic __is_convertible_to is not available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162111 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"96c60b482ef2614185e3fa0c606f87c3efcf1e85","date":"2012-08-19T15:13:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Patch contributed by Dev Dude for mingw64 port.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162188 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffab05833fee2beec500705faf3d01389e53b31c","date":"2012-08-19T17:14:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"In C++03 mode add an explicit conversion from int to the emulated class enum.  Fixes a problem reported by C. Bergström.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162189 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08a0b48c094ae76c3c9fb082bf0f17738a3fd7ce","date":"2012-08-22T00:57:11.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fix a typo in the docs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162335 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8540d4c9d2f29f37fb9a421a656b0eb58c01ca69","date":"2012-08-24T16:52:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"basic_filebuf needs to delay obtaining a codecvt facet from the global locale to give the client a chance to imbue the proper locale.  Fixes http://llvm.org/bugs/show_bug.cgi?id=13663.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162567 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7d59f26013b2bfc10445bfa4593504ed485f5f0","date":"2012-08-24T18:06:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fixed order of calling use_facet vs setbuf in basic_filebuf default constructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162571 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec423cb8d497b5894bb9da7529556b62e1f683b4","date":"2012-08-24T20:37:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix basic_filebuf's internal buffer is shrinking when using with some codecvt.  http://llvm.org/bugs/show_bug.cgi?id=13602\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d305d3c1a2bbf56dfcf6164a63122a8ee6edfd23","date":"2012-08-24T21:20:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Hyeon-Bin Jeong: 1. sync() should reset it’s external buffer pointers. \nRemaining characters should be discarded once sync() called. If don’t, garbage\ncharacters can be inserted to the front of external buffer in underflow().\nBecause underflow() copies remaining characters in external buffer to it’s\nfront. This results wrong characters insertion when seekpos() or seekoff() is\ncalled.\n\nthis line should be inserted in sync() just before return:\n__extbufnext_ = __extbufend_ = __extbuf_;\n\n2. sync() should use length() rather than out() to calculate offset.\nReversing iterators and calling out() to calculate offset from behind is\nworking fine in stateless character encoding. However, in stateful encoding,\nescape sequences could differ in length. As a result, out() could return wrong\nlength. \n\nFor example, if we have internal buffer converted from this external sequence:\n(capital letters mean escape sequence)\n… a a a a B b b b b\n\nout() produces this sequence. \nb b b b A a a a a\n\nBecause out() inserts escape sequence A rather than B, result sequence doesn't\nmatch to external sequence. A and B could have different lengths, result offset\ncould be wrong value too.\n\nlength() method in codecvt is right for calculating offset, but it counts\noffset from the beginning of buffer. So it requires another state member\nvariable to hold state before conversion.\nFixes http://llvm.org/bugs/show_bug.cgi?id=13667\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d57de091c3923711fed552379a728ae48b6618e9","date":"2012-08-24T21:45:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add Hyeon-bin Jeong to CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162604 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37bdf0e6bd0f1f91bce147e51604519240f55d90","date":"2012-08-24T22:03:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Have basic_istream seekg, putback and unget first clear eofbit.  Fixes http://llvm.org/bugs/show_bug.cgi?id=13089.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162608 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3882d397c4ad38506d1fe21e5ee3d1d9c82091e4","date":"2012-08-24T22:15:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Wrap throw in _LIBCPP_NO_EXCEPTIONS in debug.cpp.  Calls abort if can't throw an exception.  Fixes http://llvm.org/bugs/show_bug.cgi?id=13082.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162613 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5160283a4581481ec71384251d464398d0d49e2","date":"2012-08-25T15:06:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michel Morin:  My previous fix for C++03 was incomplete. \nIt does not consider user-defined conversions that convert an rvalue\ninto an lvalue and works incorrectly for types with such a conversion\noperator.\nFor example, \n\n    struct foo\n    {\n        operator int&();\n    };\n\n returns false_type. \nAttached a patch that fixes this problem. \nhttp://llvm.org/bugs/show_bug.cgi?id=13601\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162644 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70e441a9b0224bdd7f74a3aa2b67c53a1208c5e1","date":"2012-08-26T17:46:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162647 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c417a802edd2cc604a2375c0c1ddf0f944196c32","date":"2012-08-26T18:05:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Hyeon-bin Jeong:  libc++ fails to create any classes inherit from basic_ios if they\nprovided char type other than char or wchar_t. It throw exception during\nconstruction, so there is no chance to imbue own ctype.\n\nThis fixes http://llvm.org/bugs/show_bug.cgi?id=13698\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162648 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf115d2cc6bb658db58f4b0b7a2da078a18a62ef","date":"2012-08-30T19:14:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change sleep_for, sleep_until, and the condition_variable timed wait\nfunctions to protect against duration and time_point overflow.  Since\nwe're about to wait anyway, we can afford to spend a few more cycles on\nthis checking.  I purposefully did not treat the timed try_locks with\noverflow checking.  This fixes\nhttp://llvm.org/bugs/show_bug.cgi?id=13721 .  I'm unsure if the standard\nneeds clarification in this area, or if this is simply QOI.  The\n<chrono> facilities were never intended to overflow check, but just to\nnot overflow if durations stayed within +/- 292 years.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@162925 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"460b4cadde3f0e7679ddd12151517e949493b691","date":"2012-09-03T18:13:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Some minor mingw64 porting tweaks from Glen.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@163120 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c90cbad38be6800a21af0edb5ea71df344e8a74","date":"2012-09-11T16:10:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric: FreeBSD porting tweaks for PTHREAD_MUTEX_INITIALIZER and PTHREAD_COND_INITIALIZER\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@163626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"33be35effe82ca5a7a2b285fb9d8176dd94e5e8c","date":"2012-09-14T00:39:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric:  many visibility fixes.  Howard:  Much appreciated.  Can you send me a patch to CREDITS.TXT?\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@163862 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cb977bf0c1c49574e970dd1e27642c2cb229d0a","date":"2012-09-14T23:28:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@163949 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7eb9f1e3a305aa0f219d31efb85a59fb9d57001a","date":"2012-09-16T20:33:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Align <atomic> with clang r163964 which disallows const _Atomic types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164004 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a585de645cccf1b8772c7efc8b77b6c1044ffe2c","date":"2012-09-19T19:14:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Overloaded __pad_and_output on ostreambuf_iterator and in this overload call sputn instead of dereferencing the iterator which calls sputc.  This is intended to be purely a performance optimization, especially for clients who may have overloaded the virtual function xsputn.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164241 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d3f4ee99f5672564b1914f112659a3a079f1118","date":"2012-09-19T23:51:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add overflow check to tanh(complex) and reduce to finite answer.  Fixes http://llvm.org/bugs/show_bug.cgi?id=13874\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164266 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c6fefdf44ad3ece8de1bf01189e4ac5ffe150e6","date":"2012-09-21T20:49:54.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Fix installheaders target to do what it did prior to r161760. rdar://12348765\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c004e2e7d7566902569951e77adad18cf8815cf2","date":"2012-09-24T14:27:10.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Updating email address\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164489 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c25d158c62f7485c7c3d72aa98bc519e8630c03b","date":"2012-09-24T23:36:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply the emulated nullptr_t with constexpr.  This is an unusual configuration that would take advantage of this.  But it has popped up in the wild and does no harm to support it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d36c432f273fc62c9b9b2ad64223bbe31351a11","date":"2012-09-26T15:38:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bump _LIBCPP_VERSION to 1002\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164700 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"155ff6e95a0b6029a276551d54cc6391b47fde83","date":"2012-09-28T17:42:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Due to a mistake on my own part, I need to burn some version numbers.  This does not impact any of the implementation of libc++, and does not impact the ABI in any way.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@164832 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"95c0e9f9e1cdc9d9cf2192530074583f788a7909","date":"2012-10-02T19:45:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make vector::iterator and string::iterator more resilient against overly generic relational operators.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@165033 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"75536baae747cc5e2202285e416ef037a70cd156","date":"2012-10-03T20:48:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Holger Arnold:  Correct the use and testing of __GNUC__ and __GNUC_MINOR__ in <__config>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@165151 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1dc6f7ab975323ba3aca9bcfc884a15a7aac7834","date":"2012-10-13T02:03:45.000Z","author":{"name":"Argyrios Kyrtzidis","email":"akyrtzi@gmail.com"},"message":"Don't neglect to \"return *this\".\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@165860 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"999fc97ef22969aa73f06bf9aa7dfee4f0eef219","date":"2012-10-13T18:03:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric:  FreeBSD only:  Add the C11 aligned_alloc to <cstdlib> and adjust the inclusion of quick_exit.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@165882 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c0be3864a8745e3d77c2eeda719f2e0a48818ed","date":"2012-10-13T19:31:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Use traits_type::to_int_type in basic_streambuf<_CharT, _Traits>::xsputn when calling overflow to correctly handle negative signed character types.  This fixes http://llvm.org/bugs/show_bug.cgi?id=14074.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@165884 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eac2a01863a90185dfa1151ce902203be2c68955","date":"2012-10-15T17:34:53.000Z","author":{"name":"Argyrios Kyrtzidis","email":"akyrtzi@gmail.com"},"message":"Add an entry in CREDITS.TXT\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@165949 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c0df1416f2cec1cc6cce797d18ddc5e50b64797","date":"2012-10-30T19:06:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Rename uses of _ and __ because these are getting stepped on by macros from other system code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167038 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4af2cf38f063aa1695fa653b9bb981c7218add47","date":"2012-11-01T16:32:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Richard Smith:  This fixes a problem in std::is_constructible for incomplete types, and those types with a user-defined operator,().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167233 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73c85c7725981585acf752a3a32aca6f50b304a0","date":"2012-11-01T17:32:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"peek should set eofbit if sgetc() returns eof.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167238 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff9267709d33962b4ef8f0890321414da86bd3df","date":"2012-11-06T21:08:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Provide a way to disable use of extern templates in libc++.  This is intended for the clients of libc++, not the libc++ build.  The dylib should always contain the extern templates.  To disable the client needs to put -D'_LIBCPP_EXTERN_TEMPLATE(...)=' on the command line.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167486 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22b781bf0c49857e1d0e2f1873cf8c3869e8246b","date":"2012-11-06T21:31:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update instructions for building and using libc++ on Mac OS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167490 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d5e9d3d663dcb1a56fec805fbe29a6c5394e400","date":"2012-11-06T21:42:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Enable the tuple interface of pair in C++03 mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167491 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bae2a9dc5b7e4a2877ac8823d9ae266f6741bb7","date":"2012-11-06T21:48:33.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric:  Silence some warnings in <locale>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167492 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0919dbaab324bc1cbefce106629838104ca12b54","date":"2012-11-06T21:55:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric:  Silence some miscellaneous warnings.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167493 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faa17162e91c615378c38d7dc4a22699cf4cf0cf","date":"2012-11-14T16:31:15.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Change C++0x references to C++11, Fixes bug #12745\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167930 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"537b2fa6b8bcb8d5574534c2ad65453dd6f161da","date":"2012-11-14T21:17:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Restrict optimized __pad_and_output implementation detail to desired releases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@167980 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"984f10fdc022c7d4ba1fc53cfaa7af705d3d19c1","date":"2012-11-16T22:17:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"istreambuf_iterator increment should call sbumpc instead of snextc.  Patch \nby Kimball Thurston.  This fixes http://llvm.org/bugs/show_bug.cgi?id=14358.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@168209 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a9c5ea750bc0894c43926a1c9eada2d41ce1a5f","date":"2012-11-26T21:18:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric:  When using libc++ headers on FreeBSD, in combination with -std=c++98,\n-ansi or -std=c++03, the long long type is not supported.  So in this\ncase, several functions and types, like lldiv_t, strtoll(), are not\ndeclared.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@168610 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"641f6c1f655cb9936369ff7d069c7846771be040","date":"2012-11-27T18:35:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove by-chapter breakdown of what is implemented.  The chart is now obsolete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@168713 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0895ff8aee82d79986e1cc61e66870d48244d90","date":"2012-11-27T18:52:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix type-o.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@168715 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af01e708aa7e2b97a96bca702bc88a4f26d4425e","date":"2012-11-27T23:56:28.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"tests/lit: Change test default parameters to assume local build.\n - Also, support overriding them with lit parameters.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@168749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53008d8b0c4e3f008c78ce75b735a532c0724005","date":"2012-11-29T04:30:50.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Remove 'noreturn' attribute from friend declaration. This attribute will be\ninherited from the previous out-of-class declaration, and attributes on friend\nfunction declarations are ill-formed in C++11.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@168853 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a358fbe504cec211a5742d9c984aed9b25f9ff4a","date":"2012-11-30T21:02:29.000Z","author":{"name":"Michael J. Spencer","email":"bigcheesegs@gmail.com"},"message":"[CMake] Add support for selecting which c++ abi library to use.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@169036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7fa77a701f066c745e3887b0938a5b039718d399","date":"2012-12-09T00:12:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Modify testit to use the local headers and lib.  Thanks go to Jeffrey Yasskin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@169686 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a69fa14d2f0521e45a72068c14fe573b140d48b","date":"2012-12-12T21:14:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Zhang Xiongpang:  Add definitions for const data members.  Fixes http://llvm.org/bugs/show_bug.cgi?id=14585.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170026 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d4f92c08a17842d98381adc3c67ee4e4e7b984b","date":"2012-12-13T00:51:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170062 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a46482e8bb7bb5bd13e35d35a0b7b5e6dc457a6c","date":"2012-12-18T16:46:30.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Added static_assert to std::get<N>(std::array) calls to catch \"out of bounds\" calls\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b2f2b6814391635e3dc0df1b795bd41ecfe1b592","date":"2012-12-20T04:20:28.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Implement std::is_base_of for the case where we don't have a compiler\nintrinsic. This relies upon the fact that overload resolution does not check\naccess and ambiguity for a derived-to-base conversion. This passes all\nis_base_of tests in the test suite.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170662 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee717d8c440d2cdc9e249cf8ebaa5e285ce450ae","date":"2012-12-20T15:40:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Hyeon-Bin Jeong:  readsome() need to reset gcount to zero.  This fixes http://llvm.org/bugs/show_bug.cgi?id=14670.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3793a7d2026f6d7b38bd17af30bac5c1e4401886","date":"2012-12-20T16:50:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Test case for http://llvm.org/bugs/show_bug.cgi?id=14670.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170706 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27c836ff3a9c505deb9fd1616012924de8ff9279","date":"2012-12-22T00:12:05.000Z","author":{"name":"Chad Rosier","email":"mcrosier@apple.com"},"message":"Remove redundant inits.  Patch by Eitan Adler.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@170967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6e54b964f22f489309e4e98554ddd7a42ccd291","date":"2012-12-27T18:46:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool:  This just rounds up a few compile warnings emitted by GCC (4.7.2).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0aa900e94fce1c444b6c9688f9a47314ecaefbf3","date":"2012-12-27T18:59:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool:  Silence warning and reduce unnecessary code in hash.cpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171167 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf68bdc4edff1d61656e93ea55450186a703ca57","date":"2012-12-27T21:17:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool:  avoid hardcoding buffer lengths.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171169 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f767b7b28b28a1cd1d9950e3dd4b7bedf555d02","date":"2012-12-27T23:24:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool:  cleanup a few more compile warnings emitted by GCC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171173 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2328902ab14088a962a24c9074ad220fd550b30f","date":"2012-12-27T23:26:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool:  Add entry to CREDITS.TXT.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171174 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21772ec06376b965fd868a68bcf55e60c5a0dcc9","date":"2012-12-28T18:15:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool: GCC complains about the template functions as potentially not being able to be\ninlined.  These do not need to be always-inlined for ABI stability because they are not exported beyond this source due to the unnamed namespace.\nAlso simplified use of the Wmissing-field-initializers pragma as was done for clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171202 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1a7479763b800379b30f0b10cdf2ce52165f00f","date":"2012-12-29T17:45:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove test for eof from istreambuf_iterator constructors.  It is no longer necessary and potentially violates the constructor's noexcept spec.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171232 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbda4db0d50392ce3c1f795f6cbabced9db11d2e","date":"2012-12-31T05:59:45.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Add a simple .arcconfig to make using the 'arc' commandline tool and the\nphabricator code review site easier with libc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed9f69d342bc19059db99f330cf7164ff31262a8","date":"2012-12-31T06:09:54.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Don't mark variadic functions as always inline -- they cannot in fact be\ninlined.\n\nPatch by Saleem Abdulrasool, reviewed by Michael Spencer and Richard Smith.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171276 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db8a030bd3d8260c3def1d7710f34ec0b6ec7a89","date":"2012-12-31T19:34:21.000Z","author":{"name":"Michael J. Spencer","email":"bigcheesegs@gmail.com"},"message":"[CMake] Fix c++ abi library configuration on Linux.\n\nYou can now configure from the command line using:\n-DLIBCXX_CXX_ABI=libsupc++\n-DLIBCXX_LIBSUPCXX_INCLUDE_PATHS=\"path;path\n\nAlso documents how to build on Linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171316 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"352bd3a273848a19e10882c61bee06895b63deb0","date":"2012-12-31T20:09:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Klaas de Vries:  Fix bug in libc++'s std::string::find_first_not_of.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171321 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e0bc1cfe8b9336f8367f9c48c5322212a22691f","date":"2013-01-01T10:00:19.000Z","author":{"name":"NAKAMURA Takumi","email":"geek4civic@gmail.com"},"message":"Update the copyright coredits -- Happy new year 2013!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"159b9ba4ce50c15ae94a4c21bbe3ff296fed14f9","date":"2013-01-01T16:09:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updating CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"002a98494836085a3c84e2e844147468d4d39cc7","date":"2013-01-03T01:45:09.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed 7 (of 8) different 'iterators.h' files in test/localization\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba1920fe4b98e61fe47b432689c98b999f5139e3","date":"2013-01-03T02:29:29.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed several more different 'iterators.h' files in libcxx/test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"239e341c94184e2ed2357f2e054c84fbb1fbed2a","date":"2013-01-03T03:57:56.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed another copy of  'iterators.h' files in libcxx/test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8226d0b7c5f9e3a4d4a2b94179234085d973841f","date":"2013-01-04T18:24:04.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"...and then there was one. Only one copy of 'iterators.h' in the test tree for libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171479 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ae47055f958b95e1ab941b5209d6f6b91c3aed1","date":"2013-01-04T18:58:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"atomic_bool was missing (just a typedef to atomic<bool>).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171498 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83e2c4d877fe2d7793868b1c6a5d9525a7c4d431","date":"2013-01-05T03:21:01.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Move common header files into a 'support' directory; make 'testit' include -I to that directory; rename 'iterators.h' to 'iterator_test.h'; remove hard-coded paths to include files from more than 350 source files\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171594 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"304c31b355bc3f74a614535104e63abc3824d891","date":"2013-01-09T17:20:02.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Made test output iterators have value_type of 'void'; matches ones in library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@171980 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f619e230cc953786d9b41904fa97e465c53c3aab","date":"2013-01-11T20:36:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix exception safety bug in vector::push_back\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172250 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"750039f50c37b12d5d1f1c59d73f8458de6d4982","date":"2013-01-14T17:07:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michael van der Westhuizen:  Patches for Linux.  Fixes http://llvm.org/bugs/show_bug.cgi?id=14648.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4ebb0e415549c5dc04e0622bb8f06999c558ede","date":"2013-01-14T17:12:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michael van der Westhuizen: Improve support for testing on Linux.  Fixes http://llvm.org/bugs/show_bug.cgi?id=14892.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172436 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e3ae9ec4186fd968903ec94613bcea96ab31e56","date":"2013-01-14T18:59:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix string conversions functions to throw out_of_range properly.  Fixes http://llvm.org/bugs/show_bug.cgi?id=14919.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172447 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b031c947fb7534d18b63d216e0c575a9be5e562","date":"2013-01-14T20:01:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix a race in the construction of future.  This fixes http://llvm.org/bugs/show_bug.cgi?id=14934.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b05a55675f1aa5303e54c196517c1526b9184f51","date":"2013-01-14T20:56:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make <cmath> classification macros work with integral types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b93963db73e86e0ab88de12663be44e871da851","date":"2013-01-15T17:22:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Optimize basic_ostream::write by having it call sputn instead of sputc.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172542 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ce391e3362374d57fa34d4f7637c93bea0c74e0","date":"2013-01-16T17:56:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make a few tests optimization-proof.  These tests were failing under -O3 because the optimizer was eliminating the call to new.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@172631 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"78f0de22dbd676f3258fbda1ff35148a390c210b","date":"2013-01-21T17:26:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Donated anonymously:  This enables GCC 4.8.0 to build libc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@173060 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b9d6a8d4028c880beb8d2b59a4034fae7e8938a","date":"2013-01-21T20:39:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement the ATOMIC_*_LOCK_FREE macros.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@173084 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7173a501bb094082d0045d0b0c4eff6c7f9744ad","date":"2013-01-22T14:44:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool: Ensure that __GLIBCXX__ is defined when building with libsupc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@173164 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e0f0bfb5e6348e9d912809cd882c4076bd738fa8","date":"2013-01-22T14:48:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool: __terminate_handler and __unexpected_handler are defined but not used when\nbuilding against libsupc++ as the functions for which they are used are provided\nby libsupc++.  Simply preprocess them away when building against libsupc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@173165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"54e2fff2e1e3b2b4c317651bbbf1aadc27b1e378","date":"2013-01-22T17:26:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Saleem Abdulrasool: If errno is defined as volatile int, the qualifier differences can cause\ntemplate typename deductions on swap<> (used in string.cpp).  Use\ndecltype(errno) to replicate the type and qualifier information for holding the\nerrno value.  Because errno is expected to be assignable, there is no need to\nuse typename std::remove_const<decltype(errno)>::type to hold the value.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@173172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cccf25579aed34e4c5cf0a1024c7f54f62ec9960","date":"2013-02-05T18:03:49.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Add a 'use_system_lib' parameter.\n\n - This controls whether to execute against the locally built library or\n   not. The default is currently True which maps to what was already being done\n   by default.\n\n - I'd appreciate it if someone can implement the proper handling of this flag\n   on linux, I no longer remember the details of its .so handling.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174404 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81d1ef7a3f10ce47536a01e2bd96db4d6c2ffca0","date":"2013-02-05T21:03:25.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Add support for REQUIRES and XFAIL lines in libc++ tests.\n\n - We parse up to the first non-empty non-comment (C++ style) line, otherwise\n   the format and semantics match what is used for LLVM/Clang tests.\n\n - For now, the only interesting thing to test against is a user supplied\n   target_triple test parameter.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174440 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5b51964c176253f1097229d8fd80ae49155cdb0","date":"2013-02-05T21:43:30.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Add an available feature that combines the triple and use_system_lib.\n\n  - This is so that we can easily write XFAIL markers for tests that are known\n    to fail with versions of libc++ as were shipped with a particular triple.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aac8dd83317151da747c86e786df34e80872bf0c","date":"2013-02-05T21:43:32.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Mark some istream.unformatted expected failures (with system libc++).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174444 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"edfb05351e93c3743cf56d8de7157872fcf6b209","date":"2013-02-05T22:10:25.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] XFAIL a few things that require libc (?) support missing on Darwin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174450 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8e18896019239e6c8b970accafbe8c8592c80ff","date":"2013-02-05T22:10:27.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Mark some string.conversions expected failures (with system libc++).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"548d392d5d2cf1df248fb028ab40b1e700c0b505","date":"2013-02-05T22:10:28.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Mark another stream input expected failure (with system libc++).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b9eee35d85db217419f1ce9d132fa710f693bf4","date":"2013-02-05T22:21:52.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Mark another stream input expected failure (with system libc++).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174453 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4cceb7a5e8785ca646b45c42147dd1b13dc4ca9c","date":"2013-02-05T22:28:03.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] If no explicit target triple is given, try to infer it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174454 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43807c2fbad2eb788250dccfc4c61205efb6b7aa","date":"2013-02-05T22:51:20.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] XFAIL some locale tests that don't seem to work on any Darwin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f4841fb8347b9990c5bd8f991dcf93242d7097b","date":"2013-02-06T00:04:52.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Accept XFAIL arguments that match any part of a feature.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a38e2c9d1a4fb3de3d6ce1287704735b31658684","date":"2013-02-06T00:04:54.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[build] Create the link for the final library install name in the lib dir.\n\n - Otherwise, we never were actually linking against the right library when\n   building the test applications.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174470 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cedb7fcc10556aaf4302917913c672b1bc6a1db0","date":"2013-02-06T00:59:06.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] One last batch of XFAILs, for tests using new symbols added to libc++.\n\n - As of this commit, the test suite should now fully pass on both darwin11 and\n   darwin12 when testing against either a locally built libc++ or the system libc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174478 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b8b9922f0cff769571920bc8bac516544ac3083","date":"2013-02-06T17:45:53.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Enable use_system_lib support on Linux.\n - Patch by Michael van der Westhuizen.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174527 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88dec1ef5c381fe4092228ee84c979af2427f7fb","date":"2013-02-06T17:47:08.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Change test default to run against locally built library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174528 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7fa0ca75e50989671b6c7ae2217eca220dc9884d","date":"2013-02-06T20:24:23.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Infer the cxx_under_test (as clang++).\n\n - This is a reasonable default, and makes testing just work with no required\n   parameters.\n\n - Add notes on all of the inferred or default values.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66a48c5ad50704194df723ad9e13c7f1bb3c13f4","date":"2013-02-06T20:25:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Give a lot more timing latitude to some of the timing tests. Busy buildbots are hitting the timing limits too often.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b73568dc24f4c966cf69a3b200bb5baad003e571","date":"2013-02-06T21:03:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Marcin Zalewski:  Change the name of a template parameter in __copy_backward from _InputIterator to _BidirectionalIterator to better document the intent of the algorithm.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174544 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd329a445e7ba79b338d353fafe1746ab3c87368","date":"2013-02-07T00:24:17.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[build] Detabify.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174562 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6afc7ad3eb8ec43f638445c660a56160632c2f77","date":"2013-02-07T00:24:19.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[build/Darwin] Use the correct libc++abi reexport list.\n\n - This updates the build script to match the change originally in r149634, so\n   that we re-export symbols from libc++abi appropriately.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174563 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88c3190d6cb2d365ea2ae86eff5994209e3972fd","date":"2013-02-07T14:22:51.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Clean up some warnings for Linux build; No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174611 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46c49d19aaea17f809877041417d950ba7b17d13","date":"2013-02-07T15:27:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michael van der Westhuizen: The attached patch add support for building against libc++abi and libcxxrt to CMake builds of libc++.\n\nUsage (with the appropriate CC and CXX environment variables) is:\n$ cmake -DLIBCXX_CXX_ABI=libcxxabi '-DLIBCXX_LIBCXXABI_INCLUDE_PATHS=/home/michael/libcxxabi/include' ../libcxx\nand:\n$ cmake -DLIBCXX_CXX_ABI=libcxxrt '-DLIBCXX_LIBCXXRT_INCLUDE_PATHS=/home/michael/libcxxrt/src' ../libcxx\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"635bbbb6d1b3c4f729f16b051745b4403914b0e5","date":"2013-02-07T15:31:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Revert accidental check-in.  These changes are probably good, but premature at this point.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ae96d0f21779b8807c6c1be05ab211ea8bde544","date":"2013-02-07T17:20:56.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"More libc++ warning suppression on Linux; no functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174636 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d854ce6bfaa35c4079872dc68ba18ac1fe7f49e2","date":"2013-02-07T17:37:58.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Another libc++ warning suppression on Linux; no functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174637 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b18165e704640ab7c4e2798529e0829bfbd29c3c","date":"2013-02-07T18:48:09.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Belt and suspenders when calling sysconf\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174642 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5920cfc40317d2b1f68cd356ecc10232bfbf08ba","date":"2013-02-07T22:12:02.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Change the 'result_type' from unsigned to 'uint_fast32_t'. This eliminates truncation warnings on Linux\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174669 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe14b970ac1ce90da0d22aa0b83fc48298d94327","date":"2013-02-08T17:41:19.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Increase a bunch of wait limits.\n\n - Basically I just ran the thread tests many many times on a busy machine and\n   bumped the timeouts whenever I hit a test failure.\n\n - This is obviously subpar, but is the best I can do without the tests being\n   rewritten to not depend on arbitrary timeouts.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1608b6488117db45e41bd4348325d9538717e7e9","date":"2013-02-08T17:41:28.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Add back stdc macros I accidentally refactored out.\n - Patch by Michael van der Westhuizen:\n--\nr174404 accidentally removed stdc format, limit and constant macros from the Linux test runner logic.  This small patch re-adds the macros.\n\nMaking this change fixes the following tests on Linux:\n - depr/depr.c.headers/inttypes_h.pass.cpp\n - depr/depr.c.headers/stdint_h.pass.cpp\n - input.output/file.streams/c.files/cinttypes.pass.cpp\n - language.support/cstdint/cstdint.syn/cstdint.pass.cpp\n--\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174722 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8eba41324c5519557e76092fe8fe98ebb8aa5f5b","date":"2013-02-08T18:26:55.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Another batch of timeout increases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174726 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b85dea35b0c56bc1389f630c72b44dd7906e2f73","date":"2013-02-08T19:04:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michael van der Westhuizen: update to CMake.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af69f47e86909899282217d03ef004aef404aa13","date":"2013-02-08T19:08:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add Michael van der Westhuizen to CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af4d1619089310f8f292c4240b0e522244a6ce1e","date":"2013-02-08T19:10:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michael van der Westhuizen: Update instructions for building on Linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174733 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b875ef3746dec865c7071fc3caab8cd2fcceb3b","date":"2013-02-11T21:04:34.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Another batch of timeout increases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174902 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3bc6a98c3e55a81212cfb559120e4ccdc7da1bf2","date":"2013-02-12T19:28:51.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Add support for a link_flags lit parameter.\n - This is useful for testing with custom ABI libraries.\n - Patch by Michael van der Westhuizen.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@174997 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0dee9cd5ad303867ab87b3a9a07ce4ad354a369a","date":"2013-02-15T15:37:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bruce Mitchener: Minor typo fixes.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@175274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76aa2ef0174a2dec9ae50b271bd962a14d1b7f25","date":"2013-02-19T11:28:45.000Z","author":{"name":"David Chisnall","email":"csdavec@swan.ac.uk"},"message":"Fix a bug in mutex_try_to_lock.  This was previously trying to unlock a mutex that it didn't own, causing an assertion failure in mutex.cpp.  The issue was that the unique_lock went out of scope, releasing the lock on m, then m.unlock() was called on an already-unlocked mutex.  \n\nThis change removes the spurious m.unlock() call.  \n\nIf this test was previously passing for anyone with assertions enabled, then they should investigate bugs in their pthread implementation, as pthread_unlock() should not return 0 if the mutex is currently unlocked.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@175506 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0560f786fe30a30c95010b1430e24f66637a1ca8","date":"2013-02-21T18:16:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Constrain bind operator()() to not exist if the call is not valid.  Fixes http://llvm.org/bugs/show_bug.cgi?id=15295.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@175774 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a0e74fff824876315160bf2da2d2b6ffc3ec52b","date":"2013-02-25T15:50:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Alexey Samsonov: #ifdefs out undefined function in static build of libc++ w/o RTTI.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176026 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fae54b9c14d9ec0709103411f162f8286941a601","date":"2013-02-26T16:27:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Michael van der Westhuizen: correction to the libcxx build instructions when built with libcxxrt on Linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11a31d05839944d7e2b2cbf38b11f44623ad05a2","date":"2013-03-06T17:30:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The bitset(unsigned long long) constructor was broken by the constexpr additions only on 32 bit platforms.  Fixed.  This addresses http://llvm.org/bugs/show_bug.cgi?id=15444.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176559 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3101474720aad336bfb3b80448f2d1d54b9cd9aa","date":"2013-03-06T18:16:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correct silly type-o.  Thanks Richard.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176568 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc7bdae931f9b3c4b67b9d1278ddd387810eecd3","date":"2013-03-06T19:27:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Have basic_istream::read call sgetn intead of sbumpc individual characters.  This addresses http://llvm.org/bugs/show_bug.cgi?id=15427.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83eade6abb414e0e814977921bcb6e46853cae03","date":"2013-03-06T23:30:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"No functionality change at this time.  I've split _LIBCPP_VISIBLE up into two flags: _LIBCPP_TYPE_VIS and _LIBCPP_FUNC_VIS.  This is in preparation for taking advantage of clang's new __type_visibility__ attribute.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"707f3187876b1d26b99417b638640fbc1883cd24","date":"2013-03-07T19:25:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change _LIBCPP_TYPE_VIS to use __type_visibility__(default) instead of __visibility__(default) when available.  This change makes just the type_info visible so that types like vectors and strings can be used as exception objects across dylib boundaries even when hidden visibility is specified globally (at the command line), and yet this allows clients to hide the member functions of things like vector and string (with global visibility commands).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176639 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"23fb97252067f8b5e192bb5cdad4243929e76343","date":"2013-03-07T19:38:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Albert Wong: definition for regex_traits<_CharT>::__regex_word.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176640 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6319f1462dd578c393c96a9d2bf83e8993d9583e","date":"2013-03-08T19:06:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Parsing floating point numbers with very long precision was broken, and this patch fixes it.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15445.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c789025a5a2fed4ff260ac2c95d391e36304cb45","date":"2013-03-11T19:53:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This SO question:  http://stackoverflow.com/questions/15344402/how-can-i-read-a-0xff-in-a-file-with-libc-istream-iterator/15347225#15347225 highlighted the lack of a cast in the implementation of std::cin.  Added.  I unfortunately don't have a test case to add to the suite since this bug only shows itself when using std::cin.  The current testsuite setup does not have a way a good way to test std::cin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@176822 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7cbe502dbf62acc4168b511d51eb181492950ba","date":"2013-03-14T18:37:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Some forward-looking and optimistic documentation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e47bc9bc4f91fd13f33d69a1199a71acc662e854","date":"2013-03-14T19:00:34.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Updated link to Marshall's instructions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177099 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e33c2d1926f49221c9d72a353d797d135a810d77","date":"2013-03-16T00:17:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This should be nothing but a load-time optimization.  I'm trying to reduce load time initializers and this is a big one.  No visible functionality change intended.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177212 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a22d2addb1287a7642bfcb211ae2cb21890d1cbd","date":"2013-03-18T17:04:29.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed raw references to _WIN32; now just check to see if it is defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177291 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dece7fe6706591d80e4694a986446f756611733c","date":"2013-03-18T17:45:34.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed raw references to __APPLE__; now just check to see if it is defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177297 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dab9b2eb32d028d1bcc0e80c13133f6b4659bba4","date":"2013-03-18T18:20:48.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed raw references to _MSC_VER; now just check to see if it is defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177304 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53e27639669f8f05c77ea4ef60063667d31dd674","date":"2013-03-18T19:34:07.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Removed raw references to __sun__, __FreeBSD__, __GLIBC__ and __linux__; now just check to see if they are defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c19fe867432f15fd605a1904dbfcc51a85af35cf","date":"2013-03-18T23:39:36.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fix bug in test; found by AddressSanitizer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"903439f7359b1bfaecb59134bbe6bc869501e537","date":"2013-03-19T21:34:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This is an optimization which produces improved launching time.  There should be no functionality change.  Clients should see no ABI differences.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b74309e3ad06106480d94f93eca0fa491743ae87","date":"2013-03-19T22:16:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Marshall Clow found this memory problem in strstream using -fsanitize=address on the test suite.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bdea27ba8f92f2fdcb8d817952fc29cc0bfbc446","date":"2013-03-20T00:01:48.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fix bug in test; found by AddressSanitizer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177464 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04bd79b23a6ba24271510202edf10bf7753eb378","date":"2013-03-22T02:13:55.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fix undefined behavior in syntax_option_type::operator~ and match_flag_type::operator./a.out  Found by UBSan\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177693 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b145da078bab89c5119490fb37e855a636cc337","date":"2013-03-22T02:14:40.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fix buffer read overflow in money_get::do_get(). Found by UBSan\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177694 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"06d8bf6ce2008526732ae40ad46f7ff031c409e7","date":"2013-03-22T20:05:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Test cleanup with respect to use of deprecated tmpnam function.  Also Windows port for these tests to use _tempnam.  The bulk of this patch was donated anonymously.  I've tested it on OS X and accept responsibility for it.  If I've broken anyone's platform by switching from tmpnam to mktemp for the generation of temporary file names, just let me know.  Should be easy to fix in test/support/platform_support.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177755 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9976b5511a5ff7c67dc7bc024604efa0baf43625","date":"2013-03-23T17:27:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This is a start at making the libc++ test suite friendlier to the -fnoexceptions flag.  Although this is not a complete solution, it does reduce the number of test failures on OS X from 467 to 128 on OS X when -fno-exceptions is enabled, and does not impact the number of failures at all when -fno-exceptions is not enabled.  The bulk of this code was donated anonymously.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae7bf9daac7c7427953ac90484fcc72df5b15d2a","date":"2013-03-23T19:29:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Marshall Clow found some divide-by-zero warnings with UBSan in rand's binomial_distribution test.  This eliminates the divide-by-zeros and describes in comments the numerical difficulties the test is having.  Each of the problematic tests are exploring edge cases of the distribution.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177826 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5f4684e715ca9a76ee6435783d404b0548e3f3f","date":"2013-03-25T19:29:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Debug mode: learning to crawl.  I need to set up some tests that actually test that the debug mode is working, but that won't cause problems when debug mode isn't on.  This is my first prototype of such a test.  It should call std::terminate() because it's comparing iterators from different containers.  And std::terminate() is rigged up to exit normally.  If debug mode fails, and doesn't call terminate, then the program asserts.  The test is a no-op if _LIBCPP_DEBUG2 is not defined or is defined to be 0.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177892 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d01eb54e708ff3dc1c11b1a53123a7fde7caa21","date":"2013-03-25T20:03:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"More vector::iterator debug mode tests.  Run by adding to OPTIONS -D_LIBCPP_DEBUG2=1.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177897 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"295891fdc2fa9d9c7f4c1d164e48342050aef416","date":"2013-03-25T20:31:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Debug mode tests for vector::front and back.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177904 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c1ca2e1e8b9a7b15bc4ea2473f0cde3af65837a3","date":"2013-03-25T20:46:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove some erroneous code I was using to debug debug mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177908 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"782da33d1c5b54d1be8db9b4d90cbeedc8d5d72d","date":"2013-03-25T22:12:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Added debug tests for indexing, pop_back and both forms of erase.  Added an improved error message for erasing a single element with end().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@177929 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d9cdb2dcfd5d8f1f77194975d4b746065ed9aeb8","date":"2013-03-26T13:48:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Need one more swap overload for swapping two lvalue vector<bool>::reference's.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178016 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3fbd1dfb24f8c0e6e24bc429b8dec13b6e97d461","date":"2013-03-26T14:28:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Simply debug mode tests per Dmitri Gribenko's suggestion.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178026 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3a9b81e6762f4caf78d6616a0ea87542f6ef7a1","date":"2013-03-26T15:28:33.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fixed race conditions in thread tests; exposed by UBSan\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1c008267517a8d30b54115c381b10a79e34eade","date":"2013-03-26T15:45:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"More vector debug tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178033 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02d5e18917a9dc1df45d29e172859099cb261ad0","date":"2013-03-26T19:04:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Another vector debug mode test, and a static test on Allocator::value_type.  This partially addresses http://llvm.org/bugs/show_bug.cgi?id=15576.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178064 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32d40f5f4489335d2dc292b43d246bd7d3fe7e3d","date":"2013-03-26T21:40:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Tighten up the iterator requirements for the vector member templates.  This is especially important for the constructors so that is_constructible<vector<T>, I, I> gives the right answer when T can not be constructed from *I.  Test case included for this latter point.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178075 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34d36f39b0688bdd7428c766fc8e1afa45759dac","date":"2013-03-27T04:10:25.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"Revert r178075, \"Tighten up the iterator requirements ...\", it breaks LLVM\nbootstrap with libc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178116 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c0d3edf68cdaa9c5552d7a81e641c76a2ef1fa3","date":"2013-03-28T15:00:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add missing #ifndef _LIBCPP_NO_EXCEPTIONS around throw in include/thread.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178237 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"742fecbd2afe38cb7a95eb697ecb0ce5982562e2","date":"2013-03-28T17:44:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Second try at r178075.  The llvm breakage has been fixed by r178240.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178253 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db4d478ff421cd1b1be254264367ceceebf39481","date":"2013-03-28T18:56:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix a few warnings/errors for compiling with -fno-exceptions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178267 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"302fa82a1cb1c1070a869e7ca6103d737b93a9ed","date":"2013-03-28T20:35:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I believe debug mode for vector<T> (T != bool) is complete.  If anyone sees anything more they would like to see on it, please let me know.  Debug mode is activated by compiling with -D_LIBCPP_DEBUG2=1.  Eventually _LIBCPP_DEBUG2 will be renamed to just _LIBCPP_DEBUG.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178288 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b25c00ef17841f6e01e3d83444b065101cb5300","date":"2013-03-29T17:20:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The 3rd test in shrink_to_fit.pass.cpp can't possibly pass if exceptions are disabled, so #ifdef'ing out the test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178350 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc2f021bdd3fd69ff62bfc6ceb5c5264afd4ee7d","date":"2013-03-29T18:27:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bruce Mitchener, Jr.: Port to emscripten.  Fixes http://llvm.org/bugs/show_bug.cgi?id=15624.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178354 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d00ed5d8749f472e63ca7e5a510da2ee58f9dbd","date":"2013-03-29T21:22:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Test case was forming the wrong limits when size_t != unsigned long.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178370 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a1985ebbc84c8f8536ce9e2003d43c4aa2603a56","date":"2013-04-02T15:46:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reference: http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20130325/077131.html\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178544 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6bdda044cb4fb4135a4dddc6e33e4b7caed86bb","date":"2013-04-02T15:48:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reference: http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20130325/077132.html\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d4c96a6c8924d9843432ccb1716a20b9925626aa","date":"2013-04-02T19:53:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Some debug test cases for list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178565 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11a50ac49798c0c6dec9252b1591230e0e572017","date":"2013-04-02T21:25:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Richard Smith: It was pointed out to me off-list that libc++'s non-compiler-builtin\nimplementation of std::is_polymorphic does this:\n\ntemplate <class _Tp> struct __is_polymorphic1 : public _Tp {};\n\n... and that g++ rejects this if _Tp has an inaccessible virtual destructor\n(because __is_polymorphic1<_Tp> would have a deleted virtual destructor\noverriding _Tp's non-deleted destructor). Clang was failing to reject this;\nI've fixed that in r178563, but that causes libc++'s corresponding test\ncase to fail with both clang and gcc when using the fallback\nimplementation. The fallback code also incorrectly rejects final types.\n\nThe attached patch fixes the fallback implementation of is_polymorphic; we\nnow use dynamic_cast's detection of polymorphic class types rather than\ntrying to determine if adding a virtual function makes the type larger:\n\n  enable_if<sizeof((_Tp*)dynamic_cast<const volatile\nvoid*>(declval<_Tp*>())) != 0, ...>\n\nTwo things of note here:\n* the (_Tp*) cast is necessary to work around bugs in Clang and g++ where\nwe otherwise don't instantiate the dynamic_cast (filed as PR15656)\n* the 'const volatile' is here to treat is_polymorphic<cv T> as true for a\npolymorphic class type T -- my reading of the standard suggests this is\nincorrect, but it matches our builtin __is_polymorphic and gcc\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b777d6a4b27f7054c4964850c9c78eb025832881","date":"2013-04-02T21:33:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The cmake script is failing to copy cxxabi.h to the right place because it was generating to destination path like so /include// and dstdir can legally be blank from my interpretation of the script, and this would then generate a path like libcxx/include// which is illegal.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178579 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf31d3864e94e52790c7d2db1c85a015de4da8fe","date":"2013-04-02T22:14:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Reference: http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20130325/077133.html\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4aa8b06e67e7f2b746732ed5976dcd3e11b7257d","date":"2013-04-03T20:21:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The move / swap members were not correctly taking all of the possible states of the basic_stringbuf into account.  Just rewrote these members.  Test included.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15659.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178690 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5e8961a35bc918af94ad4f22930faa4174c27df","date":"2013-04-03T20:29:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix stupid but harmless type-o.  Fixes http://llvm.org/bugs/show_bug.cgi?id=15657.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178691 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"128f7bf4fadd6231d23e53890e418415414241a5","date":"2013-04-04T15:40:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Somehow search_n never got tested, so of course it had a bug in it.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15667.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178764 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"79a35570a588a2e2a203afe87ca7dc52026ef7db","date":"2013-04-05T00:18:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"More work on debug mode for list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178819 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1e96cb840c4587f51f23cd30ce1e0690846e552","date":"2013-04-05T15:04:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"More list debug mode tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178873 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6dcaf3ee1a1d97ce320d87df842848c5846c2564","date":"2013-04-05T17:58:52.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix bug in __libcpp_db::__iterator_copy.  Add debug test for swaping lists.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@178892 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0795931dee2c4f718e6f6c5476ed7a7e0bd794f9","date":"2013-04-08T18:59:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Change <cwchar> and <cstring> to look out for flags which may or may not be set by the C headers <wchar.h> and <string.h> indicating C support for the C++-altered wcschr, wcspbrk, wcsrchr, wcsstr, wmemchr, strchr, strpbrk, strrchr, memchr, and strstr.  This was already done in <cstring> for other platforms using other flags, so just had to add one more flag to the list there.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179041 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5733b3ad3695aed8f7676165dabe3da7f49d78c","date":"2013-04-12T20:22:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Ruben Van Boxem:  Turn islower_l and isupper_l into functions (instead of macros) on Windows only to quell a warning during libc++ building.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f67100219b086fa6729db9693b6ee9939a73e70","date":"2013-04-13T18:19:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Set failbit when strtold sets errno to ERANGE when parsing floating point values.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"993248935c459c308379e14ccb09fa1c840d4a9c","date":"2013-04-14T00:01:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Accidentally disallowed explicit tuple conversions when all elements of the tuple can be explicitly converted.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179467 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae57a1ab1d4a0df4fb4d677d4a08a9acff3e16f1","date":"2013-04-15T20:40:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Numeric parsing was getting the wrong answer when faced with very long inputs.  This fixes both http://llvm.org/bugs/show_bug.cgi?id=15751 and http://llvm.org/bugs/show_bug.cgi?id=15740\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179556 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4313ec39753e34df422687e071b82c12b79e5eec","date":"2013-04-16T17:27:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"addressof misbehaving for type with an implicit conversion operator to char&.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15754\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179608 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"61fe0ac9b3516fb470e15425fef22d29dbd2585a","date":"2013-04-16T17:34:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Added extra space to end of EXTRA_FLAGS in buildit.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15761\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179609 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2062f377728e6c2a77842ca5b2c6428aab605ebc","date":"2013-04-16T21:42:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"I believe this finishes up debug mode for list.  The testing is a little weak, but I believe all of the functionality is there.  Certainly enough for people to checkout and start beating up on.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4e67cfd422b7e6ca079adecfa13b1055ba15b3f","date":"2013-04-18T15:02:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"After years of telling people: 'If you ever find any of my code that self-move-assigns, send me a bug report.' Somebody finally took me up on it.  vector::erase(begin(), begin()) does a self-move-assign of every element in the vector, leaving all of those elements in an unspecified state.  I checked the other containers for this same bug and did not find it.  Added test case.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@179760 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5544f7e0c7c89c82acf8cf1f9681e737f3955755","date":"2013-04-22T19:37:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Somehow aligned_union got dropped through the cracks.  This adds it.  Did a drive-by fix of alignment_of while I was in the neighborhood.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08dd25303ed29c94787e46f4f766078a36c366ed","date":"2013-04-22T23:55:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Modest performance improvement for std::string's operator==.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180072 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c2ce95063997677fbf4978c99dfa98d2691139d","date":"2013-04-23T14:09:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Zero-initialize all mbstate_t in the codecvt tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c52fb8d7bf3cbe29f25c7da3d9896ff0bb92b2f0","date":"2013-04-23T17:30:35.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"PR12597: Remove \"chown -R root:wheel\" from the makefile.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180122 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9493e27c0f8a3f85a090a77480c682b4a3fd11c9","date":"2013-04-23T18:51:51.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"PR15820: Use tar instead of rsync to install the headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180132 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9e75aef346ef40202ca480004d92bf422e37d07","date":"2013-04-23T19:26:55.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Change makefile comment to refer to libc++ instead of libcpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180135 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5e6aa5f5c7d2bbf7d9a3be8149f0c42a7af7415","date":"2013-04-23T19:53:24.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Avoid bash specific functionality to work with any POSIX shell\nimplementing $(( )).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180139 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05e7d24b3df0ea1486ff27a52e77132e1a683e1d","date":"2013-04-24T19:44:26.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"default_delete needs a static_assert against void types.  I had previously thought that sizeof(void) would take care of this.  I was wrong.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180213 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5f0e6c5c188e35ca71bc176031cb51765d11d79","date":"2013-04-25T16:08:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"İsmail Dönmez:  Change to mktemp template to make it compatible with Linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180267 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df4182153c061fae526996ae4f00bf7b01ce7bef","date":"2013-04-26T09:40:18.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Fix typos.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"006ab1e2138c18d4f4621ccfe0fe991fb68539d0","date":"2013-04-27T19:10:15.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Only use Clang pragma when compiling with clang.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180678 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3b5b6b9f4656d94628ed33e50a5eeee3b7fa1c3","date":"2013-04-27T19:12:36.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Use reinterpret_casts directly in place of C-style casts.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180679 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"912438c272dcf15aef344b5437287bbf90dd99aa","date":"2013-04-27T19:13:31.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Use static_cast.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180680 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9b94f1337af19ab9ac897985d06f71c8ff5731a","date":"2013-04-27T20:51:42.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"GCC doesn't support __has_attribute.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180683 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"155f06018e7ff4dce0db3f8812b958ac1962f0ee","date":"2013-04-29T19:52:08.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Use protected version of the malloc attribute in case source wants to\ndefine malloc as macro.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"867deb8e063eff3b8f5cda51acdb8a5684f7d4d8","date":"2013-04-29T19:55:32.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Add entry for myself.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15467189c3779084a3d997d6b5e0c42594047cd1","date":"2013-04-30T21:44:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This patch introduces an alternative layout for basic_string which when the string is short, the data pointer will be word-aligned.  It can be activated with -D_LIBCPP_ALTERNATE_STRING_LAYOUT.  These two different layouts (the default and _LIBCPP_ALTERNATE_STRING_LAYOUT) are not ABI compatible with each other.  Once one is chosen for a given platform, it is disruptive to change it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180811 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63d8f7e341d98bdd7e8d9b52945db01f4708fa3a","date":"2013-05-02T19:17:48.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Add explicit casts to unsigned char before calling ctype functions.\nFixes the value range on platforms with signed char.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180940 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34cb066fa2c483e557ce18e9b2385b573c509fab","date":"2013-05-02T19:21:36.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Make it possible to provide special (linker) flags for the thread tests.\nUse it to build & link against libpthread on NetBSD for tests iff they\nare testing the thread interface.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e58bc12f2aa9548ec3c5fe657dffa2024b5926c1","date":"2013-05-02T19:34:26.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"The push/pop variant of pragma GCC diagnostic is only supported by Clang\nand GCC 4.6 and newer, so protect accordingly.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74f4da7219100afcff4baab33d12910d29eb127e","date":"2013-05-02T20:18:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Stephan Tolksdorf: fixes the issue in the <atomic> header and adds corresponding tests. I've used macros to fall back to a user-provided default constructor if _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS (though I suspect that there won't be many users defining that macro).\n\nThe tests use placement new to check that atomic values get properly zero-initialized. I had to modify the atomic_is_lock_free test, because default initialization of an object of const type 'const A' (aka 'const atomic<int>') requires a user-provided default constructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@180945 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c238192205e8d0ae6bd3ff8b5176de818ebda7b","date":"2013-05-06T16:58:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Expose accidentally removed __compressed_pair constructor taking piecewise_construct_t.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15918 .\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181217 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd854b2c4e586f0625ba72ac003ed2e468b23685","date":"2013-05-07T17:37:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Mark some tests with XFAIL for Lion and Mountain Lion.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181336 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f1286f574ad2b028aa1b09670aeef437acc9a8f","date":"2013-05-07T20:16:13.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Introduce _LIBCPP_STD_VER.  This can be set by the client (or the clang driver).  Or it will be defaulted.  The default is 11 if -std= c++11 or eariler, else it will default to the current year modulo the century.  We anticipate it defaulting to 14 for C++14 when the time comes.  For now, post-C++11 libcxx implementations should protect themselves with #if _LIBCPP_STD_VER > 11.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ecc9742f277c65ad28be1ff5e9ff68a8a1df94ee","date":"2013-05-07T23:40:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Constrain __invoke functions more accurately.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15861 .\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181377 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7f5c1bcd832b7a309bf19742eb921f34b514658","date":"2013-05-08T21:18:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Put a 1-character unget buffer into cin.  This fixes http://llvm.org/bugs/show_bug.cgi?id=15867\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181470 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5328cd307c81224cd57da1a76c567b3dafcc5cd5","date":"2013-05-09T19:00:18.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Initialize codecvt explicitly with the C locale, which might not be 0.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181534 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b30abdd07a6c6374f4716b7e3a2e343f5db77961","date":"2013-05-09T21:14:23.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Implement n3607: 'equal', 'mismatch', and 'is_permutation'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181548 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be764c946cee6b43b2bcfb4918aea3fa7888deaf","date":"2013-05-09T23:06:35.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Don't try to free the C locale.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181559 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f8f5245417fd9b8558ae59c4287cf82fd9a6d75","date":"2013-05-10T00:16:10.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Fix incorrect type usage; nice catch by Sebastian\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181569 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb3a0acf93b79cb2ce6abbec04b7b7b7f48b7da9","date":"2013-05-10T17:25:57.000Z","author":{"name":"David Dean","email":"david_dean@apple.com"},"message":"XFAIL this test when using the darwin12 system library. Reviewed by Howard\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181610 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3585e82268c92e89a7a387058d52511af74e96b","date":"2013-05-10T17:36:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"İsmail Dönmez: Enable quick_exit on linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e27e9074034eaec00917e69b3754d5b1e592a957","date":"2013-05-13T21:53:44.000Z","author":{"name":"David Blaikie","email":"dblaikie@gmail.com"},"message":"Fixing the MSan/compiler-rt build\n\nPatch by Evgieniy Stepanov, review by İsmail Dönmez.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181740 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6287c65a0316f92f8d784e56ddb623642f1517da","date":"2013-05-15T21:49:27.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove cv qualifiers from member pointers in the __member_pointer_traits test.  This was causing a const-qualified bind result to malfunction.  This was a recent regression due to the new use of __member_pointer_traits in restricting the __invokable and __invoke_of tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@181935 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e98b34a8c03460dacab05068d900dd424e45e53","date":"2013-05-16T17:13:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Glen:  This patch gets the string conversion functions working on Windows.  It also refactors repetitive code in string.cpp do greatly reduce the repetitiveness, increasing maintainability.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@182026 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67444034ed83f5b27d66b082ec88f9d859b85cba","date":"2013-05-17T21:16:18.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Create a weak pthread_create reference on NetBSD to not force a\ndependency on libpthread for code that doesn't use threads itself.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@182161 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a71a9526340325a63cfee83be43be30af25a802c","date":"2013-05-17T21:17:34.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Add NetBSD support.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@182162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f72d5ce168d2f8237ada5196abf70a59a927236","date":"2013-05-21T21:05:12.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix a couple of bugs in linear_congruential_engine::seed.  Regression test added.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@182421 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ddb4e4cbb18d2006b356d37ca722249bbf9a8b86","date":"2013-05-21T21:19:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Neglected to remove a debugging comment from last commit.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@182422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9360e9f9440484d1723cd1c1ef6fc66d2e7d2bed","date":"2013-06-07T01:56:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Minor bug fix for allowing an extension of const-qualified types in containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@183481 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee749a403c77a98fe2182e2696b2478de894f60b","date":"2013-06-07T14:24:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Test case for r183481.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@183522 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70342b99e227912742972b754ad86e75c5d7eefb","date":"2013-06-19T21:29:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer types in custom allocators.  This is for the associative containers only.  This work still needs to be done on the unordered and sequence containers.  Fixes http://llvm.org/bugs/show_bug.cgi?id=15978\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@184358 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a6b7cedcb3359ad7d77e355b02ab982d9d2b25b","date":"2013-06-22T15:21:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer types in custom allocators.  This is for the unordered containers only.  This work still needs to be done on the sequence containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@184635 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcd8db7133c56a5a627f3922ce4a180c12287dd9","date":"2013-06-23T21:17:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer pointers in custom allocators for deque.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@184673 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7a39cf584bd248bc14fe095abc470871bbf3b65","date":"2013-06-24T06:15:57.000Z","author":{"name":"Dmitri Gribenko","email":"gribozavr@gmail.com"},"message":"Fix typo in assertion message.  Reported by Shriramana Sharma.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@184691 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81381a932fbebb384adfe5c0116d45b37479efde","date":"2013-06-24T17:17:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer pointers in custom allocators for forward_list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@184759 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29f7432ff3a5c503a98a66ae46dd571b651c88b5","date":"2013-06-25T16:08:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer pointers in custom allocators for list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@184859 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c39cbe0207908bca2e1da40e16cbc443d2e7438","date":"2013-06-27T19:35:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer pointers in custom allocators for vector.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9dcdcdee2582575dd4a2e5857b9f32735763f9c7","date":"2013-06-28T16:59:19.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement full support for non-pointer pointers in custom allocators for string.  This completes the custom pointer support for the entire library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185167 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9d9fb4a176e704b570d2d1e2e9143a60e3457d5","date":"2013-06-28T18:09:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Dimitry Andric:  Add const to constexpr member functions in order to cope with new C++1y language rules.  This silences -Wconstexpr-not-const warnings.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185181 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"918f2a80ababefb69a9e695767350f3912c7d127","date":"2013-06-28T18:57:30.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bill Fisher:  Fix for failing to throw an exception in regex when parsing an invalid escape sequence.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16023\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e57b7c445b506656bddfb3fcbee51d63b2c7e771","date":"2013-06-28T19:11:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"William Fisher:  A bug in __lookahead::exec causes /(?=^)b/ to match ab. When  makes a recursive call to , it passes true for the value of . This causes a beginning-of-line anchor (^) inside a lookahead assertion to match anywhere in the text.  This fixes http://llvm.org/bugs/show_bug.cgi?id=11118\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185196 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c1ecd97f005317efe271f04c725fdf676653dc93","date":"2013-06-28T20:31:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Provide missing '{' in parsing extended quoted characters.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16135\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185211 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab135d7f4ee45e422d683046c5ab70c5d49e6a9d","date":"2013-06-28T21:40:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Make cout a little more thread-safe.  This fixes http://llvm.org/bugs/show_bug.cgi?id=12158\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185222 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f491e51ebd3ac15bea38b6a826628dd9c4d13e19","date":"2013-06-29T18:38:17.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add operators to make launch a bitmask type.  Searched all of the standard, and libc++ to see if this error occurred elsewhere and didn't see any other place.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16207\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9602d56de133730a3d8bc02bd317396000663f1","date":"2013-06-29T23:45:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Prevent '\\b' from backing up into invalid memory.  Fixes http://llvm.org/bugs/show_bug.cgi?id=16240.  Sorry, I can not think of a good test case for this one, except by running valgrind as reported in the bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"09ca5d49e179f7b078e3456c64c0baf7ef17c68f","date":"2013-06-29T23:53:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Matthew Dempsky: Same as stdexcept.cpp in libc++abi: we've already computed 'len strlen(msg)', so we can use memcpy() instead of strcpy().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"312926eed409beb23ef96bbca9642e27961ce27a","date":"2013-06-30T00:14:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Matthew Dempsky: POSIX defines that the _POSIX_C_SOURCE macros are to be set by user\ncode to specify what version of POSIX the system should provide.  If\nyou want to check what version of POSIX is actually available, you're\nsupposed to test _POSIX_VERSION.\n\nHowever, since sysconf() has been in POSIX since 1995, it's probably\nsafe to assume it's available on any system with a C++11 compiler,\nespecially if _SC_NPROCESSORS_ONLN is defined too.  So no point in a\ncomplicated preprocessor rule if just we unconditionally include\n<unistd.h> (on non-Windows systems).\n\nAlso, I've added a #warning for to help porters detect when a suitable\nimplementation isn't detected at compile-time.\n\nHoward:  Matthew, can you patch CREDITS.TXT?  Thanks.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c05e98660f673191b13ae2fee8f6b823e515d4a2","date":"2013-06-30T19:48:15.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix bind by making _is_valid_bind_return more robust.  It should return false instead of give a compile time error, always.  The problem was down in ____mu_return, the version that handles nested bind objects.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16343\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185289 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"099dec1ba0a48c1b033565be651ca37b24c3ebca","date":"2013-07-01T00:01:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"The bind and function functor constructors and assignment operators were overly general and getting confused with the copy constructor and copy assignment operators.  Constrained them.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16385\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185297 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11b87182b0a59685b82d6b825b81f416728f051f","date":"2013-07-01T00:37:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"In istream::ignore, check the delimeter as an int_type, not as a char_type, so as to correctly handle EOF.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16427\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ec46bc4228ae1c23a34220d8c6885356d18918c","date":"2013-07-01T16:26:55.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Implement n3658 - Compile-time integer sequences\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185343 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd7481e96de307dd0e43c96d5b025b7c779f72d7","date":"2013-07-01T18:16:03.000Z","author":{"name":"Marshall Clow","email":"mclow@qualcomm.com"},"message":"Implement n3656 - make_unique. Thanks to Howard for the review and suggestions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eaffd0a8ff4c08dcc95c1d1ad31ec7901bcd1cdf","date":"2013-07-01T22:59:14.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"XFAIL this test on 10.7 and 10.8\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dbc8cf059e0b7190337d6f7ef922e30fe67a30e2","date":"2013-07-02T17:43:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bill Fisher: This patch fixes a bug where the regex parser doesn't advance the pointer after reading the third character of an octal escape (in awk mode).\n\nThat is, regex{\"\\141\", awk} results in the regular expression /a1/ instead of just /a/.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185449 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"725ae713f2fc5fa41ab8004f4f707117d6f70d51","date":"2013-07-02T17:53:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows support in thread::hardware_concurrency.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6a683bfb5fbf87fc37e155b3146094697a87b86f","date":"2013-07-02T18:01:41.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Constrain launch ~ operator to defined bits.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"839ae58c2eb9476f6280ad9006be0e6ac8f77e8d","date":"2013-07-02T18:42:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Matthew Dempsky:  In libc++'s <locale>, there's already dependence on an snprintf_l\nimplementation and all of the char buffers readily have their\nallocated size available, so we can easily use snprintf_l instead of\nsprintf_l.\n\nThis avoids OpenBSD's linker warnings against using sprintf and\nvsprintf.\nHoward:  Please consider a patch for CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185457 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4573565de0d157f50bbad4a6bfcab2f69f5c7a6e","date":"2013-07-02T19:00:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Updated CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185462 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a06b9d017adae19f9289b96303b9985d60403f3","date":"2013-07-02T19:46:18.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Don't free the C locale on NetBSD.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185467 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fb5511027bf55412aed2bdd944914729381264ef","date":"2013-07-02T20:06:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Adorn make_unique with visibility and inline attributes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185468 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24ae8f8e5b96bd7825ccdee40de2b45c8db66341","date":"2013-07-03T17:39:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Matthew Dempsky: Attached patch replaces the type punning with memcpy(), which on\nx86/x86-64 clang optimizes to direct word accesses anyway.  This fixes an unaligned word access in murmurhash/cityhash.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185558 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42e55e932e173eb224997fe11f0d15a1d74b29dc","date":"2013-07-03T19:20:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Commit patch for integer sequences. Suggested by Richard, reworked by Howard, and annotated by me\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185569 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"933afa9761c1c1f916161278a99284d50a594939","date":"2013-07-04T00:10:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch for N3655 (Transformation type traits) with Howard's additions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185597 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4dca0440f58228d6c7ef21ebea420aaa934c782b","date":"2013-07-04T15:11:10.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Fix bashism.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185646 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e008d4eecc8a715139fc2bec0ff2921875e164e1","date":"2013-07-04T19:46:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Simplify comparators of [unordered_][multi]map.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16538\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185665 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b66e1c3f961179f8f5466061a54d6530d1749550","date":"2013-07-04T20:59:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Removed extension in [unordered_][multi]map which allowed one to emplace using just an argument for the key, as opposed to using piecewise_construct.  However a bug report exposed that this created an unfortunate ambiguity.  People who are currently using the extension will be notified the next time they compile, and will have to change to using piecewise_construct.  There are no ABI issues with the removal of this extension.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16542\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185666 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b128e06edf05507ae10f4892d2445d8376db235","date":"2013-07-05T18:06:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove implicit conversion from __value_type to value_type in [unordered_][multi]map.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16549\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d712a59c7fdebbbdc32598e3b0e6894600b6379a","date":"2013-07-06T14:41:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Silence -Wint-to-void-pointer-cast warning in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185756 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0769e6a785f95fe3ec76c8667e142bd6282d0f7e","date":"2013-07-08T19:03:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Windows port for __codecvt_utf8<wchar_t>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185849 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d29bb4b7c4b97e7255856666f70f10dbeeb26beb","date":"2013-07-08T20:05:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement n3545 for c++14\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185856 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2735d1df071b4854e577c227fe9d72b5de2b94e","date":"2013-07-08T20:54:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement n3668 - std::exchange\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185863 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"171771a9f5fd9e5dbbc6d6a2d9dfb0d8532b5155","date":"2013-07-08T21:06:38.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"War on tabs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185865 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7670f7d1ed9f2e6c2012c62bea38acb85f6adc40","date":"2013-07-09T17:29:09.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bill Fisher: This patch fixes a bug where regex_iterator doesn't indicate when it's restarting in the middle of a string. This bug causes /^a/ to match in the middle of the string \"aaaaaaa\", during iteration.\n\nMy patch uses  to communicate when  is false.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185950 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"809e93f7f23cd2d986a5b5cc5d6438bb151f4d3a","date":"2013-07-09T20:34:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"move __save_flags from <random> to <ios> in preparation for reuse; no functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@185968 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37c17ed07dcecce46a7aceaa6991d85c8e72e3ec","date":"2013-07-10T18:01:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Improved tests (and fixed a bug in the tests); thanks to Richard Smith for the suggestion\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186022 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e840208989a8246e8b8dc45e2d9188afb334e02d","date":"2013-07-11T15:32:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bill Fisher: This patch fixes a less likely case where '\\b' can back up into invalid memory, when driven by a regex_iterator (for case 1, see r185273 or http://llvm.org/bugs/show_bug.cgi?id=16240)\n\nThe attached test program also supplies a test for the case 1 fix in r185273.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186089 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef7a7b730c0dbfc3bf31d6246780e0cd7e07774f","date":"2013-07-11T23:51:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Port make_[un]signed tests to platforms where sizeof(wchar_t) == 2.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186136 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e8029e54f1c7cb1f758ef19edb7745fa382fe96c","date":"2013-07-13T02:54:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement n3584 - Addressing Tuples by Type\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186237 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac93d0ebf2b1b91f6759df2e09218ed44f7e5268","date":"2013-07-15T14:57:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add macro _LIBCPP_CONSTEXPR_AFTER_CXX11 for functions that have been marked constexpr post C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f96a4df58d4f155725501a0e212157da9df2695","date":"2013-07-15T18:09:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A few fixes to tests for Windows port.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e1d05121d63b0156cef8e85f51ff448bc66a7db","date":"2013-07-15T18:21:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bill Fisher: This patch fixes an ill-formed comparison when parsing control escapes, e.g. \"\\cA\\ca\". The code will now throw an error_escape exception for invalid control sequences like \"\\c:\" or \"\\c\".\n\nI've added the test cases to bad_escape.pass.cpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186335 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01a0e90783b3ead5eb0854b71017fd2470e65188","date":"2013-07-15T20:46:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make std::forward and std::move (and std::move_if_noexcept) constexpr in C++14\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186344 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"206f6cdc3328959aed4ece29ad65d8320da246f2","date":"2013-07-16T17:45:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Bug 16599 part 2: Make std::pair's constructors and comparison operators (and make_pair) constexpr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186430 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7777e8554dd5a5d5364751b60957efc4ae9ba9a","date":"2013-07-16T23:50:06.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add pointer format test for Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186472 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fc4f5a2510e709331c6fcc3ba401a36f98128fc","date":"2013-07-17T18:25:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make std::get constexpr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186525 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da0a0e8a1be285d18870955cffc1b51982675dd8","date":"2013-07-22T16:02:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make tuple's constructor and std::get<>(tuple) constexpr. Final stage of fixing bug #16599. Thanks to Howard for the review and updates.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186834 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8e0d9086e4c4419f8ad07100c39869b366d3c5d","date":"2013-07-22T21:08:00.000Z","author":{"name":"Anders Carlsson","email":"andersca@mac.com"},"message":"Fix a bug in std::fill_n where memset would end up being called in cases when it shouldn’t.\n\nReviewed by Howard.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186875 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01fbfc2fa6e19c13dadde1ecd9b81c8543df229a","date":"2013-07-23T01:24:30.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Add some missing cv-qualifiers.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186909 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed14a76beba8f2a0e30f5c66d327d60f87a75921","date":"2013-07-23T16:05:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add some friendly messages to libcxx calls to abort().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186951 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd59accbf56cee1fb108f7bb2e8f3823f785be1f","date":"2013-07-23T16:18:04.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Bill Fisher: This patch fixes a bug where std::regex in ECMAScript mode was ignoring capture groups inside lookahead assertions. \n\nFor example, matching /(?=(a))(a)/ to \"a\" should yield two captures: \\1 = \"a\", \\2 = \"a\"\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186954 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"152343260ff7f050efc9e76140524320c7c5e2b8","date":"2013-07-23T17:05:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement string suffixes from N3642\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186956 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"39213641f4dbaa2f412bd6cceb57f81edcae95f9","date":"2013-07-23T22:01:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Debug mode for unordered_set.  I believe this to be fairly complete for\nunordered_set, however it is not complete yet for unordered_multiset,\nunordered_map or unordered_multimap.  There has been a lot of work done\nfor these other three containers, however that work was done just to\nkeep all of the tests passing.\n\nYou can try this out with -D_LIBCPP_DEBUG2.  You will have to link to a\nlibc++.dylib that has been compiled with src/debug.cpp.  So far, vector\n(but not vector<bool>), list, and unordered_set are treated.  I hope to\nget the other three unordered containers up fairly quickly now that\nunordered_set is done.\n\nThe flag _LIBCPP_DEBUG2 will eventually be changed to _LIBCPP_DEBUG, but\nnot today.  This is my second effort at getting debug mode going for\nlibc++, and I'm not quite yet ready to throw all of the work under the\nfirst attempt away.\n\nThe basic design is that all of the debug information is kept in a\ncentral database, instead of in the containers.  This has been done as\nan attempt to have debug mode and non-debug mode be ABI compatible with\neach other.  There are some circumstances where if you construct a\ncontainer in an environment without debug mode and pass it into debug\nmode, the checking will get confused and let you know with a readable\nerror message.  Passing containers the other way: from debug mode out to\na non-debugging mode container should be 100% safe (at least that is the\ngoal).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@186991 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f182038521c64fa2dfb4c02a620f687c0c37cca0","date":"2013-07-24T21:18:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"literal suffixes for std::chrono\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187078 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b87922c2c5d55dc021733d39a99e4297cb60cc31","date":"2013-07-28T18:20:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Glen: Minor tweaks to locale.cpp to help it compile with exceptions turned off.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187332 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff46409221ea91df3c5413ba06eed2f6ba963444","date":"2013-07-29T14:21:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement N3421; comparison predicates<void>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5bfe9030f646abbcb495fb5bbe46cf5b95c4557","date":"2013-07-29T14:43:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add operator new[] to test.  Partial fix for valgrind warning in http://llvm.org/bugs/show_bug.cgi?id=16703.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187358 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0bb0a7c9ea7dc2852c9bfb38584f4673ada25e2a","date":"2013-07-29T19:05:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Debug mode for unordered_multiset.  The exercise spotted a few places I had missed on unordered_set, so I picked those up as well.\n\nThere are actually two debug modes:\n\n   1.  -D_LIBCPP_DEBUG2 or -D_LIBCPP_DEBUG2=1\n       This is a relatively expensive debug mode, but very thorough.  This is normally what you want to debug with, but may turn O(1) operations into O(N) operations.\n\n   2.  -D_LIBCPP_DEBUG2=0\n       This is \"debug lite.\"  Only preconditions that can be checked with O(1) expense are checked.  For example range checking on an indexing operation.  But not iterator validity.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187369 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f890d9bfaadc13df40bb74e95cebd53ec826f932","date":"2013-07-30T21:04:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Debug mode for unordered_multimap.  Some mods were done for unordered_map as well to keep all the tests passing.  However unordered_map is at the very least still missing tests, if not functionality (if it isn't tested, it probably isn't working).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187446 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"832b304076afcd832a5ffe95281b46a7abdaf869","date":"2013-07-31T19:32:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement n3469 - constexpr for chrono\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187517 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0777473911af2d77161429a72c7b6f97e42ae9e6","date":"2013-07-31T19:39:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Backwards!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187518 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a61e6f87056106ff2393ff7f3b03422e05fdd3fa","date":"2013-07-31T21:02:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement constexpr (n3302) and fix operator *= and /=\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187529 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb34122153cc64c5727d62726b475ba1a6817452","date":"2013-08-01T00:41:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Constrain fill_n -> memset operations to include implicit convertibility to unsigned char.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16764.  Also a drive-by fix on a chrono test suite bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187552 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56dcf0b8090bd82f3c7f94d14ea572384706f831","date":"2013-08-01T17:29:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Taking another swing at correctly optimizing fill_n.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187587 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9df0a5c6c864f1ea86486881a3ee559c56105e7","date":"2013-08-01T18:17:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Nico Rieck:  Currently _MSC_VER and _WIN32 are used to guard code which is\nMSVC-specific, MSVCRT-specific, or Windows-specific. Because Clang can\nalso define _MSC_VER, and MSVCRT is not necessarily the only C runtime,\nthese macros should not be used interchangeably.\n\nThis patch divides all Windows-related bits into the aforementioned\ncategories. Two new macros are introduced:\n\n- _LIBCPP_MSVC: Defined when compiling with MSVC. Detected using\n  _MSC_VER, excluding Clang.\n- _LIBCPP_MSVCRT: Defined when using the Microsoft CRT. This is the default\n   when _WIN32 is defined.\n\nThis leaves _WIN32 for code using the Windows API.\n\nThis also corrects the spelling of _LIBCP_HAS_IS_BASE_OF to _LIBCPP_HAS_IS_BASE_OF.\n\nNico, please prepare a patch for CREDITS.TXT, thanks.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b00e6c96091c828b40ac410b6f123c7429a653d","date":"2013-08-02T00:26:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Ok, 3 major changes for debug mode in one commit:\n\n1.  I had been detecting and trapping iterator == and \\!= among iterators\n    in different containers as an error.  But the trapping itself is actually\n    an error.\n    \n    Consider:\n    \n    #include <iostream>\n    #include <vector>\n    #include <algorithm>\n\n    template <class C>\n    void\n    display(const C& c)\n    {\n        std::cout << \"{\";\n        bool first = true;\n        for (const auto& x : c)\n        {\n            if (\\!first)\n                std::cout << \", \";\n            first = false;\n            std::cout << x;\n        }\n        std::cout << \"}\\n\";\n    }\n\n    int\n    main()\n    {\n        typedef std::vector<int> V;\n        V v1 = {1, 3, 5};\n        V v2 = {2, 4, 6};\n        display(v1);\n        display(v2);\n        V::iterator i = std::find(v1.begin(), v1.end(), 1);\n        V::iterator j = std::find(v2.begin(), v2.end(), 2);\n        if (*i == *j)\n            i = j;    // perfectly legal\n        // ...\n        if (i \\!= j)   // the only way to check\n            v2.push_back(*i);\n        display(v1);\n        display(v2);\n    }\n\n    It is legal to assign an iterator from one container to another of the\n    same type.  This is required to work.  One might want to test whether or\n    not such an assignment had been made.  The way one performs such a check\n    is using the iterator's ==, \\!= operator.  This is a logical and necessary\n    function and does not constitute an error.\n\n2.  I had a header circular dependence bug when _LIBCPP_DEBUG2 is defined.\n    This caused a problem in several of the libc++ tests.\n    Fixed.\n\n3.  There is a serious problem when _LIBCPP_DEBUG2=1 at the moment in that\n    std::basic_string is inoperable.  std::basic_string uses __wrap_iterator\n    to implement its iterators.  __wrap_iterator has been rigged up in debug\n    mode to support vector.  But string hasn't been rigged up yet.  This means\n    that one gets false positives when using std::string in debug mode.  I've\n    upped std::string's priority in www/debug_mode.html.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187636 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"824c19963e0263366047787b024a992afc2b1c54","date":"2013-08-02T17:50:49.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"debug mode for unordered_map.  Also picked up a missing check and test in unordered_multimap.  This wraps up debug mode for the unordered containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187659 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65d2e6a39202efb1db3826224d7050393f79acf0","date":"2013-08-05T21:23:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement NULL iterators for <list> re: N3644\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187740 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a11f9458301329528fb69ce84c3b266f24e4185","date":"2013-08-06T16:14:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement NULL iterators for <forward_list> and <deque> re: N3644\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9c29e160c4919048ebb60fe548fbd3ce63a8a8d","date":"2013-08-06T17:17:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement tests for NULL iterators for <array> re: N3644\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187809 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c29e1b949c905c0145a7d29d80f85e91a787cb53","date":"2013-08-07T19:35:46.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Rename time.duration.literals step 1\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187903 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32c0969361610eaf8d044ef2ac91146ee2db1196","date":"2013-08-07T19:36:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Rename time.duration.literals step 2\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187904 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f68b46f0c90f3205749eeaae8ebb2dd9ec3138f9","date":"2013-08-07T19:39:11.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Rename time.duration.literals step 3\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187905 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab61b2c9f1058302d13e59cadf360a5afce5eaa9","date":"2013-08-07T19:39:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"War on tabs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187906 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"36ba399a3342eec3d5f2167dc71c073c6aef5a24","date":"2013-08-07T20:42:16.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Correct logic bug in find optimization for vector<bool>.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16816\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187908 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f164c9d75c683e8714157dfb7a101d1104f6268","date":"2013-08-07T20:48:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"N3644 support for <string> and <vector>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187909 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"52ad482edc98820fbbc4d5822a033b8b77a13df0","date":"2013-08-07T20:53:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"N3644 support for vector<bool>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187910 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b92ee614f215def66a60fe49bcec1a8325cc1c16","date":"2013-08-07T20:53:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"N3644 support for vector<bool>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187911 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"193ef03eb5271e64afa5702a2eabb216c6926b5c","date":"2013-08-07T21:30:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"N3644 support for <unordered_set> and <unordered_map>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187915 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8bfe7ba56998a50209e6f5685a4ae15b80cdba0","date":"2013-08-07T23:02:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Zhihao Yuan: Replace operator& with addressof in reference_wrapper constructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187927 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70730d8f1c7578bb8df7eae33b9552864e2b6390","date":"2013-08-07T23:29:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Update CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187936 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a709c823f75046fa9c0c03e6177c7b2fe7a30915","date":"2013-08-08T03:06:24.000Z","author":{"name":"Arnold Schwaighofer","email":"aschwaighofer@apple.com"},"message":"Revert r187927.\n\nZhihao Yuan: Replace operator& with addressof in reference_wrapper constructor.\n\nIt breaks a clang bootstrap.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187959 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4e87abbb90c54b1a1ce5a2f28dac19793c605a8","date":"2013-08-08T18:38:55.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"My previous reorganization of addressof broke -std=c++03.  Thanks much to Arnold Schwaighofer for catching this.  This patch also catches a few more missing addressof in <future>, thanks go to Zhihao Yuan for catching these.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@187997 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"051c848e8811c753df7c38c738172ba8f5672b0a","date":"2013-08-08T21:52:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"N3644 tests for map/multimap/set/multiset. Drive-by NOEXCEPT for __tree_const_iterator constructor. Fix comment typos in other tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188019 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd7b48a628f886a74965d7f8480f213446bfe9a6","date":"2013-08-09T14:44:11.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Update to use lit_config and lit package, as appropriate.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188073 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ea5d31f6d090becc33c236d91b6dd48a5d66e34","date":"2013-08-09T16:25:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Partial implementation of N3665.  This paper was not voted into the C++1y draft. However I was looking at it and with some experimentation realized that I could partially implement it, and at the same time offer a performance optimization to cout.  I simply added an xsputn override to the cout filebuf.  The override does nothing special at all if there is a non-trivial codecvt installed.  However if the codecvt returns true for always_noconv(), then this function can dump an entire string to fwrite, instead of doing it a character at a time under overflow().  This just makes sense.  I stopped short of a full implementation of N3665 because in order to do so, xsputn would have to allocate a buffer when always_noconv() returned false, and I don't want to go to that expense.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188077 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"80e19ac90f90c5f2aef3d8a6a74b3ffd342ecd0e","date":"2013-08-09T16:53:45.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Add a check for arrays of unknown bounds to is_destructible.  This fixes http://llvm.org/bugs/show_bug.cgi?id=16839\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188080 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f678bd69ef6428e6c75ae1b43fcf1543df63cda","date":"2013-08-12T18:38:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Nico Rieck:  this patch series fixes visibility issues on Windows as explained in <http://lists.cs.uiuc.edu/pipermail/cfe-dev/2013-August/031214.html>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a0a98166c0ca6117c74592eaeb12833c9913b49","date":"2013-08-13T01:11:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"First half of support for N3657; heterogenous lookups for set/multiset\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188241 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a4e3742800a581026478304aade40566031d38d","date":"2013-08-13T01:12:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More support for N3657; tests for is_transparent\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188242 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d4807742fbc1ee738ac5edc7fec98aef087949d","date":"2013-08-13T14:58:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Create a C++14 status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"437cdcf8133bc69af86cf66282811af9e20ccd00","date":"2013-08-13T14:59:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix case mismatch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"deb471c3c6948b590e000f9079accadba698b5b2","date":"2013-08-13T15:07:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"escape some template specs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188276 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b229e1ad164e7221820f96a0a0d29e29b1142a7","date":"2013-08-13T15:13:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix template formatting. No, really\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188277 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8634fc5494641850c89eab7a1f2357a55d694c0c","date":"2013-08-13T15:52:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added more tests for numeric conversion error handing; Refs LWG issue 2009\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188282 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83e40c4a801b8c1d7da52b760429797cc032e89b","date":"2013-08-13T16:01:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated issues 2009 and 2074\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188283 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0931015f0165c713405eda2c5583d57968e8a76f","date":"2013-08-13T16:07:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed 'Ready' issues from Bristol\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188284 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ef840818d045ec354077cd12db9d7d4283338fa","date":"2013-08-13T16:23:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated Issue 2187\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"23d1ccc3dc2841c75d0079deffd744cf7fc632e1","date":"2013-08-13T17:02:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated issues 2039, 2044, 2197, 2225, and 2231\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188294 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5cfc6ab2b82018224997ddb6220ba0cd937e35f2","date":"2013-08-13T22:18:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Second half (map/multimap) of N3657\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188320 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5da3087628ff8bc2412941f62dc9ec5609805cc5","date":"2013-08-13T22:20:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update for N3657 and issue 2010\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188321 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf6eda0b1e50f1194ed07df89840e4e9c5f05fdd","date":"2013-08-13T22:22:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Eradicate tabs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188322 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"198a2a59ee8e99365c8d4ef6d5346e6743f58cb1","date":"2013-08-13T23:54:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG Issue #2187 (emplace_back and emplace for vector<bool>)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2df3700879cb25c67788f60530a2de07f9dc0e2a","date":"2013-08-14T15:15:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a deleted assignment operator for basic_ostream; LWG Issue #2067\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188375 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68b40252922b9fde9a877e460e5a98c2c16389e6","date":"2013-08-14T15:28:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG Issue #2110 and #2113 as completed - they were already done\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188378 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b86fc17a07c09219eb104d55b00a1a5c2e98c75","date":"2013-08-14T16:12:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added CWG and SG1 papers to libc++ status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e75599557a9dfa0bac9ba016ac286479ec036577","date":"2013-08-14T16:30:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"remove CWG papers from list; add link to clang status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"811e7130db8918f2ba5b5a6745a7ec038c69639c","date":"2013-08-14T17:26:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Added some missing issues to the c++1y status page, and put in hyperlinks for the papers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188387 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e005bf6b2649da693d6c3109b5947890a0ffec3","date":"2013-08-14T17:53:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix signed/unsigned warnings when building libc++ in C++14 mode\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188395 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f76450ee9f14ed646a38f43a09dc49dde413281","date":"2013-08-14T18:00:20.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Xing Xue:  port to IBM XLC++/AIX.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188396 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de8fc6b2b146a49b78ec6949c2584fc7de274cfc","date":"2013-08-14T21:28:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Relax complete-type check for functions and function pointers to allow void return type.  This bug was exposed by Eli Friedman's commit to clang r188324.  Anywhere this version of clang ships, this libc++ fix must follow.  However this fix is compatible with previous clangs, and so this libc++ doesn't need to wait for this clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c07b14797b15a7ae30c4723a860ac9bda4a7fcd","date":"2013-08-19T21:42:07.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: minor fix to silence warning in cmake version 2.8.11.20130809-gba97e.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188712 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"78afc05b456c9c0c01ff4f7777c61624d207ca58","date":"2013-08-20T14:21:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status of issues #1214, 2207 and 2209. They were already implemented, so no functionality change was needed.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188803 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd17d90cbb97b19095e28868d25cd1f30ad6a411","date":"2013-08-20T16:18:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status of issues #2028, 2047, and 2053.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188810 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"802daf6e161559c0aeb9c64cbe3bddf9b6b749d3","date":"2013-08-20T16:24:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status and description of issues 2064, 2069 and 2096.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188811 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a34052dacfc7ec689016452bc4b0139a22dbc39","date":"2013-08-20T16:59:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status of issues #2093, 2144, and 2185\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188813 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c316a6d0460054d427aca0344ca5ce0ce3ca182","date":"2013-08-21T02:57:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG 2145 - mark constructor for std::error_category as inline and constexpr. Leave the (existing, out-of-line, non-constexpr) in the dylib for compatibility with existing programs)\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188858 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"585b48ddf68c7212851ec929071e503d6754500d","date":"2013-08-21T23:06:32.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Update to use lit's now-integrated XFAIL handling.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188960 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7cddf651933c246f4b2c4b3de4a4751a9a050db","date":"2013-08-22T00:04:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"XFAIL 3 tests on darwin 11-12.  The tests have recently been modified, are correct, and pass with an updated libc++.dylib\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@188964 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a1df3ca0cbb3d30125c0e011219923c8dc15e1d","date":"2013-08-22T17:41:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"David Blaikie suggested this test for detecting constexpr on the error_category default constructor.  Additionally I decided to make this constructor trivial as well, as I could not come up with a rationale for not doing so.  Fully tested with both current Apple clang and tip-of-trunk clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189034 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c44f51de7392597b673b18f1b373810414816fd","date":"2013-08-22T18:02:34.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Zhihao Yuan noted that a move assignment operation was missing from std::adjacent_difference.  Fixed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a894d93de8029643a17fd1c9008bc053a51a759","date":"2013-08-22T18:29:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Zhihao Yuan noted that there were a few unneeded  statements.  Eliminated the unnecessary ones, and commented the ones that are there for non-obvious reasons such as to help things limp along in C++03 language mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189039 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"641d3d8b4c05fd2cff6ea348729d670f59a114a2","date":"2013-08-22T18:47:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"XFAIL a few tests on darwin12\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189043 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5b7519eb15b710ae1b638f1c70639e1f04661451","date":"2013-08-22T18:53:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues #2083, 2099 and 2105 as complete. No functionality change.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189044 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e31c432a33c0181dc52aa9992558243982b9d0ce","date":"2013-08-22T19:39:03.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Glen: replace obsolete _LIBCPP_CANTTHROW with _NOEXCEPT.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189046 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"499cea12bb2b1c440f28274227d9fd98cd1c609e","date":"2013-08-23T17:37:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Debug mode for string.  This commit also marks the first time libc++ debug-mode has found a bug (found one in regex).  Had to play with extern templates a bit to get this to work since string is heavily used within libc++.dylib.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189114 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d5f9f97867938df99f5a7b7dfa58018173cd595","date":"2013-08-23T19:03:36.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove _LIBCPP_DEBUG.  This was my first attempt at debug mode for libc++, and is now obsoleted by _LIBCPP_DEBUG2 (which isn't finished).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189135 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e57142c5902c3f73a6fdcb8cab55e88ffb43a56","date":"2013-08-23T20:10:18.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Rename _LIBCPP_DEBUG2 to _LIBCPP_DEBUG.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189140 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc3f80badff6057dc662d1f426b7a78cdeb7bf48","date":"2013-08-24T21:31:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Improve support for compilers not supporting defaulted functions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189184 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bce2a4752a8f726c92d0c71b4a8e467e7a37b00c","date":"2013-08-26T17:31:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues 2011, 2015, 2033, 2065, 2071, 2102, 2235 as complete b/c libc++ already fixed them.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189232 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1c5f9ec1bc994b04602c7aabb6b8f9d738201fe","date":"2013-08-26T20:11:32.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply constexpr to initializer_list for c++1y.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ec0ff81cecfbc317b2a53894f8bf2da6eb0e8c7","date":"2013-08-26T20:18:01.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Improvements to Windows support.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af74651f610ecdf31e9c0dc28b4bd56fc58c0da2","date":"2013-08-27T13:03:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG issue 2061\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e42f184a765851c890440476a65cae94631d378b","date":"2013-08-27T14:22:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update synopsis in <locale> to match LWG Issue 2229. No code change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f36c68cb09e2c0ae11ea24b9f50a8b717441fcc","date":"2013-08-27T15:47:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues 2190, 2200, and 2211 as done. No changes needed to libc++.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83179a788ff3e3ca95d0f30c94a9d705b12c4e06","date":"2013-08-27T20:18:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG issues 2174/5/6 - mark wstring_convert::converted as noexcept, and make (some of) the constructors for wstring_convert and wbuffer_convert as explicit. Add configuration macro _LIBCPP_EXPLICIT_AFTER_CXX11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189398 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08b4f3f99b3414503a127e34db4ab1a3abb966f3","date":"2013-08-27T20:22:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2162: mark allocator_traits::maxsize as noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189399 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a78b369b66f89f196313f7e30e25229becb4d00a","date":"2013-08-27T20:25:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Marked #2163 as complete in previous commit instead of #2162. Corrected.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189401 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c2e46bd56ffd257e584d6e585c44a78fa0b60e6","date":"2013-08-29T15:35:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2147, 2149, 2163, 2172, 2098 and 2177 as complete. No code changes to libc++\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189586 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a96d22b85ddec58b7edfc1b88bfb6c2601b9a629","date":"2013-08-29T18:55:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues 2109, 222, 2058, 2091 and 2092 as complete. No changes to libc++ code.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24bf4b859738490441eea1a3c41421269e16dc12","date":"2013-08-29T19:03:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Typo: I wrote \"2058\" into the status column for issue 2058 instead of \"Complete\"\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189602 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04a2c71d674a261e65d5afc603b7a3efa77e88ef","date":"2013-08-29T20:56:53.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Turn off extern templates for most uses.  It is causing more problems than it is worth.  The extern templates will still be built into the dylib, mainly for ABI stability purposes.  And the client can still turn these back on with a #define if desire.  This fixes http://llvm.org/bugs/show_bug.cgi?id=17027.  However there's no associated test for the test suite because http://llvm.org/bugs/show_bug.cgi?id=17027 needs mismatched dylib and headers to fire.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189610 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5143722d1440fccadbfa0848152bd2e9d76e0fcb","date":"2013-08-29T23:37:50.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Xing Xue: Some minor changes for IBM XLC++/AIX.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"161a9bf447aca05ea60b9f35c5e2be9bf01c7589","date":"2013-08-29T23:50:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Glen:  Remove unneeded _LIBCPP_ALWAYS_INLINE.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"09da3c053c74abc41bdaaaa20213d6269a68f44d","date":"2013-08-30T01:17:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2128: Implement global cbegin/rbegin/cend/rbegin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189634 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb0e6b65a842b75ecff6734a6250e73483637705","date":"2013-08-30T14:42:39.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Xing Xue: Fix type-o.  Thanks to C. Bergström for spotting it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189674 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1794072881115c9c4e0356c34a1f1af176cd4ed","date":"2013-08-30T19:12:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"is_destructible for function types was mistakenly returning true instead of false.  This is true in both C++11 and C++1y, but has been clarified by the post C++11 LWG issue 2049.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189687 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e9d0768796e18ef7abb21b195c2af1152b82c58","date":"2013-08-30T19:52:12.000Z","author":{"name":"Daniel Dunbar","email":"daniel@zuster.org"},"message":"[tests] Change with_system_lib feature to match what XFAIL lines expect.\n\n - The lit builtin XFAIL handling is more restrictive than what we were\n   previously using, and for now I'd rather keep the lit one restrictive.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189692 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"713f4db2e5b37ef84c5506fa1b65f3b76798d594","date":"2013-08-31T16:51:56.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"SFINAE out duration converting constructor if the constructor would otherwise cause a ratio compile-time overflow.  This fixes LWG 2094.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189722 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8ecb95fdec497a8440ac19c9e961b8d87cc2d668","date":"2013-08-31T17:03:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Forgot to svn add the test for r189722.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189723 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a1fc89cf904e8a8f02bf5409c36f82593b21070","date":"2013-09-02T07:28:03.000Z","author":{"name":"Michael Gottesman","email":"mgottesman@apple.com"},"message":"[cmake] Make libcxx standalone compile on Mac OS X.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189738 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c64c9801404f3d8239f820960cab119d1f645c8d","date":"2013-09-02T07:28:05.000Z","author":{"name":"Michael Gottesman","email":"mgottesman@apple.com"},"message":"[cmake] Provide an option to not install the support headers so that the cmake build can match the make build if requested.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189739 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01afa5c6e407e985d9643707d7b7ab1384bd9317","date":"2013-09-02T20:30:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Implement N3672, optional<T>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05fe12bc443092747eff13ddfdbddea1cfd6416d","date":"2013-09-03T14:14:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Eradicate tabs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189808 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85bbdcdad424bb73c0e980906c30c883dd3516ab","date":"2013-09-03T14:16:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a typo in the status for <optional>\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189809 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b5f3adcef171c28e832363139aab86f08e80b36","date":"2013-09-03T14:37:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated the synopsis for weak_ptr<T>::owner_before to match the code. No code changes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189812 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e613ca1b359b4f5c15191650bf3b772a79aacc8","date":"2013-09-03T17:55:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2148: Hashing Enums\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189831 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a258956b0bb57164efd7f91f5e198d301e8c0eb","date":"2013-09-04T00:18:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status of issues 2045, 2050, 2080, 2081, 2083, 2130, 2137 and 2177. \n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189894 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"656ed3ca8dcfbe77255e6ce9f068196cbd47cc98","date":"2013-09-04T01:06:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status for LSG issues 2122, 2169, 2177, 2140 and 2086.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189900 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2a137d3607ddd533087564f37d9a9cc215f8139","date":"2013-09-04T15:21:08.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Evgeniy Stepanov: Add noexcept to ~bad_optional_access() to silence warning during build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@189949 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"058655b28adc7ce3734a5f1669fb34d4ee969bde","date":"2013-09-04T23:48:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2103, 2005, 2196 and 2203 as complete. No code changes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62f34be0baf276c2b310db8bda0d358841ebab9a","date":"2013-09-05T04:48:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"N3545: Quoted strings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190032 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab04aadaf4e8ef81a2ebea176689c40333cb015e","date":"2013-09-07T16:16:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2210 (Part #1): deque\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190251 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"955f2c88a12e91241ccf5393426fc01e2f7e2708","date":"2013-09-08T19:11:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2210 (Part #2 & #3): list and forward_list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190279 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac04e1f5bf6cd2da9300300ca9352bb591a0731b","date":"2013-09-08T19:28:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix minor type-o in tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6398343bfc9165bb2d8d144f72fd4cb3e69e2624","date":"2013-09-08T21:13:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove a tab that snuck in\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190283 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e00f53bcfb3ee8224dc69ad6e9629ea11daac596","date":"2013-09-09T18:19:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update synopsis for list/forward_list/deque to match the allocator style of existing comment. No code change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190320 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24a7e331f19489eddf31f26e40c1eeae1c8049b2","date":"2013-09-11T00:06:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue #2210 Part 4 - map/multimap\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190454 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"49d596d41223f18b701a4bc998806134f4a6363b","date":"2013-09-11T01:15:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue #2210 Part 5 - map/multimap; no, really - the last one was set/multiset. THIS is map/multimap\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190474 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f9f52e6c645d4cfbcaf8c45e9b7e50afdc657a0","date":"2013-09-11T01:38:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Adding bad_array_length to libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190478 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9d2680e19f24f5832c6a6dbdc107546d68a4e21","date":"2013-09-12T00:10:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"A collection of minor type-o fixes.  The first two aren't testable, but all tests pass with them.  I stumbled across them while experimenting with a std::move that checks its argument for non-const.  The third corrects a test that is currently failing.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190563 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"599e60d2f7c226a1aec8e17f113173d9333274e9","date":"2013-09-12T02:11:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement uses-allocator construction\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190571 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6dff618d7db3d0e716638bf8010326b7b128f461","date":"2013-09-12T03:00:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2210 (Part #6): unordered_map and unordered_multimap\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4107076e462abecf73c72cc53e31faff5420d5b","date":"2013-09-12T17:01:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Test for 'bad_array_length'; got left out of initial commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27a1c252e3f2c0d1192e1e275ce3489b9f0025f9","date":"2013-09-13T15:22:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Initial implementation of <dynarray>. No allocator support pending resolution of LWG #2235; no stack allocation pending compiler support\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94d3f6b51802429fdb09e22e9ed85a722a131b7c","date":"2013-09-13T15:37:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status for <dynarray>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190700 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ecf7f2d5465db66aeccb272d0a6e0a9fcc1f72f","date":"2013-09-13T17:32:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix link to dynarray issue\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d885143d5c3a0141548616962d5e6069e964fdaa","date":"2013-09-13T23:27:42.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M:  Make valarray a little more forgiving to compilers not quite so gifted.  This has no impact on clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37c4acfe5e73271fa9c08148c9bb1de79f6a2d5a","date":"2013-09-13T23:56:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Make shared_ptr a little more gentle for some compilers.  No impact on clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a49a2c9deb1779c824b4ba24a4bb0206fe53f1b2","date":"2013-09-14T00:47:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2210 (Part #7): vector and vector<bool>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd942f1840386c4f6d37872793c563740a4a60b8","date":"2013-09-14T18:20:10.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Marshall Clow:  LWG Issue 2056: future_errc enums start with value 0 (invalid value for broken_promise).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190756 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef5aa93b9cdc5bfea3e4c59bafd784a9ff968dec","date":"2013-09-17T01:34:47.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M:  Restore the ability for libcxx to compile again on mingw 64.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190837 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd64f140d4ebac5324a03d75c6d5d9b114dafc6b","date":"2013-09-17T08:46:53.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Fix typo.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@190857 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8127758024da92cae589292d763aedc86fa3d34c","date":"2013-09-21T01:45:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"David Chisnall:  macro protect 'test' in __has_pointer_type_imp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191126 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba898e42081aec544a04d282834aa99b13d57803","date":"2013-09-21T01:49:28.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"N3659: Shared locking in C++  Revision 2, c++1y only\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191127 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"23e470c348f5784839726282c50be5b1e1cabae5","date":"2013-09-21T17:58:58.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply LWG 2017.  This is a only a documentation change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191140 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0836f87fb94d2d2bcf01b6541bd41e92e27d6181","date":"2013-09-21T18:17:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply LWG 2021.  This is only a documentation change.  Also bringing c++1y status page up to date.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191141 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dcc6a0bc44dec14c62bc89866e8a9110722e95c5","date":"2013-09-21T19:25:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Apply LWG 2048.  It is amazing to me that this actually works, but the existing tests confirm that it does.  c++1y status page now showing libc++ is complete for c++1y modulo dynarray issues.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191142 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de589f2f8f9498f8006dc954e177a195ef6eb136","date":"2013-09-21T21:13:54.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Peter Collingbourne: If a pointer is passed as the third argument of the (iterator,\niterator, allocator) constructor with the intention of it being\nimplicitly converted to the allocator type, it is possible for overload\nresolution to favour the (iterator, iterator, enable_if) constructor.\nEliminate this possibility by moving the enable_if to one of the\nexisting arguments and removing the third argument.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191145 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc910cb9a0b5a1ecd8b1f4c1c10ca54e2e433aa7","date":"2013-09-21T21:26:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Peter Collingbourne:  Fix warnings when compiling with -DNDEBUG.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191148 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1754fb3e9e64d5f3ebe15f7200f573b0265cbff","date":"2013-09-25T20:01:44.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Make the guard for external ABI libraries include the guard for\nlibsupc++ in typeinfo.cpp, bringing it into agreement with\nexception.cpp. This fixes link errors due to duplicate symbols from\nthis translation unit.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191397 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91008752edb23ad3a5d59eb50a03e3c4e347af5f","date":"2013-09-27T22:16:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated table with results from Chicago\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb55b18fa9767e8fff0d83c220ba785dafcf4299","date":"2013-09-27T22:21:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed a change that didn't have an issue number 'GB 9'\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42389d214f73f86265ad580ce59933f95cf19cb7","date":"2013-09-28T01:25:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated my role\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191596 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4af78bb10b73aabb6c667477366d8469cc10df32","date":"2013-09-28T01:52:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed bad link for n3789; thanks to Chip Davis for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6db12cb03794374d7aa83b2a36141e52d559b179","date":"2013-09-28T18:35:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a set of macros for using the new '[[[deprecated]]' attribute. No code changes (yet)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9738cafa4f5c5ce19cd674e7e8c38376eaac8abe","date":"2013-09-28T19:06:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement n3789; constexpr support in named function objects\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"179fa78da3edb51cd465c2edd47e1d5ff526288d","date":"2013-09-30T09:10:01.000Z","author":{"name":"Alexey Samsonov","email":"samsonov@google.com"},"message":"[CMake] Put libcxx-specific module directories to the front of CMAKE_MODULE_PATH.\n\nOtherwise if libcxx is built as an LLVM external project (after r191624),\n\"include(config-ix)\" will include config-ix.cmake from LLVM, not from libcxx,\nwhich will result in misconfigured build tree.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191657 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff7546e974f082f0ff2ff57756054322ce2e6b38","date":"2013-09-30T19:08:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"SCARY/N2913 iterator support between the multi and non-multi versions of the associative and unordered containers.  I beleive lack of support for this was accidentally recently introduced (by me) and this is fixing a regression.  This time tests are put in to prevent such a regression in the future.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191692 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd444af850efeb267e17d1b3aef521c5c4d43cc4","date":"2013-09-30T21:33:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Part 8 of LWG Issue 2210' unordered_set and unordered multiset; this got missed when I went on vacation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191705 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19e7862eb83da0f009f6bd5becd56753dcca12d6","date":"2013-10-01T13:28:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove non-printable chars that snuck in back in July; thanks to Yaron Keren for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191756 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7eb5738f6fd60d7cb8c7c284a8c52f0859fe80b","date":"2013-10-02T07:44:19.000Z","author":{"name":"Alexey Samsonov","email":"samsonov@google.com"},"message":"Explicitly specify -Wno-error if LIBCXX_ENABLE_WERROR is false.\n\nlibcxx doesn't build with -Werror because of #warnings in its source\ncode. But when libcxx is built as an external LLVM project, it inherits\nLLVM build flags, breaking the build if LLVM_ENABLE_WERROR is enabled.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191814 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c81b00f75dba466d20aedf3bcc7628d2f344a29","date":"2013-10-03T21:58:25.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Make it possible to run the test suite when built as part of LLVM.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191930 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8df0320334634bc748f02c64a86747539f5c2842","date":"2013-10-03T22:04:10.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Re-add bad_cast and bad_typeid default ctor definitions under libsupc++.\n\nlibsupc++ declares these constructors inline, so we won't necessarily\nget a definition for them in the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66a8fcecd90282e3fb9a8493d8fdb521f28bacf0","date":"2013-10-03T22:58:36.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"libc++abi no longer has a cxa_demangle.h header.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191935 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7555069ab8b7eaf73970a1d325a51bedf2cb250","date":"2013-10-04T21:14:44.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Provides the _LIBCPP_WARNING macro, to be used for MSVC only, since that compiler doesn't support #warning.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191980 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f677bc4165b05a3c7e7e193734cd92e722de75a0","date":"2013-10-04T21:24:21.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Fix libcxx's detection of rtti disablement for g++.exe and cl.exe. When RTTI is NOT enabled, _LIBCPP_NO_RTTI is defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191981 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e564246eced50a94eea249719498e72e236a571","date":"2013-10-04T22:09:00.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Changes all references to \"x inline\" to \"inline x\" where x = _libcpp_always_inline or _libcpp_inline_visibility macros.\n\nThe patch touches these files:\n\nlocale\narray\ndeque\nnew\nstring\nutility\nvector\n__bit_reference\n__split_buffer\nlocale_win32.h\n \nThere is no intended functionality change and it is expected that reversing the position of the inline keyword with regard to the other keywords does not change the meaning of anything, least not for apple/Linux etc.\n \nIt is intended to make libcxx more consistent with itself and to prevent the 1000 or so\n\"inline.cpp(3) : warning C4141: 'inline' : used more than once\" warnings that MS's cl.exe compiler emits without this patch, i.e. if inline is not the first keyword before a function name etc.\n \nPrefer \"inline [other inline related keyword]\" over \"[other related keyword] inline\".\nAfter this patch, libcxx should be consistent to this pattern.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191987 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9844b6796b54516b6bcb5afd2cd3c10f722c47a4","date":"2013-10-04T22:12:59.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: A small patch to fix a couple of warnings in stdexcept.cpp for cl.exe which does not support #pragma visibility.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@191988 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a8b5783f867cbfc7210aa5c92755153b5a8f8d7","date":"2013-10-04T23:56:37.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: The attached patch is for libcxx's new.cpp and __config files. The patch's intent is to make new.cpp compile using MS's cl.exe compiler without changing the meaning of anything for any other compiler.\n\nThe issue this patch seeks to address is that MS's compiler (cl.exe) doesn't support the __attribute__((__weak__)) or __atribute__((__visibility__(\"default\")) syntax; so a solution must be found where cl.exe doesn't see this syntax.\n\nThis patch seeks to solve this problem by changing code patterned like this:\n__attribute__((__weak__, __visibility__(\"default\")))\nvoid* operator new(size_t size, const std::nothrow_t&) _NOEXCEPT { /*snip*/; return p; }\n\nto code like this:\n_LIBCPP_WEAK\nvoid* operator new(size_t size, const std::nothrow_t&) _NOEXCEPT { return p; }\n\nHoward:  Thanks for all the comments regarding the default visibility\ntag on the definition.  I agree it isn't needed, and that there are lots\nof other places where it is missing.  That being said, I'm not wanting\nto rock the boat on that issue right now.  So I've added it back to the\ndefinition via _LIBCPP_FUNC_VIS.  A later pass dedicated just to this\nissue can bring things in to a consistent state one way or the other. \nNote that we do not want to have the exact same attributes on the\ndeclaration and defintion in this case.  The declaration should not be\nmarked weak, whereas the definition should (which is what G M's patch\ndid). I've fully tested on OS X to ensure that the resultant attribute\nsyntax actually works.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192007 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"adb73b1701f7761758bbb43a00b665664485347e","date":"2013-10-05T00:07:35.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Attached is a patch for libcxx's cmake file.\n \nI've changed it so we don't set highest level warnings (all) for MSVC when building projects using cmake and instead leave the default. That's /W4 on my machine and seems to be ok.\n \nWith all warnings on for msvc, we see literally thousands of warnings. 99.99% aren't relevant and just obscure the ones that are.\nI think the user can still override things if they want something different from the command line when using cmake.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192010 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"520dc52b4a04b545ddaf9c31be79765fb64562fb","date":"2013-10-05T00:13:31.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M:  Remove unneeded warnings in buildit that are hindering porting.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d927e38d1f2d98d79f95997011f011d2cb2aef8","date":"2013-10-05T18:46:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG issue 2275 'forward_as_tuple should be constexpr'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192038 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d9dd7a968ce810c02c67c94a0eb9fbe5733d70b","date":"2013-10-05T21:18:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark namespaces for user defined literals as 'inline'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192047 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"320c80fecf6b50cbc89840189b90a972baf4d6fc","date":"2013-10-05T21:19:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement literal suffixes for compled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192048 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"79d8c99a62b6a6fa0b3c0dc3f761659f62f3f587","date":"2013-10-05T21:21:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2247: Implement type trait 'is_null_pointer'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192049 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2faa02fc3d44e081fb7e3f36b19de622959aeb8c","date":"2013-10-05T23:29:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests making sure that optional<T>s can be compared at compile time; this functionality was enabled by N3789\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192051 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"69bf761909d9cbdf96554596e68d3c80720fb7c4","date":"2013-10-06T07:10:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status post-Chicago\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192057 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de3cac777d8939ef590bd41a930fa23491e62afc","date":"2013-10-06T07:19:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2247\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192058 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2bcdf5e9a0446b42d138e2f67a316c31fa7a5c0c","date":"2013-10-06T19:48:40.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Yaron Keren:  Add missing comment.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35a98a00b37ee94471d7bcd4b4222572c07e958b","date":"2013-10-06T20:53:24.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Use _LIBCPP_NEW_DELETE_VIS instead of LIBCPP_FUNC_VIS in src/new.cpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192071 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e0640559427cab817159d91439bd83e66bce0192","date":"2013-10-06T21:00:29.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: Rename local variable from __except to avoid MSVC keyword clash.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192072 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae2b90b86d131d118bb9f54b6b93edd0384cd7b0","date":"2013-10-06T21:14:05.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"G M: 1. It changes the temp file handling to use the template and the current directory for windows, matching how it works on other platforms.\n2. It re-enables the temp file handling for mingw that regressed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192073 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40455c65da679c5789c14b2081417c432cd1173c","date":"2013-10-06T22:13:16.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Eliminate more symbols multiply defined between libsupc++ and libc++.\n\nThe remaining multiple definitions were flushed out by attempting to\nlink libsupc++ and libc++ into the same executable with --whole-archive,\ne.g.\n\nclang++ -I../llvm/projects/libcxx/include -nodefaultlibs -Wl,--whole-archive lib/libc++.a /usr/lib/gcc/x86_64-linux-gnu/4.6/libsupc++.a -Wl,--no-whole-archive -lgcc -lgcc_s -lc -lpthread -lrt\n\n(The same technique was used to flush out multiple definitions in\nlibstdc++.)\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D1824\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192074 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d0d308f54baaa977292b6ea586a9577aa6e2a8e4","date":"2013-10-06T22:13:19.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Make it possible to link against libstdc++ as well as libsupc++ with CMake.\n\nLinking against libstdc++, rather than libsupc++, is probably better\nfor people who need to link against clients of libstdc++.  Because\nlibsupc++ is provided only as a static library, its globals are not\nshared between the static library and the copy linked into libstdc++.\nThis has been found to cause at least one test failure.\n\nThis also removes a number of symbols which were multiply defined\nbetween libstdc++ and libc++, only when linking with libstdc++.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D1825\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192075 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ece95914ac8f29d62137f7452b42056a1cd9c45f","date":"2013-10-06T22:13:21.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Implement std::exception_ptr under libsupc++.\n\nlibsupc++ does not implement the dependent EH ABI and the\nfunctionality it uses to implement std::exception_ptr (which it\ndeclares as an alias of std::__exception_ptr::exception_ptr) is not\ndirectly exported to clients. So we have little choice but to hijack\nstd::__exception_ptr::exception_ptr's (which fortunately has the\nsame layout as our std::exception_ptr) copy constructor, assignment\noperator and destructor (which are part of its stable ABI), and its\nrethrow_exception(std::__exception_ptr::exception_ptr) function.\n\nAlso, remove some out of date comments.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D1826\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192076 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a0555a9d4d59dc2b0827f0841f8ab3a65322f01","date":"2013-10-06T22:13:24.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Silence the unused function warning in exception.cpp.\n\nRather than try to protect the function behind a precise,\never-changing #if expression, just inline it into every caller.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192077 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f433cdb8ea0a93d7dff4818f920ae74fe012d3f","date":"2013-10-07T02:37:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Apparently, I don't know the difference between 'left' and 'right'. Swap parameters named 'lhs' and 'rhs' so that they correctly refer to the 'left hand side' and 'right hand side' of comparisons. No functionality change. Thanks to Arthur O'Dwyer for pointing this out to me.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192080 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16f13a0b84118ca46d613dff1e7c89d8df0086cd","date":"2013-10-07T03:26:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Marked issue 2284 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192085 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dab89a1412fbb013d492c32387cf10fa67cd7981","date":"2013-10-07T23:43:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix LWG Issue 2141: common_type trait produces reference types\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192142 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8dd5caf5a77c1840464fb4253a70e306371012c","date":"2013-10-09T21:49:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"patch by Yaron: Uses rand_s() from stdlib.h (when building for Windows)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1206720869691aa0e499ce6f766ea0e26779645a","date":"2013-10-12T19:09:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement national body comment GB9: remove std::gets\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"206ce1faaf35284f829bbfcdd28421098509e17e","date":"2013-10-12T19:13:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG issue 2143: ios_base::xalloc should be thread-safe\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f2d5b95e689a041005d9e4eac41ab6c25e94738","date":"2013-10-12T22:49:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2097: packaged_task constructors should be constrained\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192544 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"61a8422ffa89b7a1788dc9f51407b950ea3b8d0c","date":"2013-10-12T22:49:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue 2087: iostream_category() and noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f91166ef8f521bae91f9bc88e9a97bba9d2eaa0","date":"2013-10-12T22:57:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated status of issues and features\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192546 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9de3d4cab3ac91362e2a30406cd005cdc581eec5","date":"2013-10-13T01:02:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch from GM to make more implicit bools explicit since we can't stop MSVC warning about this in headers and to warn is the MSVC default. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192548 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71b52152a93342fedf1f3b25f3830b9c17b958d9","date":"2013-10-14T18:02:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"r192075 broke the buildbot at\n\n    http://lab.llvm.org:8013/builders/libcxx_clang-x86_64-darwin11-RA\n\nlit.py: <string>:230: note: inferred use_system_lib as: False\nlit.py: <string>:247: fatal: C++ ABI setting None unsupported for tests\n\ncxx_abi is geting set to None, and the lit script errors out shortly after\nthat.  This patch changes the default of cxx_abi from None to 'libcxxabi'.\nThis is likely not the right way to fix this problem.  However it gets the\nbuildbot running again.  Improvements to this fix are welcome.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@192609 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa87532fee72a30669efb5a673343b390284502d","date":"2013-10-21T04:59:37.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Avoid using the name 'bzero' for an enumerator in global scope. <strings.h> might declare this as a function.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193066 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0ac5cce17cdab15fdb6c3fbf06cbdaa674d54435","date":"2013-10-21T14:29:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by GM: Adding MSVC support to __bit_reference\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193084 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a43fca8edade4efb453bad10243841738e6dfba","date":"2013-10-21T14:41:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by GM: Making implicit conversion to bool explicit in <ios> and <__locale>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193085 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a36451371c101fbaf1efd61f66ec2a0721974085","date":"2013-10-21T15:07:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch from GM: locale.cpp; make implicit conversions to bool explicit, fix some 'unknown pragma' warnings when compiling under MSVC, and don't use the __sso_allocator under windows, b/c MSVC doesn't support aligned-by value parameters\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193086 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"33ae2337e205bd45e0f8e5e042020eac9a09d315","date":"2013-10-21T15:43:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by GM: apparently '__value' (two underscores) is a special name in Visual Studio, so rename the private method in <regex> with that name. GM's patch used  '___value' (three underscores), but I changed that to '__regex_traits_value' because I've been burned in the past by identifiers that appear identical but are not.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193087 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f7afe7b8e275bb09680f360c58fa9b10a5b5774","date":"2013-10-21T15:56:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by GM: Turn off 'deprecated' warnings when building with MSVC, and add '-Werror=return-type' to catch funtions that aren't returning what they should.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193088 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65ccddb341e3ff86289b5c18c5c70cc747542499","date":"2013-10-23T05:56:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark seed_seq default constructor and size() as noexcept. This is implied, but not required by LWG issue 2180\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193227 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4259337da29620acb1a5cd1615e1014912c2d79d","date":"2013-10-23T05:59:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status of issues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193228 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"09f8550e1c3b9dbff558724eb5b301f7cccb261b","date":"2013-10-31T17:23:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixes PR17148\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76a8670ce4404429a36ea8672590da79172528c8","date":"2013-10-31T22:20:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG issue 2341; Make the two variants of basic_ostream::seekp and basic_istream::seekg behave consistently; update tests to make sure\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193814 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad2a600c2aba18cd4cba4c6ebd16be348097a496","date":"2013-11-03T15:43:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix LWG Issue 2078. Make std::async(policy,...) try multiple policies until one succeeds.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193960 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8a8f5738776e8a61a75ff62df32eb9440a6d4af","date":"2013-11-03T20:07:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark __does_policy_contain as 'inline'. Thanks to Chongyu Zhu for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193962 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3b3108ec59042ef540bdf0071027d90227f8df71","date":"2013-11-03T22:06:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Better inline marking for __does_policy_contain. Thanks to Chongyu Zhu for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@193963 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ffe591d55f4a3714927a4f82a525960f68168bf","date":"2013-11-05T14:28:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Refactor floating point code for num_get::do_get into a template. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194080 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ecc8d7b334f25a4e9c6aae7c3260cf27bdaab976","date":"2013-11-06T14:24:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix an off-by-one error in basic_string::__grow_by, where it would incorrectly throw length_error (instead of bad_alloc) when attempting to resize the string to 'max_size()'. Add tests for resizing to max_size +/-1\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194151 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3de5086dc785ff7c1c4f0f09ff26808289b75aca","date":"2013-11-06T17:45:43.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Fix several tuple bugs that were exposed by clang's implementation of CWG 1402.  This fixes http://llvm.org/bugs/show_bug.cgi?id=17798.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194154 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe2a561fcaec3bee9b4974ec6ea01d9f74d58951","date":"2013-11-07T01:00:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More duplicate code removal in <locale>. Hoist common parsing code into two templates: num_get::__do_get_signed and num_get::__do_get_unsigned, and make the do_get routines call them. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194185 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29250b7ec88448d6cff1ee27bdd5f7883301fecf","date":"2013-11-07T17:15:51.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Tell libc++abi whether or not libc++ has declared bad_array_length.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194207 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a46a0ad9e516eefff7d2240dd652bdcbe60645c7","date":"2013-11-11T23:27:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch from Bruce Mitchener; fixes two typos in comments. No functionality change. PR17843\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194432 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f81e9eebaf662f230d3dff7329098df6ee7e36d","date":"2013-11-13T00:39:22.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This fixes a very subtle ABI problem concerning the copy constructor of\npair, and a couple of pair-like implementation detail types.  The\nC++98/03 and 11 standards all specify that the copy constructor of\npair<int, int> is trivial. However as libc++ tracked the draft C++11\nstandard over the years, this copy constructor became non-trivial, and\nthen just recently was corrected back to trivial for C++11.\n\nUnfortunately (for libc++1) the Itanium ABI specifies different calling\nconventions for trivial and non-trivial copy constructors.  Therefore\ncurrently the C++03 libc++ copy constructor for pair<int, int> is ABI\nincompatible with the C++11 libc++ copy constructor for pair<int, int>.\nThis is Bad(tm).   This patch corrects the situation by making this copy\nconstructor trivial in C++03 mode as well.\n\nJust in case it is needed for an incomplete C++11 compiler, libc++\nretains the ability to support pair with rvalue references, but without\ndefaulted special members.  However the pair needs non-trivial special\nmembers to implement this special case, (as it did when clang was in\nthis place a couple of years ago).\n\nDuring this work a bug was also found and fixed in\nis_trivially_constructible.\n\nAnd there is a minor drive-by fix in <__config> regarding\n__type_visibility__.\n\nA test is updated to ensure that the copy constructor of pair<int, int>\nis trivial in both C++03 and C++11.  This test will necessarily fail for\na compiler that implements rvalue references but not defaulted special\nmembers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194536 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"525a0fb982b6dfaddee5f7aa7a4d2e41978e7452","date":"2013-11-13T18:25:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add directory for TSes, etc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b7c2aeb004cc8e499f1a2281c356bee0bfc9061","date":"2013-11-13T22:44:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move <dynarray> into include/experimental, and into the std::experimental namespace, since it's not part of C++14, but of an upcoming TS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c6a583e2a7d3c3e1437442f692d968bf7cea5f4","date":"2013-11-14T20:01:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed bug in quoted strings implementation. Added test to be sure. Thanks to Peter Sommerlad for the report (and suggested fix)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194725 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65173fee3433747b7b29a9f067070bc8d80d3ebf","date":"2013-11-14T22:52:25.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"This is a followup to r194536, which changed the pair copy constructor to be\ntrivial in C++03, thus making it trivial in both C++03 and C++11.\n\nThis patch allows one to opt-in/out of this decision with a macro.  You can\nchoose to have the pair copy constructor always be trivial, or always be\nnon-trivial.  The flag controlling this is now _LIBCPP_TRIVIAL_PAIR_COPY_CTOR.\n\nThe client can define this flag to 1, and the pair copy constructor will be\ntrivial (when possible of course), or to 0, and the pair copy constructor will\nbe nontrivial.\n\nDefault settings for this flag are set in <__config> (as usual).  With this\ncommit the default is _LIBCPP_TRIVIAL_PAIR_COPY_CTOR=1 for all platforms\nexcept __APPLE__, which defaults to _LIBCPP_TRIVIAL_PAIR_COPY_CTOR=0.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4962b3f44eda9e69ac2ddddce9e5285c32c1dd2","date":"2013-11-15T17:18:57.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Justin Bogner: This makes the headers available in the build directory, making it\neasier to use freshly-built clang with freshly-built libc++.\n\nBasically, this makes it possible to run clang with libc++ without\nhaving to install it, even if you don't have any version of libc++\ninstalled in /usr/\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194825 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec5714f27a7f2fb1465ac97dac008d7e83015c72","date":"2013-11-15T18:34:43.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Add the CMakeLists.txt that was missed in r194825\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194838 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cdbe6048173c1f05628dbc85430acf191a3e173","date":"2013-11-15T22:42:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move <optional> into include/experimental, and into the std::experimental namespace, since it's not part of C++14, but of an upcoming TS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194867 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c26c3855926dfc6669f5ca6ddf5e994837760590","date":"2013-11-15T22:54:15.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"Windows.h is not required.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194870 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1823bea43ae4cc92b3c9e79b83f639f60800c4a7","date":"2013-11-15T23:41:01.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"Fix-it suggestion for fixing min or max defines on Windows.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194891 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35080eae90c75edbe277c1a0cba70998a8fe23f9","date":"2013-11-18T07:01:16.000Z","author":{"name":"Bill Wendling","email":"isanbard@gmail.com"},"message":"Set the permissions for 'experimental' and its context to the correct values.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@194993 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15c04bedad8762d7ed031d53db26bf02b2df18bb","date":"2013-11-18T21:12:14.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"This patch implements snprintf_l function in a way similar to the other \nfunctions in src/support/win32/locale_win32.cpp and locale_win32.h, \ncalling upon vsnprintf for which there is a MingW correct alternative.\n\nNote! __USE_MINGW_ANSI_STDIO is not modified in this patch. In order to \nuse the __mingw version it must be defined before including the MingW \nheaders.\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195044 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81241a944099014cc56929a99355cede91ada83c","date":"2013-11-18T21:30:19.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"G M suggestion: conditionally include files on _WIN32.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195045 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2ccffefaffc4558adcfa64bec7dc71ade2235937","date":"2013-11-19T18:05:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by Bruce Mitchener. Change all references to EMSCRIPTEN to __EMSCRIPTEN__. If you're not using the PP symbol EMSCRIPTEN, then you should see no functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195136 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16c76a2107e761b0f6da1b7573415f4d3d063f14","date":"2013-11-19T19:14:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a test that I broke over the weekend\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195143 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"016d4e847a53d310dfac6b0d93782f4221e7700a","date":"2013-11-19T19:16:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by Xing Xue to improve libc++ support for AIX\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195144 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37d0212c572c3f224b10848c325dbb2b9acff673","date":"2013-11-22T09:22:12.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"Compiling libcxx with gcc 4.6.4 (MingW) produces these errors:\n\n type_traits:3280:31: error: expected primary-expression before 'decltype'\n type_traits:3280:29: error: expected ';' at end of member declaration\n\n memory:2415:49: error: function 'std::__1::default_delete<_Tp>::default_delete()'\n defaulted on its first declaration must not have an exception-specification\n\n memory:2435:49: error: function 'std::__1::default_delete<_Tp []>::default_delete()'\n defaulted on its first declaration must not have an exception-specification\n\nThe attached patch defines _LIBCPP_HAS_NO_ADVANCED_SFINAE and \n_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS for gcc version < 4.7, making\nthe library compile with gcc 4.6.4.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195431 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfaafd539cec44ab3b0d5457e3a5b1b32fd417d8","date":"2013-11-25T22:44:20.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Don't use T as template argument, it is part of the application\nnamespace.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195693 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"061d0cc4db18d17bf01ed14c5db0be098205bd47","date":"2013-11-26T20:58:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"There were two identical files named 'min_allocator.h'. Move one of them to /support and delete the other. Then adjust all the tests that used them to include the moved one. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195785 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92b327712bd34d20d349485e09800b87b89d7f67","date":"2013-11-27T00:53:02.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Remove _LIBCPP_TRIVIAL_PAIR_COPY_CTOR=0 for __APPLE__, no longer needed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@195796 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7d46056b075f2996754be7112c43c66047346eb","date":"2013-12-01T10:15:11.000Z","author":{"name":"Sylvestre Ledru","email":"sylvestre@debian.org"},"message":"Remove executable permissions on a text file\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196041 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6daf534441d72fa6d67ea229a1151636e439d964","date":"2013-12-02T03:24:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for PRPR17934; based on a fix suggested by Peter Sommerlad\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196058 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e27dbcf2dce3505a2c6f2d385216ea4e76655df3","date":"2013-12-02T17:00:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Found two identical files named 'DefaultOnly.h' in the libcxx test suite. Moved one to /support, removed the other, and iupdated all the includes. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196118 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebedffde9adff4b56d3ccf6adcee8dc092404f0e","date":"2013-12-02T18:08:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Found two identical files named 'allocators.h' in the libcxx test suite. Moved one to /support, removed the other, and iupdated all the includes. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196127 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b92188a82b01e76ac6e8ad5f997293c2a078adc","date":"2013-12-03T00:18:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Found six (nmostly) identical files named 'test_allocator.h' in the libcxx test suite. Moved one to /support, made it a superset, and removed all but one of the others, and iupdated all the includes. Left the odd one (thread/futures/test_allocator.h) for later.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196174 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"615100223e64f487ddb750e789fec8056ca1e289","date":"2013-12-04T21:03:23.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Give all members of exception types default visibility.  Lack of this is causing some illegal code relocations rare and hard to reproduce cases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196411 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b671fc9b2dc9e4e080444a5dda892b138c1b89d2","date":"2013-12-09T16:00:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Refactor some of the operations in <string> so that they can be reused; no functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73b46a72486780f049ada9d9fbde6d3ba8e49940","date":"2013-12-10T19:25:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Refactored a bunch of duplicated code in <ostream>. Made a new routine called __put_character_sequence, and made nine places call it.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@196951 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c398696b0500f76a0363a66eb974849b54776be","date":"2013-12-11T19:32:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move std::begin(array) and std::end(array) out from under an #ifdef that was preventing people from building libc++ using gcc. This corrects a mistake that I introduced in r196058\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@197061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfd68bf0c7e32187dd4be7bd27fdec05d7b833fd","date":"2013-12-14T06:44:09.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"GCC does not support strong enum in pre-C++0x mode.\n\nGCC does not support strong enum if -std=c++0x is not used.\nWithout the strong enum, we will see following error:\n\n  In file included from libcxx/include/ostream:131:0,\n                   from libcxx/include/sstream:174,\n                   from libcxx/include/complex:247,\n                   from cpp03-headers.cpp:11:\n  libcxx/include/ios:419:68: error: 'io_errc' is not a class or namespace\n  libcxx/include/ios:420:66: error: 'io_errc' is not a class or namespace\n\nTo workaround this issue, this commit will define\n_LIBCPP_HAS_NO_STRONG_ENUMS when we are compiling with\ng++ without c++0x.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@197313 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f48c23568a122de6088455700e9d197b79bd8f8","date":"2013-12-14T06:45:09.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"Fix GCC unknown pragma warning in libc++.\n\nWe should check defined(__clang__) before the usage of the\nclang diagnostic pragmas.\n\nThe [-Wswitch] warning in src/future.cpp should be ignored.\nAs the result, the equivalent GCC pragma is added.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@197314 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1ebe26bdba870aa835665ba21cdeed52007d0da","date":"2013-12-20T13:19:45.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"Empty line between two unrelated #ifdefs.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@197810 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"239bc42b53daccb69d2195ae05e9c0964828375d","date":"2013-12-23T22:14:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make cv_status a class enum. Fixes PR18314. Thanks to Andersca for the report and the patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@197921 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f44c407b63a78f0f45a21806113009017c17b30","date":"2014-01-01T08:27:31.000Z","author":{"name":"NAKAMURA Takumi","email":"geek4civic@gmail.com"},"message":"Update the copyright credits -- Happy new year 2014!\n\nFIXME: Dragonegg may be updated at non-trivial changes.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"854a7a02b4bf2d73735559003e3c4abfda2b209f","date":"2014-01-03T18:21:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch by Howard. First part of fix for PR18218; add type traits needed to do the right thing. Fix the problems in PR18218 for isnan and pow - they also need to be applied to the other functions in <cmath>. Also, a drive-by fix for the test - now actually calls test_abs()\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198431 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a71f9562f09aa6151c675cedd64541b6237c9858","date":"2014-01-03T22:55:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rename ___make_pair_return to __make_pair_return_impl; ___make_tuple_return to __make_tuple_return_impl; and ____iterator_traits to __iterator_traits_impl. Part of a campaign to remove > 2 underscores from libc++. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198457 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8d1bbab02e2c1ee62ee69ac67e2c155031797a9","date":"2014-01-04T08:56:00.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"Implement the functions: clz, clzl, clzll, ctz, ctzl, and ctzll\nfor libcxx when compiled with Visual C++ on Win32 and Win64.\n\nclang and gcc (MinGW) compilers provide these implementations themselves.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198481 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6c272502231b7e66da54d20b9be88b7d316a87a1","date":"2014-01-04T09:27:39.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"80 cols fixes.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198482 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c6acb5ecd7fab26583353261fd52a9f7ba2f1e0","date":"2014-01-04T17:43:00.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Switch to using C++ style casts.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198505 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0ea7f8cfb3f8620d6325dba51540cebf9f51e70f","date":"2014-01-06T14:00:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rename several internal templates to get rid of ___ (triple underscores) or worse, four. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198608 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af6cd294aa7c88f3d21c830205e04d1338da9958","date":"2014-01-06T15:23:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed extra trailing underscore in #ifdef (__GNUC___ --> __GNUC__ )\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"908b5d7f9294fe0993f457631880b5f5a8e2953e","date":"2014-01-06T18:12:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Back out the <type_traits> changes from r198431; they were breaking when building with glibc. Need to find a better solution for PR18218.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a07e0e15964e07f60d470471cc5df0cba081750","date":"2014-01-07T19:21:13.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Replace casts of __impl_ with the correct reinterpret_cast of the\naddress. Restores the assembly of before r198504.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0efd9dcfa0ae0488b2606c06a7f9609f5c36ec6e","date":"2014-01-09T18:25:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR18404 - 'Bug in regex_token_iterator::operator++(int) implementation'. Enhance the tests for regex_token_iterator and regex_iterator.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@198878 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72fe0ae7cf1df57601c63178fe5a46b32c3cb527","date":"2014-01-13T17:47:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a bug in regex_token_iterator's copy constructor. Caught by Bob Wilson.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199122 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8896ac3cdd15a480a830381ad05aa2cff9c0356a","date":"2014-01-14T05:13:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rename libc++ internal templates __is_void, __is_integral, __is_floating_point, __is_pointer, __is_function_imp, __is_function, __is_member_function_pointer, __is_member_pointer, __is_signed_impl, __is_signed, __is_unsigned_impl, __is_unsigned to __libcpp_is_XXX, because some compilers have decided that __is_XXX are keywords. No functionality change.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199184 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f78c0d9f98ec85ae8c5336aae107b5f938d571f","date":"2014-01-14T17:00:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update lib/buildit and test/testit to both pay attention to an env flag CXX_LANG, which people can set to 'c++03', 'c++11' or 'c++1y' to build/test using that language variant. If you don't set this env variable, you get c++11, just like today. Drive-by fix; remove duplicate -nostdinc++.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199222 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"928bb68bb209ea9218e277acba139284308349ae","date":"2014-01-14T17:04:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Whoops! Set the default in the last commit to c++1y instead of c++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199224 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"beee5e48b35b502e2c8c14e836151e96123be74d","date":"2014-01-15T16:28:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Apply patch for Albert Wong: 'Modify testit to allow filtering tests by prefixes'.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199318 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98760c18f85bafd98dde7a309e1b0e677abd47d8","date":"2014-01-16T16:58:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add license headers to a bunch of libc++ files that were missing them. No functionality change. Fixes 18291. Thanks to Nico for the bug report and the patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199400 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f58b89ecdd1fe7b67bcb568545cdc83bdf90052","date":"2014-01-17T14:24:23.000Z","author":{"name":"Alp Toker","email":"alp@nuanti.com"},"message":"Build fix for gcc builtin\n\nThe __sync_add_and_fetch() builtin parameter is volatile but clang has\n'different' type checking and ends up accepting this code.\n\nUndo the C++ cast from r198505 to get libc++/LLVM building with g++ while this\nis investigated.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199494 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63fbfd688347d6d53b699a3f076dd6388733329c","date":"2014-01-17T16:17:24.000Z","author":{"name":"Alp Toker","email":"alp@nuanti.com"},"message":"Adjust build fix from r199494 to use C++ casts\n\nChange suggested by Joerg Sonnenberger!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199500 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"97f50f6c5ea8e8ab706077ef5a09bc1ab5a9dacf","date":"2014-01-18T03:40:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update __parse_DUP_COUNT and __parse_BACKREF to use the traits class to recognize digits. Fixes PR18514\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199541 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3c9d52d6de2d59752e9c20fce34eadec6b925bd","date":"2014-01-18T03:41:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix erroneous test; was failing on darwin-ppc32. Fixes PR18469.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199542 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a383b9755e1de0911591285b71c32b1196220b9","date":"2014-01-20T23:57:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed test failure in is_iec559.pass.cpp on darwin-ppc32. Thanks to David Fang for the report (and suggested fix)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199694 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15066f21f1722dd5c1fa662ed9e8f36f2cae798f","date":"2014-01-21T00:03:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed extra space; thanks to thakis_'s eagle eye\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4c0d87a84b5d324726b334d10fe2f8c24215fad","date":"2014-01-22T22:56:52.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Const qualify __mem_fn call operator\n\nQOI improvement.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2059\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@199848 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"708dd84a4ec2855cab686219cac4fdcd739bc5cc","date":"2014-01-24T15:27:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rename some internal templates to avoid conflict with complier intrinsics. __is_constructible --> __libcpp_is_constructible, __is_nothrow_constructible --> __libcpp_is_nothrow_constructible, and __is_nothrow_assignable --> __libcpp_is_nothrow_assignable. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200010 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28754d0378f6ae4d82256bd80ab457b23da8c430","date":"2014-01-26T01:59:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed extra line that I left in when committing 199694. Thanks to Jared Grubb for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a612c627400f9132f1abe5e5b790dd0466a51b2b","date":"2014-01-29T01:54:52.000Z","author":{"name":"David Fang","email":"fang@csl.cornell.edu"},"message":"lit.site.cfg:cxx_under_test should take precedence over 'which clang++'\n(reviewed by Marshall Clow)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200364 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1678a18d957b91855aadcd3186f21bd142959e0","date":"2014-01-31T09:30:46.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"Remove default function template argument from the header.\n\nGCC will treat the default function template arguments as a\ncompilation error if C++0x is not enabled.\n\nThis commit workaround the compilation error by moving the\nSFINAE check to function argument instead of the template\nargument.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200523 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13fbe9d5e37cc50ea550e61dfabdbebd9ede8b3d","date":"2014-02-03T23:26:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix numeric.limits.members/traps.pass.cpp to pass on non-x86 architectures. Fixes bug #18468\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08356fbee7de2d0b14088b89a471fb9c4af2957a","date":"2014-02-04T19:51:48.000Z","author":{"name":"Howard Hinnant","email":"hhinnant@apple.com"},"message":"Albert Wong:  Fix thread.thread.id/lt.pass.cpp to not assume thread::id() produces a minimal value.  This enables this test to pass on andriod arm.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200793 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3dc8f3b8bf0a6f1220f673f9f162bf09a743cbc","date":"2014-02-05T01:44:17.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Support forward_list<Incomplete Type>. Patch by Zhihao Yuan!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200814 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf7278afd7bc8cc0a42feadcbcbb5db44cc9cf71","date":"2014-02-07T21:14:29.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Avoid signed vs unsigned compare warnings. From Dimitry Andric.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@200993 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebfc50ee89c8e47151bf6abe999fb7def08c908b","date":"2014-02-08T04:03:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for PR18735 - self-assignment for map/multimap gives incorrect results in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201021 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71e699dda5442545e3335f8c07de27c860fe2046","date":"2014-02-10T17:40:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for PR17606 - result_of (and INVOKE) works incorrectly for member function pointers with ref qualifiers. Also a drive-by fix for common_type in C++03 mode. Thanks to Michel Morin for the bug report and the proposed fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"117cbb307bd9ae7ff8229360bad0173e1e9cfae5","date":"2014-02-13T14:02:28.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"This solves warning C4005: '_NOEXCEPT' : macro redefinition when compiling\nwith Visual C++ 2013 by making libcxx definition text-identical to yvals.h.\n\nPersumably this definition is for older Visual C++ versions. \nIn such cases it will still be defined so no functionality change.\n\nOther platforms should not be affected as this is inside\n#elif defined(_LIBCPP_MSVC)\n\nPatch by G M!\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201328 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2060f06b5c359826af55bd468d77026b9b44e37","date":"2014-02-13T17:56:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test to make sure that vector supports incomplete types\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201349 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"224dec238c0d41f9426537038ada8a74ed4ff345","date":"2014-02-15T05:10:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"First pass at the Issaquah issues list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b88d7cc71c474c00766c5dc0448d9cd22f7f9360","date":"2014-02-15T05:41:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issue 2293, 2241 and 2308 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201460 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8eb5acc3c78ce4f65f5af2f34388257384094bba","date":"2014-02-16T01:57:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove tabs that crept in during an earlier refactoring. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201472 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2df82b98e2e55019180b0c8de88211954de0646","date":"2014-02-17T22:18:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG Issue 2346: integral_constant's member functions should be marked noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201534 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d9463a3555aa559884809b8a7fc842a3968193e","date":"2014-02-19T16:51:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2350: min, max, and minmax should be constexpr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9dacb2f7139ca928b0dc4a5bd32f4a22bf993c29","date":"2014-02-19T17:53:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG Issue: 2280. begin/end for arrays should be constexpr and noexcept, plus a drive-by fix for cbegin/cend suggested by Peter Sommerlad.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d81d83f0987c65ae19bed28db6ee878a89d5b3b3","date":"2014-02-19T17:55:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2280, 2258, 2304, 2317, 2350 and 2346 as completed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201704 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e0f8672e7a9a08a75ff1abc230a850849c48380f","date":"2014-02-19T21:21:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG Issues #2329 and #2332 - disallow iterators into temporary regexes and regexes into temporary strings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f84f6118b3ef1084ffd6ea437f3859339aab5b39","date":"2014-02-21T08:37:30.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"Teach libc++ to use the compiler-provided C-compatible ::max_align_t\nrather than its own type for std::max_align_t. This is particularly\nrelevant as the types may not be ABI compatible despite users expecting\nthem to be.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201843 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0648cc531638a1d3cb0f95c8fbe2a319e77b9044","date":"2014-02-21T10:00:31.000Z","author":{"name":"Yaron Keren","email":"yaron.keren@gmail.com"},"message":"Solve the errors\n\nError 1 error C2681: 'add_rvalue_reference<_Tp*>::type' : invalid expression\ntype for dynamic_cast c:\\libcxx\\include\\type_traits\n\nThis is one more step getting libcxx compile under Visual C++. The patch is \n#if defined(_LIBCPP_MSVC) so will affect only this build.\n\nWhen libcxx can be compiled, it will probably require the current version or\nmaybe even the next Update of Visual C++ 2013.\n\nPatch by G M!\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201844 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4a47e14b9c84b55a1d377b61ee21fd8e8e82eaa","date":"2014-02-21T18:07:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix historical #ifdef. Use __cplusplus instead of __GXX_EXPERIMENTAL_CXX0X__ when compiling with clang. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db9d0da3b45c2c4dcd295c8d930d18a3c769e96d","date":"2014-02-21T21:06:36.000Z","author":{"name":"Juergen Ributzka","email":"juergen@apple.com"},"message":"Revert \"Fix historical #ifdef. Use __cplusplus instead of __GXX_EXPERIMENTAL_CXX0X__ when compiling with clang. No functionality change.\"\n\nThis reverts commit r201864, because it breaks our build bots.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201892 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ffb67eca5641dfe72424c22a6ecf987d816a47a","date":"2014-02-22T15:13:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix historical #ifdef. Use __cplusplus instead of __GXX_EXPERIMENTAL_CXX0X__ when compiling with clang. No functionality change. Noteto self: It is important to run the regression tests on the copy of the code that you've changed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@201938 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e554d93dad7bca01a5d802f2003b6444c6866ce","date":"2014-02-25T16:11:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG issue 2301: Mark std::tie as constexpr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc4759288b0c9c3e240ad56e7def0d640845d8b7","date":"2014-02-25T16:25:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG Issues 2278 and 2313 as complete. No code changes needed; libc++ already implemented both of these.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202161 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e75439f54b0ae962ec5c6719d7adebef63275287","date":"2014-02-25T16:35:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG Issue 2257 as complete.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3ac046ba59e82c6d2bda6816d16a182fa4ada96","date":"2014-02-25T23:11:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issue 2299 as complete. No code changes; libc++ already implements this.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202203 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"103af3478e48a71906c14a811c84c7aa76b5a656","date":"2014-02-26T01:56:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG issue 2306: match_results::reference should be value_type&, not const value_type&. This is a general move by the LWG to have the reference type of read-only containers be a non-const reference; however, there are no methods that return a non-const reference to a match_result entry, so there's no worries about getting a non-const reference to a constant object.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202214 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec7009afe86cea6ab95716f03b759948892f481a","date":"2014-02-26T17:14:09.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Don't install CMakeLists.txt along with the headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02ca8af10bf14b653a96c48e52e93ea3242a56c9","date":"2014-02-27T02:11:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG issue #2188: Reverse iterator does not fully support targets that overload operator&. Also mark #2272 and #2299  as complete; libc++ already implements them.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202339 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37a9ca6fb2ed2db59ba894f330c7e453d67cb38b","date":"2014-02-27T16:13:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More LWG issues. Mark #2182, #2323 and #2213 as complete. Add a test for #2339, and mark that as complete. No actual changes to the libc++ code; all of these were already in place.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff137e9145641a07ff69d74e3fc599e1e9bceaad","date":"2014-03-03T01:24:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG Issue #2285 - make_reverse_iterator. Also mark issues #1450 and #2205 as complete; they are just wording changes in the standard. Mark issues #2359, #2320 and #2322 as complete - libc++ implements them already.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202671 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3fef95b10d6617384bd66b34cb3a01b4f926218c","date":"2014-03-03T06:14:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Per N3924, mark random_shuffle as deprecated in the synopsis for <algorithm>. Since we don't actually do anything when a call is deprecated, there is no functionality change. Maybe someday, we'll decide to warn when using a deprecated function.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202672 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50fe0c7d61131dd693fce234573e30441eb35b38","date":"2014-03-03T06:18:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG Paper n3887: Consistent Metafunction Aliases. This adds std::tuple_element_t<> as an alias for tuple_element<>::type. Clean up the synopsis for tuple_element in <utility> as well.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202673 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c60b0a686fb59b35ca9e1fa3cb7064ef000aa1d","date":"2014-03-03T19:16:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove a stray tab that snuck into a test. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202739 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53c0e72d5c5b7ccfa2234efbd84be5d6749dea89","date":"2014-03-03T19:20:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG 2324: Insert iterator constructors should use addressof(). Add two new container classes to the test suite that overload operator &, and add test cases to the insert/front_insert/back_insert iterator tests that use these containers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202741 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be8a99ad0f5cfccb64eec53b7d3ac945f55040bb","date":"2014-03-03T19:50:01.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"[libc++] Const qualify __gnu_cxx::hash_map<>::const_iterator::pointer type.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2811\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a93b5e27a8cea26a63c8272574900c9a376fe9ae","date":"2014-03-04T19:17:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG #2268: Setting a default argument in the declaration of a member function assign of std::basic_string.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202876 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f20e52a2b599bf40112cf21ec127241f7bd0495","date":"2014-03-04T19:18:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues #2240 (wording only) and #2268 (revision 202876) as complete.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202877 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab9da1a78f129d59fab74eb3e8901a102f951a95","date":"2014-03-04T19:22:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Apply David Majnemer's patch updating the links to the papers from Chicago and Issaquah.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202878 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ba85af029a4ad4301ed5d67f0f9b70e6c14886f","date":"2014-03-04T19:40:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a SG1 paper and some SG1 issues that affect the library to the task list.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202881 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a6057a525a09dcb6505370db27b1a1367f7c210b","date":"2014-03-04T20:29:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix issue number error; 2141 --> 2291 and mark it as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202884 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cbb9305c264bbe11c2d972f1a80db7fffdbed82a","date":"2014-03-04T20:31:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG issue #2252: Add more tests for exception safety. No changes needed in the library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202885 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d4ce30c798015e2aa0bea05b347f2d31ebdf868","date":"2014-03-04T22:44:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG Issue #2271: regex_traits::lookup_classname specification unclear. libc++ already does the right thing; just update the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202904 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"23ef15161479092c88ef24a6f8c80ca54119367a","date":"2014-03-05T03:12:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update synposis in <memory> to show move semantics for weak_ptr; add tests for already existing move semantics. Mark LWG issues #2315 (no changes needed), 2316 (move semantics for weak_ptr), 2252 (previous commit) and 2271 (previous commit) as complete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebd6c2b81dbb9105cfc3aa3b1b88fadf39793818","date":"2014-03-05T03:39:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG #2212: std::is_final. This requires compiler support, which modern versions of clang provide. Also mark LWG #2230 as complete - no code changes needed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202934 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d6dcb5569bd8f31228370de5f04ccb7cf0ac896","date":"2014-03-05T17:09:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove definition of std::fmaf from libc++. Fixes bug #18910. This function should come from the C standard library. As a drive-by fix, update the tests to remove a warning from -Wabsolute-value\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202990 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24b29a02f193db6437289e24fbe09fbf7b4bcfcb","date":"2014-03-05T17:58:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark is_final as a C++14 feature.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202991 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48c74700ec233e7b9ac0c1f06215cd443424cb62","date":"2014-03-05T19:06:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG 2193. Default constructors for standard library containers are explicit. Note that libc++ already did this for string/deque/forward_list/list/vector and the unordered containers; implement it for set/multiset/map/multimap. Add tests for all the containers. Two drive-by fixes as well: add a missing explicit in <deque>, and remove a tab that snuck into a container test. This issue is also LLVM bug 15724, and resolves it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@202994 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d3d032c7d9686fbd31c776f65155367d3e19dcd","date":"2014-03-06T04:11:10.000Z","author":{"name":"Peter Collingbourne","email":"peter@pcc.me.uk"},"message":"Do not derive __gnu_cxx::hash<T> from std::hash<T>.\n\nInstead, define explicit specializations for the basic types listed in\nthe SGI documentation. This solves two problems:\n\n 1) Helps avoid silent ODR violations caused by the absence of a\n    user-supplied __gnu_cxx::hash specialization in cases where a std::hash\n    specialization exists (e.g. for std::string).\n\n 2) __gnu_cxx::hash semantics are slightly different to those of\n    std::hash (for example, the former may dereference a pointer argument)\n    so it is inappropriate for __gnu_cxx::hash to receive std::hash\n    specializations by default.\n\nDifferential Revision: http://llvm-reviews.chandlerc.com/D2747\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203070 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"471f3c67db32e9d0592bdd80bfb93765749508a8","date":"2014-03-06T16:27:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a couple of -Wabsolute-value warnings in the libc++ tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203126 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b90686c1ec584d2e9dc91b32384d8782f99a9fd9","date":"2014-03-07T21:45:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG #2344: quoted()'s interaction with padding is unclear. I think that anyone using quoted with padding is really confused, but it should work the way the rest of iostreams works.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203290 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d14101758aaeac9e8e4509621806f104cf8f55b8","date":"2014-03-07T21:47:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status for LWG 2193 and 2344.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203291 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"caaa1412b07810bd6fd13d502d876fad2c068740","date":"2014-03-10T04:50:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug I introduced (enabling implicit conversions from compare function to map) in r202994. Thanks to Sebastian Redl for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7b63d646b17711fa74ce97fc05d02055c63523d","date":"2014-03-10T17:59:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues #2357 (wording changes in the standard, no functionality change) and #2132 (libc++ already does this) as complete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203478 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9863083ee04fe80e227976bc90dbc01806bdf3d9","date":"2014-03-10T18:54:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added tests to the sequence containers for for LWG Issue #2263. Comparing iterators and allocator pointers with different const-character. No changes to libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203479 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"179e9455a5df659cc1d3da3251834c577e27e2a0","date":"2014-03-10T19:18:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More tests for LWG Issue #2263; this time to the associative and unordered containers. Still no changes to libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203480 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6dbaaa99a880f356277525c8630491b80d6d2e56","date":"2014-03-10T21:36:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests for LWG issue #2356. Stability of erasure in unordered associative containers. Libc++ already does this, but now we have tests for it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203494 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ebf26f90df8d8d5e30c8c877a8491c4c839c69f","date":"2014-03-11T04:32:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Final bit for LWG #2263; test different allocator pointer types. Note that libc++ already does the right thing here; I've just added tests to ensure that it stays this way.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7db57339fbdfe74148003471381919fba8fec440","date":"2014-03-11T15:17:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG #2314. 'apply() should return decltype(auto) and use decay_t before tuple_size' as complete. This is a correction to some example code in the standard, no change needed for libc++.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203579 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3849253ce8da1dace4943cc064fe3036a4583da","date":"2014-03-11T16:22:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch from Steve MacKenzie to make the libc++ tests play nicely with MSVC's STL. Add '#include <functional>' to four of the priority queue tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203584 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1ead689be7ceb202eeff251c211dfeafd50e276","date":"2014-03-11T17:16:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG 2360: 'reverse_iterator::operator*() is unimplementable'. Note that this is a (small) behavior change in the library. Reverse iterators whose base iterators' operator* return references to 'within themselves' have been sacrificed to the greater goal of avoiding data races.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203587 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be3d117702db7dc87b1ad12a365e472bb8846f89","date":"2014-03-11T17:18:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix misguided #elif - it checked the value of _AIX instead of defined(_AIX). Thanks to Johan Bergström for the bug report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203589 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"668a1d8c44e6659b0b0d4d48daa3c0f79b77f6d5","date":"2014-03-11T22:05:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix ABI break I made in r203587; thanks to Richard Smith for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203610 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a8e27b5b325198cd04c5ea74db1c00de6244456","date":"2014-03-12T01:19:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"THIRD TIME. Richard pointed out (again) that I'd switched the order of the instance variables; and thus failed to repair the ABI break. After this, I'm going to sit down and watch TV for the evening.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203631 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6875f3b6e41d8d3361d71474fa80a54474d5826a","date":"2014-03-12T04:11:25.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: remove an errant comma\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203636 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"89a52ffd543e3325d236aa876259c6bea8906474","date":"2014-03-12T04:11:28.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: fix add_definition abuse in CMake\n\nadd_definitions is meant for adding C preprocessor definitions.  Modern cmake\nsuggests use of the CMAKE_CXX_FLAGS for the purposes of pushing flags to the\ncompilation commands.  Simply switch to the modern form given that we are\nalready requiring a new enough cmake.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203637 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb547816ea2f8d75074208a8d5a479c4593a393e","date":"2014-03-12T04:11:31.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: fix erroneous overwriting of flags\n\nAlways use list(APPEND) as it will perform the desired action even if the list\nis empty or previously unset.  The first set is harmless, however, the\nsubsequent set was overwriting the previous flag setup resulting in an improper\ncompilation command being generated.  This manifested as a build failure on\nLinux when using cmake + ninja.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203638 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55f667ce6457328369be404a6c1de0f5d7189ecb","date":"2014-03-12T04:11:34.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: remove unnecessary modification of CMAKE_REQUIRED_DEFINITIONS\n\nThis is unnecessary now that the flag handling has been fixed.  The flags will\nbe added properly in the main CMakeLists.txt after the config-ix inclusion which\nperforms the required check.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203639 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d4245e7e918a830226589cd04a8c4a8834560b4b","date":"2014-03-13T16:13:54.000Z","author":{"name":"Bob Wilson","email":"bob.wilson@apple.com"},"message":"Exclude .svn (and other \"dot\" directories) when installing headers.\n\nMy fix for PR15820 in r180132 inadvertently removed the exclusion for \".*\".\nThis puts it back again. Thanks for Nico Weber for pointing this out!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203807 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a5e2cb62196489ecb384f42853c448617503cdc","date":"2014-03-15T01:55:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove Issue #2235 from the Chicago section. The resolution was approved in Bristol (and it is listed there), and then is was approved *again* in Chicago. Thanks to STL @ microsoft for the catch \n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@203995 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb036e3f2cd6c76d5037c6a4ec63dc42d6d20d0c","date":"2014-03-17T20:13:54.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"Replace a tab with a space\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204077 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9f95be93091c60e7c9034670f298d5a2fba8686","date":"2014-03-17T20:19:44.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"Implement N3891: A proposal to rename shared_mutex to shared_timed_mutex\n\nThis is as straightforward as it sounds, a renamed from shared_mutex to\nshared_timed_mutex.\n\nNote that libcxx .dylib and .so files built with c++14 support need to\nbe rebuilt.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204078 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef7b63bce14f8ca985254998f38c23c9e38d167d","date":"2014-03-20T15:31:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Minor cleanup from r204078; remove two empty test directories that were left behind.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204348 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0bf6f536984e85149e60415f690306821629faa","date":"2014-03-24T18:38:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG Issue #2288 as complete. This was wording cleanup, no code changes required.\nAlso mark #2104 as complete. Leave the implementation in libc++ as noexcept, since \nimplementations are allowed to add noexcept to non-virtual calls. If we throw from\nunique_lock& operator=(unique_lock&& u), then that means the preconditions were violated,\nand calling terminate() (as a result of throwing from a noexcept function) is as\ngood example of undefined behavior as any other.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204653 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bce096d34dcf5185b91401a0d4d70a88e7cd1edf","date":"2014-03-24T22:25:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test to make sure we're doing the right thing for throwing exceptions from deferred functions. This is LWG issue #2186. No change to the library needed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204678 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab5e0a72d5c1cfe39c366bf02662601bc87903f9","date":"2014-03-25T14:57:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues #2075 and #2142 as complete. 2142 was a change to the standard\nto remove redundant wording, which required no changes to libc++. 2075 was a \nrewrite of the requirements for forward progress, and again, requires no changes\nto the library.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4c0c708a375c621cb2f656a6d4f99e0feb19b39","date":"2014-03-26T02:11:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests that should fail when lock() throws. THis is part of LWG issue #2135. No library changes here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204777 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0767852f74a2270e24d497d36b75e1490b0299e","date":"2014-03-26T02:45:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG issue #2135. If something goes wrong in condition_variable::wait, call terminate() rather than throwing an error. Do this indirectly, by marking the call as 'noexcept'. This is better than just calling terminate() directly, because it gives a better error message on the console.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a71d236336705a49257d43ac8d986ba3d5f5060","date":"2014-03-26T19:45:52.000Z","author":{"name":"Stephan Tolksdorf","email":"st@quanttec.com"},"message":"[libc++] Teach is_integral, is_[un]signed and make_[un]signed about __[u]int128_t\n\nThis commit also adds tests for std::numeric_limits<__[u]int128_t>.\n\nReviewed in http://llvm-reviews.chandlerc.com/D2917\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@204849 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c030063cc2b7a749a0e5b89e7a32d5d10b5f3fe9","date":"2014-03-30T11:34:22.000Z","author":{"name":"Tim Northover","email":"tnorthover@apple.com"},"message":"ARM64: use the alternate string layout on Apple platforms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205138 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6fdde8764097baee5612342166099925176ea84f","date":"2014-03-30T11:34:26.000Z","author":{"name":"Tim Northover","email":"tnorthover@apple.com"},"message":"ARM64: compare RTTI names as strings\n\nARM64 generates RTTI with hidden visibility, which means that typeinfo\nmust be compared char-by-char since it's not guaranteed to be uniqued\nacross the whole program.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205139 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81339cff831fac19a31b7df9e9047f934db3e864","date":"2014-03-30T14:59:12.000Z","author":{"name":"Tim Northover","email":"tnorthover@apple.com"},"message":"Use defined(__APPLE__) rather than __APPLE__\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205150 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e4915d9b463eca6c5ee7816f1ba8a9825ec1b9d9","date":"2014-04-03T02:35:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark C++14 status as 'complete'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205504 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"874ec678c0a329d8d710f510846713239486ac4d","date":"2014-04-03T02:38:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Reword C++14 status to match C++11 status\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205505 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"992f9d5017471d968e6daf87e6211ec306399aff","date":"2014-04-03T03:13:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a section about reporting bugs and contributing patches\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205507 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0835e16c6d7156055fbfaba64671312961c0b4bf","date":"2014-04-03T09:12:38.000Z","author":{"name":"Tim Northover","email":"tnorthover@apple.com"},"message":"RTTI Uniqueness: remove __name_for_load function.\n\nIt's identical to name() these days. (At one point it avoided masking\nof the RTTI uniqueness bit because ARM64 ignored it architecturally,\nbut no longer).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205518 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f357193cbd08716ef46d131d62926fc92f7bb70","date":"2014-04-07T07:28:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed 'sized deallocation' from C++14 status page since it turned out to require no library work, and fixed a typo in index.html. Thanks to Tobias for pointing these out.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205700 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1264e7c9e7e5253b2d0c9513e07d6541589be72","date":"2014-04-07T13:32:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR19819\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@205709 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"140e8f52c3444bbc020605cfc5f3b4638e8a4aca","date":"2014-04-11T08:22:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove node from a container before destroying it. Thanks to Alexander Potapenko for pointing this out.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206024 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed5394a8f990282088b154959b70001a177e2f32","date":"2014-04-12T21:12:55.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Not everyone uses bash, so fix test syntax.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206118 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d4d519f0b416f2d596c701f34890f3e1cdaefba","date":"2014-04-14T15:44:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Define a new macro in libc++ named '_LIBCPP_HAS_NO_ASAN'. When this is defined,\nlibc++ will not call address_sanitizer to detect addressing errors in the\nstandard library containers. This is a negative macro to enable users to\ndisable the libc++ checks even if they are compiling with address sanitizer\nenabled by defining this macro.\n\nAt the present time, there is no code in libc++ that looks at this macro.\nThat will come soon. This is just infrastructure.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206184 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6601516af84fc4ee50240be15b267d106a6b5141","date":"2014-04-16T23:12:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove some unnecessary noexcept conditions. Thanks to Richard Smith for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206424 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1d10875d7eac52d4d14f161c902510d028291cb","date":"2014-04-17T18:11:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a test that was attempting to use rvalue-references w/o checking to see if they were supported in the language. This resulted in a warning when testing using C++03.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206482 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a178c134191b18a8c146d6614313a6e4899d56d2","date":"2014-04-18T17:23:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Bug #19473. If you pass an allocator to std::function, we should use that allocator, not construct one from scratch. Add a test to make sure\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88dd258984a26ab72e916736d14bb953c0f1b1df","date":"2014-04-21T18:12:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add more tests for std::ws as pointed out by bug #19497\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206770 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"067e91d29e5bdf28236a4f96a5d7ae8cdb0a52a9","date":"2014-04-21T22:30:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Use compiler intrinsic __is_constructible if available\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"398c9d882b34673e5a82be454834d41f6cb8856f","date":"2014-04-21T23:48:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Default the copy and move constructors for __tuple_leaf. This fixes bugs 18853 and 19118. Add a test case for that.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@206829 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34b571bd88d6a1d1277bbcd8095c13e5d74cb1ac","date":"2014-04-25T15:50:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added some tests for equal elements in min_element and max_element. Bug #19547 was invalid, but we weren't testing that case\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@207232 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f64a2b3c349920f44394ea7d19f59fe856775de","date":"2014-04-26T05:19:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug #18350. Add tests for tuples of all the smart pointers (except auto_ptr)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@207307 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55622073f48d56027735468408da513417527569","date":"2014-04-30T19:54:11.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Exceptions store the message as reference counted string for\ncompatibility to libstdc++. Move the implementation into a header for\neasier sharing with libc++abi. Merge a number of improvements from that\nversion. Provide a POD definition for <stdexcept>'s public use to avoid\ncast dances. Discussed with Marshall Clow.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@207695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b5be703db4c5ffa7f9231f0f2440b02b469bd38","date":"2014-05-06T15:33:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR 19663. Some calls to find(vector<bool>) were returning iterators that were subtly invalid (didn't compare equal). Thanks to Erik Verbruggen for the report (and diagnosis)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208096 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f50f2d64baeb8130e1f47c379c12ee5d2400b72","date":"2014-05-08T14:14:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add Address Sanitizer support to std::vector\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208319 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bdfc0ad2eaf43455f069233d7265a008080fa51b","date":"2014-05-15T00:55:44.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Remove XFAIL from a number of tests that aren't expected to fail\n\nThese tests haven't been failing on darwin11 or 12 since r189610 when\npr17027 was fixed, but they've been keeping the libc++ bot red by\nXPASSing since then.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208831 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5fda8338b2497c64e6b65f5a3551d8de2bacb5c1","date":"2014-05-15T01:57:42.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Work around ABI differences due to LWG 2056 in tests\n\nWhen testing against the system library, there is a relatively minor\nABI breakage that the std::future_errc values have been changed to\navoid using zero. Update the tests that rely on the values being\nconsistent.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208840 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec34c489765e851ee18b33ed169ea16199ae0bda","date":"2014-05-15T11:27:39.000Z","author":{"name":"Alp Toker","email":"alp@nuanti.com"},"message":"Fix typos\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208869 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08f8ac6951f1d7c13e4fd342c4e01c270aff11dc","date":"2014-05-15T11:33:29.000Z","author":{"name":"Alp Toker","email":"alp@nuanti.com"},"message":"Fix typo 'fourty' in tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208870 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7fac8f6b9fe5b43089086ae003e850e6b312e046","date":"2014-05-16T01:45:02.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Update cstddef after clang r207606.\n\nr207606 changed the __need_foo macros to behave like they do with gcc: If they\nare set, _only_ the __need_foo stuff gets defined.  As a consequence, cstddef\nno longer defined \"offsetof\".  It looks like the __need_foo defines aren't\nneeded anymore, so just remove them.\n\nFixes PR19723.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@208942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f33ffcc6516a370ac04e9bc45f93c489949c4869","date":"2014-05-21T00:33:49.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"[modules] Add initial module map for libc++.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"117563c5163d27a0b4ac5a85ba3c930f948f98dd","date":"2014-05-21T16:02:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug 19740; round-tripping a pointer through a stream doesn't work\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209305 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b7e6921e204ed1e1b8c232872af123facbcad65","date":"2014-05-21T16:29:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix Bug 19678 - libc++ does not correctly handle the regex: '[^\\0]*'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209307 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"52a708fbcaf4d84412e502b0cbe504f86a361f01","date":"2014-05-23T15:30:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug 19840, where some tests were not testing what we wanted. Thanks to Eric for the bug report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209520 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f3368e2693029a9adcd5c3d20ff08cfb6457a20","date":"2014-05-29T01:10:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a problem exposed by r208825, which caused bind (and other bits of libc++) to stop working. And tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209785 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcafd80ace70abffc1acc58ddb8396c97936c1a1","date":"2014-05-29T05:02:22.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"Linux: Correctly identify valid error codes\n\n[syserr.errcat.objects]p4 specifies that\nsystem_category().default_error_condition(ev) map to\nerror_condition(posv, generic_category()) if ev could map to a POSIX\nerrno.\n\nLinux reserves up to and including 4095 for errno values, use this as a\nbound.\n\nThis fixes syserr.errcat.objects/system_category.pass.cpp on Linux.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209795 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d32add4a4870f505ab472d2fd30085af3a2d31cb","date":"2014-05-29T14:58:38.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"fix typo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209819 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c122d81beb12e8f560fa0e23c37ca2415e2c94e","date":"2014-05-30T12:09:47.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Add a _LIBCPP_CONSTEXPR that was missed in r170026.\n\n(clang doesn't complain about this, but gcc does.  This is necessary for a\nfollow-up patch that will enable _LIBCPP_CONSTEXPR for gcc.)\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209888 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e39915bdc53af92310dc76deab1213b204f24dd5","date":"2014-05-31T07:59:03.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Fix XFAIL condition from r208840\n\nThe XFAILs in r208840 were too general. They were meant to only apply\nto testing when use_system_lib was set.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@209972 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"360f3196d7a03633825bdeda42d26852c48591a7","date":"2014-06-02T02:22:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Preparation for <string_view>. More helper functions that can be shared between <string> and <string_view>. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210002 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4074d6ea3089e6d184fc5a50fb759e1d01be357a","date":"2014-06-02T12:00:08.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Remove unused code in a libc++ test.\n\nOther tests in this directory use this type, so it's probably copypasta from\nthere.\n\n(test_buf only forwards to the superclass in all tests where it's used though,\nso I wonder if it can be replaced with just using filebuf / wfilebuf\neverywhere?)\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210019 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2f0b5c9ae23e979838e9eaab1a02b37aaebaa98","date":"2014-06-02T23:37:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"First cut at a post c++14 status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210056 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8db32cc2ac3ee94eaec6a6f7d9d285c512ce8eb2","date":"2014-06-03T02:21:37.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"[libc++] random_device fails if open returns zero\n\nrandom_device::random_device(const string&) wrongly assumes that open\ncan only validly return a file descriptor greater than zero.\n\nThis results in random_device believing that it didn't successfully open\nthe device causing it to throw in it's constructor, this ends up leaking\na file descriptor.\n\nThe fix is simple, don't error on file descriptors which are zero.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210060 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4d9f97b40ba41e0409e0d0047948847907ed79ec","date":"2014-06-03T02:40:39.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"[libc++] Don't return uninitialized data from random_device::operator()\n\nMake sure we appropriately retry calls to read if the return result is\nless than what we asked for.\n\nAdditionally, check and handle IO errors: EINTR results in the read\noperation getting restarted; other errors turn into exceptions.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a546995787d679df8a372d99f00479063e43ba2","date":"2014-06-04T04:49:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a note about debug mode being non-functional\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0211e86a5edfbc0f55de0153d1756c1c879a4c66","date":"2014-06-04T15:46:56.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Make locales (and transitively, std::endl) work reliably with gcc.\n\nlibc++ currently relies on undefined initialization order of global\ninitializers when using gcc:\n\n1. __start_std_streams in iostream.cpp calls locale::id::_init, which assigns\n   an id to each locale::facet in an initializer\n\n2. Every facet has a static locale::id id, whose constructor sets the facet's\n   id to 0\n\nIf 2 runs after 1, it clobbers the facet's assigned consecutive id, causing\nexceptions to be thrown when e.g. running code like \"cout << endl\".\n\nTo fix this, let _LIBCPP_CONSTEXPR evaluate to \"constexpr\" instead of nothing\nwith gcc.  locale::id's constructor is marked _LIBCPP_CONSTEXPR, which ensures\nthat it won't get an initializer that could potentially run after the\niostream.cpp initializer. (This remains broken when building with msvc.)\n\nAlso switch constexpr-specific code in bitset to use __SIZEOF_SIZE_T__ instead\nof __SIZE_WIDTH__, because gcc doesn't define the latter.\n\nPair-programmed/debugged with Dana Jansens.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210188 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"981b01d9d039fc21124345322d154fc0c30028e4","date":"2014-06-04T16:25:58.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Make meta.trans.other/aligned_storage.pass.cpp pass on arm.\n\nThe maximum alignment on arm is 8, not 16 like on x86. Use alignof(max_align_t)\nto make the test work in both cases.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0707b67ac33ee7584be43a2ed2902e61006813b7","date":"2014-06-04T19:43:20.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"Handle partial nanosleeps in this_thread::sleep_for\n\nSignals may result in nanosleep returning with only some of the\nrequested sleeping performed.\n\nUtilize nanosleep's \"time-remaining\" out parameter to continue sleeping\nwhen this occurs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210210 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73c1fce21cb164d035ae2d432b30556127a2e836","date":"2014-06-04T19:54:15.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Use __builtin_operator_new/__builtin_operator_delete when available. This\nallows allocations and deallocations to be optimized out.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210211 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"20f0955062feb9c6d93652c34e1ba2e223ec7861","date":"2014-06-06T22:31:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Since we now have a value for __cplusplus for c++14, teach libc++ about it\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210380 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"281918b6aae5aa846992feaa7d6705daf03cd0f7","date":"2014-06-06T22:33:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Testing infastructure: A template for char_traits where all the functions are constexpr, and a comparison predicate which counts how many times it's been called.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5520bf5cbee2ebb3653188ccd85b4f83aea3cef8","date":"2014-06-09T23:27:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed damaged row in issues table; thanks to STL for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210500 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c743921e51ff615407f70e31a344e98cd862a720","date":"2014-06-10T18:29:36.000Z","author":{"name":"David Blaikie","email":"dblaikie@gmail.com"},"message":"Update Arcanist config to point to reviews.llvm.org\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210558 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c1345e3262d6dd4db6ac54ecd87c5191d54ded4d","date":"2014-06-10T18:46:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"A bunch of the char.traits tests were using unicode literals. #ifdef those bits out on c++03, since it doesn't support u\"\" and U \"\" style strings.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210560 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37025e1b32d44751243257975b9e3d45b2873266","date":"2014-06-10T18:51:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make the helper routines in string really be constexpr. This required a bit of refacoring in algorithm as well. Give them better names while we're at it. All of these are internal rotines; no visible functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210561 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"675dd5cc4f0494ea4362ce4de26805ea4801de1a","date":"2014-06-10T18:52:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark assign to be constepr only in c++14; can't have constexpr fns that return void in C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210562 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0bd40d6c3da6719fecf77038673d453ff1eab25b","date":"2014-06-10T20:26:54.000Z","author":{"name":"David Fang","email":"fang@csl.cornell.edu"},"message":"fixes duplicate header installation\nhttp://llvm.org/bugs/show_bug.cgi?id=18681\nPatch by Ryuta Suzuki <oroppas gmail com>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210577 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"164b297099f486abe42122fe1aefe7eb741b7acf","date":"2014-06-11T16:44:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement string_view from the library fundamentals TS (n4023). Also works in C++11 and 03, with reduced functionality (mostly in the area of constexpr)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210659 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04035d66d07c5090ca61512775c53a068ced5b75","date":"2014-06-12T23:19:55.000Z","author":{"name":"David Fang","email":"fang@csl.cornell.edu"},"message":"Revert \"fixes duplicate header installation\"\n\nThis reverts commit 0bd40d6c3da6719fecf77038673d453ff1eab25b.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@210857 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e4694b41295484e5c521d2c281de9330c6d60c79","date":"2014-06-18T17:44:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Formatting improvements in the <string_view> synopsis suggested by RSmith. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@211191 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba6dbf486612e6bc312a231e78f5e132e0519d70","date":"2014-06-24T00:46:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Some calls to get<>() were qualified. Some were not. Qualify them all. Fixes bug #20092. Thanks to Agustín Bergé for the bug report and the fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@211563 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44ead612371ad529cf06d0a454a4df52738edae4","date":"2014-06-24T20:32:11.000Z","author":{"name":"David Fang","email":"fang@csl.cornell.edu"},"message":"eliminate install of duplicate headers (take 2)\nPatch by Ryuta Suzuki\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@211629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81aa3a745c33c32215f94778f5b792bc5082f90d","date":"2014-06-26T01:07:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch from Albert J. Wong to make type_traits take advantage of gcc intrinsics in 4.7 and later. No functionality change when using clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@211755 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8c7abae667abc119017fb8675817ec5cd84f0cd","date":"2014-06-30T05:04:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add checking for the complexity guarantees in the standard\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212017 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"394451db81995a3a4a2645924ee4ac7829b90189","date":"2014-06-30T15:35:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a typo in the noexcept calculation for __compressed_pair::swap. Thanks to EricWF for the bug report and the fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212046 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f9e714071b3a018cc0ecb1269cdf5f17d8e4f8d","date":"2014-06-30T21:27:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix libc++ bug #20039: 'Constructing std::function from empty compatible std::function results in half-empty state' Thanks to Agustin Berge for the report, and for his and Eric Fiselier's work on a fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212070 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a61b30f3affb1ba9412793a0a570ac87e6d26b3","date":"2014-07-02T15:45:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Minor cleanup for string_view; mostly from suggestions by Richard Smith. Also, make the tests pass under c++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212185 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51349536aafb75735d478f7ac177b9a282783bce","date":"2014-07-08T15:19:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some failing tests for the standard containers. The tests were failing in 32-bit mode because they assumed that std::size_type and make_unsigned<ptrdiff_t>::type were always the same type. No change to libc++, just the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"484728789ed4aee35e62c031cb3392a5982a5d0f","date":"2014-07-08T22:38:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"string_view enhancements. Move to the correct namespace. Better constexpr support (thanks to Richard for the suggestions). Update the tests to match this. Add <experimental/__config for experimental macros/etc to live.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212569 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbeca21f26f6c9587085a624181ade335aa854bd","date":"2014-07-09T21:04:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a reset method to the counting predicates in the test suite\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212651 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7778249d2d036e4de2dcdd75a50130dd3a88e65f","date":"2014-07-10T15:19:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix warning in test - missing exception specifier for overload of operator new\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212723 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a64392627edf2f8f1ac80db5cd1cadd082269e13","date":"2014-07-10T15:20:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add support for BIONIC C library (Android). Patch from Dan Albert\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48e7e9f403e8ad6453d36e96a6e5a53a1c08b373","date":"2014-07-10T15:38:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Support the built-in type-trait support in gcc 4.7 and later. Thanks to Albert Wong for the patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@212727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ef03b79f96c9dff1c67db98a917e14d2cd8179a","date":"2014-07-16T01:00:26.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Change Windows decoration on some base classes\n\nMark the base classes for time_get_byname and time_get as _LIBCPP_TYPE_VIS_ONLY\nrather than _LIBCPP_TYPE_VIS.  These base classes are templated types and cannot\nbe stored with export dll storage.\n\nFixes compilation with _LIBCPP_DLL for Windows when the time_get and\ntime_get_byname classes are used.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213116 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b44e3dd49136179c49a81f34f14ce31005c6792","date":"2014-07-16T15:51:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Correctly implement LWG 2049; std::is_destructible.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213163 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad250c17df18a4dd8daaababde2578927dd9cdf3","date":"2014-07-17T05:06:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test commit: whitespace change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213222 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b2b60cab87f678d06ad8ff96d1f9b4cf5c7f52a","date":"2014-07-17T05:10:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test commit: Reverting whitespace changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213223 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fcc27286fb8d8b299d575aa899a1a21cb9d2d24","date":"2014-07-17T05:16:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change _LIBCXX_CONSTEXPR_AFTER_CXX11 to check for c++14 constexpr rules\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213225 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1a40264dcb88479e9227faaeb015da8e51fbe79","date":"2014-07-17T05:31:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/utility> header for LFTS. \n\nSummary:\nThis patch adds the `<experimental/utility>` header as specified in the latest draft of the library fundamentals TS.\n\n`<experimental/utility>` only contains `class erased_type`. \n\nThis patch also updates the documentation to list the `erased_type` class as \"initial implementation complete\".\n\nTest Plan:\nThree test cases where added:\n\n1. Test that `_LIBCPP_VERSION` is defined.\n2. Test that `<utility>` has been included.\n3. Test that `erased_type` is in the correct namespace and is constexpr default constructible.\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4510\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213226 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5549ccac174725e54d1be940a5404b70ced559a","date":"2014-07-17T15:32:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug #20335 - memory leak when move-constructing a string with unequal allocator. Thanks to Thomas Koeppe for the report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213269 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c2eac62c3574440b355337a219d0a9fceca2e6d","date":"2014-07-21T15:11:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In response to bug #20362, change the order of operations in vector move assignment so that if the allocator move assignment throws, we aren't left with two objects pointing at the same memory. This is not a complete fix; I am unconvinced that a complete fix is possible. With this change in place, we will leak the old contents of the vector. LWG issue #2106, when adopted, will make this problem illegal. Thanks to Thomas Koeppe for the report and analysis.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213546 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db5e54d2a33c1434441cdd39cd667fd4b83a32ac","date":"2014-07-21T15:15:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"make the same change as in 213546 for vector<bool>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213547 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb8757aca72be122181617cc1a0a97bf8ecb98c8","date":"2014-07-22T06:07:09.000Z","author":{"name":"David Majnemer","email":"david.majnemer@gmail.com"},"message":"Fix std::make_heap's worst case time complexity\n\nstd::make_heap is currently implemented by iteratively applying a\nsiftup-type algorithm.  Since sift-up is O(ln n), this gives\nstd::make_heap a worst case time complexity of O(n ln n).\n\nThe C++ standard mandates that std::make_heap make no more than O(3n)\ncomparisons, this makes our std::make_heap out of spec.\n\nFix this by introducing an implementation of __sift_down and switch\nstd::make_heap to create the heap using it.\nThis gives std::make_heap linear time complexity in the worst case.\n\nThis fixes PR20161.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213615 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc160f5c15f6e6aae10510711899a216c5ba5752","date":"2014-07-22T17:32:56.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix classic_locale for Android.\n\nAndroid's classic_locale begins at _ctype_ + 1.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213672 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de2404b16c2219491b748f704b5a2694dde2ef1b","date":"2014-07-23T16:58:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update the synopsis and comments with the results of LWG #2255. No code to back it up at the moment; just comments\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213768 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a52a3237fda5a24a917c08e7f7531fceac6d18d","date":"2014-07-23T19:32:03.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix ctype_base::xdigit for Android.\n\nAndroid's ctype implementation comes from openbsd, which for some reason\ndoesn't consider numbers to be hex digits.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213785 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08b8506930332309e73b9a609d7cd5dd7b9aafce","date":"2014-07-24T18:41:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"test commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213887 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9020c08989ed2d6f28f19926c2fb96a36d3b2f69","date":"2014-07-24T18:48:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"D4451: Fix copy/move issues casude by __tuple_leafs's converting constructor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213888 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ee7233c8072ef912e249e391b35168f559bb239","date":"2014-07-24T19:17:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] expose experimental::erased_type for all standard versions.\n\nSummary: The polymorphic allocator implementation would greatly benefit by defining virtual functions in the dynlib instead of inline. In order to do that some types are going to have to be available outside of c++1y. This is the first step.\n\nReviewers: mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4554\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@213889 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c6d1a88de31dac8034b85ef1f6f1d8f5f14a065","date":"2014-07-26T23:08:33.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Better defaults for in-tree libc++ with cmake.\n\nThis will detect if you are building libcxx in-tree and libcxxabi is\navailable.  If so, it will default to using the in-tree libcxxabi by\nsetting LIBCXX_CXX_ABI to \"libcxxabi\", LIBCXX_LIBCXXABI_INCLUDE_PATHS to\n\"${CMAKE_SOURCE_DIR}/projects/libcxxabi/include\" and will add \"cxxabi\"\nas a proper dependency.\n\nPatch by Russell Harmon.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214037 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d1965d8c2d9bf99e18b516b9e7fdcdaca9c4746","date":"2014-07-28T15:02:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#20471. Add a cast in __align_it to ensure that the bit twiddling is done at the correct size. A better solution, IMHO, would be to declare vector<bool>::__bits_per_word as 'size_type', rather than 'unsigned', but that's a possible ABI change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214088 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e515bbda1bef9f2eb203fd747a44a2ba7858ea44","date":"2014-07-28T19:25:44.000Z","author":{"name":"Alexey Samsonov","email":"vonosmas@gmail.com"},"message":"Fix linking with just-built libc++abi (added in r214037).\n\nPass target name (\"cxxabi\") to target_link_libraries(cxx ...) to ensure\nthat linker is able to locate just-built libc++abi in the build tree,\ninstead of relying on \"-lc++abi\" linker flag.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214114 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1757386944b0206e6f5210a6bb001ca89d80aabe","date":"2014-07-29T19:23:39.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Base regex code on char_class_type.\n\n__get_classname() and __bracket_expression were assuming that\nchar_class_type was ctype_base::mask rather than using\nregex_traits<_CharT>::char_class_type.\n\nThis change allows char_class_type to be defined to something other than\nctype_base::mask so that the implementation will still work for\nplatforms with an 8-bit ctype mask (such as Android and OpenBSD).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214201 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05d116eb871c182a135523f329970e148895e1e2","date":"2014-07-29T21:05:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"std::once_flag was forward declared with _LIBCPP_TYPE_VIS decoration, and the defined with _LIBCPP_TYPE_VIS_ONLY decoration. Make them match\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214219 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15269a8796029390c009f5ed97963687ad57249a","date":"2014-07-31T01:18:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix numeric_limits<XXX>::is_modulo for signed arithmetic types. We were reporting true, for all arithmetic types, which is incorrect. Fix the tests which were wrong, too. This fixes PR#20158.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214371 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5eb69601b730e4ff7d8acc99e18ec50c32b0a71","date":"2014-07-31T15:20:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add test cases for creating atomic types for trivially copyable types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f8821df709a87a35cb6f49c0b60a2c006677de0","date":"2014-07-31T19:09:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Remove use of default function template parameters in type traits. Fixes DR20484\n\nSummary: This patch moves the SFINAE for __is_destructor_welformed out of the function template parameters. type_traits must compile in c++03 mode since it is included in c++03 headers. \n\nTest Plan: No tests have been added.\n\nReviewers: danalbert, mclow.lists\n\nReviewed By: danalbert\n\nSubscribers: K-ballo, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4735\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ab406107dcdbe10ec2b3f2f8ce37129d132b71a","date":"2014-07-31T21:04:08.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Make Android's ctype_base::mask unsigned.\n\nKeeping the regex code sane is much easier if we match the other\nplatforms and use an unsigned mask.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214442 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3d01eac017f91616c5766230536890c22aad47d","date":"2014-07-31T22:56:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change lit.cfg to allow whitespace before comments\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214454 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c72b49ba0cfaaf0c19dc15f8fe8231f0f68d4054","date":"2014-08-01T01:59:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update linux test results file\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214474 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b127e600c4c6a43a94c2dc90eda1d12b70e56168","date":"2014-08-01T06:27:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update information about compiler used during linux tests and reformat run information.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214483 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32d4b65d56bb6c81689d829387c4d4360d16abb2","date":"2014-08-01T06:30:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adding ABI information to linux test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214484 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a1d32fcd0e14dff5961d785cc9a81fa1a389a89f","date":"2014-08-04T16:13:32.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Obey LLVM_LIBDIR_SUFFIX.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214726 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f0f1bca8615b4949e30903f19b5c7152b9813b59","date":"2014-08-04T17:32:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#202520 - predicate called too many times in list::remove_if. Add tests for list, forward_list, and the std::remove_if algorithm\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4ed5ca01e2b984687ce560b08c20c28ec3cae98","date":"2014-08-04T18:44:48.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add locales to available_features for tests.\n\nLinux has a lot of failures caused by not having support for certain\nlocales. Since these come out as a lot of noise in the test results,\nhave lit.cfg detect the presence of the various locales used in the\ntests and add them to config.available_features as locale.LOCALE_NAME.\n\nThis patch also adds REQUIRES: locale.REQUIRED_LOCALE to every test that\nI saw failing in this manner. We probably need to add more for all the\ntests requiring en_US.UTF-8, but we can do that on an as-needed basis.\n\nOne thing that concerns me is how many tests get skipped because of\nmissing locales (especially in regex/). We should make a point of\nsplitting up any tests that test default behavior _and_ behavior under a\ngiven locale so that we aren't losing coverage for default behavior.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214753 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"529d303340a8cdedc5bd97d33181ef96117cfecf","date":"2014-08-04T19:20:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a problem with reference_wrapper in C++03 that was causing counting predicates to fail. Add a test to make sure it works. However, most of the reference_wrapper tests still fail in C++03 mode, due to a lack of decltype. No change there.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214760 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c09c2865b9880c7425494fc0aa5f9700eb176d47","date":"2014-08-04T20:27:45.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix typo.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214768 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea8ed833fef032e5052d4444ea7adb00327f364b","date":"2014-08-05T01:34:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"dit pointed out on IRC that '__i = _VSTD::next(__i)' was a very long-winded way of writing '++__i'. Since I hate being thought of as long-winded (this checkin comment notwithstanding), I fixed it. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@214834 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2e8c04540be96d58ed72bc1e150df38a4e20ed8","date":"2014-08-08T06:53:30.000Z","author":{"name":"Viktor Kutuzov","email":"vkutuzov@accesssoftek.com"},"message":"Fix re-building in-tree libc++ against in-tree libc++abi\nDifferential Revision: http://reviews.llvm.org/D4805\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215186 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fca038e13322f658147ccbb98638c54c3bc47061","date":"2014-08-08T15:35:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"While reading LWG#526, Ion Gaztañaga noticed that libc++ didn't correctly handle list::remove(const value_type &x), if x was an element of the list. Added a test for this, and a fix. Thanks to Ion for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215210 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"095c3dd23e493b3233cbbe4299105c59046b3802","date":"2014-08-08T15:58:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Apply a similar fix to <forward_list> as I did for <list> in r215210. Again, thanks to Ion Gaztañaga for noticing this problem w.r.t LWG#526\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215213 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2af66e9851d36520deb10e4b719476a96a2ed899","date":"2014-08-09T02:39:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark math.h and cmath tests as xfail on linux.\n\nThese tests were marked as failing because the libc implementation does not\nuse the proper return type on certain math functions. There is other weirdness\nthat prevents us from defining our own version of these functions.\n\nThe failing tests in cmake were separated into their own files so that the rest\nfailures in the rest of the cmath tests were not hidden.\n\nThis was not done for the math.h test since we don't actually supply math.h\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae39e4f7956083cf20165208a84cbb2573309c84","date":"2014-08-09T02:43:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix copy and pasted comment in test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215276 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5eb396a8e6d399b105768a1102776c20349ab9e0","date":"2014-08-09T22:35:47.000Z","author":{"name":"David Blaikie","email":"dblaikie@gmail.com"},"message":"Add some extra checks to the MoveOnly test class to ensure it is not constructed or assigned from in a moved-from state.\n\nSome tests were constructing it with 0, so use -1 as the invalid state\ninstead.\n\nReviewers: Marshall Clow\n\nDifferential Revision: http://reviews.llvm.org/D4095\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215301 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ddcbcd6b5e049fd2cdf7c75381491587323f8db1","date":"2014-08-09T22:42:19.000Z","author":{"name":"David Blaikie","email":"dblaikie@gmail.com"},"message":"Revert \"Add some extra checks to the MoveOnly test class to ensure it is not constructed or assigned from in a moved-from state.\"\n\nPremature commit due to misreading CR feedback.\n\nThis reverts commit r215301.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215302 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e8b4232e33bb508a8d4cab189683b1a0c1055fe9","date":"2014-08-09T23:51:51.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Emulate clang atomic built-ins on gcc > 4.7\n\ngcc 4.7 and above has atomic built-ins which slightly different APIs\nfrom those provided by clang. Add proxy functions that wrap the gcc\nbuilt-ins to produce a symbol that is API equivalent to the clang\nbuilt-ins. This allows libc++'s atomic library to be used with gcc-4.7\nand newer.\n\nPatch contributed by Albert Wong.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215305 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67740670f980cf43bbc2daf352dff89fd6771008","date":"2014-08-10T20:56:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"NFC. Remove trailing whitespace and tabs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215326 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e48b0c40ad37cb38282e3005cfe1992922768f70","date":"2014-08-10T22:39:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix stdio.h test to reflect removal of ::gets in c++14\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9536101dcc36995794ea81a4f74b5f132211142","date":"2014-08-10T23:53:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"NFC. Move definition of _LIBCPP_ASSERT into __debug header and remove external include guards.\n\nThings done in this patch:\n\n1. Make __debug include __config since it uses macros from it.\n\n2. The current method of defining _LIBCPP_ASSERT is prone to redefinitions. Move\nthe null _LIBCPP_ASSERT definition into the __debug header to prevent this.\n\n3. Remove external <__debug> include gaurds. <__debug> guards almost all of its\ncontents internally. There is no reason to be doing it externally.\n\nThis patch should not change any functionality.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215332 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35d775d0e49a70207e0896ae7930e79b9b100336","date":"2014-08-11T15:12:46.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Update libc++ docs to include instructions for LIT.\n\nOkay, so this actually does more than just that. I've rearranged most of\nthe information on the page to try to make it more helpful and flow\nbetter.  Essentially, the differences between Mac and Linux, the various\nABI libraries, and in-tree versus out-of-tree builds were cluttering\nthings. To clean up, I've done the following:\n\n * Only describe the cmake process. buildit doesn't work out of the box\n   on Linux, and we need to stop having duplicates for every process.\n * Use libc++abi for the default instructions. This works on the major\n   platforms.\n * Describe both in-tree and out-of-tree builds. Previously it wasn't\n   clear that in-tree builds were even possible for libc++.\n * Separate the documentation about using libc++ from that about\n   building and testing libc++.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215358 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4124610c2257ba23390e6d28ef364f71e1c7dbd","date":"2014-08-12T00:06:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add return statement to slice_array and mask_array assignment. Closes PR20614.\n\nThis patch just adds the required return statements to slice_array::operator=\nand mask_array::operator=.\n\nTests were added to check that the return value is the same as the object assigned\nto.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215414 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5b34a5f5846aa8cdde987ecbf29a27d4b1da2c8b","date":"2014-08-12T00:48:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change two tests to be less dependant on locales.\n\nThis patch removes the use of the \"%c\" specifier for getting/setting times.\nThe semantics of this specifier differ between linux and Mac. I don't believe\nthe use of this specifier was important to the test.\n\nThe following tests now pass on linux.\ntest/input.output/iostream.format/ext.manip/get_time.pass.cpp\ntest/input.output/iostream.format/ext.manip/put_time.pass.cpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3b5f0e134e39c2961e1e93ae0770537bcb41506","date":"2014-08-12T17:32:07.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"[libc++] Fix the CMake build on Mac when setting MACOSX_DEPLOYMENT_TARGET=10.6\n\nThe build file was trying to use LIBCXX_VERSION, which isn't set\nanywhere, and also forgot to split the 'compile_flags' list.\n\nDifferential Revision: http://reviews.llvm.org/D4860\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215463 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"31b9c44aa7919241efdced9b7e3cffb5edae1005","date":"2014-08-15T04:15:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add bare_allocator archetype that implements the minimal possible allocator interface.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215691 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c808961618189e3b731b0f2e4364e46e7c3f767f","date":"2014-08-15T05:02:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix incorrect locale requirements in tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215694 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98c4e404ca8c524c54b4e7ede97b807355422b53","date":"2014-08-15T17:58:56.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Revert \"Turn off extern templates for most uses.\"\n\nTurning off explicit template instantiation leads to a pretty\nsignificant build time and code size cost. We're better off dealing\nwith ABI incompatibility issues that come up in a less heavy handed\nway.\n\nThis reverts commit r189610.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215740 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"101e2f3e06c1ac7ef5bcff662acf79e3c4f4b04c","date":"2014-08-15T18:00:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get testsuite running on FreeBSD.\n\nAdd initial support for using LIT to run the tests on FreeBSD. \nMore work may need to be done to add support for FreeBSD but this is a\ngood initial step.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efefe8ba34703ffcb5c3843999863d1a9e16fdf8","date":"2014-08-15T18:49:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert get testsuite running on FreeBSD.\n\nThere is a similar patch up for review. I'll submit my changes via that.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"09d8c46f3099b7a2bbb42ed65fcde8b9d5a0ed39","date":"2014-08-15T21:34:52.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Tame a few enum size tests when using -fshort-enums on ARM.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215769 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4b32a02fafb693aa2ad92e32ae1b94d07c8ce80","date":"2014-08-15T23:24:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Readding FreeBSD support to lit.cfg. Patch from Pawel Worach.\n\nPawel has been using this patch on his buildbots for a while. This should\nallow the testsuite to run on FreeBSD with libcxxrt.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215787 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dfe5e72ed3674980544419a741d4055b883c12d5","date":"2014-08-16T01:35:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Update the way the -std= flag is chosen by CMake and LibcxxTestFormat\n\nSummary:\nThis patch does two things:\nCMake Update:\n  - Add compiler flag checks for -std=c++11 and -std=c++1y and remove check for -std=c++0x.\n  - Add configuration option LIBCXX_ENABLE_CXX1Y to prevent/allow -std=c++1y from being chosen as the std version. LIBCXX_ENABLE_CXX1Y is set to OFF by default.\n  - if LIBCXX_ENABLE_CXX1Y is enabled then set LIBCXX_STD_VERSION to c++1y and fail if the compiler does not support -std=c++1y\n  - If c++1y is not enabled then use c++11 and fail if the compiler does not support c++11.\n\nLit Update:\n  - Update lit.site.cfg.in to capture LIBCXX_STD_VERSION information as config.std.\n  - Remove mentions of has_cxx0X configuration option.\n  - Check for `--param std=X' passed to lit on the command line.\n  - Choose the std for the tests either from command line parameter or (if it doesn't exist) the lit.site.cfg.\n\n\n\nReviewers: mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: emaste, rnk, ajwong, danalbert, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4329\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25a1516832c83a1368338d1e7ee1604f1a51bdaf","date":"2014-08-18T05:03:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add support for LLVM_USE_SANITIZER to libcxx when being built standalone and in-tree\n\nSummary:\nThis patch adds support for LLVM_USE_SANITIZER when being built in-tree and standalone. \n\nThis patch does the following things:\n1. define the LLVM_USE_SANITIZER option to \"\" when being built standalone. This also helps show we support it.\n2. Translate LLVM_USE_SANITIZER when standalone in a very similar way done in llvm/cmake/HandleLLVMOptions.cmake.\n3. Add config.llvm_use_sanitizer to lit.site.cfg.in\n4. Add code to translate config.llvm_use_sanitizer's value into the needed compile flags in lit.cfg.\n\nCurrently lit.cfg assumes that that the compiler supports '-fno-omit-frame-pointer' while CMakeLists.txt actually checks to see if its supported. We could pass this information to lit but I'm not sure its needed. \n\nReviewers: mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4949\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215872 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"781448f48a3e6e9c6a9785bc9e96a410e6045377","date":"2014-08-18T05:09:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark cuchar tests as always xfail since we don't provide the header'\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215873 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"caf1c029cb596beb79198c37a348b7621228811b","date":"2014-08-18T05:25:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add list of currently known buildbots to libc++ homepage\n\nSummary:\nInstead of having to update test results for different platforms it would be helpful to just supply links to buildbots that build+test libcxx.\nFor the FreeBSD bots Pawel Worach gave me the OK to link to them.\n\nReviewers: mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4947\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215882 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da98ce033ed9b57c8b4cdd673f878a4cbc08bc39","date":"2014-08-18T06:43:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add UNSUPPORTED tag to lit. It mirrors REQUIRES.\n\nSummary:\nThis patch adds support for // UNSUPPORTED: feature. If an excluded feature is found in the list of available features then the test is marked unsupported.\n\nI hope to use this to mark test unsupported if the fail with msan on asan. As well as tests that fail in particular standard modes.\n\n\nReviewers: mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4950\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215883 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"978faa00df0a6275a5538e9eae4811de3eee89b8","date":"2014-08-18T06:53:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update linux test results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215884 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6661ad10f205e0f3e3b37e13f91d8c79af88fbec","date":"2014-08-18T07:05:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add standard version to lit.cfg's available features\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215885 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f10d47bbc98e817fbb0485a9a28c1b67076629a","date":"2014-08-19T13:56:56.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Give libcxx tests temporary filenames that are actually unique.\n\nThis fixes a race condition on temp file name creation.\n\nhttp://reviews.llvm.org/D4962\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215977 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63648cffc0133ecd3ff237225767c281c7f6ee89","date":"2014-08-19T16:31:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix is_member_function_pointer does not account for ellipsis. PR20345. Patch from Agustin Berge.\n\nI reviewed the patch and added the test cases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215984 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc4bcf051b5512ca6d71d958b7321e69fe258662","date":"2014-08-19T16:33:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add extra test case for PR20345. Should have been commited with r215984\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215985 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"682132b4cce0bd974e1831801a78709732594a3a","date":"2014-08-19T17:52:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix missing include for ::close in platform_support.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@215998 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f523693f3fc983d65f73f8792fd7877c4e1efae8","date":"2014-08-21T02:03:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark localization ctype tests as XFAIL on linux.\n\nThis marks some of the localization test XFAIL on linux.\nThere has been some discussion on D4861 about doing this.\nPlease let me know if any of these tests for you on linux.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216148 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51642a4e81840dc99a01f5ceb593b5337620abe3","date":"2014-08-21T02:22:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark some localization monetary tests as XFAIL on linux.\n\nThis marks some of the localization test XFAIL on linux.\nThere has been some discussion on D4861 about doing this.\nPlease let me know if any of these tests for you on linux.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216150 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"501561910af0e06967e8d5ed4811de4b0dbaaf8f","date":"2014-08-21T02:38:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark some localization time tests as XFAIL on linux.\n\nThis marks some of the localization test XFAIL on linux.\nThere has been some discussion on D4861 about doing this.\nPlease let me know if any of these tests for you on linux.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216151 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f26672043e4f32282b70f433edf38f0f6114c99","date":"2014-08-21T04:21:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add self to credits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216154 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c26213103b88b50a24a6ab88afdcb1f88665a70","date":"2014-08-21T17:30:44.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Refactor lit.cfg.\n\nThe purely imperative format of the configuration performed in lit.cfg\nwas making merge conflicts with changes I have for Android an\nunbelievable pain in the ass. I've moved all of the configuration into a\nConfiguration class, with each piece of configuration happening in a\ndifferent method. This way I can avoid merge conflicts, and any new\nfeatures that get added (as have been done with the sanitizers, the -std\nflag, etc.) can be easily applied to Android as well.\n\nReviewers: mclow.lists, EricWF\n\nReviewed By: EricWF\n\nDifferential Revision: http://reviews.llvm.org/D4952\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216196 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae6e58c561a12e62d1306b9f4348af50c45dbb5d","date":"2014-08-23T04:02:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix handling of format strings to work with python 2.6\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216314 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1070916643cd3929600c26262c2aba9975ce37ba","date":"2014-08-23T04:33:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add --show-unsupported and --show-xfail to check-libcxx's default LIT args.\n\nSummary:\nIn order to gather more information about testsuite results these flags should be added to LIT's default args.\nThese new switches were recently added to LIT. It been more than two weeks since both switches were added.\nI think its time we add these to our LIT flags.\n\n\nReviewers: mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5037\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216315 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"69e7c057835594c6da3498db692ba914afa0497e","date":"2014-08-23T06:36:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add return statement to a test class's assignment operator. Defect found by Coverity Scan.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216317 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a564dc53dd2ad769f9845b6776b1023bdeacda61","date":"2014-08-23T07:55:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix assignments that should be comparisons x3\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216318 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4de32048f5da670567a00fcaea36ea8397a2824c","date":"2014-08-24T23:54:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug 20740 - std::set/std::map don't support heterogeneous lookup for count(). Thanks to Jim Porter for the bug report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216353 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"861f1e95fdd46da77e46ab7b5096b7f6efe2a544","date":"2014-08-25T14:53:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Replace 'noexcept' with '_NOEXCEPT' in <shared_mutex>. This allows us to build the dylib with MSVC, which doesn't support noexcept (sheesh\\!). Thanks to K-ballo for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32050e1e69bf324f4a210470409dc9a8df634b3e","date":"2014-08-26T22:29:00.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"[libcxx] Fix ctype_byname<wchar_t>::do_is() mask checking.\n\nThis patch: http://reviews.llvm.org/D5081\nOriginal patch: http://reviews.llvm.org/D5071 (from @danalbert)\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216497 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"116c819cc2619da0c7560b2cf33e9bdd7d9d0236","date":"2014-08-27T00:39:47.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Revert r216497: \"[libcxx] Fix ctype_byname<wchar_t>::do_is() mask checking.\"\n\nAfter discussing implementing more tests for this with @danalbert & @mclow, I\nrealized this change is not correct.\n\nThe C++ standard requires do_is() to behave as if it were a loop that checked\nis(). Furthermore, it requires is() to check \"The first form returns the result\nof the expression (M & m) != 0; i.e., true if the character has the\ncharacteristics specified\"... which the reverted patch definitely does not\nconform to. Even further, furthermore, this requires that ctype's mask be an\nactual bitmask, unlike what android and newlib provide for _ctype_.\n\nFixing the original bug that instigated this patch remains TBD.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216508 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9dc353cf113eedc98bd0bf7bf9597853ef2043ff","date":"2014-08-27T14:05:20.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Rename arguments in include/cmath to work around Newlib macro implementation using these particular names\n\nhttp://reviews.llvm.org/D5080\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216548 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b26c9661747076332c044f3baf903841494ab9d6","date":"2014-08-27T17:00:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark test types for <atomic> nothrow default constructible. Patch from Steve MacKenzie.\n\nThe way the standard currently specifies the default constructor for atomic<T>\nrequires T to be nothrow default constructible. This patch makes our test types\nmeet this requirement.\n\nNote: The nothrow default constructible requirment is subject to the outcome of\nLWG issue 1265.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216561 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e33e03e5580f48837391ff06843c3dcc057ff612","date":"2014-09-02T16:19:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#20834 - 'is_trivially_destructible yeilds wrong answer for arrays of unknown bound' Thanks to K-ballo for the bug report. Update a few of the other tests while we're here, and fix a typo in a test name.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216909 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9420936a47d38be984517075686d64c7affff42","date":"2014-09-02T20:34:23.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Newlib names ELAST differently than linux\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5780651c3a02a39812d961cb49fe47994b1fcaf","date":"2014-09-02T21:14:38.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Partially address a FIXME in steady_clock::now()\n\n  http://reviews.llvm.org/D4045\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216949 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0991323677f8fc69a96825582b3e58577e35c3ab","date":"2014-09-02T21:56:01.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Don't #define _LIBCPP_HAS_NO_MONOTONIC_CLOCK on __APPLE__\n\nThis fixes PR20839, which was a bug in r216949.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216975 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50508334bf60fc503f3bd5b5c30ec288a239a0c9","date":"2014-09-02T22:09:50.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Silence _LIBCPP_ELAST porting warning on __APPLE__\n\nThis fixes a warning accidentally introduced in r216943.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216977 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"497f912ab21d5f82795d50bf6fa847da8fdd39e0","date":"2014-09-02T23:43:38.000Z","author":{"name":"Kostya Serebryany","email":"kcc@google.com"},"message":"[asan] Make vector asan annotations exception-friendly\n\nFix vector asan annotations with RAII.\nAdd a test.\nAlso, remove one dead function.\nReview: http://reviews.llvm.org/D4170\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216995 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d7b9944b2d758a1abec619d2edd3e769575ce07","date":"2014-09-02T23:49:15.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix build breakage introduced in r216949\n\nThe bug shows up on systems that `#define _POSIX_CLOCK_MONOTONIC 0` to indicate\nthat users of CLOCK_MONOTONIC must check sysconf at runtime.\n\nSee: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/unistd.h.html\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216997 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb093955e9b3415be459fcb04822e932a690dc7f","date":"2014-09-02T23:52:46.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix comment that was obsoleted by r216949\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@216999 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc685481dcf6ad0c165ca3de01ec0418601e9079","date":"2014-09-03T00:29:02.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix yet another aspect of the build breakage caused by r216949\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217001 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"837cfe50fe00b3280dda4513b305002a69346f98","date":"2014-09-03T04:32:08.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"test: Allow using clang -verify for failures rather than exit 1\n\nCurrently, failure tests work by checking that compilation exits 1.\nThis can lead to tests that fail for the wrong reason, so it'd be\npreferable to convert them to check for specific errors.\n\nThis adds use_clang_verify parameter that runs failure tests using\nclang's -verify flag. I'll convert some tests in subsequent commits,\nand once all of the tests are converted we should key this on whether\ncxx_under_test is clang.\n\nI've also converted one of the unique.ptr tests, since it's the one\nthat motivated the idea of using clang -verify when possible in the\nreview of r216317.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217009 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"438d2cb25db812bc2141bd9075566ec068e61ce3","date":"2014-09-03T05:47:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix buffer overflow issue in valarray test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"464da3b76c0dd37df6d0b11740fa694c15b33372","date":"2014-09-03T06:01:52.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"test: Make it possible to opt in to use_clang_verify per test\n\nThis modifies the use_clang_verify parameter I added in r217009 to\nonly apply to tests that specifically ask for it via // USE_VERIFY.\nThis allows us to incrementally convert tests, but start enjoying the\nbenefits right away.\n\nSuggested by Eric Fiselier in code review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217017 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5907f03123a9b8bc2e31fd671fc5eeae1dd8dc73","date":"2014-09-03T14:30:39.000Z","author":{"name":"Alexey Volkov","email":"avolkov.intel@gmail.com"},"message":"Allow libc++ to be built with GCC 5.0 compiler\n\nDifferential Revision: http://reviews.llvm.org/D5169\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217038 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f4ca8b34029769a6b6c2ac4b69fa5bdd1833ea1","date":"2014-09-03T18:48:28.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Detection for _LIBCPP_HAS_NO_MONOTONIC_CLOCK caused several more build breakages\n\nRemove it for now. This flag can be set in build scripts instead.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26f472d1dd1ec69947add80a99ffe35312491793","date":"2014-09-03T21:37:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make the ASAN RAII object a nop when building w/o ASAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217082 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60a74bd69d73e0bfcf5a450e05a69ae06277d30a","date":"2014-09-04T13:25:46.000Z","author":{"name":"Viktor Kutuzov","email":"vkutuzov@accesssoftek.com"},"message":"Define ELAST in libcxx's config header on FreeBSD\nDifferential Revision: http://reviews.llvm.org/D5165\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217146 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"217bdc189a7950347276381ff7cc8c69327f9257","date":"2014-09-05T17:21:57.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Set -D_LIBCPP_HAS_NO_THREADS and -D_LIBCPP_HAS_NO_MONOTONIC_CLOCK based on available_features\n\nhttp://reviews.llvm.org/D5214\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217261 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d634a2c4047a5d7cfdf255c58b574a9addd4d494","date":"2014-09-05T19:03:46.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Bugfix: allow additional_features to be empty\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217268 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d86b2e6867297fb2109824c67c50de67f3a31f2","date":"2014-09-05T19:45:05.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Allow libc++ to be built on systems without POSIX threads\n\nIf you're crazy enough to want this sort of thing, then add\n-D_LIBCPP_HAS_NO_THREADS to your CXXFLAGS and\n--param=additiona_features=libcpp-has-no-threads to your lit commnad line.\n\nhttp://reviews.llvm.org/D3969\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"baed05dd373652596db041a469ed655c5ee49e50","date":"2014-09-05T20:28:44.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Address some post-commit review comments on r217261\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217276 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ba3c57565e6658d8265b028a61c5731cf899495","date":"2014-09-06T20:38:25.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"PR20546: Fix tests for compare_exchange_weak.\n\nThese calls are allowed to fail spuriously.\n\n29.6.5.25:\n\n    Remark: A weak compare-and-exchange operation may fail spuriously.\n    That is, even when the contents of memory referred to by expected\n    and object are equal, it may return false and store back to expected\n    the same memory contents that were originally there. [ Note: This\n    spurious failure enables implementation of compare and-exchange on a\n    broader class of machines, e.g., load-locked store-conditional\n    machines. A consequence of spurious failure is that nearly all uses\n    of weak compare-and-exchange will be in a loop.\n\nTo fix this, we replace any assert() that expects\nstd::atomic::compare_exchange_weak() to return true with a loop. If the\ncall does not return true within N runs (with N currently equal to 10),\nthen the test fails.\n\nhttp://llvm.org/bugs/show_bug.cgi?id=20546\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217319 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"546eca8dc6083c5d3618a28c95430ab959fa0849","date":"2014-09-16T15:27:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Some of the synopsis was left out of these headers, and the copy construction/assignment should have been marked as deleted. Done. No functionality change, because the base class (base_ios) was marked as non-copyable already.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217876 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1fae17224dd25ead16bb4e57a0e81f932768d1e","date":"2014-09-16T15:33:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Forgot 'const' on my last checkin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217877 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12929a957b9fa2f767bb6348b67117c0d2f4e3e8","date":"2014-09-16T15:36:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a bad noexcept clause in tuple's move constructor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217878 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86d311c5f3dbca4cd7845f107db29d61df14d046","date":"2014-09-16T17:08:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Thanks to K-ballo for noting a second incorrect noexcept clause in tuple - and suggesting a more correct way to write the first\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217884 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4413ab09d543e40daa5c62f5cf5ecfb4d066199a","date":"2014-09-16T18:57:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a bug in the move-assigment operator for basic_stringbuf. Thanks to Johnathan Wakeley for the bug report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217894 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"270f8e01e86443ea356fe27039b5a6856fddafd6","date":"2014-09-16T20:38:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Create a 'comma_iterator' class that overloads operator, and asserts when it's called. Add tests to mismatch to make sure it can't be blindsided by such an evil iterator. More tests for other algorithms forthcoming. Thanks to STL for pointing this out at CppCon and Yakov Galka for opening LWG issue #2133\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217902 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d402a4da6bfdf4484afb6957661f1dbddbda2e5f","date":"2014-09-16T20:40:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for mismatch to handle evil iterators which overload operator comma\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217903 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb9902ec97cd2d8f34c316eafe75437af2ff46b0","date":"2014-09-17T01:58:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"K-ballo pointed out *another* mistype in my change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217936 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01c6bbd9477a7c7a644f63338873798cc372ca07","date":"2014-09-17T04:09:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add include of <cassert> for the operator comma\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217938 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d9505ad8aced67f56a6e1f4eac78c24a2e4af0b","date":"2014-09-17T16:34:29.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix char_traits functions for GCC compatibility.\n\nGCC 4.9 fails to inline these functions at -O1 because they are used\nindirectly. Declare them as inline instead of always_inline. Discussion\nin GCC bugreport: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63220\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217961 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ffb8d0fbee0fb591646674f28bc54ed9dc16e43","date":"2014-09-17T18:33:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#20843: binomial_distribution<unsigned> is broken. Add test to ensure that signed and unsigned verstions produce the same sequence.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@217976 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6a5a8abe2f14559c017bcb015f1f19779ddc1308","date":"2014-09-19T20:09:12.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Support newlib as libc++'s C library [locale part]\n\nhttp://reviews.llvm.org/D5385\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@218144 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d132bf4ef1259f0fe09dc2578ea63fa72800a691","date":"2014-09-22T23:58:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some type-traits (is_assignable, etc) dealing with classes that take non-const references as 'right hand side'. Add tests. Fixes PR# 20836\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@218286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"300da4f9b0cadbc6c4cec4deb777e5ca6bb938a3","date":"2014-09-23T14:42:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix installation of ABI headers. Fixes PR20936\n\nSummary:\nI changed the build so that each ABI header gets its own install rule. This gives us the flexibility to install different headers in different directories. \nThis also fixes the problem where libstdc++ bits/<header>'s were not being installed under a bits directory.\n\nTest Plan: I tested this patch on linux against libstdc++ and libcxxabi.\n\nReviewers: danalbert, mclow.lists, jroelofs\n\nReviewed By: jroelofs\n\nSubscribers: jhunold, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5454\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@218309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8758796fc9bab80d2d405678d8874a860b14974f","date":"2014-09-24T04:44:54.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Mark module atomic as cplusplus11.\n\nWith clang, the header atomic requires __has_feature(cxx_atomic), which is only\ntrue in c++11 mode. Because of this, when using modules in c++98 with libc++\ncompilation of the std module would fail without this change, PR21002.\n\n(With gcc, only gcc4.7+ is needed, no c++11. But gcc doesn't have modules yet,\nand the module.modulemap language can't express things like \"this is only\nrequired if the compiler is clang\". If gcc gets module support, we'd probably\nhave a module.modulemap file for each compiler that libc++ supports?)\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@218372 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c888397167ac6b3c6a88987dc5823aa13bba7e7","date":"2014-10-06T20:06:33.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix win32 support header for mingw32.\n\nThese functions are defined as static in the mingw32 headers.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219140 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df9722ecf1c1bdffe53f5eff23120647193f033f","date":"2014-10-07T21:42:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for PR 19616: 'tuple_cat of nested tuples fails in noexcept specification'. Thanks to Louis Dionne for the fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219243 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbc7c74fbb0d791e5c106f0653476fbe92e6b2ee","date":"2014-10-15T10:33:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixes PR21157 'tuple: non-default constructible tuple hard failure' Thanks to Louis Dionne for the bug report and the patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219785 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a43d1141b9a3a78b586b1c33958339895ebc428d","date":"2014-10-16T02:48:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add my buildbot to list of libc++ buildbots in documentation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219894 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"798b2ac28f5128c93ef552c96b2a918fc1d12d32","date":"2014-10-16T03:15:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bad link in documentation. Thanks to rsmith\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219898 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66d529f0ad9ee6e8626be1fe13724ca5c8a199a8","date":"2014-10-16T23:21:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add support for LLVM_USE_SANITIZER=Undefined\n\nLLVM_USE_SANITIZER=Undefined support was added to the LLVM CMake configuration.\nUpdate libc++'s handling of LLVM_USE_SANITIZER to support this as well.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219987 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"950ee77d249141950e94e3f3c48e7bac2839a1ff","date":"2014-10-17T00:31:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix SFINAE in <cmath>. Patch from K-Ballo.\n\nDelay instantiation of `__numeric_type` within <cmath>, \ndon't instantiate it when the `is_arithmetic` conditions do not hold as it causes\nerrors with user-defined types with ambiguous conversions. Fixes PR21083.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@219998 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9071bc098be3d8b04772035c157fc43f2c7538a5","date":"2014-10-18T01:15:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add support for building and testing with an ABI library not along linker paths\n\nSummary:\nThis patch adds support for building/testing libc++ with an ABI library that the linker would not normally find.\n\n- `CMAKE_LIBRARY_PATH` is used to specify the list of search directories.\n- The ABI library is now found using `find_library` instead of assuming its along the linker's search path.\n- `CMAKE_LIBRARY_PATH` is passed to our LIT config as `library_paths`.\n- For each path in `library_paths` the following flags are added `-L<path> -Wl,-rpath -Wl,<path>`\n\nSome changes in existing behavior were also added:\n- `target_link_libraries` is now passed the ABI library file instead of the library name. Ex `target_link_libraries(cxx \"/usr/lib/libc++abi.so\")` vs `target_link_libraries(cxx \"c++abi\")`.\n- `-Wl,-rpath -Wl,<path>` is now used on OSX to link to libc++ instead of env['DYLD_LIBRARY_PATH'] if `use_system_lib=False`.\n\n\n\n\nReviewers: mclow.lists, danalbert, EricWF\n\nReviewed By: EricWF\n\nSubscribers: emaste, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5038\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220118 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b53c1095fd666690898d7fa247709e593aa393f","date":"2014-10-18T02:19:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add special case for finding the in-tree ABI library.\n\nWhen libcxx is built in-tree with libcxxabi it links against libcxxabi using\nthe name of the cmake target and not the actual library name. The cmake target\nwill not work with `find_library()`, so it needs special case handling.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220121 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"38d9005902eabf7a750804098a3b05537eb85fd5","date":"2014-10-18T11:03:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Whitespace maintenance. Remove a bunch of tabs that snuck in. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220142 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4c53dacafe0ee3a08ba602f3cc6645815bbdfb0","date":"2014-10-19T00:10:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unused variables in tests to placate scan-build. Patch from Steve MacKenzie.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220154 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb7e32c2909fab8487f66a320379a06f7a28b7c2","date":"2014-10-19T00:42:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Redo adding support for building and testing with an ABI library not along linker paths\n\nSummary:\nThis is the second attempt at allowing for the use of libraries that the linker cannot find. The first attempt used `CMAKE_LIBRARY_PATH` and `find_library` to select which ABI library should be used. There were a number of problems with this approach:\n\n- `find_library` didn't work with cmake targets (ie in-tree libcxxabi build)\n- It wasn't always possible to determine where `find_library` actually found your library.\n- `target_link_libraries` inserted the path of the ABI library into libc++'s RPATH when `find_library` was used.\n- Linking libc++ and it's ABI library is a special case. It's a lot easier to keep it simple. \n\nAfter discussion with @cbergstrum a new approach was decided upon.\nThis patch achieve the same ends by simply using `LIBCXX_CXX_ABI_LIBRARY_PATH` to specify where to find the library (if the linker won't find it). When this variable is defined it is simply added as a library search path when linking libc++. It is a lot easier to duplicate this behavior in LIT. It also prevents libc++ from being linked with an RPATH.\n\n\n\n\n\n\nReviewers: mclow.lists, cbergstrom, chandlerc, danalbert\n\nReviewed By: chandlerc, danalbert\n\nSubscribers: chandlerc, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5860\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220157 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"499b1ad671a9a975a9ae88342f036e26c4c17379","date":"2014-10-21T02:46:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove dead buildbot link\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220260 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8148fdb5d2533cc57cefc874c46e00759df4d52f","date":"2014-10-21T15:05:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG #2212 (not yet adopted) mandates that tuple_size/tuple_element are available if <array> or <utility> are included (not just <tuple>). We already do this. Add some tests to make sure that this remains true.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220295 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a655fdde58871722ba07fac0a4da2307d41e84c","date":"2014-10-21T15:07:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Some tests used __typeof__ instead of decltype. Replace these usages.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220296 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3de9baafbaadd87fb47c93fe22e3ab4d9f22e6d7","date":"2014-10-23T02:54:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add -ldl to libc++ tests when sanitizers are used.\n\nClang 3.6 no longer links the sanitizer runtime library dependancies when\n-nodefaultlibs is used. This patch manually links in a missing dependancy.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220463 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b82e151fe0849d71ab122d9d6634a4a37d31e5a","date":"2014-10-23T03:57:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a couple of failing tests for C++03 by checking for rvalue reference support first.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220465 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4e7d53664dbe78eecc04f4e0ba0980bb9641ad8e","date":"2014-10-23T04:12:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for \"fancy\" pointers to shared_ptr. Fixes PR20616\n\nSummary:\nThis patch add support for \"fancy pointers/allocators\" as well as fixing support for shared_pointer and \"minimal\" allocators.\n\nFancy pointers are class types that meet the NullablePointer requirements. In our case they are created by fancy allocators. `support/min_allocator.h` is an archetype for these types.\n\nThere are three types of changes made in this patch:\n1. `_Alloc::template rebind<T>::other` -> `__allocator_traits_rebind<_Alloc, T>::type`. This change was made because allocators don't need a rebind template. `__allocator_traits_rebind` is used instead of `allocator_traits::rebind` because use of `allocator_traits::rebind` requires a workaround for when template aliases are unavailable.\n2. `a.deallocate(this, 1)` -> `a.deallocate(pointer_traits<self>::pointer_to(*this), 1)`. This change change is made because fancy pointers aren't always constructible from raw pointers. \n3. `p.get()` -> `addressof(*p.get())`. Fancy pointers aren't actually a pointer. When we need a \"real\" pointer we take the address of dereferencing the fancy pointer. This should give us the actual raw pointer.\n\nTest Plan: Tests were added using `support/min_allocator.h` to each affected shared_ptr overload and creation function. These tests can only be executed in C++11 or greater since min_allocator is only available then. A extra test was added for the non-variadic versions of allocate_shared. \n\nReviewers: danalbert, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4859\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4d2413ca4bc8b67e3e5a68069e117e8b7a8ec27d","date":"2014-10-23T06:24:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for \"fancy\" pointers to promise and packaged_task.\n\nSummary:\nThis patch is very closely related to D4859. Please see http://reviews.llvm.org/D4859 for more information.\n\nThis patch adds support for \"fancy\" pointers and allocators to promise and packaged_task. The changes made to support this are exactly the same as in D4859.\n\n\n\nTest Plan: \"fancy\" pointer tests were added to each constructor affected by the change.\n\nReviewers: danalbert, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4862\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220471 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0ab096796abf42d57a2211fb7b7c385d38d116b","date":"2014-10-23T16:51:12.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Make headers available in the build directory\n\nThis essentially re-does r194825 and makes it possible to run clang\nwith libc++ without having to install it, even if you don't have any\nversion of libc++ installed in /usr/.\n\nThis behaviour broke in r210577/r211629, which fixed pr18681.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220489 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29151f64e4ecf2810568012ab34cf1c09c7d585e","date":"2014-10-23T20:45:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Only link tests against -ldl on linux\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"79578cd14ff1f4579b31ae666e869d19eac97232","date":"2014-10-23T21:17:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] XFAIL all currently failing libc++ tests for linux.\n\nSummary:\nPretty please? We now have a significant number of builders that test libc++. I really want those builders to be green.\nMost of these failures are due to differences in locale data, including those in regex. I will continue working on fixing the locale and regex tests but there is no consensus on what the correct direction to go. \n\nSince the builders display a list of XFAIL tests they are by no means hidden. It just means they are expected failures. Now unexpected failures won't get mixed in with well known and expected failures.\n\nReviewers: mclow.lists, jroelofs, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5941\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220512 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5636e63563194403a4c17e53b7bb6fae7ae8d2a2","date":"2014-10-23T22:57:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change uses of `sys.platform == 'linux2' to `sys.platform.startswith('linux')\n\nAlthough the current method is valid up till python 3.3 (which is not supported)\nthis seems to be a clearer way of checking for linux and moves the tests towards\npython 3 compatibility.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220534 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"129e07fe993d168f3a1270f8e8aa811740337d9b","date":"2014-10-26T20:29:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change the comment on the closing #endif to match the condition on the corresponding #ifdef. Thanks to K-ballo for the catch. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220647 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d306de1a7c40ded8eec50b2a651e2658cb91ed8","date":"2014-10-27T19:08:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"PR #21321 talked about implementation-defined behavior of realloc. I poo-poohed it, and was wrong. Fix the call in <locale>. Review the others, refactored some duplicated code, and found overflow bugs (and __event_cap_ was never getting updated, either).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220702 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b991975439708ba59703623b62c4cebe955b74e8","date":"2014-10-27T19:28:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix use of operator comma where the types can be user defined\n\nSummary:\nAn evil user might overload operator comma. Use a void cast to make sure any user overload is not selected.\nModify all the test iterators to define operator comma. \n\nReviewers: danalbert, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5929\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220706 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e4e883e6c84c840ad450c2468ee2663999970316","date":"2014-10-27T19:29:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Remove use of uniform initialization from regex tests so that they compile in C++03.\n\nReviewers: danalbert, jroelofs, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5957\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62a0e01343c3d0f0cbec27e31fcbc409e6e4aa23","date":"2014-10-27T20:26:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of operator comma in is_permutation and delete comma operator for test iterators.\n\nThe comma operators in the test iterators give better error messages when they\nare deleted as opposed to not defined. Delete these functions when possible.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220715 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bff83f9aabafd7b0e4e0a35489f01b316d094612","date":"2014-10-27T20:29:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] use clang's __char16_t and __char32_t definitions on Linux in C++03 mode.\n\nSummary: This fixes ODR violations in C++03 mode in test/localization/locale.stdcvt. The special case for linux was introduced in 2010 before clang always defined __char16_t and __char32_t.\n\nReviewers: mclow.lists, danalbert, jroelofs, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5930\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4889a16c9f45bf83fd9ddc46982a30613e890c4c","date":"2014-10-27T21:38:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add test to ensure including <atomic> fails when _LIBCPP_HAS_NO_THREADS is defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220722 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b0f03a2a799ac92ded39c4156f7a2b1360f0aae","date":"2014-10-27T22:14:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add special case handling of linux target triples that do not contain `-gnu`.\n\nFor targets that end it `redhat-linux` and `suse-linux` manually add the `-gnu`\nsection of the target since `linux-gnu` is needed in the testsuite.\n\nThis patch also moves the removal of minor and patchlevel numbers from OSX\ntriples to be handled when deducing the triple instead of when adding available\nfeatures.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf85245c088c3b887bfb3b95663e15a8eaae9f41","date":"2014-10-27T22:39:19.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Test that the single-threaded lit feature is available iff the corresponding guard is #defined\n\nhttp://reviews.llvm.org/D6006\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"522aaf67ea4dbda95504fb2940655c5df8e353ee","date":"2014-10-28T06:31:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Delay evaluation of __make_tuple_types to prevent blowing the max template instantiation depth. Fixes Bug #18345\n\nSummary:\nhttp://llvm.org/bugs/show_bug.cgi?id=18345\n\nTuple's constructor and assignment operators for \"tuple-like\" types evaluates __make_tuple_types unnecessarily. In the case of a large array this can blow the template instantiation depth.\n\nEx:\n```\n#include <array>\n#include <tuple>\n#include <memory>\n \ntypedef std::array<int, 1256> array_t;\ntypedef std::tuple<array_t> tuple_t;\n\nint main() {\n  array_t a;\n  tuple_t t(a); // broken\n  t = a; // broken\n\n  // make_shared uses tuple behind the scenes. This bug breaks this code.\n  std::make_shared<array_t>(a);\n}\n```\n\nTo prevent this from happening we delay the instantiation of `__make_tuple_types` until after we perform the length check. Currently `__make_tuple_types` is instantiated at the same time that the length check .\n\n\nTest Plan: Two tests have been added. One for the \"tuple-like\" constructors and another for the \"tuple-like\" assignment operator. \n\nReviewers: mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: K-ballo, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4467\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220769 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a01a62391cb8988be45fca196bd1064548ff4266","date":"2014-10-28T18:03:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix example in documentation of target triple sanitization.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220804 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3fdac97f2a96f75b82dc490f8bf9d4a13bd49a05","date":"2014-10-29T23:14:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"libcxxrt now implements bad_array_new_length and need to gaurd against multiple defines. Patch from Baptiste Daroussin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@220882 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f53135f39b3b4ac0a315aa92a0abb36e8ad3c62f","date":"2014-11-01T00:11:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"libcxxrt defines bad_array_new_length::what() so move that into a conditional compilation block\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221025 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3be7f19317c67815d8ea92da2d708a20733e8274","date":"2014-11-01T00:41:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Partial fix for building w/ libcxxrt on OSX. Patch from C Bergstrom.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26aa8c92549d96285ee34b969ea088da56debf60","date":"2014-11-02T15:35:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark string_view::to_string as const. Fixes PR21428\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1de15f518f29c2805a16b27790a2c76abe49518b","date":"2014-11-04T01:54:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add test for type properties of std::reference_wrapper\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221224 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72aab5f4784c10846d3ce21a8ce6c55434772b97","date":"2014-11-04T05:11:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark tests that replace operator new/delete as UNSUPPORTED with ASAN and MSAN.\n\ntests that replace operator new/delete won't link when using ASAN and MSAN \nbecause these sanitizers also replace new/delete.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"829a84308e40964fb63a7a7154d21491dde5f298","date":"2014-11-04T05:36:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Actually mark the tests an unsupported with MSAN (not just ASAN)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221240 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"69697c8506fb47fe160c0327caa2cd8bd8f6aded","date":"2014-11-04T17:03:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark another test as UNSUPPORTED with ASAN and MSAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"341b59021c5cc247fd879f2fad3425cd492f2832","date":"2014-11-05T20:59:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix operator & detection trait to check for free function overloads as well\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221395 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6e0ef2deb368009add8edba9e3606b08e32cfe0","date":"2014-11-05T21:20:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix rvalue bug in  __has_operator_addressof\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221398 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e895c1fd769e08804f25d233f0733c40eaf38a9","date":"2014-11-10T15:43:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status pages for C++1z\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f305aefa05d4c78010aac3fa177e1fe9d339840","date":"2014-11-11T00:16:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"EricQWF's code coverage work showed that none of the libc++ tests were exercising some code in vector<bool>. Add more tests in an attempt to get better coverage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221644 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac2380546420d202bd22234022f0c91493f3480c","date":"2014-11-11T16:44:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added vector<T>::insert tests suggested by code coverage results\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221689 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7b233d1de1cea51c4121d9ddd8cc2a4b68587c1","date":"2014-11-11T16:45:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a typo in a paper name: 4190 --> N4190\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221690 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f5579f0b228326052d9f0f3b01d3deef360fd23","date":"2014-11-11T19:22:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix typo in allocator_traits::construct. This fixes PR14175, which shows up if an allocator has a no-args construct method\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1cf810b81bb7fab6dfbb9075a134c67621db6852","date":"2014-11-11T22:07:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Replaced checking in string_view::remove_suffix/remove_prefix by _LIBCPP_ASSERT, since this is technically undefined behavior. Fixes PR#21496\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2138b1808007a8d5dbc0b6a3109cae3dea1fec2e","date":"2014-11-13T22:45:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark more locale tests as unsupported with ASAN and MSAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221937 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05123a8d9f1cd4363af762ffefbf97d1b0cb0e40","date":"2014-11-14T02:07:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add -O3 when testing with UBSAN. This triggers far undefined behaviour\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221964 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44678f40586629d16887285b45b48d9020a0f5d0","date":"2014-11-14T02:47:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Setup llvm-symbolizer when running the tests with sanitizers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71915c132a240914835eaeb57cb66a05132d0ec2","date":"2014-11-14T02:55:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark more tests as UNSUPPORTED with ASAN and MSAN.\n\nThese tests fail for 2 reasons when using ASAN and MSAN.\n1. If allocator_may_return_null=0 they will fail because null is returned\n   or an exception is thrown.\n2. When allocator_may_return_null=1 the new_handler is still not called. This\n   results in an assertion failures.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c3b15d33952ef3a8d29e84fdfc459eac014c698","date":"2014-11-14T03:16:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Split string capacity test into two parts and mark one part as UNSUPPORTED when using sanitizers.\n\nThe test is split such that:\n- max_size.pass.cpp tests that string::resize() fails to allocator for max_size\n  and max_size -1\n- over_max_size.pass.cpp tests that string::resize() throws a length error for\n  max_size + 1\n\nThe test was split into two because max_size.pass.cpp cannot pass with \nsanitizers but over_max_size.pass.cpp can.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@221969 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d75909588784c5c4bd96b90006d3743f7dcb6de2","date":"2014-11-14T18:28:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix vector annotator size increase in `vector::insert(pos, count, value)`\n\nSummary:\nThe size of the vector is being increased by `__n` during the call to `__move_range` and not by 1.\nThis fixes a test failure in `containers/sequences/vector/vector.modifiers/insert_iter_size_value.pass.cpp` when using ASAN.\n\nReviewers: danalbert, kcc, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6264\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222014 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50ada3a8f7be63729b45035625cdd035f00a5cac","date":"2014-11-14T19:10:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix memory leak in strstream tests.\n\nSummary: The strstream function `str()` sets `freeze(true)`. When `freeze` is true the destructor is not allowed to free any dynamically allocated memory. The memory leak causes ASAN to fail on these tests. To ensure memory is deallocated `strstream.freeze(false)` is called at the end of the tests.\n\nReviewers: danalbert, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6261\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222025 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd2848735ac1783ce1beacf4c87c5c0bca9bf616","date":"2014-11-14T20:38:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add -gline-tables-only when compiling w/ sanitizers in RELEASE\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222035 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1383dc5bd076263bb1c5750741041213af877b56","date":"2014-11-14T22:18:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"add debug info when compiling sanitizer tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222051 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"017e1aab88c002bac7655e907b74bacea6845b08","date":"2014-11-14T22:23:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Initialize pointer in string conversion helpers to prevent MSAN diagnostic.\n\nSince the initialization of the pointer happens across the libc library boundry\nMSAN will not know the pointer was initialized. This fixes MSAN failures in\ntest/strings/string.conversions.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0364baca049b0e4b8d23b9e99a581df09f97440a","date":"2014-11-15T01:58:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Split thread test into two parts. Mark one as XFAIL with ASAN.\n\nThe second part of the test checks that std::terminate is called when a running\nthread is move assigned to. Calling std::terminate prevents some of the destructors\nto be called and ASAN fires on this.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222076 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e2855ce0baefb7ff32ab3613847660b11727dd8","date":"2014-11-15T06:26:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Refactor CMakeLists.txt handling of compile and link flags to suppress warnings. \n\nSummary:\nCurrently we have 5 variables that are used to specify options for building libcxx\n1. `LIBCXX_CXX_FEATURE_FLAGS`\n2. `LIBCXX_CXX_WARNING_FLAGS`\n3. `LIBCXX_CXX_REQUIRED_FLAGS`\n4. `compile_flags` (in libcxx/lib)\n5. `link_flags` (in libcxx/lib)\n\nThe first three all get put into `CMAKE_CXX_FLAGS`. \nThis changes the way flags are handled by only using 3 different options:\n\n1. `LIBCXX_CXX_FLAGS` - general compile and link flags.\n2. `LIBCXX_COMPILE_FLAGS` - compile only flags.\n3. `LIBCXX_LINK_FLAGS` - link only flags.\n\nThis patch also removes the warning about `-nostdinc++` being unused during linking.\n\n\n\nReviewers: mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6277\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222080 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a1468f79ea23f14a258af094af06993fe72e3a9","date":"2014-11-15T17:25:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix build regression caused by not defining ABI library macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222085 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"275b6bbe1c32598773a79415f6f43d2f1f2d2d80","date":"2014-11-17T15:04:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests to ensure that reference_wrapper<T> is trivially copyable. This was added to C++1z with the adoption of N4277, but libc++ already implemented it as a conforming extension. No code changes were needed, just more tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222132 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88aae920ef47f1c9e319afa833bb5c7a20ed8a2e","date":"2014-11-17T15:50:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement void_t from N3911. Add a private version for use in the library before C++1z. Update the 1z status page, marking a bunch of issues that don't require library changes as complete (2129, 2212, 2230, 2233, 2325, 2365, 2376)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222138 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cfeac66f8cfbc3ee9ef84f8bc19bf58805ee9486","date":"2014-11-17T16:34:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a warning in the test; no functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222143 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"36628eb77a2ba71ff9f923797641486146f5105c","date":"2014-11-17T18:52:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Reworked mismatch tests to count the number of comparisons, and make sure we are conforming with LWG2404. We are\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222159 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b3ca8c2493da4bf0cfc50402be14f063a8701f7","date":"2014-11-17T19:05:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2400 - 'shared_ptr's get_deleter() should use addressof()', and add tests. Mark LWG2400 and LWG2404 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222161 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48b428d540312b735f7d3ce43d04c1f285ce1caf","date":"2014-11-17T19:16:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix the tests I broke with the last commit. Sorry for the noise\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e52b63237ad9e6ff65a1ff721c4cd2948c410bb1","date":"2014-11-18T16:15:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Since Eric poisoned the comma operator on all our test iterators, we no longer need 'comma_iterator'. Remove it from the test suite.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222238 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a4997ba29ae0c8a063caaf8466ed840ccf643de","date":"2014-11-18T17:35:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status of LWG issues 2340, 2396 and 2401. In all three cases, these are things that we already do.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222240 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7683fe2b7a296de79cca0995c9ca9b35fdc0dcb1","date":"2014-11-18T18:14:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test for LWG issue #2399. We already implement this, but now we have a test as well.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222242 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1d7c713b41c0ce590b27a13de195df12e26589c","date":"2014-11-18T20:37:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Marked LWG 2399 as complete. I committed a test for this earlier today.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222251 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af2976deb3ca9a30bc26db3ea60f2e10fddeffbe","date":"2014-11-18T21:26:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for LLVM_USE_SANITIZER=Thread\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222259 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2215ae626a02c74abb2982630d85180886d7eda","date":"2014-11-18T23:01:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Flush out test cases for tuples constructor SFINAE\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222278 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f8e21c6a33b18beec56af2d5774d0411d548ca2","date":"2014-11-18T23:46:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Modify tests to check that va_copy is only defined in C++11 and beyond.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222282 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0bb95849ec816fb3215c3fcce7bc4559f44ef77f","date":"2014-11-19T01:31:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"diff --git a/test/language.support/support.types/nullptr_t.pass.cpp b/test/language.support/support.types/nullptr_t.pass.cpp\nindex 6c15fef..4d7c8b0 100644\n--- a/test/language.support/support.types/nullptr_t.pass.cpp\n+++ b/test/language.support/support.types/nullptr_t.pass.cpp\n@@ -18,42 +18,62 @@ struct A\n     A(std::nullptr_t) {}\n };\n \n+template <class T>\n+void test_conversions()\n+{\n+    {\n+        T p = 0;\n+        assert(p == nullptr);\n+    }\n+    {\n+        T p = nullptr;\n+        assert(p == nullptr);\n+        assert(nullptr == p);\n+        assert(!(p != nullptr));\n+        assert(!(nullptr != p));\n+    }\n+}\n+\n+template <class T>\n+void test_comparisons()\n+{\n+    T p = nullptr;\n+    assert(p == nullptr);\n+    assert(p <= nullptr);\n+    assert(p >= nullptr);\n+    assert(!(p != nullptr));\n+    assert(!(p < nullptr));\n+    assert(!(p > nullptr));\n+    assert(nullptr == p);\n+    assert(nullptr <= p);\n+    assert(nullptr >= p);\n+    assert(!(nullptr != p));\n+    assert(!(nullptr < p));\n+    assert(!(nullptr > p));\n+}\n+\n+\n int main()\n {\n     static_assert(sizeof(std::nullptr_t) == sizeof(void*),\n                   \"sizeof(std::nullptr_t) == sizeof(void*)\");\n-    A* p = 0;\n-    assert(p == nullptr);\n-    void (A::*pmf)() = 0;\n-#ifdef __clang__\n-    // GCC 4.2 can't handle this\n-    assert(pmf == nullptr);\n-#endif\n-    int A::*pmd = 0;\n-    assert(pmd == nullptr);\n-    A a1(nullptr);\n-    A a2(0);\n-    bool b = nullptr;\n-    assert(!b);\n-    assert(nullptr == nullptr);\n-    assert(nullptr <= nullptr);\n-    assert(nullptr >= nullptr);\n-    assert(!(nullptr != nullptr));\n-    assert(!(nullptr < nullptr));\n-    assert(!(nullptr > nullptr));\n-    A* a = nullptr;\n-    assert(a == nullptr);\n-    assert(a <= nullptr);\n-    assert(a >= nullptr);\n-    assert(!(a != nullptr));\n-    assert(!(a < nullptr));\n-    assert(!(a > nullptr));\n-    assert(nullptr == a);\n-    assert(nullptr <= a);\n-    assert(nullptr >= a);\n-    assert(!(nullptr != a));\n-    assert(!(nullptr < a));\n-    assert(!(nullptr > a));\n-    std::ptrdiff_t i = reinterpret_cast<std::ptrdiff_t>(nullptr);\n-    assert(i == 0);\n+\n+    {\n+        test_conversions<std::nullptr_t>();\n+        test_conversions<void*>();\n+        test_conversions<A*>();\n+        test_conversions<void(*)()>();\n+        test_conversions<void(A::*)()>();\n+        test_conversions<int A::*>();\n+    }\n+    {\n+        test_comparisons<std::nullptr_t>();\n+        test_comparisons<void*>();\n+        test_comparisons<A*>();\n+        test_comparisons<void(*)()>();\n+    }\n+    {\n+        bool b = nullptr;\n+        assert(!b);\n+    }\n }\ndiff --git a/test/language.support/support.types/nullptr_t_integral_cast.fail.cpp b/test/language.support/support.types/nullptr_t_integral_cast.fail.cpp\nnew file mode 100644\nindex 0000000..92bd879\n--- /dev/null\n+++ b/test/language.support/support.types/nullptr_t_integral_cast.fail.cpp\n@@ -0,0 +1,17 @@\n+//===----------------------------------------------------------------------===//\n+//\n+//                     The LLVM Compiler Infrastructure\n+//\n+// This file is dual licensed under the MIT and the University of Illinois Open\n+// Source Licenses. See LICENSE.TXT for details.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+// typedef decltype(nullptr) nullptr_t;\n+\n+#include <cstddef>\n+\n+int main()\n+{\n+    std::ptrdiff_t i = static_cast<std::ptrdiff_t>(nullptr);\n+}\ndiff --git a/test/language.support/support.types/nullptr_t_integral_cast.pass.cpp b/test/language.support/support.types/nullptr_t_integral_cast.pass.cpp\nnew file mode 100644\nindex 0000000..34c7a93\n--- /dev/null\n+++ b/test/language.support/support.types/nullptr_t_integral_cast.pass.cpp\n@@ -0,0 +1,24 @@\n+//===----------------------------------------------------------------------===//\n+//\n+//                     The LLVM Compiler Infrastructure\n+//\n+// This file is dual licensed under the MIT and the University of Illinois Open\n+// Source Licenses. See LICENSE.TXT for details.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+// NOTE: nullptr_t emulation cannot handle a reinterpret_cast to an\n+// integral type\n+// XFAIL: c++98, c++03\n+\n+// typedef decltype(nullptr) nullptr_t;\n+\n+\n+#include <cstddef>\n+#include <cassert>\n+\n+int main()\n+{\n+    std::ptrdiff_t i = reinterpret_cast<std::ptrdiff_t>(nullptr);\n+    assert(i == 0);\n+}\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222296 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"221907d782f7075b2f8dac0f7fd091790bdef3d9","date":"2014-11-19T01:45:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup quick_exit tests and get them passing in C++03.\n\nWrap the original test in _LIBCPP_HAS_QUICK_EXIT so it only runs when we have\nquick_exit and add two new tests that check that when _LIBCPP_HAS_QUICK_EXIT\nis not defined then no definition of std::at_quick_exit or std::quick_exit are\navailable.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"33c5db58e7d7c509c1f05f873f65e6c7664447ea","date":"2014-11-19T05:41:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r222296 to fix bad commit message\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222316 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c2f0e465ca9c66cf560899d6d2e1c9eae3404c30","date":"2014-11-19T05:49:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Overhaul and separate nullptr_t tests to pass with C++03.\n\nThe standard requires that nullptr_t can be reinterpret_cast to an integral type\nat least the size of nullptr_t. There is no way to emulate this conversion in\nthe C++03 nullptr_t implementation. The test for this conversion has been moved\nto a new test and marked XFAIL with c++03.\n\nThis recommits what was originally r222296.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222318 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab5bd89de1dc1f47bc73cba63809dc7afc18f78d","date":"2014-11-19T15:59:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added entries for bugs 2118 and 2306, which were closed in Urbana\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222361 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03c6791dc6a540c120b9bfac6e37907e52bcf6ff","date":"2014-11-19T19:43:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement N4280 - 'Non-member size() and more'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222378 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19fdbe53b7eb0322fc725a850ddbc712d7cd9665","date":"2014-11-19T20:01:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change contradictory wording in va_copy test error message.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5e361d0240f430043cf67fa75509edf83152694","date":"2014-11-20T03:39:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove tests that va_copy is not defined when C++ < 11.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222405 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c7a32ff0f44d689b5b1d1e21fd45b50374f32bf","date":"2014-11-20T03:40:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove xfail tag for darwin from quick_exit test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5980ce383f4f83a90c48ead00cca6ba26c6d8f68","date":"2014-11-21T01:23:04.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add more REQUIRES: LOCALE.* to tests.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222492 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aeff14fc742cef0d58437af0e1fedc29672f7edb","date":"2014-11-21T08:02:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark some locale tests as XFAIL on debian and opensuse.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222513 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1567ac850c56e9d6686bbedeef050346090bad41","date":"2014-11-21T08:54:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Handle extra whitespace in linux distribution name.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222514 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"877409a1c7e3a66000a7a079473ed5e83b23dec4","date":"2014-11-24T22:24:06.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add better support for custom test runners.\n\nSummary:\nI finally got around to merging the many, many changes to lit.cfg into\nAndroid's libc++. This patch makes it simpler to actually use a custom\nconfiguration and test format.\n\nFirst, I've factored out _build, _run, and _clean methods from\n_execute_test, since these are the likely parts that will need to be\noverridden. This is likely a first step in the work jroelofs has been\ndoing with improving cross-compiling test execution.\n\nSecond, I've added a `configuration_variant` to the config. This\nentry, if present, is a string that forms the prefix of the class that\nis to be used to configure the test runner. For example, Android sets\n`config.configuration_variant = 'Android'`, and this causes an object\nof type `AndroidConfiguration` to be constructed.\n\nAs an example of how this will be used, see:\nhttps://android-review.googlesource.com/#/c/116022/\n\nReviewers: jroelofs, mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6373\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6e69df5984636800260e1076cc1261657489b47","date":"2014-11-24T23:46:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Print lit configuration information after all configuration is done.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd0000808db5dc8af36394696b706471856070e2","date":"2014-11-25T03:03:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use lit.util.executeCommand instead of our own version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cb69ffa0a86c7c41d357a6e0dcb05c72308dd6b","date":"2014-11-25T21:57:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fixes to get libc++ building on sun solaris. Patch from C Bergstrom.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222794 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6317e9b85af993c206923188c2fd2019d8fa8d9e","date":"2014-11-26T17:51:58.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: integral types trap on PNaCl\n\n    Reviewers: dschuff, danalbert\n\n    Subscribers: jfb, cfe-commits\n\n    Differential Revision: http://reviews.llvm.org/D6411\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@222842 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2bd5ffd330036d753b5e43201fc6fa76214b0e3e","date":"2014-12-01T19:19:55.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: add NaCl and PNaCl support for std::random_device\n\nSummary:\nThe NaCl sandbox doesn't allow opening files under /dev, but it offers an API which provides the same capabilities. This is the same random device emulation that nacl_io performs for POSIX support, but nacl_io is an optional library so libc++ can't assume that device emulation will be performed. Note that NaCl only supports /dev/urandom, not /dev/random.\n\nThis patch also cleans up some of the preprocessor #endif, and fixes the test for Win32 (it accepts any token, and would therefore never throw regardless of the token provided).\n\nTest Plan: ninja check-libcxx\n\nReviewers: dschuff, mclow.lists, danalbert\n\nSubscribers: jfb, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6442\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"93cfd7fc4e4e3b9b4ca18abdef49b395f8277e42","date":"2014-12-02T17:30:19.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: support NaCl when building thread.cpp\n\nSummary: NaCl shouldn't include sysctl.h when trying to determine std::thread::hardware_concurrency, it should instead use sysconf(_SC_NPROCESSORS_ONLN) through unistd.h. No test needs to be changed, since hardware_concurrency.pass.cpp already tests that std::thread::hardware_concurrency > 0.\n\nTest Plan: make check-libcxx\n\nReviewers: dschuff, danalbert\n\nSubscribers: jfb, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6470\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223128 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a245f9b2637349e713922dc7e5c76e5934356efd","date":"2014-12-06T20:09:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve error message when _LIBCPP_HAS_NO_MONOTONIC_CLOCK is used improperly\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223590 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7330ed32286d2a5d21398b59413fb63b58dee413","date":"2014-12-06T21:02:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for building and testing libc++ without threads to CMake.\n\nCurrently hacks must be used in to configure and build libc++ without threads\nwhen using CMake. This patch adds CMake options to enable/disable building with\nthreads and a monotonic clock.\n\nThis patch also propagates the configuration information to lit so the tests\nare properly configured as well.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c934ca7237287c0afa3cded9b17a031f71ef4c62","date":"2014-12-06T21:13:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add logic to probe compiler in tests.\n\nSummary:\nThis patch probes the cxx compiler used during testing by getting it to dump its predefined macros. Based on the value of these macros the compiler name and compiler name + version are added to the available features.\n\nThere are three compiler names:\n- `clang`\n- `apple-clang`\n- `gcc`.\n\nThe available features added are equivalent to:\n- `'%s' % compiler_name`\n- `'%s-%s.%s' % compiler_name, major_version, minor_version`\n\nThis information can be used to XFAIL tests on different compilers / versions.\n\n\n\nReviewers: mclow.lists, danalbert, jroelofs\n\nReviewed By: jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6399\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83313c7ee83a98d5c57522deaaf7f8e330849fb1","date":"2014-12-06T22:08:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Unify and cleanup rpath handling in tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223594 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74e7af0d75de07401f3acd228c7c8148d0f25279","date":"2014-12-06T22:49:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix apple clang detection in lit.cfg\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223597 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2050be27a4919957b02336a91ff4467ef4d1b086","date":"2014-12-07T00:34:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert parts of r223594. Use DYLD_LIBRARY_PATH on OSX when running tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd83c78703429040057413ecbf0d8f39dee5831f","date":"2014-12-07T04:28:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Consolidate error reporting in lit.cfg\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"427f1a30149a7310726f8edaec434bb125d03db9","date":"2014-12-07T05:31:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark a couple of tests as XFAIL with older compilers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223600 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2764d046a1639553132dc7685b873d437fade099","date":"2014-12-07T08:52:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Give lit.cfg's threading options default values when not defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fff544efbdd10434988a44e14c7c94389a283952","date":"2014-12-08T14:50:21.000Z","author":{"name":"Sergey Dmitrouk","email":"sdmitrouk@accesssoftek.com"},"message":"Explicitly include <sched.h> for sched_yield()\n\nIt might be implicitly included by <pthread.h> (and that's why it worked\nso far), but it's not guaranteed (for example, this is not the case with\nnewlib).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223661 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ad67e08cbc1470f9b288b9c2d873d9c5d18fe0f","date":"2014-12-09T14:49:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add all the relational operators to std::experimental::optional. Also update bad_optional_access to match the Library Fundamentals draft standard. This is not all of the upcoming changes to optional, though.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223775 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8283709e9138d395cc351946de4844a9fff19c51","date":"2014-12-09T15:07:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move the optional tests into test/experimental. They were put into test/utilities because optional was going to be part of C++14, and then was pulled and put into the Library Fundamentals TS instead. No funcitonality change here; just moving files around.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"453a50040bb9cda453d85863570e2710c3616faa","date":"2014-12-09T22:53:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update information on where to find buildbots. Remove dead buildbot links.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@223848 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2bd5a0fe14ecec37e284ac7c4fbd4ba52083e6c","date":"2014-12-11T15:37:22.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Add an XFAIL for Newlib's missing fenv.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224021 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"952438bf706aebf39523e90b567a9882e0ccb783","date":"2014-12-11T16:17:26.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Mark some more fenv tests as UNSUPPORTED by newlib\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224024 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d9144e8d1783617b279146f397a6ab3defefefc4","date":"2014-12-11T18:35:36.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Mark a bunch of long running tests as 'REQUIRES: long_tests'\n\nThis lets us skip them as UNSUPPORTED on slow systems like QEMU\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224032 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cddec8a9dd019699d26da3adb0ce22bf7c7b78ba","date":"2014-12-11T19:11:39.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Add an XFAIL for Newlib's missing uchar.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224037 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f2daa14367999b0520661eea28e41287a4cbf63","date":"2014-12-11T20:56:40.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix platform_support.h's get_temp_file_name() on Newlib under __STRICT_ANSI__\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224057 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5030eaf65db689246a7d4e6f327f5a34d406e98f","date":"2014-12-11T22:05:18.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Add 'REQUIERS: long_tests' to a few more long tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224064 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08e3a7887f1e84119c7675402a8c72f49fbc017a","date":"2014-12-11T22:27:49.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Add 'REQUIRES: long_tests' to one more long test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224069 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01f6a1410c6d468a461339a015e2f9419287fed1","date":"2014-12-12T02:36:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix building and running tests when LIBCXX_ENABLE_EXCEPTIONS or LIBCXX_ENABLE_RTTI are turned off.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224095 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae9fec0bdfc9e8414102659ee166cc4442eb6ec5","date":"2014-12-12T03:12:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for building libc++ as a 32 bit library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224096 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"984f8f6e439e2beb6cfc2a9b411d8e59ab740142","date":"2014-12-12T08:36:16.000Z","author":{"name":"Sergey Dmitrouk","email":"sdmitrouk@accesssoftek.com"},"message":"Include newlib-specific locales in __locale\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224111 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9acbcee2c618c505d9e68243f0a89d8446b62c84","date":"2014-12-12T22:52:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add option to turn off installation of headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3e7054f48911d260ed1d1f005b0dec0817b71af","date":"2014-12-15T23:57:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG 2217 - operator==(sub_match, string) slices on embedded '\\0's\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224292 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab3c50593cc1921048b19d30f4bf42955058add7","date":"2014-12-16T00:30:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add test to ensure that iterator_traits<NotAnIterator> doesn't have a value type\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224295 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cde7ca0a97e2072b70362d5648c2a9f5edb21ca8","date":"2014-12-16T00:45:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix the literal string that I said would be six elements long to actually be six elements long. Octal. Sheesh.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224297 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e51267e2d141bcf6f7c34fc49f8d0f18393f991d","date":"2014-12-16T00:46:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Once more w/o the typo.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2ef609ff1e37c67d19de4e6cf7fda48caa9c5b5","date":"2014-12-16T00:48:13.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix installheaders target's permissions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224300 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a1a4db3fe562b99555cb6c7fdc966473466edf5e","date":"2014-12-16T00:59:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Comment out the breaking tests until I figure out what's going on here.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224301 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7797c867d3dc340eeb72d0cfe96d89f65eb6039f","date":"2014-12-16T01:18:11.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Appease the c++14 buildbots\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224304 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cf4f1597045290f2329ffdbc4774a02dc6bd3e7","date":"2014-12-16T05:28:07.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Revert \"Fix installheaders target's permissions\"\n\nThe install of headers excludes the support directory, so these chmod\ncalls fail on non-existent directories, as seen on this bot:\n\nhttp://lab.llvm.org:8080/green/job/clang-stage1-configure-RA_build/2801/console\n\nThis reverts commit r224300.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224317 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4975bad2997846a2ced5d1221b23c44d79fb7fb0","date":"2014-12-16T16:22:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Re-commit the test for regex that I busted last night - now passes under ASAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8e76804f1a5205370e49e5670cf22f932a68d78","date":"2014-12-19T19:27:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Allow the use of ccache when running the test suite.\n\nSummary:\nIn order to get the bots running quicker I would like to be able to use ccache \nwith the test suite. This patch adds support for running the test suite using \nccache. To use ccache pass `--param=use_ccache=true` when running the test suite.\n\nccache will not cache any command that invokes ld, so the build step needs to be\nsplit into two separate compile commands. The cost of splitting the build step\ninto two parts when not using ccache seems to be minimal. On my machine I saw a\ndifference of ~5 seconds on a 5 minute test suite run.\n\nA full test suite run with ccache generates about 250MB of cached data.\n\nI recorded the following times for running the test suite in the following configurations:\n- no ccache: 340s\n- initial ccache run: 380s\n- rerun with ccache (no changes): 53s.\n- rerun with ccache (<string> changed): 80s\n- rerun with ccache (<cmath> changed): 169s\n- rerun with ccache (<valarray> changed): 69s\n\n\n\n\n\nReviewers: mclow.lists, jroelofs, danalbert\n\nReviewed By: jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6647\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224603 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd8adae47ff6b182dec73bca9236ae819925a01a","date":"2014-12-19T21:42:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unneeded configuration code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"669a8a5a1929e881258bfed10d7461ca42ea0a9e","date":"2014-12-19T22:21:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/type_traits> for LFTS\n\nSummary:\nThis adds the <experimental/type_traits> (minus invocation traits). Mostly just the `_v` traits.\n\n\nReviewers: K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5742\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a90c6dd46005b2b14de3bb889a8d03bb34bd3256","date":"2014-12-20T01:40:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move test into test/std subdirectory.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224658 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4778eed34fc028a985db2549a9f757c737f20d1d","date":"2014-12-20T03:16:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Teach libcxx's lit configuration new ways to find lit.site.cfg\n\nSummary:\nCurrently to run tests in tree you need to symlink the lit.site.cfg file generated by the cmake build into the source tree, and teach your VCS to ignore it.\n\nThis allows the user to specify where to find the lit.site.cfg file two different ways:\n* lit_site_config lit parameter\n* LIT_SITE_CONFIG enviroment variable. \n\nexample usage:\n```\nlit -sv --param=libcxx_site_config=path/to/libcxx-build/test/lit.site.cfg path/to/tests\n```\nOr\n```\nexport LIBCXX_SITE_CONFIG=path/to/libcxx-build/test/lit.site.cfg\nlit -sv path/to/tests\n```\nThe command line parameter will override the environment variable. \nIf neither options are present a warning is issued and the `lit.cfg` file is loaded directly. \n\n\nReviewers: mclow.lists, jroelofs, danalbert\n\nReviewed By: danalbert\n\nSubscribers: ddunbar, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6255\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224671 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"814b625303f15b86c64c88a2685413dde64e7a1b","date":"2014-12-20T04:14:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move unconditional test compile and link flags into their configuration functions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224674 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b16e8e05a62c4058d738e66cc71032bafe8dc51","date":"2014-12-22T19:10:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR22000. __bit_iterator::move_backwards. Also make a note that __bit_iterator\nis quite underrepresented in the libc++ tests suite.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224723 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71dc14e864dfe3159fe38e697dbf0951f22078be","date":"2014-12-22T20:49:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add numerous options to libc++ LIT test suite configuration. \n\nSummary:\nIn order to fully replace the testit script we need to update LIT so it provides the same functionality.\nThis patch adds a number of different configuration options to LIT to do that. It also adds documentation for all of the command line parameters that LIT supports.\n\nGeneric options added:\n- `libcxx_headers`\n- `libcxx_library`\n- `compile_flags`\n\n\nGeneric options modified:\n- `link_flags`: Changed from overriding the default args to adding extra args instead (to match compile flags)\n- `use_sanitizer`: Renamed from `llvm_use_sanitizer`\n\n\nPlease see the added documentation for more information about the switches. As for the actual documentation I'm not sure if it should be kept in libc++ forever since it adds an undue maintenance burden, but I think it should be added for the time being while the changes are new. I'm verify unskilled with HTML so if the documentation needs any changes please let me know.\n\nHopefully this will kill testit.\n\n\n\nReviewers: jroelofs, mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: alexfh, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5877\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4eb5b6d5ee23721a64e2b6d1bb5e133321ae5c9e","date":"2014-12-22T22:38:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Consolidate new/delete replacement in tests and disable it when using sanitizers.\n\nSummary:\nMSAN and ASAN also replace new/delete which leads to a link error in these tests. Currently they are unsupported but I think it would be useful if these tests could run with sanitizers.\n\nThis patch creates a support header that consolidates the new/delete replacement functionality and checking.\nWhen we are using sanitizers new and delete are no longer replaced and the checks always return true.\n\nReviewers: mclow.lists, danalbert, jroelofs, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6562\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224741 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e26488fd8378dc5aee5bb78448a8b32d319c2556","date":"2014-12-23T01:30:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove non-const test to get test passing. Will come back later and (correctly) add non-const tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224748 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60b3df404e59b3b795858299e8818b1c977f7e50","date":"2014-12-23T05:54:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent ill-formed instantiation of __invoke_of<...> during the evaluation of a bind expression. Fixes PR22003.\n\nThe SFINAE on the function __mu(Fn, Args...) that evaluates nested bind\nexpressions always tries to deduce the return type for Fn(Args...) even when Fn\nis not a nested bind expression. This can cause hard compile errors when the\ninstantation of Fn(Args...) is ill-formed. This patch prevents the instantation\nof __invoke_of<Fn, Args...> unless Fn is actually a bind expression.\n\nBug reportand patch from Michel Morin.\n\nhttp://llvm.org/bugs/show_bug.cgi?id=22003\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224753 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a033ca05682904da3aecf841ed5882d548b07b0","date":"2014-12-29T12:15:47.000Z","author":{"name":"Chandler Carruth","email":"chandlerc@gmail.com"},"message":"[cmake/multilib] Teach libc++'s CMake build to support multilib libdir\nsuffixes like 'lib64' or 'lib32'.\n\nThis support is currently very rhudimentary. We define a variable\nLIBCXX_LIBDIR_SUFFIX. In a standalone build of libc++ this can be\ndirectly set as a cached variable to control the multilib suffix used.\nWhen building libc++ within a larger LLVM build, it is hard wired to\nwhatever LLVM libdir suffix has been selected. If this doesn't work for\nsomeone, just let me know. I'm happy to change it.\n\nThis is essentially new functionality for libc++ so I don't expect it to\nhave any impact for folks until they start setting these variables.\nHowever, I know libc++ is built in a diverse set of environments so just\nlet me know if this causes you any problems.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@224926 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"656850f03e1ba912524c4ac6eab1a53777865950","date":"2015-01-06T17:34:51.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"[libcxx] Set _LIBCPP_ELAST for mingw.\n\nReviewers: K-ballo, mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: jfb, jroelofs, majnemer, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6558\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c101738156b7f0ea0a788907ae58e7a096fc333c","date":"2015-01-06T18:39:37.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Obey [atomics.types.operations.req]/21 for GCC.\n\nSummary:\nExcerpt from [atomics.types.operations.req]/21:\n\n> When only one memory_order argument is supplied, the value of\n> success is order, and the value of failure is order except that a\n> value of memory_order_acq_rel shall be replaced by the value\n> memory_order_acquire and a value of memory_order_release shall be\n> replaced by the value memory_order_relaxed.\n\nClean up some copy pasta while I'm here (someone added a return\nstatement to a void function).\n\nReviewers: EricWF, jroelofs, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6632\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd8ed7fa8555405b5654e7acbfa166a94f1c823a","date":"2015-01-06T19:20:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR 22106; make std::swap work for multi-dimensional arrays. Thanks to Peter Griess for the report and suggested fix\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f1ac0fb3d28e3545c94eca8136e4f428b9d61f7","date":"2015-01-06T19:23:25.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Appease MSAN buildbots.\n\nThis is just a compile time test, but we have MSAN buildbots that will\nfail since `exp` was uninitialized.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21b03d7189a35315fee4106b69ee4d15b0c9a60f","date":"2015-01-06T19:32:30.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Make a test UNSUPPORTED if libcpp-has-no-threads.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225287 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0588c74a875462db60891a75ba53f42c88c6403b","date":"2015-01-06T22:18:27.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Move a test to the new tests directory.\n\nI had written the patch that added this test before the tests were\nmoved into tests/std, so the test ended up in the wrong directory.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225300 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27a1a2c84a78e83531b4e97d50426d31b52c7408","date":"2015-01-07T20:31:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In C++03, a bunch of the arithmetic/logical/comparison functors (such as add/equal_to/logical_or) were defined as deriving from binary_funtion. That restriction was removed in C++11, but the tests still check for this. Change the test to look for the embedded types first_argument/second_argument/result_type. No change to the library, just more standards-compliant tests. Thanks to STL @ Microsoft for the suggestion.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225375 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"58d4e04168f23b0261ff132162606b66535c8838","date":"2015-01-07T20:40:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed one comparison test in r225375\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225376 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b15298338ce864b6e5987831992aee111a169410","date":"2015-01-07T20:54:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests to check the typedefs from the result of std::owner_less\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87d03942c428bfabf09738cde2885549a60bc03d","date":"2015-01-07T21:51:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In C++03, a bunch of the arithmetic/logical/comparison functors (such as negate/bit_not.pass/logical_not) were defined as deriving from unary_funtion. That restriction was removed in C++11, but the tests still check for this. Change the test to look for the embedded types first_argument/second_argument/result_type. No change to the library, just more standards-compliant tests. Thanks to STL @ Microsoft for the suggestion.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225402 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"674e07d3c8f7c9c38a8e1b0aae5cfb8831a789a6","date":"2015-01-07T21:53:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"libc++ implements its' hash objects as deriving from std::unary_function, and the tests test for that. STL @ MS pointed out that the standard doesn't requie these objects to derive from unary_function, and so the tests should not require that either. Change the tests to check for the embedded typedefs - which ARE required. No change to the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7e395f3389f98edc9950a1dac40de26de9b9ac2","date":"2015-01-07T22:26:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed a typename\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1fdd937c0a8b223d5554741ed40ae7f7c0314957","date":"2015-01-08T06:18:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add checks to make sure the hash functor has the right typedefs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225429 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a09f3444e619a86a02aa6479a17f24d064606d85","date":"2015-01-08T06:36:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In early C++11 standard drafts, std::function derived from std::unary_function or std::binary_function if there was only one (or two) parameters. Before C++11 shipped, this restiction was lifted, but libc++ still does this (which is fine). However, the tests still check for this outdated requiremnt. Change then to check for the nested typedefs instead (which are still required by the standard). No change to the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225430 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6027993c28d8451999bb6205c185e47d914ce402","date":"2015-01-09T17:03:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"K-Ballo found a place where we were using 'V' as a template parameter. Replace with '_Vp' for protection against user-defined macros.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225527 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa66357f48bc35dedd68832abf0af72548c82e6a","date":"2015-01-09T18:03:29.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"[libc++] Refactor test components into modules.\n\nSummary:\nI've moved the bulk of `lit.cfg` into `test/libcxx/testconfig.py` and\n`test/libcxx/testformat.py`. All that remains in `lit.cfg` is the\nlogic to discover lit.site.cfg if lit.cfg was run directly, and the\nlogic for loading configuration variants.\n\nThe configuration variant flow has changed with this patch. Rather\nthan instantiating an object of type `<VARIANT>Configuration`, we now\ninstatiate an object of type `Configuration` that was loaded from the\nmodule `<VARIANT>.testconfig.py`.\n\nThis has to be done on a per-project basis rather than in LIT itself\nbecause LIT doesn't actually know where the real test directory is,\nonly where the site configuration is (which is usually in the output\ndirectory). It's simple enough to do though, so it's fine to require\neach project to do it themselves.\n\nI also cleaned up all the pylint issues while I was here, which was\nmostly just a matter of fixing long lines.\n\nReviewers: mclow.lists, jroelofs, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6881\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225532 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b913d7c527b6ced23a26f3a0b633cee2fe4aa1a","date":"2015-01-09T20:25:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Walter Brown sent a list of tests which needed 'additional includes' to match what was in the standard. Added these includes to the tests. No changes to the library or test results.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225541 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13e2966c91c8661d08de347e143c3c5be8c3c68d","date":"2015-01-10T00:08:00.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Support Newlib as libc++'s C library [cstdio part, part 2]\n\nWrappers for clearerr, feof, ferror (which newlib implements as macros).\n\nhttp://reviews.llvm.org/D5420\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225563 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e42202138c2582a8d6bc6fc5106c11e713af1909","date":"2015-01-11T06:15:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change a couple more template parameter names from 'T' to '_Tp', etc. Thanks to Ondřej Majerech for the patch, but I did a bit more.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"141dd0c245ab18b1240ca0203e4788e86e42e7d0","date":"2015-01-11T18:07:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"One more #include request in the test suite from Walter Brown\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225609 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe079256b2d7d5297ee2c08708cf95f09f0a5efd","date":"2015-01-12T15:56:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix vexing parse in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225633 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"083e011d6c9e37e58ae96082b8993be7d3b2f8ce","date":"2015-01-13T16:49:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make regex::assign not clobber the regex in case of failure. Fixes PR#22213\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225799 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1b1b7f8fea6cbc1227841ca149b8c21961a3392","date":"2015-01-14T01:29:04.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Refactor the lit config's linker flag discovery code. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225920 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f599cea0e2db95bebb7aaa35de807bcddb2b634","date":"2015-01-14T14:48:27.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix a lit configuration diagnostic. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@225985 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7819fd7108357dd3d1a4cd2e1e47f1e722d9e677","date":"2015-01-14T19:29:04.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Support picking the unwinder used for testing on linux (just as libc++abi testing allows)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226024 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa08adae1395fda9f96a4798e9485a3e705e7b8b","date":"2015-01-14T21:02:14.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Refactor configure_compile_flags. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226040 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcd02b85a5bada08bf6a2ee4ab5c43543c776e42","date":"2015-01-14T21:56:50.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Rename library_root to libcxx_library_root. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226043 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"33459617e77c6c1917660b2885c376377db5841d","date":"2015-01-14T23:38:12.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Rename system_lib -> system_cxx_lib. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"583f2e70930b6ef70d092f7183b9692e119f6173","date":"2015-01-15T00:03:14.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Rename src_root -> libcxx_src_root. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226063 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88b2a8623250dbec74182dba64a54bd9aaad20a3","date":"2015-01-15T16:18:13.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Refactor configure_link_flags for modularity. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226174 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"00a620eb3bf6d07735128cad7ef2a55da817e8f9","date":"2015-01-15T18:35:04.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add a cmake option for LIT configuration variant.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226185 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7df8e6225892a5b370bee7081a8b9ab3ef341a5a","date":"2015-01-15T18:56:45.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Use set() instead of option() for string option.\n\nFixes issue in r226185.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66ffe01f977fc53e7a750e55b32dc6c1df7533e1","date":"2015-01-15T23:04:37.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Print out environment in lit notes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226223 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"818911cc85f325e6306dd83e51134b1dbde88219","date":"2015-01-16T00:55:15.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"[libc++] Add support for cross compiling.\n\nReviewers: EricWF, jroelofs\n\nReviewed By: jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6990\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226237 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cbc84977aa0e3b73bff718e806e2ca1e43870a81","date":"2015-01-16T02:27:17.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Remove triple detection from cmake.\n\nThis isn't actually used for anything, and is broken on Darwin\n(currently causing build failures now that the triple is passed to aid\ncross compiling). Rather than fix unused code, just remove it.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226243 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae8bc6b3efbf55f1efd2f19f2eaca496dfb636b3","date":"2015-01-16T21:22:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add 'no_default_flags' option for turning off all default test compile and link flags.\n\nWhen 'no_default_flags' is true only flags passed using '--param=compile_flags'\nand '--param=link_flags' will be used when compiling the tests. This option\ncan be used to run the test suite against libstdc++ and helps with all\nunusual test suite configurations.\n\nNOTE: sanitizer flags are still added when '--param=use_sanitizer' is used even\nif '--param=no_default_flags' is given.\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226322 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28a058bd5180ae38929a40f4a73f54ee8e688ba1","date":"2015-01-16T21:35:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add compiler utility class for LIT tests\n\nSummary:\nThis adds a compiler utility class that handles generating compile commands and running them. Instead of having to pass the compiler path and 3 groups of flags between the configuration and the test format this allows us to just pass the compiler object.\n\n\n\nReviewers: danalbert, jroelofs\n\nReviewed By: jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7019\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"33f50fb94076ee603c77449277c16669c7903445","date":"2015-01-16T21:59:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"A couple small changes to get LIT working with python3\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02f6369a6b0a661ea1a1bcd965d6e62a854c95db","date":"2015-01-18T19:05:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Cleaning up the test suite; remove some includes of non-standard file <__config>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226411 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ef5d45b2c9c05888f4f8eda18f6f07fdb545c7e","date":"2015-01-20T16:14:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Address danalbert's post-commit review comments on D7019 and small fixes.\n\nThis patch addresses some comments on http://reviews.llvm.org/D7019.\n\n- Move compiler.py to test/libcxx from test/libcxx/test.\n- Make CXXCompiler.target None by default.\n- Use `{}` instead of `dict()` to initialize an empty dict.\n- Pass the -fsanitize options to both the compile and link commands.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e93e0347a6e78d1f44f10492bfbba6ff3eb7ece2","date":"2015-01-20T16:26:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Print compiler path during configuration and pass more flags to the linker\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3289a0c88b4ab566ed3b524900bf4d3876edb45","date":"2015-01-20T22:37:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Only use -target flag when target_triple is manually specified\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226615 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"07b133f2a7b8afcb6b23750412f1317ab5a9262f","date":"2015-01-21T02:51:17.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"tuple: Make operator<() linear instead of exponential\n\nPatch by Matthew Dempsky!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226641 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0243015f643f629bef39656215d1fe055c788d02","date":"2015-01-22T00:05:11.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix lit config typo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd7a4836e36e431cafd689471a3e3c1233c9c9d4","date":"2015-01-22T18:05:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Allow use of ShTest in libc++ tests along with other changes.\n\nSummary:\nThis patch allows the use of LIT's ShTest format in the libc++ test suite. ShTests have the suffix '.sh.cpp'. It also introduces a series of other changes. These changes are:\n\n- More functionality including parsing test metadata has been moved into LIT.\n- LibcxxTestFormat now supports multi-part suffixes.\n- the `CXXCompiler` functionality has been used to shrink the size of LibcxxTestFormat. \n- The recursive loading of the site config has been turned into `libcxx.test.config.loadSiteConfig` so it can be used with libc++abi.\n- Temporary files are now created in the build directory of libc++. This follows how it is down in ShTest.\n- `not.py` was added as a utility executable that mirrors the functionality of LLVM's `not` executable. \n- The first ShTest test was added under test/libcxx/double_include.sh.cpp\n\n\nReviewers: jroelofs, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7073\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226844 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3150c3547a1774fa55ef4ef94b4a783f02d6d785","date":"2015-01-22T18:33:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#22284. Add a new overload to deque::insert to handle forward iterators. Update tests to exercise this case.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226847 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"447c76d9eefcbe479664e5ab6fd6b6ce3f6845df","date":"2015-01-23T06:59:51.000Z","author":{"name":"Filipe Cabecinhas","email":"me@filcab.net"},"message":"Add USES_TERMINAL to libcxx lit tests, if available\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226900 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f51d676a0e80f6c67af728b28e7278f5656373ee","date":"2015-01-23T22:22:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get libc++ building on Sun Solaris. Patch from C Bergstrom.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@226947 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9bf4a21851cfb17ff072e60c0acbde7aa3492bc","date":"2015-01-26T17:24:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR21428. Buffer was one byte too small in octal formatting case. Add test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfad86e967825f27c1e78a5da2d9b4673f7a1edd","date":"2015-01-26T18:11:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change the available features used for no-rtti and no-exceptions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a1bca66d28644dcd672da4e02a99b218ddb42449","date":"2015-01-26T20:06:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added test for incomplete type support in vector/list/forward_list. References PR#17980\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227131 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9d4b23051dc92107ed282f13163426fede285be","date":"2015-01-26T21:56:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adopt CMake policy CMP0042. Set MACOSX_RPATH on by default.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227139 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7dcd3a3e15fd398fdd33e7b9d5ee94a3f37fecb","date":"2015-01-27T19:27:39.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"[libcxx] Make __wrap_iter work with gcc.\n\nhe following snippet doesn't build when using gcc and libc++:\n\n    #include <string>\n    void f(const std::string& s) { s.begin(); }\n    #include <vector>\n    void AppendTo(const std::vector<char>& v) { v.begin(); }\n\nThe problem is that __wrap_iter has a private constructor. It lists vector<>\nand basic_string<> as friends, but gcc seems to ignore this for vector<> for\nsome reason. Declaring vector before the friend declaration in __wrap_iter is\nenough to work around this problem, so do that. With this patch, I'm able to\nbuild chromium/android with libc++. Without it, two translation units fail to\nbuild. (iosfwd already provides a forward declaration of basic_string.)\n\nAs far as I can tell, this is due to a gcc bug, which I filed as\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=64816.\n\nFixes PR22355.\n\nhttp://reviews.llvm.org/D7201\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227226 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1a6c1725106c36d7270a5fb8a2610ffeee32dbb","date":"2015-01-27T20:43:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix linking pthread in tests on FreeBSD\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227240 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4449da43c00cd5e083a5cbcc368d49fdabc222e","date":"2015-01-27T23:03:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Ensure __has_feature is defined in test/support/count_new.hpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227263 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db5d6af29b12864f3085b01b3c245dc40f06b465","date":"2015-01-27T23:05:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix definition of __has_feature in r227263\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a769d7ff497c5da6ee0542a02de42e3fa71a7142","date":"2015-01-28T00:05:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix flag order of -xc++ in CXXCompiler.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01c1c6fcc7c9547211d4e33b8797bc75fe6d2ae4","date":"2015-01-28T19:54:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR22366. When move-constructing an associative container and explicitly passing an allocator that compares different, we were not calling the destructor of the elements in the moved-from container.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eea9d20edbda5b22aebcc9a1c2f243677dd3a824","date":"2015-01-28T20:26:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed some tabs that snuck into the test suite. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227363 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df00d5e5ad672aa275a29c5a446072959134addd","date":"2015-01-28T21:22:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"We had two identical files named 'MoveOnly.h' in the test suite. Move one to support/, remove the other, and update all the tests that included them. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227370 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e56c30413b32d698a0441d11f34010d4a35ed92","date":"2015-01-28T22:22:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for PR22061 by K-ballo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3eda9d45309c8e388573bcb96a56049fc485020","date":"2015-01-30T22:33:41.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Update web page to direct patches to Phabricator.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c49fb89ff41fbc06c8d71358bbaa4fe25b075900","date":"2015-01-30T22:40:31.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add myself to CREDITS.TXT.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227630 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c71f582b5439db97f9a94b233f19e7290988b72","date":"2015-02-02T15:04:29.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Use fseek/ftell instead of fseeko/ftello when Newlib is the libc\n\nhttp://reviews.llvm.org/D6626\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227804 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7743dddc8c5c980a5e420e881d560e7f7827cd73","date":"2015-02-02T15:56:43.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Revert r227804: Use fseek/ftell instead of fseeko/ftello when Newlib is the libc\n\nThis change is causing a driver crash on libcxx-libcxxabi-x86_64-linux-ubuntu-msan\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227806 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e809f4ce45c0864f79f89dc450a9e6d0e57b21e8","date":"2015-02-02T16:44:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Reorder a couple of operations in inplace_merge so that we can meet the complexity guidelines mandated by the standard. References PR22427\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227808 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c2684ccf973d95fc69d46c89bc1ccd4ca056bd0","date":"2015-02-02T17:35:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#22427. The implementation of inplace_merge had a \\'small data set\\' optimization; if either half of the merge was small (i.e, less than 9 items), it did an inplace merge rather than allocating a buffer and doing a faster/smarter merge. However, this failed to satisfy the complexity requirements in the standard. Remove that code. Add tests to check the complexity, and add the same tests for std::merge, since we are in that section of the test suite anyway.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227811 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0ec4b7c85dc2cd698d3a5e24613d555b8031233","date":"2015-02-02T18:16:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#22433. The algorithm is_partitioned was testing an item in the middle of the sequence twice.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"665613f5be827228249b0d7108b9c38e7ff4274d","date":"2015-02-02T21:05:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/chrono>\n\nSummary:\nThis patch adds <experimental/chrono> which only contains a single variable template.\n\nSee: https://rawgit.com/cplusplus/fundamentals-ts/v1/fundamentals-ts.html#time\n\nReviewers: jroelofs, danalbert, K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7352\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227860 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e0197634ff2dd59ccafc3920ddc28fbedec467e","date":"2015-02-02T21:10:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update LFTS status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227862 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57947ca8678cb4915f13abfd7a4eab5df2005b4e","date":"2015-02-02T21:31:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename pow2 functions in __hash_table to reflect that they are hash specific\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227866 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6893aecfda585363aacb377bfaa09044bba4096","date":"2015-02-03T15:34:17.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Revert: Revert r227804: Use fseek/ftell instead of fseeko/ftello when Newlib is the libc\n\nEricWF has updated the compilers on his buildbots. Hopefully they won't crash now.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227971 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cdc7bb55dfbe6d3f866016e8d1c6ef476f9a43df","date":"2015-02-03T16:03:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/system_error>\n\nSummary:\nThis patch just adds the variable templates in <experimental/system_error>.\n\nsee: https://rawgit.com/cplusplus/fundamentals-ts/v1/fundamentals-ts.html#syserror\n\n\nReviewers: jroelofs, danalbert, K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: chandlerc, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7353\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227973 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40f8695e5451eb709a829c9df5dd05e7e2f6f9d9","date":"2015-02-03T16:04:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark <experimental/system_error> as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227974 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35f1c499e4c60ba4051bef4fa4fe818d38a3e93f","date":"2015-02-03T18:02:04.000Z","author":{"name":"Greg Fitzgerald","email":"garious@gmail.com"},"message":"Don't assume LIT_EXECUTABLE points to a Python script\n\nBefore this patch, the CMake build assumed LIT_EXECUTABLE pointed\nto a Python script, not an executable.  If you were to pass in an\nexecutable, such as the result of py2exe on lit.py, the build would\nfall over.\n\nWith this patch, the CMake build assumes LIT_EXECUTABLE is an\nexecutable.  You can continue setting it to lit.py, but it will\nnow use its shebang to find a Python interpreter.\n\nDifferential Revision: http://reviews.llvm.org/D7315\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227994 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4668566a604954157f4b45f722f06c6d040bcac0","date":"2015-02-03T18:16:47.000Z","author":{"name":"Greg Fitzgerald","email":"garious@gmail.com"},"message":"Revert \"Don't assume LIT_EXECUTABLE points to a Python script\"\n\nThis reverts r227994\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@227996 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"015fb24be6ea304a6a59d61ccba7e62a92516df3","date":"2015-02-03T18:47:37.000Z","author":{"name":"Greg Fitzgerald","email":"garious@gmail.com"},"message":"Don't assume LIT_EXECUTABLE points to a Python script, take 2\n\nBefore this patch, the CMake build assumed LIT_EXECUTABLE pointed\nto a Python script, not an executable.  If you were to pass in an\nexecutable, such as the result of py2exe on lit.py, the build would\nfall over.\n\nWith this patch, the CMake build assumes LIT_EXECUTABLE is an\nexecutable.  You can continue setting it to lit.py, but it will\nnow use its shebang to find a Python interpreter.\n\nDifferential Revision: http://reviews.llvm.org/D7315\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228005 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6ed0311fba957a95ff182a25ed02f6c6eee5b6b","date":"2015-02-03T21:00:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix alignment in tests for readability.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228028 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08fe42c4730b7a7b2c1d14045e0b1dcb408732e1","date":"2015-02-03T23:49:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"add platform to LIT's available features\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228071 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aaf0b548fbfc92506708abc6a38d88ff49bc8ce3","date":"2015-02-04T20:25:57.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: remove unused variable in random_device::operator()()\n\nReviewers: jvoung\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7416\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228183 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3727be521a9b4c5fcf95c53adc8abe85f7105188","date":"2015-02-05T02:34:59.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix some -Wundef issues.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228266 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e64ec52760e70bb1453d5556cb1b1cb7bbcecd23","date":"2015-02-05T07:26:14.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Test commit: remove whitespace at EOL.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70e0af45ae9b5a96e7b16b3c8cb3bbef869e257f","date":"2015-02-05T07:40:48.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Fix unused private field warning in stdexcept after r207695.\n\nAdd a new _LIBCPP_UNUSED define in __config, which can be used to\nindicate explicitly unused items, and apply it to the __imp__ field of\n__libcpp_refstring.\n\nSomebody who knows about Microsoft C++ and IBM C++ should fill in the\nunused attribute syntax appropriate for those compilers, if there is\nany.\n\nDifferential Revision: http://reviews.llvm.org/D6836\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228281 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"75fdf0ea7c4894ddf713cb84a8ac57cc029c80bd","date":"2015-02-05T20:28:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get tests running with warnings. Fix warnings in headers and tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228344 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8492cd84ff183224dbbc650933ce10964de45608","date":"2015-02-05T23:01:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove use of _[A-Z] identifiers and poison them to detect usage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228353 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"062d0a6dfc002d698f57930e61228fc43714822e","date":"2015-02-05T23:56:33.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add __cxxabi_config.h to libcxxabi headers.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228364 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f17cecb13fe2d13920114c3f3dfcaacb01785745","date":"2015-02-10T15:17:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of C++11 extensions in C++03 code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"31cb7fe75e41a706062859350ab7b4879470eefe","date":"2015-02-10T16:46:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Properly convert the count arguments to the *_n algorithms before use.\n\nSummary:\nThe requirement on the `Size` type passed to *_n algorithms is that it is convertible to an integral type. This means we can't use a variable of type `Size` directly. Instead we need to convert it to an integral type first.  The problem is finding out what integral type to convert it to.  `__convert_to_integral` figures out what integral type to convert it to and performs the conversion, It also promotes the resulting integral type so that it is at least as big as an integer. `__convert_to_integral` also has a special case for converting enums. This should only work on non-scoped enumerations because it does not apply an explicit conversion from the enum to its underlying type.\n\n\n\nReviewers: chandlerc, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7449\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228704 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3231d213aef5b83d2511bead351d962841d9082","date":"2015-02-10T16:48:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix PR 22468 - std::function<void()> does not accept non-void-returning functions \n\nSummary:\nThe bug can be found here: http://llvm.org/bugs/show_bug.cgi?id=22468\n\n`__invoke_void_return_wrapper` is needed to properly handle calling a function that returns a value but where the std::function return type is void. Without this '-Wsystem-headers' will cause `function::operator()(...)` to not compile. \n\nReviewers: eugenis, K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7444\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228705 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f9cc52faf7aa2bb1dc9e3affe6a40b6fecb0e6c","date":"2015-02-10T16:51:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove use of zero length arrays in tests. Get tests passing with -pedantic-errors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228706 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5495e2efb9ea9fcb273ebed2f92b912ace28e82b","date":"2015-02-10T17:20:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more issues exposed by -pedantic-errors in c++03 mode\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47b9a9a2869532b41bd45d36dbca7d7d457e20ac","date":"2015-02-10T17:32:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add pragma system header to some experimental headers and add newlines to files.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228712 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f42a8e60031049f5571582fd4191b8445d69db67","date":"2015-02-10T18:46:57.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Make ABI header not found a warning, not an error.\n\nSince we've added a new header to libc++abi (__cxxabi_config.h), we\nnow have a case where we might not always find all the ABI headers:\nbuilding libc++ against the system's libc++abi on Darwin.\n\nSince this isn't actually a fatal error, degrade it to a warning.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228720 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a633ca404f56fe50f06d86aec0c544932439eb0","date":"2015-02-11T01:03:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove default definition for libcxx_obj_dir because it doesn't make sense\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"566739170a02ad900fbf256f7f414256252cd910","date":"2015-02-11T01:18:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make convert_to_integral.pass.cpp more platform generic.\n\nDon't depend on the underlying types of enums and wchar_t.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228781 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"578c9e8f469b64652ba9921187cd85a64dc96ef9","date":"2015-02-11T01:25:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"libc++ tests: wait_until.pass test sporadically fails (bug 21998)\n\nSummary:\nHello Howard,\n\nWhile running the libc++ tests on our ARM boards, we encounter sporadic failures of the two tests:\ntest/std/thread/futures/futures.shared_future/wait_until.pass.cpp\ntest/std/thread/futures/futures.unique_future/wait_until.pass.cpp\n\nThe worker thread might not finish yet when the main thread checks its result.\nI filed the bug 21998 for this case: http://llvm.org/bugs/show_bug.cgi?id=21998\n\nWould you be able to review this please?\nThank you.\nOleg\n\nReviewers: howard.hinnant, mclow.lists, danalbert, jroelofs, EricWF\n\nReviewed By: jroelofs, EricWF\n\nSubscribers: EricWF, mclow.lists, aemerson, llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D6750\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228783 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a11e2cf18342df194d28722dbd17106463ac4d5c","date":"2015-02-11T01:31:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update double_include.sh.cpp for new headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228784 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3024f86865cc74449d0fc35466d24bee6d2ca605","date":"2015-02-11T15:41:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR 22541: When values are equal, minmax should return the rightmost one in the initializer_list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228839 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7d392585e7ee43e5f74262d5d63de290e26a5d7","date":"2015-02-11T15:48:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Need to wrap a bit in an ifdef, since there are no initializer_lists in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228840 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35e462ddee0dbec8edbf3753eb0ce94a812f1a3c","date":"2015-02-11T16:14:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change some template parameter names from _C and _N to _Cont and _Sz. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228843 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bdb73f1f8ba9dcc8fe2d2fdf2279f39c9e365007","date":"2015-02-12T15:21:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove undefined behavior from test; specifically, compare(NULL, XXX, 0). Thanks to Eric for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228927 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"451ae6e21c249c3b4f18d409281001b677ab6c39","date":"2015-02-12T15:25:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove undefined behavior from test; specifically, compare(NULL, XXX, 0)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228928 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f59a8843156b2b6983a9323df168c69964eafe1","date":"2015-02-12T19:58:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a problem that UBSAN found, where we were calling memcmp(null, p, 0) - which is undefined behavior\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228952 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2e36ef0937f704a96bc13f50074d2c17c7df96d","date":"2015-02-12T23:34:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move the test for zero-length into the char_traits (from string_view). Add tests to char_traits specializations\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@228981 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1bd299a58eaea777106289027eab4832481eab7f","date":"2015-02-13T03:02:28.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix error checking in get_temp_file_name().\n\nChecking errno without first checking that the call failed means that\nif some other call prior to mkstemp failed with EINVAL prior to this,\nthe assert would fire even if mkstemp succeeded. If something failed\nwith EEXIST, it would go in to an infinite loop.\n\nChange-Id: I3f140a3e15fe08664a38a8c9a950c4ed547eb481\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229035 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4205190e07563ca49881b4a3a88efe6e95d449ed","date":"2015-02-13T15:25:21.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Modularize TargetInfo discovery in the lit config\n\nWhen the remote execution patch lands, this will allow us to drop in a\nreplacement TargetInfo object for locale support discovery, alleviating\nthe assumption that host==target.\n\nhttp://reviews.llvm.org/D7601\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229111 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3068a136ae31e03bd081c9d7e2e86f36ccb9873","date":"2015-02-13T15:34:01.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Appease buildbots\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229114 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6bcbced54fadc4bb750ee42a0347c97d1b4c6552","date":"2015-02-13T16:04:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rooting out more undefined behavior in char_traits.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229119 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"846a4a0a6502f8b59ea5c75902672de9cd4e48e7","date":"2015-02-13T22:15:28.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"cctype: tweak inclusions for _LIBCPP_MSVCRT case\n\ncctype uses ctype functions such as isblank. However, when building against\nmsvcrt, this is provided by the support header. Include the support header if\nbuilding for Windows to ensure that the definition is properly visible.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229161 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1b30c41adaeaf5e0ab8dc10e26832789bd08097","date":"2015-02-13T22:15:32.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Handle function name conflicts in _LIBCPP_MSVCRT mode\n\nVisual Studio's SAL extension uses a macro named __deallocate. This macro is\nused pervasively, and gets included through various different ways. This\nconflicts with the similarly named interfaces in libc++. Introduce a undef\nheader similar to __undef_min_max to handle this. This fixes a number of errors\ndue to the macro replacing the function name.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19efe015fb7ee49cd28c8c45217ef691312faa18","date":"2015-02-15T05:18:55.000Z","author":{"name":"Larisse Voufo","email":"lvoufo@google.com"},"message":"Implement C++14's sized deallocation functions, since there are no longer implicitly defined by clang, as of r229241.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229281 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13b96fdfbde76fe7d7f45f8a2f8b2dc843042ba3","date":"2015-02-17T16:52:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/ratio>\n\nSummary:\nThis patch is pretty simple. It just adds the _v traits from <ratio>. \n\nThe draft can be found here.\n\nReviewers: jroelofs, K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7351\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229509 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"89465dce7c16d2108fdf0b64fe6b3e7388c3a24e","date":"2015-02-18T16:31:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix PR20084 - std::is_function<void() const> failed.\n\nSummary:\nThis patch introduces some black magic to detect const and volatile qualified function types such as `void () const`.\n\nThe patch works in the following way:\n\nWe first rule out any type that satisfies on of the following. These restrictions are important so that the test below works properly.\n* `is_class<_Tp>::value`\n* `is_union<_Tp>::value`\n* `is_void<_Tp>::value`\n* `is_reference<_Tp>::value`\n* `__is_nullptr_t<_Tp>::value`\n\n\nIf none of the above is true we perform overload resolution on `__source<_Tp>(0)` to determine the return type.\n*  If `_Tp&` is well-formed we select `_Tp& __source(int)`. `_Tp&` is only ill formed for cv void types and cv/ref qualified function types.\n* Otherwise we select `__dummy_type __source(...)`. Since we know `_Tp` cannot be void then it must be a function type.\n\n\nlet `R` be the returned from `__source<_Tp>(0)`. \nWe perform overload resolution on `__test<_Tp>(R)`.\n* If `R` is `__dummy_type` we call `true_type __test(__dummy_type)`.\n* if `R` is `_Tp&` and `_Tp&` decays to `_Tp*` we call `true_type __test(_Tp*)`.  Only references to function types decay to a pointer of the same type.\n* In all other cases we call `false_type __test(...)`. \n\n`__source<_Tp>(0)` will try and form `_Tp&`  in the return type. if `_Tp&` is not well formed the return type of `__source<_Tp>(0)` will be dummy type. `_Tp&` is only ill-formed for cv/ref qualified function types (and void which is dealt with elsewhere).\n\n\nThis fixes PR20084 - http://llvm.org/bugs/show_bug.cgi?id=20084\n\nReviewers: rsmith, K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7573\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229696 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f370b0a551580575e167259ef60c7b0dea96b9f","date":"2015-02-18T17:00:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable testing with _LIBCPP_DEBUG and fix bad assertions in string_view.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ceead9c855197513daa8c15b92dc2db05940af3d","date":"2015-02-18T17:24:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move the default template arguments into the forward declarations for the containers: deque, forwardlist and list. References PR#22605.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229705 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc3ea928ae759ffc0bf72be40e09a47b73bad096","date":"2015-02-18T17:39:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Tired of colorless compile errors? Enable color diagnostics today!\n\nSummary:\nThis patch adds a lit option to enable color diagnostics when either `--param=color_diagnostics` is passed to LIT or `LIBCXX_COLOR_DIAGNOSTICS` is present in the environment.\n\nMy only concern with this patch is that GCC and Clang take different flags and that only GCC 4.9 and greater support `-fdiagnostics-color=always`\n\nDoes anybody have objections to this going in?\n\nReviewers: jroelofs, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7729\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a46f5ce5bbf120f6a056c39a22f8023a816b76fe","date":"2015-02-18T17:51:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move the default template arguments into the forward declarations for the container adapters: stack and queue. References PR#22605.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229708 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59f573f670a4ff53919fcdfc2f40725723eb2c04","date":"2015-02-18T19:28:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove several unused forward declarations. Fixes PR22605.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f063052fe1d3c7a40de69795228a6334f956b9f9","date":"2015-02-19T02:10:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Mark most tuple tests UNSUPPORTED for c++03 and c++98.\n\nSummary: No declaration for the type `tuple` is given in c++03 or c++98 modes. Mark all tests that use the actual `tuple` type as UNSUPPORTED.\n\nReviewers: jroelofs, mclow.lists, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5956\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229808 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"784fa1eebaa2b392a85a954edfff1633be215a8a","date":"2015-02-19T02:44:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark more tuple tests as unsupported in C++98 && C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229810 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b5a5e52f03768e91c47aceccf37d68972679008","date":"2015-02-19T16:17:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make basic_streambuf::xsputn write characters in chunks whenever possible, instead of one at a time. References PR#10193\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229866 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a8aae4618957f4ebe81486495291aa489dfb7fb","date":"2015-02-19T23:26:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move to using -fdiagnostics-color=always on both GCC and Clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229927 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d75a44ba24de7280b7fa488d33a1e08bfce5f718","date":"2015-02-19T23:57:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix incorrect locale mapping in config.py on OSX\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229935 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74f95a01cd5e0db3aa07e0017648df0b58e74ad1","date":"2015-02-20T06:13:05.000Z","author":{"name":"Larisse Voufo","email":"lvoufo@google.com"},"message":"More on adding sized deallocation functions in libc++: Continuing from r229281, this adds version guards and test cases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229968 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43c1f2368e6222df2847fb40f3aded6865600920","date":"2015-02-20T06:17:20.000Z","author":{"name":"Larisse Voufo","email":"lvoufo@google.com"},"message":"Add self to CREDITS.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@229969 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45969ecfcd3c0810623c73209406803032ce3bf0","date":"2015-02-21T02:26:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Move to using libc++abi2.exp as the default symbol list for libc++\n\nSummary:\nlibc++abi2.exp should be used whenever `cxxabi.h` defines `_LIBCPPABI_VERSION`. This macro was added to libc++abi in 2012 in r149632. For this reason we should use libc++abi2.exp as default unless otherwise specified.\n\nAlso when building against an in-tree libc++abi we definitely want to use libc++abi2.exp.\n\nI would love to know what OSX was the last to use libc++abi.exp but I can only test on 10.9.\n\n\nReviewers: danalbert, mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: meadori, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7773\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230119 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da1818a08c9676000c464402f634cb0e9340389d","date":"2015-02-21T02:30:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Try and prevent evaluation of `is_default_constructible` on tuples default constructor if it is not needed.\n\nSummary:\nCurrently parts of the SFINAE on tuples default constructor always gets evaluated even when the default constructor is never called or instantiated. This can cause a hard compile error when a tuple is created with types that do not have a default constructor. Below is a self contained example using a pair like class. This code will not compile but probably should.\n\n```\n\n#include <type_traits>\n\ntemplate <class T>\nstruct IllFormedDefaultImp {\n    IllFormedDefaultImp(T x) : value(x) {}\n    constexpr IllFormedDefaultImp() {}\n    T value;\n};\n\ntypedef IllFormedDefaultImp<int &> IllFormedDefault;\n\ntemplate <class T, class U>\nstruct pair\n{\n  template <bool Dummy = true,\n    class = typename std::enable_if<\n         std::is_default_constructible<T>::value\n      && std::is_default_constructible<U>::value\n      && Dummy>::type\n    >\n  constexpr pair() : first(), second() {}\n\n  pair(T const & t, U const & u) : first(t), second(u) {}\n\n  T first;\n  U second;\n};\n\nint main()\n{\n  int x = 1;\n  IllFormedDefault v(x);\n  pair<IllFormedDefault, IllFormedDefault> p(v, v);\n}\n```\n\nOne way to fix this is to use `Dummy` in a more involved way in the constructor SFINAE. The following patch fixes these sorts of hard compile errors for tuple.\n\n\nReviewers: mclow.lists, rsmith, K-ballo, EricWF\n\nReviewed By: EricWF\n\nSubscribers: ldionne, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7569\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230120 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14861507bce18ed8888fd8399477e2217fba8dbf","date":"2015-02-23T21:12:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change string_view::at to make it work with gcc and VC++. Thanks to K-ballo for the bug report, and Jonathan Wakeley for the code review in the bar.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230260 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0ac177beaf8468126f0daa10571a6cb05fa858d","date":"2015-02-24T01:59:38.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"Reword ELAST warning\n\nSummary:\nGCC emits a pretty amusing warning when there are apostrophes in a #warning:\n```warning: invalid suffix on literal; C++11 requires a space between literal and identifier [-Wliteral-suffix]```\n\nReword the warning to avoid this, and be more consistent with other warnings in libc++.\n\nReviewers: danalbert\n\nSubscribers: llvm-commits\n\nDifferential Revision: http://reviews.llvm.org/D7818\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40310ac76cb61f110b7b9d88be2ef6077a92e6b7","date":"2015-02-24T10:52:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove XFAIL on string view test for apples clang compiler. Thanks to Marshall for the fix\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230322 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fec08372b8300aa1346485f705cd5c507ada0c53","date":"2015-02-24T12:46:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make the forward declaration for array swap have the same inline/visibility attributes as the definition. Thanks to Steven Wu for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59ac38ccd1351d24df79365e9dcbd65b1c128ad9","date":"2015-02-25T12:20:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add trailing return types (and noexcept specifications) to the 'diamond operators'. Fixes PR#22600.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230484 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a14f7cb412971a06a7d6c045630ef1f6412d5fc7","date":"2015-02-25T22:16:46.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: support newlib's ctype\n\nSummary: Newlib supports ctype differently from other platforms, this patch teaches libc++ about yet another platform that does ctype differently.\n\nReviewers: jroelofs\n\nSubscribers: cfe-commits, danalbert, EricWF, jvoung, jfb, mclow.lists\n\nDifferential Revision: http://reviews.llvm.org/D7888\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230557 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83d7735487a9787ee8ab197009bafe7a1a2e7986","date":"2015-02-26T00:42:17.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Add remote testing support to the lit config.\n\nExecutors can be specified at configure time by using the -DLIBCXX_EXECUTOR=\"\"\noption. Examples include:\n\n  $ cmake <other_flags> -DLIBCXX_EXECUTOR=\"TimeoutExecutor(30,LocalExecutor())\"\n      This runs individual tests with a maximum duration\n\n  $ cmake <other_flags> -DLIBCXX_EXECUTOR=\"SSHExecutor('hostname','username')\"\n      This runs tests on a remote target, using scp to shuttle binaries to the\n      target, and ssh to invoke commands there.\n\n  $ cmake <other_flags> -DLIBCXX_EXECUTOR=\"PrefixExecutor('/path/to/run/script',LocalExecutor())\"\n      This assumes the script knows how to copy run the executables passed to it,\n      and allows for the ultimate control. This is useful for running things\n      inside emulators like Valgrind & QEMU.\n\nTODO: This doesn't claim to support ShTest tests yet, that will take a bit more\n  thought & finagling (I'm still not sure how to orchestrate copy-in for those cases.\n\n  I've also punted on what to do about tests that read data files. The testsuite\n  has several tests that need to read *.dat files placed next to them, and\n  currently those aren't copied over when using, say, an SSHExecutor. The\n  affected tests are:\n\n     libc++ :: std/input.output/file.streams/fstreams/filebuf.virtuals/pbackfail.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/filebuf.virtuals/underflow.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.assign/member_swap.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.assign/move_assign.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.assign/nonmember_swap.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.cons/move.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.cons/pointer.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.cons/string.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.members/close.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.members/open_pointer.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.members/open_string.pass.cpp\n     libc++ :: std/input.output/file.streams/fstreams/ifstream.members/rdbuf.pass.cpp\n     libc++ :: std/localization/locales/locale.convenience/conversions/conversions.buffer/pbackfail.pass.cpp\n     libc++ :: std/localization/locales/locale.convenience/conversions/conversions.buffer/underflow.pass.cpp\n\nNote: One thing to watch out for when using the SSHExecutor for cross-testing is\n  that you'll also want to specify a TargetInfo object (so that the host's\n  features aren't used for available-features checks and flags setup).\n\nhttp://reviews.llvm.org/D7380\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7710603b641a73cece3a1b389ce7e1c3aa16f2aa","date":"2015-02-26T00:48:22.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Add self to CREDITS.txt\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230595 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ff0531e952125b1c41922f36bd58797215e7a22","date":"2015-02-28T20:18:39.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"cmath: account for MSVCRT 12.0 changes\n\nMSVCRT 12.0 introduces better compatibility for C99. This includes a number of\nmath routines that were previously undefined. Use the crtversion.h header to\ndetect the version of MSVCRT being targeted and avoid re-declaring the\nvariables.\n\nSince copysign has been introduced in MSVCRT, importing the definition via using\nmakes it difficult to provide overloads (due to minor differences between\nthrow () and noexcept. Avoid defining the overloads on newer MSVCRT\ntargets.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@230867 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0b166e9444c69b22a26b54e439727b11fe3891e","date":"2015-03-03T15:59:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add support for linking libc++ against a static ABI library.\n\nSummary:\nThis patch add the CMake option `LIBCXX_ENABLE_STATIC_ABI_LIBRARY` which, when enabled, will link libc++ against the static version of the ABI library.\n\n\nReviewers: mclow.lists, jroelofs, danalbert\n\nReviewed By: danalbert\n\nSubscribers: compnerd, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8017\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231076 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"174b2b8acf676de0388cb7a166cfe01d78bdffda","date":"2015-03-03T16:15:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add better tests for ctype<char>::classic_table\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231077 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c8e663cedb99207528b507d1e287673328c5c4f","date":"2015-03-03T20:10:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow declaration of map and multimap iterator with incomplete mapped type. Patch from eugenis\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231119 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8291a76087c7f4b76823c932f0d8008f724d8c9b","date":"2015-03-04T16:10:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Create a default rune table for libc++. Initial setting - never enabled. The expectation is that some targets (Android, cough) will enable it. Note that this is an implementation detail, not an interface change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231252 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e917d804dbb73c6bb938576596549a0ca3328893","date":"2015-03-04T16:50:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Nbjoerg suggested a better name for the macro for the default rune table: _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231255 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3b1d2837886f3186e94b387e0123d53371c5c6af","date":"2015-03-04T23:09:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move the <dynarray> tests out of the std/ hierarchy, since it's not really part of the standard any more.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231311 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad98e210c65e8a129b185b38fa6e0ba33beef1dc","date":"2015-03-05T16:07:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rework reverse_iterator::operator[] so as not to use the base iterators operator [], which can cause constness problems. Fixes PR17883\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231375 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03e3302cc1d0f0706c55252740d7828127df9f47","date":"2015-03-05T20:27:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Run ShTests when the executor is an instance of LocalExecutor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231404 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab2b9f526c22e328b3228c9d819232fc4649514a","date":"2015-03-06T06:22:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unneeded python import\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231453 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca27dd0a23fbfcd94e57d14a00f0b9868844f273","date":"2015-03-06T18:35:45.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix the PrefixExecutor.\n\nThe PrefixExecutor wasn't passing the exe_path down the chain, so the\ncommand was overriding that, the work_dir was being passed as the\ncommand, and so on.\n\nI've cleaned up a few pylint issues while I was here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231496 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cebeadf30ba005d2ee77c0f5a46f4f3a12352ce4","date":"2015-03-06T18:51:25.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Oops. This arg is passed, just ignored.\n\nWe should probably be using this argument to find the data files for\nthe tests, but that isn't implemented yet.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231498 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2020d8ac89e4ee5fd75501a69fe804e39cd1b8c1","date":"2015-03-09T12:04:16.000Z","author":{"name":"Ed Schouten","email":"ed@80386.nl"},"message":"Add CloudABI locale names to platform_support.h.\n\nOn CloudABI we should append the timezone name to the end of the locale\n(e.g., nl_NL.UTF-8@Europe/Amsterdam). By fixing the locale names we can\nalready let a lot of locale related tests pass.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231649 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d07fcd66b99989826061397d64b39708298eda1e","date":"2015-03-09T17:08:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix an exception-safety bug in <deque>. Reference: PR#22650. Not closing the bug because there's more work to do here\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231672 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c7b80131b4df24bbd71959a5af80961caa449cf","date":"2015-03-09T18:02:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add TrackedValue to test/support. Thanks to Louis Dionne\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231674 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e63e2974b2037c397db18b916a0da04784afbd2","date":"2015-03-09T21:30:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move test to use correct suffix\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231704 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"131219802f018b3b739a8fe57c79ccfdd9ecaa23","date":"2015-03-09T21:39:02.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Fix another -Wunused-local-typedef warning in include/__tree.\n\nThe _Pp typedef in __tree<_Tp, _Compare, _Allocator>::__count_multi()\nisn't used anywhere, so adding _LIBCPP_UNUSED is unecessary.\n\nDifferential Revision: http://reviews.llvm.org/D8140\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231705 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f4f2215b711d32a74457c30d7428cde86fca2da","date":"2015-03-10T00:25:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix __RAII_IncreaseAnnotator for increases >= 1\n\nSummary: Fix suggested by @mclow.lists on D8109. Store the size of the un-poisoned vector upon construction instead of calculating it later.\n\nReviewers: titus, mclow.lists, kcc, EricWF\n\nReviewed By: EricWF\n\nSubscribers: mclow.lists, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8172\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63e70b67eb93f78eae8122ce31443d394dcbd196","date":"2015-03-10T07:46:06.000Z","author":{"name":"Ed Schouten","email":"ed@80386.nl"},"message":"Add support for arc4random() to random_device.\n\nNuxi CloudABI (https://github.com/NuxiNL/cloudlibc) does not allow\nprocesses to access the global filesystem namespace. This breaks\nrandom_device, as it attempts to use /dev/{u,}random. This change adds\nsupport for arc4random(), which is present on CloudABI.\n\nIn my opinion it would also make sense to use arc4random() on other\noperating systems, such as *BSD and Mac OS X, but I'd rather leave that\nto the maintainers of the respective platforms. Switching to\narc4random() does change the ABI.\n\nThis change also attempts to make some cleanups to the code. It adds a\nsingle #define for every random interface, instead of testing against\noperating systems explicitly.\n\nAs discussed, also validate the token argument to be equal to\n\"/dev/urandom\" on all systems that only provide pseudo-random numbers.\nThis should cause little to no breakage, as \"/dev/urandom\" is also the\ndefault argument value.\n\nReviewed by: jfb\nDifferential Revision: http://reviews.llvm.org/D8134\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231764 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e5a356a891571be202d9d9ccd8e73ba54cf65581","date":"2015-03-10T07:57:43.000Z","author":{"name":"Ed Schouten","email":"ed@80386.nl"},"message":"Print log/error messages on stderr, not stdout\n\nThere are a couple of places where libc++ prints log/error messages to\nstdout on its own. This may of course interfere with the output\ngenerated with applications. Log/error messages should be directed to\nstderr instead.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8135\nReviewed by:\tmarshall\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231767 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21876f739e97c78816745f2cfb177b3c5a76fff0","date":"2015-03-10T08:01:10.000Z","author":{"name":"Ed Schouten","email":"ed@80386.nl"},"message":"Don't include <sys/sysctl.h> on CloudABI.\n\nAs CloudABI does not provide sysctl(), this header is not present. Make\nthread.cpp build correctly (and pass all tests) by not including the header.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231768 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c42c4e68857956b91caba7349bce4e1cb808618","date":"2015-03-10T09:26:38.000Z","author":{"name":"Ed Schouten","email":"ed@80386.nl"},"message":"Enable _LIBCPP_LOCALE__L_EXTENSIONS on CloudABI.\n\nCloudABI provides the _l() functions that are part of POSIX.1-2008, but\nalso the extensions that are available on systems like OS X and *BSD\n(scanf_l, printf_l, etc).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231777 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"681abae7dc2dcc20017667c3f44a3e717b25ad34","date":"2015-03-10T09:35:22.000Z","author":{"name":"Ed Schouten","email":"ed@80386.nl"},"message":"Also use LC_C_LOCALE on CloudABI.\n\nBefore I discovered that NetBSD provides a permanent handle to the C\nlocale called LC_C_LOCALE, I also added support for this to CloudABI\nunder the name LC_POSIX_LOCALE. I've renamed it to LC_C_LOCALE to\nimprove compatibility.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231780 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6c1a1ee758fce46d1ec5db443b3d42dc7fe4cea","date":"2015-03-10T18:43:16.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Factor out RemoteExecutor from SSHExecutor.\n\nSummary:\nA lot of the pieces of SSHExecutor can be shared with my AdbExecutor\n(https://android-review.googlesource.com/#/c/138807/).\n\nReviewers: EricWF, jroelofs\n\nReviewed By: jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8117\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231815 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"07a4bec1dd600078aa8ec64f5aaeae9a7cc5d7d8","date":"2015-03-10T20:46:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use generic feature name for sanitizers that replace new and delete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231841 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"761d98d2f77d1d38429d588ac1e8e1e4b7451ee8","date":"2015-03-10T22:31:49.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Copy data files to the remote runner.\n\nSummary:\nThe data files for any given test will be in the same directory as the\nsource with a file name that matches *.dat. To make these available to\ntests running remotely (such as over adb or ssh), copy them into the\ntest's remote working directory.\n\nNote that we will perform more copies than we actually need. The data\nfiles in the directory may only be used by one of the tests, but will\nbe copied for all tests in the same directory.\n\nThis patch also moves the remote test binary into the working\ndirectory (previously it was only invoked from the working directory\nrather than existing in it).\n\nReviewers: EricWF, jroelofs\n\nReviewed By: jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8118\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6272ae58fef2deb6fa27a09a8e86e13f89cd9a17","date":"2015-03-11T00:51:06.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Move Android to the builtin rune table.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231897 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0251f0fd1171222b53d61399d3c134157052749f","date":"2015-03-11T16:39:36.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Disable cat*() on CloudABI. Also make tiny cleanups.\n\nOn a new platform that I am working on\n(https://github.com/NuxiNL/cloudlibc) I am not implementing the\ncat{open,close,gets}() API, just like Android, Newlib, etc.\n\nInstead of adding yet another operating system name to the #ifs,\nintroduce _LIBCPP_HAS_CATOPEN in include/__config. Also adjust the code\nto only pull in nl_types.h when _LIBCPP_HAS_CATOPEN is set. We only\nneeded this header for the cat*() API.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8163\nReviewed by:\tmarshall\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231937 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6fb33ea8fb10be941c1b66d7054a67a9356a893d","date":"2015-03-11T17:00:28.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix ctype_byname<wchar_t>::do_is() mask checking.... again\n\nThis basically reverts the revert in r216508, and fixes a few more cases while\nI'm at it. Reading my commit message on that commit again, I think it's bupkis.\n\nhttp://reviews.llvm.org/D8237\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@231940 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b33ae5ba7dd53c8736a79fe19870ae856deebadb","date":"2015-03-12T15:44:39.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Add option to disable access to the global filesystem namespace.\n\nSystems like FreeBSD's Capsicum and Nuxi CloudABI apply the concept of\ncapability-based security on the way processes can interact with the\nfilesystem API. It is no longer possible to interact with the VFS\nthrough calls like open(), unlink(), rename(), etc. Instead, processes\nare only allowed to interact with files and directories to which they\nhave been granted access. The *at() functions can be used for this\npurpose.\n\nThis change adds a new config switch called\n_LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE. If set, all functionality\nthat requires the global filesystem namespace will be disabled. More\nconcretely:\n\n- fstream's open() function will be removed.\n- cstdio will no longer pull in fopen(), rename(), etc.\n- The test suite's get_temp_file_name() will be removed. This will cause\n  all tests that use the global filesystem namespace to break, but will\n  at least make all the other tests run (as get_temp_file_name will not\n  build anyway).\n\nIt is important to mention that this change will make fstream rather\nuseless on those systems for now. Still, I'd rather not have fstream\ndisabled entirely, as it is of course possible to come up with an\nextension for fstream that would allow access to local filesystem\nnamespaces (e.g., by adding an openat() member function).\n\nDifferential revision:\thttp://reviews.llvm.org/D8194\nReviewed by:\t\tjroelofs (thanks!)\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232049 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"95e5c0a0e7f739323a2745ea981b4d58a8ba8d37","date":"2015-03-12T15:48:06.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Also enable the default rune table on CloudABI.\n\nCloudABI does not expose a table on its own.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232050 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"561d3322c2f6c61f278b8bb3746b053a8c409af3","date":"2015-03-12T20:13:11.000Z","author":{"name":"Renato Golin","email":"renato.golin@linaro.org"},"message":"Update copyright year to 2015.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232094 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f77031db261c0ee2b6dc1f2f24ead958934304e3","date":"2015-03-13T15:09:42.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix build break on Solaris introduced by r231940\n\nSolaris apparently doesn't have iswblank_l.\n\n\nThanks to C Bergstrom for the report!\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94d09faa9332ca48c0b958b088fbb9c6ca59bd7f","date":"2015-03-15T18:36:31.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Remove unneeded initialisation of fenv_t and fexcept_t.\n\nThough common, there is no requirement that fenv_t and fexcept_t are\nstructure and integer types, respectively. fexcept_t is a structure on\nCloudABI.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"438a5c9fdf23d3f7924ef825e65195d107db5c36","date":"2015-03-16T09:44:37.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Don't hardcode the locale name string.\n\nThe rest of the test uses the #defines for the locale names properly. In\nthis single spot we do hardcode the string. This causes this test to\nfail on CloudABI, where this locale is called en_US.UTF-8@UTC.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232365 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"84b6c1f402b2ce755968419d4b31c20b4dbf2135","date":"2015-03-16T14:27:44.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Make *abs() and *div() work on CloudABI.\n\nAccording to POSIX, *abs() and *div() are allowed to be macros (in\naddition to being functions). Make sure we undefine these, so that\nstd::*abs() and std::*div() work as expected.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232379 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eda3fcaaedc2c6a13fce15fbe5fd472b642dc830","date":"2015-03-16T15:09:15.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Don't hardcode the Czech locale name.\n\nWe already have a definition for the Czech locale name in\nplatform_support.h. Use this one instead.\n\nWhile there, respect the common format of the tests. For most other\ntests it's the case that test_iterators.h is placed right underneath the\nother #includes (without an empty line). platform_support.h is included\nafter an empty line.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa8a52c934e377e634dd60d3206f2470838d8f56","date":"2015-03-16T15:10:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a problem when calling throw_with_nested with a class marked 'final'. Thanks to STL @ Microsoft for the bug report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"061244c8fb00aadf05220b8a6409d8c123cce726","date":"2015-03-16T17:56:04.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Don't attempt to validate the output of %p.\n\nIn one of the ostream tests we attempt to validate whether the output of\n%p is correct. This is actually outside the scope of libc++, for the\n%reason that the format of %p is implementation defined. Change the test\n%to validate that the output of %p is non-empty and is different when\n%given two unequal addresses.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8354\nReviewed by:\tmarshall\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e706d2c3efc5d5c2110553eefec3bc588b5c150","date":"2015-03-17T15:08:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Move tuple_size and tuple_element overloads for pair and array out of !defined(_LIBCPP_HAS_NO_VARIADICS) block.\n\nSummary:\nThere is no reason to guard `tuple_size`, `tuple_element` and `get<I>(...)` for pair and array inside of `<__tuple>` so that they are only available when we have variadic templates.\nThis requires there be redundant declarations and definitions. It also makes it easy to get things wrong.\n\nFor example the following code should compile (and does in c++11).\n```\n#define _LIBCPP_HAS_NO_VARIADICS\n#include <array>\n\nint main()\n{\n  static_assert((std::tuple_size<std::array<int, 10> volatile>::value == 10), \"\");\n}\n```\n\nThis patch lifts the non-variadic parts of `tuple_size`, `tuple_types`, and `get<I>(...)` to the top of `<__tuple>` where they don't require variadic templates. This patch also removes `<__tuple_03>` because there is no longer a need for it.\n\n\nReviewers: danalbert, K-ballo, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7774\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232492 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4d23cc6f5577f62df89bd42e15ee5106621e503b","date":"2015-03-17T15:30:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Define a new macro: _LIBCPP_HAS_NO_VARIABLE_TEMPLATES and use it. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232493 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13858ee05627bba4d0e7609ff84ad71d8d7e3ca0","date":"2015-03-17T18:28:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/tuple> header for LFTS.\n\nSummary:\nThis patch adds the `<experimental/tuple>` header (almost) as specified in the latest draft of the library fundamentals TS.\n\nThe main changes in this patch are:\n\n1. Added variable template `tuple_size_v`\n2. Added function `apply(Func &&, Tuple &&)`.\n3. Changed `__invoke` to be `_LIBCPP_CONSTEXPR_AFTER_CXX11`.\n\nThe `apply(...)` implementation uses `__invoke` to invoke the given function. `__invoke` already provides the required functionality. Using `__invoke` also allows `apply` to be used on pointers to member function/objects as an extension. In order to facilitate this `__invoke` has to be marked `constexpr`. \n\n\n\nTest Plan:\nEach new feature was tested. \n\nThe test cases for `tuple_size_v` are as follows:\n1. tuple_size_v.pass.cpp\n  - Check `tuple_size_v` on cv qualified tuples, pairs and arrays.\n2. tuple_size_v.fail.cpp\n  - Test on reference type.\n3. tuple_size_v_2.fail.cpp\n  - Test on non-tuple\n4. tuple_size_v_3.fail.cpp\n  - Test on pointer type.\n\nThe test cases for tuple.apply are as follows:\n\n1. arg_type.pass.cpp\n   - Ensure that ref/pointer/cv qualified types are properly passed.\n2. constexpr_types.pass.cpp\n   - Ensure constexpr evaluation of apply is possible for `tuple` and `pair`.\n3. extended_types.pass.cpp\n   - Test apply on function types permitted by extension.\n4. large_arity.pass.cpp\n   - Test that apply can evaluated on tuples and arrays with large sizes.\n5. ref_qualifiers.pass.cpp\n   - Test that apply respects ref qualified functions.\n6. return_type.pass.cpp\n   - Test that apply returns the proper type.\n7. types.pass.cpp\n   - Test apply on function types as required by LFTS.\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4512\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232515 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62a06f9fbaa0832bbe0bda367bff97fc5cc2bc31","date":"2015-03-17T18:40:58.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Clean up iostream creation in preparation for conditionalizing streams.\n\nInterleave the code for narrow and wide character streams. This makes it\nmore obvious that the two pieces of code are identical. Furthermore, it\nmakes it easier to conditionally compile support for certain streams, as\nless #ifdef blocks are needed.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8342\nReviewed by:\tmarshall\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232516 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9be398d6c13e5a7495441f48d1468b4bf67cb6e8","date":"2015-03-17T19:32:24.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix failed test command repro printing for *.pass.cpp tests\n\nBefore we were printing out the compile command twice, which isn't that useful.\n\nThanks EricWF for the report!\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232526 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9959bf0850ee9d3beee9904c6c761e702dd68f07","date":"2015-03-17T19:37:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix DYNLD_LIBRARY_PATH to include the ABI path if specified\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232527 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b6f8ed1c772afbdb2c28451e67ac5ee7b6092fe","date":"2015-03-18T15:24:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Provide std::abs(<floating-point>) in <cmath> on Solaris.\n\n1) <cstdlib> header should define std::abs([int|long|long long])\nfunctions. They use \"using ::abs\" to import these functions (which are\ndeclared in <stdlib.h>) into std namespace.\n2) <cmath> header should define std::abs([float|double|long double])\nfunction. If we try define new functions in std namespace, then it\nwill cause compile error in <cstdlib> because \"using ::abs\" will try\nimport not only [int|long|long long] functions, but also\n[float|double|long double] which are defined in <math.h> header on\nsolaris.\n\nPatch by C Bergstrom.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232641 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71aa376ede71132b3dc57526689869b47d2e857b","date":"2015-03-18T22:56:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix PR22922 - Allocator support for std::function does not know how to rebind.\n\nSummary:\nThis patch changes std::function to use allocator_traits to rebind the allocator instead of allocator itself.\n\nIt also changes most of the tests to use `bare_allocator` where possible instead of `test_allocator`.\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8391\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232686 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"537876b98e3cc290c43843f76979f4cee8d4a35b","date":"2015-03-19T03:20:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use after free and calls to operator comma in debug mode\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d24d89e9b48c8f9ff6e978558ee21a746470baf","date":"2015-03-19T09:03:58.000Z","author":{"name":"Sylvestre Ledru","email":"sylvestre@debian.org"},"message":"Add support for kfreebsd. Thanks to Jan Henke\nReported on the Debian BTS:\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=780106\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232714 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"64befb5bc5b5aaec6717c931396990eb58ecd626","date":"2015-03-19T17:05:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add code to honor the match_not_bol and match_not_eol regex flats. Fixes PR#22651. Thanks to Jim Porter for the report and suggested fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232733 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02c24c1d3bfa041df80e3932d39c864be0d25105","date":"2015-03-19T20:59:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Unify LIBCXX_<ABI-Name>_INCLUDE_PATHS to be LIBCXX_CXX_ABI_INCLUDE_PATHS\n\nSummary:\nClean up all the different possible CMake options for specifying the ABI include paths into one CMake option named `LIBCXX_CXX_ABI_INCLUDE_PATHS`. \nThe documentation has been updated to reflect this change.\n\nFor the next week I have added explicit errors if any of the old flags is used. These errors inform users of the change and the new option to use.\n\nBefore committing the change I will announce this change on cfe-dev.\n\nReviewers: danalbert, mclow.lists\n\nReviewed By: danalbert, mclow.lists\n\nSubscribers: jroelofs, cbergstrom, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D5039\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232762 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffbfbcda66a4cdab4fc6a84fc571b9f1b9fad70f","date":"2015-03-19T21:11:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Create macro to allow testing of is_convertible without the compiler builtin.\n\nSummary: This patch also fixes one test case that failed in the library version of is_convertible.\n\nReviewers: mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8456\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232764 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d9feb59f05b62531bd8070b41615da5df15d67d","date":"2015-03-20T22:09:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add symbol checking script to libc++ to help manage exported symbols.\n\nSummary:\nAdd symbol checking scripts for extracting a list of symbols from shared libraries and for comparing symbol lists for differences.\n\n\n\nReviewers: mclow.lists, danalbert, EricWF\n\nReviewed By: EricWF\n\nSubscribers: majnemer, emaste, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D4946\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232855 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efdefb2cef9337b0ee0c9e1c971cc2baa8887b9e","date":"2015-03-20T22:13:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of incorrect package name in sym_check\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232856 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e19992480903244370a5fc6bb69b4092695c2ec5","date":"2015-03-20T23:07:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve automatic detection of filetype for sym_check\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232858 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b58f517af78bf6f04b65200e51a4271b15250fe1","date":"2015-03-21T06:05:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unneeded redeclaration of reference_wrapper.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@232887 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70e13a9ca895db7f4f19ddc3bd0f016320225058","date":"2015-03-23T20:07:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix incorrect error handling of call to mbrtowc. This is PR#13759. Leaving the bug open because (1) I'm not sure that we're correct here, only better than before, and (2) no tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f86893b6c6d20535ad8bdebd17fa59a48a4d171","date":"2015-03-26T08:38:00.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Don't let time_put test use implementation dependent constructs.\n\nThe time_put test doesn't seem to work on Linux and CloudABI. For Linux\nwe already have an XFAIL. Closer inspection seems to reveal that this\ntest does not pass for a couple of reasons.\n\nFirst of all, the tm_yday field is set to an invalid value. The\nstrftime() function doesn't behave consistently across platforms in case\nthe values in the tm structure are incoherent. Fix up this field to have\nthe value 121, which corresponds with tm_mday, tm_mon and tm_year. This\nof course affects the output of time_put for some modifiers, so update\nthe tests accordingly.\n\nSecond, some of the tests actually use modifiers that are only present\non BSD derived systems. They are not part of the C standard/POSIX.\nSimply remove them.\n\nFinally, some of the tests actually use invalid modifiers, causing a\nmalformed format string to be passed to strftime(). Remove these tests\nas well.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8349\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233262 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43dbeea66fef39fb233cdc02f791307a078968d5","date":"2015-03-26T14:33:46.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Remove the state_types array.\n\nIf we want to add support for making std::cin and std::cout optional, it\nis impractical to have all of the mbstate_t objects in one array. This\nwould mean that if std::cin and std::cout are omitted, the state_types\narray is only used partially.\n\nSolve this by using separate global variables. These are placed right\nnext to the iostream object and the buffer, meaning we can easily #ifdef\nthem away.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8359\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"abd06b4c9be0a8cf3a69b2b745ef2b112cac83c8","date":"2015-03-26T14:35:46.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Make the presence of stdin and stdout optional.\n\nThe idea behind Nuxi CloudABI is that it is targeted at (but not limited to)\nrunning networked services in a sandboxed environment. The model behind stdin,\nstdout and stderr is strongly focused on interactive tools in a command shell.\nCloudABI does not support the notion of stdin and stdout, as 'standard\ninput/output' does not apply to services. The concept of stderr does makes\nsense though, as services do need some mechanism to log error messages in a\nuniform way.\n\nThis patch extends libc++ in such a way that std::cin and std::cout and the\nassociated <cstdio>/<cwchar> functions can be disabled through the flags\n_LIBCPP_HAS_NO_STDIN and _LIBCPP_HAS_NO_STDOUT, respectively. At the same time\nit attempts to clean up src/iostream.cpp a bit. Instead of using a single array\nof mbstate_t objects and hardcoding the array indices, it creates separate\nobjects that declared next to the iostream objects and their buffers. The code\nis also restructured by interleaving the construction and setup of c* and wc*\nobjects. That way it is more obvious that this is done identically.\n\nThe c* and wc* objects already have separate unit tests. Make use of this fact\nby adding XFAILs in case libcpp-has-no-std* is set. That way the tests work in\nboth directions. If stdin or stdout is disabled, these tests will therefore\ntest for the absence of c* and wc*.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8340\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd4de45e664421ee21df455d424b4999e90d9ffe","date":"2015-03-26T16:45:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for library version of is_convertible\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faa65e99a8047ff881bd0936e040e3f8afb40d13","date":"2015-03-27T05:44:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add readelf support to abi_check. Prefer readelf over nm\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233360 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28cf4034419e817deda6401a09784ddf4ce65040","date":"2015-03-27T06:04:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"cleanup comments in sym_check\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233364 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91220d104379729e1fa9e2335c278d3aea3ebc62","date":"2015-03-27T07:07:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR23041. Use lock_shared() as opposed to lock() in shared_lock test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233367 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f274d0633ee5b01797ba4f4f08e6037972b7136","date":"2015-03-27T09:00:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Only enable special apple link flags for libc++abi (or none)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233368 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4bd15469a95f4400ebe7b8ff7ef9ac53e18eecd4","date":"2015-03-30T15:22:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix PR22771 - Support access control SFINAE in the library version of is_convertible.\n\nSummary:\nCurrently the conversion check does not take place in a context where access control SFINAE is applied. This patch changes the context of the test expression so that SFINAE occurs if access control does not permit the conversion.\n\nRelated bug: https://llvm.org/bugs/show_bug.cgi?id=22771\n\nReviewers: mclow.lists, rsmith, dim\n\nReviewed By: dim\n\nSubscribers: dim, rodrigc, emaste, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8461\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233552 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86319f01df0e3779ada0a7314509cd071519a0b9","date":"2015-03-30T16:07:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"While testing Erik's code coverage scripts, I found a hole in the test suite - vector::assign where a reallocation was not required had no tests. Add some\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233557 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3accbf03e2fb11db2d6091e7c59d452c05454d81","date":"2015-03-30T23:26:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make the new tests better; make sure that we're testing the case where no reallocation has to happen\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233641 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f68d637860a6aa3a24223145c222991e54d1018f","date":"2015-03-31T01:41:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow enabling CCache through an env variable. This helps enable/disable the option on buildbots.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233659 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf9653d85f05b945ed5e2a79f1c93b16e064e054","date":"2015-03-31T04:15:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add code coverage configuration to CMake and LIT.\n\nSummary:\nThis patch adds configuration to CMake and LIT for running the libc++ test-suite to generate code coverage.\n\nTo use code coverage use following instructions.\n\n* Find the clang resource dir using `$CXX -print-search-dirs`. Let <library-dir> be the first library search directory.\n* `cmake <regular-options> -DLIBCXX_GENERATE_COVERAGE=ON -DLIBCXX_COVERAGE_LIBRARY=<library-dir>/lib/<platform>/libclang_rt.profile.a <source>`\n* `make cxx`\n* `make check-libcxx`\n* `make generate-libcxx-coverage`\n\n\nThe reason I want this patch upstreamed is so I can setup a bot that generates code coverage and posts in online for every revision. \n\n\n\nReviewers: mclow.lists, jroelofs, danalbert\n\nReviewed By: danalbert\n\nDifferential Revision: http://reviews.llvm.org/D8716\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233669 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"088ed9fe946997f94682ee53d586b8c3d118e211","date":"2015-03-31T16:54:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Optimize vectors uninitialized construction of trivial types from an iterator range.\n\nSummary:\nIn certain cases vector can use memcpy to construct a range of elements at the back of the vector. We currently don't do this resulting in terrible code gen in non-optimized mode and a\nvery large slowdown compared to libstdc++. \n\nThis patch adds a `__construct_forward_range(Allocator, Iter, Iter, _Ptr&)` and `__construct_forward_range(Allocator, Tp*, Tp*, Tp*&)` functions to `allocator_traits` which act similarly to the existing `__construct_forward(...)` functions.\n\nThis patch also changes vectors `__construct_at_end(Iter, Iter)` to be `__construct_at_end(Iter, Iter, SizeType)` where SizeType is the size of the range. `__construct_at_end(Iter, Iter, SizeType)` now calls `allocator_traits<Tp>::__construct_forward_range(...)`. \n\nThis patch is based off the design of `__swap_out_circular_buffer(...)` which uses `allocator_traits<Tp>::__construct_forward(...)`.\n\nOn my machine this code performs 4x better than the current implementation when tested against `std::vector<int>`. \n\n\n\nReviewers: howard.hinnant, titus, kcc, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8109\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2cea80b137cb6e6bbadc5f0461220547f351461f","date":"2015-04-01T15:49:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove statement with no effect inside tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233816 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d55ecf51364279841f140f0255af8f496a7ee3f","date":"2015-04-02T21:02:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix bug in shared_timed_mutex that could cause a program to hang.\n\nSummary:\nThe summary of the bug, provided by Stephan T. Lavavej:\n\nIn shared_timed_mutex::try_lock_until() (line 195 in 3.6.0), you need to deliver a notification.  The scenario is:\n \n* There are N threads holding the shared lock.\n* One thread calls try_lock_until() to attempt to acquire the exclusive lock.  It sets the \"I want to write\" bool/bit, then waits for the N readers to drain away.\n* K more threads attempt to acquire the shared lock, but they notice that someone said \"I want to write\", so they block on a condition_variable.\n* At least one of the N readers is stubborn and doesn't release the shared lock.\n* The wannabe-writer times out, gives up, and unsets the \"I want to write\" bool/bit.\n \nAt this point, a notification (it needs to be notify_all) must be delivered to the condition_variable that the K wannabe-readers are waiting on.  Otherwise, they can block forever without waking up.\n\n\n\nReviewers: mclow.lists, jyasskin\n\nReviewed By: jyasskin\n\nSubscribers: jyasskin, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8796\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6be02cb83f78d11afb94c3886729ce4198fa61e0","date":"2015-04-02T21:12:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix race conditions in test class used throughout the std::thread tests.\n\nThe test class 'G' reads and writes to the same static variables in its\nconstructor, destructor and call operator. When threads are\nconstructed using `std::thread t((G()))` there is a race condition between the\ndestruction of the temporary and the execution of `G::operator()()`.\n\nThe fix is to simply create the input before creating the thread.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@233946 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66302c650b16a0b8134a50e0fe368d1d69952863","date":"2015-04-07T05:21:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In many places, there was an #ifdef/#else block that selected one of two implmentations of rebind_alloc based on whether or not we had template aliases. Create a helper struct to encapsulate that bit of logic, and replace all the ifdefs with uses of that struct. No functionality change intented.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@234296 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a4964aef37d746a78d88b632c49290dda824108","date":"2015-04-14T13:53:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Qualify an internal call in is_assignable to prevent ADL lookup, which would 'complete' an type definition unnecessarily. Thanks to Richard Smith for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@234886 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9d030687da6516d1335e8400e8e709bdb9b00f1","date":"2015-04-16T21:36:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"A few bits of N2994 didn't get fully implemented a long time ago. Thanks to STL@microsoft.com for the bug report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@235134 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c254b36c2947d20f092d21d88f2d0a1ea6856466","date":"2015-04-19T15:32:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove constexpr support for std::apply because it introduces regressions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@235274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"71ed9f00d23be57d1bfe0761312c5b9124ed386b","date":"2015-04-23T16:45:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed an 'extra tokens at end of #endif directive' warning in experimental/ratio\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@235607 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f916f1c7c784a6e2da5ddc7b3587e1d62f95e7d","date":"2015-04-28T14:26:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++17 status; mark issues 2170, 2377, and 2408 as complete. We already do these; no code changes necessary.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@235992 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46a7ec9a3dc8cd7e15a8615f8d576ca50a5f0650","date":"2015-04-28T16:52:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some preprocessor directives that were generating warnings in the test suite.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@235999 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ceff4ef433cd9b4781dced683e215d5e5e9ce4f","date":"2015-04-28T19:35:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed 'complete' from 2408; updated status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236025 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e879e3d3f831dc7f475489f0b30dcc8529bf5ef","date":"2015-04-30T15:19:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2387 as complete. No code changes needed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14dbb25449950502fd4d2573e99c339aad1462a0","date":"2015-04-30T21:47:28.000Z","author":{"name":"Richard Trieu","email":"rtrieu@google.com"},"message":"Fix -Wpessimizing-move warning by remove the call to std::move.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236265 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b23a3324abf2d6de96f9232fe7b0073813e539f","date":"2015-05-01T22:14:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Found a Urbana paper that has library bits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236356 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd13782c22b24ce23ad614a05976b4471e75e9b0","date":"2015-05-06T12:11:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Replace two naked references of 'std::' with the macro '_VSTD::'. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d20675f97079410e6a2685630f490b75ffe855f5","date":"2015-05-08T21:11:49.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Fix typo in www. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236902 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dbaf7a0d31ac7d5e3121686f1e771d558d62a34b","date":"2015-05-10T13:14:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for LWG2454: Add raw_storage_iterator::base() member\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236948 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3607f8640d952cc65ec9b4c3647755fe70cb5330","date":"2015-05-10T13:26:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove some debugging printout lines. No functionality change.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236949 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"488025c316ed7a54c205a977a7aeac51b187e176","date":"2015-05-10T13:35:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for LWG Issue 2059: C++0x ambiguity problem with map::erase\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236950 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"928735abf1aac39cc68ba52bc710d229b06b8143","date":"2015-05-10T13:53:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for LWG Issue 2369: constexpr max(initializer_list) vs max_element\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236952 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0ad232a8826f08d3a1e6a217ecf58a300960439a","date":"2015-05-10T13:59:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for LWG Issue 2415: Inconsistency between unique_ptr and shared_ptr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@236953 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5ad9ac48bfe9ec2de8f79bc036626a88f854a93","date":"2015-05-12T22:55:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Document a known build issue on OS X 10.8 and later.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237205 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56a8c6438a8a6272cf8655ae048a4e6411322931","date":"2015-05-13T16:55:41.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Implement std::experimental::sample.\n\nFollowing specification in \"C++ Extensions for Library Fundamentals\":\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#alg.random.sample\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22a6d5aedea6cf18abe31c303b94cf69c3be460b","date":"2015-05-14T20:54:18.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Use clock_gettime()'s CLOCK_REALTIME instead of gettimeofday().\n\nThe system_clock::now() function currently uses gettimeofday(). The\nproblem with gettimeofday() is that it is an obsolete XSI function,\nhence unavailable on CloudABI. See:\n\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/gettimeofday.html\n\nChange this code to use clock_gettime() with CLOCK_REALTIME instead,\nwhich is more consistent, as clock_gettime() is already used for\nsteady_clock.\n\nA previous version of this change actually attempted to change\nsystem_clock::duration, but I reverted this part as it breaks the\nexisting ABI.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8253\nApproved by:\tjroelofs\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e5e11d90d75bbeb0ea37e7819c7a3beccf4cd8b","date":"2015-05-16T12:44:31.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"libcxx: Fix ARM libc++/abi and libunwind buildbot.\n\nThe test cases were crashing due to the mixed usage of the unwinding\nfunctions from both libunwind and libgcc_s.  The unwind functions are\nmixed because the \"llvm_unwinder\" entry is not available in the\nlit.site.cfg for libc++.  As a result, \"-lgcc_s\" is picked instead of\n\"-lunwind\".  The extra option to lit --param=link_flags=\"-lunwind\" won't\nhelp either.\n\nThis CL fix the problem by adding llvm_unwinder to lit.site.cfg.in.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237518 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f8edc478b5f546c2de02d818159823735e94576","date":"2015-05-16T13:10:39.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"Fix build when libunwind is disabled.\n\nThe previous commit breaks the builds when libc++abi is not built with\nlibunwind becuase the default value for LIBCXXABI_USE_LLVM_UNWINDER is\nOFF, which is not pythonized.\n\nThis CL fix the problem by calling pythonize_bool().\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237519 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6d12a2b3aade4b05cc0ef91525b50b29355c6d2","date":"2015-05-16T17:10:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix test that was failing on C++03 b/c it was using initializer lists\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237527 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21f5b24e2d1de57abbc71dd3b982417590dcf130","date":"2015-05-17T00:24:11.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"libcxx: Enhance lit test command in verbose mode.\n\nPrint both the compiler command and linker command so that it will be\neasier for developers to reproduce the failed test cases.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237530 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c42668278d70b53b0449ff62f4a3bfa64cd35081","date":"2015-05-18T17:48:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for LWG Issue 2458: N3778 and new library deallocation signatures.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de7638921902986981c195d73d88eb22bd1bd20a","date":"2015-05-18T19:01:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++1z status with issues and papers from Lenexa\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237596 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7c52f913d8755f25d4188c7b30de01a55cb821d","date":"2015-05-18T19:50:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++1z status; mark all the issues that require no library change as 'complete'\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237604 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc9ccda5418632759a52db9dc6f4a2f3ff6ee18f","date":"2015-05-18T19:52:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++1z status; mark issues 2059,2369,2415,2454 and 2458 as 'complete'. I have committed patches for all of them\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e62560a9b68655599da24867e0a792736a282a1c","date":"2015-05-18T23:21:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add support for N4389 - std::bool_constant\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237636 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7b12e343b4b8a09239bb71af74ce6c64efb937e","date":"2015-05-18T23:25:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark N4510 as complete; we already do this\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237638 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4c97290fcf1e09dcc6ff81c2d8b436622a662de","date":"2015-05-19T02:03:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Rework sized delete.\n\nSummary:\nThis patch does 2 main things:\n1. Enable sized delete if the feature test macro `__cpp_sized_deallocation` is enabled.\n2. Rework and cleanup all of the sized delete tests.\n\nTest Plan:\nThe sized delete replacement tests are now split into 4 files:\n1. sized_delete11.pass.cpp: Ensure overriding sized delete in C++11 has no effect.\n2. sized_delete14.pass.cpp: Test overriding sized delete in C++14 and ensure it is called. This test fails on clang and GCC < 5.1. \n3. size_delete_calls_unsized_delete_.pass.cpp: Test that the default sized delete calls unsized delete.\n4. sized_delete_fsizeddeallocation.pass.cpp: Test overriding sized delete when -fsized-deallocation is passed. This test should pass on clang and GCC >= 5.1\n\nI have also removed a lot of cruft from the old tests. They no longer replace the new handler and tests that it is called for bad allocations.\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D9831\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237662 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02be74588a4c8ab429225773e1675043749f06c8","date":"2015-05-19T03:41:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"mark new/delete tests as XFAIL more carefully\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237664 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5dce73dd6e4d6b6eb522e813558b2d8a350e50f1","date":"2015-05-19T15:01:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2433: uninitialized_copy()/etc. should tolerate overloaded operator&\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237699 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a985b8cc79c163b842d87d1728b88aeb8184ea4f","date":"2015-05-19T15:15:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add compiler flag test support to LIT. Fix new/delete tests on apple-clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237700 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5486fac53c3b71aa4b72edd2b612d805b831bf06","date":"2015-05-19T22:27:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename internal trait that used non-reserved name.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237737 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d539803d4bedba05e509d70de82db49f1c001828","date":"2015-05-19T23:03:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix uninitialized values and bad enum conversions found by UBSAN.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237738 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d663441e7c50299e20969e53ad2fdeccf54a6a6","date":"2015-05-19T23:10:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Address @danalberts comments on r237700\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237740 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a7ccb14e882e31ca83c88521f9e63b424c0dd24","date":"2015-05-19T23:41:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix race condition in thread test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bae11add65ad04c6e80bb0b51066ee1fb1d8b407","date":"2015-05-20T03:15:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix building and testing libc++ with GCC.\n\nThe changes in src/exception.cpp and cmake/Modules/HandleLibCXXABI.cmake fix a\nbug when building libc++ with GCC. Because GCC does not support __has_include\nwe need to explicitly tell it that we are building against libc++abi via the\npreprocessor definition `LIBCXX_BUILDING_LIBCXXABI`.\n\nThe changes in include/ratio are to work around CWG defect\n1712 (constexpr variable template declarations). GCC 4.8 and before has not\nadopted the resolution to this defect.\n\nThe changes in include/exception work around an issue where is_final is used\nwithout it being defined in type_traits.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237767 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19158f2fa1034440da0a1ce10fe93cf8905974b4","date":"2015-05-20T17:39:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Start a to-do list for libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237813 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"97092d6a5c4dfe1d9e5de354309061b311b777d5","date":"2015-05-22T02:23:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add TODO items\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@237988 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ecec10efd98acbf0bcb47a63d5f9d87ab9f86831","date":"2015-05-26T14:58:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark N4366 as complete. libc++ has done this since 2012\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238207 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b5b66923e385a660f1abf3dea396d55f9341c115","date":"2015-05-26T18:57:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests to ensure that string/vector/array have contiguous iterators - which they did. Mark N4284 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238233 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7242d18811daa5325aa155f62315442aed1208ed","date":"2015-05-26T19:17:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix broken test I just added\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238234 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f1d85fde58bcff579994c6be57f37831759c956","date":"2015-05-27T00:28:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add test macros header to remove dependance on __config macros.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238267 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee6bfb2117c932b186066b53a8f3c5a80bffc8bb","date":"2015-05-27T00:51:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup move/forward tests and remove references to __rv.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238270 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2cd0a2e4e7d833ce4c86d125cd19d74c9aafa4ca","date":"2015-05-27T01:02:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark __convert_to_integral test as XFAIL in c++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"970d9f7768a4c400ad26a7abb931da0d14e7e9ff","date":"2015-05-27T01:09:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get thread sleep_for test passing in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14c616af091bb1b5ae96fd9867d1bc117949e99c","date":"2015-05-27T17:19:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add N4259 to the list of papers from Lenexa. Update links to point at public repos.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238340 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83f8153b22bf793b3459be9e60d7c135284d5f79","date":"2015-05-27T20:15:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#23647 - make_shared<volatile bool>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238354 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc3a3ffc69e6123b4e7e789a0ab93a287a622760","date":"2015-05-27T20:36:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Revert 238354 while I figure out what broke in weak_ptr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60784f62deefe20952cabe220eb3f14b20c5e659","date":"2015-05-27T22:44:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#23647 - make_shared<volatile bool> - second try\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238370 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0620fc865b076da2abf24884e34393b337e7ee47","date":"2015-05-29T23:21:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add TODO note about switching to __decltype\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238631 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf0460e0a0045dcf418fc065d5bf0875f77f3bbf","date":"2015-05-31T03:13:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Don't try to memcpy zero bytes; sometimes the source pointer is NULL, and that's UB. Thanks to Nuno Lopes for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238666 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebc31694e814d19b0d3a86533c73d3277069a5ed","date":"2015-05-31T14:01:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove debugging code\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238674 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4324b2b9467152c19f7a10d53ae87943be74ec9","date":"2015-06-02T01:25:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add TODO items and remove use of 'noexcept' in C++03 test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa97c2e8bc1b8a69759e57d8b794bc63ae22868a","date":"2015-06-02T01:31:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing return statements in C++03 std::function\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238803 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56523ff60ebfc5aaff8c10ae2c6f5f2dd8c5512c","date":"2015-06-02T13:04:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In the case where we are copying/moving zero elements, do less work\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238828 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"708b86b5f9da418ac7d64d44a09ea5d3b389b354","date":"2015-06-02T13:52:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some places where we could call memmove(null,xxx,0) - which is UB\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238831 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8731c5da466a217e9b1b3840625cdd5d52cbc6d5","date":"2015-06-02T15:33:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement uncaught_exceptions() using the newly added hooks in libc++abi, when available\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238846 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f0324bcaa1ff97aabb6ba57d58d603af294d6476","date":"2015-06-02T16:34:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the first part of N4258 - allocator_traits<X>::is_always_equal. Also fixes PR#23723\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238848 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c2a31376715d4aa11845e12c16f5e4b8d75f26db","date":"2015-06-02T21:40:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix breakage that I introduced in r238848\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238870 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22f6c0532d299bc9cb7ffdb071e6e85bde148500","date":"2015-06-02T22:25:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move uncaught_exeption() definition inside the #ifdef block like uncaught_exceptions()\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238879 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b957bac1daaf11059842d87d5facbc3ece2d8721","date":"2015-06-02T22:26:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Revert changes inadvertantly committed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238880 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbf87b1c342324987f9760d17751a2bca506a4a2","date":"2015-06-03T16:15:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add 'is_always_equal' tests for scoped_allocator. Found that I had typed '||' where I meant '&&' in the code; fixed that, too\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b193f7797b71323efc385916f128c6dd17819b4","date":"2015-06-03T19:56:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More of N4258 implementation. Mark all of our test_allocators as noexcept constructible. Make the constructors for basic_string noexcept all the time (under C++14). Update tests to reflect the new world order. More to come.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238957 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"127db91f3e2754d60f20920238c4270e43a281a7","date":"2015-06-04T00:10:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More N4258 changes. This time vector's constructors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@238990 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c912c0ce7c2ca67830a2934505d9441b8d5940e3","date":"2015-06-04T02:05:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"While applying N4258, I forgot about LWG#2455, which modified the modifications. Correct those - h/t: Howard\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239004 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"64c62484998b786c90191793adede7cd1b406972","date":"2015-06-05T15:54:26.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Avoid C-style cast.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239160 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4356f6392e67b6d9d680f5c4b06c62ff9e4fee3b","date":"2015-06-05T22:34:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#23767. Add tests for iterator invalidation for deque::erase/pop_front/pop_back\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239196 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f54ca46a7b01094170cdb261f99c1b80248e3c50","date":"2015-06-11T21:47:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change #ifdefs in test to UNSUPPORTED. No functionality change in the tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239562 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56a599b97645e92df891bf6d84ba806677132d5c","date":"2015-06-12T00:41:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR23293 - Do not unlock shared state before notifying consumers.\n\nWithin the shared state methods do not unlock the lock guards manually. This\ncould cause a race condition where the shared state is destroyed before the\nmethod is complete.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239577 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7726a348df3f4708959eeb75cb7f283f8ed3b3dd","date":"2015-06-13T00:23:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent dependancy on libatomic when using GCC to provide <atomic>.\n\nThe __atomic_is_lock_free(...) function sometimes requires linkage to libatomic\nif it cannot be evaluated at compile time. Remove __c11_atomic_is_lock_free\nand use __atomic_is_lock_free(sizeof(Tp)) directly so that it can be evaluated\nat compile time.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239648 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"724b5ab350719612b2f175ca115a98c5b8a9e21a","date":"2015-06-13T00:33:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor is_member_function_pointer to use is_function and not __member_function_traits.\n\nReplacing the dependancy on __member_function_traits with is_function allows\nis_member_function_pointer to work more often. In particular it allows it to\nwork when we don't have variadic templates but the function has an arity > 3.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239649 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eeeada1c775ba6a9a6b5519cdec9bc54c7f4ddf7","date":"2015-06-13T02:18:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable __is_trivially* intrinsics for GCC 5.1\n\nUntil GCC 5.1 the __is_trivially* intrinsics were not provided. Enable use of\nthe builtins for GCC 5.1.\n\nAlso enable Reference qualified member functions for GCC 4.9 and greater.\n\nThis patch also defines _GNUC_VER to 0 when __GNUC__ is not defined because\nlibc++ assumes _GNUC_VER is always defined.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239653 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc1e44d14e4a928baad61dde20214234b381617a","date":"2015-06-13T02:23:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"LWG2442: call_once() shouldn't DECAY_COPY(). Patch from K-Ballo.\n\nThis patch fixes LWG issue 2422 by removing the DECAY_COPY from call once.\nThe review can be found here: http://reviews.llvm.org/D10191\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239654 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b7fc49f828b53c5e910da6aeb2920b50f6b07ff1","date":"2015-06-13T02:36:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make __void_t unary and always provide it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239655 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d7a2cb57d3ed07aadbb47c207d8ec6cbeb706a0","date":"2015-06-13T06:27:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Use __decltype instead of __typeof__\n\nSummary:\nBoth clang and GCC provide C++11 decltype semantics as __decltype in c++03 mode. We should use this instead of __typeof__ when availble. \n\nGCC added __decltype in 4.6.0, and AFAIK clang provided __decltype ever since 3.3. Unfortunately `__has_builtin(__decltype)` doesn't work for clang so we need to check the compiler version instead.\n\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D10426\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239662 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a0e430cd45bcaba88d5eb001b7f4865d904b6a6","date":"2015-06-13T07:08:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix detection of __is_final.\n\nSummary: Currently we only enable the use of __is_final(...) with Clang. GCC also provides __is_final(...) since 4.7 in all standard modes. This patch creates the macro _LIBCPP_HAS_IS_FINAL to note the availability of `__is_final`.\n\nReviewers: danalbert, mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8795\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239664 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fdae69aa130f50e6992c7e49cc957f008dd86540","date":"2015-06-13T07:18:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR12999 -  unordered_set::insert calls operator new when no insert occurs\n\nSummary:\nwhen `unordered_set::insert(value_type&&)` was called it would be treated like `unordered_set::emplace(Args&&)` and it would allocate and construct a node before trying to insert it.\nThis caused unnecessary allocations when the value was already in the set. This patch adds an overload to `__hash_table::__insert_unique` that specifically handles `value_type&&` more link `value_type const &`. \n\nThis patch also adds a single unified insert function for values into  `__hash_table` called `__insert_unique_value` that handles the cases for `__insert_unique(value_type&&)` and `__insert_unique(value_type const &)`. \n\nThis patch fixes PR12999: http://llvm.org/bugs/show_bug.cgi?id=12999.\n\n\n\n\nReviewers: mclow.lists, titus, danalbert\n\nReviewed By: danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D7570\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239666 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f0811110212dd0e0c8caafb781406876fdb5add","date":"2015-06-13T07:31:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove warnings about old CMake options\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239667 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4983580dc5360bfbd79d8c6b1098a80f3c4036bf","date":"2015-06-13T08:25:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup result_of tests and fix issues with the C++03 result_of.\n\nThe two main fixes this patch contains are:\n- use __identity_t instead of common_type. common_type was used as an\n  identity metafunction but the decay resulted in incorrect results.\n- Pointers to free functions were not counted as functions. Remove the pointer\n  before checking if a type is a function.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239668 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b05f0599c09772f2946c67ccfcc76d5d9af7ece5","date":"2015-06-14T23:30:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix std::function allocator constructors in C++03.\n\nThe C++03 version of function tried to default construct the allocator\nin the uses allocator constructors when no allocation was performed. These\nconstructors would fail to compile when used with allocators that had no\ndefault constructor.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239708 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d08766099b89b92fdabd40b75325cb395c174ee","date":"2015-06-17T23:31:45.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Delete dead code. NFCI\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@239974 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c41133728d1a4197b8d0a366854b73d161788d20","date":"2015-06-19T15:54:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#18843. Thanks to Howard for the fix\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240136 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb126215aa371c10e3b10fa70044d9edc385a768","date":"2015-06-19T17:13:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix ASAN bot; missing bookkeeping in r240136.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240139 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46d06b90c12482c6b62fff2b39dfbc7acc394deb","date":"2015-06-19T19:32:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix illegal chars that snuck into <memory>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240163 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1224e8972b770cb1ec35d7acb27ec43556969d12","date":"2015-06-22T15:01:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make seeking on an ostream that has eofbit set work correctly. Fixes PR#21361\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c42c8cb467154027d88e8df6648dde0f70edac4","date":"2015-06-23T14:45:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"When building libc++, we use '\"' as a delimiter instead of '<' when including libc++ header files. This is so that the dylib gets built with our headers; rather than the system-installed ones. We do this in most places already, just fixing a couple of inconsistent uses.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240412 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4428584a8852fd498a0e242a41f2ed6bad575c43","date":"2015-06-23T20:48:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark a couple of features as 'in progress'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"323ade3e7080de24c659f714404592818a78ca76","date":"2015-06-24T08:44:38.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Make support for thread-unsafe C functions optional.\n\nOne of the aspects of CloudABI is that it aims to help you write code\nthat is thread-safe out of the box. This is very important if you want\nto write libraries that are easy to reuse. For CloudABI we decided to\nnot provide the thread-unsafe functions. So far this is working out\npretty well, as thread-unsafety issues are detected really early on.\n\nThe following patch adds a knob to libc++,\n_LIBCPP_HAS_NO_THREAD_UNSAFE_C_FUNCTIONS, that can be set to disable\nthread-unsafe functions that can easily be avoided in practice. The\nfollowing functions are not thread-safe:\n\n- <clocale>: locale handles should be preferred over setlocale().\n- <cstdlib>: mbrlen(), mbrtowc() and wcrtomb() should be preferred over\n  their non-restartable counterparts.\n- <ctime>: asctime(), ctime(), gmtime() and localtime() are not\n  thread-safe. The first two are also deprecated by POSIX.\n\nDifferential Revision:\thttp://reviews.llvm.org/D8703\nReviewed by:\tmarshall\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@240527 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"715339ab55831a0dd22af04eddf13ae157a39bd6","date":"2015-06-29T22:27:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2439 as complete. This is a tightening up the wording; no code changes required.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241013 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3c8fb22ec9f0abf06ec190338e223e08caef306","date":"2015-06-30T13:32:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2266 as complete. This is a tightening up the wording; no code changes required.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241064 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"abadb458d014e08ddc2bd17561cf7d264a60c173","date":"2015-06-30T14:04:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement N4508: shared_mutex. Reviewed as http://reviews.llvm.org/D10480\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241067 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"07546f3b93c8ffbdac6f93d11de7040dcbce6f8c","date":"2015-06-30T14:16:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2407: 'packaged_task(allocator_arg_t, const Allocator&, F&&) should neither be constrained nor explicit'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"58113db00cc4bb9c63ccb7b013a3e2b405bfc1cd","date":"2015-06-30T18:15:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests for LWG#2299. While doing so, I noticed that the tests we have for the transparent comparators don't actually call them. Fix those tests, too. Now one of them is failing, due to a missing const in <map>. Add that (twice). Next step is to do the same for <unordered_map>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"933bf68f0a515163d567c4c2deed564c15083c04","date":"2015-06-30T18:16:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Forgot the support include file in r241091\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241092 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5706c375d55f1bbca8af391def08336d49115840","date":"2015-06-30T18:28:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"K-ballo pointed out that I missed one of the specializations of packaged_task when I committed r241068. Thanks for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241095 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a426e50d050e05127a2fa2f6643982943c19efc","date":"2015-06-30T20:06:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark N4508, LWG#2407, and LWG#2470 as complete. I don't see that 2470 requires any changes to the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241111 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b81d6f5b8d1675887d440a04ef2b0de9157de7cb","date":"2015-07-01T21:23:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Noticed that std::allocator<const T> was missing the definition for is_always_equal. Fixed this, and added a test for it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241190 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e97eb890cd5854ad42c71ac2a898b44d2bb2448","date":"2015-07-06T15:37:40.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Cleanup: prefer _LIBCPP_GET_C_LOCALE over __cloc().\n\nThe __cloc() function is only present in case the environment does not\nprovide a way to refer to the C locale using a compile-time constant\nexpression. _LIBCPP_GET_C_LOCALE seems to be defined unconditionally.\n\nThis improves compilation of the locale code on CloudABI.\n\nDifferential Revision:\thttp://reviews.llvm.org/D10690\nReviewed by:\tjroelofs\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241454 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7c1ebcf6fd056f7b4cf37d0a580167ddea85704d","date":"2015-07-06T15:39:36.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Make locale code compile on CloudABI.\n\nAfter r241454 landed, libc++'s locale code compiles on CloudABI, with\nthe exception of the following two bits:\n\n- CloudABI doesn't have setlocale(), as the C library does not keep\n  track of any global state. The global locale is always set to \"C\".\n  Disable the call to setlocale() on this system.\n- Similarly, mbtowc_l() is also not present, as it is also not\n  thread-safe. As CloudABI does not support state-dependent encodings,\n  simply disable that part of the logic.\n\nThe locale code now compiles out of the box on CloudABI.\n\nDifferential Revision:\thttp://reviews.llvm.org/D10729\nReviewed by:\tjroelofs\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241455 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c5dd15e09bd983b298a471e58144a9693910eb4","date":"2015-07-06T19:36:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2420 as complete. Eric did this in r228705.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241491 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faaf5ee34966fb72ff787bf78c512036492d3fa7","date":"2015-07-06T19:56:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Automatically detect and use clang verify in failure tests.\n\nAutomatically enable clang verify whenever the '-verify-ignore-unexpected' flag\nis supported.\nFailure tests are run using verify if they contain one or more \"expected-*\"\ndiagnostics tags. Otherwise they are run normally.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241492 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6e466911f803e85548887c3acb50d6fa5c4b071","date":"2015-07-07T00:27:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add atomic_support.h header to src that handles needed atomic operations.\n\nSummary:\nIn some places in libc++ we need to use the `__atomic_*` builtins. This patch adds a header that provides access to those builtins in a uniform way from within the dylib source.\n\nIf the compiler building the dylib does not support these builtins then a warning is issued.\n\nOnly relaxed loads are needed within the headers. A singe function to do these relaxed loads has been added to `<memory>`.\n\nThis patch applies the new atomic builtins to `__shared_count` and `call_once`.\n\nReviewers: mclow.lists\n\nSubscribers: majnemer, jroelofs, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D10406\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241532 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3a1a187a1af2188f47a6e8c20cbfac74ca24823","date":"2015-07-07T03:37:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement N4279 and LWG#2664 for <map>. Reviewed as http://reviews.llvm.org/D10669\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0ce05a9f86509167fd821fdb9b187e25d2e15742","date":"2015-07-07T05:45:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"The rest of N4279 and LWG#2464 - for unordered_map\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241555 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f55ef701a07e619adea80fc1df1c34c74e8bbb8","date":"2015-07-08T23:10:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix error string in test suite\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241757 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f7fe5cd8e38d162be5c959ef0c25f4475fc79ec","date":"2015-07-10T20:26:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use __is_identifier to detect __decltype and not the clang version.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241939 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f301a117e13aedb9586494cab69093159b97a15c","date":"2015-07-10T23:29:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] LWG2420 bits for bind<void> - Patch from K-Ballo\n\nImplemented LWG2420 bits for bind<void>\n\nReview: http://reviews.llvm.org/D10997\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@241967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d914d1bfffac32da13a44871fc17b8ba3ade57a","date":"2015-07-13T20:04:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the first part of N4258: 'Cleaning up noexcept in the Library'. This patch deals with swapping containers, and implements a more strict noexcept specification (a conforming extension) than the standard mandates.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242056 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"119ed479997f73f39aa0dc4ea5b5ca5ae36300fb","date":"2015-07-14T14:46:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move bits from N4258. Mark vector's move-constructor unconditionally noexcept in C++1z\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242148 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26edd804bacc4a915a1a13d9c5c42c59b714baa8","date":"2015-07-14T17:50:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR24114 - std::atomic for non-Clang is not a literal type\n\nAdd _LIBCPP_CONSTEXPR to the implementation of __gcc_atomic_t.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92679178a59b5298eab2abb51e3cb0492a8d5e84","date":"2015-07-14T20:07:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG2308 as complete; fix link. No code change necessary.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242189 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22dff5382aee62498f274b895c8f24d6b03d355b","date":"2015-07-14T20:16:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement n4169 - Add invoke function template\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83de1012a975916b7804f9a4a89f35d95fb2ef54","date":"2015-07-14T20:45:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove non-ascii characters\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242197 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73f131f21076c5d10851cfdcbad2c52856c073a5","date":"2015-07-16T02:44:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark two tests as failing on clang 3.8 (they failed on 3.7, too)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242375 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd6ed54fedd042d301b19b484ceb14b7d83b3ede","date":"2015-07-16T03:05:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make sure that __libcpp_compressed_pair_imp default-constructs its' members, rather than value-initializing them. Fixes PR#24137\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242377 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7efdd696885bf75abc6da77b31b51c4d8ead22d9","date":"2015-07-16T17:22:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Set the libc++ version # to 3.7.   Will bump to 3.8 soon\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242421 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2af7d42fe3016016e7374dd2067b68ff87a19eef","date":"2015-07-16T22:13:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Include what we use, instead of letting them get pulled in implictly. This makes the tests work on VS. Thanks to STL for the report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242454 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40853eac80a81502404fd540b8de2faa681047bb","date":"2015-07-17T16:36:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Bump libc++ version # to 3.8\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242541 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f339e65dfe4e6232b43460f6fadc7b40cdd0fb7","date":"2015-07-17T22:27:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup tests that fail in C++1z and with Clang 3.8\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12c6d9cd9354ec1e3aa92aa07d76416bda96f8fd","date":"2015-07-18T16:43:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Get is_*_destructible tests passing in C++03.\n\nSummary: This patch adds proper guards to the is_destructible tests depending on the standard version so that they pass in c++03.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D10047\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d439a455de39f9346d654420694e3d961ed1dfe","date":"2015-07-18T18:22:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing instrumentation in vector::insert - Patch from Anna Zaks\n\nThis patch was reviewed as D10859. http://reviews.llvm.org/D10859\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242617 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f7221ccb8220c32f67d5391d553df90cacbfd8c","date":"2015-07-18T18:24:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix up typos in a couple of tests; due to agressive short-circuiting, they never failed on clang or gcc, but MSVC whined. Patch by Andrew Parker.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"692177d02224b462b98ec2d38dcac30092e915dc","date":"2015-07-18T20:40:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable and fix warnings during the build.\n\nAlthough CMake adds warning flags, they are ignored in the libc++ headers\nbecause the headers '#pragma system header' themselves.\n\nThis patch disables the system header pragma when building libc++ and fixes\nthe warnings that arose.\n\nThe warnings fixed were:\n1. <memory> - anonymous structs are a GNU extension\n2. <functional> - anonymous structs are a GNU extension.\n3. <__hash_table> - Embedded preprocessor directives have undefined behavior.\n4. <string> - Definition is missing noexcept from declaration.\n5. <__std_stream> - Unused variable.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b86ce5cc418b58fd6535d7246741c588d91e00d","date":"2015-07-18T21:17:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in test/std/language.support\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242624 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"462410703dd285473f9de1c782a5c6bd3fa9cf43","date":"2015-07-18T21:40:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unused variable warnings in atomic tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a07a2f4f3c97f45c3bf40404b885013bf4c2cd9","date":"2015-07-18T21:53:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in test/std/algorithms\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"212714f805dc3b00e351b1556395f18c5ae70c25","date":"2015-07-18T22:51:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup warnings in test/std/depr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242627 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47c5dae573932a5fccb66177319a19164f72c642","date":"2015-07-18T22:57:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unused typedefs in random and regex\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242628 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02bb4bdb495ff5cc8bd6422e61b96433e60ba5e1","date":"2015-07-18T23:56:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in array and assoc containers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0be44f9634f6254d66d58e36d39d887a2e869ef","date":"2015-07-19T00:11:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Commit file missing from r242629\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242630 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"18dbed95969596840835876627ecd102b4fc51e1","date":"2015-07-19T00:31:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in deque tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6af41ab8c201de73cccd1760281ed862ae730add","date":"2015-07-19T00:38:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in forwardlist\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242633 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd9bbf52cd684dad08e2559d42edc0b424a455cc","date":"2015-07-19T03:16:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in unordered_map\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242634 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"166dadbcbeca7966cd2517972b670834295184df","date":"2015-07-20T15:40:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the plugin-based version of std::search. There are no searchers yet; those are coming soon.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242679 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbe4245e63bba51ffae3e85c86c81729fbefdd9a","date":"2015-07-20T16:39:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the default searcher for std::experimental::search.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242682 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f544330f341059b05a554eda2bec375183e130cb","date":"2015-07-20T19:27:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark new tests as unsupported before C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40766f70a4831844c8867ad5a7f18f9348626f77","date":"2015-07-21T14:29:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update the status of the TS'es\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"938c96ef530e7463db2f8c1a61c2b591d7d2a3d3","date":"2015-07-22T00:33:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add support for sanitizers on OS X.\n\nSummary: This patch adds special configuration logic to find the compiler_rt libraries required by sanitizers on OS X. The supported sanitizers are Address and Undefined.\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11381\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242858 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7cc7106776b89f462a143ff1762855b2b3455bc3","date":"2015-07-22T01:29:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix initializer list order in <regex> to be correct\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45f63bc07e73a85086d60ce1815bcbb74230bf9f","date":"2015-07-22T04:14:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup <__functional_03>\n\n<__functional_03> provides the C++03 definitions for std::memfun and\nstd::function. However the interaction between <functional> and <__functional_03>\nis ugly and duplicates code needlessly. This patch cleans up how the two\nheaders work together.\n\nThe major changes are:\n\n- Provide placeholders, is_bind_expression and is_placeholder in <functional>\n  for both C++03 and C++11.\n\n- Provide bad_function_call, function fwd decl,\n  __maybe_derive_from_unary_function and __maybe_derive_from_binary_function\n  in <functional> for both C++03 and C++11.\n\n- Move the <__functional_03> include to the bottom of <functional>. This makes\n  it easier to see how <__functional_03> interacts with <functional>\n\n- Remove a commented out implementation of bind in C++03. It's never going\n  to get implemented.\n\n- Mark almost all std::bind tests as unsupported in C++03. std::is_placeholder\n  works in C++03 and C++11. std::is_bind_expression is provided in C++03 but\n  always returns false.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242870 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9962ddfa24575d41ffeeaaf4f90a33ea859980dd","date":"2015-07-22T04:37:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove more commented out code. That is what version control is for.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242872 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5b3a4593da6c3a9c41e611eb4fdd64bbc74adca9","date":"2015-07-22T22:23:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove almost everything in <__functional_base_03>\n\nThis patch removes a large amount of duplicate code found in both\n<__functional_base> and <__functional_base_03>. The only code that remains\nin <__functional_base_03> is the C++03 implementation of __invoke and\n__invoke_return.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242951 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db8c4fd8c719168eab062c3d40bfbdb2e342bdf3","date":"2015-07-22T22:43:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Merge C++03 and C++11 implementations of mem_fn and __mem_fn.\n\nThe implementation of mem_fn doesn't actually require any  C++11 support.\nFor some reason there were 17 overloads for mem_fn in C++03 when only one\nis needed. This patch removes the extra overloads and uses the same implementation\nof mem_fn in C++03 and C++11.\n\n__mem_fn does require variadics to implement the call operator. Instead of\nhaving two entirely different implementations of the __mem_fn struct, this patch\nuses the same __mem_fn struct but provides different call operators when\nvariadics are not available.\n\nThe only thing left in <__functional_03> is the C++03 implementation of\nstd::function.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242959 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a59ae67834165ec18dc85563992ae58f9c38969","date":"2015-07-22T23:32:57.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Mark this test as XFAIL with older compilers, since they hit PR18097\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@242967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"568bd0222fd14e5cd0f7b158dd020d29e372227e","date":"2015-07-23T18:27:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Detect and throw on a class of bad regexes that we mistakenly accepted before. Thanks to Trevor Smigiel for the report\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243030 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48aa2cf9f31171bd41d57005ec79f44392cd3eec","date":"2015-07-28T01:25:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Checking more __invoke tests.\n\nBefore I start trying to fix __invoke in C++03 it needs better test coverage.\nThis patch adds a large amount of tests for __invoke.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243366 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12ddf2cbd23ac8eda04b0bdc9a91f18a76c01540","date":"2015-07-28T01:52:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get C++03 __invoke working for bullet 5 of INVOKE.\n\nThis patch does a couple of things to get __invoke working for free-functions\nand call objects.\n\n1. Turn all uses of declval<Tp>() into declval<Tp&>(). The C++03 __invoke only\n   supports lvalues but it will be used when the compiler supports rvalue\n   references but not variadic templates. This change makes sure we don't\n   generate an rvalue.\n\n2. Call objects for bullet 5 are now passed by reference and not value. Copying\n   the functor is incorrect. It will fail to compile for non-copyable functors\n   and it will discard cv-qualifiers on the call object, possibly leading to the\n   wrong function being called. I suspect that the reason the call object\n   was originally taken by value was to support temporary call objects.\n   However __invoke is only used internally and it is never given a temporary.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243368 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfb46e486dbbd98e6abc0631526aac944f6bbd1e","date":"2015-07-28T02:15:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup C++03 __invoke for Bullets 3 and 4.\n\nThe key changes in this patch are:\n\n1. Remove the zero-argument overload in mem_fn. A member function must always\n   be invoked with at least one argument, the class instance. The zero-argument\n   operator()() in mem_fn would cause mem_fn to fail to compile when because\n   the call to '__invoke(pm)' is not well formed.\n\n2. Prevent evaluation of '__apply_cv<Tp, Ret>' when 'Ret' is a function type.\n   'Ret' is a function type whenever 'Ret Tp::*' is a pointer to member function.\n   Attempting to add cv and ref qualifiers to a function type can cause a hard\n   compile error.\n\n3. Remove the dummy overload __invoke(Rp Tp::*). It was present to help work\n   around #1. It will be replaced with a different '__invoke' overload that\n   represents a bad call to invoke.\n\nAfter applying this patch the test func.wrap.func.inv/invoke.pass.cpp now\npasses.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243370 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b47a434d608ae133dbe9eedd98db5cabd35e5e45","date":"2015-07-28T07:31:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix a handful of tests that fail in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243392 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd29a029119b967017699fa1af0f51deab21cc62","date":"2015-07-28T07:49:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark async tests as UNSUPPORTED in C++03 because it requires variadics\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2576c29dab9721fae94f5781e7c546a7ced286da","date":"2015-07-28T13:30:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Consolidate a bunch of #ifdef _LIBCPP_NO_EXCEPTIONS .. #endif blocks into a single template function. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243415 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3baabab8271dbfc0b85d41b9c71a399735a7cb50","date":"2015-07-28T23:27:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove sanitizer XFAILs on a test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243499 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91eeba8d26c90fb8a7e9d3e4a868b325fad4eb50","date":"2015-07-29T00:03:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Cleanup CMake configuration and integrate with LLVM\n\nSummary:\nThis patch contains the following changes:\n\n1. Require that libc++ can find a LLVM source directory. This is done the same way as `libc++abi` currently does.\n2. Cleanup ugly configuration code in CMakeLists.txt by using `add_flags`, `add_flags_if`, and `add_flags_if_supported` macros.\n\nThe goals for this patch are:\n\n1. Help libc++ be more consistent with how LLVM handles CMake options (see PR23670 PR23671).\n2. Make it easier to use sanitizers using the `LLVM_USE_SANITIZER` option.\n3. Make libc++'s CMakeLists.txt file easier to understand and change.\n4. Move towards allowing libc++ to create Sphinx documentation (see http://efcs.ca/libcxx-docs). \n5. Move towards allowing  libc++ to use other LLVM utilities such as `not` and `FileCheck`.\n\n  \n\nReviewers: mclow.lists, jroelofs, danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11308\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243503 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a37957634cd9c4e22d8dfa5a8a39565905b46f79","date":"2015-07-29T16:25:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a self-move bug in inplace_merge. Thanks to Ted and Dexon for the report and the suggested fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243530 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa9b5e37f7074dfe95b170266f84229f749c45a8","date":"2015-07-29T18:32:21.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Revert r243503 \"[libcxx] Cleanup CMake configuration and integrate with LLVM\"\n\nThis caused clang-format to stop linking on Mac; see PR24306.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243550 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d74dee9255f3207c582e45948f31fbe5e62fb496","date":"2015-07-29T21:07:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit r243503 \"[libcxx] Cleanup CMake configuration and integrate with LLVM\"\n\nThis change was reverted in r243550 because it broke clang-format builds\n(see PR24306).\n\nThis patch recommits a fixed version of the original.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243574 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1be30b7e172ab7627a6589761eee41af92e5d51","date":"2015-07-29T22:38:23.000Z","author":{"name":"Nick Lewycky","email":"nicholas@mxc.ca"},"message":"Fix typo in unused variable name.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243586 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b93263784c34460de4656f3c9ad061ac13c1b7d","date":"2015-07-29T23:23:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to fix build issues introduced by \nr243574\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5514d36c43df0ea643eee2b7a13dd1850ff8f71b","date":"2015-07-29T23:46:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert recent CMake changes again due to failing compiler-rt builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"36dc080bf6c599b16e1560f6e6848979111b368a","date":"2015-07-30T13:56:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change some #ifdefs to #if - thanks to Dexon for thge catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243641 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0934c750ede55626c4ced4b067e27753ae4fee53","date":"2015-07-30T18:26:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#24267. use numeric_limits::max instead of ~0 for 'all ones', since that might give wrong answers on a 1's complement machine.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243674 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb6e2eac6cfe01fa88bdf9d64106d0c86582f58b","date":"2015-07-30T22:30:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Reapply working parts of CMake cleanup.\n\nThis patch adds the working parts of r243503. The difference with this patch\nis that it doesn't include the HandleLLVMOptions.cmake file.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26d2390a8d6b04cc2b0250c9a96214ab7d1f0477","date":"2015-07-31T01:25:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add -Wno-error by default to work around failing compiler-rt builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243725 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7175a079211ec78c8232d9d55fa4c1f9eeae803d","date":"2015-07-31T02:24:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add <experimental/any> v2.\n\nSummary:\nThis patch adds the second revision of <experimental/any>. \nI've been working from the LFTS draft found at this link. https://rawgit.com/cplusplus/fundamentals-ts/v1/fundamentals-ts.html#any\n\n\n\nReviewers: danalbert, jroelofs, K-ballo, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D6762\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65a1d45c0adf674717f5bb6e94df059d227dbeda","date":"2015-07-31T02:29:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark any as done and comment out extra methods until speaking to Marshall\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76581dc45033eb1f17d798e121f470d9fe306856","date":"2015-07-31T02:43:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Start cleanup of unique_ptr tests.\n\nOne of the last sections of tests that still fail in C++03 are the unique_ptr\ntests. This patch begins cleaning up the tests and fixing C++03 failures.\n\nThe main changes of this patch:\n  - The \"Deleter\" type in \"deleter.h\" tried to be \"move-only\" in C++03. However\n    the move simulation no longer works (see \"__rv\"). \"Deleter\" is now copy\n    constructible in C++03. However copying \"Deleter\" will \"move\" the test value\n    instead of copying it.\n\n  - Reduce the unique.ptr.single.ctor tests files from ~25 to 4. There is no\n    reason the tests were split through so many files.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243730 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe5102c83e3b8bd21b09f117f21b5372a4486ace","date":"2015-07-31T04:34:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix failing unique_ptr tests.\n\nWhen I was refactoring the unique_ptr.single.ctor tests I added a test\ndeleter, 'NCDeleter', to deleter.h. Other tests that include deleter.h\nredefine the NCDeleter type causing test failures.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243733 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6a85d5c6746849915501341175c10dbc99a780a4","date":"2015-07-31T06:08:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Print message when configuring for standalone build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243737 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0e7971986ece2d40228c14f732cfbcb09f871ba","date":"2015-07-31T21:09:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove -Werror when using check_cxx_compiler_flag because it was causing compiler-rt breakages.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243784 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a3c689b8ada2cacd8dbc580ede9860ad2f266d4","date":"2015-08-04T01:38:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change char_traits<char16_t>::eof() to return 0xFFFF instead of 0xDFFF. Fixes PR#24342\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@243937 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d08dbfc12e83bf628f60b6f0a8a2e6de2c14f220","date":"2015-08-05T03:59:14.000Z","author":{"name":"Tanya Lattner","email":"tonic@nondot.org"},"message":"Update references to lists.llvm.org\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@244003 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bed1d91bf2c50e465a068a0193e4dc233210f15d","date":"2015-08-05T14:36:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update some links so that they don't point at the (private) WG21 Wiki\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@244047 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba865ff66b36f99a1dc5d9e31af3d8943f94e349","date":"2015-08-10T16:58:04.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Protect template argument from user interference.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@244462 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1efadf976dafede4626f152f30322e24ef72eaf9","date":"2015-08-12T06:36:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix CMake error whet llvm-config reports a non-existent source directory.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@244717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc93ce7349733e4ddbe72f5a5e46442ee2b82e15","date":"2015-08-17T21:14:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make regex and any assert when they should throw an exception _but_ the user has decreed 'no exceptions'. This matches the behavior of string and vector\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245239 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af961ed8cf29ca8cadce4b96082c350d44e347c2","date":"2015-08-18T18:57:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"implement more of N4258 - Cleaning up noexcept in the standard library. Specifically add new noexcept stuff to vector and string's move-assignment operations\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85d45f6c0df9d0e96de0a45f0467f1f325b97db1","date":"2015-08-18T19:39:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Disable -Wnon-virtual-dtor warning in <locale>\n\nSummary:\nNormally people won't see warnings in libc++ headers, but if they compile with \"-Wsystem-headers -Wnon-virtual-dtor\" they will likely see issues in <locale>.\n\nIn the libc++ implementation `time_get' has a private base class, `__time_get_c_storage`, with virtual methods but a non-virtual destructor. \n`time_get` itself can safely be used as a polymorphic base class because it inherits a virtual destructor from `locale::facet`. To placate the compiler we change `__time_get_c_storage`'s destructor from public to protected, ensuring that it will never be deleted polymorphically.\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11670\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0376dfaca0d2df30984641787045e5af90fbacd0","date":"2015-08-18T19:40:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix PR22606 - Leak pthread_key with static storage duration to ensure all of thread-local destructors are called.\n\nSummary:\nSee https://llvm.org/bugs/show_bug.cgi?id=22606 for more discussion.\n\nMost of the changes in this patch are file reorganization to help ensure assumptions about how __thread_specific_pointer is used hold. The assumptions are:\n\n* `__thread_specific_ptr<Tp>` is only created with a `__thread_struct` pointer.\n* `__thread_specific_ptr<Tp>` can only be constructed inside the `__thread_local_data()` function.\n\nI'll remove the comments before committing. They are there for clarity during review.\n\nReviewers: earthdok, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D8802\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e030714ff2ea7a87276a0ffeebc7cdd17938763","date":"2015-08-18T19:41:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix PR23589: std::function doesn't recognize null pointer to varargs function.\n\nSummary:\nThis patch fixes __not_null's detection of nullptr by breaking it down into 4 cases.\n\n1. `__not_null(Tp const&)`: Default case. Tp is not null.\n2. `__not_null(Tp* __ptr);` Case for pointers to functions.\n3. `__not_null(_Ret _Class::* __ptr);` Case for pointers to members.\n4. `__not_null(function<Tp> const&);`: Cases for other std::functions.\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11111\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245335 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d434e2a53545352bbeb551ce5067b8e21b7bd574","date":"2015-08-18T19:51:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Broke C++03 compatibility in 245330. Fix that.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245336 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34172f7f1be8f5d64e28d09fa65ba52743843c2c","date":"2015-08-18T20:34:33.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"GC empty directory.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245343 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3b1fb53a657cd42a132094ef2d90bab949b1814b","date":"2015-08-18T21:08:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move atomic_support.h and config_elast.h into src/include\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245354 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"286e0a491b5d3cfd73b2ae3b42cf16b9181904e7","date":"2015-08-18T23:29:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add Atomic test helper and fix TSAN failures.\n\nSummary:\nThis patch attempts to fix the last 3 TSAN failures on the libc++ bot (http://lab.llvm.org:8011/builders/libcxx-libcxxabi-x86_64-linux-ubuntu-tsan/builds/143). This patch also adds a `Atomic` test type that can be used where `<atomic>` cannot.\n\n`wait.exception.pass.cpp` and `wait_for.exception.pass.cpp` were failing because the test replaced `std::terminate` with `std::exit`. `std::exit` would asynchronously run the TLS and static destructors and this would cause a race condition. See PR22606 and D8802 for more details. \n\nThis is fixed by using `_Exit` to prevent cleanup.\n\n`notify_all_at_thread_exit.pass.cpp` exercises the same race condition but for different reasons. I fixed this test by manually joining the thread before beginning program termination.\n\nReviewers: EricWF, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11046\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245389 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f99b59c784febdbce4f5a12200f573c4cac920a6","date":"2015-08-19T03:38:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of static_assert macro with nested commas\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245410 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8dca5f978cc3c8c99efeb8d8c8fe54c2f49d3ad","date":"2015-08-19T03:48:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove commented out TODOs. They defined unneeded methods.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245411 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faa9a31aef72d2db5b858f3aa6e10b7ff80163c8","date":"2015-08-19T04:10:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark std::packaged_task tests as unsupported in C++03.\n\nstd::packaged_task requires variadic templates and is #ifdef out in C++03.\nThis patch silences the tests in C++03. This patch also rewrites the .fail.cpp tests so that they use clang verify.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35a6c564bf63a6afde02a2d9bd6266b982527692","date":"2015-08-19T05:00:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use TestAtomic instead of std::atomic so the test can run in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245415 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8966350d61a74ade198a57a11efad6c3f1986e38","date":"2015-08-19T06:43:33.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Fix warnings about pessimizing return moves for C++11 and higher\n\nSummary:\nThroughout the libc++ headers, there are a few instances where\n_VSTD::move() is used to return a local variable.  Howard commented in\nr189039 that these were there \"for non-obvious reasons such as to help\nthings limp along in C++03 language mode\".\n\nHowever, when compiling these headers with warnings on, and in C++11 or\nhigher mode (like we do in FreeBSD), they cause the following complaints\nabout pessimizing moves:\n\n    In file included from tests.cpp:26:\n    In file included from tests.hpp:29:\n    /usr/include/c++/v1/map:1368:12: error: moving a local object in a return statement prevents copy elision [-Werror,-Wpessimizing-move]\n        return _VSTD::move(__h);  // explicitly moved for C++03\n               ^\n    /usr/include/c++/v1/__config:368:15: note: expanded from macro '_VSTD'\n    #define _VSTD std::_LIBCPP_NAMESPACE\n                  ^\n\nAttempt to fix this by adding a _LIBCPP_EXPLICIT_MOVE() macro to\n__config, which gets defined to _VSTD::move for pre-C++11, and to\nnothing for C++11 and later.\n\nI am not completely satisfied with the macro name (I also considered\n_LIBCPP_COMPAT_MOVE and some other variants), so suggestions are\nwelcome. :)\n\nReviewers: mclow.lists, howard.hinnant, EricWF\n\nSubscribers: arthur.j.odwyer, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11394\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245421 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"00f4a49b0b76dea78a68ea2dd7333408f52caa5b","date":"2015-08-19T17:21:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Allow use of <atomic> in C++03. Try 3.\n\nSummary:\nAfter putting this question up on cfe-dev I have decided that it would be best to allow the use of `<atomic>` in C++03. Although static initialization is a concern the syntax required to get it is C++11 only. Meaning that C++11 constant static initialization cannot silently break in C++03, it will always cause a syntax error. Furthermore `ATOMIC_VAR_INIT` and `ATOMIC_FLAG_INIT` remain defined in C++03 even though they cannot be used because C++03 usages will cause better error messages.\n\nThe main change in this patch is to replace `__has_feature(cxx_atomic)`, which only returns true when C++ >= 11, to `__has_extension(c_atomic)` which returns true whenever clang supports the required atomic builtins.\n\n\nThis patch adds the following macros:\n* `_LIBCPP_HAS_C_ATOMIC_IMP`      - Defined on clang versions which provide the C `_Atomic` keyword.\n* `_LIBCPP_HAS_GCC_ATOMIC_IMP` - Defined on GCC > 4.7. We must use the fallback atomic implementation.\n* `_LIBCPP_HAS_NO_ATOMIC_HEADER` - Defined when it is not safe to include `<atomic>`.\n\n`_LIBCPP_HAS_C_ATOMIC_IMP` and `_LIBCPP_HAS_GCC_ATOMIC_IMP` are mutually exclusive, only one should be defined. If neither is defined then `<atomic>` is not implemented and including `<atomic>` will issue an error.\n\nReviewers: chandlerc, jroelofs, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11555\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245463 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a6d1e2938d1d907920890e6efb3bde084a1d6f5","date":"2015-08-19T17:28:01.000Z","author":{"name":"Alexey Samsonov","email":"vonosmas@gmail.com"},"message":"Replace __asan_set_error_exit_code() with __sanitizer_set_death_callback()\n\nSummary: We are going to remove the former soon.\n\nReviewers: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12117\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245467 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85b6661a441b19014eb163ee772ee9a00e907c68","date":"2015-08-19T17:37:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove test_atomic.h header\n\nBecause <atomic> can now be used in C++03 there is no need for the test_atomic.h header.\nThis commit removes the header and converts all usages to use <atomic> instead.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245468 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de56f7461121135717c8beaafcec6a7324325e7b","date":"2015-08-19T17:41:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add \"install-libcxx\" target.\n\nSummary: Currently you can't install libc++ from within the LLVM tree without installing all of LLVM. This patch adds an install rule for libc++.\n\nReviewers: mclow.lists, danalbert, jroelofs, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11697\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245470 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"672575dadc8a294c8e4ac40ac56c35bf86f18bfc","date":"2015-08-19T22:35:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"More unique_ptr test cleanup. Fixes in <memory> to come later.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245512 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4d8ff9d936b2dbb71b8108a263ed79842108b25","date":"2015-08-19T22:35:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add files that got missed in r245512.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245513 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c4d1aac492466aced4908479ef58fb322c430cc","date":"2015-08-19T23:33:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup failing dynarray tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245522 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fae0070cfcda57c0dcb604990afe9ec7e455b0a5","date":"2015-08-20T00:10:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more uses of uninitialized values in dynarray\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245525 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db61736491e1e870adae7d82fcd1ece969942650","date":"2015-08-20T00:20:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix one last dynarray test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245528 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66d7d70263befbd7244cff10bab0d695ac7bb3fd","date":"2015-08-20T01:08:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup unique_ptr failure tests and convert them to Clang verify\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245529 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d46eb0f6db8af5d3c31b17f065b76911f8879be","date":"2015-08-20T05:20:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix a typo: abreviated -> abbreviated - Patch from Kai Zhao\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed65d0dba54704f96ecca37343f6a07fc0c53f5e","date":"2015-08-20T05:23:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix a typo: overidden -> overridden - Patch from Kai Zhao\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dc68c69e327d0bf06c196bb2d9a64b5158f6102e","date":"2015-08-20T19:22:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove completed items from TODO.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9f425a434ef918529e05ce01dab5343d3e29a12","date":"2015-08-22T19:40:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add new Sphinx documentation\n\nSummary:\nThis patch adds Sphinx based documentation to libc++. The goal is to make it easier to write documentation for libc++ since writing new documentation in HTML is cumbersome. This patch rewrites the main page for libc++ along with the instructions for using, building and testing libc++. \n\nThe built documentation can be found and reviewed here: http://efcs.ca/libcxx-docs\n\nIn order to build the sphinx documentation you need to specify the cmake options `-DLLVM_ENABLE_SPHINX=ON -DLIBCXX_INCLUDE_DOCS=ON`. This will add the makefile rule `docs-libcxx-html`.\n\nReviewers: chandlerc, mclow.lists, danalbert, jroelofs\n\nSubscribers: silvas, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12129\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fdc443f37261dd259f3fac1b87f4de419551810","date":"2015-08-22T20:26:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix default value for LLVM_INCLUDE_DOCS in out of tree build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245790 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a73d0926fc08445e9c04fa3670ec8ba5f09bd089","date":"2015-08-22T21:24:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor shared_timed_mutex tests.\n\nFirst I removed all of the uses of _LIBCPP_STD_VER and added LIT UNSUPPORTED tags to prevent the tests from being run in older standard dialects.\nSecond I increased the time tolerances used in some tests when testing with Thread Sanitizer because thread sanitizer make these tests take longer.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245793 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a276cb01bef3c950e142838d0db61d6a6e460117","date":"2015-08-23T02:34:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup fancy pointer rebinding in list using __rebind_pointer.\n\nCurrently we need an #ifdef branch every time we use pointer traits to rebind a pointer because\nit is done differently in C++11 and C++03. This patch introduces the __rebind_pointer utility to\nclean this up. \n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d686dda62e7da9958c6b82716bb8480f83ff40d0","date":"2015-08-23T02:39:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r245802. It violates the incomplete type requirements.\t\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb2f28e15d3666b9316bf77ced071f16fa0fc70e","date":"2015-08-23T02:56:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit rL245802: Cleanup fancy pointer rebinding in list using __rebind_pointer.\n\nCurrently we need an #ifdef branch every time we use pointer traits to rebind a pointer because\nit is done differently in C++11 and C++03. This patch introduces the __rebind_pointer utility to\nclean this up.\n\nAlso add a test that list and it's iterators can be instantiated with incomplete element types.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245806 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70e8f5988476c4ef3f8d0296d03a1f97380de212","date":"2015-08-24T15:57:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a crasher found by libFuzzer\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245849 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6804e8bfa087da6e76b1d2ffd4402154c93ef18a","date":"2015-08-24T19:33:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add release goals to TODO.txt\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e91fa1eec81b33d1c439eea037cfe8282460267","date":"2015-08-24T21:20:07.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Misc drive-by cleanups. NFC\n\nhttp://reviews.llvm.org/D12294\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245876 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4add27b7639f5a58eb2f181b50c15fcaa8672d8e","date":"2015-08-24T21:27:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move test/std/utilities/date.time to proper stable name utilities/time/date.time\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245877 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7bcd5704d9a0541f7fe008d70f968696271bea17","date":"2015-08-25T01:28:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor and fix more flaky shared_mutex tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245918 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d51f6c58c863d4881fe1b7c24584cd2ed6aef9d","date":"2015-08-25T04:35:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark test as XFAIL with MSAN until D12311 gets committed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@245922 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3dfc10d4b1178e0429527e08bb62854e666ba2d2","date":"2015-08-26T07:03:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove XFAIL in test. The bug causing it has been fixed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246022 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db8a5fd8647293c00603970282d0b195bb4ed13a","date":"2015-08-26T19:04:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor flaky shared_mutex tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246055 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1626ad28d17b066f991c354e089f52a0268adbc","date":"2015-08-26T20:15:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Rewrite C++03 __invoke.\n\nSummary:\nThis patch rewrites the C++03 `__invoke` and related meta-programming. There are a number of major changes.\n\n`__invoke` in C++03 now has a fallback overload for when the invoke expression is ill-formed (similar to C++11). This means that the `__invoke_return` traits will return `__nat` when `__invoke(...)` is ill formed. This would previously cause a compile error.\n\nBullets 1-4 of `__invoke` have been rewritten. In the old version `__invoke` had 32 overloads for bullets 1 and 2,\none for each possible cv-qualified function signature with arities 0-3. 64 overloads would be needed to support member functions\nwith varargs. Currently these overloads were fundamentally broken. An example overload looked like:\n```\ntemplate <class Rp, class Tp, class T1, class A0>\nRp __invoke(Rp (Tp::*pm)(A0) const, T1&, A0&)\n```\nBecause `A0` appeared in two different deducible contexts it would have to deduce to be an exact match or the overload\nwould be rejected. This is made even worse because `A0` appears without a reference qualifier in the member function signature\nand with a reference qualifier as an `__invoke` parameter. This means that only member functions that took all\nof their arguments by value could be matched.\n\nOne possible fix would be to make the second occurrence of `A0` appear in a non-deducible context. This way\nany type convertible to `A0` could be passed as the first parameter. The benefit of this approach is that the\nsignature of the member function enforces the arity and types taken by the `__invoke` signature it generates. However\nnothing in the `INVOKE` specification requires this behavior.\n\nMy solution is to use a `__invoke_enable_if<PM_Type, Tp>`  metafunction to selectively enable the `__invoke` overloads for bullets 1, 2, 3 and 4.  It uses `__member_function_traits` to inspect and extract the return type and class type of the pointer to member. Using `__member_function_traits` to inspect `PM_Type` also allows us to reduce the number of `__invoke` overloads from 32 to 8 and add\nvarargs support at the same time.\n\nBecause `__invoke_enable_if` knows the exact return type of `__invoke` for bullets 1-4 we no longer need to use `decltype(__invoke(...))` to\ncompute the return type in the `__invoke_return*` traits. This will reduce the problems caused by `#define decltype(X) __typeof__(X)` in C++03.\n\nTests for this change have already been committed. All tests in `test/std/utilities/function.objects` now pass in C++03, previously there were 20 failures.\n\nReviewers: K-ballo, howard.hinnant, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11553\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e94b4840efd092480e58259c608cf0a710e00a55","date":"2015-08-26T20:17:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add special warning flag detection logic to compiler.py\n\nSummary: Detecting `-Wno-<warning>` flags can be tricky with GCC (See https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html). This patch adds a special `addWarningFlagIfSupported(<flag>)` method to the test compiler object that can be used to add warning flags. The goal of this patch is to help get the test suite running with more warnings.\n\nReviewers: danalbert, jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D11333\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246069 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"961269db1b0e147dab59c187e66c48f4efd7e6d0","date":"2015-08-26T20:18:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Remove installation rules on Darwin when it would overwrite the system installation.\n\nSummary:\nOn Mac OS X overwriting `/usr/lib/libc++.dylib` can cause your computer to fail to boot. This patch tries to make it harder to do that accidentally. \n\nIf `CMAKE_SYSTEM_NAME` is `Darwin` and `CMAKE_INSTALL_PREFIX` is `/usr` don't generate installation rules unless the user explicitly provides `LIBCXX_OVERRIDE_DARWIN_INSTALL=ON`. Note that `CMAKE_INSTALL_PREFIX` is always absolute so we don't need to worry about things like `/usr/../usr`.\n\nReviewers: mclow.lists, beanz, jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12209\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246070 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ea443059f036a09534730abfe7ceda50256a39c","date":"2015-08-27T14:37:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove a switch statement, and replace with a bunch of ifs to silence a warning about 'all the enumeration values covered'. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246150 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"044df63102fc3b504002587fbeee5ff8c074d67b","date":"2015-08-27T17:47:34.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Do not include pthread.h and sched.h when threads are disabled\n\nPatch by Philippe Daouadi!\n\nhttp://reviews.llvm.org/D9639\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246168 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f241823a281ef7c00a64a0c1d23eeccd6b39879","date":"2015-08-28T03:02:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Optimize away unneeded length calculation in basic_string::compare(const char*)\n\nSummary:\nThis patch optimizes basic_string::compare to use strcmp when the default char_traits has been given.\nSee PR19900 for more information. https://llvm.org/bugs/show_bug.cgi?id=19900\n\nReviewers: mclow.lists\n\nSubscribers: bkramer, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12355\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246266 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ec04a92d24061c5332c2989bce999a5414d9d83","date":"2015-08-28T05:00:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bug in test_allocator<void> that used the wrong value to represent object state\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246270 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"031a3d203ab2795050492d71da44179939b42bb3","date":"2015-08-28T05:06:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Mark most test/std/future tests as UNSUPPORTED in C++03\n\nSummary:\nThis patch marks *most* tests for `std::promise`, `std::future` and `std::shared_future` as unsupported in C++03. These tests fail in C++03 mode because they attempt to copy a `std::future` even though it is a `MoveOnly` type. AFAIK the missing move-semantics in `std::future` is the only reason these tests fail but without move semantics these classes are useless. For example even though `std::promise::set_value` and `std::promise::set_exception(...)` work in C++03 `std::promise` is still useless because we cannot call `std::promise::get_future(...)`.\n\nIt might be possible to hack `std::move(...)` like we do for `std::unique_ptr` to make the move semantics work but I don't think it is worth the effort. Instead I think we should leave the `<future>` header as-is and mark the failing tests as `UNSUPPORTED`. I don't believe there are any users of `std::future` or `std::promise` in C++03 because they are so unusable. Therefore I am not concerned about losing test coverage and possibly breaking users. However because there are still parts of `<future>` that work in C++03 it would be wrong to `#ifdef` out the entire header.\n\n@mclow.lists Should we take further steps to prevent the use of `std::promise`, `std::future` and `std::shared_future` in C++03?\n\n\nNote: This patch also cleans up the tests and converts them to use `support/test_allocator.h` instead of a duplicate class in `test/std/futures/test_allocator.h`.\n\nReviewers: mclow.lists\n\nSubscribers: vsk, mclow.lists, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12135\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aff153a8cd0119ef9e60d2c01760796f938f7c9a","date":"2015-08-28T05:07:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Constrain unique_ptr::operator=(unique_ptr<Tp, Dp>) in C++03 mode\n\nSummary:\nThis patch properly constrains the converting assignment operator in C++03. It also fixes a bug where std::forward was given the wrong type.\nThe following two tests begin passing in C++03:\n\n* `unique_ptr.single.asgn/move_convert.pass.cpp`\n* `unique_ptr.single.asgn/move_convert13.fail.cpp`\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12173\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246272 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba3e81f6a85f0558f91f0bd53d7b6644a0ae07c2","date":"2015-08-28T05:18:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove empty file that arcanist created\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87813277b33ed75a575824e66c0a99d04c5a9072","date":"2015-08-28T05:46:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Finally get the test suite passing in C++03!!\n\nAfter months of work there are only 4 tests still failing in C++03.\nThis patch fixes those tests.\n\nAll of the libc++ builders should be green.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2d4892682d2f6b3947e4a2446c918dff0509f6f","date":"2015-08-28T07:02:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix most GCC warnings during build. Only -Wattribute left.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9eddf6e1f558386e19098d963ba0ebbd4b37dfb6","date":"2015-08-30T17:58:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove task to get C++03 tests passing from TODO.txt\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246392 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"408369b7c9dde8f1f0636f61b2ae06499e418875","date":"2015-08-30T22:04:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Suppress clang warnings in some tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246399 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cae4caba73694437e8115419b6333ba00a05b02e","date":"2015-08-31T03:50:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move __lazy_* metafunctions to type traits and add tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d9da5891f6628ffa9d2f382113a8231121aeee1","date":"2015-08-31T14:43:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove unused code. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a189974948fdcb72bc2f10e72c0b6d572f5d035f","date":"2015-09-03T15:11:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make a helper routine __throw_future_error, and encapsulate the #ifdef _LIBCPP_NO_EXCEPTIONS there, instead of duplicating it throughout the code. No functionality change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0dec9d519ca026661a14d599bcd22bc7561496d7","date":"2015-09-04T22:57:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test commit to see if libcxx.llvm.org/docs builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246893 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e5b234c63091288a7b732d35b63fad250948886","date":"2015-09-04T23:19:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test commit for sphinx docs try2\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246895 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46f9f326cfdf5774176247e14d2c5e1d5ed65919","date":"2015-09-05T01:32:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try building docs again.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246906 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3ec600c01c5a15ece09500e885bda297156b959","date":"2015-09-05T05:12:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add temporary Makefile.sphinx build file to get libcxx.llvm.org/docs going\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246909 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf54da76b9ad10a4f90a2ec0afd48ca4d4b3b519","date":"2015-09-05T05:29:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test commit for builder\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246910 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9641982206d6de52c033f939a98dd7ffcc34c0b0","date":"2015-09-05T05:34:27.000Z","author":{"name":"Tanya Lattner","email":"tonic@nondot.org"},"message":"Test temporary commit. \n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246911 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf829c96885cd1f35875b82147faf0b6b68e9b73","date":"2015-09-05T05:38:50.000Z","author":{"name":"Tanya Lattner","email":"tonic@nondot.org"},"message":"Remove test commit.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246912 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1aa96e86795726d6d6740fd4a0cf1c3c66537436","date":"2015-09-05T06:50:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup new documentation index and transfer more information from www/index.html\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246913 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b5169ad0b31cb5bc9ff70634c63bc820c1ce676","date":"2015-09-05T06:57:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try and fix broken bugzilla link\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246914 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"82c57454512e1aa52360042112e0de21f0536da5","date":"2015-09-05T07:20:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try and fix links again. Seems to be a sphinx version issue.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246915 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ec94be3dfd3d118d5ab82aecc7ce15ea8058cfc","date":"2015-09-06T23:09:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try to fix links for libcxx.llvm.org/docs again.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246950 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d514c01f5219555c9d0bd8c98f696c7f79b7183","date":"2015-09-06T23:22:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix another bad link in the new docs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246951 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b22481a33ba4f34524108d5c6ac2e9bd6b1b4a56","date":"2015-09-06T23:31:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup BuildingLibcxx.rst and remove TODO\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246952 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65a6f6422165f5a20e16335b670a67682a4f2ec0","date":"2015-09-08T00:13:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"make common_type SFINAE-friendly and support void. Patch from Agustin Berge.\n\nThis patch also fixes PR22135. (https://llvm.org/bugs/show_bug.cgi?id=22135)\nSee the review for more information: http://reviews.llvm.org/D6964\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@246977 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af9a44f256be54de6874d1eefd1d282d0671c0cf","date":"2015-09-08T17:59:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implementation of Boyer-Moore and Boyer-Moore-Horspool searchers for the LFTS.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@247036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c2d317f1a2fc4a9dd5eb4b0d233d9717a12c1d76","date":"2015-09-15T14:46:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change initialization of mbstate_t objects in tests from '= {0}' to '= {}', which does the same thing, w/o having clang and gcc warn with -Wall.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@247695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"41a04d69c4a087bdbab75c44b668a608160fffe7","date":"2015-09-15T17:12:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Suppress some warnings in the tests that snuck in.  That 'tmpnam' is deprecated doesn't change the fact that we have to test it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@247704 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2897e786b4753adaa124f16dcef757dfcc9bddaa","date":"2015-09-16T18:10:47.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add endianness configuration block for GCC.\n\nPreviously GCC using libc++ would just leak endian.h for every\ninclude.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@247827 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b4ab6f08a81ba34b99c4f50531309e20b774c59","date":"2015-09-22T03:15:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix <atomic> with -pedantic-errors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248240 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b0e4195ebff10a7021eaf6b3f7c78abe30d0b75","date":"2015-09-22T17:50:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change pair::swap(pair&) to call ADL swap instead of iter_swap; this fixes an obscure bug having to do with overloaded operator&. Fixes PR#24890\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248304 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"842e3f6f517446e3a565add7b15bcabe07b2c400","date":"2015-09-22T17:57:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Check in the test for PR#24890 that I forgot in previous commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248305 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf94e482163f9dcc6b004f2cec71b62c75cac2f6","date":"2015-09-22T18:09:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"The test I cnecked in to check the fix for PR#24890 failed (as expected) w/o the fix, but for the wrong reason. Now it fails for the right reason.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248307 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"514c83150431bbba7bbe1808a3a8e3cbe28bb314","date":"2015-09-22T18:37:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove possible trailing padding from aligned_storage. Patch from Yiran Wang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da3ca864512538b078897fe9004052a11dd640ba","date":"2015-09-22T18:55:37.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Add placeholder __libcpp_relaxed_store() for when atomic builtins are not available.\n\nSummary:\nIn rL241532, atomic_support.h was added, which provides handling of\natomic operations for libc++.  When atomic builtins are not available,\nit emits a warning about being unsupported, but it still provides a\nnumber of stubs for the required functions.\n\nHowever, it misses a stub for `__libcpp_relaxed_store()`.  Add it, by\nusing the same implementation as for `__libcpp_atomic_store()`.\n\n(Note that I encountered this on arm-freebsd, which still defaults to\narmv4, and does not have the runtime libcalls to support atomic\nbuiltins.  For now, I have simply disabled using them.)\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: theraven, cfe-commits, jroelofs, majnemer, aemerson\n\nDifferential Revision: http://reviews.llvm.org/D13051\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248313 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6a85e8a355be05b9efa8408f875014e6b47cef3b","date":"2015-09-22T21:58:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix Typo in GCC no RTTI detection. Fixes PR#24901. Thanks to Bernhard Rosenkraenzer for the report and the patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"49abdbcca357ec3151088f7ee9b50358801c1e0c","date":"2015-10-01T06:15:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Dont link -lrt in the testsuite on linux unless using sanitizers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248986 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"237206bfdac14d61fc0fa7c77f5a00a14c6be7ae","date":"2015-10-01T07:05:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Suppress array initialization warnings in std::experimental::apply tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248987 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5289b0d698a6b6c3b0430cfcc47ac7f50efd0464","date":"2015-10-01T07:29:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix initialzation order in dynarray\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248988 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9698ac5a68ae94d3e89c77673fb8f8e51611d06d","date":"2015-10-01T07:41:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Manually suppress -Wnonnull when it occurs in an unevaluated context\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248989 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d95ca09be4f47fb819a04439263757c204622d21","date":"2015-10-01T08:34:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to prevent flaky thread.mutex tests by once again increasing timing tolerances\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@248993 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"423ca20f248a94796bd71029d8e8cc1a4303fbc5","date":"2015-10-02T21:25:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Attempt to fix __throw_future_error in C++03 \n\nSummary:\nHi Marshall,\n\nCould you please test this patch and see if you run into the same linker errors we talked about?\nI can't reproduce on linux or OS X.\n\nHopefully you can't find any problems and we can fix the C++03 bot.\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13337\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3898a21876d639321e81441f04ebff353b0cc5d","date":"2015-10-03T02:32:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Use newest supported language dialect when running the test suite.\n\nSummary:\nCurrently the test suite defaults to C++11 mode if no standard version is supplied to LIT using `--param=std=c++XX`.  This patch changes that behavior so that the newest possible dialect is selected instead.\n\nI have already patched the C++11 bot to explicitly specify `--param=std=c++11`. I'm just putting this up for review to see if anybody objects to this idea.\n\nReviewers: mclow.lists, jroelofs, danalbert\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13331\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249226 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ed093bde7a0fdead4fd0394ed27ec4d09c02e72","date":"2015-10-05T16:17:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2063, and update the issues links to point to the github generated pages\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f287e90539b89fc51bdfd30de46c16688e8354e","date":"2015-10-05T18:40:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Private page for status of Kona issues and papers. Will be deleted after the Kona meeting. Not to be linked to from other pages.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74a6450793217439f75f1d4ee1a63340d888ae4d","date":"2015-10-05T18:48:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add comments about the issues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25daee702ef0e42ca6b437ef11075fbe34fe4b1f","date":"2015-10-05T19:28:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Reexport std::bad_array_length symbols from libc++abi on OS X.\n\nSummary:\nOn OS X libc++ needs to reexport libc++abi's symbols in order for them to be provided. We explicitly list the symbols to reexport it libcxx/lib/libc++abi2.exp. This patch adds the symbols required by std::bad_array_length which have been missing for some time.\n\nHowever there is a problem. std::bad_array_length was add to libc++abi in September of 2013 by commit r190479, about a year after everything else. Therefore I think older OS X version  have libc++abi versions without std::bad_array_length. On those systems\nlibc++ won't build with this change because we will try and export undefined symbols.\n\nThe workaround I would write to support older systems depends on the amount of people who would need it.   If only a small number of developers are affected it might be sufficient to provide a CMake switch like `LIBCPP_LIBCPPABI_HAS_BAD_ARRAY_LENGTH` which is\nON by default and can be disabled by those who need it. Otherwise I think we should try to automatically detect if the symbols are present in `/usr/lib/libc++abi.dylib` and configure accordingly. I would prefer the first solution because writing CMake sucks.\n\n\n\n\nReviewers: mclow.lists, aprantl\n\nSubscribers: aprantl, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13445\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249339 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f8941c14a4dcdad4683cc4cb9725b2098bce26f2","date":"2015-10-05T20:16:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch ready for 2127\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"960bd0c6f8929d114d3d89eba83bcddc1ec09211","date":"2015-10-05T20:21:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2072 as complete; we already do this\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f956599e0ee534c22800c2d70f799bf4d9212a4f","date":"2015-10-05T20:35:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark a couple more issues 'ready'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249348 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba4775171eaddf8e8e053dc1a85f13bce987c086","date":"2015-10-05T20:50:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a possible overflow in a test of allocator::max_size().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249349 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa8c64946a84be9377ff7eb79d2aa306941aac03","date":"2015-10-05T21:08:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch for 2466 is ready\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d2d92e98ed94e6dea03dab879f2774818d612f3","date":"2015-10-05T21:11:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2380 and 2384 as complete; no changes needed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249354 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d2757fe700f77f3b11ba83f05ee2f1eb421ad63","date":"2015-10-05T23:27:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2259 and 2473 as complete. Add some more notes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249363 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d06b33e5d04b6b77851f20a16d97851a91fb4263","date":"2015-10-06T04:12:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add comments for LWG issues 2219 and 2367\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249372 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5142fe4401f6238258aed976addcba26a3beeaf9","date":"2015-10-06T20:30:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Our test allocators support move/copy construction; they should support move/copy assignment as well\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249458 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2a59ae0e1cb04c7a42026c609eeed94f7851f8e","date":"2015-10-06T20:35:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated issue 2476\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8b245634492dbf4187175745bfe3b5f93b47ba3","date":"2015-10-06T22:03:22.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Remove unnecessary inline functions capturing the contents of C library macros.\n\nThe C standard requires that these be provided as functions even if they're\nalso provided as macros, and a strict reading of the C++ standard library rules\nsuggests that (for instance) &::isdigit == &::std::isdigit, so these wrappers\nare technically non-conforming.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249475 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a09319b8989cac231603fb116a6cbecf6dc2f87c","date":"2015-10-07T19:41:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"While researching LWG#2244, I noticed we weren't testing that eofbit was being cleared. Now we are\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d20ca919680dc71ea392b7ca9c7638c2373c516f","date":"2015-10-07T19:45:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2244 as 'Patch Ready', 2477 and 2487 as 'Complete'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249595 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72d7577b34d425d84ed8749fffab2e0759fd7ec6","date":"2015-10-08T20:34:11.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Factor definition of std::nullptr_t out of <cstddef> into a header that can also be used by <stddef.h>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249737 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ceeace9a60b800245b4ae8633418f52af212f855","date":"2015-10-08T20:36:30.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <ctype.h> out of <cctype>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249738 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1bbbd60ea78d636b835cfcf5ceb13d919656284d","date":"2015-10-08T20:37:11.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <errno.h> out of <cerrno>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249739 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f82f4f3f073e2e645d0147072515c0972cd62058","date":"2015-10-08T20:37:44.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <float.h> out of <cfloat>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249740 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"325c37a20f5bd9a4bff81e5cb2d678ae48fa97f2","date":"2015-10-08T20:38:53.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <inttypes.h> out of <cinttypes>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249741 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4faa3944c623cbaa711ec9d39338d8872d0cf9f1","date":"2015-10-08T20:40:34.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <math.h> out of <cmath>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ddbf08114a5b7ab2fce99e2c2341a1e4dda27660","date":"2015-10-08T20:41:26.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <setjmp.h> out of <csetjmp>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ccd90dd42bd776a3bb740aba018196a3118951b","date":"2015-10-08T21:17:21.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Fix incorrect file header. This is <cfenv> not <cctype>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"759cd0e86b3d4d31f81f5f567d85af6d857bb997","date":"2015-10-08T22:25:27.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <stddef.h> out of <cstddef>.\n\nThere are a bunch of macros (__need_size_t etc) that request just one piece of\n<stddef.h>; if any one of these is defined, we just directly include the\nunderlying header.\n\nNote that <stddef.h> provides a ::nullptr_t. We don't want that available to\nincluders of <cstddef>, so instead of following the usual pattern where <cfoo>\nincludes <foo.h> then pulls things from :: into std:: with using-declarations,\nwe implement <stddef.h> and <cstddef> separately; both include <__nullptr> for\nthe definition of std::nullptr_t.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249761 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1883b40a07f2773bdc1dcec15e166f91c042b4be","date":"2015-10-08T23:44:26.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Fix test failure in C++98 mode due to imperfect static_assert emulation.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249780 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45bae0b7dca0a4e2056f49f15bd4cc3d21ff2b63","date":"2015-10-09T00:26:50.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"PR25118: move system_header pragma before uses of include_next to avoid extension warnings for people finding libc++ headers via -I paths.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff7ba4da7d1aa92c8e9e8942d90eccc20bc63a35","date":"2015-10-09T01:29:09.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <stdio.h> out of <cstdio>.\n\nAs with <stddef.h>, skip our custom header if __need_FILE or __need___FILE is defined.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249798 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f650ea7131fe7f10b5d88554a19dfe563a81b5ea","date":"2015-10-09T01:41:45.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <stdlib.h> out of <cstdlib>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249800 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26a70eccf2a895089c32ed7e3ecb2fc4c6361f1e","date":"2015-10-09T19:56:37.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <wchar.h> out of <cwchar>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249889 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2b3629dbf0ce0f04adbf0c2453b07f27946feae","date":"2015-10-09T19:57:37.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <wctype.h> out of <cwctype>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249890 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e35e663f73251e7687adc52e075aa631062bc447","date":"2015-10-10T01:03:55.000Z","author":{"name":"Manman Ren","email":"manman.ren@gmail.com"},"message":"Revert r249889 due to bot failure.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249926 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f4f08db91e0a7bdeb20a52b80db566d328882ec","date":"2015-10-10T01:25:31.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Split <string.h> out of <cstring>.\n\nAlso fix the overload set for the five functions whose signatures change in the\ncase where we can fix it. This is already covered by existing tests for the\naffected systems.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249929 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b7a6b89958727e1cf7264c126cd8cfc60d15dc0","date":"2015-10-10T01:33:17.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Add a test that we declare the right set of C library function signatures in ::\nand std::, and that the names in :: and std:: are declaring the same entity.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de66c515def601cfe6a4ff20674673f19335927c","date":"2015-10-10T01:39:51.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Unrevert r249889, and XFAIL the test for Darwin, where the libc apparently doesn't provide a correct overload set for some functions.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249932 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea3390477394f65837d39564e911a939663e403f","date":"2015-10-10T02:54:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get some of wchar_h.pass.cpp working on apple.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249936 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42b89c7e05a808fceacab63917b4140738525885","date":"2015-10-10T03:31:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r249931 - Remove same_decls.pass.cpp because it fails on OS X and in C++03 mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249938 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb23a49e4011040e73b49f90e9aae5b217f05bf3","date":"2015-10-10T03:34:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Turn off -pedantic by default when building due to #include_next. :-(\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@249939 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf64c23851ce11bed46fe822ba513a73a684edd4","date":"2015-10-12T00:49:56.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[Darwin] Need to add -isysroot on OS X otherwise the tests will fail if you don't have the command line tools package installed.\n\nThis mirrors how other LLVM suites are configured for running on OS X.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250003 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6bed14b3435c1c4d80bd1eae57d471175b08c45f","date":"2015-10-12T02:54:30.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[Darwin] Reworking r250003 to use lit.util.capture instead of subprocess.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250007 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"218d0174009ccaf45287d470b6bf31905ab60d07","date":"2015-10-12T16:25:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2447 and 2466 as completed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250061 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73ffc7861633630c9ad0f98fa1828ac5d93be6b9","date":"2015-10-13T22:12:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Capture configuration information when installing the libc++ headers\n\nSummary:\nHi all,\n\nThis patch is a successor to D11963. However it has changed dramatically and I felt it would be best to start a new review thread.\n\nPlease read the design documentation added in this patch for a description of how it works.\n\nReviewers: mclow.lists, danalbert, jroelofs, EricWF\n\nSubscribers: vkalintiris, rnk, ed, espositofulvio, asl, eugenis, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13407\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250235 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44d1476b6d36e96b85a1fc388405e42aaf887c46","date":"2015-10-13T22:13:33.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Remove __config module to avoid #include cycle when libc headers include libc++'s <foo.h> headers.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3759bed4471da1f71981a174e250c34c2271ca30","date":"2015-10-13T22:22:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix whitespace in doc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250238 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3b00818e525214f578a5e055c2b7e500f88cb5d","date":"2015-10-13T23:12:22.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Fix use of libc++ <foo.h> headers from within an 'extern \"C\"' context in C++98.\n\nPreviously, this resulted in us declaring a template for static_assert emulation within the 'extern \"C\"' context, which is ill-formed.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f01aa8fb8bb7d09505aff519b5b7f3e85dc881c","date":"2015-10-13T23:48:28.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"ABI versioning macros for libc++.\n\nC++ macros and CMake options that specify the default ABI version of\nthe library, and can be overridden to pick up new ABI-changing\nfeatures.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250254 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"499d87881a8769b5c2bc3d653afcc956d56668cd","date":"2015-10-13T23:56:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround -pedantic flag added by LLVM\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250256 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a6622799b4ae5d64c89d9f77f83d899aeb4ea71c","date":"2015-10-14T00:22:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use __config_site when building libc++. Also cleanup ABI versioning doc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250261 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4ae16b67ae3145ab0261d1ab8fb15a52569a5c3","date":"2015-10-14T08:36:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix GCC atomic implementation in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250279 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f0cd203bdc98fc05fdb25b0a023bf25ab6c180c1","date":"2015-10-14T18:22:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Use __config_site to configure the test suite features.\n\nSummary:\nThis patch changes the tests to use the \"__config_site\" header if present instead of manually configuring for each option. This patch also removes the test flags for configuring some of these options. For example \"lit -sv --param=enable_threads=OFF\" no longer works. However lit will still correctly configure if  the CMake option \"-DLIBCXX_ENABLE_THREADS=OFF\" is given at build time. \n\nThis patch will fix the libc++abi test configuration for `LIBCXX_ABI_VERSION` and `LIBCXX_ABI_UNSTABLE` one we teach it about 'project_obj_dir' . I would like to land this ASAP to prevent more work blockage.\n\nReviewers: mclow.lists, danalbert, eugenis, ed, jroelofs\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13714\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250308 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56c1f9b8e5f00862bb994de5687084b93027ac31","date":"2015-10-14T19:00:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Split out config_site logic so libc++abi can use it\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250312 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8cbf020fdc5eb60feb086989c181959a58383749","date":"2015-10-14T19:54:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Make it drastically simpler to link libc++.\n\nSummary:\nCurrently on most platforms you have to manually link the c++ abi library used with libc++ whenever you use libc++. So your typical libc++ command like invocation might look like:\n\n```\nclang++ -stdlib=libc++ foo.cpp -lc++abi\n```\n\nHaving to manually link `libc++abi.so` makes it harder for libc++ to be used generically. This patch fixes that by generating a linker script for `libc++.so` that correctly links the ABI library. On linux the linker script for libc++abi would look like:\n\n```\n# libc++.so\nINPUT(libc++.so.1 -lc++abi)\n```\n\nWith the linker script you can now use libc++ using only `-stdlib=libc++`. This is the technique that is used on FreeBSD in ordered to link cxxrt and I think it's the best approach to make our users lives simpler.\n\nThe CMake option used to enable this is `LIBCXX_ENABLE_ABI_LINKER_SCRIPT`. In future I would like to enable this by default on all platforms except for Darwin.\n\nReviewers: mclow.lists, danalbert, rsmith, jroelofs, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12508\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250319 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2bc8f6ceeb0051bbc61f70052ed306a83e0114a7","date":"2015-10-14T20:44:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update testing guide for libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d1e2a83a5e1e97007aeb5216106b6af0406e8e52","date":"2015-10-14T20:51:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Link to new documentation from existing homepage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a317a1b7cfcf4c3a698faa19033d1942b9f8ec8f","date":"2015-10-14T21:20:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use correct CMake variable for the libname\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"89c7ec3512fc256872a6d5ba7d442571985a5235","date":"2015-10-14T22:26:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update issues status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250336 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9aebae3dc61b43b5e8ed296cb162cce61797fde","date":"2015-10-15T03:27:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add links to libc++ code coverage and builders\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250361 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b081f6bc515ef4fb28c86630aa128e354d44fe5","date":"2015-10-15T20:27:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix handling of -Wno-pedantic\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb856cc35729c0d5d023c3b37d93b8c87344b9d5","date":"2015-10-15T22:41:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Make libc++.so a linker script by default on most platforms.\n\nSummary:\nThis patch turns on `LIBCXX_ENABLE_ABI_LINKER_SCRIPT` by default whenever `LLVM_HAVE_LINK_VERSION_SCRIPT` is ON. This turns out to be whenever:\n\n1. WIN32 is not defined.\n2 UNIX is defined.\n3. APPLE is not defined.\n\nWhile `LLVM_HAVE_LINK_VERSION_SCRIPT` is meant to reflect exactly what we are asking I think it's close enough.\n\nAfter committing this patch Linux users will no longer have to use \"-lc++abi\" explicitly!\n\n\n\n\nReviewers: mclow.lists, danalbert, compnerd, jroelofs\n\nSubscribers: emaste, rengolin, cbergstrom, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13739\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7780301d8e1531110ee67ba665cf617922dfc58","date":"2015-10-15T22:51:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Quickly fix bad commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250471 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d3716a63335842f1be842de49f9133d844a2917","date":"2015-10-15T23:04:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Re-enable linker scripts after fixing bad CMake\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250472 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99290c6ec8fb6804b168a12ebe19b2c3a79c35e0","date":"2015-10-16T11:14:30.000Z","author":{"name":"Benjamin Kramer","email":"benny.kra@googlemail.com"},"message":"Remove a long-standing __has_include hack.\n\nThis was put in to get libc++ building without libcxxabi. We now have\nmacros that show that we are building against libcxxabi so use that\ninstead. This guards against existing but broken cxxabi.h headers on the\nsystem.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250507 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f6e763c49701838c47ab105e81634fc21bc77cf","date":"2015-10-16T11:26:26.000Z","author":{"name":"Benjamin Kramer","email":"benny.kra@googlemail.com"},"message":"Fix an unfortunate yet old typo that never got attention before r250507.\n\nShould fix the xcode libc++ build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250508 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac042ab93db179d98f3b742ff893032e77326417","date":"2015-10-20T07:37:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Detect relaxed constexpr rules for gcc versions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@250802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d5b59b8261d03b27b897e552f71a6c73438891c","date":"2015-10-22T20:50:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable linker scripts when the ABI library is not specified or is none.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251062 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1cf5a81b89608aad703291d64c5dae705a53eb79","date":"2015-10-22T20:54:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Only disable linker script when LIBCXX_CXX_ABI_LIBNAME is none\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251063 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"601d2c11650f7a8f3387b93605040382eb3fa8fb","date":"2015-10-22T21:24:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Dont required CMake 3 to install a linker script\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251065 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6d05b65b285873563f3f70d58468da9191b8b9c","date":"2015-10-23T07:04:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use proper output directory when naminging the  libc++ output\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251100 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25037cf729801dfc0afd463895499268f1bb6b54","date":"2015-10-23T17:56:08.000Z","author":{"name":"Tim Northover","email":"tnorthover@apple.com"},"message":"Set LC_COLLATE rather than LANG to override collation.\n\nOn a system with LC_COLLATE=C, this takes precedence over a non-C LANG\nthe test tries to impose and the test fails.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251131 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd33deb08381672603ddc2e39b88e5c360ae9bf8","date":"2015-10-25T06:02:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++ status from Kona\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251220 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dbef2bb1d0453026b49af6d55aa99bcec776ff35","date":"2015-10-25T18:31:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix LWG#2244: basic_istream::seekg\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251246 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"332ab91947eabf73bc8feabeff5fdcf71659b245","date":"2015-10-25T18:58:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix LWG#2127: Move-construction with raw_storage_iterator.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"175cb20bfb8e186241dd54ed9a80adc5931f344d","date":"2015-10-25T19:20:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test for LWG#2462: std::ios_base::failure is overspecified\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251250 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88fa03a06e41b601c56d5696d81c08462ba820a6","date":"2015-10-25T19:34:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test for LWG#2466: allocator_traits::max_size() default behavior is incorrect\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251252 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9533a4a80f7cb5053d107b47b336f7bfc93d6d31","date":"2015-10-25T19:52:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix LWG#2476: scoped_allocator_adaptor is not assignable\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251253 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8997b871333557dc6081c8de051ac67505f7f102","date":"2015-10-25T19:53:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add the tests for the last commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251254 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fb7b97cfbb42b26da57f3c181ab6caa1b957f677","date":"2015-10-25T20:12:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix LWG#2489: mem_fn() should be noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251257 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28ce1c847a510677aa6385863bb760d07ef8bce6","date":"2015-10-25T20:12:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2495 as complete. No code changes needed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251258 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd2fe4de1df6de8a875798eed8187be91e88a32c","date":"2015-10-26T19:08:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test suite configuration. Sorry Marshall\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f98e313a1cf0f6327e8cdfb19d2ba0ac32bb3f4","date":"2015-10-28T17:20:33.000Z","author":{"name":"Matthias Braun","email":"matze@braunis.de"},"message":"Adapt to lit change in llvm r251478-r251481\n\nSorry for the breakage.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251529 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cff2318f56ea18de2a615c4aaf3092bf16d7b9b","date":"2015-10-28T19:21:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark two Kona papers as 'in progress'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8aadda9a19390ec51652951e8f2faa60b4f064e1","date":"2015-10-29T05:43:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0004R1 'Remove Deprecated iostreams aliases'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d6ca4962b429a6b8a401b84a6e61eb88f0d12da","date":"2015-10-29T23:32:29.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Revert r249929 (\"Split <string.h> out of <cstring>\").\n\nThis change caused problems when building code like povray that:\na) uses 'using namespace std;'\nb) is built on an environment where the C library provides the \"wrong\"\n   (non-const-correct) interface for the str* functions\nc) makes an unqualified call to one of those str* functions\n\nA patch is out for review to add a facility to fix this (and to give the\ncorrect signatures for these functions whenever possible, even when the C\nlibrary does not do so). This revert is expected to be temporary.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251665 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94611a888b69dabe99f8fe30867d0ebd78854759","date":"2015-11-01T20:24:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the first part of P0006R0: Adopt Type Traits Variable Templates for C++17. Significantly augment the existing tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251766 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe11cfdd659df35b8cff1b08e081a13ba235e9b4","date":"2015-11-01T21:13:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Improve the tests for 'is_literal_type'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251767 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59b5ea57c3a30f25660d4d4e065528cf82739f9c","date":"2015-11-01T21:14:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add 'nostdinc++' to the flags used by testit. Makes the tests run better on Mac OS X with the new depr.c headers change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251768 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48bcd27b672cabe5f8aa1376666856c417bc98e4","date":"2015-11-02T15:25:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove undefined behavior from some tests. Thanks to Walter Brown for the heads-up.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25bcb0a5a950256af201d36b427f570410e70093","date":"2015-11-02T15:29:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove undefined behavior from some tests. Same pattern as the unitialized_copy tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251804 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c010bd6289777426236534e3523b00de94564b03","date":"2015-11-02T21:34:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make reverse() call iter_swap like the standard says, instead of calling swap directly. No real change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@251836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"223df2ef0f543f7fef9270b3b34b9c73c869a006","date":"2015-11-05T19:33:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0092R1 for C++1z\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"970a9e586616866eed611773fe91c785c4bdf6f7","date":"2015-11-05T19:57:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issue #2234. We already do this; no code change needed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252199 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"38e7a30143bfe1fa9067376cfefd18556e90512a","date":"2015-11-06T06:30:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup foo.h headers and __config to work in C\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"746572b91d0b055e56fca202ad5ca34b13fbb084","date":"2015-11-06T22:02:29.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Allow deque to handle incomplete types.\n\nAllow deque and deque::iterator instantiation with incomplete element\ntype. This is an ABI breaking change, and it is only enabled if\nLIBCXX_ABI_VERSION >= 2 or LIBCXX_ABI_UNSTABLE=ON.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252350 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3b25f81d131a94dce8b13b2b7b30a3d35c94022","date":"2015-11-07T01:22:13.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Cleanup: move visibility/linkage attributes to the first declaration.\n\nThis change moves visibility attributes from out-of-class method\ndefinitions to in-class declaration. This is needed for a switch to\nattribute((internal_linkage)) (see http://reviews.llvm.org/D13925)\nwhich can only appear on the first declaration.\n\nThis change does not touch istream/ostream/streambuf. They are\nhandled separately in http://reviews.llvm.org/D14409.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252385 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6455d85714ff6ade0424c5ce1de4d1503fa45331","date":"2015-11-07T17:44:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More of P0006R0: type traits variable aliases for C++17.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9ef988b080912ae7f08c21ca953d783d4bf5ff0","date":"2015-11-07T17:48:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2353: std::next is over-constrained\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa62fbe63f68637fd748cbd89bfc68698b3799e1","date":"2015-11-07T17:56:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2224 as complete. Wording change only, no code changes required\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"579b42b413d327f246f2572dde145fd147395591","date":"2015-11-09T10:21:04.000Z","author":{"name":"Vasileios Kalintiris","email":"Vasileios.Kalintiris@imgtec.com"},"message":"Add initial support for the MUSL C library.\n\nSummary:\nThis patch adds the LIBCXX_LIBC_IS_MUSL cmake option to allow the\nbuilding of libcxx with the Musl C library. The option is necessary as\nMusl does not provide any predefined macro in order to test for its\npresence, like GLIBC. Most of the changes specify the correct path to\nchoose through the various #if/#else constructs in the locale code.\n\nDepends on D13407.\n\nReviewers: mclow.lists, jroelofs, EricWF\n\nSubscribers: jfb, tberghammer, danalbert, srhines, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13673\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252457 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"84bdf2cbe455c12981b4888258747630237d2215","date":"2015-11-09T10:55:04.000Z","author":{"name":"NAKAMURA Takumi","email":"geek4civic@gmail.com"},"message":"Make check-libcxx Py3-compatible.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252458 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b6407a6db34092b1ac153dbeb28e86405a4d70b","date":"2015-11-09T20:49:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2486 as complete. Eric did this as part of r242959\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252509 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc2e93cff0abb6448aae701abdddc065c1c34a18","date":"2015-11-10T11:41:22.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Make it possible to build a no-exceptions variant of libcxx.\n\nFixes a small omission in libcxx that prevents libcxx being built when\n-DLIBCXX_ENABLE_EXCEPTIONS=0 is specified.\n\nThis patch adds XFAILS to all those tests that are currently failing\non the new -fno-exceptions library variant. Follow-up patches will\nupdate the tests (progressively) to cope with the new library variant.\n\nChange-Id: I4b801bd8d8e4fe7193df9e55f39f1f393a8ba81a\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a28344c08b72889feaae79f3634077cc9603c574","date":"2015-11-10T15:22:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Explicitly #include <utility> so that we get std::move. Thanks to Walter for the bug report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252610 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55d741c32e72234c022c728f24ccafb80ab8b485","date":"2015-11-10T15:48:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Walter pointed out some missing includes in the tests. Fixing the includes uncovered a couple bugs in the _v type traits. Fixed those, too\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1bae7a868bda920a0321391353ee308286367396","date":"2015-11-10T16:04:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"std:: qualify ptrdiff_t in the test. Thanks to Walter for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252613 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1c5c419f56eb9b7060446050a7976319fd839e3","date":"2015-11-10T16:10:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix typo I just introduced.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94d9b1c5b2bf7ba300370b3c050ecbc1e7e4a6db","date":"2015-11-12T10:41:57.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fixup a few fumbles in the initial no-exceptions XFAILs list.\n\nThe initial buildbot run found a few missing bits in the initial XFAIL list\nfor the no-exceptions libc++ variant. These discrepancies are as follows:\n\n[1] Following two tests need XFAILs on the no-exceptions library variant.\nMy local runs had these two disabled for other reasons (unsupported):\n\n  - localization/locales/locale/locale.cons/char_pointer.pass.cpp\n  - numerics/complex.number/complex.ops/complex_divide_complex.pass.cpp\n\n[2] These three does not need XFAILs, they were failing on my local runs for\nother reasons:\n\n  - depr/depr.c.headers/uchar_h.pass.cpp\n  - input.output/iostreams.base/ios/basic.ios.members/copyfmt.pass.cpp\n  - .../category.collate/locale.collate.byname/transform.pass.cpp\n\n(these are failing on my box for the default build as well)\n\nThe current patch fixes both the cases above. Additionally, I've run the\nfollowing scan to make sure I've covered all the cases:\n\n> grep ' catch \\| try \\| throw ' -R . | perl -pe 's|(.*?):.*|\\1|' | sort | \\\n  uniq > 1.txt\n> grep 'libcpp-no-exceptions' -R . | perl -pe 's|(.*?):.*|\\1|' | sort | \\\n  uniq > 2.txt\n> diff 1.txt 2.txt\n\nThis showed up a few extra interesting cases:\n\n[3] These two tests do not use try/catch/throw statements, but they fail at\nruntime. Need to be investigated, I've left the XFAILs in.\n\n  - std/thread/futures/futures.shared_future/dtor.pass.cpp\n  - std/thread/futures/futures.unique_future/dtor.pass.cpp\n\n[4] These tests use a macro named TEST_HAS_NO_EXCEPTIONS to conditionally\nexclude try/catch/throw statements when running without exceptions. I'm not\nentirely sure why this was needed (AFAIK, we didn't have a no-exceptions\nlibrary build before). The macro's defintion is quite similar to that of\n_LIBCPP_NO_EXCEPTIONS. I will investigate if this can be reused for my test\nfixes or if it should be replaced with _LIBCPP_NO_EXCEPTIONS.\n\n  - std/experimental/any/*\n\nChange-Id: I9ad1e0edd78f305406eaa0ab148b1ab693f7e26a\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252870 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f159e874c5c4d86f244d5950fe1114d8d7f6346","date":"2015-11-12T15:56:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0074: Making owner_less more flexible\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@252905 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98984f23c6f504e035c65cf407a18a7f15269a32","date":"2015-11-16T15:05:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark P0013 as 'in progress'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253212 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe99a30bd073519f2e9d829bb1a2ae029fc7b5d5","date":"2015-11-16T15:54:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0013R1: Logical Operator Type Traits. Make a hidden implementation (__and_, __or_, and __not_) so that we can use them elsewhere in non-C++17 code - for example, in the LFTS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253215 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b7c9ec3558ae51bb4fc3c1a499ddf988cee0086","date":"2015-11-16T16:42:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"LWG#2156 loosened the requirements on unordered containers 'rehash' calls. Add tests to make sure we meet these requirements. Since we met the stricter ones, no code change needed to meet the looser ones.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253223 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15a326c525023bc9170dc2f68c2d156386a48190","date":"2015-11-16T22:18:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More tests for LWG#2156\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253257 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffc9c61015c90702173b678d2b1b69fdbda32a17","date":"2015-11-16T23:40:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix compile error in test. Can't use `operator[]` for multimap.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253271 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f60d09276698df1997b8654edc3506e2af8ec11f","date":"2015-11-17T00:08:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0007: Constant View: A proposal for a std::as_const helper function template.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99b6e56ae91d2eab78914b160c7e3e73d99d2d16","date":"2015-11-17T21:04:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests for the extended integer types - as required by LWG#2119\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253376 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55dbcdab7f7892f0099e1049a5091f91b3663f89","date":"2015-11-17T21:48:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bad variable name. project_root -> project_obj_root\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8717289a664bde05bb89bd1a050912593d6db9a","date":"2015-11-19T19:41:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some mistakes in the <array> synopsis. No functional change. Thanks to K-ballo for the patch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a660757c721058259eb1e7521cebc4217aec9d2e","date":"2015-11-19T19:45:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some mistakes in the <utility> and <tuple> synopses. No functional change. Thannks to K-ballo for the patch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e00a713ed6cfb1abab8cdefd2a114eaa54aaf34","date":"2015-11-24T10:24:54.000Z","author":{"name":"Vasileios Kalintiris","email":"Vasileios.Kalintiris@imgtec.com"},"message":"Use libcxx's default rune table with the Musl C library.\n\nSummary:\nAlso, there are no exported character type tables from Musl so we have to\nFallback to the standard functions. This reduces the number of libcxx's\ntest-suite failures down to ~130 for MIPS. Most of the remaining failures\ncome from the atomics (due to the lack of 8-byte atomic-ops in MIPS32) and\nthread tests.\n\nReviewers: mclow.lists, EricWF, dalias, jroelofs\n\nSubscribers: tberghammer, danalbert, srhines, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D14926\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@253972 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eefcf8206eaed1ef26d996f97377017664c38d91","date":"2015-11-24T22:10:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove undefined behavior from tests; specifically, ensure that the value type of the allocators match the value type of the containers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254030 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a579cfea4245a5a74a3411c1f42e3a8948a64e6","date":"2015-11-25T01:06:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Silence a -Wmissing-braces warning in the tests; mbstate_t is defined differently on different C libraries.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254050 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14ba0ad6894eec179bae45550491ff5dcdccee55","date":"2015-11-26T01:24:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add static_assert to set/multiset/map/multimap/forward_list/deque that the allocator's value_type match the container's value_type. vector/unordered/list/string already do this. Add tests for all the containers to verify this.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254119 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3e7f528a244624b1b50c6b357436ae0c4b1b122","date":"2015-11-30T04:30:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement more of P0006; Type Traits Variable Templates.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254283 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b5599c682f58af1b5fe886988f2d7cc9782b0129","date":"2015-11-30T05:03:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bad macros in tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254284 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8254964ef0c218d5f3e5a7a59c83f081ee9bc510","date":"2015-11-30T05:04:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement more of P0006; Type Traits Variable Templates. <ratio>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c666b13c85e4e4938f2b2da0475e442226cc163e","date":"2015-11-30T05:04:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missing file from last commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c2fabf7f771add20d991468ba10a4e784a61fb9","date":"2015-11-30T05:10:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bad macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254287 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c180f34dd37c2473e103c71591b2f6f031fdfd37","date":"2015-11-30T05:15:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Temporarily disable new tests while I figure out what's going on\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254288 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea972908a3a82c0206f35446963ec53f759fa2c3","date":"2015-11-30T05:20:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bugs in alignment_of_v, etc. Re-enable the newly added tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254289 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3866e4c8904325b6bc2f5e4f1a357a521402171","date":"2015-11-30T05:39:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Last bit of P0006; mark it as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254290 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a846b11cd87b71f7f840f25301b13409da4179fe","date":"2015-12-03T18:52:54.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] If you're not installing the libcxx library, exclude it from the \"all\" target so it doesn't get built when you run \"ninja install\"\n\nThis is just a build dependency optimization. Running check-libcxx will still build libcxx and function as expected, it just removes libcxx from the all build and install targets.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254628 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5be047d3227afaf37f63734bc436f4e9054e0542","date":"2015-12-08T00:08:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Cleaned up the intro for the TS status page; really need much more info here\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@254971 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76d2446cf4a5e191221d41a44248892a9a6ab37c","date":"2015-12-09T22:03:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use __make_integer_seq builtin for std::make_integer_sequence. Patch by K-ballo.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"28c02db8d76d5b9b9874c8347b4697bec29595b6","date":"2015-12-09T22:32:36.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Add 3 more missing inline/visibility attributes.\n\nThese are the cases when an out-of-class definition of a method is\nmarked _LIBCPP_INLINE_VISIBILITY, but the in-class declaration is\nnot. This will start failing when (or if) we switch to\nattribute((internal_linkage)).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255166 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9b452384d48fcebd320e0f8dc9f367466cb2239f","date":"2015-12-09T23:42:30.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Remove visibility attributes from out-of-class method definitions in iostreams.\n\nNo point in pretending that these methods are hidden - they are\nactually exported from libc++.so. Extern template declarations make\nthem part of libc++ ABI.\n\nThis patch does not change libc++.so export list (at least on Linux).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255177 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbca1747903c431b68d15b68748170bc4276e148","date":"2015-12-10T00:43:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove redundant _LIBCPP_ALWAYS_INLINE attribute from __convert_to_integral overloads\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255185 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"563647a240b9997cb9e414cbb09c82f19f00c89b","date":"2015-12-10T00:45:18.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Replace cmake check for printf with a check for fopen.\n\nPrintf is a builtin, and the check fails with -Werror because of a clang\nwarning about an incompatible redeclaration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255187 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"633fe505fe109caa7a154d66fd534667a1a5e62e","date":"2015-12-14T17:34:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add add_lvalue_ref tests for a few function types, with a note why not more\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255513 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6621c525959c674557154885c488c5f3f1cba4b","date":"2015-12-14T18:01:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a corner case that involved calling rethrow_if_nested with a type that had a deleted operator&. Added a test to catch this as well. Thanks to Ville for the heads-up.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255517 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d18b496f7ecdffdb2d31089e521613ec30b9cffb","date":"2015-12-14T18:02:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed this on the previous (255517) commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255518 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90e328c27188af2f7b09b22bf243d77638bb824d","date":"2015-12-14T18:11:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"K-Ballo pointed out a mistake in the add_lvalue_ref tests I checked in; now more of them are passing. Thanks\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255519 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed99798624fcd2d645cc43126e9eea44ee682594","date":"2015-12-14T22:24:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update how libc++/libc++abi link the tests. Follow up on r255559.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255560 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8459d20624296cc7471adb605115fc06057591d2","date":"2015-12-14T22:26:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update paths in libc++ build instructions. Patch from Jonathan Anderson.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255561 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e39f4b996eb4b914a8ddbf446848c32c6e19d197","date":"2015-12-15T00:32:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix various GCC mis-configurations for newer versions.\n\nThis patch goes through and enables C++11 and C++14 features for newer GCC's.\nThe main changes are:\n\n1. Turn on variable templates. (Uses __cpp_variable_templates)\n2. Assert atomic<Tp> is trivially copyable (Uses _GNUC_VER >= 501).\n3. Turn on trailing return support for GCC. (Uses _GNUC_VER >= 404)\n4. XFAIL void_t test for GCC 5.1 and 5.2. Fixed in GCC 6.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ba21565bdc1b795949d7c5c581ccab027bfed41","date":"2015-12-15T01:41:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark declarations of externally instantiated functions as inline so GCC doesn't complain.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3d6b126d28805e36dfc78560f51ded1ddac8be6","date":"2015-12-15T22:16:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Enable noexcept for GCC 4.6 and greater\n\nSummary:\nThis patch allows GCC 4.6 and above to use `noexcept` as opposed to `throw()`. \n\nIs it an ABI safe change to suddenly switch on `noexcept`? I imagine it must be because it's disabled in w/ clang in C++03 but not C++11.\n\n\nReviewers: danalbert, jroelofs, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D15516\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255683 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0710b55e29a56d226b1cc4e0f70964a356aced9d","date":"2015-12-15T22:19:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unused _LIBCPP_HAS_NO_ALWAYS_INLINE_VARIADICS macro\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255686 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d6a12b386175326b8b8a904baa2f6f0e0655a4b0","date":"2015-12-16T00:35:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround nasty GCC bug that caused testsuite to hang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8f54c23967bfe6cef308ae5cadf3a36d29056da","date":"2015-12-16T00:53:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make noexcept specifications on __hash_table definitions match their declarations.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255738 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85df7a8775ed9f36a397c219ed24759981d71e69","date":"2015-12-16T23:41:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add CMake option LIBCXX_CONFIGURE_IDE to allow for other IDE's.\n\nCLion needs similar configuration changes as MSVC_IDE and XCODE.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255851 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"199bee0ea7750b8e96a25414c3c2a7b465336e36","date":"2015-12-18T00:36:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] LWG2485: get() should be overloaded for const tuple&&. Patch from K-Ballo.\n\nReview: http://reviews.llvm.org/D14839\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255941 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a6a9c08e403cd06acf2182266fa5998bc20c9ff","date":"2015-12-18T01:04:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix type in tuple test. Sorry for the noise\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@255944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bef1ff571eac57161f411cacc34a6794884af58","date":"2015-12-23T08:20:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix LWG Issue #2367 - Fixing std::tuple and std::pair's default constructors.\n\nSummary: This patch implements the solution for LWG Issue #2367. See http://cplusplus.github.io/LWG/lwg-active.html#2367\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13750\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"75ea3d368dce19161072e8d46f2d393a084117ff","date":"2015-12-29T22:21:38.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"[libcxx] Refactoring target_info.py\n\nThis patch makes it easier to support running the lit tests for new and\nunusual platforms. It will break existing users that set\nLIBCXX_TARGET_INFO to anything other than the default. I think this is\nfine, because the old LIBCXX_TARGET_INFO wasn't terribly useful.\n\nThe old way of supporting the different test platforms was to have\nconditional code scattered throughout config.py. New platforms would need\nto add conditionals there. Alternatively, the new platform could set\nno_default_flags to true, and reconstitue almost the entire compile and\nlink line, including things that don't vary across platforms.\n\nThe new way of supporting new platforms is to create a new target info\nclass, and have make_target_info return an instance of it. For platforms\nsupported in-tree, that will be done by modifying make_target_info. For\nout-of-tree platforms, users can set LIBCXX_TARGET_INFO at cmake configure\ntime.\n\nThe target info sub-classes can provide fine-grained information back to\nconfig.py. The hooks that will most commonly be provided will be\nadd_cxx_compile_flags and add_cxx_link_flags. These hooks can provide the\nplatform specific flags, while letting config.py handle all the invariant\nflags.\n\nTarget info hooks were added for each area that the existing config.py had\nplatform specific behavior. config.py is now mostly free of platform\nspecific conditionals.\n\nThis patch was tested on Linux x86_64. I both targeted Linux x86_64, and\nan out-of-tree platform with a custom target_info. In both cases I was\nable to run libcxx and libcxxabi tests. I do not have access to FreeBSD,\nDarwin, or Windows machines that are set up for lit testing.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256588 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"424a05ccfe87ecf65180eb4464a6cc5dc19cd7d7","date":"2015-12-29T22:43:17.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"[libcxx] Fixing the Linux sanitizer builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4273e31ebc6d3405da0de755e1149f53119103b1","date":"2015-12-29T22:55:55.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"[libcxx] Fixing silly mistake from last commit.\n\nTested on Linux x86_64 targeting Linux x86_64.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"41f24f93483baafc2ed6479104d73a5c177d57b5","date":"2015-12-29T23:01:07.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"[libcxx] Fixing the Mac / Darwin build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256594 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9cac661b46192c39a335fca2baa3631caf821e8","date":"2015-12-29T23:18:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG defect #2367 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256597 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c9141a0a27ee28f7489c188001ba554b9b70d1a","date":"2015-12-29T23:19:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failure in 32 bit mode\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44f2e41b5f4b86110211cc6916a560955f13a8f0","date":"2015-12-30T01:02:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup CMake for out-of-tree builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ce5695f263901d19b0491a9622ea1ff91557012d","date":"2015-12-30T03:39:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r256606 due to compiler-rt sanitizer bot failures\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1ece9c037d879843b0b0f5a2802e1e9d443b75a","date":"2015-12-30T04:45:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix locale feature testing in test suite.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256621 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c74b4853701d790547500969427e914bfb549db","date":"2015-12-30T20:57:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix for ALL undefined behavior in <list>.\n\nSummary:\nThis patch fixes std::list for builtin pointer types in the current ABI version and fixes std::list for all fancy pointer types in the next ABI version. The patch was designed to minimize the amount of code needed to support both ABI configurations. Currently only ~5 lines of code differ.\n\n\nReviewers: danalbert, jroelofs, mclow.lists\n\nSubscribers: dexonsmith, awi, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D12299\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256652 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5cf84e0425d3d93698b3bfab44ea22306ac01c16","date":"2015-12-30T21:52:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use __rebind_pointer to avoid #ifdef block\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256654 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e7bd4f7afb25e28f3653bede5bda3a801eff391","date":"2016-01-04T03:27:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unsafe \"__as_link()\" cast member function.\n\n\"__as_link()\" can only be used safely on \"__list_node\" objects. This patch\nmoves the \"__as_link()\" member function from \"__list_node_base\" to \"__list_node\"\nso it cannot be used incorrectly.\n\nUnsafe downcasts now use a non-member function so we don't defer the type-punned\npointer.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3e2a7180a53a0b730f61e02d20f62feae3728f4","date":"2016-01-04T03:54:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Print stacktrace with UBSAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2320439eb97e95978522b7c7e63fe3a56475ce9d","date":"2016-01-04T19:35:40.000Z","author":{"name":"Ahmed Bougacha","email":"ahmed.bougacha@gmail.com"},"message":"[libcxx] Fix typo in darwin target_info.py introduced by r256621.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3426a860395c079de81548e4af815f048170f7d3","date":"2016-01-05T19:32:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"First half of LWG#2354: 'Unnecessary copying when inserting into maps with braced-init syntax'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256859 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17a797c97d84c72a623f2aa1ce05e76b70f7d81b","date":"2016-01-05T19:44:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove some test scaffolding that I added and then didn't need. No functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256861 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7861de23d63626058f828d6e55caed8abbcf17ac","date":"2016-01-05T19:53:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add explicit include directives; the file was getting implicitly included already. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@256864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94fae86652f098f32f16c2609de971389913a6ab","date":"2016-01-07T02:36:09.000Z","author":{"name":"Ahmed Bougacha","email":"ahmed.bougacha@gmail.com"},"message":"[libcxx] Set LC_ALL rather than LC_COLLATE to override collation.\n\nr251131 replaced LANG with LC_COLLATE. But LC_ALL has precedence\nover both, so the test still fails when LC_ALL=C.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257018 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c7ee806f5c9862017b0f1659bb5aabc03f6a215","date":"2016-01-08T19:21:02.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Revert \"Remove visibility attributes from out-of-class method definitions in iostreams.\"\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257193 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a3731f82b60dd1a9483cd94c712a3a1cd2e87a4","date":"2016-01-11T19:27:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Preemptively disable unsigned integer sanitization in 32 and 64 bit versions of __murmur2_or_cityhash. This lets people use the unsigned integer overflow checker in UBSAN w/o getting hits from libc++'s hash code (where the unsigned integer overflow is legal and deliberate)> Patch by @danielaustin. Reviewed as: http://reviews.llvm.org/D15973\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257368 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"040a0340bfcdf885619845660c41d164326bee44","date":"2016-01-12T00:38:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Put the definition of _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK in the right place.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e5e9bff62a4ae030ca42d312dc73f03d9cf61c4e","date":"2016-01-12T14:51:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a bunch of missing includes in the test suite to make it more portable. Fixes bugs #26120 and #26121. Thanks to Jonathan Wakely for the reports and the patches.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257474 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f4a07d66af39b168b6e21f20593d5ef68898b10","date":"2016-01-12T19:15:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"One more missing std:: qualification from Jonathan\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257506 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2afbf71fddd4be29feaf29fb2c21f25a7657445b","date":"2016-01-13T16:32:00.000Z","author":{"name":"Dan Gohman","email":"dan433584@gmail.com"},"message":"[WebAssembly] Set std::numeric_limits's traps field for WebAssembly.\n\nWebAssembly's integer division instruction traps on division by zero; set the\ntraps field of integral std::numeric_limits to true.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b27535c0c362f958b9edd73ac170b11f54dd7256","date":"2016-01-13T17:33:21.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Update version to 3.9\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df9db31c27fb810154df1380d67ee131e7a42454","date":"2016-01-13T21:54:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#25973 : 'basic_string::assign(InputIt, InputIt) doesn't provide the strong exception safety guarantee'. This turned out to be a pervasive problem in <string>, which required a fair amount of rework. Add in an optimization for when iterators provide noexcept increment/comparison/assignment/dereference (which covers many of the iterators in libc++). Reviewed as http://reviews.llvm.org/D15862\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257682 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2dceed874d7cb03913b66c2fa0ae8de60c09a816","date":"2016-01-13T22:52:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix test for C++03 - lacking noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257696 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d9888365a7bc66b0aca783c638fcb2a23f6b965","date":"2016-01-13T23:05:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Better comments in test. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257702 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90a7bf91943e521cb6e56b50a9ec557ce8e089e7","date":"2016-01-13T23:27:08.000Z","author":{"name":"Jonathan Roelofs","email":"jonathan@codesourcery.com"},"message":"Tame a -Wunknown-attributes warning\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@257707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"685cdcaf9f8a710f5e03a00f6398d2de971569e8","date":"2016-01-19T00:50:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#26175. Thanks to Josh Petrie for the report and the patch. Reviewed as http://reviews.llvm.org/D16262\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3bf91abf621ac0d478ffa755e42657260f4a0ee","date":"2016-01-19T21:51:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark slow ASAN/MSAN tests as XFAIL for now.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa1e5db3bc5f3a1a730455c8100850248b94c1ec","date":"2016-01-19T21:52:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing license headers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258196 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9e91f30eea39e57e4d9cd0067f6a5f10a64c2eb","date":"2016-01-19T21:58:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add more missing license headers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258198 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c7fb8147ee03d0706d1ece529912eb0979cee37","date":"2016-01-19T23:06:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix enviroment variables when running shell scripts\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258217 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14a9008568fa6aeb88dada2c9edb086559a085e8","date":"2016-01-20T01:26:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add link to 3rd party GDB pretty-printers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258270 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85d4c2a93f15f5b200fa4c30a2c404c11d83fca8","date":"2016-01-20T03:19:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix up the tests I added for string exceptions to be skipped when exceptions are disabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258279 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8f31a1c14932186784f52db263b444ed1abb489","date":"2016-01-20T03:37:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Got the test backwards in r258279. Fixed that and de-tabbed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258281 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8b24c6d54b88559399175ab949ed9ed3fcc5777","date":"2016-01-20T04:59:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark some test XFAIL for GCC 4.9 due to missing is_trivial* traits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258287 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f90978aa1aa1b0fd959d66338976886105cae946","date":"2016-01-20T05:41:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More string fixes for noexcept cases. Apparently I didn't get them all in r258281.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258291 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2edcac4d3958d0096413bccfbd929b3257967fee","date":"2016-01-20T05:44:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use TEST_STD_VER instead of __has_feature to detect noexcept. This fixes the test with GCC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258292 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd17b3b1565a0b423387bb7254cc55265c901449","date":"2016-01-21T15:35:15.000Z","author":{"name":"Daniel Sanders","email":"daniel.sanders@imgtec.com"},"message":"[libcxx] Add appropriate 'REQUIRE' directives to tests that require en_US.UTF-8.\n\nReviewers: mclow.lists, hans\n\nSubscribers: bcraig, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16406\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a7960ff7f88e70e97cf8469d82286aec7eec5fe","date":"2016-01-21T18:22:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2101 'Some transformation types can produce impossible types'  Introduced a new (internal) type trait '__is_referenceable' with tests. Use that trait in add_lvalue_reference, add_rvalue_reference and add_pointer.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258418 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"219d4efd349eb8886c9e2eacabd67993de21f491","date":"2016-01-22T06:25:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add __uncvref type for use in later patches\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258491 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"95722353327803bb8aba3c380d0fcd6c79280c84","date":"2016-01-22T18:27:26.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"unordered: Rename __construct_node_hash() to allow forwarding, NFC\n\nRename the version of __construct_node() that takes a hash as an\nargument to __construct_node_hash(), and use perfect-forwarding when\nRvalue references are available.  The primary motivation is to allow\nother types through, since unordered_map's value_type is different from\n__hash_table's value_type -- a follow-up will take advantage of this --\nbut the rename is general \"goodness\".\n\nThere should be no functionality change here (aside from enabling the\nfollow-up).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258511 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f745c8696c509bc22f11d129441787511c0be7d","date":"2016-01-22T22:48:02.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"unordered_map: Reuse insert logic in emplace when possible, NFC\n\nAn upcoming commit will add an optimization to insert() that avoids\nunnecessary mallocs when we can safely extract the key type.  This\ncommit shares code between emplace() and insert():\n- if emplace() is given a single argument, and\n- value_type is constructible from that argument\nso that we have a single code path for the two.\n\nI also updated the debug version of emplace_hint() to defer to\nemplace(), like the non-debug version does.\n\nIn both cases, there should be NFC here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd86b70d14974ff8a37a83ff4484f1ea04075391","date":"2016-01-23T01:02:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix test to pass in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"005e38f9fb52079d97f648850371d0128aa6f789","date":"2016-01-23T15:12:47.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"Revert \"unordered_map: Reuse insert logic in emplace when possible, NFC\"\n\nThis reverts commit r258575.  EricWF sent me an email (no link since it\nwas off-list) requesting to review this pre-commit instead of\npost-commit.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73de880a446f1056e547e9b0c12722d746b48076","date":"2016-01-25T17:29:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2385; remove the allocator-aware std::function::assign call. It was useless, and didn't actually *do anything* with the allocator. Now it's gone.  On the off chance that someone is mistakenly calling it, it's only gone in C++1z\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e01f946792f28d55e56ab3e3d918903a3c934c55","date":"2016-01-26T20:24:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR26103 - Error calling is_convertible with incomplete type. Patch from Michael Daniels.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258852 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"949215c589cd5eabc2973b179d4c79f2bcbb5738","date":"2016-01-26T20:31:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove dead code missed in r258852.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258855 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de637db263d101b4fba360c75d0432a8e35c3e15","date":"2016-01-27T00:11:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix undefined behavior in forward_list\n\nSummary:\nThis patch is similar to the <list> fix but it has a few differences. This patch doesn't use a `__link_pointer` typedef because we don't need to change the linked list pointers because `forward_list` never stores a  `__forward_begin_node` in the linked list itself. \n\nThe issue with `forward_list` is that the iterators store pointers to `__forward_list_node` and not `__forward_begin_node`. This is incorrect because `before_begin()` and `cbefore_begin()` return iterators that point to a `__forward_begin_node`. This means we incorrectly downcast the `__forward_begin_node` pointer to a `__node_pointer`. This downcast itself is sometimes UB but it cannot be safely removed until ABI v2. The more common cause of UB is when we deference the downcast pointer. (for example `__ptr_->__next_`). This can be fixed without an ABI break by upcasting `__ptr_` before accessing it.\n\nThe fix is as follows:\n\n1. Introduce a `__iter_node_pointer` typedef that works  similar to `__link_pointer` in the last patch. In ABI v2 it is always a typedef for `__begin_node_pointer`.\n2. Change the `__before_begin()` method to return the correct pointer type (`__begin_node_pointer`),\n    Previously it incorrectly downcasted  the  `__forward_begin_node` to a `__node_pointer`  so it could be used to constructor the iterator types.\n3. Change `__forward_list_iterator` and `__forward_list_const_iterator`  in the following way:\n    1. Change `__node_pointer __ptr_;` member to  have the `__iter_node_pointer` type instead. \n    2. Add additional private constructors that accept `__begin_node_pointer` in addition to `__node_pointer` and then correctly cast them to the stored `__iter_node_pointer` type. \n    3. Add  `__get_begin()` and `__get_node_unchecked()` accessor methods that correctly cast `__ptr_` to the expected pointer type. `__get_begin()` is always safe to use and should be \n       preferred. `__get_node_unchecked()` can only be used on a deferencible iterator.\n4. Replace direct access to `__forward_list_iterator::__ptr_`  with the safe accessor methods.\n  \n\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D15836\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258888 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c778a6a924c7b427aa2a4794e445677355a98fc2","date":"2016-01-27T00:49:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix broken commit r258888. I missed adding two pointer conversions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258893 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"82091b205f1804b62e7cf593fce5fce8eabb670d","date":"2016-01-27T01:55:11.000Z","author":{"name":"Akira Hatanaka","email":"ahatanaka@apple.com"},"message":"[libcxx] Remove -Wpadded from buildit script.\n\nPer discussion with Eric and Joerg, this commit removes -Wpadded to\nsilence the warning about the padding inserted at the tail of struct\n_Rep_base.\n\nrdar://problem/23932550\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258900 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b8b88adef2ce7fb36efbdb8335610ae1a628b44","date":"2016-01-27T10:45:07.000Z","author":{"name":"Daniel Sanders","email":"daniel.sanders@imgtec.com"},"message":"[libcxx] Additional 'REQUIRE' directives for tests that require en_US.UTF-8.\n\nSummary:\nThese are the tests that didn't fail in the release candidate because they were\ncovered by another 'REQUIRES' directive.\n\nReviewers: mclow.lists, hans, bcraig, EricWF\n\nSubscribers: EricWF, dim, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16408\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@258920 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40a097dae9c0e0ae6626cb2c373692f38b897bfd","date":"2016-01-28T04:14:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"implement ostream_joiner. Reviewed as http://reviews.llvm.org/D16605\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259014 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8d4b4c26db2269848fe3b5402da0ee1f6b7e521","date":"2016-01-28T04:15:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Left a file out of r259014\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259015 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef67e427b580de24d06a3bc0a173ef5ddc1e2666","date":"2016-01-28T06:13:36.000Z","author":{"name":"Akira Hatanaka","email":"ahatanaka@apple.com"},"message":"[libcxx] Remove pragmas that were needed to suppress warnings produced\nby -Wpadded.\n\nWe don't need these pragmas anymore because -Wpadded was removed from\nbuildit in r258900.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259023 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f1188246e85eb6451961e8dc71d121be5ad8a04","date":"2016-01-28T13:49:33.000Z","author":{"name":"Daniel Sanders","email":"daniel.sanders@imgtec.com"},"message":"[libcxx] Work around for clang calling GAS after having already failed.\n\nSummary:\nThis is a workaround to a clang bug which causes libcxx tests to fail in the 3.8\nrelease. The clang bug is currently being investigated. It seems that clang\ndoes not stop after frontend errors when using -verify and -fno-integrated-as\n(or when this is the default). This patch adds -fsyntax-only to prevent GAS\nfrom being called, fixing the libcxx failures.\n\nPR26277\n\nPatch by Eric Fiselier\n\nReviewers: mclow.lists, hans, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16584\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259046 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5089530c838d78ac57d01bb79b3956e571d3554d","date":"2016-01-28T21:00:21.000Z","author":{"name":"Eugene Zelenko","email":"eugene.zelenko@gmail.com"},"message":"Remove autoconf support.\n\nDifferential revision: http://reviews.llvm.org/D16651\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8057a5853073d34cdc32ba0c148e4e964efc7bee","date":"2016-01-29T13:53:23.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"[libcxx] Whitelist inclusion of sysctl.h instead of blacklisting\n\nInstead of excluding all known operating systems that are not derived from BSD,\nI now include all operating systems that claim to be derived from BSD.\nHopefully, that will make it so that this check doesn't need to change for\nevery new operating system that comes along.\n\nhttp://reviews.llvm.org/D16634\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259193 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d118e3219bc20ed2a8d4383d3bd0423d1e1c3fb3","date":"2016-01-30T01:11:42.000Z","author":{"name":"Alexey Samsonov","email":"vonosmas@gmail.com"},"message":"[docs] Remove references to autoconf build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259281 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e784f5770f0dc2b452a66556ce1a321dab84b1f8","date":"2016-02-03T19:30:20.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"re.results.form: Format out-of-range subexpression references as null\n\nRather than crashing in match_results::format() when a reference to a\nmarked subexpression is out of range, format the subexpression as empty\n(i.e., replace it with an empty string).  Note that\nmatch_results::operator[]() has a range-check and returns a null match\nin this case, so this just re-uses that logic.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259682 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c35d862b373d00321776d1a4d95e14472edb43d7","date":"2016-02-04T23:17:20.000Z","author":{"name":"Niels Ole Salscheider","email":"niels_ole@salscheider-online.de"},"message":"Fix the search path for CMake files\n\nThis allows to find the LLVM's CMake files after moving them in\nr259821.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@259842 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf108ebe8c5fe33643145bec81d41548695d14a9","date":"2016-02-07T00:36:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup node-type handling in the unordered containers\n\nThis patch is the first in a series of patches that's meant to better\nsupport unordered_map. unordered_map has a special \"value_type\" that\ndiffers from pair<const Key, Value>. In order to meet the EmplaceConstructible\nand CopyInsertable requirements we need to teach __hash_table about this\nspecial value_type.\n\nThis patch creates a \"__hash_node_types\" traits class that contains\nall of the typedefs needed by the unordered containers and it's iterators.\nThese typedefs include ones for each node type and  node pointer type,\nas well as special typedefs for \"unordered_map\"'s value type.\n\nAs a result of this change all of the unordered containers now all support\nincomplete types.\n\nAs a drive-by fix I changed the difference_type in __hash_table to always\nbe ptrdiff_t. There is a corresponding change to size_type but it cannot\ntake affect until an ABI break.\n\nThis patch will be followed up shortly with fixes for various unordered_map\nfixes.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7adfa0328ff81d6c6be8be5dc721c8e1e63315e6","date":"2016-02-08T03:50:18.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: silence warnings in in-tree build\n\nAvoid the developer warnings from cmake when configuring libc++ as part of the\nLLVM layout.  Setup the custom macro paths earlier to re-use the detection logic\nprior to setting the project properties.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260071 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f3668d14234de1db4ab58615ed75e65f88bdb18","date":"2016-02-08T17:38:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Clean up a test; get rid of hard-wired char/wchar_t code for template fns that take any char type. Prep work for PR#26503\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260115 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"398588caf7ef32f060ae4c3e4b1c0a7212bf0b12","date":"2016-02-08T23:47:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r260012 due to __gnu_cxx::hash_map breakage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3adaaf5d71550c9dc17ddf49afc1dfc4c2ee280","date":"2016-02-09T04:05:37.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Use the reserved spellings for attributes\n\nChange the no_sanitize attribute to use the reserved spelling.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81b46a5bc6d9b31d7a2d3f27c71c8f1a8d0b8fb4","date":"2016-02-09T06:38:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Minor updates to failing tests. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260202 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b56fdea386329979efad5e047cb78fbde71e9fea","date":"2016-02-09T17:00:38.000Z","author":{"name":"Vasileios Kalintiris","email":"Vasileios.Kalintiris@imgtec.com"},"message":"Introduce a cmake module to figure out whether we need to link with libatomic.\n\nSummary:\nThis fixes the tests under std/atomics for 32-bit MIPS CPUs where the\n8-byte atomic operations call into the libatomic library.\n\nReviewers: dsanders, mclow.lists, EricWF, jroelofs, joerg\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16613\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260235 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1654db495f35d314734a2e8acd5ecedfbd47bf36","date":"2016-02-09T23:38:28.000Z","author":{"name":"Vasileios Kalintiris","email":"Vasileios.Kalintiris@imgtec.com"},"message":"Revert \"Introduce a cmake module to figure out whether we need to link with libatomic.\"\n\nThis reverts commit r260235. It breaks LLVM's bootstrap when building\nwith a -gcc-toolchain and the system's gcc installation does not provide\nthe libatomic library and its headers. We should check whether\nLIBCXX_GCC_TOOLCHAIN is set and adjust the flags accordingly.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4aa97130b8ba78944943cdd1e952b9b2ed1d423","date":"2016-02-10T00:59:02.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Fix overload sets of strchr, strpbrk, strrchr, memchr and strstr from\n<string.h> and wcschr, wcspbrk, wcsrchr, wmemchr, and wcsstr from <wchar.h> to\nprovide a const-correct overload set even when the underlying C library does\nnot.\n\nThis change adds a new macro, _LIBCPP_PREFERRED_OVERLOAD, which (if defined)\nspecifies that a given overload is a better match than an otherwise equally\ngood function declaration without the overload. This is implemented in modern\nversions of Clang via __attribute__((enable_if)), and not elsewhere.\n\nWe use this new macro to define overloads in the global namespace for these\nfunctions that displace the overloads provided by the C library, unless we\nbelieve the C library is already providing the correct signatures.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f8865b62c38f744c845389567eed0a98e8c88d97","date":"2016-02-10T13:47:25.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Limit catopen usage to unix-like OSes\n\nOperating systems that are not unix-like are unlikely to have access to\ncatopen. Instead of black-listing each one, we now filter out all non-unix\noperating systems first. We then exclude the unix-like operating systems\nthat don't have catopen. _WIN32 counts as a unix-like operating system\nbecause of cygwin.\n\nhttp://reviews.llvm.org/D16639\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"774c7c5ca8c3d224830bcd9a23c7d9ae52b91bcd","date":"2016-02-10T20:46:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit r260012 - Cleanup node-type handling in the unordered containers.\n\nThis time I kept <ext/hash_map> working!\n\nThis patch is the first in a series of patches that's meant to better\nsupport unordered_map. unordered_map has a special \"value_type\" that\ndiffers from pair<const Key, Value>. In order to meet the EmplaceConstructible\nand CopyInsertable requirements we need to teach __hash_table about this\nspecial value_type.\n\nThis patch creates a \"__hash_node_types\" traits class that contains\nall of the typedefs needed by the unordered containers and it's iterators.\nThese typedefs include ones for each node type and  node pointer type,\nas well as special typedefs for \"unordered_map\"'s value type.\n\nAs a result of this change all of the unordered containers now all support\nincomplete types.\n\nAs a drive-by fix I changed the difference_type in __hash_table to always\nbe ptrdiff_t. There is a corresponding change to size_type but it cannot\ntake affect until an ABI break.\n\nThis patch will be followed up shortly with fixes for various unordered_map\nbugs and problems.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260431 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45dca2c49511e7626fe1e2bd49a6c37f77cbd0bf","date":"2016-02-10T21:53:28.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Fix invalid casts in <functional>.\n\nstatic_cast of a pointer to object before the start of the object's\nlifetime has undefined behavior.\n\nThis code triggers CFI warnings.\n\nThis change replaces C-style casts with reinterpret_cast, which is\nfine per the standard, add applies an attribute to silence CFI (which\nbarks on reinterpret_cast, too).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260441 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7bec7e5729e95ee90bb4dbb3e0f4111f595d4e1c","date":"2016-02-10T21:58:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove changes that snuck in within r260431\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2960ae20e2173445e1e75b2aea81224f7c75d6a4","date":"2016-02-11T11:59:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Teach __hash_table how to handle unordered_map's __hash_value_type.\n\nThis patch is fairly large and contains a number of changes. The main change\nis teaching '__hash_table' how to handle '__hash_value_type'. Unfortunately\nthis change is a rampant layering violation, but it's required to make\nunordered_map conforming without re-writing all of __hash_table.\nAfter this change 'unordered_map' can delegate to '__hash_table' in almost all cases.\n\nThe major changes found in this patch are:\n\n  * Teach __hash_table to differentiate between the true container value type\n    and the node value type by introducing the \"__container_value_type\" and\n    \"__node_value_type\" typedefs. In the case of unordered_map '__container_value_type'\n    is 'pair<const Key, Value>' and '__node_value_type' is '__hash_value_type'.\n    \n  * Switch almost all overloads in '__hash_table' previously taking 'value_type'\n    (AKA '__node_value_type) to take  '__container_value_type' instead. Previously\n    'pair<K, V>' would be implicitly converted to '__hash_value_type<K, V>' because\n    of the function signature.\n    \n  * Add '__get_key', '__get_value', '__get_ptr', and '__move' static functions to\n    '__key_value_types'. These functions allow '__hash_table' to unwrap\n    '__node_value_type' objects into '__container_value_type' and its sub-parts.\n\n  * Pass  '__hash_value_type::__value_'  to 'a.construct(p, ...)' instead of\n    '__hash_value_type' itself. The C++14 standard requires that 'a.construct()'\n    and 'a.destroy()' are only ever instantiated for the containers value type.\n\n  * Remove '__hash_value_type's constructors and destructors. We should never\n    construct an instance of this type.\n    (TODO this is UB but we already do it in plenty of places).\n  \n  * Add a generic \"try-emplace\" function to '__hash_table' called\n    '__emplace_unique_key_args(Key const&, Args...)'.\n\n  \nThe following changes were done as cleanup:\n\n  * Introduce the '_LIBCPP_CXX03_LANG' macro to be used in place of\n    '_LIBCPP_HAS_NO_VARIADICS' or '_LIBCPP_HAS_NO_RVALUE_REFERENCE'.\n    \n  * Cleanup C++11 only overloads that assume an incomplete C++11 implementation.\n    For example this patch removes the __construct_node overloads that do\n    manual pack expansion.\n    \n  * Forward 'unordered_map::emplace' to '__hash_table' and remove dead code\n    resulting from the change. This includes almost all\n    'unordered_map::__construct_node' overloads.\n\n\nThe following changes are planed for future revisions:\n\n  * Fix LWG issue #2469 by delegating 'unordered_map::operator[]' to use\n    '__emplace_unique_key_args'.\n    \n  * Rewrite 'unordered_map::try_emplace' in terms of '__emplace_unique_key_args'.\n  \n  * Optimize '__emplace_unique' to call '__emplace_unique_key_args' when possible.\n    This prevent unneeded allocations when inserting duplicate entries.\n\n\nThe additional follow up work needed after this patch:\n\n  * Respect the lifetime rules for '__hash_value_type' by actually constructing it.\n  * Make '__insert_multi' act similar to '__insert_unique' for objects of type\n    'T&' and 'T const &&' with 'T = __container_value_type'.\n  \n  \n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260513 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba41d7e1ff83f1aff8ec58815b4147c97c7ced97","date":"2016-02-11T12:25:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Teach __hash_table how to handle unordered_map's __hash_value_type.\n\nThis patch is fairly large and contains a number of changes. The main change\nis teaching '__hash_table' how to handle '__hash_value_type'. Unfortunately\nthis change is a rampant layering violation, but it's required to make\nunordered_map conforming without re-writing all of __hash_table.\nAfter this change 'unordered_map' can delegate to '__hash_table' in almost all cases.\n\nThe major changes found in this patch are:\n\n  * Teach __hash_table to differentiate between the true container value type\n    and the node value type by introducing the \"__container_value_type\" and\n    \"__node_value_type\" typedefs. In the case of unordered_map '__container_value_type'\n    is 'pair<const Key, Value>' and '__node_value_type' is '__hash_value_type'.\n    \n  * Switch almost all overloads in '__hash_table' previously taking 'value_type'\n    (AKA '__node_value_type) to take  '__container_value_type' instead. Previously\n    'pair<K, V>' would be implicitly converted to '__hash_value_type<K, V>' because\n    of the function signature.\n    \n  * Add '__get_key', '__get_value', '__get_ptr', and '__move' static functions to\n    '__key_value_types'. These functions allow '__hash_table' to unwrap\n    '__node_value_type' objects into '__container_value_type' and its sub-parts.\n\n  * Pass  '__hash_value_type::__value_'  to 'a.construct(p, ...)' instead of\n    '__hash_value_type' itself. The C++14 standard requires that 'a.construct()'\n    and 'a.destroy()' are only ever instantiated for the containers value type.\n\n  * Remove '__hash_value_type's constructors and destructors. We should never\n    construct an instance of this type.\n    (TODO this is UB but we already do it in plenty of places).\n  \n  * Add a generic \"try-emplace\" function to '__hash_table' called\n    '__emplace_unique_key_args(Key const&, Args...)'.\n\n  \nThe following changes were done as cleanup:\n\n  * Introduce the '_LIBCPP_CXX03_LANG' macro to be used in place of\n    '_LIBCPP_HAS_NO_VARIADICS' or '_LIBCPP_HAS_NO_RVALUE_REFERENCE'.\n    \n  * Cleanup C++11 only overloads that assume an incomplete C++11 implementation.\n    For example this patch removes the __construct_node overloads that do\n    manual pack expansion.\n    \n  * Forward 'unordered_map::emplace' to '__hash_table' and remove dead code\n    resulting from the change. This includes almost all\n    'unordered_map::__construct_node' overloads.\n\n\nThe following changes are planed for future revisions:\n\n  * Fix LWG issue #2469 by delegating 'unordered_map::operator[]' to use\n    '__emplace_unique_key_args'.\n    \n  * Rewrite 'unordered_map::try_emplace' in terms of '__emplace_unique_key_args'.\n  \n  * Optimize '__emplace_unique' to call '__emplace_unique_key_args' when possible.\n    This prevent unneeded allocations when inserting duplicate entries.\n\n\nThe additional follow up work needed after this patch:\n\n  * Respect the lifetime rules for '__hash_value_type' by actually constructing it.\n  * Make '__insert_multi' act similar to '__insert_unique' for objects of type\n    'T&' and 'T const &&' with 'T = __container_value_type'.\n  \n  \n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260514 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb6641a497969a117b0b90c587c83a644b9548b0","date":"2016-02-11T12:43:04.000Z","author":{"name":"Vasileios Kalintiris","email":"Vasileios.Kalintiris@imgtec.com"},"message":"Re-commit \"Introduce a cmake module to figure out whether we need to link with libatomic.\"\n\nThis re-applies commit r260235. However, this time we add -gcc-toolchain\nto the compiler's flags when the user has specified the LIBCXX_GCC_TOOLCHAIN\nvariable.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260515 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"907ec4059e0e937fb620d47db10563047fc7ea91","date":"2016-02-11T12:51:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"separate nested >>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260516 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df694328f14bcf7aafeb86e57c3b6e4e3398f81a","date":"2016-02-11T15:05:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix r260515 - Correct typos in CMake changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260524 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e9f42e1382bef50f6773dffbe4c9ab04ce24df5","date":"2016-02-11T15:22:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Properly down-cast a sentinal node pointer through void*\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260526 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05d9fdf563b9a2abdde537d7e0555b879eba6aa9","date":"2016-02-11T15:23:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some tests to ensure that the __regex_word does not conflict with any of ctype_base's values.\nHopefully this will catch cases like https://llvm.org/bugs/show_bug.cgi?id=26476 in the future.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260527 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"629135a1d43637934ec5741ab4d125e0f37de5f4","date":"2016-02-11T15:52:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename CheckLibcxxAtomic.cmake variable result names so they don't clash with LLVM\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260531 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab4148260e6326b8c0360deb8ed07bf1d1917bd3","date":"2016-02-11T18:21:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r260514 because it has a bogus commit message.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260556 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35c6f011ac5fa3c4ce507681808b006d19087971","date":"2016-02-11T19:40:06.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Work around regression in glibc 2.22: request that glibc provides the correct\nprototypes for <string.h> functions that are converted into overload sets in\nC++. This matches the existing workaround in <wchar.h>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260570 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"410ed303baa8973a7418b8f40b2a3b45d4d48a98","date":"2016-02-11T21:45:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix LWG issue 2469 - Use piecewise construction in unordered_map::operator[].\n\nunordered_map's allocator may only be used to construct objects of 'value_type',\nor in this case 'pair<const Key, Value>'. In order to respect this requirement\nin operator[], which requires default constructing the 'mapped_type', we have\nto use pair's piecewise constructor with '(tuple<Kep>, tuple<>)'.\n\nUnfortunately we still need to provide a fallback implementation for C++03\nsince we don't have <tuple>. Even worse this fallback is the last remaining\nuser of '__hash_map_node_destructor' and '__construct_node_with_key'.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebe55fc655e3ac05e5e8f4881809cf5fc2edc5bf","date":"2016-02-11T23:51:02.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"Instead of asking glibc to provide correct C++ signatures for <string.h>\nfunctions, ask it whether it did provide them after the fact. Some versions of\nglibc fail to compile if you make this request and don't also claim to be at\nleast GCC 4.3.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260622 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fea3b21ea99a3d88af702f7236009276fc249cfd","date":"2016-02-16T14:15:27.000Z","author":{"name":"Vasileios Kalintiris","email":"Vasileios.Kalintiris@imgtec.com"},"message":"Issue a warning instead of fatal errors when checks for libatomic fail.\n\nThis should fix PR26631, PR26622 and has the nice property that the addition\nof the CheckLibcxxAtomic.cmake module acts as an NFC on the platforms of the\nreporters (at least for the time being).\n\nAs these bug reports explain, CMake fails the atomic check because the\ninclude headers might not exist in the host environment. We could\npotentially point to the headers provided by libcxx itself.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260961 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e4ed2fbbb9ba5eba6850e2827b4c62666080cc6","date":"2016-02-16T14:35:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added a (private) status page for the Jacksonville meeting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260964 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15312aa2650a1621dcb8bce37e9442dfc52cef14","date":"2016-02-16T14:42:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some comments\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62d5d1510348b31224330c9daa7e4d340a486285","date":"2016-02-16T16:05:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@260975 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7e87bc9c67c393c792a0e6bf82e84d9b00b4b169","date":"2016-02-17T13:16:31.000Z","author":{"name":"Daniel Sanders","email":"daniel.sanders@imgtec.com"},"message":"[libcxx] Fix definition of regex_traits::__regex_word on big-endian glibc systems\n\nSummary:\nOn glibc, the bits used for the various character classes is endian dependant\n(see _ISbit() in ctypes.h) but __regex_word does not account for this and uses\na spare bit that isn't spare on big-endian. On big-endian, it overlaps with the\nbit for graphic characters which causes '-', '@', etc. to be considered a word\ncharacter.\n\nFixed this by defining the value using _ISbit(15) on MIPS glibc systems. We've\nrestricted this to MIPS for now to avoid the risk of introducing failures in\nother targets.\n\nFixes PR26476.\n\nReviewers: hans, mclow.lists\n\nSubscribers: dsanders, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D17132\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261088 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0493d020fc4bb236b716765a0f08be7d8354fc88","date":"2016-02-18T00:20:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get <ext/hash_map> working again\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261180 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f978a88855e1a12cbeeaeb3d84a0458570ae53f","date":"2016-02-18T00:21:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Commit tests missing from r261180.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261181 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9aebc5f23d3007b76d55c257b8805dd5a8e28598","date":"2016-02-18T17:37:33.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Split locale management out of ibm/xlocale.h. NFCI\n\nThis is one part of many of a locale refactor. See\nhttp://reviews.llvm.org/D17146 for an idea of where this is going.\n\nFor the locale refactor, the locale management functions (newlocale,\nfreelocale, uselocale) are needed in a separate header from the various _l\nfunctions. This is because some platforms implement the _l functions in terms\nof a locale switcher RAII helper, and the locale switcher RAII helper needs\nthe locale management functions. This patch helps pave the way by getting all\nthe functions in the right files, so that later diffs aren't completely\nhorrible.\n\nUnfortunately, I have no access to an AIX machine to build with, so this change\nhas been made blind. Also, the original author (Xing Xue) does not appear to\nhave a Phabricator account.\n\nReviewed: http://reviews.llvm.org/D17380\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261230 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48fcc78492e915370fb39b5800d8d9a2e35f6909","date":"2016-02-18T17:40:16.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Split locale management out of newlib/xlocale.h. NFCI\n\nThis is one part of many of a locale refactor. See\nhttp://reviews.llvm.org/D17146 for an idea of where this is going.\n\nFor the locale refactor, the locale management functions (newlocale,\nfreelocale, uselocale) are needed in a separate header from the various _l\nfunctions. This is because some platforms implement the _l functions in terms\nof a locale switcher RAII helper, and the locale switcher RAII helper needs\nthe locale management functions. This patch helps pave the way by getting all\nthe functions in the right files, so that later diffs aren't completely\nhorrible.\n\nThe \"do-nothing\" / \"nop\" locale functions are also useful on their own for\nother lightweight platforms. Putting these nop implementations in\nsupport/xlocale should enable code sharing.\n\nUnfortunately, I have no access to a newlib system to build and test with, so\nthis change has been made blind.\n\nReviewed: http://reviews.llvm.org/D17382\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261231 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6918a0973b0126fa7253eecbf655e7d01a85f0f9","date":"2016-02-20T00:16:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add stdbool.h wrapper for libc++\n\nSummary:\nAccording to the C++ standard <stdbool.h> isn't allowed to define `true` `false` or `bool`. However these macros are sometimes defined by the compilers `stdbool.h`.\n\nClang defines the macros whenever `__STRICT_ANSI__` isn't defined (ie `-std=gnu++11`).\nNew GCC versions define the macros in C++03 mode only, older GCC versions (4.9 and before) always define the macros.\n\nThis patch adds a wrapper header for `stdbool.h` that undefs the required macros.\n\nReviewers: mclow.lists, rsmith, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16346\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3792285ed48c8ee0e877b763b983093d656913a","date":"2016-02-20T00:19:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make __wrap_iter work with GCC again\n\nSummary:\nThis bug was originally fixed in http://reviews.llvm.org/D7201. \n\nHowever it was broken again by the fix to https://llvm.org/bugs/show_bug.cgi?id=22605.\n\nThis patch re-fixes __wrap_iter with GCC by providing a forward declaration of <vector> before the friend declaration in __wrap_iter.\nThis patch avoids the issues in PR22605 by putting canonical forward declarations in <iosfwd> and including <iosfwd> in <vector>.\n\n<iosfwd> was chosen as the canonical forward declaration headers for the following reasons:\n\n1. `<iosfwd>` is small with almost no dependancies.\n2. It already forward declares `std::allocator`\n3. It is already included in `<iterator>` which we need to fix the GCC bug.\n\nThis patch fixes the test \"gcc_workaround.pass.cpp\"\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D16345\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"100ce64c6d294048fc1c2c0ff59362ac1f440ad5","date":"2016-02-20T00:24:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR26622 - Make CheckLibcxxAtomic.cmake use the libc++ headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d47d3590cab2b49ebc93c3ac370897bf24befcd2","date":"2016-02-20T01:11:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around GCC bug in .fail.cpp tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55263484af32fca58300eb14107a36fc40c80ce1","date":"2016-02-20T05:28:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup node-type handling in the associative containers.\n\nThis patch is very similar to r260431.\n\nThis patch is the first in a series of patches that's meant to better\nsupport map. map has a special \"value_type\" that\ndiffers from pair<const Key, Value>. In order to meet the EmplaceConstructible\nand CopyInsertable requirements we need to teach __tree about this\nspecial value_type.\n\nThis patch creates a \"__tree_node_types\" traits class that contains\nall of the typedefs needed by the associative containers and their iterators.\nThese typedefs include ones for each node type and  node pointer type,\nas well as special typedefs for \"map\"'s value type.\n\nAlthough the associative containers already supported incomplete types, this\npatch makes it official by adding tests.\n\nThis patch will be followed up shortly with various cleanups within __tree and\nfixes for various map bugs and problems.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261416 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"227b47c2929bc9ff8383dbc8da27f7d5c086b1e2","date":"2016-02-20T07:12:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove all usages of \"const\" node pointer typedefs in the assoc containers.\n\nThe \"const\" pointer typedefs such as \"__node_const_pointer\" and\n\"__node_base_const_pointer\" are identical to their non-const pointer types.\nThis patch changes all usages of \"const\" pointer type names to their respective\nnon-const typedef.\n\nSince \"fancy pointers to const\" cannot be converted back to a non-const pointer\ntype according to the allocator requirements it is important that we never\nactually use \"const\" pointers.\n\nFurthermore since \"__node_const_pointer\" and \"__node_pointer\" already\nname the same type, it's very confusing to use both names. Especially\nwhen defining const/non-const overloads for member functions.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261419 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66e344fa9beb32b496a58eccce38456479dccb10","date":"2016-02-20T07:59:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename <__hash_table> traits so they don't conflict with similar traits.\n\nIn particular <__tree> defines many of the same types of traits classes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261421 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d812865ec051fe38a4241da6a6719ec10072efd3","date":"2016-02-22T22:13:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix __is_referenceable to work with vector types. Fixes PR#26654 and 26656. Thanks to Evgeniy for the reports, and to Eric for the suggestion on how to fix it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d052c6867188eaf8ae29766115564b13420d3d90","date":"2016-02-23T16:20:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More updates; patch for 2583 ready\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261647 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"20fefa6b3a771eaa52e935095792340697be4081","date":"2016-02-23T16:25:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add additional tests to ensure that we DTRT with short lists. This is LWG#2590, but there are no code changes, just additional tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261648 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c310174934add8fa7f42ebd76ff45455b53f2b4b","date":"2016-02-23T17:01:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests for LWG#2560. No code changes, just tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261653 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"54b5f6f132fce57db329cbcfb1b8b683811c98eb","date":"2016-02-23T17:07:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More updates\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261655 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4abce578abdd5ac4bf406f6e0abadaaab1220c5","date":"2016-02-23T18:09:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"These new tests fail on the green-dragon bots, which use an old Apple compiler.\nSince they're scheduled to be updated soon, we'll just comment out this test for\nthe moment, and re-commit when the bots are updated.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261661 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"435ccb367d5310ceac8f58553f31dbfb9004a547","date":"2016-02-23T19:48:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"More updates\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261676 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f0903b78de1ea858d7846a0b818e5d2fa956457","date":"2016-02-23T19:48:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a missing closing tag\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261677 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5425ba06f6aebbf78060f0ca3b856187c6c20568","date":"2016-02-25T15:25:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add test to ensure that the converting constructor in N4089 is present and working\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261874 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17a80bc8b6f492f4aeebf6e83386ecb91bcc9ca1","date":"2016-02-25T15:27:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"No, really - test the constructor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261875 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"61d4dd0390570ed1e37ced76613fa3259276cd96","date":"2016-02-25T16:50:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Another chunk of N4089\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261894 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"716030e588a0572f02274d15c1c8ae5dd6a1b387","date":"2016-02-25T16:55:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update the status of a N4089 and a couple issues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261896 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7490f53118156f446b61583b7f0af0847b5942d7","date":"2016-02-25T20:15:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added tests to make sure that the categorization traits work on incomplete types\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261925 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72cb14cff6d177b4b057f468d0b126787cd51d13","date":"2016-02-25T20:17:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"more status updates\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@261926 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4951a48a6a8d7fb815b96f2f9ba9276877198c24","date":"2016-03-03T12:04:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for PR26812: possible overflow issue in std::allocator::allocate\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262610 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7c4c77c26431a3c6fecfc41514327df23b41073","date":"2016-03-05T14:22:02.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: fix typo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262771 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60d223df071f6e3d4ffa29331ed466fff563096f","date":"2016-03-06T17:45:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update with work items passed in Jacksonville\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262807 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d48d9b2cc39c943419308a410f55a09190de32b","date":"2016-03-07T21:57:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"non-member swap for array was mistakenly taking const ref params. Fixed and added test. Thanks to Ben Craig for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262866 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e0808efb8c19765ee86e950a8a6e340c5565c89","date":"2016-03-07T22:43:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0025R0: 'An algorithm to clamp a value between a pair of boundary values' for C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262871 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6d6b51b634d0b4da46f1b24270ef6d9591c95c9","date":"2016-03-08T15:12:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0253R1: Fixing a design mistake in the searchers interface.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262928 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f532a70b63fc3ede67ba4401390b64c71c994b4b","date":"2016-03-08T15:44:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0272R1: Give 'std::string' a non-const '.data()' member function\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262931 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee208ca37814e37da0081a4c095d9212dfcd62dd","date":"2016-03-08T15:45:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove a couple tabs that crept in\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@262932 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd556585b21de3ea0a1a70077b8d6ad61b9431df","date":"2016-03-09T15:39:39.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Reorganize _LIBCPP_LOCALE__L_EXTENSIONS\n\nInstead of checking _LIBCPP_LOCALE_L_EXTENSIONS all over, instead check it\nonce, and define the various *_l symbols once. The private redirector symbol\nnames are all prefixed with _libcpp_* so that they won't conflict with user\nsymbols, and so they won't conflict with future C library symbols. In\nparticular, glibc likes providing private symbols such as __locale_t, so we\nshould follow a different naming pattern (like _libcpp_*) to avoid problems\non that front.\n\nTested on Linux with glibc. Hoping for the best on OSX and the various BSDs.\n\nhttp://reviews.llvm.org/D17456\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263016 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"218742520303ae0c69c5cce195f39f05110af4e1","date":"2016-03-09T15:49:59.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Split locale management out of locale_win32. NFCI\n\nFor the locale refactor, the locale management functions (newlocale,\nfreelocale, uselocale) are needed in a separate header from the various _l\nfunctions. This is because some platforms implement the _l functions in terms\nof a locale switcher RAII helper, and the locale switcher RAII helper needs\nthe locale management functions. This patch helps pave the way by getting all\nthe functions in the right files, so that later diffs aren't completely\nhorrible.\n\nUnfortunately, the Windows, Cygwin, and MinGW builds seemed to have\nbit-rotted, so I wasn't able to test this completely. I don't think I made\nthings any worse than they already are though.\n\nhttp://reviews.llvm.org/D17419\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263020 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7d1bda0f46b192374a3c4ba89e83fe69dcaaee1","date":"2016-03-09T17:19:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some more tests for the containers type requirements\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff0b9f57498a1d7da7cf75ca8a241953b4f95d14","date":"2016-03-09T17:51:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2583: There is no way to supply an allocator for basic_string(str, pos)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263036 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f40ec90389825e867392dbef3f139a276ff5d47b","date":"2016-03-09T18:08:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2579: Inconsistency wrt Allocators in basic_string assignment vs. basic_string::assign\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263042 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3f5b39348b96a4cf6244b80431d2bf47a3ac3ca","date":"2016-03-09T18:09:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status to mark 2579 complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263043 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fadd1db57355d63df5c54f6c1508c2bc9aaaad6f","date":"2016-03-11T15:26:06.000Z","author":{"name":"Nico Weber","email":"nicolasweber@gmx.de"},"message":"Revert r263036, it's ABI-breaking.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263246 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fe62cded3a7ab806a1d17f6aed34bbe22a20acf","date":"2016-03-11T23:50:57.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Disable CFI checks in std::addressof.\n\nstd::addressof may be used on a storage of an object before the start\nof its lifetime (see std::allocate_shared for example). CFI flags the\nC-style cast as invalid in that case.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8b9e0bbfffefaa615502d41e2c6d5364fe844ab","date":"2016-03-14T02:51:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark exception-throwing test as XFAIL when exceptions are disabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263405 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed77ffbc4d76a227627af5d17056b0726315f235","date":"2016-03-14T17:58:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2566: Requirements on the first template parameter of container adaptors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263450 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd2d68075386a54a2005ef9a83b033c26f5dfad4","date":"2016-03-14T17:58:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add failing tests that I forgot to add to the last commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e22d9e58d37732c9404fbe41ee0faa02db459f45","date":"2016-03-14T23:07:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2577: {shared,unique}_lock</tt> should use std::addressof\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263506 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d124b5b45d355fa717336c4378a88539b8b2e075","date":"2016-03-14T23:07:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed this file in previous checkin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263507 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"36146819955b154dbcaaa3443d615b2620e8fec7","date":"2016-03-15T15:55:58.000Z","author":{"name":"Jonas Hahnfeld","email":"Hahnfeld@itc.rwth-aachen.de"},"message":"[libcxx] Remove localization tests for Russian month names\n\nCommit f49839299a085505eb673544744b61d2d9cdd1db in glibc-2.14 changed the\nlocales to the currently required format. However, they were again changed in\ncommit 55bdd2866f23b28422d969060b3518909a12b100 which has been released in 2.17.\n\nThat leads to the current situation where Debian and e.g. CentOS 6 have the\npre-2.14 locales, for example Ubuntu 14.04 has pre-2.17 and CentOS 7 on the\nother hand has the newest locales in glibc-2.17.\n\nDifferential Revision: http://reviews.llvm.org/D18187\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263554 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a15e8c3a182f38bb1f64a8ba0f615ab422a025e6","date":"2016-03-16T02:30:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add clang thread safety annotations to mutex and lock_guard. Patch by jamesr@google.com.\n\nThis adds clang thread safety annotations to std::mutex and\nstd::lock_guard so code using these types can use these types directly\ninstead of having to wrap the types to provide annotations. These checks\nwhen enabled by -Wthread-safety provide simple but useful static\nchecking to detect potential race conditions.\nSee http://clang.llvm.org/docs/ThreadSafetyAnalysis.html for details.\n\nThis patch was reviewed in http://reviews.llvm.org/D14731.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263611 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b15aee1a1a03053feda29e4703bba2f55bbce43","date":"2016-03-16T20:32:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add __unconstref for future use\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263659 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"735026e3eeb9cd6aa018db7f96ea47338c628365","date":"2016-03-17T03:30:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make std::addressof constexpr in C++17 (Clang only).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263688 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"798ec8436de05f4422d20b7c5d24f797136cc470","date":"2016-03-17T20:45:20.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"unord: Extract key to avoid preemptive mallocs in insert/emplace\n\nunordered_set::emplace and unordered_map::emplace construct a node, then\ntry to insert it.  If insertion fails, the node gets deleted.\n\nTo avoid this unnecessary malloc traffic, check to see if the argument\nto emplace has the appropriate key_type.  If so, we can use that key\ndirectly and delay the malloc until we're sure we're inserting something\nnew.\n\nTest updates by Eric Fiselier, who rewrote the old allocation tests to\ninclude the new cases.\n\nThere are two orthogonal future directions:\n\n1. Apply the same optimization to set and map.\n\n2. Extend the optimization to when the argument is not key_type, but can\n   be converted to it without side effects.  Ideally, we could do this\n   whenever key_type is trivially destructible and the argument is\n   trivially convertible to key_type, but in practise the relevant type\n   traits \"blow up sometimes\".  At least, we should catch a few simple\n   cases (such as when both are primitive types).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4c51222b28059eb3b3169ebcdeb6d9629e979ec2","date":"2016-03-18T17:48:58.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"Missing ATOMIC_*_LOCK_FREE tests\n\nForked from D17951, these tests should have been there but weren't.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@263798 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"037efda0aca532bfbc0c15ca7503ded40161df42","date":"2016-03-23T21:04:11.000Z","author":{"name":"Richard Barton","email":"richard.barton@arm.com"},"message":"Guard a number of tests relying on threads support when built in\nsingle-threaded mode.\n\nDifferential Revision: http://reviews.llvm.org/D14731\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@264191 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08511cda390e0057ca3ffaf193aeeb5ce74262fc","date":"2016-03-25T15:48:21.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"Implement is_always_lock_free\n\nSummary:\n\nThis was voted into C++17 at the Jacksonville meeting. The final P0152R1\npaper will be in the upcoming post-Jacksonville mailing, and is also\navailable here:\n\n  http://jfbastien.github.io/papers/P0152R1.html\n\nReviewers: mclow.lists, rsmith\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D17951\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@264413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7931f9d925e56c9a8c03ef9ab5e98772de0816c","date":"2016-03-30T22:39:53.000Z","author":{"name":"Paul Robinson","email":"paul_robinson@playstation.sony.com"},"message":"Update copyright year to 2016.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@264950 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21f3b4ca4203407472317a36544bdce33f74398b","date":"2016-03-31T02:13:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update container_test_types.h and cleanup the related tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@264985 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db21506d1305082361d03b73a0fdfec35751d40c","date":"2016-03-31T02:15:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Teach __tree how to handle map's __value_type\n\nThis patch is fairly large and contains a number of changes. The changes all work towards\nallowing __tree to properly handle __value_type esspecially when inserting into the __tree.\nI chose not to break this change into smaller patches because it wouldn't be possible to\nwrite meaningful standard-compliant tests for each patch.\n\nIt is very similar to r260513 \"[libcxx] Teach __hash_table how to handle unordered_map's __hash_value_type\".\n\nChanges in <map>\n * Remove __value_type's constructors because it should never be constructed directly.\n\n * Make map::emplace and multimap::emplace forward to __tree and remove the old definitions\n\n * Remove \"__construct_node\" map and multimap member functions. Almost all of the construction is done within __tree.\n\n * Fix map's move constructor to access \"__value_type.__nc\" directly and pass this object to __tree::insert.\n\nChanges in <__tree>\n * Add traits to detect, handle, and unwrap, map's \"__value_type\".\n\n * Convert methods taking \"value_type\" to take \"__container_value_type\" instead. Previously these methods caused\n  unwanted implicit conversions from \"std::pair<Key, Value>\" to \"__value_type<Key, Value>\".\n\n * Delete __tree_node and __tree_node_base's constructors and assignment operators. The node types should never be constructed\n   because the \"__value_\" member of __tree_node must be constructed directly by the allocator.\n\n * Make the __tree_node_destructor class and \"__construct_node\" methods unwrap \"__node_value_type\" into \"__container_value_type\" before invoking the allocator. The user's allocator can only be used to construct and destroy the container's value_type. Passing it map's \"__value_type\" was incorrect.\n\n * Cleanup the \"__insert\" and \"__emplace\" methods. Have __insert forward to an __emplace function wherever possible to reduce\n   code duplication. __insert_unique(value_type const&) and __insert_unique(value_type&&) forward to __emplace_unique_key_args.\n   These functions will not allocate a new node if the value is already in the tree.\n\n * Change the __find* functions to take the \"key_type\" directly instead of passing in \"value_type\" and unwrapping the key later.\n   This change allows the find functions to be used without having to construct a \"value_type\" first. This allows for a number\n   of optimizations.\n\n * Teach __move_assign and __assign_multi methods to unwrap map's __value_type.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@264986 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2864678e0e4d2a63125cf40cf4bce67d597e8df","date":"2016-03-31T03:13:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix LWG issue 2469 - Use piecewise construction in map::operator[].\n\nmap's allocator may only be used to construct objects of 'value_type',\nor in this case 'pair<const Key, Value>'. In order to respect this requirement\nin operator[], which requires default constructing the 'mapped_type', we have\nto use pair's piecewise constructor with '(tuple<Kep>, tuple<>)'.\n\nUnfortunately we still need to provide a fallback implementation for C++03\nsince we don't have <tuple>. Even worse this fallback is the last remaining\nuser of '__hash_map_node_destructor' and '__construct_node_with_key'.\n\nThis patch also switches try_emplace over to __tree.__emplace_unique_key_args.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@264989 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a27781113c538527cc6798481ceaadb62286a55b","date":"2016-04-04T16:08:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix for Bug #27193; 'std::acos on complex does not agree with C'. Tests need work; so the bug will stay open.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265306 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f9110c96105adb9c32ed79855d5cb00b53bfb72","date":"2016-04-04T22:49:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Put back the undefs that Richard removed. Boost won't build w/o these; specifically the file 'bytes_methods.h' in Apple's python framework defines these.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265358 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32c9099aacbbf387827649bbe324e160b89cdd41","date":"2016-04-04T23:23:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove unused internal routines. No functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265363 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"005c60b6662440b1ea9d2ab7505948e2bfc87fe0","date":"2016-04-07T14:20:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug #27260 - add missing swap(reference, reference) to vector<bool>.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265672 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56a0a437b7685fe2e43e89149f4f2f9447a6b17a","date":"2016-04-07T14:24:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added a noexcept test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265674 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4f7d8fc96c1db08f34a5f972fd037b321048d58","date":"2016-04-07T18:13:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Recommit r263036 with additional inlining, so that it will continue to work with existing system dylibs. Implements LWG#2583\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265706 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"547d4a0764e3540c4a08eb548dc665fb56d27bcf","date":"2016-04-08T21:52:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update filesystem status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265856 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dca800cd0f088d275acb9a33e34a840425cc8549","date":"2016-04-11T03:54:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#680, which was missed lo these many moons ago, and was reported as bug #27259. As a drive-by fix, replace the hand-rolled equivalent to addressof in __wrap_iter with the real thing.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@265914 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8165249d390e0d524fa500db9014bcebff0c902c","date":"2016-04-13T17:02:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Qualify calls to addressof to avoid getting ADL. Fixes PR#27254.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266209 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55ad3ac786aba5b56d706c7528278dbe08c28928","date":"2016-04-15T03:29:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Remove the \"reduced-arity-initialization\" extension from the uses-allocator constructors\n\nSummary:\nA default uses-allocator constructor has been added since that overload was previously provided by the extended constructor.\n\nSince Clang does implicit conversion checking after substitution this constructor has to deduce the allocator_arg_t parameter so that it can prevent the evaluation of \"is_default_constructible\" if the first argument doesn't match. See http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1391 for more information.\n\nThis patch fixes PR24779 (https://llvm.org/bugs/show_bug.cgi?id=24779)\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D19006\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266409 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5019333fa151ae69a22a24665c5cd70ddf05c4a","date":"2016-04-15T18:05:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup and guard tuple's constructor SFINAE.  Fixes PR22806 and PR23256.\n\nThere are two main fixes in this patch.\n\nFirst the constructor SFINAE was changed so that it's evaluated in two stages\nwhere the first stage evaluates the \"safe\" SFINAE conditions and the second\nevaluates the \"dangerous\" ones. The key is that the second stage is lazily\nevaluated only if the first stage passes. This helps fix PR23256\n(https://llvm.org/bugs/show_bug.cgi?id=23256).\n\nThe second fix is for PR22806 and LWG issue 2549. This fix applies\nthe suggested resolution to the LWG issue in order to prevent the construction\nof dangling references. The SFINAE for this check is contained within\nthe _PreferTupleLikeConstructor alias template. The tuple-like constructors\nare disabled whenever that trait returns false.\n\n(https://llvm.org/bugs/show_bug.cgi?id=22806)\n(http://cplusplus.github.io/LWG/lwg-active.html#2549)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83c9dc1714706857432f729ef355b326a6c89f6f","date":"2016-04-15T23:27:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Extract key to avoid preemptive mallocs in insert/emplace in associative containers\n\nSummary: This patch applies Duncan's work on __hash_table to __tree.\n\nReviewers: mclow.lists, dexonsmith\n\nSubscribers: dexonsmith, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D18637\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266491 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dc414cd8ca6ee154fbdc4231aa51d98448712695","date":"2016-04-16T00:23:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Teach map/unordered_map how to optimize 'emplace(Key, T)'.\n\nIn cases where emplace is called with two arguments and the first one\nmatches the key_type we can Key to check for duplicates before allocating.\n\nThis patch expands on work done by dexonsmith@apple.com.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266498 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91a156579e4f420209c61533b125a976e19098fa","date":"2016-04-18T01:40:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix LWG issue 2345 - Add insert(value_type&&)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c325f3dccfaef07761c5e30b94a15bed74ca3e6a","date":"2016-04-18T02:31:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for LWG issue 2361\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266586 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b952822a48d85234001010d6f20d717bd403525b","date":"2016-04-18T02:54:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add hash specializations for __int128_t. Fixes LWG issue 2119\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266587 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"134ff65b8f35f3b9b95e4474a866eec86e0f6552","date":"2016-04-18T06:17:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG issue 2219 - support reference_wrapper in INVOKE\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266590 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2e37f92b52a2dcd785414b5409741ee1d365fc9c","date":"2016-04-18T06:51:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2469 as done. Also simplify try_emplace and insert_or_assign implementations in unordered_map\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13509276280f0db9cfc5918a1b8dae8bfddfa348","date":"2016-04-18T06:58:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark P0152R1 as complete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"95526d31cb9688f74106a58a9e8b5d1f663fcf5a","date":"2016-04-19T01:19:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make tuples constructors conditionally EXPLICIT. See N4387\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"611ab2b4628893741cdc9106cad15e988742e3d4","date":"2016-04-19T12:49:05.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Framework to allow testing of static libc++abi\n\nThese changes make linking against static libraries more explicit. Instead\nof using -lc++ and -lc++abi in the tests, an absolute path to the library is\nprovided instead.\n\nThe choices of shared vs. static, and the choices of library paths for both\nlibcxx and libcxxabi needed to be exchanged for this to work. In other words,\nlibcxx tests need to know the library path of libcxxabi, and whether libcxxabi\nis a static or shared library.\n\nSome Mac specific logic for testing against libc++abi had to be moved from\nlibcxxabi's config.py, as it was overriding choices made in libcxx's config.py.\nThat logic is now in libcxx's target_info.py.\n\nTesting a static libcxx on Linux will now automatically link in librt most of\nthe time. Previously, lots of pthread tests would fail because of an\nunresolved clock_gettime.\n\nhttp://reviews.llvm.org/D16544\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266730 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d59d416bc9439258e1dfdb8d7ffeb631bbb23572","date":"2016-04-19T20:13:55.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Include initializer_list from utility\n\nThe C++11 and C++14 standards both say in the header <utility> synopsis that\n<utility> shall include <initializer_list>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266808 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c6f00d61635d307194642e7f6f116ad967a7e27","date":"2016-04-19T21:07:30.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"XFAILing new test on C++03\n\ninitializer_list doesn't exist in C++03.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266820 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d5cbd7ce2e9500dd56588f65cace811b7444bb9","date":"2016-04-20T00:14:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add 'is_callable' and 'is_nothrow_callable' traits and cleanup INVOKE.\n\nThe primary purpose of this patch is to add the 'is_callable' traits.\nSince 'is_nothrow_callable' required making 'INVOKE' conditionally noexcept\nI also took this oppertunity to implement a constexpr version of INVOKE.\nThis fixes 'std::experimental::apply' which required constexpr 'INVOKE support'.\n\nThis patch will be followed up with some cleanup. Primarly removing most\nof \"__member_function_traits\" since it's no longer used by INVOKE (in C++11 at least).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e94c1aee2bef8ee8671d56160e2c27f9704646ae","date":"2016-04-20T02:21:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix PR15638 - Only allocate in parent when starting a thread to prevent calling terminate.\n\nSummary:\nHi,\n\nWhen creating a new thread libc++ performs at least 2 allocations. The first allocates a tuple of args and the functor that will be passed to the new thread. The second allocation is for the thread local storage needed internally by libc++. Currently the second allocation happens in the child thread, meaning that if it throws the program will terminate with an uncaught bad alloc.\n\nThe solution to this is to allocate ALL memory in the parent thread and then pass it to the child.\n\nSee https://llvm.org/bugs/show_bug.cgi?id=15638\n\nReviewers: mclow.lists, danalbert, jroelofs, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D13748\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266851 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf4550d351a2db5ed8e44d1e58274365a7853b09","date":"2016-04-20T04:17:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add cxx_runtime_root options for testing against a different libc++ at runtime\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266855 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"994fb967d327d182eccff4d55c6771e427d80371","date":"2016-04-21T05:28:18.000Z","author":{"name":"Weiming Zhao","email":"weimingz@codeaurora.org"},"message":"[libc++] fix macro redef warning when exception is disabled\n\nSummary:\n when setting LIBCXX_ENABLE_EXCEPTIONS=false, _LIBCPP_NO_EXCEPTIONS wil be defined in both commandline and _config\n\nReviewers: bcraig, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D19344\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@266956 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"566bcb4badb37b8af790d8b09ef71fb8b9d82026","date":"2016-04-21T22:54:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix most GCC attribute ignored warnings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267074 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a6013cc92f520536963eb3110fe38a9721e7f20e","date":"2016-04-21T23:00:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make ios_base::failure visibility specified consistent\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267076 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f1e73dfd2581000748652489c33198b312a78bb","date":"2016-04-21T23:38:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add is_swappable/is_nothrow_swappable traits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267079 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6c26a44def0e7811ffcd928b8eeafa1a6edd626","date":"2016-04-22T00:15:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Complete LWG issue #2016. Allocators must be nothrow swappable\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267085 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f367f088c5c19e0dd395e568d77d4178ce38b1d","date":"2016-04-22T00:47:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 build breakage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267090 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df46b78ce76c0c49e5cb610a3310d01a09ed075b","date":"2016-04-22T00:49:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix LWG issue #2106: move_iterators returning prvalues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9341a8a746792dcfee2573c5d713a88a66a201c8","date":"2016-04-22T01:04:55.000Z","author":{"name":"Evgeniy Stepanov","email":"eugeni.stepanov@gmail.com"},"message":"Cleanup: move visibility/linkage attributes to the first declaration.\n\nhttp://reviews.llvm.org/D15404\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59f2aea75025e038b30347f64faac2cf2dc96ac5","date":"2016-04-22T07:39:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add missing include of <algorithm>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267119 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ccbc4877466279badcf2b1b46afc641cc401851","date":"2016-04-22T10:33:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix some non-standard parts of our test suite. Reported by STL\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267131 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7f1f971d162a5161376786da9821370e9c18718","date":"2016-04-23T14:31:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rename a few tests that had typos in their names. No functional change. Thanks to STL for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267287 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6dfff1c9b9147641601574c953e208ece17f27d8","date":"2016-04-26T16:24:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"#include <test_macros.h> in all the regex tests, and remove all mentions of __cpluplus (use TEST_STD_VERS and/or XFAIL instead). No functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267567 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85d56221299ca056d679d7f652906f893b3fc16c","date":"2016-04-26T19:29:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Apparently XFAIL tests that are supposed to fail to compile can be problematic. They still get compiled, and if the compile succeeds, the buildbots complain. Replace the XFAIL with #error.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d446308c9ccf84b6ac22ea0d5f62baf5c90a8489","date":"2016-04-27T01:46:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix = that should have been == in test. Thanks to STL@microsoft for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267654 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4596c2919563b1a2c85285a8be96c74b1d993e75","date":"2016-04-28T01:49:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard Clang and GCC specific pragmas. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a32eb83b2fce4863fa0e9a235c53a873b9b07e87","date":"2016-04-28T02:00:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename function parameters to avoid shadowing. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267838 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ce24f965f13b307029483e5a532dcdff30514847","date":"2016-04-28T02:18:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Provide member function definitions to avoid warnings. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267843 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"849c551745a9be4c373c3d705e8e98a444a9d07c","date":"2016-04-28T02:45:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add braces, move braces, and rename variables to avoid shadowing. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267844 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bda804ea25ff0b96f66a80cbf4640a7b8dd886b8","date":"2016-04-28T03:17:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove names of unreferenced parameters. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267852 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"375e2f669cb882eb9a9700ab7fd1de8d2b57665f","date":"2016-04-28T22:28:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard libc++ specific c.__invariants() tests in LIBCPP_ASSERT macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267947 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6531a09dc76fab7d5e3c002766fce890988fb65d","date":"2016-04-29T00:37:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add proper include for unique_ptr. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267958 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d1a7f14000557a116b8db375c003b151f229bce","date":"2016-04-29T00:39:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add <string> include for streaming operators. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267959 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6e757ed1d0a8565308af156c7f7b46dce040b12","date":"2016-04-29T00:45:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add a return value for nasty_mutex::operator&. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267961 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"138574cae92285d2b4cb24af12cd58c3ff57936b","date":"2016-04-29T00:47:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove more names of unreferenced parameters. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267962 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59f8126f68d07b984c5492ec4d93f8f6000f513a","date":"2016-04-29T00:51:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix get_temp_file_name() to compile on Windows. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267963 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7aa3806b8c8d7650dd1bb082786b1d6cfe80a556","date":"2016-04-29T01:22:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix possible test breakage for MinGW\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267968 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"96becae30895a5f82102eeb7e4ffe599184bf696","date":"2016-04-29T01:52:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move INVOKE tests into test/libcxx sub-tree.\n\nTesting the concrete implementation of INVOKE means calling the implementation\nspecific names `__invoke` and `__invoke_constexpr`. For this reason the test\nare non-standard. For this reason it's best if the tests live outside of the\n`test/std` directory.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267973 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e5a4a4a71fae680ed06adfca3c877aa2c643752","date":"2016-04-29T04:07:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix or move various non-standard tests.\n\nThis patch does the following:\n\n* Remove <__config> includes from some container tests.\n* Guards uses of std::launch::any in async tests because it's an extension.\n* Move \"test/std/extensions\" to \"test/libcxx/extensions\"\n* Moves various non-standard tests including those in \"sequences/vector\",\n  \"std/localization\" and \"utilities/meta\".\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267981 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7a90040245f08551a3d61755027a96ef54449dd","date":"2016-04-29T04:18:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failures by adding missing include\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267982 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc8538fde6d3e66851104eaef16bc880cb6b6dd8","date":"2016-04-29T04:19:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move extern C include test into test/libcxx\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@267983 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59af3f895f37bb562987c50823e2344198c198cc","date":"2016-04-29T07:23:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR21428 for long. Buffer was one byte too small in octal formatting case. Rename previously added test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268009 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffa3db2cc64eae50fd51bddde481844e7104c3d1","date":"2016-04-29T22:17:15.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Create a separate install target for libcxx headers\n\nThis change doesn't impact the behavior of the install-libcxx target which installs whichever libcxx components you build, it just adds a separate target to just install the headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268124 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"61a220ae5b66da464369129d174b68e400133e56","date":"2016-04-30T02:30:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace one more occurrence of non-standard std:launch::any. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268153 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9ea11398d4e7c756f664d0ae364f1849ab5adec","date":"2016-05-02T19:15:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Void cast runtime-unused variables. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268284 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46c05119b5000eb25a4982c7e45b074ac95926c1","date":"2016-05-02T19:20:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Initialize local doubles to NaN. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"feb3898d4a19f54f35a8dca85f1a06cc2109c9ca","date":"2016-05-02T20:08:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup warnings and remove use of __builtin_va_list in depr.c.headers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268294 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ed38a96f8a6fb59c11375c7280824d6c4671143","date":"2016-05-03T00:36:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard use of <unistd.h> in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268346 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cf277c710bde079d4c0c2476d1493c08544a3be","date":"2016-05-03T02:04:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't use std::__clz in 'test/support/hexfloat.h'.\n\nstd::__clz is a libc++ specific function so it can't be used in the test suite.\nThis patch implements a dumb \"count leading zeros\" implementation within\nhexfloat itself.\n\nThis patch also fixes UB since the output of `__builtin_clz(0)` is undefined\naccording to the GCC docs.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268354 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"219406e77f26400a00212a4b02930b6e6a201cf4","date":"2016-05-03T02:12:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] [test] Replace non-Standard \"atomic_flag f(false);\" with Standard \"atomic_flag f;\" \n\nSummary:\nReplace non-Standard \"atomic_flag f(false);\" with Standard \"atomic_flag f;\" in clear tests.\nAlthough the  value of 'f' is unspecified it shouldn't matter because these tests always call `f.test_and_set()` without checking the result, so the initial state shouldn't matter.\n\nThe test init03.pass.cpp is explicitly testing this non-Standard extension; It has been moved into the `test/libcxx` directory.\n\nReviewers: mclow.lists, STL_MSFT\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D19758\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6aec0206dad444cdc1a53617040b05413edc6bdb","date":"2016-05-03T04:26:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR27538. Remove __is_convertible specializations for array and function types.\n\nThis patch fixes a bunch of bugs in the fallback implementation of\nis_convertible, which is used by GCC. Removing the \"__is_convertible\"\nspecializations for array/function types we fallback on the SFINAE test,\nwhich is more correct.\n\nSee https://llvm.org/bugs/show_bug.cgi?id=27538\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a956a105fe45459231b02332d7d52e78f33f8ca5","date":"2016-05-03T05:34:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix dependencies on install-libcxx CMake target\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268363 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"135ac80a48440d3f1faaedd5890987760f9ede26","date":"2016-05-03T16:54:20.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Fix a copy-paste error\n\nBased on post commit feedback from Eric Fiselier.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268401 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e4698c9a6cce2963d57404f1abc1eb6a1afc03d","date":"2016-05-03T21:30:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Create new library 'libc++experimental.a' for packaging TS symbols.\n\nSummary:\nOut-of-line symbols for <experimental/...> headers are not ABI or API stable and cannot live in the 'libc++.dylib'. Currently they have nowhere to live. I would like to add a new library target `libc++experimental.a` to fix this. \n\nPreviously I had suggested different libraries for different TS's (`libc++filesystem.a`, 'libc++LFTS.a`, ect). I no longer think this is the right approach.\nInstead `c++experimental` will hold *all* TS implementations as a single monolithic library. I see two main benefits to this:\n\n1. Users only have to know about and manually link one library.\n2. It makes it easy to implement TS's with one or two out-of-line symbols. (Ex. PMRs)\n\n`c++experimental` provides NO ABI compatibility. Symbols can freely be added/removed/changed without concern for ABI stability.\nI will add documentation for this after landing this patch (but before adding anything to it).\n\n`c++experimental` only builds as a static library. By default CMake will build/test this library but will *NOT* install it.\n\nThis patch adds the CMake and LIT logic needed to build/test the new library. Once this lands I plan on using it to implement parts of `<experimental/memory_resource>`.\n\n\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits, theraven, krememek, dexonsmith, bcraig, beanz, danalbert\n\nDifferential Revision: http://reviews.llvm.org/D19856\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7da079cc12717cb380e75dedffa80f28d7653216","date":"2016-05-03T21:58:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make check-libcxx dependant on libc++experimental if present.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7039fa1d20e33760f6f2a02c068ed2a334589934","date":"2016-05-03T22:32:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add documentation for new experimental library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03dc08c1a60e918c1ef03ced7b1c9eb823b23c2d","date":"2016-05-03T22:50:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update version numbers in docs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"360fa62a018619905066e93b41650088d8098d3f","date":"2016-05-04T15:35:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed some spelling errors in assert messages. No functional change. Thanks to giffunip@yahoo.com for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a7462d16391cc406635fb9103dd7ec7f96ceb6b","date":"2016-05-04T20:29:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Removing some trailing whitespace\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268543 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f83eb7a8cc51287314d70881d18f77db60f72125","date":"2016-05-05T06:30:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try and fix sphinx build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268613 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"953f34fd944d0e3e715902f697e611d3ebbb81e9","date":"2016-05-05T08:12:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix sphinx build. This is a temporary solution.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6637dc23f66f33dacaaf29863d5e92edc857044b","date":"2016-05-06T04:49:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix errors in documentation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268709 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35ff03b7c2a50d197049edbe223042aec221fec1","date":"2016-05-06T14:06:29.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Refactor pthread usage of libcxx.\n\nThis patch extracts out all the pthread dependencies of libcxx into the\nnew header __threading_support. The motivation is to make it easy to\nre-target libcxx into platforms that do not support pthread.\n\nOriginal patch from Fulvio Esposito (fulvio.esposito@outlook.com) - D11781\n\nApplied with tweaks - D19412\n\nChange-Id: I301111f0075de93dd8129416e06babc195aa936b\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70487694ba0ebb46b6e75eda85941e1dfa1745bb","date":"2016-05-06T21:35:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Tweak --param=no_default_flags=true to still add -Ilibcxx/test/support\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268801 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"257fd699fd62d09908944845fba04c4a9ab8d03b","date":"2016-05-07T01:04:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add <experimental/memory_resource>\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D20007\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268829 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"96e4c23bf1958a666cecdac960d52faab521e6dc","date":"2016-05-07T02:30:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix typo it _LIBCPP_NO_EXCEPTIONS macro\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268838 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"33861da4f54a5062d426bdae8c33b53aa98b2183","date":"2016-05-07T02:33:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix one more usage of _LIBCPP_HAS_NO_EXCEPTIONS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268839 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dba23b499be925f98fba2345eaacb99b88eba9ea","date":"2016-05-07T03:09:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add experimental container alias templates for PMRs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268841 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4db388b579686bce48b89d7a82b48561df93e3e9","date":"2016-05-07T03:12:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change allocator<T>::allocate to throw length_error, not bad_alloc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268842 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1354c943ad2e506f4a56b40b6a7cf4e8f504e351","date":"2016-05-07T03:24:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update TS implementation status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268844 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab46ace714b94f942ade9054305b233e5a21be93","date":"2016-05-07T05:37:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix memory_resource build for _LIBCPP_HAS_NO_THREADS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268850 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c8f0e5b65bc64a2a32badb0015d11753710b28d","date":"2016-05-07T17:05:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable Pthread threading API on Solaris. Fix PR27677\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268860 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4e69be0423ede71b6780b2aa245692d4ca89c60b","date":"2016-05-08T23:08:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Generate code coverage for experimental libraries\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@268887 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25bcc0f8f812edb3f7acdd4eb74316452646dfe0","date":"2016-05-10T16:17:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Prefer C++14 over C++11 when building libc++experimental.\n\nSummary:\nCurrently libc++experimental builds with C++11. This patch changes that to C++14 when supported by the compiler. Although nothing currently requires C++14 the upcoming <experimental/memory_resource> implementation would benefit from it. [1]\n\nNote that libc++.so continues to build with C++11 and is unaffected by this change.\n\n[1] <experimental/memory_resource> provides global resources which must exist for the entire lifetime of the program. In order to ensure that a global resource can be used during program termination there destructors must never be invoked. The only way to do this, while also allowing \"constant initialization\", is to use a C++14 union.\n\n\nReviewers: mclow.lists\n\nSubscribers: pete, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D19992\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269070 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aee206a3a178631ae20820d290968786f4fe35b0","date":"2016-05-12T14:31:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Apply D20014 - fix a missing return in a test. Fixes PR#27720\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10a682949034bf72534bfd157663d7d6d708dcba","date":"2016-05-14T23:58:11.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Disable LIBCXX_ENABLE_ABI_LINKER_SCRIPT for static library builds.\n\nThis option is geared towards shared library builds and causes static\nlibrary builds to fail if not explicitly disabled.\n\nThis patch fixes PR27706: https://llvm.org/bugs/show_bug.cgi?id=27706\n\nThanks rgoodfel@isi.edu for the catch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eaba7bb5acb47c95f54fc30f2002630079928bb5","date":"2016-05-16T16:55:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a couple of _LIBCPP_ASSERT calls. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269663 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5d98497d0b278a7a92cb174b208069672d830c9b","date":"2016-05-16T16:57:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test for uniqueptr having either NULL and nullptr\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269665 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3cc263dda1223f031756b4b5a6f3b82c784cf52e","date":"2016-05-16T17:05:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove C++11 feature macros in tests. Use TEST_STD_VER instead.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269669 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c15439dd3443bb01ee1f9a96fe932cfc80668ea","date":"2016-05-17T14:52:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0030R1: Introduce a 3-Argument Overload to std::hypot\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f271a0b772824e373f23a26cf83d66cb33d6ac9","date":"2016-05-17T14:58:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some checking so that the TEST_HAS_XXX macros match up with the _LIBCPP_NO_HAS_XXX macros. No functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269773 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8fc1ec894ac466b3f63b5ee818ac38869e76d41","date":"2016-05-17T17:44:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2576: istream_iterator and ostream_iterator should use std::addressof\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269789 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"995f64c4ae157894d5a0b5af7d9b3b736e21f309","date":"2016-05-17T19:52:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add test for r269789\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269812 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3388c6bb2bbdd4d68683da0ef7bc52f98087434","date":"2016-05-17T21:01:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test hijacking ADL for operator& in the stream iterator constructors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269838 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2241cf0d5b5f18a51877b8fa4bcccde92fa675ad","date":"2016-05-18T17:50:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change the control flow in atomic_compare_exchange_strong to avoid a potential deadlock.\n\nWhen you assign a shared_ptr, the deleter gets called and assigned. In this routine, the assignment happens inside a critical section, which could (potentially) lead to a deadlock, if the deleter did something wonky. Now we swap the old value with an (empty) temporary shared_ptr, and then let the temporary delete the old value when it goes out of scope (after the lock has been released).  This should fix PR#27724. Thanks to Hans Boehm for the bug report and the suggested fix.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269965 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea76b4432dc349563ac9c4c8a94994e7d41a5967","date":"2016-05-18T19:31:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG2583 as complete. I did this a while ago, and forgot to update the table.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269973 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7995c48d7f7dbe04d9568fcfd715a7dadfdde2f9","date":"2016-05-18T22:23:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Optimize declval for compile times. Patch from Eric Niebler.\n\nThis patch implements the C++11 version of declval without requiring a template\ninstantiation.\n\nSee PR27798 for more information. https://llvm.org/bugs/show_bug.cgi?id=27798\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269991 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14273e8a560533f44238b5ec6299a8edcedf2144","date":"2016-05-18T23:09:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup superfluous std:: qualifiers in <type_traits>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@269998 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc1962da3749624eb1b66291c99258fcbad4ca98","date":"2016-05-20T12:58:41.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Reorganize locale extension fallbacks. NFCI\n\nThe various _l locale extension functions originate from very\ndifferent places.  Some come from POSIX, some are BSD extensions,\nand some are shared BSD and GLIBC extensions. This patch tries to\ngroup the local extension reimplementations by source. This should\nmake it easier to make libcxx work with POSIX compliant C libraries\nthat lack these extensions.\n\nThe fallback locale functions are also useful on their own for other\nlightweight platforms. Putting these fallback implementations in\nsupport/xlocale should enable code sharing.\n\nI have no access to a newlib system or an android system to build\nand test with. I _do_ have access to a system without any of the _l\nlocale extensions though, and I was able to ensure that the new\n__posix_l_fallback.h and __strtonum_fallback.h didn't have any massive\nproblems.\n\nhttp://reviews.llvm.org/D17416\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@270213 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5163e46afb226fc9828212dced562d547dc98e26","date":"2016-05-25T17:40:09.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"[libcxx] Allow explicit pthread opt-in\n\nThe existing pthread detection code in __config is pretty good for\ncommon operating systems. It doesn't allow cmake-time choices to be\nmade for uncommon operating systems though.\n\nThis change adds the LIBCXX_HAS_PTHREAD_API cmake flag, which turns\ninto the _LIBCPP_HAS_THREAD_API_PTHREAD preprocessor define. This is\na name change from the old _LIBCPP_THREAD_API_PTHREAD. The lit tests\nwant __config_site.in variables to have a _LIBCPP_HAS prefix.\n\nhttp://reviews.llvm.org/D20573\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@270735 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7515c69b1184731f0167081ef78ecd62dfd10fc0","date":"2016-05-27T22:19:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Tolerate incorrect return type for 'isinf' and 'isnan' in tests.\n\nSummary:\nGLIBC recently removed the incorrect `int isinf(double)` and `int isnan(double)` overloads in C++11 and greater. This causes previously `XFAIL: linux`  tests to start passing.\n\nSince there is no longer a way to 'XFAIL' the tests I choose to simply tolerate this bug.\n\nSee https://sourceware.org/bugzilla/show_bug.cgi?id=19439\n\n\nReviewers: rsmith, mclow.lists, EricWF\n\nSubscribers: jroelofs, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D19835\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271060 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f21fcd10ac06cdbada5e966a6217b4c3202aae4","date":"2016-05-27T22:41:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard testing of tuple extensions to make tests portable\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271065 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1eb744592aca2e822def90991ec06295ecd6f331","date":"2016-05-27T23:05:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR27875. Parse LIBCXX_CXX_ABI_LIBRARY_PATH as a path not a string\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271070 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d9343ac2e414964fd7f3ac648c1091e84e5ed57c","date":"2016-05-27T23:33:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR27751. Add proper dependancies for install-libcxx-headers rule\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271073 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dcb35ad8aef400dcb87e938eac17cff1f061b36c","date":"2016-05-27T23:43:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing include to test_iterators.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271074 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3eac518e64aa0230894e4dde26c3f9714609e64","date":"2016-05-28T08:57:35.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Improve tests to use the UNSUPPORTED lit directive\n\nQuite a few libcxx tests seem to follow the format:\n #if _LIBCPP_STD_VER > X\n   // Do test.\n #else\n   // Empty test.\n #endif\nWe should instead use the UNSUPPORTED lit directive to exclude the test on\nearlier C++ standards. This gives us a more accurate number of test passes\nfor those standards and avoids unnecessary conflicts with other lit\ndirectives on the same tests.\n\nReviewers: bcraig, ericwf, mclow.lists\n\nDifferential revision: http://reviews.llvm.org/D20730\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2aad5d548c2b02bd8e07394a484ae857436c5b03","date":"2016-05-30T01:31:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bug in test allocator that incorrectly computed the allocation size\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e058f6359267626f45e23556403afb95f5a5ad92","date":"2016-05-30T21:30:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue #2522 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271231 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53d9966ed2df64eccfb3a0469b2d01059ac81b0e","date":"2016-05-30T23:15:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup error handling when TLS creation fails\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271235 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efa8e8868cda20536ef0a8772fe765846dddbbd4","date":"2016-05-30T23:53:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make string_view work with -fno-exceptions and get tests passing.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271237 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"979137793e66ed28404fc2ed1da7724ff414c807","date":"2016-05-31T00:23:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2565 as complete. Update the tests to check it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271238 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d1c44c360d053444457135a90d3bc1631de5925","date":"2016-05-31T01:03:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue #2585 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271240 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7883d02159fab29d6fbee0f0dad755178182931d","date":"2016-05-31T01:11:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2537 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271241 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b169bb00d1f6a18afe988e3fde6f8a91f1a0b87b","date":"2016-05-31T01:50:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2276 as complete. Add _LIBCPP_ASSERTS for it\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271247 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57c164f2a24d1c48e268b2f3aaee9c5069f296d2","date":"2016-05-31T01:51:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests that got missed in r271247.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271248 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a8c11447912b07014e2e17fab65824bf1ad4b2d","date":"2016-05-31T04:27:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2520 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271249 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cec3429cef0b428aadab71ef54f1c1b0021dd0c","date":"2016-05-31T14:29:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Issues for Oulu\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271282 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cad86ffac92ba6b9a8e7de492899391583096dd4","date":"2016-05-31T20:21:52.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Update to requiring CMake 3.4.3\n\nSummary:\nThis is as per the discussions on developer lists:\n\nhttp://lists.llvm.org/pipermail/llvm-dev/2016-April/098780.html\nhttp://lists.llvm.org/pipermail/llvm-dev/2016-May/100058.html\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D20828\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68db6cdf1b0a4a4582756d581e977c47f1fa57d0","date":"2016-06-01T21:05:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup non-standard tests as reported by STL@microsoft.com. NFC.\n\nThis patch addresses the following issues in the test suite:\n\n1. Move \"std::bad_array_length\" test from std/ to libcxx/ test directory\n   since the feature is not a part of the standard.\n\n2. Rename \"futures.tas\" test directory to \"futures.task\" since that is the\n   correct stable name.\n\n3. Move tests for \"packaged_task<T>::result_type\" from std/ to libcxx/\n   test directory since the typedef is a libc++ extension.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271430 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"84acb1ec3f7d5e0f37d7176697c2fa876c413407","date":"2016-06-01T21:35:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove trailing whitespace in test suite. Approved by Marshall Clow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"18e1ea69ae04be16072d0c781bc8b7c342c2a7ff","date":"2016-06-02T00:15:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0033R1 - Re-enabling shared_from_this\n\nSummary: See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D19254\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271449 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dbfa5b6ea7c49350a74f5de9e4223aaf84045df4","date":"2016-06-02T01:09:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove enable_shared_from_this test since it leaks the control block and fails with ASAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a27cbf8a138f32939ea48070ccdbdcf6ab9bfe8f","date":"2016-06-02T01:10:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Allow target flags to affect CMake configuration tests\n\nSummary:\nThis patch changes the libc++ CMake so that it adds certain target flags like '-m32' or '--gcc-toolchain' before including config-ix.cmake.\nSince these flags can affect things like check_library_exists([...]) they needed to be added before the tests are performed.\n\nThis patch fixes:\n\nhttps://llvm.org/bugs/show_bug.cgi?id=24322\n\nReviewers: danalbert, jroelofs, bcraig, compnerd\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D20887\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271460 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c230822a618b77d4ceee30ac88284a5a15820635","date":"2016-06-02T01:25:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add C++17 std::not_fn negator.\n\nSummary:\nExactly what it sounds like.\n\nI plan to commit this in a couple of days assuming no objections.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D20799\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271464 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d25628018b134128e10a477431ead14139a6b7c3","date":"2016-06-02T02:16:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update libcxx.llvm.org documentation by linking to new docs.\n\nSummary:\nCurrently much of the libcxx website is duplicated between the old www/ documentation and newer Sphinx docs. This patch changes the main libc++ webpage so that it links to the new documentation where possible. This means removing numerous sections from the landing page.\n\n@mclow.lists What do you think?\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits, mclow.lists\n\nDifferential Revision: http://reviews.llvm.org/D19250\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"400d356341f90af14322c427891a331a8704d3b1","date":"2016-06-02T03:12:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2450 as complete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271473 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e98bd2a486134b488bded0192c85da1f44f6a4b3","date":"2016-06-02T04:03:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2250 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271475 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1dbeb482df4b733c32ccdb421251e8a76971891","date":"2016-06-02T04:08:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2336 as complete. There is nothing to do.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271476 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2cc95e5b7733625e304f9c0eda22e152a1b2b33","date":"2016-06-02T04:13:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2218 as complete.\n\nLWG issue 2218 relaxes a restriction on how containers can call\nAlloc::construct(...) and Alloc::destroy(...). There is nothing new to test.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271477 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b36940bb348883969466a3514418c5501cdd8140","date":"2016-06-02T04:57:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix leak in __enable_weak_this(). Thanks to Arthur O'Dwyer for finding it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271487 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03b9c6b922691fb82bce01e80766622d838706f6","date":"2016-06-02T05:44:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG issue 2545 as complete. Add extra tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271489 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd7418914df40637288964da269690285627fade","date":"2016-06-02T08:19:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix TEST_HAS_NO_EXCEPTIONS misspelling in the test suite.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271501 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3bf0d98eb1a4a04a41413790e9aa52eb5ab7ea64","date":"2016-06-02T08:37:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add not_fn test for throwing operator!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271502 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0dd618b72363cd1bb4020ce72c4f7b603a5ce96b","date":"2016-06-03T08:45:26.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fix thread join.pass.cpp segfault after r271475\n\nSome pthread implementations do not like being called pthead_join()\nwith the pthread_t argument set to 0, and causes a segfault. This\npatch fixes this issue by validating the pthread_t argument before\ninvoking pthread_join().\n\nNFC.\n\nDifferential revision: http://reviews.llvm.org/D20929\n\nChange-Id: Ief817c57bd0e1f43cbaa03061e02417d6a180c38\nReviewers: EricWF\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271634 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1575e3e813f7f7cde31e699802fa1fcf8e84531c","date":"2016-06-03T21:40:03.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fix c++98 test failures.\n\nAdds XFAIL/UNSUPPORTED lit tags as appropriate. Gets a clean test run\nfor -std=c++98 on Fedora 20.\n\nNFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271741 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27006195205f3f3e9d389a46bc29e80458621194","date":"2016-06-04T16:16:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Don't call memmove when there's nothing to move. Fixes PR#27978.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271794 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10b452646a2ca3e3c21957ac7e03f47d850ca9f3","date":"2016-06-06T14:35:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove arithmetic +/-127 on chars; results in UB when dealing with signed chars. Thanks to STL@microsoft for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271897 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fb59f5ce4d3eab1d32a266254e6bf706d9589209","date":"2016-06-06T18:24:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rename some test data (and make it const) to rid us of some shadowing warnings in the test suite. No functional change. Thanks to STL@microsoft for the report and patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@271919 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"467eaf826922b617cfafbca9a60ff4c4253800b7","date":"2016-06-07T15:49:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Avoid Shadowing warnings in the associative containers tests. Thanks to STL for the patch.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272018 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0f3f60f494ddf300115888a21f8e6308b3e4af8b","date":"2016-06-07T17:54:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added notes about the issues for Oulu\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8054c3017f6f36e8089d7d6fe37411a1d51d987","date":"2016-06-07T20:05:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added notes for a bunch of the issues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272050 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5d22d57ed6a2995a5eda9fdb9dc7ec50381edc3","date":"2016-06-08T14:54:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Patch ready for #2436\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272150 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e65b664262af1c3c87bf4b0943936db30c6edb9","date":"2016-06-08T21:25:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2441 as ready\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272202 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"54f2d208b52be84bd42cb2acf899cc853de4586a","date":"2016-06-08T22:20:28.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Cleanup uses of USES_TERMINAL\n\nNow that we are on CMake 3.4.3 we no longer need a version check around this.\n\nThis is the libcxx side of r272211.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272212 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f486825a5e08a3e3434b531a48a463e9e4ebd8bf","date":"2016-06-08T22:33:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add notes for 2688\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272216 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94f5dfc59bd649ec84c429050147b79142a9b131","date":"2016-06-09T14:50:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Two more issues w/patches\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272263 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4241df3ef46df4bc3d6fc729a39dd6e7c13fc6ee","date":"2016-06-09T18:34:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make the comparison objects that we pass in for various tests look more like actual comparison objects. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272288 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42e8527d86ecfaf724a77a2256a8168ee3d50920","date":"2016-06-10T16:00:29.000Z","author":{"name":"Evandro Menezes","email":"e.menezes@samsung.com"},"message":"[streambuf] Added call to traits_type::copy to common case in xsgetn()\n\nPatch by Laman Sole <laxman.g@partner.samsung.com>, Sebastian Pop\n<s.pop@samsung.com>, Aditya Kumar <aditya.k7@samsung.com>\n\nDifferential Revision: http://reviews.llvm.org/D21103\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272401 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8df1781e3e0041d81899c9131b43c6655c75351","date":"2016-06-10T22:45:11.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add `REQUIRES: c++experimental` where appropriate.\n\nSummary:\nI haven't added it to all the tests, just those that fail without it\n(those that aren't header only).\n\nReviewers: EricWF, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21247\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf5a4189d3958e088b370f1bf3f4e62b0a3a0a58","date":"2016-06-14T01:36:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove _LIBCPP_TRIVIAL_PAIR_COPY_CTOR option.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272613 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be6c5e18b3ff4c564d11025e0a0b6c97bc377f88","date":"2016-06-14T02:46:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Silence more unused variable warnings. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272617 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e3bf9c69a142f1f5f8bc548f43b830e9c950fe5","date":"2016-06-14T02:47:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid name shadowing in test. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d6c0cf0ebdfd1d237fe7e07ab3732467dbd14c91","date":"2016-06-14T02:51:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename variables to prevent shadowing. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272619 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"831bfc277c54997619e09f9e4fd48a51df35a10f","date":"2016-06-14T02:53:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix vector<bool> tests that were using ints. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272620 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"afa2f4331a67af2516bd5b34f01412ab2c5255bb","date":"2016-06-14T02:54:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent truncation warning. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272621 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"202acb7fd33181a8991983f931249ffb311e1cea","date":"2016-06-14T02:55:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unused local var. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272622 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfdae2062a086dbfeb47774afcf429402cb39c57","date":"2016-06-14T03:21:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warnings in tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55ae1f0e07bf8b4f5f40c43267b4bdab1d221ffc","date":"2016-06-14T03:26:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Ignore depricated warnings from <ext/hash_map> and <ext/hash_set>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a30cee2258df9edb22ba3864f2ab9d73998a2d94","date":"2016-06-14T03:45:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make system_error::message() thread safe. Fixes PR25598.\n\nSummary:\nsystem_error::message() uses `strerror` for the generic and system categories. This function is not thread safe.\n\nThe fix is to use `strerror_r`. It has been available since 2001 for GNU libc and since BSD 4.4 on FreeBSD/OS X.\nOn platforms with GNU libc the extended version is used which always returns a valid string, even if an error occurs.\n\nIn single-threaded builds `strerror` is still used.\n\nSee https://llvm.org/bugs/show_bug.cgi?id=25598\n\nReviewers: majnemer, mclow.lists\n\nSubscribers: erik65536, cfe-commits, emaste\n\nDifferential Revision: http://reviews.llvm.org/D20903\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272633 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10b52a0e56cf48387129ac5cf862db80c876ec58","date":"2016-06-14T03:48:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement variadic lock_guard.\n\nSummary:\nThis patch implements the variadic `lock_guard` paper. \n\nMaking `lock_guard` variadic is a ABI breaking change because the specialization `lock_guard<_Mutex>` mangles differently then when it was the primary template. This change only provides variadic `lock_guard` in ABI V2 or when `_LIBCPP_ABI_VARIADIC_LOCK_GUARD` is defined.\n\nNote that in ABI V2 `lock_guard` must always be declared as a variadic template, even in C++03, in order to keep the ABI consistent. For this reason `lock_guard` is forward declared as a variadic template in all standard dialects and therefore depends on variadic templates being provided as an extension in C++03. All supported versions of Clang and GCC provide this extension.\n\n\n\n\nReviewers: mclow.lists\n\nSubscribers: K-ballo, mclow.lists, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21260\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272634 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f471cbe3eb94f8dbdfd0e0c6d11b49ba7c4da0f","date":"2016-06-14T04:45:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Temporarily XFAIL variadic lock_guard mangling test for GCC 4.9\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272637 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10d7856f8f988cc342f3758df9ea86b0cf789772","date":"2016-06-14T04:58:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing include\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272638 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e443672b0591e39eab09833fa477b87b040609b3","date":"2016-06-14T05:47:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid octal escape sequence warning with MSVC. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272639 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17402e36faac23510cd8198487f3289c219908ad","date":"2016-06-14T06:03:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix error checking for strerror_r implementations that return the error code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272640 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3f1134dca21006db6c0a6ccb295e33dbd05ec43","date":"2016-06-14T06:08:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix syntax error in r272640.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272641 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a623cf59f2ff7c2c609a45084e093cf96ddf186","date":"2016-06-14T06:37:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update errcat.objects tests so they test the bug fixed in r272640.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272642 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d9e1819ef45a53776ff5def3ab6f8c94445fef06","date":"2016-06-14T14:34:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Partially Revert r272613. FreeBSD needs the non-trivial constructors in pair.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272671 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"174432dbd52dddcb683ef14b3c8de083cad9d28c","date":"2016-06-14T15:25:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Found a couple bugs in the test suite. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272679 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d24c465beaec2fe9a0e365e6379cd5d3acaeb2ca","date":"2016-06-14T21:31:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace __cplusplus comparisons and dialect __has_feature checks with TEST_STD_VER.\n\nThis is a huge cleanup that helps make the libc++ test suite more portable.\nPatch from STL@microsoft.com. Thanks STL!\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d0eba8d313e51d45cbdb028096518cbb08043913","date":"2016-06-14T21:50:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bad test that was previously getting ifdef-ed away\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272722 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5fb49ff88ccfb1fd79d8892affee25fc0db6d5d6","date":"2016-06-14T21:55:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Automatically detect export lists for OS X.\n\nSummary:\nLibc++ reexports symbols from the system libc++abi using -reexport_symbols_list. This can cause a linker failure if the list contains symbols not defined in the system libc++abi.\nThis patch attempts to detect the OS X version and use it to determine the correct symbol list. \n\nIt's my understanding that `lib/libc++abi2.exp` should be used on 10.9 and greater. Otherwise 'lib/libc++abi.exp' should be used\n\nThis fixes PR25666 (https://llvm.org/bugs/show_bug.cgi?id=25666)\n\nReviewers: mclow.lists, bcraig, dexonsmith, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D20772\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272723 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9957769584e8b9d53c5fb61c669248db68c5544","date":"2016-06-15T01:42:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve portability of hash tests. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272744 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c02ca7f4b0a4d8eba97d0b45ec8ae48ba76b4aef","date":"2016-06-15T01:44:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve portability of vector tests. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42e3e187f58dad28d2049ef1032bc87b9ef78d64","date":"2016-06-15T01:50:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve portability of random_device tests. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"629aa5670a6cb6bc61cd3dcca05de4b05fbda03b","date":"2016-06-15T01:53:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] [test] In test/support/test_allocator.h, fix construct() to avoid moving immovable types.\n\nSummary:\nIn test/support/test_allocator.h, fix construct() to avoid moving immovable types.\n\nThis improves the allocator's conformance, and fixes compiler errors with MSVC's STL. The scenario is when the allocator is asked to construct an object of type X that's immovable (deleted copy/move ctors), but implicitly constructible from an argument type A. When perfectly forwarded, X can be (explicitly) constructed from A, and everything is fine. That's std::allocator's behavior, and the Standard's default when a user allocator's construct() doesn't exist. The previous implementation of construct() here mishandled this scenario. Passing A to this construct() would implicitly construct an X temporary, bound to (non-templated) T&&. Then construct() would attempt to move-construct X from that X temporary, but X is immovable, boom.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21094\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272747 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12150a7eb0a7d376debe353ade235ff33aa28fd7","date":"2016-06-15T17:04:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix const default initialization of lock_guard<>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272804 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6bdead7593d4421537a3b230fff2fd9a344973c8","date":"2016-06-15T17:25:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add -Wno-unused-command-line-argument when running the test suite to prevent errors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272809 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"461797d21a2b26c4d55e623c51818f399574774c","date":"2016-06-15T19:41:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warning in tuple tests. The test suite should now run clean with most warnings enabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272822 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b2ce77fc21f0aeda5175234565d6af867454ab6e","date":"2016-06-15T20:20:32.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Add an Android version check for GNU strerror_r.\n\nSummary:\nAndroid didn't gain GNU's strerror_r until Marshmallow. If we're\nbuilding libc++ against something older (we build the NDK library\nagainst the oldest release we support, currently Gingerbread), fall\nback to the POSIX version.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: tberghammer, danalbert, srhines, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21402\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272827 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8f47cc80002e17a3c4fea13ba0bd27ba0651326","date":"2016-06-16T11:53:11.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Remove CloudABI specific workaround.\n\nCloudABI has gained the mblen_l() function in the meantime that does\nproperly return whether the character set has shift-states (read:\nnever).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@272886 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e9a694dce70319e60dbdfb09cf055bacb4c948e","date":"2016-06-17T19:46:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add Filesystem TS -- Complete\n\nAdd the completed std::experimental::filesystem implementation and tests.\nThe implementation supports C++11 or newer.\n\nThe TS is built as part of 'libc++experimental.a'. Users of the TS need to\nmanually link this library. Building and testing the TS can be disabled using\nthe CMake option '-DLIBCXX_ENABLE_FILESYSTEM=OFF'.\n\nCurrently 'libc++experimental.a' is not installed by default. To turn on the\ninstallation of the library use '-DLIBCXX_INSTALL_EXPERIMENTAL_LIBRARY=ON'.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273034 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05761e6861df930b3f040721c76aa3f829974cfe","date":"2016-06-17T19:57:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix a couple of warnings present in the filesystem tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273035 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3f386aae3c233757d8679dfaeb53504de43b5de","date":"2016-06-17T20:16:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing space between >> in template declaration. Fixes C++03 build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273037 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0354eb7228990461c8f015f5e68f8e7d60ab6a76","date":"2016-06-17T20:54:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Respect the processes umask in the create_directory test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273048 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c75540ba29e99794d95bfb662d85ebf1a5ef1f5","date":"2016-06-17T21:00:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Reorder permissions test so they are not dependent on the processes umask\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273049 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"841798ce01580c7cb67b6552990f1867d726879e","date":"2016-06-17T21:24:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update status of filesystem issues, and add tests for LWG issue 2683\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273051 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40d9e09d892af387d97a8ab507f440ff027cd206","date":"2016-06-17T21:44:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get filesystem tests passing for single-threaded configurations.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273054 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f3b01af9cc4b60b504bc88ec1248b02cbed785c","date":"2016-06-17T22:22:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bugs in recursive_directory_iterator implementation and tests.\n\nThere are two fixes in this patch:\n\n* Fix bug where the constructor of recursive_directory_iterator did not reset\n  the error code if no failure occurred.\n\n* Fix tests were dependent on the iteration order of the test directories.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273060 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c8a3688be8466b525881cfc5626d08d55800a09","date":"2016-06-17T22:36:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix initialization of test case array in C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273065 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a730ec37a99cc59afd3f981bc1d1ef68d0eda12c","date":"2016-06-17T23:30:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around GCC bug in tests. The bug has been fixed in GCC 6.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1bc722d8cbbb5ba06a1a1a9fdbb3c0d3f01546b","date":"2016-06-17T23:57:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bugs in recursive_directory_iterator::increment(ec) implementation and tests.\n\nr273060 didn't completely fix the issues in recursive_directory_iterator and\nthe tests. This patch follows up with more fixes\n\n* Fix bug where recursive_directory_iterator::increment(ec) did not reset\n  the error code if no failure occurred.\n\n* Fix bad assertion in the recursive_directory_iterator::increment(ec) test\n  that would only fire for certain iteration orders.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273070 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63a5b248d717de58e81b5e1f73cb75d61214ec1f","date":"2016-06-18T00:23:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add checkpoints to string allocation test to help with debugging arm failures.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273072 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"591e18f6aaa7f8a8ae1ed0e239708b5e752173bd","date":"2016-06-18T02:11:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add additional tests in an attempt to diagnose ARM test failures.\n\nCurrently 4 tests are failing on the ARM buildbot. To try and diagnose each\nof the failures this patch does the following:\n\n1) path.itr/iterator.pass.cpp\n   * Temporarily print iteration sequence to see where its failing.\n\n2) path.native.obs/string_alloc.pass.cpp\n   * Remove test that ::new is not called when constructing a short string\n     that requires a conversion. Since during the conversion global locale\n     objects might be constructed.\n\n3) fs.op.funcs/space.pass.cpp\n   * Explicitly use uintmax_t in the implementation of space, hopefully\n     preventing possible overflows.\n   * Add additional tests that check for overflow is the calculation of the\n     space_info values.\n   * Add additional tests for the values returned from statfvs.\n\n4) fs.op.funcs/last_write_time.pass.cpp\n   * No changes made yet.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273075 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba9dccd902a8276e17a066e9e635fb2cc9a34d1f","date":"2016-06-18T02:12:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable building and using atomic shared_ptr for GCC.\n\nSummary:\nCurrently the  implementation of [util.smartptr.shared.atomic] is provided only when using Clang, and not with GCC. This is a relic of not having a GCC implementation of <atomic>, even though <atomic> isn't actually used in the implementation. This patch enables support for atomic shared_ptr functions when using GCC.\n\nNote that this is not a header only change. Previously only Clang builds of libc++.so would provide the required symbols. There is no reason  for this restriction.\nAfter this change both Clang and GCC builds should be binary compatible with each other WRT these symbols.\n\n\nReviewers: mclow.lists, rmaprath, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21407\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273076 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"880e38b206ee452f777922dfa61a959cee0067cb","date":"2016-06-18T04:10:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix 3 bugs in filesystem tests and implementation.\n\nThis patch fixes the following bugs, all of which were discovered while\ntesting a 32 bit build on a 64 bit machine.\n\n* path.itr/iterator.pass.cpp has undefined behavior.\n  'path::iterator' stashes the value of the element inside the iterator.\n  This violates the BiDirIterator requirements but is allowed for path::iterator.\n  However this means that using reverse_iterator<path::iterator> has undefined\n  behavior because it assumes that 'Iter tmp = it; return *tmp' will not create\n  a dangling reference. However it does, and this caused this particular test\n  to fail.\n\n* path.native.obs/string_alloc.pass.cpp tested the SSO with a long string.\n  On 32 bit builds std::wstring only has the SSO for strings of size 2. The\n  test was using a string of size 4.\n\n* fs.op.space/space.pass.cpp had overflows while calculating the expected values.\n  The fix here is to convert the statvfs data members to std::uintmax_t before\n  multiplying them. The internal implementation already does this but the tests\n  needed to do it as well.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273078 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7840a8ca84a44db41386e4c6341b8589b1f55236","date":"2016-06-18T17:37:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use utimes instead of utimensat when !defined(UTIME_OMIT). Fixes build for older GLIBC versions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273088 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87a10657472d255cae350aa4e63c77ac7cfafb2a","date":"2016-06-18T17:51:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use monotonic clock in synthetic SleepFor test helper\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273089 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29c26b91df36522bf83d4a5ceb37f75c32b360ed","date":"2016-06-18T18:32:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix SleepFor(...) helper when a monotonic clock is not available.\n\nSingle threaded builds often don't provide a monotonic clock, so we can't\nalways provide a monotonic SleepFor(...) implementation. Hopefully this\nwon't cause the builds to hang.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d9bca8ab7d12e30e002d9b06061ed1c6cdc0e6b7","date":"2016-06-18T18:55:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add -Wno-covered-switch-default while compiling libc++\n\nfstream has a switch over ios_base::seekdir which provides a defensive default\ncase. This seems like the right thing for fstream to do, but we need to disable\nclangs warning during the build to allow this.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273092 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2730c251ae13b737836ed723ce3bf718761d9da3","date":"2016-06-18T19:11:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove Apple specific guard for utimensat. Use !defined(UTIME_OMIT) instead.\n\nAs pointed out by @majnemer this is a better way to detect utimensat on all\nplatforms. The Apple specific guard is unneeded.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70f7afec38f9b2064d9aa22440fde30234a58af2","date":"2016-06-19T02:04:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bugs in last_write_time implementation.\n\n* Fix passing a negative number as either tv_usec or tv_nsec. When file_time_type\n  is negative and has a non-zero sub-second value we subtract 1 from tv_sec\n  and make the sub-second duration positive.\n\n* Detect and report when 'file_time_type' cannot be represented by time_t. This\n  happens when using large/small file_time_type values with a 32 bit time_t.\n\nThere is more work to be done in the implementation. It should start to use\nstat's st_mtim or st_mtimeval if it's provided as an extension. That way\nwe can provide a better resolution.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273103 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57254f448f82195c76ad97ccca1fba4a618306df","date":"2016-06-19T02:25:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add UBSan blacklist for <__tree> and <__hash_table>\n\nWe all know <__tree> and <__hash_table> have plenty of UB that UBSan faithfully\nfinds. I am working on fixing this. However the noisy output from these failures\nprevent automatically detecting regressions elsewhere.\n\nThis patch adds a blacklist file for these failures so I can later set up a\nUBSAN buildbot.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273104 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe6d50fcaac37051057467a29eb99f817d5a4dc7","date":"2016-06-19T06:58:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG issue 1169. num_get not fully compatible with strto*\n\nUse strtof and strtod for floats and doubles respectively instead of\nalways using strtold. The other parts of the change are already implemented\nin libc++.\n\nThis patch also has a drive by fix to wbuffer_convert::underflow() which\nprevents it from calling memmove(buff, null, 0).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273106 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"897b2f9a70d6666e692dfd6d297eb7f99cb0553a","date":"2016-06-19T07:08:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix various undefined behavior found by UBSan.\n\n* Fix non-null violation in strstream.cpp\n  Overflow was calling memcpy with a null parameter and a size of 0.\n\n* Fix std/atomics/atomics.flag/ tests:\n  a.test_and_set() was reading from an uninitialized atomic, but wasn't\n  using the value. The tests now clear the flag before performing the\n  first test_and_set. This allows UBSAN to test that clear doesn't read\n  an invalid value.\n\n* Fix std/experimental/algorithms/alg.random.sample/sample.pass.cpp\n  The tests were dereferencing a past-the-end pointer to an array so that\n  they could do pointer arithmetic with it. Instead of dereference the iterator\n  I changed the tests to use the special 'base()' test iterator method.\n\n* Add -fno-sanitize=float-divide-by-zero to suppress division by zero UBSAN diagnostics.\n  The tests that cause float division by zero are explicitly aware that they\n  are doing that. Since this is well defined for IEEE floats suppress the warnings\n  for now.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5270a84ef2cfc8d70551dbbe6152a05a1f6126c3","date":"2016-06-19T19:29:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Test commit; remove some spaces at EOL. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273121 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee49613ff465e6f7627ec6d70b8930e9a3f72423","date":"2016-06-19T19:34:13.000Z","author":{"name":"Jonathan Coe","email":"jbcoe@me.com"},"message":"Implement std::experimental::propagate_const from LFTS v2\n\nSummary:\nAn implementation of std::experimental::propagate_const from Library Fundamentals Technical Specification v2.\n\nNo tests are provided for disallowed types like fancy pointers or function pointers as no code was written to handle these.\n\nReviewers: EricWF, mclow.lists\n\nDifferential Revision: http://reviews.llvm.org/D12486\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273122 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d4f1c1494482a592d4d5c412594a62934fc4fee","date":"2016-06-19T19:36:28.000Z","author":{"name":"Jonathan Coe","email":"jbcoe@me.com"},"message":"Add entry to CREDITS.TXT for propagate_const\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273123 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"374a33d1b9a9808c3f641867bb5e68a8e93bd9ca","date":"2016-06-21T21:54:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow the libc++ build/source paths to contain symlinks.\n\nThe filesystem tests were expecting the paths to the build/source directories\ndid not contain any symlinks. This patch resolves those symlinks before running\nthe test suite.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"756a6bd1776c371a33fff55bf5f85aebeb61ccd8","date":"2016-06-21T22:11:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG issue 2725. The issue should move this meeting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7c96ddb5639078164a3fe8bcfbf7a11d7f502afb","date":"2016-06-21T22:42:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG issue 2720. Replace perms::resolve_symlinks with perms::symlink_nofollow.\n\nThis changes how filesystem::permissions(p, perms) handles symlinks. Previously\nsymlinks were not resolved by default instead only getting resolved when\n\"perms::resolve_symlinks\" was used. After this change symlinks are resolved\nby default and perms::symlink_nofollow must be given to change this.\n\nThis issue has not yet been moved to Ready status, and I will revert if it\ndoesn't get moved at the current meeting. However I feel confident that it\nwill and it's nice to have implementations when moving issues.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273328 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa5a1059712047d890f290c1a4e0a17215ecd5d3","date":"2016-06-21T23:19:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR27684 - std::tuple no longer accepts reference to incomplete type in some cases.\n\nLibc++ has to deduce the 'allocator_arg_t' parameter as 'AllocArgT' for the\nfollowing constructor:\n\n  template <class Alloc> tuple(allocator_arg_t, Alloc const&)\n\nPreviously libc++ has tried to support tags derived from 'allocator_arg_t' by\nusing 'is_base_of<AllocArgT, allocator_arg_t>'. However this breaks whenever a\n2-tuple contains a reference to an incomplete type as its first parameter.\n\nSee https://llvm.org/bugs/show_bug.cgi?id=27684\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273334 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c382dd0cd11cc90b3ade510c2fc4129e024dd9a2","date":"2016-06-22T00:21:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move native_handle thread tests to test/libcxx\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273341 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"868af68aebb50d179fc45c86f7348ce8494e241b","date":"2016-06-22T00:32:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow placement new array test to consume extra bytes as specified by the standard.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"571d549ddd76a6836ba30e48e6bc74cf2d4b384f","date":"2016-06-22T00:50:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard use of non-standard macros in denorm_min() tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273344 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62957fb722e24428a20be348a71f311aad2e4d8f","date":"2016-06-22T00:53:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard libc++ assumption about identity hashing in test. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91a5c559ba26e49915ea47ded3e41065daf04e28","date":"2016-06-22T00:58:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Suppress unused warnings in std::invoke tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273348 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6fcb58914a95b8f552d8c12ad9081aef9c50b05","date":"2016-06-22T01:00:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid assignment in return. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273349 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff58059a86ab538c8d2ec21668866f2793ecfca0","date":"2016-06-22T01:02:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Suppress stupid and incorrect MSVC warning. patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273350 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dc45b08815e7f562e19818c491574040f73cc625","date":"2016-06-22T01:04:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix operator precedence mistake in valarray/not.pass.cpp. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a431a3abc57f11b5316d20959c0448d515625d7d","date":"2016-06-22T01:10:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't use C++17 terse static assert. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273353 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14fe08bcb729f076d889de4e38955051bc041923","date":"2016-06-22T01:13:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid huge main() functions and huge arrays. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273354 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03dacbe87a17b4b88d5e050027a18c3846c60beb","date":"2016-06-22T01:23:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix comment typos, strip trailing whitespace. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63a0af7a794ebc48994ffae8538470051727fb7e","date":"2016-06-22T01:33:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove locale tests that depend on LC_ALL. These are non-portable.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c0e3eb9d21ec2a1b7b139f907ff906c093f3157","date":"2016-06-22T01:40:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use static_assert instead of runtime assert in std::money_base tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273360 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b93bc9a9ed4042507c25fcb6291a795deb1f37ec","date":"2016-06-22T01:42:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move typoed dir meta.hel to meta.help\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273362 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b065399890ce51c47c7d39d811e38143e702220a","date":"2016-06-22T01:55:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move all tests for _LIBCPP_VERSION in language.support to test/libcxx/language.support.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273364 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67ec8a281b8d64f90ae48051ee7a0803623d3d2e","date":"2016-06-22T02:07:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move more _LIBCPP_VERSION tests to test/libcxx.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273365 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22bff1afcc2084aec23bf9b49b9005b09df9e50c","date":"2016-06-22T02:23:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move remaining _LIBCPP_VERSION tests into test/libcxx\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273367 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"604b5c48ec33fc1165d6e8fb698c7cbf04974870","date":"2016-06-22T02:31:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't use non-conforming pointer_traits specialization it tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273368 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"506f9d5bd39359612be14d7d73080e9bf894bf27","date":"2016-06-22T03:46:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup [list.modifiers] tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273371 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2aa1c4af3933513cde45513703b74c1773b2c1a0","date":"2016-06-22T04:00:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"UBSan doesn't globally replace new/delete but it still makes some tests fail. Investigation needed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273372 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d4a984ceac539ed4551dcc39f2c8bb466667d8d","date":"2016-06-22T04:23:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Placate MSVC's unchecked malloc warnings.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273374 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"770c6885afde1f717c979476dfe3f4274f8ae573","date":"2016-06-22T04:34:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make locale constructors tests use count_new.hpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273375 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d61ea34a586c911bceb97b2bd391d6b6b10ba50b","date":"2016-06-22T04:51:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make shared_ptr constructor tests use count_new.hpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273379 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5cdd5437e1314c402069536e122ed3be5b21b324","date":"2016-06-22T05:03:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix exception/rtti detection in tests.\n\nSo the macros TEST_HAS_NO_EXCEPTIONS and TEST_HAS_NO_RTTI were always\ngetting defined because I spelt __cpp_exceptions and __cpp_rtti as\n__cxx_exceptions and __cxx_rtti.\n\nTests incoming after this patch.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b5fb8c9e39af7ba99e7921598bf3a58f8e60d0c2","date":"2016-06-22T05:29:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for RTTI/exceptions test macros.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8905b11d2d6e2e397e28ab9062b0131e25b497d6","date":"2016-06-22T05:33:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Support old GCC exception and rtti detection macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cef97f9cc9aa3e5876abda5690ddbbb8889164cd","date":"2016-06-22T05:40:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use correct Clang feature names. I got them wrong in the previous commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5b30213b6f14517baf4980ae696b4f37ba16575","date":"2016-06-22T05:44:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Placate MSVC's unchecked malloc warning in thread tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273385 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"420dea528a2b7a2cdeccde618dd29c2438b320fd","date":"2016-06-22T07:09:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable ccache usage for .fail.cpp tests. It causes bugs.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1a1a1ffb7ff3722ce697dada8eeebc03c6ca542","date":"2016-06-22T07:24:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid unnecessary stat call in filesystem::permissions implementation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55e084dd4de60d5a80c1295653f1e41d45ce1c1b","date":"2016-06-22T07:57:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup filesystem::permissions ever more.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273392 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"111c69683876a613454398cabce71115c47a26ae","date":"2016-06-22T08:01:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_DEBUG tests in std::list. More to come.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d2b31567cc68b380013922db17cc20339254eda","date":"2016-06-22T08:47:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Finish converting list _LIBCPP_DEBUG tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273394 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3aef68f27e7907dab9f98aac17c78b2b4cb2faa5","date":"2016-06-22T08:57:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Run list debug copy test in C++03.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273395 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd421f5acd9016a2f88a09150904af463ad17815","date":"2016-06-24T18:02:27.000Z","author":{"name":"Weiming Zhao","email":"weimingz@codeaurora.org"},"message":"[libcxx] guard throw with exception enabling check\n\nSummary: this fixes build error when built with c++14 and no exceptions\n\nReviewers: rmaprath\n\nSubscribers: weimingz, grandinj, rmaprath, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21673\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bbd1c53610e625e77b0c5f0ca0792351dad925b0","date":"2016-06-26T19:37:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid narrowing conversions in quoted test. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273818 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c4dc324247e03625f771f2f5a2a997dc26c9c98","date":"2016-06-26T19:42:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add [[noreturn]] attribute to throw_bad_alloc_helper().\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273819 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"256f000cdc16ebdad09ffd6c9b5f048538e5abd7","date":"2016-06-26T19:48:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add array bounds assertions to satisfy MSVC's /analyze flag. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273820 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8c717009ef7c248c1eeea1fca56a8e222fbb4b9","date":"2016-06-26T19:53:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use L\"cat\" L\"dog\" when concatenating string literals. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273821 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47920eb75e641ec5382c3c3d1419be3c7b464b14","date":"2016-06-26T19:59:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around MSVC bug in atomics.types.generic/address.pass.cpp test. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273822 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5078baa9e0475783a366e54da37cc9e58f386325","date":"2016-06-26T20:21:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make default_noexcept.pass.cpp container tests more portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273823 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"abd892af3a6f46e30681e93eadf449c68b399296","date":"2016-06-26T21:01:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2488 - Make the placeholders constexpr.\n\nThis patch makes the bind placeholders in std::placeholders both (1) const and\n(2) constexpr (See below).\n\nThis is technically a breaking change for any code using the placeholders\noutside of std::bind and depending on them being non-const. However I don't\nthink this will break any real world code.\n\n(1) Previously the placeholders were non-const extern globals in all\ndialects. This patch changes these extern globals to be const in all dialects.\nSince the cv-qualifiers don't participate in name mangling for globals this\nis an ABI compatible change.\n\n(2) Make the placeholders constexpr in C++11 and beyond. Although LWG 2488 only\napplies to C++17 I don't see any reason not to backport this change.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7aabbb6c6348cc5d7b68f2951b66df70cadb8ac","date":"2016-06-26T22:56:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR28079 - std::wstring_convert move constructor broken.\n\nThe move constructor for wstring_convert accidentally copied the state member\ninto the converted count member in the move constructor. This patch fixes\nthe typo.\n\nWhile working on this I discovered that wstring_convert doesn't actually\nprovide a move constructor according to the standard and therefore this\nconstructor is a libc++ extension. I'll look further into whether libc++ should\nprovide this constructor at all. Neither libstdc++ or MSVC's STL provide it.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273831 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a317cec51aac7522b5959ee82e48171ad7cf011","date":"2016-06-26T23:18:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273832 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"783876859372a9c2bd54e206ceee34977c692b71","date":"2016-06-26T23:56:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR27115 - enable_shared_from_this does not work as a virtual base class.\n\nSee https://llvm.org/bugs/show_bug.cgi?id=27115\n\nThe problem was that the conversion from\n'const enable_shared_from_this<T>*' to 'const T*' didn't work if\nT inherited enable_shared_from_this as a virtual base class. The fix\nis to take the original pointer passed to shared_ptr's constructor in the\n__enable_weak_this method and perform an upcast to 'const T*' instead of\nperforming a downcast from the enable_shared_from_this base.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273835 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c297a25c55458fe0c5b76d54baecabe5af43271a","date":"2016-06-27T00:38:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 failure in enable_shared_from_this test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"715ca516662cf8bbd0fa2ee213faf5f6810c1d45","date":"2016-06-27T00:40:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0358r1. Fixes for not_fn.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273837 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5781358757846ac420321c963f8d8a90db1b2788","date":"2016-06-27T00:55:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement p0337r0. Delete operator= for polymorphic_allocator.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273838 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83d7ca9ea53bbdd32863c0a5ca04a1c47b50e94f","date":"2016-06-27T01:02:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0163r0. Add shared_ptr::weak_type.\n\nThis patch adds the weak_type typedef in shared_ptr. It is available in\nC++17 and newer.\n\nThis patch also updates the _LIBCPP_STD_VER and TEST_STD_VER macros to\nhave the value of 16, since 2016 is the current year.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273839 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"928a58f7d28caa584a716847109c2e9cc3d9776c","date":"2016-06-27T01:52:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix UB in uses_alloc_types.hpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273840 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"871506f9c262661c3d2538c5967d3311b03aca5b","date":"2016-06-27T11:14:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bad link for P0006\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@273861 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01ac037a5b516a165e66512e08faccf39af518d7","date":"2016-06-28T14:11:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated C++1Z status page with new work from Oulu WG21 meeting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274016 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05d5c05fe814afe772b9081f4c3068ec01f77000","date":"2016-06-28T14:13:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Use WG21.link reflector to get to issues, rather than linking directly\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274018 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70bf1c2280d514792b4bc6035c4685e82da79645","date":"2016-06-29T15:26:13.000Z","author":{"name":"Akira Hatanaka","email":"ahatanaka@apple.com"},"message":"[libcxx] Fix a bug in strstreambuf::overflow.\n\nThe end pointer should point to one past the end of the newly allocated\nbuffer.\n\nrdar://problem/24265174\n\nDifferential Revision: http://reviews.llvm.org/D20334\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274132 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a60979362bfa8f2b2c02acf52377880bb24d9a8","date":"2016-06-30T04:21:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid applying unary minus to unsigned integers. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274203 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb4c5e90a76f1f90de3e7ac5eafbc64254fafc3d","date":"2016-06-30T04:22:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unreferenced parameter warning. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274204 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16715b9a889f7be53a45150366c16048a1fd0219","date":"2016-06-30T04:28:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unary_function inheritance assumption. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274205 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68d0f230e9ec6cbc275cb703c28e3cdff5071068","date":"2016-06-30T04:29:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of terse static assert. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274206 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8db06d71c2ac81e0363be7117fbc6dac7dc48c15","date":"2016-06-30T04:31:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make instreambuf.iterator/types.pass.cpp more portable.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274207 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c848cefa276f90d7db2c4131e2ce1c18ae0a6f7f","date":"2016-06-30T04:40:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix ::reference typedef in insert iterators.\n\nSince at least the C++11 standard insert iterators are specified\nas having ::reference typedef void. Libc++ was not doing that.\nThis patch corrects the typedef.\n\nThis patch changes the std::iterator base class of insert_iterator,\nfront_insert_iterator and back_insert_iterator. This should not\nbe an ABI breaking change.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274209 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0fc5603d78d88560a16843913666959c2ab33adf","date":"2016-06-30T04:54:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make std::array typedef tests more portable.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274210 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0ee61352fa40e8f7569c7564fa3c88c802705f0","date":"2016-06-30T05:00:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make futures.overview enum tests more portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274211 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e9545e035fc07f8cf419b446983e289f8df187b","date":"2016-06-30T06:59:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update status of already completed Oulu issues.\n\n* P0163r0: Implemented in r273839.\n\n* LWG 2309: pthread_mutex_lock only returns this error if certain debug flags\n  were passed during construction. libc++ does not pass these flags. There is\n  nothing to do.\n\n* LWG 2310: Wording fix. No impact on libc++'s implementation.\n\n* LWG 2312: libc++'s std::tuple implementation already constrains the overloads\n  based on the number of arguments.\n\n* LWG 2549: libc++'s std::tuple already applied this fix.\n\n* LWG 2674: libc++ already depends on this relaxed wording.\n\n* LWG 2704, 2706, 2707, 2719, 2720, 2721, 2723, 2725, 2728: All of these filesystem were either\n  submitted by me and fixed before submission, or have already been applied.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274214 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c99f18af4df4906750290d50f3d168aaf45c0aa","date":"2016-06-30T15:11:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2436: 'Comparators for associative containers should always be CopyConstructible'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274235 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca894508f9e7324c3d3386e08b5eb69ae08b34f6","date":"2016-06-30T15:28:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2441: 'Exact-width atomic typedefs should be provided'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f0419f1dccf299884645f11cf0bc27f233fae326","date":"2016-06-30T15:50:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2596: 'vector::data() should use addressof'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274241 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"256814f75194b82d4b320ad7bc17e5f99600b2e1","date":"2016-06-30T16:03:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2684: 'priority_queue lacking comparator typedef'. We already did this, just added tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274243 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0f496b9891fd86a4471884405e313ab2342c48c","date":"2016-06-30T17:49:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Temporarily XFAIL the incomplete type tests for GCC while I figure out why adding a static_assert in r274235 broken them\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274250 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b02cf8cf16919074f88c26d412c34ad2cffc097","date":"2016-06-30T17:52:51.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2688: 'clamp misses preconditions and has extraneous condition on result'. We already did this, just added tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274252 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d94c7765c657b361712eb000c6183cdefcaf54b2","date":"2016-06-30T17:59:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2667, 2669, 2670, 2671, 2673 as complete. These issues are wording clarifications; no code changes required.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274253 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd18d90adf8131f88cdfcb4ecdda49f532c0874d","date":"2016-06-30T18:05:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2550, 2551, 2555, 2685, 2698 as complete. These issues are wording clarifications; no code changes required.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274255 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3efb2c901e9cdf0c53de0ba62c547f413eb58947","date":"2016-06-30T20:46:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274274 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a93312404841a91c62e27819daf0479d82246ea","date":"2016-06-30T22:05:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix static assert problem on gcc; remove XFAILs that I put in in r274250\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3ccd96ede26a2f383328234e01eb7a9f870691e","date":"2016-06-30T22:34:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace __make_tuple_indices implementation with superior implementation.\n\nThe previous __make_tuple_indices implementation caused O(N) instantiations\nand was pretty inefficient. The C++14 __make_integer_sequence implementation\nis much better, since it either uses a builtin to generate the sequence or\na very nice Log8(N) implementation provided by richard smith.\n\nThis patch moves the __make_integer_sequence implementation into __tuple\nand uses it to implement __make_tuple_indices.\n\nSince libc++ can't expose the name 'integer_sequence' in C++11 this patch\nalso introduces a dummy type '__integer_sequence' which is used when generating\nthe sequence. One the sequence is generated '__integer_sequence' can be\nconverted into the required type; either '__tuple_indices' or 'integer_sequence'.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"053859ffc67425a00915010f9df3c899119114d2","date":"2016-07-01T03:54:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Flatten the tuple_element and __make_tuple_types implementations.\n\nThis patch attempts to improve the QoI of std::tuples tuple_element and\n__make_tuple_types helpers. Previously they required O(N) instantiations,\none for every element in the tuple\n\nThe new implementations are O(1) after __tuple_indices<Id...> is created.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed33ed80232cf0a5ed0c80069c7008e0416a5077","date":"2016-07-01T04:07:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Flatten tuple_constructible, tuple_convertible and tuple_assignable.\n\nThis patch is the last in a series that replaces recursive meta-programming\nin std::tuple with non-recursive implementations.\n\nPreviously std::tuple could only be instantiated with 126 elements before\nit blew the max template instantiation depth. Now the size of std::tuple is\nessentially unbounded (I've tested with over 5000 elements).\n\nOne unfortunate side-effect of this change is that tuple_constructible\nand similar no longer short circuit after the first failure. Instead they\nevaluate the conditions for all elements. This could be potentially breaking.\nI plan to look into this further.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274331 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1eb8739a33a6ace9bbe62cf9168b0ac642e2899c","date":"2016-07-01T23:22:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around ABI break caused by C++17 inline variables.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e8b134c1bc04feb8ad16d85ef28e3b7f582b1d7e","date":"2016-07-01T23:25:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Turn off ASAN's odr-violation diagnostics for now. See PR28391\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274404 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"103f80d81815358e21f0d5f9ba5087eb36ab041b","date":"2016-07-01T23:31:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove accidental change committed in r274403.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd20679f5fd7a0e96487b7d3063700e9bc8dfa1c","date":"2016-07-01T23:41:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add another workaround for C++17 inline variable ABI breakage.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cebaf5cbf8a8bfeb74bd1c82549f1773f84b5474","date":"2016-07-02T00:58:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make tuple_constructible and family lazy again.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5fb1e0ab0115e1cd499fef7b6e0d35e1dde1be87","date":"2016-07-02T01:25:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup SFINAE in tuple, and add tests for reference assignment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274414 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22c3e76205c4780985de380b46fd3c03dbbc5131","date":"2016-07-02T03:18:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rewrite std::get<Type>(...) helper using constexpr functions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274418 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b7a8718b8ae03eef37b8f9761f0947b8c03730d","date":"2016-07-02T03:21:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove workarounds for C++17 inline variable ABI break. It has been fixed in clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274419 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"990090f2adc30fbda69e59776b23789cdcce05b0","date":"2016-07-02T03:46:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Handle std::get<T>(...) for std::tuple<>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"38af0f8590cba8eb4cde09a8a7f4eb1b8139e859","date":"2016-07-02T05:19:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve performance of unordered_set<uint32_t>::find by 45%. Add benchmarks.\n\nThis patch improves the performance of unordered_set's find by 45% when\nthe value exists within the set. __hash_tables find method\nneeds to check if it's reached the end of the bucket by constraining the\nhash of the current node and checking it against the bucket index. However\nconstraining the hash is an expensive operations and it can be avoided if the\ntwo unconstrained hashes are equal. This patch applies that optimization.\n\nThis patch also adds a top level directory called benchmarks. 'benchmarks/'\nis intended to store any/all benchmarks written for the standard library.\nCurrently nothing is done with files under 'benchmarks/' but I would like\nto move towards introducing a formal format and test runner.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274423 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56a761493d40cd528d548dfbf5fb27fa37a92556","date":"2016-07-02T05:30:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add unordered_map::insert benchmark test and rename file\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274424 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8668189a1a82b96e4ccc24271190e0c147282b98","date":"2016-07-06T05:28:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix typo in #ifdef, and re-enable tests now that the green-dragon bots are no more\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274605 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e83446812dec68dac6baf7530d17b82549be40f","date":"2016-07-06T18:24:53.000Z","author":{"name":"Manman Ren","email":"manman.ren@gmail.com"},"message":"Revert r274605 due to bot failure: http://lab.llvm.org:8080/green/job/clang-stage1-cmake-RA-expensive/244/\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274651 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"95a22db0bbcd20718c5e9d3c7de680d00667815d","date":"2016-07-08T15:34:28.000Z","author":{"name":"Kwasi Mensah","email":"kmensah@google.com"},"message":"[libc++] Check hash before calling __hash_table key_eq function\n\nSummary: The current implementations of __hash_table::find used by std::unordered_set/unordered_map call key_eq on each key that lands in the same bucket as the key you're looking for. However, since equal objects mush hash to the same value, you can short-circuit the possibly expensive call to key_eq by checking the hashes first.\n\nReviewers: EricWF\n\nSubscribers: kmensah, cfe-commits\n\nDifferential Revision: http://reviews.llvm.org/D21510\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274857 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df4a22dec7d05ea8e5dc4d9f389be311cd92c49d","date":"2016-07-08T16:54:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG685 (which is from C++11!). Fixes PR#28421.  Note: this (subtly) changes the return type of operator-(Iter1, Iter2) where Iter1 is a reverse iterator or a move_iterator, and Iter2 is some other move/reverse iterator type. In practice, I believe that almost every time the second param will be const_XXX and this will mean that the return type will be the same as it was before.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274880 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faa37d5de618a47c220350ce9616ccd113535a6c","date":"2016-07-08T16:59:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix typo in #ifdef; leave tests commented out b/c gcc 4.8 harks on them.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@274882 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a98c1e77677c08d62292fb030636d0f87d26dc3","date":"2016-07-11T19:22:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Hide some internal symbols for memory resource.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275089 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45e9a936b64ee13890c95c9e809897e58fe668c9","date":"2016-07-11T19:57:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow is_swappable to SFINAE on deleted/ambiguous swap functions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275094 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51d7e8e38165ba367882161b9b7f88e7255c65aa","date":"2016-07-11T21:38:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Always use the allocator to construct/destruct elements of a deque/vector. Fixes PR#28412. Thanks to Jonathan Wakely for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275105 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"576639133af7bd202a285117818a5575d356e3be","date":"2016-07-11T22:02:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't compute modulus of hash if it is smaller than the bucket count.\n\nThis cleans up a previous optimization attempt in hash, and results in\nadditional performance improvements over that previous attempt. Additionally\nthis new optimization does not hinder the power of 2 bucket count optimization.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275114 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"683272df82feb112003df71d95cad04285036ddf","date":"2016-07-12T14:37:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark P0067 as 'postponed', because it will be revised before the next meeting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275170 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f4713b2d5d0076b5e86d66c0ad2d107f6957b0a","date":"2016-07-12T14:38:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Put the status in the right column\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275171 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab008f7cb113374f3bc7b0e648e90486f7c665da","date":"2016-07-12T14:39:13.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Add option to disable __deallocate #warning\n\nFrom r229162:\n  Visual Studio's SAL extension uses a macro named __deallocate. This\n  macro is used pervasively\nUsing -Werror when building for Windows can force the use of -Wno-#warnings\nspecifically because of this __deallocate #warning. Instead of forcing\nbuilds to disable all #warnings, this option allows libc++ to be built\nwithout this particular warning, while leaving other #warnings enabled.\n\nPatch by Dave Lee!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7a7384e0403ec2d4fdd292dc26cebdd61b64573","date":"2016-07-12T15:15:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"mark issue #2181 as complete; this was just a wording clarification\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275176 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3384fa62f2f362aef12f24570994badf8a28cfcd","date":"2016-07-12T15:29:35.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"mark issue #2422 as complete; this was just a wording clarification\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275177 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f5435853f4d387e04c06a12b3c27ecbe49aa67a","date":"2016-07-12T15:50:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests for the meta.unary.props that do not require a complete type. This is part of LWG#2582\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275184 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6752747db05b422d10762206db35149bc8b3b00","date":"2016-07-12T20:14:52.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: name anonymous structs\n\nAs discussed in http://reviews.llvm.org/D22073\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275210 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"211f9a485c4b13c61553d55a7bc662e1506b28fd","date":"2016-07-12T20:15:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add more tests for LWG#2582. No code changes needed, just tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275211 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a80de495f78131863bcbcb722e703e0623bfeb99","date":"2016-07-13T16:58:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Constuct a sentry object in istream::readsome, and handle failures appropriately. Fixes PR#28217.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e732e94aee0ea0f99031a7ad5ee5e00c1e5304c","date":"2016-07-17T20:32:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix std::experimental::optional tests. Patch from Casey Carter.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"41aafc25c6e7edccea898e8980ee7c5cac320146","date":"2016-07-17T22:04:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Check for unconstrained hash equality before constrained hash equality.\n\nThis patch implements a simple optimization in __hash_table::find. When iterating\nthe found bucket we only constrain the bucket elements hash if it doesn't\nalready match the unconstrained hash of the specified key. This prevent\nthe performance of an expensive modulo operation.\n\nSince the bucket element almost always matches the key, especially when the\nload factor is low, this optimization has large performance impacts. For\na unordered_set<int> of random integers this patch improves the performance of\n'find(...)' by 40%.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5839fedf289f656cc6819a775a0328b643dc7c6b","date":"2016-07-18T00:35:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement C++17 tuple bits. Including apply and make_from_tuple.\n\nThis patch upgrades <tuple> to be C++17 compliant by implementing:\n\n* tuple_size_v: This was forgotten when implementing the other _v traits.\n* std::apply: This was added via LFTS v1 in p0220r1.\n* std::make_from_tuple: This was added in p0209r2.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c79e8b692dae2597587e690ba958aaa3f5197e5b","date":"2016-07-18T01:52:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Suppress warning in make_from_tuple tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275748 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c71c30466312462cf213d15122a06edd9838a097","date":"2016-07-18T01:58:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename and rework `_LIBCPP_TRIVIAL_PAIR_COPY_CTOR`. Move FreeBSD configuration in-tree.\n\nThis patch does the following:\n\n* It renames `_LIBCPP_TRIVIAL_PAIR_COPY_CTOR` to `_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR`.\n* It automatically enables this option on FreeBSD in ABI V1, since that's the current ABI FreeBSD ships.\n* It cleans up the handling of this option in `std::pair`.\n\nI would like the sign off from the FreeBSD maintainers. They will no longer need to keep their `__config` changes downstream.\n\nI'm still hoping to come up with a better way to maintain the ABI without needing these constructors.\n\nReviewed in https://reviews.llvm.org/D21329\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"465c68a7b9479f5b1c481ec40cbea2e45565843d","date":"2016-07-18T02:02:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Upgrade arcconfig to use https\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ae7274ea516e3d1cd374f8af67d3c3fe181478f","date":"2016-07-18T02:05:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add includes in test. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275751 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0751cc188f57f8d8b31b93e8b17d7ad03f63398d","date":"2016-07-18T02:29:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent failures by marking Clock::is_steady tests as UNSUPPORTED: asan.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275753 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5750d5c05a7c844e04376031efa53f3ddd440b0","date":"2016-07-18T03:00:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add checkpoint diagnostics to help diagnose buildbot failures.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275754 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"755baa9f4e0d8eeee16e1378d97ce0c99ed591c4","date":"2016-07-18T04:48:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve ABI tests for std::pair.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275757 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5432e3b9a18b4b21b31a13c526e47bc8b5ef860f","date":"2016-07-18T06:01:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rework libatomic handling in CMake and LIT.\n\nThis patch updates the way libc++ handles checking for libatomic, in part\nto prepare for https://reviews.llvm.org/D22073.\n\nChanges:\n* 'LIBCXX_HAS_ATOMIC_LIB' is now set whenever libatomic is available even libc++\n   doesn't need to manually link it.\n* 'LIBCXX_HAVE_CXX_ATOMICS_WITH_LIB' is now used to detect when libatomic\n   needs to be manually linked.\n* 'LIBCXX_HAS_ATOMIC_LIB' now adds 'libatomic' as a available feature in the\n   test suite.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275759 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9c20327ac630cf3351d4230686f41020b082e74","date":"2016-07-18T06:06:50.000Z","author":{"name":"Jonas Hahnfeld","email":"Hahnfeld@itc.rwth-aachen.de"},"message":"[libcxx][filesystem] Remove setgid from parent before testing permissions\n\nman page for mkdir says: \"If the parent directory has the set-group-ID bit set,\nthen so will the newly created directory.\"\n\nDifferential Revision: https://reviews.llvm.org/D22265\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275760 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"066feb82496556cbac51cb1d1d4f18329e37fec5","date":"2016-07-18T06:15:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove locale tests that depend on enviroment variables.\n\nConstructing a std::locale object from an empty string selects the language\nfrom the current environment variables. If the environment variables name\na locale that doesn't exist, or isn't installed, then the construction of\nfacets using that locale may throw.\n\nThis patch removes tests that use 'std::locale l(\"\")'.\n\nThe optimal solution would be to manually set the environment variables\nin the test. Unfortunately there is no portable way to do this.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f013898d11edbc7f73b7bb802e687d903812860","date":"2016-07-18T13:19:00.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change a couple ifdefs from '#if __cplusplus >= 2011xxx' to '#ifndef _LIBCPP_CXX03_LANG'. No functionality change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275787 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65eb1e90fa86cb1dac65173b65cb782cea0053e1","date":"2016-07-18T17:23:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Don't use pthread initializers in constexpr constructors. Patch by elram. Reviewed at https://reviews.llvm.org/D21637.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275819 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc8847cefae8faf051c0ae82e41648a88027557c","date":"2016-07-18T20:27:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Bump version # to 4.0.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@275904 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7310ec83f3b69b140bb38a9879afeb9936cf5fcc","date":"2016-07-19T17:56:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix undefined behavior in __tree\n\nSummary:\nThis patch attempts to fix the undefined behavior in __tree by changing the node pointer types used throughout. The pointer types are changed for raw pointers in the current ABI and for fancy pointers in ABI V2 (since the fancy pointer types may not be ABI compatible).\n\nThe UB in `__tree` arises because tree downcasts the embedded end node and then deferences that pointer. Currently there are 3 node types in __tree.\n\n* `__tree_end_node` which contains the `__left_` pointer. This node is embedded within the container.\n* `__tree_node_base` which contains `__right_`, `__parent_` and `__is_black`. This node is used throughout the tree rebalancing algorithms.\n* `__tree_node` which contains `__value_`.\n\nCurrently `__tree` stores the start of the tree, `__begin_node_`, as a pointer to a `__tree_node`. Additionally the iterators store their position as a pointer to a `__tree_node`. In both of these cases the pointee can be the end node. This is fixed by changing them to store `__tree_end_node` pointers instead.\n\nTo make this change I introduced an `__iter_pointer` typedef which is defined to be a pointer to either `__tree_end_node` in the new ABI or `__tree_node` in the current one.\nBoth `__tree::__begin_node_` and iterator pointers are now stored as `__iter_pointers`.\n\nThe other situation where `__tree_end_node` is stored as the wrong type is in `__tree_node_base::__parent_`.  Currently `__left_`, `__right_`, and `__parent_` are all `__tree_node_base` pointers. Since the end node will only be stored in `__parent_` the fix is to change `__parent_` to be a pointer to `__tree_end_node`.\n\nTo make this change I introduced a `__parent_pointer` typedef which is defined to be a pointer to either `__tree_end_node` in the new ABI or `__tree_node_base` in the current one.\n\nNote that in the new ABI `__iter_pointer` and `__parent_pointer` are the same type (but not in the old one). The confusion between these two types is unfortunate but it was the best solution I could come up with that maintains the ABI.\n\nThe typedef changes force a ton of explicit type casts to correct pointer types and to make current code compatible with both the old and new pointer typedefs. This is the bulk of the change and it's really messy. Unfortunately I don't know how to avoid it.\n\nPlease let me know what you think.\n\n\n\n\n\nReviewers: howard.hinnant, mclow.lists\n\nSubscribers: howard.hinnant, bbannier, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D20786\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276003 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d9b9ef75a8ada5f9caaf2f4984bfb8094ade2590","date":"2016-07-19T23:07:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add support for benchmark tests using Google Benchmark.\n\nSummary:\nThis patch does the following:\n\n1. Checks in a copy of the Google Benchmark library into the libc++ repo under `utils/google-benchmark`.\n2. Teaches libc++ how to build Google Benchmark against both (A) in-tree libc++ and (B) the platforms native STL.\n3. Allows performance benchmarks to be built as part of the libc++ build.\n\nBuilding the benchmarks (and Google Benchmark) is off by default. It must be enabled using the CMake option `-DLIBCXX_INCLUDE_BENCHMARKS=ON`. When this option is enabled the tests under `libcxx/benchmarks`  can be built using the `libcxx-benchmarks` target.\n\nOn Linux platforms where libstdc++ is the default STL the CMake option `-DLIBCXX_BUILD_BENCHMARKS_NATIVE_STDLIB=ON` can be used to build each benchmark test against libstdc++ as well. This is useful for comparing performance between standard libraries.\n\nSupport for benchmarks is currently very minimal. They must be manually run by the user and there is no mechanism for detecting performance regressions.\n\nKnown Issues:\n\n* `-DLIBCXX_INCLUDE_BENCHMARKS=ON` is only supported for Clang, and not GCC, since the `-stdlib=libc++` option is needed to build Google Benchmark.\n\n\n\n\n\n\n\n\nReviewers: danalbert, dberlin, chandlerc, mclow.lists, jroelofs\n\nSubscribers: chandlerc, dberlin, tberghammer, danalbert, srhines, hfinkel\n\nDifferential Revision: https://reviews.llvm.org/D22240\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276049 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99029f12ebe07e8fa96e53500e349dad2968e347","date":"2016-07-19T23:27:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add heterogeneous comparator support for __debug_less. Fixes PR17147.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276059 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"781fb2a7380ccc6a0ff4c535c31234b875f20db8","date":"2016-07-20T00:14:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add SFINAE on additional overloads of std::complex functions. Fixes PR19921.\n\nThe functions arg, conj, imag, norm, proj, and real have additional overloads\nfor arguments of integral or floating point types. However these overloads should\nnot allow conversions to the integral/floating point types, only exact matches.\n\nThis patch constrains these functions so they no longer allow conversions.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276067 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c747b9e8978a11701c8c6e1382f4e88a3fbec29","date":"2016-07-20T02:57:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for reference binding assertions in std::tuple.\n\nLibc++ provides static assertions to detect reference binding issues inside\ntuple. This patch adds tests for those diagnostics.\n\nIt should be noted that these static assertions technically violate the\nstandard since it allows these illegal bindings to occur.\n\nAlso see https://llvm.org/bugs/show_bug.cgi?id=20855\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276078 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"155b681794b683c446d82cde8f5535628a317214","date":"2016-07-20T05:01:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Reimplement is_constructible fallback implementation. Fixes PR21574.\n\nThe previous implementation relied highly on specializations to handle\nspecial cases. This new implementation lets the compiler do the work when possible.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276084 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16ed718fc60e0221fa0224d0bec6563a44b8cda4","date":"2016-07-20T05:21:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move std::function constructor SFINAE into template parameter list. Fixes PR20002.\n\nAlthough inheriting constructors have already been fixed in Clang 3.9 I still\nchoose to fix std::function so users can derive from it with older compilers.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276090 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ee34209c63120c771290269f3a0845e9f90ac75","date":"2016-07-20T05:22:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missed test in r276090.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62365dc24eb382e54ec036317041a7c34ecb4c64","date":"2016-07-20T06:36:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Unbreak is_constructible tests for Clang <= 3.7.\n\nThere is a bug in Clang's __is_constructible builtin that causes it\nto return true for function types; ex [T = void()].\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276092 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bda156d540d22cbf67814c328da7d7459b402ec4","date":"2016-07-20T06:46:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix inheriting constructor test for std::function.\n\nThe test I originally checked in only worked with ToT Clang. This patch\nupdates the test so that it works as far back as 3.5.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b5bdc070f2d34d5599e67a75dd2fda6db1981c9e","date":"2016-07-20T22:53:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Unbreak traits tests by handling differences between version macros in clang/apple-clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276200 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2edb326926d20944e94f4161d82988f9135a43b7","date":"2016-07-20T23:37:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable warning flags when running .fail.cpp tests.\n\nIncreasingly the .fail.cpp tests are written using -verify, making them\nsensitive to the exact diagnostics generated by the compiler. To prevent\nadditional diagnostics from being generated, and causing the tests to fail,\nthis patch removes the warning flags when compiling those tests.\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276208 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3816ef98b1665320bd5eba590c4906e9dbd070cc","date":"2016-07-21T03:20:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0084r2. Changing emplace return types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276230 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a2b9335bbbf5ec7474568875fe7e7a5f8598570","date":"2016-07-21T03:24:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark P0337r0 as complete. It was already implemented in std::experimental\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276231 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f50841f3ac7a0d6e392ab462d915bfe3ec6fdb13","date":"2016-07-21T03:28:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark P0358r1 as complete. It is already implemented\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276233 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e00d6db319aaec6acb6db0eafd059c7fb97bf66","date":"2016-07-21T05:31:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement std::string_view as described in http://wg21.link/P0254R1. Reviewed as https://reviews.llvm.org/D21459\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276238 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15362334f6582752c667e7670186227d839f92d2","date":"2016-07-21T06:24:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some string_view tests that were failing when exceptions were disabled. Also comment out a _LIBCPP_ASSERT that gcc4.9 was complaining about. Will revisit that later.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276241 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f82c1cef1deb6a93f1d37006fed77e46c58399b2","date":"2016-07-21T13:18:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Another fix to appease the no-exception bots.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276272 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7c56f99282a72ac2a08196cd167989188301c5b8","date":"2016-07-21T13:19:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Again, w/o the tabs\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276273 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c61cb6d646b10309beff1d0b2ec0c1c0c59bb806","date":"2016-07-21T17:34:28.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"Remove FIXME for feature test macro\n\nThe value I'd picked was correct, as per the recently published SG10 paper http://wg21.link/p0096r3\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea213b96a6532ff1955539c7e063222f581153a0","date":"2016-07-23T01:16:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Diagnose invalid memory order arguments in <atomic>. Fixes PR21179.\n\nSummary:\nThis patch uses the __attribute__((enable_if)) hack suggested by @rsmith to diagnose invalid arguments when possible.\n\nIn order to diagnose an invalid argument `m` to `f(m)` we provide an additional overload of `f` that is only enabled when `m` is invalid. When that function is enabled it uses __attribute__((unavailable)) to produce a diagnostic message.\n\nReviewers: mclow.lists, rsmith, jfb, EricWF\n\nSubscribers: bcraig, jfb, rsmith, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D22557\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276506 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bdbae4cbad959b0076972d3fafe9e1fd6cc20962","date":"2016-07-23T01:43:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r276506 - Diagnose invalid memory order arguments in <atomic>.\n\nThere is a bug in Clang 3.6 and earlier that causes compile failures.\nI suspect it's due to the usage of member function parameter names in the\nattributes.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276507 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2645dbe87f85bd563a623cf36e2c1917b3c45117","date":"2016-07-23T03:10:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0392r0. Integrate filesystem::path and string_view.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276511 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6535885b985dcfdd253754ff8107c7ee7945eba","date":"2016-07-23T20:36:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix undefined behavior in __hash_table\n\nSummary:\nThis patch attempts to fix the undefined behavior in __hash_table by changing the node pointer types used throughout. The pointer types are changed for raw pointers in the current ABI and for fancy pointers in ABI V2 (since the fancy pointer types may not be ABI compatible).\n\nThe UB in `__hash_table` arises because tree downcasts the embedded end node and then deferences that pointer. Currently there are 2 node types in __hash_table:\n\n* `__hash_node_base` which contains the `__next_` pointer.\n* `__hash_node` which contains `__hash_` and `__value_`.\n\nCurrently the bucket list, iterators, and `__next_` pointers store pointers to `__hash_node` even though they all need to store `__hash_node_base` pointers.\nThis patch makes that change by introducing a `__next_pointer` typedef which is a pointer to `__hash_node` in the current ABI and `__hash_node_base` afterwards.\n\nOne notable change is to the type of `__bucket_list` which used to be defined as `unique_ptr<__node_pointer[], ...>` and is now `unique_ptr<__next_pointer[], ...>` meaning that we now allocate and deallocate different types using a different allocator. I'm going to give this part of the change more thought since it may introduce compatibility issues.\n\nThis change is similar to D20786.\n\n\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D20787\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276533 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eef85d904452972fff7a23d31718e2821d014008","date":"2016-07-23T22:19:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement the in_place tags from p0032r3.\n\nThat paper also has changes to any/optional but those will\nbe implemented later.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276537 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c672a7453d354811645723629765daa42f7dfa6a","date":"2016-07-24T03:51:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0040r3: Extending memory management tools\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276544 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f630e8ffaf2cd78c21df6f120c1b41657d8afcf","date":"2016-07-24T04:07:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG2328. Rvalue stream extraction should perfect forward.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276545 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1a41a9f4de873298696ebbe6ce0a97352978516","date":"2016-07-24T04:16:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2393. Check for LValue-callability.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276546 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"678bf67dcf876b3833286754c0e9324e7919a0dd","date":"2016-07-24T04:41:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix memory leak in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276547 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b5233f11cf51eaebe840c25d28100869672fb57","date":"2016-07-24T05:51:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make pair/tuples assignment operators SFINAE properly.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276548 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7570906b12a6d7d2fe7dc80ca8ee4a29d55d4b2","date":"2016-07-24T06:22:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Skip chash computation in insert/emplace if the unconstrained hash matches.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276549 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b90f9db20e59349d7698297a36c3f95ff63aef34","date":"2016-07-24T06:51:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Start adding benchmarks for vector\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276552 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15d8a56532235069b1f8566455c22d1a9cf7f18e","date":"2016-07-24T07:42:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add __is_inplace_type metafunction helper\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276556 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"923899e66565e6e0ab2781204745001530285b7c","date":"2016-07-24T08:16:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"commit test missing from r276556\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276558 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a54d1cb85233c6a06cbb85a459a7d63f2f8b82aa","date":"2016-07-24T23:08:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard libc++ specific tests SFINAE on std::bind's call operator. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3db71902aac604a2ab0622168ae9f28e6bc9281","date":"2016-07-24T23:13:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark bucket_size() assertions as non-portible. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276578 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ee04dd6f27c786e20cbb13912f893d0e00854f1","date":"2016-07-24T23:16:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make bucket_count() greater-equal assertions portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276580 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a29e0e5ba2ad9a130fc712591da374e80cc7153e","date":"2016-07-24T23:19:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make move_noexcept.pass.cpp tests more portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3ecccdf4868425f9f73b65553bea9b9ae64b0aa","date":"2016-07-24T23:32:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix MSVC unreferenced parameter warning. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276583 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5eec7d6e30f61f58ad41a939a97822f4c15756dc","date":"2016-07-24T23:34:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark bucket() assertions as non-portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276584 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aafdbda64620e890af214a60860a11d7ff0d38f1","date":"2016-07-24T23:36:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix portability issues in <random> tests. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4218032e709ac1f8947d61e3846ec1b09d0474de","date":"2016-07-24T23:48:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unique_ptr.runtime tests for null inputs. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276587 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a974c6835a938df9fb86b7aebe01df2371298a2","date":"2016-07-24T23:49:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix a non-standard allocator in vector tests. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276588 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec1f15d9af7c014002aa27b9bb5b8f9aa1714532","date":"2016-07-25T00:02:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around MSVC's non-standard ABI for enums. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276589 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4a698aa309b7c7ac7121f56607a719804c3efb2","date":"2016-07-25T00:15:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make swap_noexcept.pass.cpp tests more portable. Patch from STL@microsoft.com.\n\nSee D21820 for more information (https://reviews.llvm.org/D21820).\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276590 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03388d19d6b8ff1c95a2a57865b320ff13cd425d","date":"2016-07-25T00:18:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make move_assign_noexcept.pass.cpp tests more portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0809a7f62b7e43e2e5f3a31f66dd8cf097cfeb71","date":"2016-07-25T00:26:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark bucket_count() assertions as non-portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"932604f8d1f8bdc196efea09d701cf4eba614502","date":"2016-07-25T00:48:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't SFINAE pair's copy assignment operator in C++03 mode.\n\nIn C++03 mode evaluating the SFINAE can cause a hard error due to\naccess control violations. This is a problem because the SFINAE\nis evaluated as soon as the class is instantiated, and not later.\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276594 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"775417d97c68d7cba739f8f7bcfa308d0ddec670","date":"2016-07-25T00:50:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make dtor_noexcept.pass.cpp tests more portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276595 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c76d8f7ff461b5d5d658efa75c27ec240688df23","date":"2016-07-25T01:45:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r276548 - Make pair/tuples assignment operators SFINAE properly.\n\nThis is a breaking change. The SFINAE required is instantiated the second\nthe class is instantiated, and this can cause hard SFINAE errors\nwhen applied to references to incomplete types. Ex.\n\nstruct IncompleteType;\nextern IncompleteType it;\nstd::tuple<IncompleteType&> t(it); // SFINAE will blow up.\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"602fe15f55ea6166eeb26b3226d311eed4b55767","date":"2016-07-25T02:08:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make std::is_assignable tolerate references to incomplete types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4be71c6619981fbd2145107a83ea39e67bb59671","date":"2016-07-25T02:36:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit r276548 - Make pair/tuples assignment operators SFINAE properly.\n\nI think I've solved issues with is_assignable and references to incomplete\ntypes. The updated patch adds tests for this case.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276603 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1445fd8edd9c19aae2af818f51d32f37d6c4d30","date":"2016-07-25T04:32:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement the std::pair parts of \"Improving pair and tuple\". Completes N4387.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276605 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0cf9cb1bc05deb1bb01f013a034e29c31f91655","date":"2016-07-25T04:56:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove use of C++1z static assert in C++11 test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276608 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3e7cacb35123ef8eee03741eb986999e7c250ef","date":"2016-07-26T14:28:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LCM and GCD for Library Fundamentals. Reviewed as https://reviews.llvm.org/D21343.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c1e91d9a35e51778b49a73b39012768770cd482","date":"2016-07-26T14:29:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LCM and GCD for C++17. Same code as for Library Fundamentals TS.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276751 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6521d677b75ed4d8946ba2ee6f54fd7bfccc4da","date":"2016-07-28T04:52:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a bunch of noexcepts to char_traits and string_view.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@276955 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16d768ba0d9a4c9a1b67f5600f1584977577007c","date":"2016-08-01T17:51:26.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Improve shared_ptr dtor performance\n\nIf the last destruction is uncontended, skip the atomic store on\n__shared_weak_owners_. This shifts some costs from normal\nshared_ptr usage to weak_ptr uses.\n\nhttps://reviews.llvm.org/D22470\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d836c0e3cbf265d0509ea4f53fb42eb603f090b6","date":"2016-08-01T19:27:08.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"libc++: test lock-free atomic alignment\n\nSummary:\nlibc++ implements std::atomic<_Tp> using __atomic_base<_Tp> with\n`mutable _Atomic(_Tp) __a_`. That member must be suitably aligned on\nrelevant ISAs for instructions such as cmpxchg to work properly, but\nthis alignment isn't checked anywhere. __atomic_base's implementation\nrelies on _Atomic doing \"the right thing\" since it's under the\ncompiler's control, and only the compiler knows about lock-freedom and\ninstruction generation. This test makes sure that the compiler isn't\nbreaking libc++'s expectations.\n\nI'm looking at a few odd things in the C++ standard, and will have a few\nother fixes around this area in the future.\n\nThis requires building with `-DLIBCXX_HAS_ATOMIC_LIB=True`, the test\nmarks the dependency as REQUIRES and won't be run without.\n\nReviewers: cfe-commits\n\nSubscribers: EricWF, mclow.lists\n\nDifferential Revision: http://reviews.llvm.org/D22073\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277368 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6669cf33b61c9dfcb5f8e65df563c1b9dab11b0","date":"2016-08-01T19:56:39.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Adding smart_ptr benchmark\n\nInitial draft here:\nhttps://reviews.llvm.org/D22470\n... though this is Eric Fiselier's rewrite to fit in with Google\nBenchmark.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277373 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3ca9828e34240334763f5153b925060b29b26e4","date":"2016-08-01T20:28:13.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"atomics.align: XFAIL GCC\n\nIt currently fails because GCC changed the mangling of templates, which affects std::atomic using __attribute__((vector(X))). The bot using GCC 4.9 generates the following message:\n\nIn file included from /home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/test/libcxx/atomics/atomics.align/align.pass.sh.cpp:24:0:\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic: In instantiation of 'atomic_test<T>::atomic_test() [with T = __vector(2) int]':\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/test/libcxx/atomics/atomics.align/align.pass.sh.cpp:66:3:   required from here\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:583:5: error: 'std::__1::__gcc_atomic::__gcc_atomic_t<_Tp>::__gcc_atomic_t() [with _Tp = __vector(2) int]' conflicts with a previous declaration\n     __gcc_atomic_t() _NOEXCEPT = default;\n     ^\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:583:5: note: previous declaration 'std::__1::__gcc_atomic::__gcc_atomic_t<_Tp>::__gcc_atomic_t() [with _Tp = __vector(1) int]'\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:583:5: note: -fabi-version=6 (or =0) avoids this error with a change in mangling\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:583:5: error: 'std::__1::__gcc_atomic::__gcc_atomic_t<_Tp>::__gcc_atomic_t() [with _Tp = __vector(2) int]' conflicts with a previous declaration\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:583:5: note: previous declaration 'std::__1::__gcc_atomic::__gcc_atomic_t<_Tp>::__gcc_atomic_t() [with _Tp = __vector(1) int]'\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:583:5: note: -fabi-version=6 (or =0) avoids this error with a change in mangling\n/home/llvm-builder/llvm-buildslave-root/libcxx-libcxxabi-x86_64-linux-ubuntu-gcc49-cxx11/llvm/projects/libcxx/include/atomic:939:5: note: synthesized method 'std::__1::__gcc_atomic::__gcc_atomic_t<_Tp>::__gcc_atomic_t() [with _Tp = __vector(2) int]' first required here\n     __atomic_base() _NOEXCEPT = default;\n     ^\n\nGCC's docs say the following about ABI version 6:\nVersion 6, which first appeared in G++ 4.7, corrects the promotion behavior of C++11 scoped enums and the mangling of template argument packs, const/static_cast, prefix ++ and –, and a class scope function used as a template argument.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277380 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8842ea9e949b0d5c8e85d2cccc00d101900cebe2","date":"2016-08-01T23:34:29.000Z","author":{"name":"JF Bastien","email":"jfb@google.com"},"message":"NFC: fix typo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277404 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db870e60158350d5192e34027919e33252d059ed","date":"2016-08-02T13:43:48.000Z","author":{"name":"Ben Craig","email":"ben.craig@codeaurora.org"},"message":"Fixing 'Aquire' typo and libcxx build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4e1f9a01009e667dafb97027c59e14a03e04574b","date":"2016-08-02T20:21:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Pass compilers when configuring  Google Benchmark.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277512 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b49c67fad2b9599088babf827dfe00523429be4d","date":"2016-08-02T21:34:48.000Z","author":{"name":"Hubert Tong","email":"hubert.reinterpretcast@gmail.com"},"message":"[libcxx] basic_regex: add traits_type, string_type\n\nSummary:\nIn the synopsis in C++11 subclause 28.8 [re.regex], `basic_regex` is\nspecified to have member typedefs `traits_type` and `string_type`. This\nchange adds them to libc++.\n\nReviewers: mclow.lists, rsmith, hubert.reinterpretcast\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D22698\n\nPatch by Jason Liu!\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277526 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29bb84bd57dfaab74cf02d4bf04bb26c410d803f","date":"2016-08-03T05:46:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Silence another occurrence of MSVC's suprious unused warning. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277572 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60c8accd6e1bc4dba19b5462e7459648a14fb4c4","date":"2016-08-03T05:48:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix an MSVC x64 compiler warning. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d9e2e2bc8f3273b7607e96ee0b0adfdcdcdf41b","date":"2016-08-03T05:50:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix compile error due to mismatched iterator types. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277574 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eeae30ead0fedb3f34a1d7bcc70f7004682cf24e","date":"2016-08-03T05:51:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add MSVC specifics to .gitignore. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83e9013655feb801789851807f83abfc79b9762c","date":"2016-08-07T21:47:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG 2726 as complete. No code change needed.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277964 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bae734ed9ac69cad3bb3c9093e1abf63d55f3ce","date":"2016-08-07T22:18:33.000Z","author":{"name":"Hubert Tong","email":"hubert.reinterpretcast@gmail.com"},"message":"[libcxx] Add \"flag\" default arg: basic_regex ptr_size_flag ctor\n\nSummary:\nThe synopsis in C++11 subclause 28.8 [re.regex] has:\n```\nbasic_regex(const charT* p, size_t len,\n            flag_type f = regex_constants::ECMAScript);\n```\n\nThe default argument is added to libc++ by this change.\n\nReviewers: mclow.lists, rsmith, hubert.reinterpretcast\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D22702\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f9ee490e7c26f876cd739988319f2a83bf56ff6","date":"2016-08-07T22:23:24.000Z","author":{"name":"Hubert Tong","email":"hubert.reinterpretcast@gmail.com"},"message":"Revert r277966. Forgot patch attribution.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f6e8e214187badc39b356f421d3d15ed7976103","date":"2016-08-07T22:26:04.000Z","author":{"name":"Hubert Tong","email":"hubert.reinterpretcast@gmail.com"},"message":"[libcxx] Add \"flag\" default arg: basic_regex ptr_size_flag ctor\n\nSummary:\nThe synopsis in C++11 subclause 28.8 [re.regex] has:\n```\nbasic_regex(const charT* p, size_t len,\n            flag_type f = regex_constants::ECMAScript);\n```\n\nThe default argument is added to libc++ by this change.\n\nReviewers: mclow.lists, rsmith, hubert.reinterpretcast\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D22702\n\nReapplies r277966.\nPatch by Jason Liu!\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277968 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9639abed2e683f5451027841e1053841452ca8b4","date":"2016-08-08T02:22:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix copy/move constructor annotation for the uses-allocator test types.\n\nPreviously the copy/move constructors of the test types did not\nproperly set the arg_id to T const& or T&& respectivly.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@277970 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"96f10171c0924f5638ee01b4fa76bee62e02ce29","date":"2016-08-08T18:01:50.000Z","author":{"name":"Eugene Zelenko","email":"eugene.zelenko@gmail.com"},"message":"CMakeLists.txt cleanups: synchronize version with rest of LLVM, consistent spacing.\n\nDifferential revision: https://reviews.llvm.org/D23091\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278032 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b640da0b315ead39690d4d65c76938ab8aeb5449","date":"2016-08-08T22:57:25.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Allow building both shared and static library\n\nThis change allows building both shared and static version of libc++\nin a single build, sharing object files between both versions.\n\nDifferential Revision: https://reviews.llvm.org/D23232\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1fceb5e53d3e39b1167cc023c266876999e9c4fc","date":"2016-08-09T03:05:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove *super* old test suite results doc for Linux and Windows.\n\nNeither of these results files has been update in years. Linux now has a dozen\nor so buildbots tracking it and the Windows results are no longer relevant.\nI plan on looking into getting a Windows buildbot going using Appveyor in the\ncoming days.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278087 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"30b48cb1b3a0c4fcc1887259bd215ad8738d21b4","date":"2016-08-09T18:56:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update in-tree Google Benchmark to current ToT.\n\nI've put some work into the Google Benchmark library in order to make it easier\nto benchmark libc++. These changes have already been upstreamed into\nGoogle Benchmark and this patch applies the changes to the in-tree version.\n\nThe main improvement in the addition of a 'compare_bench.py' script which\nmakes it very easy to compare benchmarks. For example to compare the native\nSTL to libc++ you would run:\n\n`$ compare_bench.py ./util_smartptr.native.out ./util_smartptr.libcxx.out`\n\nAnd the output would look like:\n\nRUNNING: ./util_smartptr.native.out\nBenchmark                          Time           CPU Iterations\n----------------------------------------------------------------\nBM_SharedPtrCreateDestroy         62 ns         62 ns   10937500\nBM_SharedPtrIncDecRef             31 ns         31 ns   23972603\nBM_WeakPtrIncDecRef               28 ns         28 ns   23648649\nRUNNING: ./util_smartptr.libcxx.out\nBenchmark                          Time           CPU Iterations\n----------------------------------------------------------------\nBM_SharedPtrCreateDestroy         46 ns         46 ns   14957265\nBM_SharedPtrIncDecRef             31 ns         31 ns   22435897\nBM_WeakPtrIncDecRef               34 ns         34 ns   21084337\nComparing ./util_smartptr.native.out to ./util_smartptr.libcxx.out\nBenchmark                          Time           CPU\n-----------------------------------------------------\nBM_SharedPtrCreateDestroy         -0.26         -0.26\nBM_SharedPtrIncDecRef             +0.00         +0.00\nBM_WeakPtrIncDecRef               +0.21         +0.21\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278147 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3df1df14bf596c7831e9f782f83c861b49493340","date":"2016-08-10T01:02:28.000Z","author":{"name":"Matthias Braun","email":"matze@braunis.de"},"message":"test/hard_link_count(): Fix test on darwin\n\nThe hard link count that stat reports are different between normal hfs and the\ncase sensitive variant. Accept both.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278191 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02e94f8095771114a3930e1a1eb57d0634db46fc","date":"2016-08-10T20:04:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"std:: quailfy the calls for cend/crend/cbegin/cend. Fixes bug 28927.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278282 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d08bc9a9ff2429bec70e0c9ad81b63f846cab03","date":"2016-08-10T22:45:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2148: Make non-enum default hash specialization well-formed\n\nSummary:\nThis patch removes the static_assert for non-enum types in the primary hash template. Instead non-enum types create a hash<T> specialization that is not constructible nor callable.\n\nSee also:\n  * http://cplusplus.github.io/LWG/lwg-active.html#2543\n  * https://llvm.org/bugs/show_bug.cgi?id=28917\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: mehdi_amini, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D23331\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278300 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e739d54f86e3a7f0b051f7190ffd8d40ed05ca44","date":"2016-08-11T03:13:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Add std::any\n\nSummary:\nThis patch adds std::any by moving/adapting <experimental/any>.\n\nThis patch also implements the std::any parts of p0032r3 (http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0032r3.pdf)\nand LWG 2509 (http://cplusplus.github.io/LWG/lwg-defects.html#2509).\n\nI plan to push it in a day or two if there are no comments.\n\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D22733\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a60053b9ee06cef31b47d7fd6928a85deb3ed430","date":"2016-08-11T03:33:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing REQUIRES for C++14\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278311 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92741e2493312b6ed4e6bcc2359f2381a80b6594","date":"2016-08-11T07:04:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor test archetypes implementation.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278319 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1ed1df3a31a18d9a902e0da48feec8f6238c0143","date":"2016-08-11T08:15:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Unbreak C++03 build.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb11bc4dd1509eab68cf89b58aa7bfe33b5efc76","date":"2016-08-11T16:51:48.000Z","author":{"name":"Sebastian Pop","email":"sebpop@gmail.com"},"message":"Add 'inline' attribute to __init to inline the basic_string's constructor\n\nbasic_string's constructor calls init which was not getting inlined.  This\nprevented optimization of const string as init would appear as a call in between\na string's def and use.\n\nPatch by Laxman Sole and Aditya Kumar.\n\nDifferential Revision: https://reviews.llvm.org/D22782\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278356 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f6a37d63e33545d9bb886421a8bda2b14b99db7","date":"2016-08-11T16:58:12.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: relax the FS test a slight bit to be more reliable\n\nSome filesystems track atime always.  This relaxes the test to accept either a\nfilesystem which does not accurately track atime or does track the atime\naccurately.  This allows the test to pass on filesystems mounted with\n`strictatime` on Linux or on macOS.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d6e36bb77362d01a3013d8b52e0c625a7cf1aaab","date":"2016-08-11T18:46:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove test for the sign of a NaN - doesn't work on MIPS, not strictly legal. Fixes bug 28936\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278387 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c9e74ddb6c7ac46d4a00acac268de6b2def1f560","date":"2016-08-14T22:51:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add private option to change build dialect from C++11\n\nAlthough libc++ only requires C++11 to build, there are other\nreasons to turn on a newer dialect in the build. For example\nIDE's may not highlight any C++14/C++17 in the headers when\nconfigured for C++11. This patch add's a private option for\nchanging this.\n\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278638 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b901c3475e74b98a01494901affd4b72364803c9","date":"2016-08-15T01:51:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Check in SFINAE base class for use in optional/variant\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278643 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"543cf61be7950363d7b9e3c04441d2a2ed2eee94","date":"2016-08-15T18:58:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR28506. Re-enable missing math.h C++11 decls on SunOS. Patch from Michal Gorny.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"314fd09e21538c6bf60a166c305821de5f8cba58","date":"2016-08-15T19:37:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use -O1 when testing with ASAN and MSAN to prevent Clang OOM errors.\n\nCurrently certain tests get killed when compiled with ASAN at -O0 because\nthey eat all of the systems memory. This doesn't happen at -O1, so enable that\nto work around the issue.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278722 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c2141dfff2843758185d60e3a5d3913a146d29f8","date":"2016-08-15T20:50:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix new ASAN failures\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea714e73a6a59da8161762a588b8fd5d28ab45b7","date":"2016-08-15T21:24:50.000Z","author":{"name":"Adhemerval Zanella","email":"adhemerval.zanella@linaro.org"},"message":"libcxx: Fix path.compare.pass expected result\n\nThe expected 'filesystem::path::compare' result states that for different\npath only result sign contains the information about passed arguments\n(not its integer value).  This is due it uses the output of other compare\nfunctions (basic_string_view and char_traits) without further handling and\nchar_traits uses memcmp for final buffer comparison.\n\nHowever for GLIBC on AArch64 the code:\n\n  int ret = memcmp (\"b/a/c\", \"a/b/c\", 1);\n\nResults in '64' where for x86_64 it results in '1'.\n\nThis patch fixes the expected 'filesystem::path::compare' by normalizing\nall the results before assert comparison.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d4badbbc5a4c63fa9c644d4ae78ec0e38564c8dc","date":"2016-08-17T05:58:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Support allocators with explicit conversion constructors. Fixes bug #29000\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@278904 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"546498cb4817d6a0e78d79c6d244495961ba1c73","date":"2016-08-17T23:24:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"make the associative containers do the right thing for propogate_on_container_assignment. Fixes bug #29001. Tests are only for <map> right now - more complete tests will come when we revamp our allocator testing structure.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279008 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c22696675a2c5ea1c79fc64a4d7dfe1c2f4ca8b","date":"2016-08-18T21:31:51.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Get libcxx building under LLVM/runtimes\n\nSummary:\nThe new LLVM runtimes build directory requires some basic conventions across the runtime projects. These changes make libcxx build under the runtimes subdirectory. The general idea of the changes is that the runtimes subdirectory requires some conventions to be consistent across runtime projects.\n\nI expect to have a few more small patches that build on this to tie up check targets and other things useful in development workflows.\n\nSummary of changes in this patch:\n\n* Renamed variable LLVM_CONFIG -> LLVM_CONFIG_PATH\n* Renamed variable LIBCXX_BUILT_STANDALONE -> LIBCXX_STANDALONE_BUILD\n* Add an include of AddLLVM in the tests subdirectory for add_lit_testsuite.\n\nReviewers: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D23696\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279151 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2586b395b2d6bb1d8a5674c0a4f92dc786668f1","date":"2016-08-22T18:45:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add missing include that caused a test failure on Windows. Thanks to STL for the patch. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279453 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98983c06c564c6cf3913a919778b1145fc931940","date":"2016-08-23T19:25:12.000Z","author":{"name":"Adhemerval Zanella","email":"adhemerval.zanella@linaro.org"},"message":"libcxx: Fix libcxx tests on aarch64 with libunwind\n\nSome tests uses 'long double' to/from conversions and for some targets\nthey are provided by compiler runtime (either compiler-rt or libgcc).\nHowever when building libcxx with linunwinder current test configuration\nat target_info.py do not include the required libraries, as:\n\n  not llvm_unwinder:\n    \"-lc++\" \"-lm\" \"-lgcc_s\" \"-lgcc\" \"-lpthread\" \"-lc\" \"-lgcc_s\" \"-lgcc\"\n\n  llvm_unwinder\n    \"-lc++\" \"-lm\" \"-lpthread\" \"-lc\" \"-lunwind\" \"-ldl\"\n\nThis causes some tests build issues with missing symbols on aarch64,\nfor instance, where 'long double' is a binary float with 128-bits with\nmostly of internal operations being provided by software routines.\n\nThis patch changes how to define the default linker flags with libunwinder by\nadding libgcc regardless.\n\nI checked and aarch64 and x86_64 with libcxx and libunwind (with and without\nLIBCXXABI_USE_LLVM_UNWINDER).\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279552 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab804284ef5c2e1a1e06cd5e1a9818f0f151078b","date":"2016-08-23T23:01:16.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"libc++: Perform configuration checks with -nodefaultlibs\n\nWe're compiling libc++ with -nodefaultlibs, so we should also pass this option\nduring the configuration checks to ensure those checks are consistent with the\nactual build.\n\nThe primary motivation here is to ease cross-compilation against a non-standard\nset of C++ libraries. Previously, the configuration checks would attempt to link\nagainst the standard C++ libraries, which would cause link failures when\ncross-compiling, even though the actual library link would go through correctly\n(because of the use of -nodefaultlibs and explicitly specifying any needed\nlibraries). This is more correct even ignoring the motivation, however.\n\nPatch by Shoaib Meenai!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279584 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af7f1a8cc31d9213d5dae92c97b005a2d6d9bd19","date":"2016-08-24T00:24:05.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Revert \"libc++: Perform configuration checks with -nodefaultlibs\"\n\nThis reverts SVN r279584 which broke the buildbots.  Will re-apply once the\nissue has been root-caused and fixed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279596 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e146f7559d4b80d02e4b1fc0ab747ecd1f5f686b","date":"2016-08-24T04:22:52.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"libc++: add an option to build against compiler-rt\n\nThis mirrors the option in libc++abi to build without libgcc.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e0620e29a5802ab8aa8c02b2b2a03d2851e03731","date":"2016-08-24T22:17:06.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Be more consistent about naming targets and components\n\nSummary:\nThe point of this patch is to have a consistent convention for naming build, check and install targets so that the targets can be constructed from the project name.\n\nThis change renames a bunch of CMake components and targets from libcxx to cxx. For each renamed target I've added a convenience target that matches the old target name and depends on the new target. This will preserve function of the old targets so that the change doesn't break the world. We can evaluate if it is worth removing the extra targets later.\n\nReviewers: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D23699\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279675 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fdb4f1713ece3c6f7fbf98f3ea3f8c19fa0c249e","date":"2016-08-25T11:52:38.000Z","author":{"name":"Aditya Kumar","email":"hiraditya@msn.com"},"message":"Remove trailing WS [NFC]\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"14c09a2413ed5cc4914d1690f5dbfb9420a45b3c","date":"2016-08-25T15:09:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add an _LIBCPP_NORETURN inline function named __throw_XXX for each exception type we define. They either construct and throw the exception, or abort() (if exceptions are disabled). Use these functions everywhere instead of assert()ing when exceptions are disabled. WARNING: This is a behavior change - but only with exceptions disabled.  Reviewed as: https://reviews.llvm.org/D23855.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279744 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7da8c67b813a96b116d0f2aabe862f57221b2203","date":"2016-08-25T15:56:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove duplicate inline\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7acb0e5be91c8e6ded934184f4053757c5f5360","date":"2016-08-25T17:47:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Followon to r279744. Find the other exception types and make __throw_XXX routines (and call them).  Remove the generic __libcpp_throw routine, since no one uses it anymore.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279763 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5db6737a36005dcf2f9058b616de282326b35e2b","date":"2016-08-27T02:26:42.000Z","author":{"name":"Aditya Kumar","email":"hiraditya@msn.com"},"message":"Add attribute noreturn to functions that throw\n\nReviewers: mclow.lists, EricWF, howard.hinnant, sebpop\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D21232\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279903 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1421cf0f797d0544fbbde34db38c7afcd252c5c6","date":"2016-08-27T19:32:03.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Avoid embedded preprocessor directives in __tree\n\nSimilar to rL242623, move C++ version checks outside of _NOEXCEPT_()\nmacro invocation argument lists, to avoid \"embedding a directive within\nmacro arguments has undefined behavior\" warnings.\n\nDifferential Revision: https://reviews.llvm.org/D23961\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279926 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3169f5a4edf0f89795c31771e199ccfdf67e582","date":"2016-08-28T18:33:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[Docs] Update libc++ target names after r279675.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279940 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"113315b9a47b11da2d4e9d4c7022d294e607d6dc","date":"2016-08-28T21:26:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2711. Constrain path members.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279945 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17c38db65074b9679dd969a3b9e9149ae444164f","date":"2016-08-28T21:55:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG  2716 as complete - shuffle and sample disallows lvalue URNGs.\n\nLibc++'s implementation of shuffle and sample already support lvalue and rvalue\nRNG's. This patch adds tests for both categories and marks the issue as complete.\n\nThis patch also contains drive-by change for std::experimental::sample which\nimproves the diagnostics produced when the correct iterator categories are\nnot supplied.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279947 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"917af0a0732cc1c53177c387b93a9fd8baaf5e2f","date":"2016-08-28T22:14:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement C++17 std::sample.\n\nThis patch implements the std::sample function added to C++17 from LFTS. It\nalso removes the std::experimental::sample implementation which now forwards\nto std::sample.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279948 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15ac5e4dc2b6acf3b53424ccae6128d01be6341c","date":"2016-08-29T01:09:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix pair::operator=(TupleLike&&).\n\nThis assignment operator was previously broken since the SFINAE always resulted\nin substitution failure. This caused assignments to turn into\ncopy construction + assignment.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279953 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0ecda7171c623e9051c65042bce979f425a73369","date":"2016-08-29T01:39:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r279953 - Fix pair::operator=(TupleLike&&)\n\nThe test emits warnings causing the test-suite to fail. Since I want this\npatch merged into 3.9 I'll recommit it with a clean test.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279954 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"235d71f053d0a4160c67ec343712ae1223570c0d","date":"2016-08-29T01:43:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix pair::operator=(TupleLike&&).\n\nThis assignment operator was previously broken since the SFINAE always resulted\nin substitution failure. This caused assignments to turn into\ncopy construction + assignment.\n\nThis patch was originally committed as r279953 but was reverted due to warnings\nin the test-suite. This new patch corrects those warnings.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279955 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f76a08728e783fea3a9204a6f85f5a622a48552d","date":"2016-08-29T19:12:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update Google Benchmark library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279989 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a799bd4256f5da5b86d00991bc46ee05f6e3c48","date":"2016-08-29T19:50:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Turn On -DLIBCXX_ENABLE_BENCHMARKS by default.\n\nThis patch enables the `cxx-benchmarks` target by default. Note that the target\nstill has to be manually invoked since it isn't included in the default 'make'\nrule.\n\nThis patch also gets the benchmarks building w/ GCC. The build previously\nrequired the '-stdlib=libc++' flag but upstream patches to Google Benchmark\nnow allow the library to build w/ libc++ and GCC.\n\nThese changes should make the benchmarks easier to build and test.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@279999 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ec6b84545c594625bf2277ddf01493e98c02c15","date":"2016-08-29T20:43:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix or suppress GCC warnings during build.\n\nSummary:\nCurrently a number of GCC warnings are emitted when building libc++. This patch fixes or ignores all of them. The primary changes are:\n\n* Work around strict aliasing issues in `typeinfo::hash_code()` by using __attribute__((may_alias)). However I think a non-aliasing `hash_code()` implementation is possible. Further investigation needed.\n* Add `_LIBCPP_UNREACHABLE()` to switch in `strstream.cpp` to avoid -Wpotentially-uninitialized.\n* Fix -Wunused-value warning in `__all` by adding a void cast.\n* Ignore -Wattributes for now. There are a number of real attribute issues when using GCC but enabling the warning is too noisy.\n* Ignore -Wliteral-suffix since it warns about the use of reserved identifiers. Note Only GCC 7.0 supports disabling this warning.\n* Ignore -Wc++14-compat since it warns about the sized new/delete overloads.\n\n\n\nReviewers: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D24003\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280007 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb930a502cd38fa45188b72eb4287d8aebb6b415","date":"2016-08-29T21:33:37.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"libc++: perform configuration checks with -nodefaultlibs\n\nWe're compiling libc++ with -nodefaultlibs, so we should also pass this\noption during the configuration checks to ensure those checks are\nconsistent with the actual build.\n\nThe primary motivation here is to ease cross-compilation against a\nnon-standard set of C++ libraries. Previously, the configuration checks\nwould attempt to link against the standard C++ libraries, which would\ncause link failures when cross-compiling, even though the actual library\nlink would go through correctly (because of the use of -nodefaultlibs\nand explicitly specifying any needed libraries). This is more correct\neven ignoring the motivation, however.\n\nPatch by Shoaib Meenai!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280015 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"364cf87450aec4a54a6ca59be6751a6be2ea4eae","date":"2016-08-30T00:54:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR28831 - Bad logic around CMAKE_OSX_SYSROOT and CMAKE_OSX_ARCHITECTURES.\n\nSee https://llvm.org/bugs/show_bug.cgi?id=28831 for more information about\nthe changes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280037 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b16966ce78f301dd20b7accdde4b54705a0dcba3","date":"2016-08-30T01:10:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix syntax error in recent CMake change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280042 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76c3a05cd15bc96ad06923bb4d87ee1c152bdf4f","date":"2016-08-30T01:46:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add \"FLAKY_TEST\" test directive to support re-running flaky tests.\n\nSome of the mutex tests fail on machines with high load. This patch implements\nthe test directive \"// FLAKY_TEST\" which allows a test to be run 3 times\nbefore it's considered a failure.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280050 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f47e6af72a0a2d2c1e042a5578582dda2410a72b","date":"2016-08-30T16:51:34.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Copy headers relative to LLVM_BINARY_DIR\n\nSummary: This copy phase is only needed for in-tree builds, so we should be copying to the LLVM build directory's include dir instead of the sub-project include dir.\n\nReviewers: bogner, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24015\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25a93c54f3aa1e31da2d04fe0a4c9b7b4de68c7b","date":"2016-09-01T01:38:32.000Z","author":{"name":"Ivan Krasin","email":"krasin@chromium.org"},"message":"Fix libc++ configuration with -fsanitize-coverage\n\nSummary:\na recent change (r280015) in libc++ configuration broke LibFuzzer bot:\nhttp://lab.llvm.org:8011/builders/sanitizer-x86_64-linux-fuzzer/builds/12245\n\nIt's not restricted just to that bot; any code that uses the sanitize coverage and configures libc++ hits it.\n\nThis CL fixes the issue.\n\nReviewers: compnerd\n\nSubscribers: aizatsky\n\nDifferential Revision: https://reviews.llvm.org/D24116\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280335 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2e3538460a3877e0d796c590bb836ff5020f81c6","date":"2016-09-01T18:46:53.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Don't copy headers on fully standalone\n\nIn r280108 I tried to make the headers copy relative to LLVM_BINARY_DIR, and the intent was that it would only happen on in-tree builds or runtimes directory builds. It didn't actually work that way.\n\nThis patch adds a check for CMAKE_SOURCE_DIR being equal to CMAKE_CURRENT_SOURCE_DIR. In this case we set a variable LIBCXX_USING_INSTLLED_LLVM. This doesn't necessarily mean the LLVM is installed (it could be a build directory), but it means we need to treat the LLVM directory as read-only.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280400 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d2497cc01300ecd1e89a60325f3a6d380c09e5b6","date":"2016-09-01T19:46:02.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] NFC. Fixing spelling from r280400\n\nDoh!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"512cf2d040f356db0013d0ddf5c27e5747c0b071","date":"2016-09-01T19:47:39.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] NFC. Missed the other uses in r280406\n\nDoh! Obviously need to slow down.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1dbcfe0936a0915ebde91596f00600d2729405d0","date":"2016-09-01T20:49:54.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: don't add -fPIC on Windows\n\n`-fPIC` doesn't make much sense for Windows, since Windows DLLs aren't compiled\nposition independent and are instead relocated at runtime.\n\nPatch by Shoaib Meenai!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebeef1b7f36de3cbbf5b423b093803c70313b972","date":"2016-09-01T21:09:19.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"cstdio: limit gets to CRT versions below 14\n\nMicrosoft removed gets from the CRT in Visual Studio 2015 onwards [1].\nAttempting to reference it when targeting CRT versions 14 and above will cause\ncompile errors.\n\n[1] https://msdn.microsoft.com/en-us/library/2029ea5f.aspx\n\nPatch by Shoaib Meenai!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f8cb58230f042570d04a5f51991fd2906c58e84","date":"2016-09-02T21:02:11.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Avoid narrowing warnings in __bitset constructor\n\nWhen <bitset> is compiled with warnings enabled, on a platform where\nsize_t is 4 bytes, it results in errors similar to:\n\n    bitset:265:16: error: non-constant-expression cannot be narrowed\n    from type 'unsigned long long' to '__storage_type' (aka 'unsigned\n    int') in initializer list [-Wc++11-narrowing]\n        : __first_{__v, __v >> __bits_per_word}\n                   ^~~\n    bitset:676:52: note: in instantiation of member function\n    'std::__1::__bitset<2, 53>::__bitset' requested here\n            bitset(unsigned long long __v) _NOEXCEPT : base(__v) {}\n                                                       ^\n\nFix these by casting the initializer list elements to __storage_type.\n\nReviewers: mclow.lists, EricWF\nDifferential Revision: https://reviews.llvm.org/D23960\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280543 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"766a31af3a366198261ad65d545492aec0969df2","date":"2016-09-03T00:11:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Define _LIBCPP_SAFE_STATIC  __attribute__((require_constant_initialization)), and apply it to memory_resource\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280561 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e5eb6348d73a6d59c75beb1359977ac7b6f7b45","date":"2016-09-03T07:05:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"memory_resource still needs init_priority when built with GCC 4.9\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f735c31c0bb76277596f38f2eae86cf8b5aeffd","date":"2016-09-03T08:07:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR30202 - notify_all_at_thread_exit seg faults if run from a raw pthread context.\n\nSummary:\nThis patch allows threads not created using `std::thread` to use `std::notify_all_at_thread_exit` by ensuring the TL state has been initialized within `std::notify_all_at_thread_exit`.\n\nAdditionally this patch \"fixes\" a potential oddity in `__thread_local_pointer::reset(pointer)`, which would previously delete the old thread local data. However there should *never* be old thread local data because pthread *should* null it out on thread exit. Unfortunately it's possible that pthread failed to do this according to the spec:\n\n\n> \n> Upon key creation, the value NULL shall be associated with the new key in all active threads. Upon thread creation, the value NULL shall be associated with all defined keys in the new thread.\n> \n> An optional destructor function may be associated with each key value. At thread exit, if a key value has a non-NULL destructor pointer, and the thread has a non-NULL value associated with that key, the value of the key is set to NULL, and then the function pointed to is called with the previously associated value as its sole argument. The order of destructor calls is unspecified if more than one destructor exists for a thread when it exits.\n> \n> If, after all the destructors have been called for all non-NULL values with associated destructors, there are still some non-NULL values with associated destructors, then the process is repeated. If, after at least {PTHREAD_DESTRUCTOR_ITERATIONS} iterations of destructor calls for outstanding non-NULL values, there are still some non-NULL values with associated destructors, implementations may stop calling destructors, or they may continue calling destructors until no non-NULL values with associated destructors exist, even though this might result in an infinite loop.\n\nHowever if pthread fails to delete the value it is probably incorrect for us to do it. Destroying the value performs all of the \"at thread exit\" actions registered with it but we are way past \"at thread exit\".\n\n\n\n\n\nReviewers: mclow.lists, bcraig, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24159\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280588 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6efc20f54194ccb0c805b18fbcb67412fff05c9b","date":"2016-09-04T00:37:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark test as XFAIL for C++03, rather than providing a dummy pass.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280605 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4bc5e1f44409cbc072476f6a11bf76fb3e047e70","date":"2016-09-04T00:48:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bad locale test data when using the newest glibc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280608 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"226cd0674ec0ef4db9c126373e30078f33526d7e","date":"2016-09-04T04:09:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Apply curr_symbol.pass.cpp test fix to missed test case\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4dbd4fcf8626453949625bf36976e668094cfbb1","date":"2016-09-04T09:55:12.000Z","author":{"name":"Kuba Brecka","email":"kuba.brecka@gmail.com"},"message":"[libcxx] Fix a data race in call_once\n\ncall_once is using relaxed atomic load to perform double-checked locking, which contains a data race. The fast-path load has to be an acquire atomic load.\n\nDifferential Revision: https://reviews.llvm.org/D24028\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280621 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d979eed7663e0ab8c365282edb1792c7aae16d39","date":"2016-09-05T01:54:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix Bug 30240 - std::string: append(first, last) error when aliasing.  Add test cases for append/insert/assign/replace while we're at it, and fix a similar bug in insert.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280643 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7fa8b78c6354687fd8931fa5e2da58a736d00f5c","date":"2016-09-06T19:56:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unneeded includes in <exception> after removing __libcpp_throw\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16f953fa919bdb3a985bed68f348b643e3494cc9","date":"2016-09-06T20:10:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing <cstdlib> include. Sorry about the bot breakage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1cfabe4e548c3bce73b4e76b32446e0a0e5c5219","date":"2016-09-06T21:06:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r280743 and r280745. Remove <cstdlib> include from `<exception>`\n\nApparently I missed a number of additional include which need to be added.\nReverting so I can recommit as a single patch with all of the required includes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280752 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dbf60fa0f752c916de49601816d3fe834533bb67","date":"2016-09-06T21:25:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try 2 - Remove <cstdlib> include from `<exception>`\n\nThis patch removes the `<cstdlib>` include from exception where it is no longer\nneeded. Unlike my previous attempt this patch also adds <cstdlib> where needed\nin other headers like <new> and <typeinfo>.\n\nThis won't fix the Firefox build issues discussed on IRC but it is more correct\nfor libc++.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280754 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"636dd5b585e0588ef301cae25f6e053743e4e494","date":"2016-09-07T00:57:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve CMake output when registering benchmarks\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280771 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01609afe243c26df20b505ed10ca7040a7a9c788","date":"2016-09-07T01:15:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable installation of libc++experimental by default.\n\nWhen libc++experimental was originally created it was empty and therefore there\nwas no reason to install it. Now that the library contains\n<experimental/memory_resource> and <experimental/filesystem> there is a good\nreason to install it.\n\nSpecifically this patch enables the installation whenever LIBCXX_INSTALL_LIBRARY\nis true and LIBCPP_ENABLE_EXPERIMENTAL_LIBRARY is true.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280773 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9231a2326136a4d4955afb93a917099abb9c94e","date":"2016-09-07T01:56:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR30260 - optional<const T> not working.\n\nThis patch fixes PR30260 by using a (void*) cast on the placement argument\nto placement new to casts away the const. See also http://llvm.org/PR30260.\n\nAs a drive by change this patch also changes the header guard for\n<experimental/optional> to _LIBCPP_EXPERIMENTAL_OPTIONAL from _LIBCPP_OPTIONAL.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280775 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db4d7e96ca525e981800d22df8328f48dead5366","date":"2016-09-07T02:38:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve constexpr tests for std::any\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280777 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac655ef7420e7f6a49f3a440e265c05776c3245c","date":"2016-09-07T03:32:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#30303 - no matching function for call to '__ptr_in_range'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280779 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a3836f6bcf27ec5a693c360d26d42824ab2c0f3","date":"2016-09-07T03:50:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid compile error by giving the test type a user defined default constructor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280780 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9e6e8972a521e72192f370bb1ca98cbddee6a00","date":"2016-09-08T14:31:44.000Z","author":{"name":"Aditya Kumar","email":"hiraditya@msn.com"},"message":"Added 'inline' attribute to basic_string's destructor\n\nAuthor: laxmansole\n\nReviewers: howard.hinnant\n           mclow.lists\nSubscribers: EricWF, flyingforyou, evandro\n\nDifferential Revision: https://reviews.llvm.org/D22834\n\nCurrently basic_string's destructor is not getting inlined. So adding 'inline' attribute to ~basic_string().\nWorked in collaboration with Aditya Kumar.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46658931bbdd78ff886aa623153ec3c716f3f0f2","date":"2016-09-08T20:52:48.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"support: clean up MSVC support\n\nVisual Studio 2013 (CRT version 12) added support for many C99 long long and\nlong double functions. Visual Studio 2015 (CRT version 14) increased C99 and C11\ncompliance further. Since we don't support Visual Studio versions older than\n2013, we can considerably clean up the support header.\n\nPatch by Shoaib Meenai!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@280988 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"040945b81f11af65ac7544a005fde63a0e099cbd","date":"2016-09-11T21:46:40.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Introduce an externally-threaded libc++ variant.\n\nThis patch further decouples libc++ from pthread, allowing libc++ to be built\nagainst other threading systems. There are two main use cases:\n\n- Building libc++ against a thread library other than pthreads.\n\n- Building libc++ with an \"external\" thread API, allowing a separate library to\n  provide the implementation of that API.\n\nThe two use cases are quite similar, the second one being sligtly more\nde-coupled than the first. The cmake option LIBCXX_HAS_EXTERNAL_THREAD_API\nenables both kinds of builds. One needs to place an <__external_threading>\nheader file containing an implementation of the \"libc++ thread API\" declared\nin the <__threading_support> header.\n\nFor the second use case, the implementation of the libc++ thread API can\ndelegate to a custom \"external\" thread API where the implementation of this\nexternal API is provided in a seperate library. This mechanism allows toolchain\nvendors to distribute a build of libc++ with a custom thread-porting-layer API\n(which is the \"external\" API above), platform vendors (recipients of the\ntoolchain/libc++) are then required to provide their implementation of this API\nto be linked with (end-user) C++ programs.\n\nNote that the second use case still requires establishing the basic types that\nget passed between the external thread library and the libc++ library\n(e.g. __libcpp_mutex_t). These cannot be opaque pointer types (libc++ sources\nwon't compile otherwise). It should also be noted that the second use case can\nhave a slight performance penalty; as all the thread constructs need to cross a\nlibrary boundary through an additional function call.\n\nWhen the header <__external_threading> is omitted, libc++ is built with the\n\"libc++ thread API\" (declared in <__threading_support>) as the \"external\" thread\nAPI (basic types are pthread based). An implementation (pthread based) of this\nAPI is provided in test/support/external_threads.cpp, which is built into a\nseparate DSO and linked in when running the libc++ test suite. A test run\ntherefore demonstrates the second use case (less the intermediate custom API).\n\nDifferential revision: https://reviews.llvm.org/D21968\n\nReviewers: bcraig, compnerd, EricWF, mclow.lists\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281179 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6b8e1ef3a489156192699d367be0e8f5c3439ee","date":"2016-09-12T20:14:44.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"config: Fix typo in comment\n\nTesting commit access. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281250 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b8913084da510c30a86dc9e4edade579c5abb4c","date":"2016-09-12T21:41:12.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"config: Use _LIBCPP_TYPE_VIS_ONLY with enum class\n\nAn enum class has associated type info. In the Microsoft ABI, type info\nis emitted in the COMDAT section and isn't exported, so clang rightfully\ncomplains about __declspec(dllexport) being unused for an enum class.\nOn other platforms, we still want to export the type info.\n\nDifferential Revision: https://reviews.llvm.org/D24065\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6600b7524e2956fcaef32da7ee9c7eca508c004","date":"2016-09-13T09:32:32.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fix gcc builds.\n\nStep around a gcc pre-processor defect which causes it to fail to\nparse the __has_include macro check.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"847eaf4e0bf3b3c124d55a999efca7d1e4c15342","date":"2016-09-14T14:12:50.000Z","author":{"name":"Kuba Brecka","email":"kuba.brecka@gmail.com"},"message":"[libcxx] Enable building and testing of libcxx with ThreadSanitizer on OS X\n\nThis patch enables building and testing libcxx under ThreadSanitizer on OS X. CMake builds that have -DLLVM_USE_SANITIZER=Thread will automatically build libcxx with -fsanitize=thread and testing via lit then runs under TSan.\n\nDifferential Revision: https://reviews.llvm.org/D24297\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281475 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ccf71001cfda05f667f376128ad91a144de10b45","date":"2016-09-14T14:13:50.000Z","author":{"name":"Kuba Brecka","email":"kuba.brecka@gmail.com"},"message":"[libcxx] Fix a typo in test/libcxx/test/target_info.py that prevents running tests on Darwin with sanitizers\n\nDifferential Revision: https://reviews.llvm.org/D24297\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281476 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f3771acf0a28c15f2b892cef38360dbdfe0b8bb","date":"2016-09-14T14:15:42.000Z","author":{"name":"Kuba Brecka","email":"kuba.brecka@gmail.com"},"message":"[libcxx] Add a TSan regression test for a data race in call_once\n\nDifferential Revision: https://reviews.llvm.org/D24297\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281477 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d940dcaad692ca66b3d4f138cecffac9ad118e5d","date":"2016-09-14T23:52:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r280944 - Added 'inline' attribute to basic_string's destructor\n\nThis patch causes a couple of issues:\n\n1) It triggers http://llvm.org/PR30341. Although the bug is not truly a libc++\nbug it breaks the LLVM build using libc++. Reverting this patch is only\na temporary workaround until Clang is fixed.\n\n2) It adds yet another ABI incompatibility when libc++.so is compiled with GCC.\nSpecifically GCC doesn't ignore the _LIBCPP_INLINE_VISIBILITY on the out-of-line\ndefinition when compiling the dylib. This causes the externally instantiated\n~basic_string symbol to have hidden visibility.\n\nThis patch should be recommitted after addressing (1) and (2). (2) can be fixed\nby adding _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY which is defined as\n__attribute__((visibility(\"default\"), always_inline)) as opposed to\n_LIBCPP_INLINE_VISIBILITY which makes the symbol hidden.\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281562 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86f6997618331400a3c03cb5f9e7dd7c320c253c","date":"2016-09-15T11:04:53.000Z","author":{"name":"Kuba Brecka","email":"kuba.brecka@gmail.com"},"message":"[libcxx] Allow sanitizing libcxx with ASan+UBSan simultaneously\n\nAllow building with LLVM_USE_SANITIZER=“Address;Undefined” (and “Undefined;Address”).\n\nDifferential Revision: https://reviews.llvm.org/D24569\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281603 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cac9e30dbedef0887a35c42dbd96d8974660a11a","date":"2016-09-15T18:36:13.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Avoid <memory> include in locale_win32.h\n\nWhen `_LIBCPP_NO_EXCEPTIONS` is defined, we end up with compile errors\nwhen targeting MSVCRT:\n\n* Code includes `<new>`\n* `<new>` includes `<cstdlib>` in order to get `abort`\n* `<cstdlib>` includes `<stdlib.h>`, _before_ the `using ::abort`\n* `<stdlib.h>` includes `locale_win32.h`\n* `locale_win32.h` includes `<memory>`\n* `<memory>` includes `<stdexcept>`\n* `<stdexcept>` includes `<cstdlib` for `abort`, but that inclusion gets\n  (correctly) ignored because of header guards\n* `<stdexcept>` references `_VSTD::abort`, which isn't declared\n\nThe easiest solution is to make `locale_win32.h` not include `<memory>`,\nby removing the use of `unique_ptr` and manually restoring the locale\ninstead.\n\nDifferential Revision: https://reviews.llvm.org/D24374\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281641 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"833d644ed1c04346d665193d1b3eac5e3ae68193","date":"2016-09-15T22:27:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix and document visibility attributes for Clang, GCC and Windows.\n\nSummary:\nThis patch fixes a number of problems with the visibility macros across GCC (on Unix) and Windows (DLL import/export semantics). All of the visibility macros are now documented under `DesignDocs/VisibilityMacros.rst`. Now I'll no longer forget the subtleties of each!\n\nThis patch adds two new visibility macros:\n\n* `_LIBCPP_ENUM_VIS` for controlling the typeinfo of enum types. Only Clang supports this.\n* `_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS` for redefining visibility on explicit instantiation declarations. Clang and Windows require this.\n\nAfter applying this patch GCC only emits one -Wattribute warning opposed to 30+.\n\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: beanz, mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24602\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281673 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6dbed46df6689870629b7bbe7add7018dce19aa0","date":"2016-09-16T00:00:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Add _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY to support GCC ABI compatibility\n\nSummary:\nGCC and Clang handle visibility attributes on the out-of-line definition of externally instantiated templates differently. For example in the reproducer below Clang will emit both 'foo' and 'bar' with default visibility while GCC only emits a non-hidden 'foo'.  \n\n```\n// RUN: g++ -std=c++11 -shared -O3 test.cpp && sym_extract.py a.out\n// RUN: clang++ -std=c++11 -shared -O3 test.cpp && sym_extract.py a.out\n#define INLINE_VISIBILITY __attribute__((visibility(\"hidden\"), always_inline))\n\ntemplate <class T>\nstruct Foo {\n  void foo();\n  void bar();\n};\n\ntemplate <class T>\nvoid Foo<T>::foo() {}\n\ntemplate <class T>\ninline INLINE_VISIBILITY\nvoid Foo<T>::bar() {}\n\ntemplate struct Foo<int>;\n```\n\nThis difference creates ABI incompatibilities between Clang and GCC built dylibs. Specifically GCC built dylibs lack definitions for various member functions of `basic_string`, `basic_istream`, `basic_ostream`, `basic_iostream`, and `basic_streambuf` (All of these types are externally instantiated). \n\nSurprisingly these missing symbols don't cause many problems because the functions are marked `always_inline`  therefore the dylib definition is rarely needed. However when an out-of-line definition is required then GCC built dylibs will fail to link. For example [GCC built dylibs cannot build Clang](http://stackoverflow.com/questions/39454262/clang-build-errors).\n\nThis patch works around this issue by adding `_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY` which is used to mark externally instantiated member functions as always inline. When building the library `_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY` sets the symbol's visibility to \"default\" instead of \"hidden\", otherwise it acts exactly the same as `_LIBCPP_INLINE_VISIBILITY`.\n\nAfter applying this patch GCC dylibs now contain:\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7sungetcEv`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5gbumpEi`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7sungetcEv`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9sputbackcEc`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE3getERNS_15basic_streambufIwS2_EE`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_9basic_iosIwS2_EES6_E`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4setpEPcS4_`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6snextcEv`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE4swapERS3_`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE4swapERS3_`\n  * `_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_8ios_baseES5_E`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pubsetbufEPcl`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE10pubseekoffExNS_8ios_base7seekdirEj`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_9basic_iosIwS2_EES6_E`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5pbumpEi`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5seekpENS_4fposI11__mbstate_tEE`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE7getlineEPcl`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sgetcEv`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE3getERNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_8ios_baseES5_E`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8in_availEv`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEErsEPFRNS_8ios_baseES5_E`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRNS_9basic_iosIcS2_EES6_E`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE3getERc`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6snextcEv`\n  * `_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE7getlineEPwl`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5tellpEv`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE3getERw`\n  * `_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7pubsyncEv`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE3getEPcl`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsEPFRNS_9basic_iosIcS2_EES6_E`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7pubsyncEv`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sputcEc`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5seekpExNS_8ios_base7seekdirE`\n  * `_ZNKSt3__115basic_streambufIcNS_11char_traitsIcEEE6getlocEv`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5gbumpEi`\n  * `_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEE4swapERS3_`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5seekpENS_4fposI11__mbstate_tEE`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5tellpEv`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEElsEPFRS3_S4_E`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEE3getEPwl`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4setgEPcS4_S4_`\n  * `_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwmm`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4setgEPwS4_S4_`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEEC1EPNS_15basic_streambufIwS2_EE`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8pubimbueERKNS_6localeE`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE4swapERS3_`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEEC2EPNS_15basic_streambufIwS2_EE`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE10pubseekposENS_4fposI11__mbstate_tEEj`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5pbumpEi`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5sgetcEv`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE4swapERS3_`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE10pubseekposENS_4fposI11__mbstate_tEEj`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sputnEPKcl`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5seekpExNS_8ios_base7seekdirE`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5sgetnEPwl`\n  * `_ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEElsEPFRNS_8ios_baseES5_E`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4setpEPwS4_`\n  * `_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sgetnEPcl`\n  * `_ZNKSt3__115basic_streambufIwNS_11char_traitsIwEEE6getlocEv`\n  * `_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8pubimbueERKNS_6localeE`\n  * `_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8in_availEv`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6sbumpcEv`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE10pubseekoffExNS_8ios_base7seekdirEj`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__113basic_istreamIwNS_11char_traitsIwEEErsEPFRS3_S4_E`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9sputbackcEw`\n  * `_ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5sputnEPKwl`\n  * `_ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsEPFRS3_S4_E`\n  * `_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEEC1EPNS_15basic_streambufIcS2_EE`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pubsetbufEPwl`\n  * `_ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5sputcEw`\n\n\nThis patch has no effect on Clang based builds.\n\n\n\nReviewers: mclow.lists, eugenis, danalbert, jroelofs, EricWF\n\nSubscribers: beanz, cfe-commits, mgorny\n\nDifferential Revision: https://reviews.llvm.org/D24600\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281681 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03f7d10810c4db3cefd1bd46b57d820791dc3cb9","date":"2016-09-16T00:07:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move inline attributes in filesystem to first declaration\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281683 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6a049fce50dec77a0a24211debc143a8e0588c4","date":"2016-09-16T00:13:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY in valarray to support attribute((internal_linkage)).\n\nThe externally instantiated member functions must be declared using\n_LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY, not _LIBCPP_INLINE_VISIBILITY, in\norder to be properly exported when using __attribute__((internal_linkage)).\n\nOtherwise the explicit instantiations will obviously have internal linkage and\nwill not be exported from the dylib.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281684 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bda55a388354286de1c3cab8c3395c50d5d2ae4","date":"2016-09-16T02:09:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move _LIBCPP_INLINE_VISIBILITY to first declaration in sstream.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281691 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"09e7add104878b54f02344ed8c356c670779a323","date":"2016-09-16T02:16:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move _LIBCPP_INLINE_VISIBILITY to first declaration in <propagate_const>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281692 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"65d504e627c00820dd5919449e6c2f3181e8910c","date":"2016-09-16T02:51:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update _LIBCPP_EXCEPTION_ABI doc with @mclow's feedback\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f05ac13bf13a59baa2e28de5a74325b5835d89f8","date":"2016-09-16T03:47:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to fix Sphinx build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e3bce5f6c19a0e29778cc89825d2ea2fa77febf","date":"2016-09-16T14:32:19.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Add missing c++98 xfail. NFC.\n\nThis is the only test failing in c++98 mode at the moment.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e81a54c002ea1dafd004099aab160e7a51b78442","date":"2016-09-16T19:12:54.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Fix inline attribute for non-MSVC Windows\n\ngcc and clang in gcc compatibility mode do not accept __forceinline. Use\nthe gcc attribute for them instead.\n\nDifferential Revision: https://reviews.llvm.org/D24678\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281766 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d7f3cc9b169e0464d0df67b714515652ce49042","date":"2016-09-19T18:00:45.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Replace __ANDROID__ with __BIONIC__.\n\nSummary:\nNone of these checks are specific to Android devices. If libc++ was\nused with Bionic on a normal Linux system these checks would still be\nneeded.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: compnerd, tberghammer, danalbert, srhines, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24690\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281921 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e5cbce437b5df127d1e1896d4b9b112eb66b5458","date":"2016-09-19T18:29:07.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Fix extern template visibility for Windows\n\nOn Windows, marking an `extern template class` declaration as exported\nactually forces an instantiation, which is not the desired behavior.\nInstead, the actual explicit instantiations need to be exported.\n\nDifferential Revision: https://reviews.llvm.org/D24679\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281925 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd4a3f6cef96aba355779dc7e032cc4d2842977b","date":"2016-09-19T20:42:57.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Fix signatures of fallback tow(upper|lower)_l.\n\nSummary:\nThese functions take and return wint_t, not int:\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/towupper.html\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24743\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@281936 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fffe3a6ffc7de715ebcc98e39a81100d344eef7","date":"2016-09-22T00:23:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add missing _v traits. is_bind_expression_v, is_placeholder_v and uses_allocator_v\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282126 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45d7731bbb1bed74c640d1bd8c92a58e23e0c8bf","date":"2016-09-22T03:25:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix failure on 03 bot\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282134 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7dc2fa31af41caf5c13846319a0d705adfb15372","date":"2016-09-24T06:27:28.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Remove math_win32.h\n\nVisual Studio 2013 and onward have all the required functions in their\nCRT headers, and we don't support older versions anymore.\n\nDifferential Revision: https://reviews.llvm.org/D24879\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282328 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db86684746c4dfffed6e97de7f971757a00d2f69","date":"2016-09-24T17:36:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement is_error_code_v and is_error_condition_v for c++17. Rework the tests for is_error_code and is_error_condition, since they were really lacking. Thanks to Alisdair for the heads-up that we were missing these.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282331 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9473712eec24412db5600aaa25e709476567d546","date":"2016-09-24T18:16:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix incorrect include in is_error_code_enum.pass.cpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282332 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ac8de0976b38229a71500386fb7a3db1ab5d3c7","date":"2016-09-24T22:45:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement proposed resolution for LWG#2758. Reviewed as D24446. Normally, I would wait for these to be voted upon at a committee meeting (November), but the current draft standard is broken, and this should fix it. (And if it doesn't, we want to know about it soonest)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12779628764220f84553317f79091dd0db4157b9","date":"2016-09-24T23:52:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a few static_asserts that need extra parens on -03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282343 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1deaf196f43b3c54140b59ca483008cb75e6e936","date":"2016-09-25T03:14:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use __attribute__((internal_linkage)) when available.\n\nSummary:\nThis patch has been a long time coming (Thanks @eugenis). It changes `_LIBCPP_INLINE_VISIBILITY` to use `__attribute__((internal_linkage))` instead of `__attribute__((visibility(\"hidden\"), always_inline))`.\n\nThe point of `_LIBCPP_INLINE_VISIBILITY` is to prevent inline functions from being exported from both the libc++ library and from user libraries. This helps libc++ better manage it's ABI.\nPreviously this was done by forcing inlining and modifying the symbols visibility. However inlining isn't guaranteed and symbol visibility only affects shared libraries making this an imperfect solution.  `internal_linkage` improves this situation by making all symbols local to the TU they are emitted in, regardless of inlining or visibility. IIRC the effect of applying `__attribute__((internal_linkage))` to an inline function is the same as applying `static`.\n\nFor more information about the attribute see: http://lists.llvm.org/pipermail/cfe-dev/2015-October/045580.html\n\nMost of the work for this patch was done by @eugenis.\n\n\nReviewers: mclow.lists, eugenis\n\nSubscribers: eugenis, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24642\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4e3e15ad994eab09d83c1d5602597babca1d2756","date":"2016-09-25T03:34:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Remove various C++03 feature test macros\n\nSummary:\nLibc++ still uses per-feature configuration macros when configuring for C++11. However libc++ requires a feature-complete C++11 compiler so there is no reason to check individual features. This patch starts the process of removing the feature specific macros and replacing their usage with `_LIBCPP_CXX03_LANG`.\n\nThis patch removes the __config macros:\n\n* _LIBCPP_HAS_NO_TRAILING_RETURN\n* _LIBCPP_HAS_NO_TEMPLATE_ALIASES\n* _LIBCPP_HAS_NO_ADVANCED_SFINAE\n* _LIBCPP_HAS_NO_DEFAULT_FUNCTION_TEMPLATE_ARGS\n* _LIBCPP_HAS_NO_STATIC_ASSERT\n\nAs a drive I also changed our C++03 static_assert to use _Static_assert if available.\n\nI plan to commit this without review if nobody voices an objection.\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24895\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01c3b629cef9c8dfdab04a8c0f59d3c1e5c3b557","date":"2016-09-25T04:05:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix missing _LIBCPP_INLINE_VISIBILITY macro on C++03 specific __hash_table function\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282349 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8dc5b6eba92754e5f79e5626b9e53dfb8bec755e","date":"2016-09-25T08:30:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update -verify test to use new static assert message\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08fa01095a75033f3605140b72708e57f2a1a102","date":"2016-09-26T20:20:00.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[include] Declare __STDC_*_MACROS for C++11 compat in old libc\n\nDeclare __STDC_FORMAT_MACROS, __STDC_LIMIT_MACROS and\n__STDC_CONSTANT_MACROS before including real inttypes.h/stdint.h when\nthe wrapper-header is included in C++11, in order to enable\nthe necessary macros in C99-compliant libc.\n\nThe C99 standard defined that the format macros in inttypes.h should be\ndefined by the C++ implementations only when __STDC_FORMAT_MACROS is\ndefined, and the limit and constant macros in stdint.h should be defined\nonly when __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS are defined\nappropriately. Following this specification, multiple old versions of\nglibc up to 2.17 do not define those macros by default for C++,\nrendering the libc++ headers non-compliant to the C++11 standard.\n\nIn order to achieve the necessary compliance, __STDC_FORMAT_MACROS is\ndefined in wrapped inttypes.h just before including the system\ninttypes.h, when C++11 or newer is used. Both __STDC_LIMIT_MACROS\nand __STDC_CONSTANT_MACROS are defined in newly-wrapped stdint.h. This\nfixes the C++11 compliance while preserving the current behavior for\nC++03.\n\nDifferential Revision: https://reviews.llvm.org/D24903\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66bdfe223e137d0c7f2c63ec790b0983c7077887","date":"2016-09-26T20:55:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Extension: Make `move` and `forward` constexpr in C++11.\n\nSummary:\n`std::move` and `std::forward` were not marked constexpr in C++11.  This can be very damaging because it makes otherwise constant expressions non-constant. For example:\n\n```\n#include <utility>\ntemplate <class T>\nstruct Foo {\n  constexpr Foo(T&& tx) :  t(std::move(tx)) {}\n  T t;\n};\n[[clang::require_constant_initialization]] Foo<int> f(42); // Foo should be constant initialized but C++11 move is not constexpr. As a result `f` is an unsafe global.\n```\n\nThis patch applies `constexpr` to `move` and `forward` as an extension in C++11. Normally the library is not allowed to add `constexpr` because it may be observable to the user. In particular adding constexpr may cause valid code to stop compiling. However these problems only happen in more complex situations, like making `__invoke(...)` constexpr. `forward` and `move` are simply enough that applying `constexpr` is safe. \n\nNote that libstdc++ has offered this extension since at least 4.8.1.\n\nMost of the changes in this patch are simply test cleanups or additions. The main changes in the tests are:\n\n* Fold all `forward_N.fail.cpp` tests into a single `forward.fail.cpp` test using -verify.\n* Delete most `move_only_N.fail.cpp` tests because they weren't actually testing anything.\n* Fold `move_copy.pass.cpp` and `move_only.pass.cpp` into a single `move.pass.cpp` test.\n* Add return type and noexcept tests for `forward` and `move`.\n\n\n\n\nReviewers: rsmith, mclow.lists, EricWF\n\nSubscribers: K-ballo, loladiro\n\nDifferential Revision: https://reviews.llvm.org/D24637\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282439 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ba3ad4ea7387f1e09627a174aca9321cc968f2b","date":"2016-09-26T21:39:38.000Z","author":{"name":"Oleg Ranevskyy","email":"oranevskyy@accesssoftek.com"},"message":"[libc++] Fix typos causing compilation errors when _LIBCPP_DEBUG_LEVEL >= 2\n\nSummary: This patch fixes a couple of typos that cause compilation errors when application includes <unordered_map> and enables the libc++'s debugging capabilities.\n\nReviewers: EricWF\n\nSubscribers: llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D24883\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282446 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74c9857af9dee33a24b72a8583160fe4786161c6","date":"2016-09-26T22:19:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Expect DLL builds on Windows by default and require a custom __config for static\nbuilds.\n\nOn Windows the __declspec(dllimport) and __declspec(dllexport) attributes\nrequire linking to a DLL, not a static library. Previously these annotations\nwere disabled by default unless _LIBCPP_DLL was defined. However the DLL\nconfiguration is probably the more common one, so it should be supported by\ndefault.\n\nThis patch enables import/export attributes by default and adds a\n_LIBCPP_DISABLE_DLL_IMPORT_EXPORT macro which can be used to disable this\nbehavior. If libc++ is built as a static library on Windows then a custom __config\nheader will be generated that predefines this macro.\n\nThis patch is based off work by Shoaib Meenai.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282449 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b81bbd204ba3a9b2968f0667fb804b3d048b7033","date":"2016-09-27T01:28:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove out of date items in TODO.txt\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282466 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fbdbb36015dc4695e07d00da213705f57b87f78d","date":"2016-09-27T02:13:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix possible division by zero\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282468 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b79ca0a81832311af59224c414ef272b76e2cc35","date":"2016-09-27T07:55:26.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[cmake] Strip possibly-inherited compiler flags in in-tree build only\n\nStrip the set of flags (including debug defs, -m32) that could\nbe inherited from top-level LLVM build only when in-tree build is\nperformed. This prevents libcxx from confusingly and undesiredly\nstripping user-supplied flags e.g. when performing packaging system\ncontrolled multi-ABI build.\n\nOtherwise, in order to perform 32-bit builds the build scripts would\nhave to use LIBCXX_BUILD_32_BITS. However, -m32 is only one of the many\ndifferent ABI flags for different targets, and it really makes no sense\nto add separate CMake options for each possible -m* flag and then keep\na mapping from well-known flags to the custom CMake options.\n\nDifferential Revision: https://reviews.llvm.org/D24809\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282475 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e5fbd4d408b76c16491f0326836b455d3433f79","date":"2016-09-27T12:15:35.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[cmake] Add linker option \"-Wl,-z,defs\" in standalone build\n\nAdd the \"-Wl,-z,defs\" linker option that is used to prevent\nunderlinking. It is already used by LLVM itself but does not get\npropagated into stand-alone build of libc++. This patch ensures\nthat the option is passed in independently of whether libc++ is built\nin-tree or out-of-tree.\n\nPatch by Lei Zhang.\n\nDifferential Revision: https://reviews.llvm.org/D24119\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282483 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3e00f6d37d0495667ed17445738ac576ed370f2","date":"2016-09-27T18:54:02.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"Revert r282483 - [cmake] Add linker option \"-Wl,-z,defs\" in standalone build\n\nRevert r282483 as it causes build failures due to missing symbols when\nnot linking to -lgcc_s (i.e. doing pure LLVM stack build). The patch can\nbe reintroduced when the build system is fixed to add all needed\nlibraries (libunwind, compiler-rt).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282524 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5fc5ca37f673f47938d3a36f6f762eee58a3a7a","date":"2016-09-28T21:16:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve 'last_write_time(...)' accuracy and detect overflow errors.\n\nThe ::stat struct on Linux, FreeBSD, and OS X  provides the access and\nmodification times as an instance of 'timespec', which has a nanosecond\nresolution. The 'st_mtime' and 'st_atime' members simply reference the 'tv_sec'\nvalue of the timespec struct. This patch changes 'last_write_time(...)' so that\nit extracts both the seconds and nanoseconds values of the last modification\ntime, providing a more accurate implementation of 'last_write_time(...)'.\n\nAdditionally this patch fixes a possible signed integer overflow bug. The\n'file_time_type' type cannot represent all possible values returned by\nthe filesystem. Attempting to construct a 'file_time_type' from one of these\nvalues is undefined behavior. This patch avoids that UB by detecting possible\noverflows before the conversion.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282634 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff4f2987804aa25f30c57e9c5cfe7e4233c05770","date":"2016-09-28T22:08:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark libc++ internal globals with _LIBCPP_SAFE_STATIC.\n\nThis patch applies the _LIBCPP_SAFE_STATIC attribute to internal globals,\nmost of which are locking primitives, in order to ensure that they can\nsafely be used during program startup.\n\nThis patch also fixes an unsafe static init issue with the global locks\nused to implement atomic operations on shared pointers. Previously the\nlocks were initialized using a dynamically initialized pointer, so it was\npossible that the pointer was uninitialized.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282640 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b160392eb7cf32ec54268e4829e5e9ab7a6c1096","date":"2016-09-28T22:28:51.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Clarify _LIBCPP_NEW_DELETE_VIS for Windows\n\nReplace a stale reference to cxx_EXPORTS with _LIBCPP_BUILDING_LIBRARY,\nand clarify why the operator new and delete family of functions are\nmarked dllexport when building but *not* dllimport when including the\nheader externally.\n\nThe new code is identical to the intent of the old code (and would be\nfunctionally equivalent were cxx_EXPORTS still defined when building\nlibc++). The overall behavior is not ideal, since Microsoft's operator\nnew and delete functions will get called instead of libc++'s, but I\nthink consistently calling msvcrt's functions is better than either\ncalling msvcrt's or libc++'s functions depending on header inclusion.\n\nDifferential Revision: https://reviews.llvm.org/D25042\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282644 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0f860c9460cf084f9fbd3bd3635c06e839bcabb","date":"2016-09-29T01:01:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Partially revert overflow checking in last_write_time\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282660 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56919fcf4e2b66028dc48048b5fa0bf1dcff5175","date":"2016-09-29T03:35:41.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Add missing locale aliases\n\nAdd underscore aliases for strtof_l and strtod_l. _strtold_l exists in\nVS 2013 and above, so fix that definition as a drive-by fix.\n\nDifferential Revision: https://reviews.llvm.org/D25059\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@282681 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cdac787ae84e61e0fed2027bd158f8dc873ef435","date":"2016-10-01T10:34:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace test_throw.h header with a single test macro\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283030 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"89e826a160dce10dd353e1e0bca21c6fabe86b92","date":"2016-10-01T10:46:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove all instances of _LIBCPP_HAS_NO_RVALUE_REFERENCES from test/std/utilities\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283032 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"970af07a3cb04cf6e97d45d32e47a0278bc6dae8","date":"2016-10-01T20:38:31.000Z","author":{"name":"Hal Finkel","email":"hfinkel@anl.gov"},"message":"Use __builtin_isnan/isinf/isfinite in complex\n\nThe libc-provided isnan/isinf/isfinite macro implementations are specifically\ndesigned to function correctly, even in the presence of -ffast-math (or, more\nspecifically, -ffinite-math-only). As such, on most implementation, these\neither always turn into external function calls (e.g. glibc) or are\nspecifically function calls when FINITE_MATH_ONLY is defined (e.g. Darwin).\n\nOur implementation of complex arithmetic makes heavy use of isnan/isinf/isfinite\nto deal with corner cases involving non-finite quantities. This was problematic\nin two respects:\n\n  1. On systems where these are always function calls (e.g. Linux/glibc), there was a\n     performance penalty\n  2. When compiling with -ffast-math, there was a significant performance\n     penalty (in fact, on Darwin and systems with similar implementations, the code\n     may in fact be slower than not using -ffast-math, because the inline\n     definitions provided by libc become unavailable to prevent the checks from\n     being optimized out).\n\nEliding these inf/nan checks in -ffast-math mode is consistent with what\nhappens with libstdc++, and in my experience, what users expect. This is\ncritical to getting high-performance code when using complex<T>. This change\nreplaces uses of those functions on basic floating-point types with calls to\n__builtin_isnan/isinf/isfinite, which Clang will always expand inline. When\nusing -ffast-math (or -ffinite-math-only), the optimizer will remove the checks\nas expected.\n\nDifferential Revision: https://reviews.llvm.org/D18639\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283051 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d24aba42200af6a1ae9f054340bfbe012375219b","date":"2016-10-01T20:38:44.000Z","author":{"name":"Hal Finkel","email":"hfinkel@anl.gov"},"message":"Remove some additional unnecessary std:: in cmath\n\nUnlike in math.h, as Eric pointed out in the review of D18639, we don't need\nthe std:: in cmath.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a39b868f53f2d91a086e420312f76c7a9cb2631f","date":"2016-10-03T14:23:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"List tentatively ready issues for Issaquah\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283112 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83050e50f7cfca5eae4adb7ae99bb0136cf95dc7","date":"2016-10-03T14:24:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change titie of page from Oulu to Issaquah\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283113 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fe453ab5519831c0627eaea320fc532f5e9d736","date":"2016-10-03T16:00:22.000Z","author":{"name":"Logan Chien","email":"tzuhsiang.chien@gmail.com"},"message":"[lit] Allow more file extensions for test cases.\n\nThis commit splits the file extensions before determining the test\nformat.  This allows libc++abi to add assembly-based test cases.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283118 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d06a50a513332325af78afcca383e0e5d79ee4d","date":"2016-10-03T17:35:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark a couple issues as done (2742 and 2760)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283124 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec81081c3cf76e16c3e5023b7e9a7eafcd11d7e3","date":"2016-10-03T23:39:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests to make sure that is_constructible<cv-void> is false. We already checked 'unqualified void'. This was brought up by LWG#2738\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283161 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"42a87db999390786e328a06d5467aa6aab879130","date":"2016-10-03T23:40:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change a couple of 'template <typename's to 'template <class' which is what we use in the rest of the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1770a8c1186d78d819f5fe18bcdfc71933c6f497","date":"2016-10-03T23:42:31.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark a couple more Issaquah issues as done: 2578 and 2738\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283163 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8332f9b5d1672a86be672a629af5c7834164906f","date":"2016-10-04T13:41:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark #2739 as ready\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283218 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10ff23dc02fc95857dfe0ffaf4b4ce4a92c41516","date":"2016-10-04T14:08:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark #2598 as ready\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283220 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc30c0b9f3ce97afdc9651cac88359591e93ebca","date":"2016-10-04T14:39:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark #2759 as ready and #2755 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283222 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f972f6538b4d384dc7debb56a9a4ca8e1ba8d21","date":"2016-10-04T21:25:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] [test] Guard __has_include usage with a macro\n\nSummary: There's a macro scheme already being used for __has_feature etc. Use it for __has_include too, which makes MSVC happy (it doesn't support __has_include yet, and unguarded use explodes horribly).\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25251\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283260 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f257c26ec76a6b5b46f7225c3af1e148dc401359","date":"2016-10-05T15:21:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues 2221, 2556 and 2589 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f5d5948ef9f0b5d832c53a3ff0ba498fa440517","date":"2016-10-05T15:47:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add another append test for basic_string\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283331 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aead8da085609e14a5b0f9ea2eac74d5935c2737","date":"2016-10-05T17:01:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make tests for is_empty better. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283339 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d19a9da96e85726c0756976019aa7ad6f4ffafb","date":"2016-10-05T17:02:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2358 as done\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283341 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8df21c935f4624b5cc17eed7cf4770555cdbe326","date":"2016-10-05T18:36:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2679 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283356 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f5293bc6aca86369b957d4a624a7afe420cb1258","date":"2016-10-05T18:47:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Comment out failing test while I figure out who is at fault\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283360 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d6b5d3ed1d335aaad101e236b70dca457d52dc4","date":"2016-10-05T22:55:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix strict-aliasing violation in typeinfo::hash_code()\n\nSummary:\nThe current implementation of `hash_code()` for uniqued RTTI strings violates strict aliasing by dereferencing a type-punned pointer. Specifically it generates a `const char**` pointer from the address of the `__name` member before casting it to `const size_t*` and dereferencing it to get the hash. This is really just a complex and incorrect way of writing `reinterpret_cast<size_t>(__name)`.\n\nThis patch changes the conversion sequence so that it no longer contains UB.\n\n\nReviewers: howard.hinnant, mclow.lists\n\nSubscribers: rjmccall, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24012\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3a71a295ed9412bb34ab125c98380498a608b1a","date":"2016-10-06T11:15:41.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Recover no-exceptions XFAILs - I\n\nFirst batch of changes to get some of these XFAILs working in the\nno-exceptions libc++ variant.\n\nChanged some XFAILs to UNSUPPORTED where the test is all about exception\nhandling. In other cases, used the test macros TEST_THROW and\nTEST_HAS_NO_EXCEPTIONS to conditionally exclude those parts of the test\nthat concerns exception handling behaviour.\n\nReviewers: EricWF, mclow.lists\n\nDifferential revision: https://reviews.llvm.org/D24562\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283441 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a38ecc7e1fc85d7f5694c5ede0608d9787aa0a8","date":"2016-10-06T13:59:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2514, 2519, 2536 and 2475 as done\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283452 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45a9570f5d1579a7ccfc18ac474b2cf8a13832a5","date":"2016-10-07T18:51:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove MSVC workarounds. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283580 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c429bee79204b77cff067695798dfac5605820d","date":"2016-10-07T21:27:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix various issues in std::any and the related tests.\n\n* Fix self-swap. Patch from Casey Carter.\n\n* Remove workarounds and tests for types with deleted move constructors. This\n  was originally added as part of a LWG proposed resolution that has since\n  changed.\n\n* Re-apply most recent PR for LWG 2769.\n\n* Re-apply most recent PR for LWG 2754. Specifically fix the SFINAE checks to\n  use the decayed type.\n\n* Fix tests to allow moved-from std::any's to have a non-empty state. This is\n  the behavior of MSVC's std::any.\n\n* Various whitespace and test fixes.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee0db89aee85f5f1bb0ca659bf5bd92a417e1e6b","date":"2016-10-07T22:10:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix shadow warnings. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a62e1dd729690cde4c1445cf0774626add4f2609","date":"2016-10-07T23:07:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR30642 -  libc++ leaks always-visible symbols into programs\n\nThis was caused by r281673, specifically changing `_LIBCPP_EXTERN_TEMPLATE_TYPE_VIS`\nfrom `__attribute__((__type_visibility__(\"default\")))` to\n`__attribute__((__visibility(\"default\")))`.\n\nI made that change because I thought the external instantiations needed\ntheir members to have default visibility. However since libc++ never builds\nwith -fvisibility=hidden this appears not to be needed. Instead this change\ncaused previously hidden inline methods to become un-hidden, which is a regression.\n\nThis patch reverts the problematic change and fixes PR30642.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283620 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c4dfbe55cdd98008da743d6e563f62bb3f777ea","date":"2016-10-07T23:19:04.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Disable alignment support of 0x4000 for Win32. https://reviews.llvm.org/D25053\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283621 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"124ed406e56ed380279a6a05f996a96ff511af9d","date":"2016-10-08T00:56:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix stack_allocator\n\nSummary:\nTo quote STL the problems with stack allocator are\"\n\n>\"stack_allocator<T, N> is seriously nonconformant to N4582 17.6.3.5 [allocator.requirements].\n> First, it lacks a rebinding constructor. (The nested \"struct rebind\" isn't sufficient.)\n> Second, it lacks templated equality/inequality.\n> Third, it completely ignores alignment.\n> Finally, and most severely, the Standard forbids its existence. Allocators are forbidden from returning memory \"inside themselves\". This requirement is implied by the Standard's requirements for rebinding and equality. It's permitted to return memory from a separate buffer object on the stack, though.\"\n\nThis patch attempts to address all of those issues.\n\nFirst, instead of storing the buffer inside the allocator I've change `stack_allocator` to accept the buffer as an argument.\n\nSecond, in order to fix rebinding I changed the parameter list from `<class T, size_t NumElements>` to `<class T, size_t NumBytes>`. This allows allocator rebinding\nbetween types that have different sizes. \n\nThird, I added copy and rebinding constructors and assignment operators.\n\nAnd finally I fixed the allocation logic to always return properly aligned storage.\n\n\n\nReviewers: mclow.lists, howard.hinnant, STL_MSFT\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25154\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283631 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef9e52bc9054531aafd0eacddb26c48e09c7cf94","date":"2016-10-08T00:57:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing include in test_allocator.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"daa895f887f6e10ed5bc160f14ce555fdf35fc1d","date":"2016-10-08T00:59:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing <memory> include in test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283633 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd1c9dddccdedb84db59a9c63f399b39240cbeff","date":"2016-10-08T01:25:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Purge all usages of _LIBCPP_STD_VER under test/std/algorithm\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283643 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cedbdd7feef9f8b644a62af246a0dd8fe7bae8d5","date":"2016-10-08T01:32:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove all _LIBCPP_VERSION tests from under test/std\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283644 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffac2247af264345d79647985fd248014d868cad","date":"2016-10-08T10:27:45.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[cmake] Split linked libraries into private & public, for linker script\n\nIntroduce LIBCXX_LIBRARIES_PUBLIC in addition to LIBCXX_LIBRARIES that\nholds 'public' interface libraries -- that is, libraries that both\nlibc++ links to and programs linked against it need to link to.\n\nCurrently this includes the ABI library and optionally -lunwind (when\nLIBCXXABI_USE_LLVM_UNWINDER is on). The libraries are included in the\nlinker script, in order to make it possible to link C++ programs using\nclang with compiler-rt runtime out-of-the-box.\n\nDifferential Revision: https://reviews.llvm.org/D25008\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283659 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"475cf023002ece7dc4e4906d7e9dccaa55b6f8a4","date":"2016-10-09T02:49:31.000Z","author":{"name":"Hal Finkel","email":"hfinkel@anl.gov"},"message":"[CMake] Fix in-tree libcxxabi build support after r283659\n\nr283659 changed the argument to gen_link_script.py from SCRIPT_ABI_LIBNAME to\nLIBCXX_LIBRARIES_PUBLIC, assuming that all of the items in the\nLIBCXX_LIBRARIES_PUBLIC list were library names. This is not right, however,\nfor in-tree libcxxabi builds, we might have the target name in this list. There\nwas special logic to fixup SCRIPT_ABI_LIBNAME for this situation; change it to\napply a similar fixup for LIBCXX_LIBRARIES_PUBLIC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283684 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3bf8a9cb678c26268c5d1ba6074f68632b825ca8","date":"2016-10-09T21:34:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix linker script generation for in-tree builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283700 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8bddff75ef33375d12138f80ee3497341f371b46","date":"2016-10-09T21:43:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove debug output from gen_linker_script.py\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283701 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd0e7614738ac855b28f24631cff8e4d8986d100","date":"2016-10-10T04:22:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove use of int128_t inside the filesystem implementation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283712 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"051593845dfa97a9787cdf9297e7f47cfeb6cde5","date":"2016-10-10T05:19:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround missing C++14 constexpr semantics in filesystem\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283714 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a244bb9d18007e51833759a26dc3a29e3616c952","date":"2016-10-10T05:34:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Provide a constexpr addressof with GCC 7.\n\n__builtin_addressof was added to the GCC trunk in the past week. This patch\nteaches libc++ about it so it can correctly provide constexpr addressof.\n\nUnfortunately this patch will break users of earlier GCC 7 builds, since\nwe expect __builtin_addressof but one won't be provided. One option would be\nto only use __builtin_addressof for GCC 7.1 and above, but that means\nwaiting for another release.\n\nInstead I've specifically chosen to break older GCC 7 versions. Since GCC 7\nhas yet to be released, and the 7.0 release is a development release, I\nbelieve that anybody currently using GCC 7.0 will have no issue upgrading.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283715 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a54229f7c5ab3012c604b3b8b3cef9e3b55ea2a7","date":"2016-10-10T06:31:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup CMake status output\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a486cec463a67d0542591816ce8dd21beb84c61","date":"2016-10-10T08:38:51.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Add the missing limits.h header\n\nThe implementation of [depr.c.headers] in D12747 introduced the necessary\nC headers into libc++. This patch adds one more missing headers: limits.h\n\nWe spotted this due to a failing C++03 test [limits_h.pass.cpp] in our libc++\nconfiguration; when the limits.h header is included from a C++ program, it now\nbypassed the __config header and went directly into the underlying C library's\nlimits.h header, which is problematic for us because we use __config header to\nconfigure the underlying C library's behaviour when used from a C++ context.\n\nReviewers: mclow.lists, rsmith\n\nDifferential revision: https://reviews.llvm.org/D25361\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283726 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8be2c5dd9e444138acc3463f8b13a1ecb207d9ca","date":"2016-10-10T14:10:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests for LWG2544. We already implement this; just adding tests to make sure that we keep doing it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b6c2499b1cad842c95ffa0507199c4a17ef015e","date":"2016-10-10T14:15:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark issues 2544, 2567, 2569, 2686 and 2694 as ready/done.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283752 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3f11982534fdaf2505518c5e5ce679a60c8f9fc","date":"2016-10-10T14:37:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add whitespace to make not_fn_impl more clear. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283757 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"742d878b029e37cf5e6b7ee0806ceeb2af94af9c","date":"2016-10-10T14:45:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix documentation mis-spelling.\n\nI promise to stop misspelling things when the English language gains a program\nthat does strict semantic checking.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283759 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7b867b3427b1e697669672428a1667c195efe17","date":"2016-10-10T15:56:01.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fix gcc build.\n\nAttempt to fix a horrible gcc include order problem.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283762 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9115a1b416a659a5265e94b866617c44ba4eecb","date":"2016-10-10T16:47:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add tests to check that swap(std::function, std::function) is noexcept. This is LWG#2062, but we already do this. No changes to the library, just adding tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283780 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bcef9740418927b9b126dd7b2dac5e956b0a3902","date":"2016-10-10T17:11:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated notes about issues; marked 2062, 2223, 2394, 2460 and 2540 as complete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283781 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf1f79c27a31231daaaed4e27a5d8ec6bd97e7d6","date":"2016-10-10T18:53:32.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx] Add support for Fuchsia\n\nFuchsia is a new operating system which uses musl as the standard\nC library, libc++ and libc++abi as the C++ standard library.\n\nDifferential Revision: https://reviews.llvm.org/D25414\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"529c61f2dcee83f99a6c5b11de90380bc77db7fe","date":"2016-10-10T21:00:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update with the rest of the results from the 7-Oct Telecom\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283799 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d97e2bc3fa3c97b903c83481ca2d226dec379c1","date":"2016-10-10T21:37:16.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 2777 as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283804 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"05577c82e16e2bb03242be5e36f57d63f5854f89","date":"2016-10-11T21:13:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix incorrect exception handling behavior in the uninitialized algorithms\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283941 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2bd16c9d218dd9474d16f421a987ce1bc16cacf","date":"2016-10-11T21:22:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix std::pair on FreeBSD\n\nSummary:\nFreeBSD ships an old ABI for std::pair which requires that it have non-trivial copy/move constructors. Currently the non-trivial copy/move is achieved by providing explicit definitions of the constructors. This is problematic because it means the constructors don't SFINAE properly. In order to SFINAE copy/move constructors they have to be explicitly defaulted and hense non-trivial.\n\nThis patch attempts to provide SFINAE'ing copy/move constructors for std::pair while still making them non-trivial. It does this by adding a base class with a non-trivial copy constructor and then allowing pair's constructors to be generated by the compiler. This also allows the constructors to be constexpr.\n\n\nReviewers: emaste, theraven, rsmith, dim\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25389\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a75b75f514c5c92c8ad8d304b76a01a979b6134c","date":"2016-10-11T21:24:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove extraneous 'const' in the implementation of is_move_assignable. Howard pleads temporary insanity about this.  Discussed at http://stackoverflow.com/questions/39986185\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283945 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"508f208ae9fe8afa4cccea0763ffc99662433886","date":"2016-10-11T22:18:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix LWG2683 - filesystem::copy() should always clear the user-provided error_code\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283951 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53003593a2257fe9111a1bc66e6ef88fe88d41f9","date":"2016-10-12T00:00:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make it easier to run the libc++ test suite against libstdc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283958 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc6e622f19c3c0aec44e0f7317905d5d1b240da8","date":"2016-10-12T00:28:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add mork workarounds for running the test suite against libstdc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283960 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4432d3f204d91e234e29686a510b82f5ca764227","date":"2016-10-12T04:29:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent the test suite from hanging when run against libstdc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283975 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"159b4608682e31025fcb8bf995a7bbb858635b55","date":"2016-10-12T04:56:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix two more tests that hang when testing against libstdc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283976 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fbc80168bb6368afdf8d21f4d21f0376fa941253","date":"2016-10-12T06:45:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add <optional> header.\n\nThis patch is largely thanks to Casey Carter @ Microsoft. He did the initial\nwork of porting our experimental implementation and tests over to namespace\nstd.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283977 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ead5d404cc81f468af434f5e567c5b917d9a1cfe","date":"2016-10-12T06:48:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert Add <optional>. Will recommit with better commit message\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283978 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35ce4859dd7cc2b7ed280cecc0fe0d9cabe6461b","date":"2016-10-12T07:46:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement N4606 optional\n\nSummary:\nAdapt implementation of Library Fundamentals TS optional into an implementation of N4606 optional.\n\n  - Update relational operators per http://wg21.link/P0307\n  - Update to requirements of http://wg21.link/P0032\n  - Extension: Implement trivial copy/move construction/assignment for `optional<T>` when `T` is trivially copyable.\n\nAudit P/Rs for optional LWG issues:\n  - 2756 \"C++ WP optional<T> should 'forward' T's implicit conversions\" Implemented, which also resolves 2753 \"Optional's constructors and assignments need constraints\" (modulo my refusal to explicitly delete the move operations, which is a design error that I'm working on correcting in the 2756 P/R).\n  - 2736 \"nullopt_t insufficiently constrained\" Already conforming. I've added a test ensuring that `nullopt_t` is not copy-initializable from an empty braced-init-list, which I believe is the root intent of the issue, to avoid regression.\n  - 2740 \"constexpr optional<T>::operator->\" Already conforming.\n  - 2746 \"Inconsistency between requirements for emplace between optional and variant\" No P/R, but note that the author's '\"suggested resolution\" is already implemented.\n  - 2748 \"swappable traits for optionals\" Already conforming.\n  - 2753 \"Optional's constructors and assignments need constraints\" Implemented.\n\nMost of the work for this patch was done by Casey Carter @ Microsoft. Thank you Casey!\n\n\n\nReviewers: mclow.lists, CaseyCarter, EricWF\n\nDifferential Revision: https://reviews.llvm.org/D22741\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283980 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"028a2091ea1030eb9a11df10a75d9e9b672766c4","date":"2016-10-12T08:09:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Protect special members of NullBase archetype to avoid exposing them\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283983 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae96260ceb4dffd8dee2bebd87934bbc70ae493b","date":"2016-10-12T09:06:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove use of _VSTD::__invoke in the not_fn tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283991 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf148f02bce4466e0bfaf285ee0abc6e920e53d6","date":"2016-10-12T09:20:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of C++14 constexpr in C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283993 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"159b45f505b3ddc3d25a1493af95cb5b6827a925","date":"2016-10-12T09:31:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix nasty_containers.hpp for other stdlibs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283994 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f6a9607c27636e275eb392d8c1428b1b2deb5d3","date":"2016-10-12T09:48:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more C++11 constexpr issues in the tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283996 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76f406d252c1c7680665defd7ad485aa002b21bd","date":"2016-10-12T09:53:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"support --param=std=gnu++XX\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283997 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4775578c617a5a77d3eb82e38f636141088640cf","date":"2016-10-12T10:19:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove usages of _ALIGNAS_TYPE\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@283999 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7b77ebd18eea99dc19123e7345e91893c887940","date":"2016-10-12T10:28:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove usages of _LIBCPP_CONSTEXPR under test/std\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284002 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de8e3d3a4fb6854ac6116119c1d947610a9b0e4f","date":"2016-10-12T11:20:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Unbreak C++03 build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284004 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bc0638a9244e9fa22ffe100a551ba66e248e640","date":"2016-10-12T11:29:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove incorrect XFAILS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284005 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c69d8ca589e771b4f0f2aa8182894e04081195bf","date":"2016-10-12T11:35:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Correctly grant rebound limited_allocators friendship.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284006 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d588d2dc20bb372d2692354f64cb9d3507107076","date":"2016-10-12T13:48:14.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Correct explanation of _LIBCPP_NEW_DELETE_VIS\n\nThe behavior of this macro actually needs to apply universally on\nWindows and not just when using the Microsoft CRT. Update the macro\ndefinition and documentation accordingly.\n\nDifferential Revision: https://reviews.llvm.org/D25145\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284016 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b6361287ffb15e8a1f409d06966f8b8b8606c4d5","date":"2016-10-12T16:13:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark ostream_iterator's constructors as noexcept.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284021 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ecb5332d41a63c08d3520b3b6d9d47f158b0f404","date":"2016-10-12T20:26:47.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Disable trivial pair copy/move tests when unsupported\n\nSummary:\nOn FreeBSD, for ABI compatibility reasons, the pair trivial copy\nconstructor is disabled, using the aptly-named\n`_LIBCPP_DEPRECATED_ABI_DISABLE_PAIR_TRIVIAL_COPY_CTOR` define.\n\nDisable the related tests when this define is on, so they don't fail\nunexpectedly.\n\nReviewers: emaste, rsmith, theraven, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25449\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284047 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a469f83b267537e8ae4a6f42f3a8dff27865d8c0","date":"2016-10-13T04:07:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r282345 - Use __attribute__((internal_linkage)) when available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"698cce6e0e981a1c6b963f34d2c6097ac8e0fadc","date":"2016-10-13T13:21:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add missing include in test; NFC. Thanks to Jonathan Wakely for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284120 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e29fb4c41121b2058d366f8a0205ba3012c5639b","date":"2016-10-13T21:06:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement http://wg21.link/p0302r1: Removing Allocator Support in std::function. These functions never worked, and as far as I know, no one ever called them.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284164 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"426eb5dd449b130db22e3c58ab988a03662ecd3b","date":"2016-10-13T21:15:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update the status of three papers that do not require library changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d12b5c6f314ef3c84883d4ad5530db63d77b55c","date":"2016-10-14T00:07:57.000Z","author":{"name":"Sebastian Pop","email":"sebpop@gmail.com"},"message":"remove warnings from google-benchmarks in libcxx\n\nDifferential Revision: https://reviews.llvm.org/D25522\n\nPatch written by Aditya Kumar.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284179 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b17cc02df2e2e8e9ec228f14938367dd113d67fc","date":"2016-10-14T02:27:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add ABI Changelog and current symbol list for Linux\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284185 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d6a66c6361b131d162b0c81c9745b7429f1754f5","date":"2016-10-14T02:32:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add OS X abi list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284186 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d1452eb4626eb3cd64100976ede19a5873c505f","date":"2016-10-14T02:55:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix CMake configuration error and add ABI lists for OS X.\n\nThe primary reason for this patch is to add the OS X ABI lists for 3.9 and\nToT.\n\nHowever while working on that I discovered that we incorrectly\nexported the libc++abi symbols. Previously we had chosen the wrong CMake\nconfiguration path and that caused us to re-export the c++abi binary instead\nof using the symbol lists.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284188 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"959ed214558bd34547380bbcde7bf7b54fab15eb","date":"2016-10-14T02:55:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add 3.9 symbol list for OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284189 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"977cd9f231d567514f92b3acba5898ccc446f666","date":"2016-10-14T04:06:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add ABI list for 3.9 linux\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3d49c930bfa3bbff7c8b1c3e10901b8a575e3b4","date":"2016-10-14T04:14:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Re-export two previously exported std::string functions.\n\nThese functions were removed from the dylib sometime between the 3.9 release\nand now. This patch manually exports them to re-gain ABI compatibility.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284193 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7fa27fcbafcf5345da1c61635c3b23b8d896e177","date":"2016-10-14T04:21:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r284193 - it is not correct on OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284194 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"852b52172064a821ead3bdd3b549ce8ba98799a0","date":"2016-10-14T05:04:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Sort ABI lists by name so that changes don't generate big diffs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284198 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8efec5eeb66aa4a12ed3d4ee6708e8929462de9f","date":"2016-10-14T05:10:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add ABI changelog entry for <any>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284199 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9dbc053b47a9670606392c99b29ee89cf371712d","date":"2016-10-14T05:29:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove two ABI symbols added after the 3.9 release\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284200 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4289b6ea05eec375b184f7db7fd090d993d11cde","date":"2016-10-14T06:15:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup LIT testing doc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284205 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9acbffa370bd03e4e0ed742110e4c780b99c28ac","date":"2016-10-14T06:46:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0035R4 -- Add C++17 aligned allocation functions\n\nSummary:\nThis patch implements the library side of P0035R4. The implementation is thanks to @rsmith.\n\nIn addition to the C++17 implementation, the library implementation can be explicitly turned on using `-faligned-allocation` in all dialects.\n\n\nReviewers: mclow.lists, rsmith\n\nSubscribers: rsmith, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25591\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284206 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"06e44a7ea8ab6bff97aef30ec87f6845ded190df","date":"2016-10-14T06:47:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Correct ABI changelog revision number\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284207 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf702696d427ef98417cf939f6a039427aa2a028","date":"2016-10-14T06:49:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update OS X ABI list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284208 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48aa2e14a2bd35820a40e3ebe0d447be15219389","date":"2016-10-14T07:19:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add void_t and invoke feature test macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284209 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34c6b805cf0358809ea95c0d4303537be3225db7","date":"2016-10-14T07:49:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL  aligned allocation test failures with UBSAN\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284210 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f172df1f438f1dd40d751c5a4462ce5543969b6f","date":"2016-10-14T08:47:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL aligned allocation tests for older Clang versions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284214 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"472c8c6612832dcd8f6d367dbd5fe8e6ca825568","date":"2016-10-14T09:06:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove dead CMake target\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284216 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"78c020bd7844ce5ae458edc22e151578f79b0ec8","date":"2016-10-14T10:30:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around Clang driver segfault when --coverage is used with -c and /dev/null\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284225 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29026ad78a72a4f1366b501ffcca2d21ae7e12a1","date":"2016-10-14T12:56:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable Modules when building the libc++ sources.\n\nLibc++ will not build with modules enabled. In order to support an in-tree\nlibc++ when LLVM_ENABLE_MODULES is ON we need to explicitly disable the feature.\n\nUnfortunately the libc++ sources are fundamentally non-modular. For example\niostream.cpp defines cout, cerr, wout, ... as char buffers instead of streams\nin order to better control initialization/destruction. Not shockingly Clang\ndiagnoses this. Many other sources files define _LIBCPP_BUILDING_FOO macros to\nprovide definitions for normally inline symbols (See bind.cpp). Finally The\ncurrent module.map prohibits using <strstream> in C++11 so we can't build\nstrstream.cpp.\n\nI think I can fix most of these issues but until then just disable modules.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284230 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7250d3341e182f3f0ad57e379675927714ccb901","date":"2016-10-14T13:00:07.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Do not declare the thread api when __external_threading is present\n\nThis fixes a small omission where even when __external_threading is provided,\nwe attempt to declare a pthread based threading API. Instead, we should leave\nout everything for the __external_threading header to take care of.\n\nThe __threading_support header provides a proof-of-concept externally threaded\nlibc++ variant when _LIBCPP_HAS_THREAD_API_EXTERNAL is defined. But if the\n__external_threading header is present, we should exclude all of that POC stuff.\n\nReviewers: EricWF\n\nDifferential revision: https://reviews.llvm.org/D25468\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284232 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f2c83f0558706eb8d93314f935f89d420121441","date":"2016-10-14T13:56:58.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Improve the gcc workaround for the missing __has_include macro.\n\nNFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284237 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e630058e904a849ceb5d6ec3066225cfe424aa01","date":"2016-10-14T21:30:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Clarify XFAIL comments\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284282 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ffd1d56b461a19673e55ad72328548423cae59c","date":"2016-10-14T22:47:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent new/delete replacement tests from being optimized away.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284289 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f39437989a9aeab41b2fca9b687426709e77b8a","date":"2016-10-15T20:58:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update the status of issues\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ca4e5038beeb4a60c25147f06533d7f69de4c4c","date":"2016-10-15T21:29:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG2664 and update its status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"620a9a5ecf2cac52c018add9f2ad80c6051aa300","date":"2016-10-15T22:37:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement modified LWG 2665\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284313 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25dc5bdb887e80a232f86e5b54b298427392e1c7","date":"2016-10-15T23:05:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2672.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284314 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8bbf53fc9338ba72647a4dd8667595e520dfe401","date":"2016-10-15T23:12:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG 2680 as done\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284315 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"451f34db162fddec235736bc0ee0c670ad452e2a","date":"2016-10-16T00:29:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2681 and 2682\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284316 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e1bbc7437f4679ce8b6ed5984f2cc72a96f3349","date":"2016-10-16T00:47:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2712 and update other issues status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284318 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e5869a3fbb56b2a84b56e8fe1eaa8f70d745dd4","date":"2016-10-16T00:49:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update notes for LWG 2678\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284319 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"100a39d169ce2e4190ed140f427e8310289de09d","date":"2016-10-16T01:43:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update issue status for LWG 2768 and 2769\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284321 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"846edfb83728df36f47111e3e3a8123f2dfa1e56","date":"2016-10-16T02:51:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update issue status for LWG 2744\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284322 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46c0fcb2b3fb42e3496f3de8c548f87d2f9d3f30","date":"2016-10-16T03:21:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update status for std::optional LWG issues and fix an optional SFINAE bug\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284323 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fcdb3f77e8798f82929365f85baf72b46f9fcde0","date":"2016-10-16T03:45:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update LWG 2767 and add test case\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284324 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"100603508d79d92bc2b67cbcbdbaafd6a2f90bdc","date":"2016-10-16T03:49:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of non-constexpr C++14 addressof\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a901dae5a2ccadf1af5d638269f61522926dd0b","date":"2016-10-16T03:52:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update LWG 2754 status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284326 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4035b668e6ce297febb3ba14724db93c4a91c983","date":"2016-10-16T11:56:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make any_cast<void()>(nullptr) compile\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf9e11c4a678e723eca8f0c6342c277243f9a0bc","date":"2016-10-18T16:54:54.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[solaris] Fix iswxdigit_l() support function prototype\n\nFix the iswxdigit_l() function prototype to take wint_t parameter\ninstead of incorrect wchar_t.\n\nDifferential Revision: https://reviews.llvm.org/D25431\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284493 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7c2afba80b23572abcdec87094d1108e93874976","date":"2016-10-18T16:54:59.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[solaris] Convert the support library to C++ to fix -std=c++11 build\n\nConvert the Solaris xlocale.c compatibility library from plain C to C++\nin order to fix the build failures caused by the addition of -std=c++11\nto LIBCXX_COMPILE_FLAGS. The additional flag got propagated to the C\nfile, resulting in error with strict compilers.\n\nDifferential Revision: https://reviews.llvm.org/D25431\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284494 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4f031f899c0953ed8f9441bdbcb7cb7ecbaee438","date":"2016-10-19T12:34:17.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[cmake] Allow testing against installed LLVM with no sources\n\nAdjust the stand-alone build files to accept either CMake files from\nLLVM_CMAKE_PATH or from LLVM_MAIN_SRC_DIR instead of requiring both.\nThis makes it possible to run libcxx tests on top of installed LLVM\nand lit, without having to unpack a copy of LLVM sources. Furthermore,\nit avoids adding duplicate paths.\n\nDifferential Revision: https://reviews.llvm.org/D25093\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284583 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4414a6a91122ed02d42745e14ebefb116e5bf773","date":"2016-10-19T15:12:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement constexpr support for reverse_iterator. Reviewed as https://reviews.llvm.org/D25534\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284602 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d36efa497230e2700e59237f3577b76d6d59767","date":"2016-10-20T03:31:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to workaround XPASS for aligned allocation tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284691 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"464abc8aee17d7a202c86086dcc065905bb36399","date":"2016-10-20T14:57:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Adding a missing constexpr test for reverse_iterator operator[].\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d164cbf6fb3c2058ad941f8b19b13572a9fc905","date":"2016-10-21T03:14:27.000Z","author":{"name":"Bruno Cardoso Lopes","email":"bruno.cardoso@gmail.com"},"message":"[ModuleMap] Add more module entries to cover some non modular headers\n\nThese modules are necessary on Darwin to allow modules with\n'no_undeclared_includes' (introduced in clang r284797) to work properly\nwhile using libc++ headers.\n\nPatch extracted from a suggested module.modulemap from Richard Smith!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284801 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"741cb8b8e6092bbf88f9bd8fec76104f69bf18fb","date":"2016-10-21T20:41:47.000Z","author":{"name":"Tim Shen","email":"timshen91@gmail.com"},"message":"[libcxx] Support std::regex_constants::match_not_null\n\nSummary: Fixes PR21597.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25595\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284881 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2c4227504b4057f3c6b3fd72f7d735beba240ca","date":"2016-10-23T18:47:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix shadowing warning. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284941 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"317120240bbddc625fbca9137c7db635fa256fed","date":"2016-10-23T18:52:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unreferenced parameters. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"26cbb8d03e45d827a86a9fec084e4bb62b255060","date":"2016-10-23T18:55:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make make_from_tuple tests more portable. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8e782191656f1f7fbb9af111e074939558e3122","date":"2016-10-23T19:01:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Turn on -Wshadow so I find occurances before STL does\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6547b4fa2b17a2a93327b39dd812b1149bc242fe","date":"2016-10-23T19:14:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix libc++ specific assertion in permissions(...) tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284945 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e836f0cc761af825cd1db0d96c20abbad5447a4","date":"2016-10-23T19:26:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix breakage introduced by adding -Wshadow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284946 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44197a11b16498c68bbee6b359290ab0a52b8e64","date":"2016-10-23T21:48:27.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx] Use C++14 when building libc++ with musl\n\nmusl's pthread implementations use volatile types in their structs\nwhich is not being constexpr in C++11 but is in C++14.\n\nDifferential Revision: https://reviews.llvm.org/D25491\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284950 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87c631371881bafe3792113f65b3d844d348ac18","date":"2016-10-23T22:24:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Backout enabling -Wshadow until I have time to fix the breakage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@284952 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44543930e410f20abee9e36bf58daeac72c3d05d","date":"2016-10-24T20:10:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix shadow warnings in string_view tests. Patch from STL@microsoft.com\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285011 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04b7f3da2b0c8214a552e5540f34c543ea6dc769","date":"2016-10-24T20:11:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing include in string_view tests. Patch from Billy ONeil @ microsoft\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4a7e9177a4532fb130bc2d0e638edf5cc6d886d","date":"2016-10-24T20:40:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix non-portable tests for temp_directory_path(...)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285020 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6979a42e4412d366e4528e3bf83e3846d1520097","date":"2016-10-25T19:33:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix modules build - Rework __refstring definition \n\nSummary:\n`__libcpp_refstring` currently has two different definitions. First there is the complete definition in `<__refstring>` but there is also a second in  `<stdexcept>`.  The historical reason for this split is because both libc++ and libc++abi need to see the inline definitions of __libcpp_refstrings methods, but the `<stdexcept>` header doesn't.  However this is an ODR violation and breaks the modules build.\n\nThis patch fixes the issue by creating a single class definition in `<stdexcept>` and changing `<__refstring>` to contain only the inline method definitions. This way both `libcxx/src/stdexcept.cpp` and `libcxxabi/src/stdexcept.cpp` see the same declaration in `<stdexcept>` and definitions in `<__refstring>`\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25603\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285100 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8330b1ec02bf0c7996bd3ba608caf64b6d42721d","date":"2016-10-25T19:43:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Build with -fvisibility-inlines-hidden -- Remove 20 inline definitions from the dylib\n\nSummary:\nThis patch turns on `-fvisibility-inlines-hidden` when building  the dylib. This is important so that libc++.dylib doesn't accidentally export inline-functions which are ODR used somewhere in the dylib.\n\nOn OS X this change has no effect on the current ABI of the dylib. Unfortunately on Linux there are already ~20 inline functions which are unintentionally exported by the dylib. Almost all of these are implicitly generated destructors. I believe removing these function definitions is safe because every \"linkage unit\" which uses these functions has its own definition, and therefore shouldn't be dependent on libc++.dylib to provide them.\n\nAlso could a FreeBSD maintainer comment on the ABI compatibility of this patch?\n\n\n\nReviewers: mclow.lists, emaste, dexonsmith, joker-eph-DISABLED, jroelofs, danalbert, mehdi_amini, compnerd, dim\n\nSubscribers: beanz, mgorny, cfe-commits, modocache\n\nDifferential Revision: https://reviews.llvm.org/D25593\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da2c55edd90de8dde61af145700dadabbaaa7d25","date":"2016-10-25T19:44:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update revision number in CHANGELOG.TXT\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285102 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e577a4c660fa4a64a02f4ebf8108f9d992aa2b89","date":"2016-10-25T20:45:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix nullptr tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285117 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b035d8f0646496a4488716ad748142cbe30ff247","date":"2016-10-26T17:22:25.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"Silence unused parameter warnings in archetypes.hpp\nReviewed at: https://reviews.llvm.org/D25958\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285213 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"856947863f062ea4b2213a071f7db620a61582ab","date":"2016-10-26T20:18:13.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"Cleanup nonportable behavior in tests for std::any\n\nFixes MS issues 63, 64, and 65.\n\ntest/std/utilities/any/any.class/any.cons/move.pass.cpp:\n* \"Moves are always destructive\" is not a portable assumption; check with LIBCPP_ASSERT.\n\ntest/std/utilities/any/any.class/any.cons/value.pass.cpp:\n* The standard does not forbid initializing std::any from any pointer-to-function type. Remove the non-conforming \"DecayTag\" test.\n\ntest/std/utilities/any/any.class/any.modifiers/swap.pass.cpp:\n* Self-swap is not specified to perform no moves; check with LIBCPP_ASSERT.\n\nDifferential Revision: https://reviews.llvm.org/D26007\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285234 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"276a5209a377f1d82d2d3aa2bbe2cdfb8e185304","date":"2016-10-27T15:10:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move 'quoted' for string_view from <string_view> to <iomanip> (where the other versions of 'quoted' live. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285300 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e465ff34be9174684929e35dcf031d970659f10f","date":"2016-10-27T21:25:12.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[PATCH] D25483: [libcxx] [test] Fix non-Standard assumptions about how many elements are allocated\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285346 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"38c2a3767b0db463f5ba846225bc473acc53dbc9","date":"2016-10-27T21:40:34.000Z","author":{"name":"Tim Shen","email":"timshen91@gmail.com"},"message":"[libcxx] Make regex_match backtrack when search fails\n\nSummary:\nFixes PR19851.\nalg.re.match/ecma.pass.cpp still XFAILS on linux, but after commenting out\nlocale-related tests, it passes. I don't have a freebsd machine to produce a\nfull pass.\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits, emaste\n\nDifferential Revision: https://reviews.llvm.org/D26026\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"699447018951820564c15352b8d5a6c576504e8b","date":"2016-10-28T06:06:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add __libcpp_version file and __libcpp_library_version function.\n\nThis patch does two seperate things. First it adds a file called\n\"__libcpp_version\" which only contains the current libc++ version\n(currently 4000). This file is not intended for use as a header. This file\nis used by Clang in order to easily determine the installed libc++ version.\nThis allows Clang to enable/disable certain language features only when the\nlibrary supports them.\n\nThe second change is the addition of _LIBCPP_LIBRARY_VERSION macro, which\nreturns the version of the installed dylib since it may be different than\nthe headers.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68635ee647f7e4fa24b4f73c98dadbb24782c76d","date":"2016-10-28T06:09:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update mac ABI list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a0b4d55133a01e6c863095624a6d2bb30a46e8ef","date":"2016-10-28T06:40:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add more tests for optional<const T>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c457a97363facc45038b8de54a2da7535a7e199b","date":"2016-10-28T11:01:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test when using an installed libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285392 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3dd46201c189fb17da44fb4457afe692ad5dd5d9","date":"2016-10-28T15:02:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Explicitly specify extern \"C++\" on  __libcpp_library_version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b18d684964fceba370e9d5151b54269d5b0cab61","date":"2016-10-28T18:26:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Try 2 to add extern C++ to __libcpp_library_version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285427 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c7747562db997decb2cbfc3f24d5fb4f6861460","date":"2016-10-28T20:19:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix Clang 3.6 build error\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c715f55245e018221377a09b46d1e4d7640a0317","date":"2016-10-28T21:27:24.000Z","author":{"name":"Aditya Kumar","email":"hiraditya@msn.com"},"message":"Added 'inline' attribute to basic_string's destructor\n\nAuthor: laxmansole\n\nReviewers: howard.hinnant\n           mclow.lists\nSubscribers: EricWF, flyingforyou, evandro\n\nDifferential Revision: https://reviews.llvm.org/D25624\n\nReapplying the patch as the bug https://llvm.org/bugs/show_bug.cgi?id=30341 is fixed.\n\nCurrently basic_string's destructor is not getting inlined. So adding 'inline' attribute to ~basic_string().\nWorked in collaboration with Aditya Kumar.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285456 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2017e23c4a23c130a9235fc5a4688c5912cfd06d","date":"2016-10-28T22:37:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert addition of __libcpp_library_version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285466 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8ea5d875003827d09ef4e4c2adde69b1c0513b16","date":"2016-10-28T22:54:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove files missed in r285466\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff8cce45f416204451eb88136eba383dd48753b9","date":"2016-10-29T00:50:02.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Revert \"Added 'inline' attribute to basic_string's destructor\"\n\nThis reverts commit r285456, which broke LTO bootstrap on Darwin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285485 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d2f0c0af37aaebeece1cdd37160f07d573ac6b8","date":"2016-10-30T22:53:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add start of filesystem benchmarks\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285524 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"271a19ec191bf81d428c011909f37143da9cca36","date":"2016-10-30T23:30:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rewrite std::filesystem::path iterators and parser\n\nThis patch entirely rewrites the parsing logic for paths. Unlike the previous\nimplementation this one stores information about the current state; For example\nif we are in a trailing separator or a root separator. This avoids the need for\nextra lookahead (and extra work) when incrementing or decrementing an iterator.\nRoughly this gives us a 15% speedup over the previous implementation.\n\nUnfortunately this implementation is still a lot slower than libstdc++'s.\nBecause libstdc++ pre-parses and splits the path upon construction their\niterators are trivial to increment/decrement. This makes libc++ lazy parsing\n100x slower than libstdc++. However the pre-parsing libstdc++ causes a ton\nof extra and unneeded allocations when constructing the string. For example\n`path(\"/foo/bar/\")` would require at least 5 allocations with libstdc++\nwhereas libc++ uses only one. The non-allocating behavior is much preferable\nwhen you consider filesystem usages like 'exists(\"/foo/bar/\")'.\n\nEven then libc++'s path seems to be twice as slow to simply construct compared\nto libstdc++. More investigation is needed about this.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285526 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad1a12c31216780fac34e5b267fa9b885d77d9f1","date":"2016-10-30T23:53:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve performance of constructing filesystem::path from strings.\n\nThis patch fixes a performance bug when constructing or appending to a path\nfrom a string or c-string. Previously we called 'push_back' to append every\nsingle character. This caused multiple re-allocation and copies when at most\none reallocation is necessary. The new behavior is to simply call\n`string::append` so it can correctly handle reallocation.\n\nFor large strings this change is a ~4x improvement. This also makes our path\nfaster to construct than libstdc++'s.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285530 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb6b13f5782f986b56da17156f0e9de66e78f2c2","date":"2016-10-31T02:07:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix _LIBCPP_EXTERN_TEMPLATE_INLINE_VISIBILITY to always have default visibility.\n\nThis prevent the symbols from being both externally available and hidden, which\ncauses them to be linked incorrectly. This is only a problem when the address\nof the function is explicitly taken since it will always be inlined otherwise.\n\nThis patch fixes the issues that caused r285456 to be reverted, and can\nnow be reapplied.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285531 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"026d38e8fb58c114b7cabcdb5e00650368dfb681","date":"2016-10-31T02:46:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Optimize filesystem::path by providing weaker exception guarantees.\n\npath uses string::append to construct, append, and concatenate paths. Unfortunatly\nstring::append has a strong exception safety guaranteed and if it can't prove\nthat the iterator operations don't throw then it will allocate a temporary\nstring copy to append to. However this extra allocation and copy is very\nundesirable for path which doesn't have the same exception guarantees.\n\nTo work around this this patch adds string::__append_forward_unsafe which exposes\nthe std::string::append interface for forward iterators without enforcing\nthat the iterator is noexcept.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285532 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5b0db52491b993de57c027c7eba3b53e6e04d36","date":"2016-10-31T03:40:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove additional function template definitions from the dylib\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285537 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51eb1d577a6cdb5fb366cd4e4bfcd59a8121450b","date":"2016-10-31T03:42:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add 'inline' but not 'always_inline' to std::strings destructor.\n\nAdding both 'inline' and 'always_inline' to the destructor has been contentious.\nHowever most of the performance benefits can be gained by only adding 'inline',\nand there is no reason to hold up that change while discussing the other.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efc9f170c9fa0b988fac6d7df8b6e177252e1a1b","date":"2016-10-31T08:47:53.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Change from \"XFAIL: libcpp-no-exceptions\" to \"UNSUPPORTED: libcpp-no-exceptions\" tests that only check exceptions and nothing else\n\nThis is a follow up of D24562.\n\nThese tests do not check anything but exceptions, so it makes sense to mark\nthem as UNSUPPORTED under a library built without exceptions.\n\nDifferential Revision: https://reviews.llvm.org/D26075\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285550 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1c0757acd13533851ae794f2c24d12a7f01d06ba","date":"2016-10-31T14:14:13.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Fix archetypes.hpp under libcpp-no-extensions and std level < 14\n\nUnder -fno-exceptions TEST_THROW becomes abort / __builtin_abort which returns\nvoid. This causes a type mismatch in the conditional operator when testing the\nlibrary in C++98,03,11 modes.\n\nUse a comma operator to workaround this problem.\n\nDifferential Revision: https://reviews.llvm.org/D26147\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285572 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3b2cf9659df072841bc775efc61ec5819d9e5aae","date":"2016-10-31T15:09:10.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Add configuration define for off_t functions\n\nCreate this define in __config and use it elsewhere, instead of checking\nthe operating system/library defines in other files. The aim is to\nreduce the usage of _WIN32 outside __config. No functional change.\n\nDifferential Revision: https://reviews.llvm.org/D25741\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285582 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6168a5e55f5dc455af98cdc24e1adce02b4cc975","date":"2016-11-01T08:11:12.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect tests that expect an exception for an unknown std::random_device\n\nSkip these tests under libcpp-no-exceptions.\n\nDifferential Revision: https://reviews.llvm.org/D26141\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285677 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"88837404569b90c0e871550086169612545f253a","date":"2016-11-01T15:00:16.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect lock tests under libcpp-no-exceptions\n\nSkip tests that expect an exception to be thrown.\n\nDifferential Revision: https://reviews.llvm.org/D26184\n\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285695 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c09116009cebdebbe60b713a918069fcda4d9886","date":"2016-11-01T15:46:16.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect exceptional paths under libcpp-no-exceptions\n\nThese tests are of the form\n\ntry {\n   action-that-may-throw\n   assert(!exceptional-condition)\n   assert(some-other-facts)\n } catch (relevant-exception) {\n   assert(exceptional-condition)\n }\n\nUnder libcpp-no-exceptions there is still value in verifying\nsome-other-facts while avoiding the exceptional case. So for these tests\njust conditionally check some-other-facts if exceptional-condition is\nfalse. When exception are supported make sure that a true\nexceptional-condition throws an exception\n\nDifferential Revision: https://reviews.llvm.org/D26136\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285697 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c6c2b944e85178a3dcc8012dc43496f317c5fa0","date":"2016-11-02T03:57:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix __libcpp_is_constructible for source types with explicit conversion operators.\n\nPreviously __libcpp_is_constructible checked the validity of reference\nconstruction using 'eat<To>(declval<From>())' but this doesn't consider\nFrom's explicit conversion operators. This patch teaches __libcpp_is_constructible\nhow to handle these cases. To do this we need to check the validity\nusing 'static_cast<To>(declval<From>())'. Unfortunately static_cast allows\nadditional base-to-derived and lvalue-to-rvalue conversions, which have to be\nchecked for and manually rejected.\n\nWhile implementing these changes I discovered that Clang incorrectly\nrejects `static_cast<int&&>(declval<float&>())` even though\n`int &&X(declval<float&>())` is well formed. In order to tolerate this bug\nthe `__eat<T>(...)` needs to be left in-place. Otherwise it could be replaced\nentirely with the new static_cast implementation.\n\nThanks to Walter Brown for providing the test cases.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285786 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"863388e8d854dfe1abc8ff9dde0dbf7e0c306900","date":"2016-11-02T05:08:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix GCC test failure caused by manually defining _LIBCPP_HAS_NO_VARIADICS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a405f45fcd6891a45203a95d0699214d7670d3a0","date":"2016-11-02T08:14:57.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect tests for new/delete under libcpp-no-exceptions\n\nSkip the tests that expect an exception be thrown and protect unreachable catch blocks.\n\nDifferential Revision: https://reviews.llvm.org/D26197\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285791 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa138aa2a403e7a84880099a9042433ac1076500","date":"2016-11-02T08:36:43.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Remove spurious token from #endif\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285792 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f333beee2ce44299b1ce219371bdef60290ac175","date":"2016-11-02T15:30:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement another part of P0031; adding constexpr to move_iterator\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@285818 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e619862dbf0c4a46db6e3d816bcafcfef6e85977","date":"2016-11-04T20:26:59.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Replace _LIBCPP_STD_VER with TEST_STD_VER.\n\nThis replaces every occurrence of _LIBCPP_STD_VER in the tests with\nTEST_STD_VER. Additionally, for every affected\nfile, #include \"test_macros.h\" is being added explicitly if it wasn't\nalready there.\n\nhttps://reviews.llvm.org/D26294\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286007 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d87eb99b8071fbd5af4d6d04ac864ada752e24bc","date":"2016-11-05T00:30:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Upgrade in-tree google benchmark to v1.1\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"240b8c875bd83f58e9dd06508c35521dfe16f6ee","date":"2016-11-07T08:23:59.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::experimental::optional tests under libcpp-no-exceptions\n\nIn these tests there are some paths that explicitly throw, so use\nthe TEST_THROW macro that was proposed for this and then skip the tests\nthat may enter the throwing path.\n\nDifferential Revision: https://reviews.llvm.org/D26142\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286099 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a43c2e769aef5878bd844074896c4340523f10b0","date":"2016-11-08T03:31:42.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Remove unnecessary MSVCRT exclusions\n\nVisual Studio 2013 and up have these functions, and we don't need to\nsupport older versions.\n\nThere are some remaining _LIBCPP_MSVCRT exclusions which are present on\nVisual Studio 2015 but not 2013. Those will be addressed in a follow-up.\n\nDifferential Revision: https://reviews.llvm.org/D26377\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286202 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d842fed6f8bb52516e24b751cfc5c5f8ca1049c3","date":"2016-11-09T03:22:28.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake] Check runtimes subdir when looking for libcxxabi\n\nThe runtimes subdir is the new location for runtimes, we should\ninclude it when looking for libcxxabi headers.\n\nDifferential Revision: https://reviews.llvm.org/D26363\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66350f0fb1c1b2a08e2b62afc11fe8ba8183ad7b","date":"2016-11-10T16:54:55.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect bitset tests under libcpp-no-exceptions\n\nBitset tests feature a sequence of tests of increasing bitset sizes,\nbut these tests rely on exceptions when the bitset size is less than\n50 elements.\n\nThis change adds a flag to tell whether a test should throw. If it must\nthrow it will be skipped under no-exceptions.\n\nDifferential Revision: https://reviews.llvm.org/D26140\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286474 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc044a1ff206586b4328d86d46118461e078d81f","date":"2016-11-13T19:54:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR30979 - tuple<move_only> is constructible from move_only const&\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286774 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9a20c2c382ce58c2330fb799203bfc044569d4b","date":"2016-11-13T20:43:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2770 - Make tuple_size<T> defined for all T\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286779 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6e467a8987eefd198bb844f6e753859d3a69081b","date":"2016-11-13T22:27:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix GCC libc++abi build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286783 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"763984ea8d4edc30d7a716256e2aeb2e680e396a","date":"2016-11-13T23:00:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add docs for use-configurable libc++ features\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286784 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e000c6a82ce53740b3845fbacf107f9b4af1f39","date":"2016-11-14T02:43:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add check-cxx-abilist target when supported.\n\nThis patch adds a `check-cxx-abilist` target which verifies the libc++.so ABI\nwhen the current build configuration matches the configuration used to generate\nthe ABI lists.\n\nIn order to make this change `HandleOutOfTreeLLVM.cmake` needed to be modified\nto include `LLVMConfig.cmake` so that `TARGET_TRIPLE` is defined. Hopefully\nthe changes needed to accommodate this won't break existing build\nconfigurations.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286789 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"049a1ed8d8d72d5a8fafbfb0bdbfbaa8112fd3d5","date":"2016-11-14T02:51:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix CMake set syntax\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286791 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e96aa8cd56cf1349476d8105b1b306897ca3ddc8","date":"2016-11-14T03:03:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix ABI configuration detection on OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286792 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d56adc690bdbf6d7d74eb68d0764c46a29841e08","date":"2016-11-14T10:27:56.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect smart-pointer tests under no exceptions\n\nSkip tests that expect an exception be thrown under no-exceptions.\n\nDifferential Revision: https://reviews.llvm.org/D26457\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286809 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc464e50e9cc2a48010e83973de3c1e53eeb0d38","date":"2016-11-14T10:44:26.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Update tests for strings conversions under libcpp-no-exceptions\n\nDifferential Revision: https://reviews.llvm.org/D26139\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286812 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70e4c503de79387899f5699106e333a61f8fe566","date":"2016-11-14T11:00:28.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect nested-exceptions tests under no-exceptions\n\nDifferential Revision: https://reviews.llvm.org/D26458\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286813 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"897956ebcdcffffb19e21fabc0bca29ae1f8096c","date":"2016-11-14T13:44:50.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::ios tests under libcpp-no-exceptions\n\nSkip tests that expect an exception be thrown. Also add\nsome missing asserts in the original test.\n\nDifferential Revision: https://reviews.llvm.org/D26512\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286823 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d521adc297443afb3987d30c5d4db57cf38b2903","date":"2016-11-14T14:41:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++1z status with C++17 issues from Issaquah. Still to come: LFTS issues and papers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286828 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"496fc7ff0cc13036c5e613c5e7f28933177e3082","date":"2016-11-14T14:53:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++1z status with LFTS issues from Issaquah.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286834 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59368dd5fe7d42f89e3dd1ef787073d9e1cbbb1b","date":"2016-11-14T15:09:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update C++1z status with LWG papers from Issaquah.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286835 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45e692539ccc8e3a034bc861e659c72223221620","date":"2016-11-14T17:35:14.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26314: Fix MSVC warning C4189 \"local variable is initialized but not referenced\".\n\ntest/std/depr/depr.c.headers/inttypes_h.pass.cpp\ntest/std/input.output/file.streams/c.files/cinttypes.pass.cpp\ntest/std/input.output/iostream.forward/iosfwd.pass.cpp\nAdd test() to avoid a bunch of void-casts, although we still need a few.\n\ntest/std/input.output/iostream.format/quoted.manip/quoted.pass.cpp\nskippingws was unused (it's unclear to me whether this was mistakenly copy-pasted from round_trip() below).\n\ntest/std/localization/locale.categories/category.collate/locale.collate/types.pass.cpp\ntest/std/localization/locale.categories/category.ctype/facet.ctype.special/types.pass.cpp\ntest/std/localization/locale.categories/category.ctype/locale.codecvt/types_char.pass.cpp\ntest/std/localization/locale.categories/category.ctype/locale.codecvt/types_wchar_t.pass.cpp\ntest/std/localization/locale.categories/category.ctype/locale.ctype/types.pass.cpp\ntest/std/localization/locale.categories/facet.numpunct/locale.numpunct/types.pass.cpp\ntest/std/localization/locales/locale.global.templates/use_facet.pass.cpp\nWhen retrieving facets, the references are unused.\n\ntest/std/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_long.pass.cpp\ntest/std/localization/locale.categories/category.numeric/locale.nm.put/facet.num.put.members/put_unsigned_long.pass.cpp\n\"std::ios_base::iostate err = ios.goodbit;\" was completely unused here.\n\ntest/std/localization/locale.categories/category.time/locale.time.get/time_base.pass.cpp\ntest/std/numerics/c.math/ctgmath.pass.cpp\ntest/std/numerics/rand/rand.device/entropy.pass.cpp\ntest/std/numerics/rand/rand.device/eval.pass.cpp\ntest/std/strings/basic.string/string.modifiers/string_copy/copy.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char16_t/eof.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char32_t/eof.pass.cpp\ntest/std/thread/futures/futures.promise/dtor.pass.cpp\ntest/std/thread/futures/futures.task/futures.task.members/dtor.pass.cpp\ntest/std/thread/thread.condition/thread.condition.condvar/wait_for_pred.pass.cpp\nThese variables are verifying types but are otherwise unused.\n\ntest/std/strings/basic.string/string.capacity/reserve.pass.cpp\nold_cap was unused (it's unclear to me whether it was intended to be used).\n\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char/eq.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char16_t/eq.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char16_t/lt.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char32_t/eq.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.char32_t/lt.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.wchar.t/eq.pass.cpp\ntest/std/strings/char.traits/char.traits.specializations/char.traits.specializations.wchar.t/lt.pass.cpp\nThese tests contained unused characters.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286847 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db7fa111abe868b217443bcaafc47de53bdb0e48","date":"2016-11-14T18:22:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixes for LWG 2598, 2686, 2739, 2742, 2747, and 2759, which were adopted last week in Issaquah\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286858 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ec20dfb4819be56df5402618db8a93961de4f81","date":"2016-11-14T18:56:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0510 'Make future_error Constructible' adopted in Issaquah\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7817e1435ef3f7d850804e9b6293b10bf28b7c67","date":"2016-11-14T19:35:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make one of the new tests fail correctly on pre-C++17 systems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286872 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d7c49b7b0ea713531cedebd3f147e0f50ba2313","date":"2016-11-14T19:58:05.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0516: 'Clarify That shared_future’s Copy Operations have Wide Contracts' which was adopted last week in Issaquah\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286877 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4163bce6a445c9d71d1d02393890e86a57957dd","date":"2016-11-14T20:38:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed a test with exceptions disabled earlier. Oops.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286883 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"506f7fcee59ff2c9ec98251b090149f762bb0992","date":"2016-11-14T20:41:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"P0503R0, adopted in Issaquah, rewords some requirements on nullptr_t and istream_iterator. No code changes were needed, but I updated a few tests.  Also resolved P0509 and P0521, which required no changes to the library or tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286884 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"49721a90e57dfad9c6daab6be36be705360d1d27","date":"2016-11-15T05:03:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Missed one of the try blocks the first time :-(. Thanks to Renato for the heads up.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286932 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b2e1c23fbafa17927e2ca48ef4a9d8c2144ed2b","date":"2016-11-15T17:00:24.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26624: Fix bucket_count() assumptions.\n\nWith a max_load_factor of 1.0, the only guarantee is that\nbucket_count() >= size(). (Note: setting max_load_factor without\nrehashing isn't supposed to affect this, because setting\nmax_load_factor is currently specified to be constant time.)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286982 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd3313c9176a0534ae134bd778a9758da9b3831d","date":"2016-11-15T17:00:32.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26625: future_error::what() is implementation-defined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286983 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd8b03ec4c1ff84f8d4a5dab38e629bb9749f639","date":"2016-11-15T17:00:38.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26627: Fix ordering assumptions in unordered container tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@286984 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3cb22259740a4dabd213a4546d05f7ce944dd35","date":"2016-11-15T18:48:36.000Z","author":{"name":"Vedant Kumar","email":"vsk@apple.com"},"message":"Revert \"P0503R0, adopted in Issaquah, rewords some requirements on nullptr_t and istream_iterator. No code changes were needed, but I updated a few tests.  Also resolved P0509 and P0521, which required no changes to the library or tests.\"\n\nThis reverts commit r286884, because it breaks the Xcode 7 builders:\n\n  http://lab.llvm.org:8080/green/job/clang-stage1-cmake-RA-expensive/1583\n\nHere is a PR that tracks the issue:\nhttps://llvm.org/bugs/show_bug.cgi?id=31016\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287004 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bb835ac64d80b19e086dadcbac52654723a6b938","date":"2016-11-15T19:15:57.000Z","author":{"name":"Justin Lebar","email":"jlebar@google.com"},"message":"[CUDA] Mark __libcpp_{isnan,isinf,isfinite} as constexpr.\n\nSummary:\nThis makes these functions available on host and device, which is\nnecessary to compile <complex> for the device.\n\nReviewers: hfinkel, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25403\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"746d008aeb42f9232c69b5fb0e6e3c7b53e80ee2","date":"2016-11-15T20:21:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add .clang-format to libc++\n\nAdding a Clang Format file to libc++ and which style it should use has been\ndiscussed a couple of times. This patch finally adds a .clang-format file\nwhich specifies LLVM styles.\n\nPersonally I dislike how the LLVM style handles much of the meta-programming\nin libc++. However the general consensus was that libc++ should prefer the\nLLVM style and make adjustments where needed.\n\nNote that using clang-format on changes is not required, especially for\nchanges within the headers. However formatting tests should be encouraged.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287020 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efd039a62e635b3fc5dc68a773fbf22705c5c0e8","date":"2016-11-15T22:03:29.000Z","author":{"name":"Justin Lebar","email":"jlebar@google.com"},"message":"[libcxx] Mark xonstexpr-fns.pass.cpp as XFAIL: gcc.\n\nThis fails with gcc because __builtin_isnan and friends, which\nlibcpp_isnan and friends call, are not themselves constexpr-evaluatable.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287041 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"18e2c824b4e822fe3325b05b5cb990e96baf39de","date":"2016-11-16T04:45:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix non-reserved name usage\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287080 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3dd27eb62c61ea74b5012f56db50ea8cab6abba9","date":"2016-11-16T14:48:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix -verify tests for older ccache versions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287109 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e6479bc7835b5e91014ce11734c4b8952adf8786","date":"2016-11-16T22:18:10.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Introduce `_LIBCPP_OVERRIDABLE_FUNC_VIS`\n\nThis is a generalization of `_LIBCPP_NEW_DELETE_VIS`; the new macro name\ncaptures the semantics better, and also allows us to get rid of the\n`_WIN32` check in `include/new`. No functional change.\n\nDifferential Revision: https://reviews.llvm.org/D26702\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287164 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"77dabb302b25ded2397cb98724bae66853e21c56","date":"2016-11-17T19:23:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test changes for P0504R0 \"Revisiting in-place tag types for any/optional/variant\". Patch from Casey Carter\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287249 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d33526db21faae800518c03cb93b8c7b4d2bbfd","date":"2016-11-17T19:24:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0504R0: Revisiting in-place tag types for any/optional/variant\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287250 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0ccadbd90117d43d10c61f86c90d1e00e59b9e0","date":"2016-11-17T19:24:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove files missed in r287250\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287251 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a93ebeca94f812e18b4f465d98aad94f92220354","date":"2016-11-17T20:08:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround compilers w/o C++1z inline variables\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287255 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d6941834cb62a02deed43af20d24cc2a10e8acb","date":"2016-11-18T01:40:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change sym_check to filter non-stdlib symbols.\n\nCurrently sym_check almost all names found in the binary, including those\nwhich are defined in other libraries. This makes our ABI lists harder to maintain.\n\nThis patch adds a --only-stdlib-symbols option to sym_check which removes\nall symbols which aren't possibly provided by libc++. It also re-generates\nthe linux ABI list after making this change.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287294 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91673636fb6877b028821c1bfcd760589ff85ba4","date":"2016-11-18T02:36:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"update Apples ABI list to ignore non-std symbols\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287301 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f66194bce3948e25364f5b2c7363f16b16cc3c5e","date":"2016-11-18T04:31:09.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Fix preprocessor guard for overload declaration\n\nFix a typo in the conditional.  Caught by going through list of removed\nsymbols when building with hidden visibility.\n\nDifferential Revision: https://reviews.llvm.org/D26825\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c57032b5226baa44165e18b17a02c2c6ed3dcbb","date":"2016-11-18T06:42:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove _LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS\n\nlibc++ no longer supports C++11 compilers that don't implement `= default`.\nThis patch removes all instances of the feature test macro\n_LIBCPP_HAS_NO_DEFAULTED_FUNCTIONS as well as the potentially dead code it hides.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287321 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa054d2ad0a0514c4d46e5c37591935b5704c9b8","date":"2016-11-18T11:26:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add merge_archives.py utility\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287336 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3b197fcb52b5e525fe589d8067753353dd3f438","date":"2016-11-18T11:29:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make merge_archives.py executable\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"60479ea31b2b4cabc35c38bf1e8e32289121e6b0","date":"2016-11-18T19:53:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make LIBCXX_ENABLE_STATIC_ABI_LIBRARY merge libc++.a and libc++abi.a\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287373 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb9d881ca0fef6bb1bdda01601c30e2c4e80cf37","date":"2016-11-18T21:54:31.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26813: allocator<const T> is non-Standard.\n\nN4582 17.6.3.5 [allocator.requirements] says that allocators are given\ncv-unqualified object types, and N4582 20.9.9 [default.allocator]\nimplies that allocator<const T> is ill-formed (due to colliding\naddress() overloads). Therefore, tests for allocator<const T>\nshould be marked as libcxx-specific (if not removed outright).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3ee8025384675278464d543e2b66aecf0940ad61","date":"2016-11-18T21:54:38.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26815: Fix an assumption about the state of moved-from std::functions.\n\nThe Standard doesn't provide any guarantees beyond \"valid but unspecified\" for\nmoved-from std::functions. libcxx moves from small targets and leaves them\nthere, while MSVC's STL empties out the source. Mark these assertions as\nlibcxx-specific.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0252201f9ed1f479fd17afcaf25e65f582abca41","date":"2016-11-18T21:54:43.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26816: Fix non-Standard assumptions when testing sample().\n\nsample() isn't specified with a reproducible algorithm, so expecting\nexact output is non-Standard. Mark those tests with LIBCPP_ASSERT.\n\nIn test_small_population(), we're guaranteed to get all of the elements,\nbut not necessarily in their original order. When PopulationCategory is\nforward, we're guaranteed stability (and can therefore test equal()).\nOtherwise, we can only test is_permutation(). (As it happens, both libcxx\nand MSVC's STL provide stability in this scenario for input-only iterators.)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c044b03d26d6f2bb4745e645d44619d99b57b11d","date":"2016-11-18T22:25:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow using libsupc++ with LIBCXX_ENABLE_STATIC_ABI_LIBRARY. Patch from Michael Daniels.\n\nThe code cannot currently link when using libsupc++ with the\nLIBCXX_ENABLE_STATIC_ABI_LIBRARY option.\n\nThis change ifdef's out the the destructor and 'what' function for\nbad_array_length and bad_array_new_length when GLIBCXX is defined.\nThe constructors that are left in are the only functions not being provided by\nlibsupc++ itself, and follows the same pattern that was used to ifdef bad_alloc.\n\nTesting was done on a Linux x86_64 host using GCC 5.4 and libc++ from ToT.\nI see no change to the test results when using libsup++ or libstdc++ without\nLIBCXX_ENABLE_STATIC_ABI_LIBRARY. When using libsupc++ with\nLIBCXX_ENABLE_STATIC_ABI_LIBRARY it will now build and test results are the\nsame as those without the option specified.\n\nReviewed as https://reviews.llvm.org/D26186\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287388 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2917004aedb591cb697af2de6482e4544bee1e4b","date":"2016-11-18T22:45:32.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D26812: In random tests, use real static_asserts and silence a warning.\n\nIn C++11 mode and newer, use real static_asserts.\nIn C++03 mode, min() and max() aren't constexpr, so use plain asserts.\n\nOne test triggers MSVC's warning C4310 \"cast truncates constant value\".\nThe code is valid, and yet the warning is valid, so I'm silencing it\nthrough push-disable-pop.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"850745db9ee821e89080299669a10a7dceeee36f","date":"2016-11-19T01:14:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Implement locale.h to fix modules build\n\nSummary:\nBecause `locale.h` isn't part of the libc++ modules the class definitions it provides are exported as part of `__locale` (since it happens to be build first). This breaks `<clocale>` which exports `std::lconv` without including `<__locale>`.\n\nThis patch implements `locale.h` to fix this issue, it also adds support for testing libc++ with modules.\n\n\n\n\nReviewers: mclow.lists, rsmith, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D26826\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"887c80ec10c0f64df9769ac09201889125cde18d","date":"2016-11-19T01:38:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark test as unsupported in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f7f0b85300a16614c7899d7877ba86a6460996a","date":"2016-11-19T03:29:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix stdint/cstdint modules\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287435 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"388ffe1db1f4dd7faea0ced02a84c498664c99c8","date":"2016-11-21T00:41:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adjust uses_alloc_types helpers for later changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287512 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"487bc7e0c8ec63474cc7a4eb27ce5372160efaee","date":"2016-11-21T01:10:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark variadic lock guard tests as XFAIL with modules, since they have to define macros to expose the new ABI\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287513 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b4cb5ba9851acf20d1bb412f11399a1a554c8df","date":"2016-11-21T11:26:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r287435 because of OS X test failures\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287531 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faa8312d51b2766cf6119ca4d6529316a9276de3","date":"2016-11-22T20:00:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup module.modulemap\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287687 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6010dc84c66ee4b30b4ffea34b0d1c616d04239b","date":"2016-11-22T20:05:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to fix stdint/cstdint modules try 2\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287690 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fb6164cdad6525d39b8c8c14dc64bd2dc3f5ab92","date":"2016-11-22T20:15:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow libc++ to use modules in C++03.\n\nLibc++ internal uses <atomic> in C++03 code but the module map forbids its use.\nThis causes the libc++ 'std' module to fail to build in C++03.\n\nThis patch removes the requirement to fix this issue.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287693 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0373708cdc6b84bcfac38f4cf8539c6dd794d360","date":"2016-11-23T01:02:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add <variant> tests but disable them for libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef3060ef96f9a8450fc5635d542b5dc207c55717","date":"2016-11-23T01:18:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix max_size() across all containers\n\nSummary: The `max_size()` method of containers should respect both the allocator's reported `max_size` and the range of the `difference_type`. This patch makes all containers choose the smallest of those two values.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D26885\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"80888fa0fe0e51f97c1c59c532df4b17f0814358","date":"2016-11-23T01:44:53.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"Don't \"LIBCPP_ONLY(stuff;)\" at namespace scope.\n\nDifferential review: https://reviews.llvm.org/D27029\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e04194100705b33e50125fe4cba076e88bb43907","date":"2016-11-23T09:16:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix __hash_table::max_size() on 32 bit systems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"634ff013be4a17a799c11bfd11faa78d1a75ade9","date":"2016-11-23T16:11:15.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Remove unneeded visibility pragmas\n\nThe function definitions being guarded by the pragma were all static, so\nthey wouldn't be exported anyway. In any case, we should prefer the\nvisibility macros. No functional change.\n\nDifferential Revision: https://reviews.llvm.org/D26940\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287768 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9bcd3dae859f02ab496d175d50840f43a2d4ed2","date":"2016-11-23T22:01:19.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27013: Fix MSVC warning C4018 \"signed/unsigned mismatch\", part 1/12.\n\nChange loop indices from int to std::size_t.\n\nAlso, include <cstddef> when it wasn't already being included.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287820 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"388c2a8e68c75d05607434b22fab4d53176a2142","date":"2016-11-23T22:01:58.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27014: Fix MSVC warning C4018 \"signed/unsigned mismatch\", part 2/12.\n\nAdd static_cast<std::size_t> when comparing int to std::size_t.\n\nAlso, include <cstddef> when it wasn't already being included.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287822 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a65a478719790bfe30198e9d1013c7c07286f60","date":"2016-11-23T22:02:16.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27015: Fix MSVC warning C4018 \"signed/unsigned mismatch\", part 3/12.\n\nChange unsigned to int in parameters.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287823 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed55db243e1f6b1aebf3543b3548075bdfeb101c","date":"2016-11-23T22:02:27.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27016: Fix MSVC warning C4018 \"signed/unsigned mismatch\", part 4/12.\n\nChange \"int j;\" indices to \"std::size_t j;\".\n\nAlso, include <cstddef> when it wasn't already being included.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bdf8bae8bbd293eb2bc696c827b32c7e6dc0fd01","date":"2016-11-23T22:02:35.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27018: Fix MSVC warning C4018 \"signed/unsigned mismatch\", part 5/12.\n\nVarious changes:\n\ntest/std/algorithms/alg.sorting/alg.binary.search/binary.search/binary_search.pass.cpp\nChange M from unsigned to int. It's compared against \"int x\",\nand we binary_search() for it within a vector<int>.\n\ntest/std/numerics/rand/rand.dis/rand.dist.norm/rand.dist.norm.f/eval.pass.cpp\ntest/std/numerics/rand/rand.dis/rand.dist.norm/rand.dist.norm.f/eval_param.pass.cpp\nAdd static_cast<unsigned> when comparing int to unsigned.\n\ntest/std/strings/basic.string/string.cons/size_char_alloc.pass.cpp\nChange unsigned indices to int when we're being given int as a bound.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287825 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12f7f5d2475908f3553b2039b418f71036721878","date":"2016-11-23T22:02:44.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27019: Fix MSVC warning C4245 \"conversion from 'X' to 'Y', signed/unsigned mismatch\", part 6/12.\n\nAdd static_cast when initializing unsigned integers with negative numbers (in order to obtain big values).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287826 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50fe47bc8b8970c75dff2c84381e026acb7910a7","date":"2016-11-23T22:02:53.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27020: Fix MSVC warning C4245 \"conversion from 'X' to 'Y', signed/unsigned mismatch\", part 7/12.\n\nWhen initializing unsigned integers to their maximum values, change \"const T M(~0);\" to \"const T M(static_cast<T>(-1));\".\n\n~0 and -1 are equivalent, but I consider the -1 form to be significantly clearer (and more consistent with other tests).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287827 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"39245fe35183c7b873981ba66ca2e08c6258737a","date":"2016-11-23T22:02:59.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27026: Fix copy-paste silliness; ULL can't ever be 32-bit.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287828 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e33c0b01f892f8919f66a066a9c4064010104e49","date":"2016-11-23T22:03:28.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27027: Strip trailing whitespace.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287829 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37a0d7cb33ab5919ec10d6c31336687afd60c112","date":"2016-11-24T11:15:09.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::string tests under libcpp-no-exceptions\n\nSkip tests that expect an exception be thrown and/or disable\nunreachable catch handlers.\n\nDifferential Revision: https://reviews.llvm.org/D26608\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287865 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01b9f8a6989cdedb352d7d1c8cd92bcdb9785712","date":"2016-11-24T11:17:09.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect tests for std::uninitialized_{copy,fill} under libcpp-no-exceptions\n\nSkip tests that expect an exception be thrown.\n\nDifferential Revision: https://reviews.llvm.org/D26606\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287866 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3584d51a217251551330e7bdcc25a4be657c36f","date":"2016-11-24T11:28:02.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Reverting wrong diff\n\nI managed to confuse me with two reviews of the same thing and ended commiting the wrong one.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287868 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"70e6a8d552faafaa8b711bd75e88ea2c46aa13ce","date":"2016-11-26T15:49:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the 'detection idiom' from LFTS v2\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287981 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"afa9b590b2bed07e26e79dc4dd22b9942c8ec85c","date":"2016-11-26T18:45:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement conjuntion/disjuntion/negation for LFTS v2. Same code and tests for the ones in std::\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@287988 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"429979581613ed54dc1b602e2a50c89a749b1e9b","date":"2016-11-29T14:43:42.000Z","author":{"name":"Aditya Kumar","email":"hiraditya@msn.com"},"message":"[libcxx] remove unused code\n\nThe macro _LIBCPP_UNROLL_LOOPS isn't used anywhere\nso the code was dead.\n\nDifferential Revision: https://reviews.llvm.org/D26991\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288143 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac5aff30fe0902d6efa9063545d5d05e7c0659ed","date":"2016-11-29T16:27:45.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect test for dynarray under libcpp-no-exceptions\n\nThis test expects an exception be thrown.\n\nDifferential Revision: https://reviews.llvm.org/D26611\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288155 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10ffcdf7d068bd78b3cf2f32699a2c461ca7302e","date":"2016-11-29T16:31:40.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect locale tests under noexceptions\n\nSkip tests that expect exceptions be thrown.\n\nDifferential Revision: https://reviews.llvm.org/D27096\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288156 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d6f05863c361fbfe93589355aff27573decd52c1","date":"2016-11-29T16:37:48.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::{,unordered_}map tests under noexceptions\n\nSkip tests that use exceptions\n\nDifferential Revision: https://reviews.llvm.org/D27093\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288157 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81086f8bfedb345855f53dc5914fac39344fa691","date":"2016-11-29T16:40:19.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::string tests under libcpp-no-exceptions\n\nSkip tests that expect an exception be thrown and/or disable\nunreachable catch handlers.\n\nDifferential Revision: https://reviews.llvm.org/D26612\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72ac68a9806fd986198364956110094c570d2e7b","date":"2016-11-29T17:10:29.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::array tests under noexceptions\n\nSkip tests that expect exceptions be thrown. Also add missing asserts.\n\nDifferential Revision: https://reviews.llvm.org/D27095\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7110e847a68d94b91c68661565be1ba208fd700f","date":"2016-12-01T17:31:38.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect std::ostream::sentry test under libcpp-no-exceptions\n\nSkip test that throws an exception.\n\nDifferential Revision: https://reviews.llvm.org/D27255\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288378 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"486d8a9adc9176fc50626f4f7417b6fcb88e57c6","date":"2016-12-01T17:33:36.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect optional test under libcpp-no-exceptions\n\nReplace throw with TEST_THROW and skip tests that throw exceptions\n\nDifferential Revision: https://reviews.llvm.org/D27254\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288379 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5813abeff213509519806b29c09a58886016345f","date":"2016-12-01T17:34:57.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect futures test under libcpp-no-exceptions\n\nSkip tests that expect an exception be thrown.\n\nDifferential Revision: https://reviews.llvm.org/D27253\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63f6af49d50207a69dc8f9e45729fdd3652acf24","date":"2016-12-01T17:36:41.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Protect sequences test under libcpp-no-exceptions\n\nReplace throw with TEST_THROW and protect tests that do throw. Also add missing assert(false).\n\nDifferential Revision: https://reviews.llvm.org/D27252\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08d07da127849a21a223b1400ed394b3a86ff620","date":"2016-12-02T21:17:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for libc++'s constexpr variant copy/move extension\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288536 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f2b2c8362ed29426207e41031af812a63dfba11","date":"2016-12-02T21:32:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix copy/paste errors in new variant tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288538 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4dfe243dac2af1b45d3cbd2a642662f44b163856","date":"2016-12-02T22:30:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around a bug in Clang's implementation of noexcept function types\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288544 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cab2af84188b519bf9ae8ac75641ee06ada49a4e","date":"2016-12-02T23:00:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement C++17 <variant>. Patch from Michael Park!\n\nThis patch was reviewed as https://reviews.llvm.org/D23263.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288547 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f722080ff3e4b1d5d91494f0fa66103faf77e60e","date":"2016-12-02T23:11:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update ABI lists for <variant>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288550 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7168e5e0b177d29e5265da02fabf025e91b16ac","date":"2016-12-02T23:14:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update darwin ABI list for <variant>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288551 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4975ccc637b9c2e4c47a3271650a30777685aebd","date":"2016-12-02T23:17:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix generated warnings in <variant>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288552 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"120401a4e033c11adf325dc786b7d5893a7c001d","date":"2016-12-02T23:38:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make variant's index part of the hash value\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288554 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2ff7987451950c70dea4786272802fbbd8a3751","date":"2016-12-02T23:41:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288555 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac5c826faf2fb996b6adcb6c829f404ca1188875","date":"2016-12-03T00:13:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around Clang 3.8 bugs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288556 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efc48515b4dd8abec9d7d3f1a406f05165959303","date":"2016-12-03T00:27:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable warnings by default for C++ >= 11 and fix -Wshadow occurances\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288557 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b0d421ae1ec562b19cc0dac3dfd9e970083ec252","date":"2016-12-03T00:33:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL variant tests for apple-clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288559 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90ade0a6619ebd99acc7a95d7e4d4f37016abfbb","date":"2016-12-03T01:21:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix -Wshadow warnings and enable warnings by default for C++ >= 11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288564 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8574af83cd602bb9728af1eac9ae9b3cd85db09","date":"2016-12-03T01:28:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert workaround for Clang bug. Thanks to Richard for the quick fix\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288566 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5b0fa443aaf52103cc730776cebf2af1a12b819b","date":"2016-12-03T01:58:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix <variant> w/o exception support\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288571 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29616b380699c1f48f67e67b24cbf1d115999e81","date":"2016-12-03T02:26:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around more -Wshadow warnings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd74cd25d582d729b93252b43f2a3852d606ecd8","date":"2016-12-03T02:47:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark various <variant> items as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288574 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81b7f63174b5a6516f965d449dcdddfe1948010f","date":"2016-12-03T03:22:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make make_exception_ptr abort with -fno-exceptions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4599da258730d660a360986a648d7cc259ff006","date":"2016-12-03T03:29:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Turn off testsuite warnings by default with GCC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288576 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c2ffb667051602d2f3162088d232e3d8dcec889","date":"2016-12-04T21:37:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Choose better hash values for std::monostate and valueless variants.\n\nPreviously these hashes were 0 and -1 respectively. These seem like common\nsentinel values and should be avoided to prevent needless collisions.\n\nThis patch changes those values to different arbitrary numbers, which should\nhopefully cause less collisions. Because I couldn't help myself I choose the\nfundamental constants for gravity and the speed of light.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b5c2c47fb6be2680ad6d237ccb86861eacc47a5e","date":"2016-12-04T22:14:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update status page for variant implementation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d59e3c7fed9486c11683fa1192fb004f0a88da42","date":"2016-12-05T11:05:09.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Handle tests for noexcept that expect a false value\n\nUnder libcpp-no-exceptions, noexcept is trivially true. Some tests expect in\nthe usual setting to return false, so adjust them to expect true under\nlibcpp-no-exceptions.\n\nDifferential Revision: https://reviews.llvm.org/D27310\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288660 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6d8e8a9cc5da3e006ad46e293797c5dcf847454","date":"2016-12-05T19:40:12.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Add _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\n\nIt's useful to be able to disable visibility annotations entirely; for\nexample, if we're building libc++ static to include in another library,\nand we don't want any libc++ functions getting exported out of that\nlibrary. This is a generalization of _LIBCPP_DISABLE_DLL_IMPORT_EXPORT.\n\nDifferential Revision: https://reviews.llvm.org/D26934\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288690 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bca6de0e4edf5de16fad3566645db68966fede58","date":"2016-12-05T23:16:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adjust libc++ test infastructure to fully support modules\n\nThis patch overhalls the libc++ test format/configuration in order to fully support modules. By \"fully support\" I mean get almost all of the tests passing. The main hurdle for doing this is handling tests that `#define _LIBCPP_FOO` macros to test a different configuration. This patch deals with these tests in the following ways:\n\n1. For tests that define single `_LIBCPP_ABI_FOO` macros have been annotated with `// MODULES_DEFINES: _LIBCPP_ABI_FOO`. This allows the test suite to define the macro on the command line so it uses a different set of modules.\n2. Tests for libc++'s debug mode (which define custom `_LIBCPP_ASSERT`) are automatically detected by the test suite and are compiled and run with modules disabled.\n\nThis patch also cleans up how the `CXXCompiler` helper class handles enabling/disabling language features.\n\nNOTE: This patch uses `LIT` features which were only committed to LLVM today. If this patch breaks running the libc++ tests you probably need to update LLVM.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"045b27e8487ddb8e13509dcb6d5227f2c38bc163","date":"2016-12-05T23:33:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add modules for any/optional/variant\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288730 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72a5c771b86c62bc27d92093a599cf72d80839f1","date":"2016-12-05T23:53:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add module definitions for string_view\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288733 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ba695e32c20a076f1385bc3d20ba28f716c8ee9","date":"2016-12-05T23:55:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add module definitions for <experimental/foo> headers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288735 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c7011af19bd8fdfdd6dd4252d1fe9cce3f7cd4f0","date":"2016-12-06T00:01:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow enabling/disabling testing with module using env LIBCXX_USE_MODULES=1\n\nThe Clang modules implementation breaks enough that libc++ needs an easy way\nto enable/disable using modules on the Zorg builders. Editing Zorg itself\nrequires a buildmaster restart which only happens weekly. This patch\nallows LIBCXX_USE_MODULES to be used to enable/disable the feature,\nallowing the buildslave to disable it as need be.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d95f62ecd263809cb4b594b7996c0e2aac80d593","date":"2016-12-06T01:02:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for writing -verify shell tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98605940df7a54649618c541b972a308cccaade9","date":"2016-12-06T01:12:34.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27021: Fix MSVC warning C4389 \"signed/unsigned mismatch\", part 8/12.\n\nAdd static_cast<std::size_t> when comparing distance() to size().\n\nThese replacements were performed programmatically with regex_replace():\n\nconst vector<pair<regex, string>> reg_fmt = {\n    { regex(R\"(assert\\((\\w+)\\.size\\(\\) == std::distance\\((\\w+, \\w+)\\)\\))\"),\n        \"assert($1.size() == static_cast<std::size_t>(std::distance($2)))\" },\n    { regex(R\"(assert\\(distance\\((\\w+\\.begin\\(\\), \\w+\\.end\\(\\))\\) == (\\w+)\\.size\\(\\)\\))\"),\n        \"assert(static_cast<std::size_t>(distance($1)) == $2.size())\" },\n    { regex(R\"(assert\\(std::distance\\((\\w+\\.\\w*begin\\(\\), \\w+\\.\\w*end\\(\\))\\) == (\\w+)\\.size\\(\\)\\))\"),\n        \"assert(static_cast<std::size_t>(std::distance($1)) == $2.size())\" },\n};\n\nAlso, include <cstddef> when it wasn't already being included.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288745 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21208822a84ac01e34df721b7b45e67561f75b98","date":"2016-12-06T01:13:14.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27022: Fix MSVC warning C4389 \"signed/unsigned mismatch\", part 9/12.\n\nAdd static_cast<std::size_t> to more comparisons. (Performed manually, unlike part 8/12.)\n\nAlso, include <cstddef> when it wasn't already being included.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3bea61851ac5d14b6b909f88bc5448dbac7284d4","date":"2016-12-06T01:13:29.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27023: Fix MSVC warning C4389 \"signed/unsigned mismatch\", part 10/12.\n\nAdd static_cast<int>. In these cases, the values are guaranteed to be small-ish,\nand they're being compared to int elements.\n\ntest/std/containers/sequences/deque/deque.capacity/access.pass.cpp\nUse int instead of unsigned to iterate from 0 to 10.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288747 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"caa97ca11f240cd48ca296112d1340f3957fa368","date":"2016-12-06T01:13:40.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27024: Fix MSVC warning C4389 \"signed/unsigned mismatch\", part 11/12.\n\nChange \"unsigned n = 0;\" to \"int n = 0;\". It's being compared to int elements and ptrdiff_t distances.\n\ntest/std/containers/sequences/forwardlist/forwardlist.cons/move.pass.cpp\nThis one's a little special, but not really. \"*i == n\" is comparing MoveOnly to n.\nMoveOnly is implicitly constructible from int, so int is the correct type to use here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288748 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43d9250a01c44bd2bb85f92024e89c27849d143a","date":"2016-12-06T01:13:51.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27025: Fix MSVC warning C4389 \"signed/unsigned mismatch\", part 12/12.\n\nVarious changes:\n\ntest/std/algorithms/alg.sorting/alg.merge/inplace_merge.pass.cpp\nThis is comparing value_type to unsigned. value_type is sometimes int and sometimes struct S (implicitly constructible from int).\nstatic_cast<value_type>(unsigned) silences the warning and doesn't do anything bad (as the values in question are small).\n\ntest/std/algorithms/alg.sorting/alg.nth.element/nth_element_comp.pass.cpp\nThis is comparing an int remote-element to size_t. The values in question are small and non-negative,\nso either type is fine. I think that converting int to size_t is marginally better here than the reverse.\n\ntest/std/containers/sequences/deque/deque.cons/size.pass.cpp\nDefaultOnly::count is int (and non-negative). When comparing to unsigned, use static_cast<unsigned>.\n\ntest/std/strings/basic.string/string.access/index.pass.cpp\nWe're comparing char to '0' through '9', but formed with the type size_t. Add static_cast<char>.\n\ntest/std/utilities/template.bitset/bitset.cons/ull_ctor.pass.cpp\nInclude <cstddef> for pedantic correctness (this test was already mentioning std::size_t).\n\n\"v[i] == (i & 1)\" was comparing bool to size_t. Saying \"v[i] == ((i & 1) != 0)\" smashes the RHS to bool.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2dbcaf969250926a15d527bfbee9d69233a9700","date":"2016-12-06T01:14:06.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27266: Remove spurious semicolons.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a477f58867d11c9a85a374c6f237577e43156c2","date":"2016-12-06T01:14:29.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27267: Fix MSVC x64 warning C4267 \"conversion from 'size_t' to 'int' [or 'unsigned int'], possible loss of data\", part 1/4.\n\nReplace \"int n = str_.size();\" with \"int n = static_cast<int>(str_.size());\".\n\nint is the correct type to use, because we're eventually calling\n\"base::pbump(n+1);\" where base is std::basic_streambuf.\nN4606 27.6.3.3.3 [streambuf.put.area]/4 declares: \"void pbump(int n);\"\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288751 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae5809a70ce6264ef5fc842d473b050e7ea70769","date":"2016-12-06T01:14:43.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27268: Fix MSVC x64 warning C4267 \"conversion from 'size_t' to 'int' [or 'unsigned int'], possible loss of data\", part 2/4.\n\nUse static_cast<int> when storing size_t in int (or passing size_t to int).\n\nAlso, remove a spurious semicolon in test/support/archetypes.hpp.\n\ntest/support/count_new.hpp\nAdditionally, change data members (and parameters) to size_t.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288752 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6504ee575527deff10dd1942accf424fbe66d327","date":"2016-12-06T01:14:51.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] D27269: Fix MSVC x64 warning C4267 \"conversion from 'size_t' to 'int' [or 'unsigned int'], possible loss of data\", part 3/4.\n\ntest/std/containers/sequences/vector.bool/copy.pass.cpp\ntest/std/containers/sequences/vector.bool/copy_alloc.pass.cpp\ntest/std/containers/sequences/vector/vector.cons/copy.pass.cpp\ntest/std/containers/sequences/vector/vector.cons/copy_alloc.pass.cpp\nChange \"unsigned s = x.size();\" to \"typename C::size_type s = x.size();\"\nbecause that's what it returns.\n\ntest/std/strings/basic.string/string.cons/pointer_alloc.pass.cpp\nInclude <cstddef>, then change \"unsigned n = T::length(s);\"\nto \"std::size_t n = T::length(s);\" because that's what char_traits returns.\n\ntest/std/strings/basic.string/string.cons/substr.pass.cpp\nChange unsigned to typename S::size_type because that's what str.size() returns.\n\ntest/std/utilities/template.bitset/bitset.cons/ull_ctor.pass.cpp\nThis was needlessly truncating std::size_t to unsigned.\nIt's being used to compare and initialize std::size_t.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288753 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74c9d6aa0df3bccd94c0da1d222db871a81badb7","date":"2016-12-06T01:34:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 modules build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288755 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"86e9c5f13d2dd07b8be5e69854e20ed218a3ee14","date":"2016-12-06T02:28:19.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"std::get<0>([std::variant constant expression]) *is* noexcept.\n\nDifferential review: http://reviews.llvm.org/D27436\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288760 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a6fabad1cae28a605b78a032e3e3540772873ae","date":"2016-12-06T07:40:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix stdio module build on OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d801988a7fe683828ec64578f1ee6700ef39661","date":"2016-12-06T09:41:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing stdbool.h module. The test suite now passes on OS X with modules\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288787 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a683dc04e12d708b2630a921c577fa4539a79da0","date":"2016-12-06T09:48:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r288787: Add missing stdbool.h module.\n\nReverting because I didn't properly test this patch. Although it's probably\ncorrect to add a stdbool_h module I thought the change fixed more than it did.\nI'll re-commit after more investigation.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@288789 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"183fafa5077fd1d30b0ecb72d1b3e92f6385e4f1","date":"2016-12-08T06:37:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix _LIBCPP_VERSION tests with modules on Darwin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289028 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"014f0b0d36d1c6572a25a275ca89fed6c210e1c7","date":"2016-12-08T07:30:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR30323: numeric_limits<T>::max_digits10 when using 16 bit ints.\n\nSummary: Also see https://llvm.org/bugs/show_bug.cgi?id=30323\n\nReviewers: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D27566\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"52b1b1733690da2a86aba52f7c76e9f0b89ea0ab","date":"2016-12-08T09:57:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid C++17 guaranteed copy elision when testing for non-copyability\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289033 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22e3b2af5014c449b5546aca8f95bfd13adf7b01","date":"2016-12-08T10:02:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add more test cases to packaged_task copyability test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289034 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c53fd92b0f059882ee415b8371d3f0cf8478aa3a","date":"2016-12-08T21:37:47.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 1/7.\n\nGiven `std::basic_streambuf<CharT>::int_type __c`, `std::basic_string<CharT> str_`,\nand having checked `__c != std::basic_streambuf<CharT>::traits_type::eof()` (substituting typedefs\nfor clarity), the line `str_.push_back(__c);` is safe according to humans, but truncates according\nto compilers. `str_.push_back(static_cast<CharT>(__c));` avoids that problem.\n\nFixes D27538.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289105 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"637a6f6005edd119166fb7cba16af59d2608b432","date":"2016-12-08T21:38:01.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 2/7.\n\nThese tests for some guy's transparent operator functors were needlessly truncating their\ndouble results to int. Preserving the doubleness makes compilers happier. I'm following\nexisting practice by adding an \"// exact in binary\" comment when the result isn't a whole number.\n(The changes from 6 to 6.0 and so forth are stylistic, not critical.)\n\nFixes D27539.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289106 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f008c5389e9ceeae60bb9921c1be607ebc1a138a","date":"2016-12-08T21:38:14.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 3/7.\n\nAdd static_cast<short> when constructing pair<Whatever, short> from (Something, int).\n\nFixes D27540.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62cd72c4e63e5de9bc50f2cbe458f9613bb6a1c3","date":"2016-12-08T21:38:23.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 4/7.\n\nChange char to long and remove some char casts. This preserves test coverage for tuple's\nheterogeneous comparisons, while avoiding int-to-char truncation warnings.\n\nFixes D27541.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e8cbce107862187f8f75c1e8b7e49d11015d9f0","date":"2016-12-08T21:38:32.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 5/7.\n\nInstead of storing double in double and then truncating to int, store int in long\nand then widen to long long. This preserves test coverage (as these tests are\ninterested in various tuple conversions) while avoiding truncation warnings.\n\ntest/std/utilities/tuple/tuple.tuple/tuple.cnstr/const_pair.pass.cpp\nSince we aren't physically truncating anymore, t1 is equal to p0.\n\ntest/std/utilities/tuple/tuple.tuple/tuple.cnstr/convert_copy.pass.cpp\nOne edit is different from the usual pattern. Previously, we were storing\ndouble in double and then converting to A, which has an implicitly converting\nconstructor from int. Now, we're storing int in int and then converting to A,\navoiding the truncation.\n\nFixes D27542.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289109 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1cc7ff4c9a82e066f813fe9283d7b3758536f56","date":"2016-12-08T21:38:44.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 6/7.\n\ntest/std/algorithms/alg.modifying.operations/alg.random.shuffle/random_shuffle_rand.pass.cpp\n(Affects 64-bit architectures.) Include <cstddef> so we can take/return std::ptrdiff_t\n(instead of int) in random_shuffle()'s RNG. (C++14 D.12 [depr.alg.random.shuffle]/2 says that\ndifference_type is used, and we're shuffling a plain array.)\n\ntest/std/algorithms/alg.sorting/alg.sort/sort/sort.pass.cpp\ntest/std/algorithms/alg.sorting/alg.sort/stable.sort/stable_sort.pass.cpp\n(Affects 64-bit architectures.) Include <iterator> because we're already using iterator_traits.\nThen, store the result of subtracting two RanIts as difference_type instead of long\n(which truncates on LLP64 architectures like MSVC x64).\n\ntest/std/containers/sequences/forwardlist/forwardlist.ops/splice_after_flist.pass.cpp\ntest/std/containers/sequences/forwardlist/forwardlist.ops/splice_after_one.pass.cpp\n(Affects 64-bit architectures.) Include <cstddef> so we can store the result of\nsubtracting two pointers as std::ptrdiff_t (instead of int).\n\ntest/std/input.output/iostream.format/input.streams/istream.unformatted/ignore_0xff.pass.cpp\n(Affects 32-bit architectures.) Sometimes, size_t is too small. That's the case here,\nwhere tellg() returns pos_type (N4606 27.7.2.3 [istream.unformatted]/39). Implementations can\nhave 64-bit pos_type (to handle large files) even when they have 32-bit size_t.\n\nFixes D27543.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289110 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e541a6172e39ead4fad233ec02c1898c006a0ac","date":"2016-12-08T21:38:57.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warning C4244 \"conversion from 'X' to 'Y', possible loss of data\", part 7/7.\n\ntest/std/input.output/iostream.format/input.streams/istream.unformatted/get.pass.cpp\nAdd static_cast<char> because basic_istream::get() returns int_type (N4606 27.7.2.3 [istream.unformatted]/4).\n\ntest/std/input.output/iostream.format/output.streams/ostream.formatted/ostream.inserters.arithmetic/minus1.pass.cpp\nAdd static_cast<char> because toupper() returns int (C11 7.4.2.2/1).\n\ntest/std/iterators/stream.iterators/ostream.iterator/ostream.iterator.ops/assign_t.pass.cpp\nThis test is intentionally writing doubles to ostream_iterator<int>.\nIt's silencing -Wliteral-conversion for Clang, so I'm adding C4244 silencing for MSVC.\n\ntest/std/language.support/support.limits/limits/numeric.limits.members/infinity.pass.cpp\nGiven `extern float zero;`, the expression `1./zero` has type double, which emits a truncation warning\nwhen being passed to test<float>() taking float. The fix is to say `1.f/zero` which has type float.\n\ntest/std/numerics/complex.number/cmplx.over/arg.pass.cpp\ntest/std/numerics/complex.number/cmplx.over/norm.pass.cpp\nThese tests were constructing std::complex<double>(x, 0), emitting truncation warnings when x is long long.\nSaying static_cast<double>(x) avoids this.\n\ntest/std/numerics/rand/rand.eng/rand.eng.lcong/seed_result_type.pass.cpp\nThis was using `int s` to construct and seed a linear_congruential_engine<T, stuff>, where T is\nunsigned short/unsigned int/unsigned long/unsigned long long. That emits a truncation warning in the\nunsigned short case. Because the range [0, 20) is tiny and we aren't doing anything else with the index,\nwe can just iterate with `T s`.\n\ntest/std/re/re.traits/value.pass.cpp\nregex_traits<wchar_t>::value()'s first parameter is wchar_t (N4606 28.7 [re.traits]/13). This loop is\nusing int to iterate through ['g', 0xFFFF), emitting a truncation warning from int to wchar_t\n(which is 16-bit for some of us). Because the bound is exclusive, we can just iterate with wchar_t.\n\ntest/std/strings/basic.string/string.cons/size_char_alloc.pass.cpp\nThis test is a little strange. It's trying to verify that basic_string's (InIt, InIt) range constructor\nisn't confused by \"N copies of C\" when N and C have the same integral type. To do this, it was\ntesting (100, 65), but that eventually emits truncation warnings from int to char. There's a simple way\nto avoid this - passing (static_cast<char>(100), static_cast<char>(65)) also exercises the disambiguation.\n(And 100 is representable even when char has a signed range.)\n\ntest/std/strings/string.view/string.view.hash/string_view.pass.cpp\nAdd static_cast<char_type> because `'0' + i` has type int.\n\ntest/std/utilities/function.objects/bind/func.bind/func.bind.bind/nested.pass.cpp\nWhat's more horrible than nested bind()? pow() overloads! This operator()(T a, T b) was assuming that\nstd::pow(a, b) can be returned as T. (In this case, T is int.) However, N4606 26.9.1 [cmath.syn]/2\nsays that pow(int, int) returns double, so this was truncating double to int.\nAdding static_cast<T> silences this.\n\ntest/std/utilities/function.objects/unord.hash/integral.pass.cpp\nThis was iterating `for (int i = 0; i <= 5; ++i)` and constructing `T t(i);` but that's truncating\nwhen T is short. (And super truncating when T is bool.) Adding static_cast<T> silences this.\n\ntest/std/utilities/utility/exchange/exchange.pass.cpp\nFirst, this was exchanging 67.2 into an int, but that's inherently truncating.\nChanging this to static_cast<short>(67) avoids the truncation while preserving the\n\"what if T and U are different\" test coverage.\nSecond, this was exchanging {} with the explicit type float into an int, and that's also\ninherently truncating. Specifying short is just as good.\n\ntest/std/utilities/utility/pairs/pairs.spec/make_pair.pass.cpp\nAdd static_cast<short>. Note that this affects template argument deduction for make_pair(),\nbetter fulfilling the test's intent. For example, this was saying\n`typedef std::pair<int, short> P1; P1 p1 = std::make_pair(3, 4);` but that was asking\nmake_pair() to return pair<int, int>, which was then being converted to pair<int, short>.\n(pair's converting constructors are tested elsewhere.)\nNow, std::make_pair(3, static_cast<short>(4)) actually returns pair<int, short>.\n(There's still a conversion from pair<nullptr_t, short> to pair<unique_ptr<int>, short>.)\n\nFixes D27544.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289111 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2f3637d4065238e5b93ba203635808563dfbc44","date":"2016-12-08T23:57:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR27374 - Remove the implicit reduced-arity-extension in tuple.\n\nThis patch removes libc++'s tuple extension which allowed it to be\nconstructed from fewer initializers than elements; with the remaining\nelements being default constructed. However the implicit version of\nthis extension breaks conforming code. For example:\n\n    int fun(std::string);\n    int fun(std::tuple<std::string, int>);\n    int x = fun(\"hello\"); // ambigious\n\nBecause existing code may already depend on this extension it can be re-enabled\nby defining _LIBCPP_ENABLE_TUPLE_IMPLICIT_REDUCED_ARITY_EXTENSION.\n\nNote that the explicit version of this extension is still supported,\nalthough it's somewhat less useful than the implicit one.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f178c261f4137dfd0fe5afae511cc83be640da23","date":"2016-12-09T03:17:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Turn off header sorting and comment formatting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289177 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a6eaee517d832769615550bb0239b75f143d73f","date":"2016-12-09T03:18:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix misspelling in .clang-format\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289178 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11715ba8e2a2e949e58347ee0cce135aab0319b3","date":"2016-12-09T09:31:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Put C++ ABI headers in a special build directory instead of the top level.\n\n    This patch changes where the C++ ABI headers are put during the build. Previously\n    they were put in the top level include directory (not the libc++ header directory).\n    However that just polutes the top level directory. Instead this patch creates a special\n    directory to put them in. The reason they can't be put under c++/v1 until after the build\n    is because libc++ uses the in-source headers, so we can't add the include path of the libc++\n    headers in the object dir.\n\n    Additionally this patch teaches the test suite how to find the ABI headers,\n    and adds a demangling utility to help debug tests with.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289195 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e386ad3090e7979c26c97a9a717624f8fc69d8f4","date":"2016-12-09T09:51:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor uses_allocator test types for upcoming fixes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289197 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf3b8e226ed91b8004213df7d50b1ea5ee774df9","date":"2016-12-09T12:17:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix missing const on set::count. Patch from Andrey Khalyavin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289204 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8cdac0b88534f785fe9722ef74e7bf7cdc625b10","date":"2016-12-09T12:32:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[NFC] Change whitespace to force docs rebuild\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289205 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fe522f79ac2f385711766dc9f0ec01604bf54f2","date":"2016-12-09T12:33:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update doc version to 4.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289206 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa1d62b4af6f1268900981a7f72ca4e9c293f056","date":"2016-12-09T19:53:08.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Add LIBCPP_ASSERT_NOEXCEPT/LIBCPP_ASSERT_NOT_NOEXCEPT, remove an unused variable.\n\ntest/support/test_macros.h\nFor convenience/greppability, add macros for libcxx-specific static_asserts about noexceptness.\n\n(Moving the definitions of ASSERT_NOEXCEPT/ASSERT_NOT_NOEXCEPT isn't technically necessary\nbecause they're macros, but I think it's better style to define stuff before using it.)\n\ntest/std/utilities/tuple/tuple.tuple/tuple.apply/apply.pass.cpp\nThere was a completely unused `TrackedCallable obj;`.\n\napply() isn't depicted with conditional noexcept in C++17.\n\ntest/std/utilities/tuple/tuple.tuple/tuple.apply/make_from_tuple.pass.cpp\nNow that we have LIBCPP_ASSERT_NOEXCEPT, use it.\n\nFixes D27622.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289264 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eae7e51a7dbde2ac882725973c341400169d93c4","date":"2016-12-09T22:35:53.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix string_view tests.\n\ntest/std/strings/string.view/string.view.ops/compare.pointer_size.pass.cpp\nPassing -1 to size_t triggers signed/unsigned mismatch warnings because it's\na value-modifying conversion. Add static_cast<size_t> to soothe the compiler.\n(This file refers to size_t unqualified.)\n\ntest/std/strings/string.view/string.view.ops/substr.pass.cpp\nAdd <algorithm> for std::min() and <stdexcept> for std::out_of_range.\n\nN4618 21.4.2.4 [string.view.access]/1: \"Requires: pos < size().\"\n/4: \"[ Note: Unlike basic_string::operator[], basic_string_view::operator[](size())\nhas undefined behavior instead of returning charT(). -end note ]\"\n\nFixes D27633.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289283 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e99c8b0afcf3790b1ed6ced119f86365b161299","date":"2016-12-11T00:20:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix support for multibyte thousands_sep and decimal_point in moneypunct_byname and numpunct_byname.\n\nSummary:\nThe underlying C locales provide the `thousands_sep` and `decimal_point` as strings, possible with more than one character. We currently don't handle this case even for `wchar_t`.\n\nThis patch properly converts the mbs -> wide character for `moneypunct_byname<wchar_t>`. For the `moneypunct_byname<char>` case we attempt to narrow the WC and if that fails we also attempt to translate it to some reasonable value. For example we translate U00A0 (non-breaking space) into U0020 (regular space). If none of these conversions succeed then we simply allow the base class to provide a fallback value.\n\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: vangyzen, george.burgess.iv, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D24218\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b61c998ececc5af2c8ce9455a491bf2b5c32cef6","date":"2016-12-11T02:20:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix count_new.hpp to work w/o dynamic exception specifications\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e5bca2ba666cc85b26ec69a93558f583ced4c2ed","date":"2016-12-11T02:47:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more uses of dynamic exception specifications in C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289356 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12a450ff3b05407eb5cd6a433edd5ab2f28c44fe","date":"2016-12-11T02:49:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix yet another dynamic exception spec\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"11f64dcc5864f3d237dd4fd35f56793022567257","date":"2016-12-11T03:41:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix undefined behavior in container swap tests.\n\nThese swap tests were swapping non-POCS non-equal allocators which\nis undefined behavior. This patch changes the tests to use allocators\nwhich compare equal. In order to test that the allocators were not\nswapped I added an \"id\" field to test_allocator which does not\nparticipate in equality but does propagate across copies/swaps.\n\nThis patch is based off of D26623 which was submitted by STL.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289358 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47dfc5940d6ad6e49a9a6e13cb31e465b22c4bd5","date":"2016-12-11T04:00:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix copy/paste errors introduced in r289358\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289359 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2cd27094316a83e188727fe0478b5f0dfd0a055","date":"2016-12-11T05:31:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable the -Wsign-compare warning to better support MSVC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289363 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab804f1b7db328e571b022b28f5965f4f538f3fb","date":"2016-12-11T05:45:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Re-disable -Wsign-compare for now. I didn't catch all occurrences\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289366 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8e3e932bf26dca4f79da9e1f34e34bee970d959","date":"2016-12-11T05:54:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Actually re-disable -Wsign-compare\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289367 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"513447dbb91dd555ea08297dbee6a1ceb6abdc46","date":"2016-12-12T05:05:46.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx][CMake] Move the warning to HandleOutOfTreeLLVM\n\nThis currently gives a warning when building libcxx under runtimes.\n\nDifferential Revision: https://reviews.llvm.org/D27643\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289418 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fbbec294b0222bd1307f39975bd6ce26e3b9989a","date":"2016-12-12T19:50:14.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix an improper assumption about Null Forward Iterators.\n\nValue-initialized iterators still can't be compared to those with parents.\n\nFixes D26626.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289462 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b988a6fb4179b409c4f2ff6d424dbd03092f6de3","date":"2016-12-12T19:50:22.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Change ifstream constructor tests to handle read-only files.\n\nCertain source control systems like to set the read-only bit on their files,\nwhich interferes with opening \"test.dat\" for both input and output.\nFortunately, we can work around this without losing test coverage.\nNow, the ifstream.cons tests have comments referring to the ofstream.cons tests.\nThere, we're creating writable files (not checked into source control),\nwhere the ifstream constructor tests will succeed.\n\nFixes D26814.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289463 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4d6f42350e9c7295e85dd15ca3adde7b9fc127bf","date":"2016-12-13T01:54:58.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix size_t-to-int truncation warnings in syserr.hash.\n\nAfter r289363, these tests were triggering MSVC x64 warning C4267\n\"conversion from 'size_t' to 'int', possible loss of data\" by taking 0, 2, and 10\nas std::size_t, then constructing error_code(int, const error_category&) or\nerror_condition(int, const error_category&) from that (N4618 19.5.3.2\n[syserr.errcode.constructors]/3, 19.5.4.2 [syserr.errcondition.constructors]/3).\n\nThe fix is simple: take these ints as int, pass them to the int-taking\nconstructor, and perform a value-preserving static_cast<std::size_t>\nwhen comparing them to `std::size_t result`.\n\nFixes D27691.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289512 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d95982406230b74a737f4f2edbef3291fb26c70","date":"2016-12-14T21:22:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit r286884: P0503R0, adopted in Issaquah, rewords some requirements on nullptr_t and istream_iterator.\n\nNo code changes were needed, but I updated a few tests.\nAlso resolved P0509 and P0521, which required no changes to the library or tests.\n\nThis patch was reverted due to llvm.org/PR31016. There is a bug in Clang 3.7\nwhich causes default.pass.cpp to fails. That test is now marked as XFAIL for that\nclang version.\n\nThis patch was originally authored by Marshall Clow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289708 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff62475dcdf8fd5bebdce7fa61c81038db4f2fa7","date":"2016-12-14T21:29:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix PR24075, PR23841 - Add scoped_allocator_adaptor::construct(pair<T, U>*, ...) overloads.\n\nSummary:\nFor more information see:\n\n* https://llvm.org/bugs/show_bug.cgi?id=23841\n* https://llvm.org/bugs/show_bug.cgi?id=24075\n\nI hope you have as much fun reviewing as I did writing these insane tests!\n\nReviewers: mclow.lists, AlisdairM, EricWF\n\nSubscribers: AlisdairM, Potatoswatter, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D27612\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289710 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a793c18bae3b4d8b99b4659c2e752d94b19ef923","date":"2016-12-14T21:44:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL test on apple-clang-7.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"18e56b438eefa0eb7f6019e876bf53bdcdf851ba","date":"2016-12-14T22:22:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix tuple construction/assignment from types derived from tuple/pair/array.\n\nSummary:\nThe standard requires tuple have the following constructors:\n```\ntuple(tuple<OtherTypes...> const&);\ntuple(tuple<OtherTypes...> &&);\ntuple(pair<T1, T2> const&);\ntuple(pair<T1, T2> &&);\ntuple(array<T, N> const&);\ntuple(array<T, N> &&);\n```\nHowever libc++ implements these as a single constructor with the signature:\n```\ntemplate <class TupleLike, enable_if_t<__is_tuple_like<TupleLike>::value>>\ntuple(TupleLike&&);\n```\n\nThis causes the constructor to reject types derived from tuple-like types; Unlike if we had all of the concrete overloads, because they cause the derived->base conversion in the signature.\n\nThis patch fixes this issue by detecting derived types and the tuple-like base they are derived from. It does this by creating an overloaded function with signatures for each of tuple/pair/array and checking if the possibly derived type can convert to any of them.\n\nThis patch fixes [PR17550]( https://llvm.org/bugs/show_bug.cgi?id=17550)\n\nThis patch \n\nReviewers: mclow.lists, K-ballo, mpark, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D27606\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b7dedb244d4c299d7e63a422bfa31346130bf70","date":"2016-12-14T22:46:46.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC x64 truncation warnings with 32-bit allocator size_type/difference_type.\n\ntest/std/containers/container.adaptors/queue/queue.cons.alloc/ctor_container_alloc.pass.cpp\ntest/std/containers/container.adaptors/stack/stack.cons.alloc/ctor_container_alloc.pass.cpp\nIterate with C::size_type because that's what operator[] takes.\n\ntest/std/containers/sequences/vector/contiguous.pass.cpp\ntest/std/strings/basic.string/string.require/contiguous.pass.cpp\nAdd static_cast<typename C::difference_type> because that's what the iterator's operator+ takes.\n\nFixes D27777.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bad1d6c248e95d6f3f401b70ee87306f4ce019a3","date":"2016-12-14T22:48:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR31378 - std::list::remove should not require a default constructible allocator.\n\nIn list::remove we collect the nodes we're removing in a seperate\nlist instance. However we construct this list using the default\nconstructor which default constructs the allocator. However allocators\nare not required to be default constructible. This patch fixes the\nconstruction of the second list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289735 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c480bc55cdcdb884d24fbe96cc0c29da44939186","date":"2016-12-14T23:24:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around bug in initialization of std::array base class with older clangs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289741 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4a435415ad2d85f0ff93c6525e8d363f49d9a821","date":"2016-12-15T05:41:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL test for more apple-clang versions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289767 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9663ee4d4f6358edb908420df08e9ae4f091d66f","date":"2016-12-15T06:34:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r289727 due to PR31384\n\nThis patch reverts the changes to tuple which fixed construction from\ntypes derived from tuple. It breaks the code mentioned in llvm.org/PR31384.\nI'll follow this commit up with a test case.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289773 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1739d3ef0af711c71d61f996e635fb7fb2c1927b","date":"2016-12-15T06:38:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add test case for PR31384\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289774 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90314c55d1df9e2983f35d2f3ca065a76d1236e1","date":"2016-12-15T07:05:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add more test cases for PR31384\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289778 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cdc59e576e026e776c102b19891dc80a14be14cb","date":"2016-12-15T07:15:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for LWG 2796\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289780 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b7fe139a72b4663703a0772cd76b2f4fb2017185","date":"2016-12-15T07:23:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix typo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289781 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d0d379c404ca3fd1c7823ee7a19c87dad8af116","date":"2016-12-15T11:00:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix XFAILS for is_trivially_destructible trait\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"801aa91790e7cd3c2adabadaf9f10bc59cb2cfea","date":"2016-12-16T17:30:51.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Put headers relative to clang\n\nWhen libcxx isn't building with an installed LLVM we copy the libcxx headers into the LLVM build directory so that a clang in that build tree can find the headers relative to itself.\n\nThis is only important in situations where you don't have headers installed under /, which is common these days on Darwin.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@289963 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4b3552a4d86e56ba03d1cc2b87dd30ce7dd0e8f","date":"2016-12-17T21:28:24.000Z","author":{"name":"Chris Bieneman","email":"beanz@apple.com"},"message":"[CMake] Fix issue reported on sanitizer bots\n\nThis should resolve an issue reported on the commit thread that impacted sanitizer bots.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"20ace04348f9514643fa7efed8fea8ac16fb26d1","date":"2016-12-23T19:07:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add apple-clang-8 to list of XFAILS for some variant tests. Patch from Michael Park\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290440 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"904a9cb99dbcf93554eddee34c1de55e0273f273","date":"2016-12-23T19:09:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update TestingLibcxx doc to reflect the use_system_cxx_lib flag. Patch from Michael Park\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290441 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f7a9c085aa0b6de00132b31721a0d7397a66360","date":"2016-12-23T19:30:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add release update instructions for libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290444 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59c5cb01164937ecd52a3e74307614212d1c690f","date":"2016-12-23T19:38:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add test that _LIBCPP_VERSION matches __libcpp_version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0de917eac4f7d66eca9c5f5529cd7f95b1986cd3","date":"2016-12-23T20:00:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update doc and various cleanup\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290446 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ac2f148094c21374f425644a969fae772e4a275","date":"2016-12-23T20:03:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR31440: Make __sanitizer_annotate_contigious_container always visible. Fix from Jan Beich\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290447 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17a98d8a9209167c58e35188a295f759d190e895","date":"2016-12-23T20:17:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't use posix_memalign on Windows platforms\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290448 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0e5ebbc77c3c2cfd7d835fcfe40fcb65df0c5598","date":"2016-12-23T23:37:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unused parameters and variables\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290459 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50f6579e7421fecf6b90cba79e58563f6d9b5f3b","date":"2016-12-24T00:24:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix sign comparison warnings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3678f7d6ee27809d50ac3382c4302b737e99c882","date":"2016-12-24T00:28:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix another unused warning\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290470 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a1cbcf2b75445f1bcf7de16004fc22f624ca376","date":"2016-12-24T00:40:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix newly failing c++03 tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290472 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d2fd1f556a55f17ded674e1a7e3f5ba17188a87","date":"2016-12-24T00:44:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix missed sign-compare warning\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290473 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e9784032ce87622189cff8de9685784a6536d99b","date":"2016-12-24T01:07:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix warnings only produced by apple-clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290474 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10dd69eaf1933e90b55404f462407077121da5bb","date":"2016-12-24T01:12:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix unused warning which only triggers in C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290475 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f47536798d2a69901035e3a9fd23f7240e25ff27","date":"2016-12-24T01:29:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix yet another missed -Wunused warning. Hopefully this is the last one\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290476 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f62eee4fe754f48467a215bfb1a9d58592ce7027","date":"2016-12-24T01:43:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix warning caused by platforms providing a signed wint_t\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290477 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2ab8f62c6f9e005053f8cb14d906772001c2b71e","date":"2016-12-24T01:56:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Avoid unused warning in __throw_future_error w/o exceptions enabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290479 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68e3ccbecdddb0c698c67749946d5847ba9b9c0b","date":"2016-12-24T03:09:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix sign-compare warnings on ARM platforms caused by wchar_t being unsigned\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290480 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3414afa415384af82c4af5dd9d2ac8561bf4b048","date":"2016-12-24T03:20:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix -Wsign-compare warnings in re tests that only run on OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290481 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e32aed8014bf78f000d2ce16569fe7d46b488c62","date":"2016-12-24T03:27:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix ASAN test failure\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290482 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab9ab94102311ce91c5837acdddbc4a9410f894e","date":"2016-12-24T04:34:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Enable -Wunreachable-code and fix duplicate warning flags\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290486 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"99447c8e03c20ff51f972254edf8d8fa4516da0e","date":"2016-12-24T17:21:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug #31387 - not checking end iterator when parsing decimal escape. Thanks to Karen for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290500 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"833ad542b51d0d1f362ab0c2108ca4a29d7dcf28","date":"2016-12-24T18:05:32.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Make __num_get_float hidden\n\nIt's an internal function and shouldn't be exported. It's also a source\nof discrepancy in the published ABI list; these symbols aren't exported\nfor me on CentOS 7 or Ubuntu 16.04, leading to spurious check-cxx-abilist\nfailures.\n\nDifferential Revision: https://reviews.llvm.org/D27153\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290503 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3010df98f9cbde7c1c6b16c052851067795047e4","date":"2016-12-27T19:59:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR31481 - 3+ parameter common_type isn't SFINAE friendly\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290624 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"046a71be67e5c65c3425a85416edf852fc7d1887","date":"2016-12-27T21:16:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0435R1 - Resolving LWG issues for common_type\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290627 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01eb99ac7bb111520d011748fb9fff176d2e64d7","date":"2016-12-28T04:58:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement a throwing version of _LIBCPP_ASSERT.\n\nThis patch implements changes to allow _LIBCPP_ASSERT to throw on failure\ninstead of aborting. The main changes needed to do this are:\n\n1. Change _LIBCPP_ASSERT to call a handler via a replacable function pointer\n   instead of calling abort directly. Additionally this patch implements two\n   handler functions, one which aborts and another that throws an exception.\n\n2. Add _NOEXCEPT_DEBUG macro for disabling noexcept spec on function which\n   contain _LIBCPP_ASSERT. This is required in order to prevent assertion\n   failures throwing through a noexcept function. This macro has no effect\n   unless _LIBCPP_DEBUG_USE_EXCEPTIONS is defined.\n\nHaving a non-aborting _LIBCPP_ASSERT is very important to allow sane testing of\ndebug mode. Currently we can only have one test case per file, since the test\ncase will cause the program to abort. Testing debug mode this way would require\nthousands of test files, most of which would be 95% boiler plate. I don't think\nthis is a feasible strategy. Fortunately using a throwing debug handler solves\nthese issues.\n\nAdditionally this patch rewrites the documentation for debug mode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290651 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51d64bbc8c962b973f66c1d8f0d10ec96119c4c6","date":"2016-12-28T05:20:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix debug mode build w/o exceptions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290652 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa31c108f05ffc3fe9ccc2ec116275ed1a4fa05e","date":"2016-12-28T05:26:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix build errors in C++03 caused by recent debug changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290653 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c8aa056f45b0d71acc84f9530a6234ce74d9d6c","date":"2016-12-28T05:35:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix __wrap_iter in debug mode and apply _NOEXCEPT_DEBUG to it\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290654 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47257c4a7d983f0b727e2fabb00761a41d631f11","date":"2016-12-28T05:53:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for unordered container tests and std::string\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290655 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"72a67ff11685cb3d48d0d01c992c0a79c0ef9728","date":"2016-12-28T05:56:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix stupid build error caused by a stupid person\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290656 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fb342388dfd049d10bd7374da9a91a64d09ee3ef","date":"2016-12-28T06:06:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix debug mode for vector/list and cleanup tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290657 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32eebb71f71e48bbc59f4db24e76fbc875f03769","date":"2016-12-28T06:15:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Ensure <__debug> gets the nullptr definition in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290658 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ce34512d2f3dc7dd5e0712dbc2d4eac69c012423","date":"2016-12-28T06:21:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove dead debug_mode doc link\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290659 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a549abae17e011764cacbfeb31eab4a43e717ad","date":"2016-12-28T09:50:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix ABI incompatible C++03 nullptr_t\n\nIn C++03 libc++ emulates nullptr_t using a class, and #define's nullptr.\nHowever this makes nullptr_t mangle differently between C++03 and C++11.\nThis breaks any function ABI which takes nullptr_t.\n\nThanfully Clang provides __nullptr in all dialects. This patch adds\nan ABI option to switch to using __nullptr in C++03. In a perfect world\nI would like to turn this on by default, since it's just ABI breaking fix\nto an ABI breaking bug.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290662 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d0000f737c610cff95975d762e6d998637ed5d6","date":"2016-12-28T11:09:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix typo in comment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290666 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"152e5e61a1181abe4ea9ad72fb08ca31d9cdd6d9","date":"2016-12-29T20:03:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR31489 - std::function self-swap segfaults\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ae3128f26882e9e5ead8cf574d995e631abcaa65","date":"2016-12-29T22:42:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix build using the buildit script\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f988e6e4ed6dae374f6384ee7b27276f6dfc280","date":"2016-12-30T04:16:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update \"Making Optional Greater Equal Again\" paper status\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8673c52ffe81a51ad10b60bdf530d0ae3a367d39","date":"2016-12-30T09:28:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get ctype_byname tests passing on Linux.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e17bc1faf03109ff64ca278f8e603c31fe089f4","date":"2016-12-30T10:44:00.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Remove mblen(), mbtowc() and wctomb() from the thread-unsafe functions.\n\nBack in r240527 I added a knob to prevent thread-unsafe functions from\nbeing exposed. mblen(), mbtowc() and wctomb() were also added to this\nlist, as the latest issue of POSIX doesn't require these functions to be\nthread-safe.\n\nIt turns out that the only circumstance in which these functions are not\nthread-safe is in case they are used in combination with state-dependent\ncharacter sets (e.g., Shift-JIS). According to Austin Group Bug 708,\nthese character sets \"[...] are mostly a relic of the past and which\nwere never supported on most POSIX systems\".\n\nThough in many cases the use of these functions can be prevented by\nusing the reentrant counterparts, they are the only functions that allow\nyou to query whether the locale's character set is state-dependent. This\nmeans that omitting these functions removes actual functionality.\n\nLet's be a bit less pedantic and drop the guards around these functions.\n\nLinks:\nhttp://austingroupbugs.net/view.php?id=708\nhttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n2037.htm\n\nReviewed by:\tericwf\nDifferential Revision:\thttps://reviews.llvm.org/D21436\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290748 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"687c0bbee4bc43513452c5b46b6382554e36952f","date":"2016-12-30T12:44:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR19460 - std::ios is convertible to int.\n\nstd::basic_ios has an operator bool(). In C++11 and later\nit is explicit, and only allows contextual implicit conversions.\n\nHowever explicit isn't available in C++03 which causes std::istream (et al)\nto have an implicit conversion to int. This can easily cause ambiguities\nwhen calling operator<< and operator>>.\n\nThis patch uses a \"bool-like\" type in C++03 to work around this. The\n\"bool-like\" type is an arbitrary pointer to member function type. It\nwill not convert to either int or void*, but will convert to bool.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290750 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01153d5a73f13a8ad358ae020f439332d6153485","date":"2016-12-30T12:45:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing include in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290751 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ce93e5bd4192900e8d12dc01dd4efb0c9609f1f","date":"2016-12-30T13:11:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r290750 - Fix PR19460 - std::ios is convertible to int.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290752 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc06f26c7fe403e4f4d2abbccc0bdd209cfc57ba","date":"2016-12-30T14:05:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit r290750: Fix PR19460 - std::ios is convertible to int.\n\nThere were two problems with the initial fix.\n\n1. The added tests flushed out that we misconfigured _LIBCPP_EXPLICIT with GCC.\n\n2. Because the boolean type was a member function template it caused weird link\n   errors. I'm assuming due to the vague linkage rules. This time the bool type\n   is a non-template member function pointer. That seems to have fixed the\n   failing tests. Plus it will end up generating less symbols overall, since\n   the bool type is no longer per instantiation.\n\noriginal commit message below\n-----------------------------\n\nstd::basic_ios has an operator bool(). In C++11 and later\nit is explicit, and only allows contextual implicit conversions.\n\nHowever explicit isn't available in C++03 which causes std::istream (et al)\nto have an implicit conversion to int. This can easily cause ambiguities\nwhen calling operator<< and operator>>.\n\nThis patch uses a \"bool-like\" type in C++03 to work around this. The\n\"bool-like\" type is an arbitrary pointer to member function type. It\nwill not convert to either int or void*, but will convert to bool.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290754 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4797c1151d69741470c19fa56a27a7b912b1e604","date":"2016-12-30T17:42:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some 'FIXME's in the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290758 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51dfbbc517782e777007fbc9e4c79a5901c34d04","date":"2016-12-30T18:01:36.000Z","author":{"name":"Sebastian Pop","email":"sebpop@gmail.com"},"message":"improve performance of string::find\n\nstring::find used to call the generic algorithm ::find.  The patch special\ncase string::find such that it ultimately gets converted to calls to memchr\nand memcmp.\n\nThe patch improves the performance of the string::find routine by about 20x.\n\nWithout the patch, the performance on an x86_64-linux 3400 MHz machine is:\n\nBenchmark                           Time           CPU Iterations\n-----------------------------------------------------------------\nBM_StringFindNoMatch/10             4 ns          4 ns  166421326\nBM_StringFindNoMatch/64            37 ns         37 ns   18754392\nBM_StringFindNoMatch/512          268 ns        268 ns    2586060\nBM_StringFindNoMatch/4k          2143 ns       2144 ns     328342\nBM_StringFindNoMatch/32k        16910 ns      16917 ns      40623\nBM_StringFindNoMatch/128k       67577 ns      67602 ns      10138\nBM_StringFindAllMatch/1             3 ns          3 ns  265163471\nBM_StringFindAllMatch/8             6 ns          6 ns  112582467\nBM_StringFindAllMatch/64           36 ns         36 ns   19566457\nBM_StringFindAllMatch/512         209 ns        209 ns    3318893\nBM_StringFindAllMatch/4k         1618 ns       1618 ns     432963\nBM_StringFindAllMatch/32k       12909 ns      12914 ns      54317\nBM_StringFindAllMatch/128k      48342 ns      48361 ns      13922\nBM_StringFindMatch1/1           33777 ns      33790 ns      20698\nBM_StringFindMatch1/8           33940 ns      33953 ns      20619\nBM_StringFindMatch1/64          34038 ns      34051 ns      20571\nBM_StringFindMatch1/512         34217 ns      34230 ns      20480\nBM_StringFindMatch1/4k          35510 ns      35524 ns      19752\nBM_StringFindMatch1/32k         46438 ns      46456 ns      15030\nBM_StringFindMatch2/1           33839 ns      33852 ns      20648\nBM_StringFindMatch2/8           33950 ns      33963 ns      20594\nBM_StringFindMatch2/64          33846 ns      33859 ns      20668\nBM_StringFindMatch2/512         34023 ns      34036 ns      20279\nBM_StringFindMatch2/4k          35422 ns      35436 ns      19716\nBM_StringFindMatch2/32k         46570 ns      46588 ns      15027\n\nWith the patch applied\n\nBenchmark                           Time           CPU Iterations\n-----------------------------------------------------------------\nBM_StringFindNoMatch/10             5 ns          5 ns  133724346\nBM_StringFindNoMatch/64             6 ns          6 ns  119312184\nBM_StringFindNoMatch/512           13 ns         13 ns   51539628\nBM_StringFindNoMatch/4k            77 ns         77 ns    8935934\nBM_StringFindNoMatch/32k          551 ns        551 ns    1222808\nBM_StringFindNoMatch/128k        2684 ns       2685 ns     259957\nBM_StringFindAllMatch/1             7 ns          7 ns   98017959\nBM_StringFindAllMatch/8             7 ns          7 ns   91466911\nBM_StringFindAllMatch/64            8 ns          8 ns   85707392\nBM_StringFindAllMatch/512          20 ns         20 ns   34490895\nBM_StringFindAllMatch/4k           93 ns         93 ns    7360375\nBM_StringFindAllMatch/32k         827 ns        828 ns     829944\nBM_StringFindAllMatch/128k       3593 ns       3594 ns     195815\nBM_StringFindMatch1/1            1332 ns       1332 ns     516354\nBM_StringFindMatch1/8            1336 ns       1336 ns     495876\nBM_StringFindMatch1/64           1338 ns       1339 ns     516656\nBM_StringFindMatch1/512          1357 ns       1357 ns     510717\nBM_StringFindMatch1/4k           1485 ns       1486 ns     461228\nBM_StringFindMatch1/32k          2235 ns       2236 ns     318253\nBM_StringFindMatch2/1            1335 ns       1335 ns     517105\nBM_StringFindMatch2/8            1336 ns       1337 ns     518004\nBM_StringFindMatch2/64           1344 ns       1345 ns     511751\nBM_StringFindMatch2/512          1361 ns       1361 ns     508150\nBM_StringFindMatch2/4k           1611 ns       1611 ns     463388\nBM_StringFindMatch2/32k          2187 ns       2187 ns     317532\n\nPatch written by Aditya Kumar and Sebastian Pop.\n\nDifferential Revision: https://reviews.llvm.org/D27068\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290761 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04674ef99be8ef54a31b339a1113420345fcdc10","date":"2016-12-31T00:00:21.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"random: include __config before building\n\nWe need to include __config to ensure that we know what random\nimplementation is being used.  Fixes compilation for Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290775 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6aee64c5d7bd5dabd5e1f5770c4f3e0388b5534","date":"2016-12-31T17:34:26.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"remove some inherited attributes on exceptions\n\nThese exception types are marked with `_LIBCPP_EXCEPTION_ABI` which\nexpands to `__attribute__((__visibility__(\"default\")))` or\n`__declspec(dllexport)`.  When building for Windows, we would hit an\nerror:\n\n    cannot apply 'dllexport' to a 'dllexport' class\n\nRemove the duplicate annotations as they will be inherited from the\nclass.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290785 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5334ba74948dfa1a130facbc91c1a6c88268e8bc","date":"2016-12-31T18:13:34.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"clean up some qualifier casting\n\nThis cleans up the `-Wqual-cast` warnings from gcc 6 when building\nlibc++.  NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290789 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7e84953a527220cab4817a1f10d6a2dad1235b8","date":"2016-12-31T21:24:04.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"system_error: use strerror_r only for threaded code\n\nWhen building libc++ without threading, strerror_r is not used.  Define\nthe code only when threading is enabled.  This allows us to build\nsystem_error for Windows, which ATM doesn't build with threading.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290791 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63de5d2a7f88f3e7ef513f991491e68afd26fca6","date":"2017-01-01T20:20:36.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: differentiate between building for and on Windows\n\nThis is necessary to support cross-compiling a Windows libc++ from\nLinux.  The CMAKE_SYSTEM_HOST_NAME tells you what, in autotools\nparlance, is known as the build as opposed to WIN32 which maps to, in\nautotools parlance, host.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290800 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cfe109bf3d0bfe44741deb9834d866263fdee558","date":"2017-01-01T20:20:38.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: dont detect libraries for Windows\n\nHard code the defaults for Windows for the time being.  The checks\nreally are always going to return the same value.  Technically, the\npthread linkage is possible, however, it seems better to use the Win32\nthreading along with the external threading support that we have added.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290801 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1ca3c453160bef16d1296367fa65d72c1d18da5d","date":"2017-01-01T20:20:40.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: further improve flags handling for cl\n\nThis allows us to build with cl (or rather clang-cl) by using the\ncorrect spelling for `-include` (`/FI` for cl).  clang-cl and cl default\nto C++11/C++14 as they support it rather than permitting an explicit\nlanguage standard.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67372ee77e659747b97e6a5d1eb6219b2292f0d0","date":"2017-01-01T20:20:41.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"chrono: implement a Windows version of system_clock::now\n\nsystem_clock::now is not entirely straight forward on Windows, which\ndoes not have a clock_gettime function.\n\nGetSystemTimeAsFileTime gives us the value relative to the NT epoch (Jan\n1 1601) rather than the Unix epoch (Jan 1 1970).  However, this function\nhas a low resolution (~10ms).  Newer versions of Windows provide\nGetSystemTimePreciseAsFileTime which gives us a much more accurate time\n(<1us).  Unfortunately, the latter is only available on Windows 8+ when\ntargeting desktop apps.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290803 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"75748cde64db21597955e84e43a30d607a4a14be","date":"2017-01-01T20:20:43.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"chrono: give Windows a steady_clock\n\nProvide a definition for a steady monotonic clock by wrapping\nQueryPerformanceCounter.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290804 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4ed4bca5f3000e2ed68f81b35fbe8d586a6e67f1","date":"2017-01-01T22:04:36.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"chrono: address post-commit comments from majnemer\n\nCorrect style to match libc++ style as pointed out by David Majnemer on\nIRC.  NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"864ad6d129a89a474c8fb1350df41d0008019677","date":"2017-01-01T22:04:38.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"chrono: address post commit comments from Howard\n\nDrawing some inspiration from code from Bill O'Neal as pointed out by\nHoward, rework the code to avoid an overflow in the duration.  Adjust\nthe style to match libc++ style as well.\n\nCreate a local typedef for the FILETIME duration (100-ns units).  Use\nthis to define the difference between the NT and the UNIX epochs (which\npreviously overflowed due to the representation limits due to the\nbouncing to ns).  Return the FILETIME duration biased by the NT-to-UNIX\nepoch conversion.\n\nUse of the custom duration makes it easier to read and reason about the\ncode.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290806 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7f9effb8e8e4c97ffdb0ee9e327dc2b86b31795","date":"2017-01-02T18:41:48.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"locale: update ctype access for MSVC CRT 14+\n\nVisual C++ 14 and newer split msvcrt into msvcrt and ucrt with flavours\nof the ucrt for different environments.  This changed the access to the\nctype table by introducing the `__pctype_func` and `__pwctype_func`\naccessors.  Use this rather than directly accessing `_ctype` which\nallows us to be safer in threaded situations by going through the libc\nlocking.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290823 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3f4bdf5491bec5ea4c85cb113c5f2c5845bf722","date":"2017-01-02T18:41:50.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"chrono: correct the units for the epoch bias\n\nAs pointed out by Howard, this is actually 134774 days (* 24 * 3600),\nand therefore seconds, not 100ns units.  Adjust the units to reflect\nreality.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a1b90a866b6d5d62a5f37fbfb3a1ee36cc70dd1","date":"2017-01-02T20:15:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rework fix for PR19460 - Use explicit bool as an extension instead.\n\nIn the previous fix I used a PMF type as a semi-safe bool type in C++03.\nHowever immediately after committing I realized clang offered explicit\nconversion operators as an extension. This patch removes the old fix and\nenables _LIBCPP_EXPLICIT using __has_extension instead.\n\nThis change also affects the following other classes, which have\n'_LIBCPP_EXPLICIT operator bool()'.\n\n* shared_ptr\n* unique_ptr\n* error_condition\n* basic_ios\n* function (already C++11 only)\n* istream::sentry\n* experimental::string_view.\n\nIn all of the above cases I believe it is safe to enable the extension, except\nin the experimental::string_view case. There seem to be some Clang bugs\naffecting the experimental::string_view conversion to std::basic_string. To\nwork around that I manually disabled _LIBCPP_EXPLICIT in that case.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290831 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66ee69932410b12ae0a33d337cb627f63bcb033c","date":"2017-01-02T21:09:16.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"win32: temporarily disable setting locale on 14+\n\nThe locale structures have been made opaque in CRT 14+.  This currently\nprevents building libc++ for Windows.  We can re-enable this in the\nfuture when we have replicated the structure to access the private field\nfor the name (unless there exists a better supported mechanism to query\nthe name of a locale given the locale_t).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290835 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b34b986bcc7e0991513213c295f3c9c82072a34","date":"2017-01-02T21:09:19.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: make cross-compiling to Windows work on Linux\n\nDisable the manifest bundling on Windows when cross-compiling on\nnot-Windows.  With this, it is possible to execute the link command from\nCMake which will use cmake to invoke the manifest tool to generate a\nmanifest and pass that to the linker.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"766e557e5aba9a26c63ca89bd8d7384a60b20c4c","date":"2017-01-02T21:40:17.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: tweak macros for Windows build\n\nMove the windows specific macro definitions for compiling c++ into the\ntarget.  Add a number of newer options that are necessary to properly\nbuild libc++ for windows.  This ensures that we do not accidentally\nautolink msvcprt (Microsoft's C++ runtime library), do not define linker\npragmas which are msvcprt specific, and do not accidentally encode the\nincorrect version of the msvc compatibility version.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290837 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ea38cde827cdb83134adb7eade860a9b77a486b6","date":"2017-01-02T21:58:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix configuring and building libc++ w/o an ABI library.\n\nTypically libc++ uses libc++abi or libcxxrt to provide the ABI and runtime bits\nof the C++ STL. However we also support building w/o an ABI library entirely.\nThis patch fixes building libc++ w/o an ABI library (and incorporates the\n`~type_info()` fix in D28211).\n\nThe main changes in this patch are:\n\n1) Add `-DLIBCXX_CXX_ABI=default` instead of using the empty string to mean \"default\".\n2) Fix CMake bits which treated \"none\" as \"default\" on OS X.\n3) Teach the source files to respect `-D_LIBCPP_BUILDING_HAS_NO_ABI_LIBRARY`.\n4) Define ~type_info() when _LIBCPP_BUILDING_HAS_NO_ABI_LIBRARY is defined.\n\nUnfortunately this patch doesn't help clean up the macro mess that we use to\nconfigure for different ABI libraries.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290839 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b07f988161d67aae5d81b3c4cc98c4844192251","date":"2017-01-02T22:17:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Introduce _LIBCPP_DEPRECATED_ABI_EXTERNAL_ERROR_CATEGORY_CONSTRUCTOR ABI option.\n\nCurrently libc++ compiles a special version of error_category()\ninto the dylib. This definition is no longer needed, and doesn't\nwork on Windows due to dllimport/dllexport semantics.\n\nFor those reasons this patch introduces an option to\ndisable/enable this definition. By default the definition\nis provided in ABI v1 except on windows. This patch\nalso addresses D28210.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290840 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"983f38443b0756e06628b962ed3fdb75c69cf69c","date":"2017-01-02T22:27:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r290839 - Fix configuring and building libc++ w/o an ABI library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290841 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b45121da64af8ae4cf8d4eca7dc3260c7f05307f","date":"2017-01-02T23:27:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of throw(...) spec with GCC in C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290845 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"408438494ba3628b07e8e63216367e8343cc1e98","date":"2017-01-02T23:54:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Re-implement LWG 2770 - Fix tuple_size with structured bindings.\n\nThis patch implements the correct PR for LWG 2770. It also makes the primary\ntuple_size template incomplete again which fixes part of llvm.org/PR31513.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290846 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cfc5515b9d463558331d716bb0edf899757a1853","date":"2017-01-03T01:18:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit r290839 - Fix configuring and building libc++ w/o an ABI library.\n\nThis patch re-commits a previous attempt to support building libc++ w/o\nan ABI library. That patch was originally reverted because:\n\n1) It forgot to teach the test suite about \"default\" ABI libraries.\n\n2) Some LLVM builders don't clear the CMake cache between builds. The previous\n   patch caused those builders to fail since their old cache entry for\n   LIBCXX_CXX_ABI=\"\" is no longer valid.\n\nThe updated patch addresses both issues. It works around (2) by adding\na hack to force the builders to update their cache entries. The hack will\nbe removed shortly once all LLVM builders have run.\n\nOriginal commit message\n-----------------------\n\nTypically libc++ uses libc++abi or libcxxrt to provide the ABI and runtime bits\nof the C++ STL. However we also support building w/o an ABI library entirely.\nThis patch fixes building libc++ w/o an ABI library (and incorporates the\n`~type_info()` fix in D28211).\n\nThe main changes in this patch are:\n\n1) Add `-DLIBCXX_CXX_ABI=default` instead of using the empty string to mean \"default\".\n2) Fix CMake bits which treated \"none\" as \"default\" on OS X.\n3) Teach the source files to respect `-D_LIBCPP_BUILDING_HAS_NO_ABI_LIBRARY`.\n4) Define ~type_info() when _LIBCPP_BUILDING_HAS_NO_ABI_LIBRARY is defined.\n\nUnfortunately this patch doesn't help clean up the macro mess that we use to\nconfigure for different ABI libraries.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290849 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d19237a460bec1ff2ca2ac15b2c1301ef13c4e6","date":"2017-01-03T02:00:31.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"threading_support: refactor for Win32 threading\n\nRefactor the header to allow us to implement alternate threading models\nwith alternate data structures.  Take the opportunity to clang-format\nthe area.  This will allow us to avoid re-declaring the interfaces for\nWin32 threading.  NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290850 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba161f403417f137e513079c918273d82244e490","date":"2017-01-03T02:00:33.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"system_error: provide a thread safe stringification for Windows\n\nProvide a strerror_r replacement for Windows.  This is needed to build\nlibc++ for Windows with threading.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290851 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1591b37ffb7d7495e06c1cccc71b69959d80326a","date":"2017-01-03T03:55:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix creating __generated_config on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290853 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"849b0c804c46be3ff707e6e85bddb21cf1e6e0df","date":"2017-01-03T04:23:50.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: remove now unused UNIX_CAT\n\nTHe previous change replaced the use of `cat` or `type` with a custom\npython script.  Remove the now unused command determining.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290856 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c79fa0442a890b755faf9208890cca530395c7d0","date":"2017-01-03T04:23:52.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"clang-format: tweak configuration\n\nUpdate the configuration to reflect the style more accurately.  Pointers\nare tied to the left.  Braces are split on classes/structs and\nfunctions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290857 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a53a02b0dacebf3498cb18f080842bc989138009","date":"2017-01-03T11:18:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Simplify CMake target for the __generated_config header\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290875 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d28b523b58077d6651d21cb0de3f1ef7daa7aa27","date":"2017-01-03T11:20:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update year to 2017\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290876 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e29d9ff93626b580868f826a5ece1deab7e4b03a","date":"2017-01-03T11:32:31.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fix testing of the externally-threaded library build\n after r290850\n\nBefore r290850, building libcxx with -DLIBCXX_HAS_EXTERNAL_THREAD_API=ON had two\nuses:\n  - Allow platform vendors to plug-in an __external_threading header which\n    should take care of the entire threading infrastructure of libcxx\n\n  - Allow testing of an externally-threaded library build; where the thread API\n    is declared using pthread data structures, and the implementation of this\n    API is provided as a separate library (test/support/external_threads.cpp)\n   and linked-in when running the test suite.\n\nr290850 breaks the second use case (pthread data structures are no longer\navailable). This patch re-stores the ability to build+test an\nexternally-threaded library variant on a pthread based system.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290878 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e262e7b914f3ab3180db531a78c870906e21efd0","date":"2017-01-03T12:59:50.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Add build/test support for the externally threaded libc++abi variant\n\nDifferential revision: https://reviews.llvm.org/D27576\n\nReviewers: EricWF\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290889 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e34f9d5ef356cced5f05d9a06a7e4de9442ddfc7","date":"2017-01-03T21:53:51.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"clean up use of _WIN32\n\nReplace the use of _WIN32 in libc++. Replace most use with a C runtime\ncheck _LIBCPP_MSVCRT or the new _LIBCPP_WIN32 to indicate that we are\nusing the Win32 API. Use a new _LIBCPP_WCHAR_IS_UCS2 to indicate that we\nare on an environment that has a short wchar_t.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290910 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3169d4a451aef7929cc5bc399d1a089e127868a4","date":"2017-01-04T00:53:31.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix recently introduced warnings emitted by MSVC.\n\nThese tests were using malloc()'s return value without checking for null,\nwhich MSVC's /analyze rightly warns about. Asserting that the pointer is\nnon-null both expresses the test's intention and silences the warning.\n\nFixes D27785.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290921 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dcac520ce456ffdd500af99a0a62bed8c4919004","date":"2017-01-04T00:53:41.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Strip trailing whitespace.\n\nFixes D27786.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290922 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c737d839520d95399d94c237f6ed9fb05ef5131","date":"2017-01-04T01:53:24.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Refactor bitscan64 check\n\nIntroduce a `_LIBCPP_HAS_BITSCAN64` macro to specify if the 64-bit\nvariant of the bitscan family of APIs is available.  This avoids\nduplicating the check in the support header.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290924 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8ddd2697aede8f9850eeebc1a36e34ecb56011d2","date":"2017-01-04T05:49:55.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: use more portable spelling for flag\n\nUse `CMAKE_LIBRARY_PATH_FLAG` instead of hard-coding it to -L.  This\nsilences a warning with cl which expects `/LIBPATH` instead.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290938 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1f2d77816bda0eea99e3c529631ff1c210970102","date":"2017-01-04T05:49:57.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"build: use the platform dependent library prefix/suffix\n\nUse the cmake variables to get the platform dependent values for the\nstatic library prefix and suffix, which can be different from the Unix\npreference for \"lib\", \".a\" (e.g. Windows uses \"\", \".lib\" respectively).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290939 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4508216a700701b3c45ac423a459e516862c1426","date":"2017-01-04T05:49:59.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"config: MSVC 19+ has unicode chars\n\nMSVC 19+ and clang-cl with emulation version >= 19.00 will provide\nchar{16,32}_t as builtin types.  Adjust the configuration accordingly.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290940 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1fbd97cfd5d9f85f7607b1563adf36ec2c8652a1","date":"2017-01-04T05:50:01.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"fix elast configuration on Windows targets\n\nA typo and missing header inclusion was obscured by the litany of user\ndefined literal warnings.  This fixes the detection of ELAST on windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290941 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e22af6b758563b4984895c1c99d6317748154e35","date":"2017-01-04T17:58:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the last bit of P0031: 'A Proposal to Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access' for C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@290976 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"06a0febbbd3f8cd776392c01f380b21dbb6b0dc2","date":"2017-01-04T22:38:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Re-implement LWG 2770 again: Fix tuple_size to work with structured bindings\n\nSummary:\nThis patch attempts to re-implement a fix for LWG 2770, but not the actual specified PR. \n\nThe PR for 2770 specifies tuple_size<T const> as only conditionally providing a `::value` member. However C++17 structured bindings require `tuple_size<T const>` to be complete only if  `tuple_size<T>` is also complete. Therefore this patch implements only provides the specialization `tuple_size<T CV>` iff `tuple_size<T>` is a complete type.\n\nThis fixes http://llvm.org/PR31513.\n\nReviewers: mclow.lists, rsmith, mpark\n\nSubscribers: mpark, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28222\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291019 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9c6b70a0afc86ebdcff070ca5020497df5d62889","date":"2017-01-04T22:43:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use C++11 static_assert in variant tests. Patch from Michael Park\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291021 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3df90c94a3ed6da4c0fceaa3f65529c3b2034f90","date":"2017-01-04T23:03:24.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0505: 'Wording for GB 50'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291028 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b3c8a28b4269bf9b268ab9f1dbd1db7d7d688f3","date":"2017-01-04T23:30:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix verify test on 32 bit systems\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291031 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d2247d0dada42d4a39f72675b06082f7a88bb02","date":"2017-01-04T23:35:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix private inheritance in C++03 tuple_size\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291032 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3589a8305a317cfa0757bc5f4136a7b93684d23","date":"2017-01-04T23:56:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[NFC] Rename _LIBCPP_TYPE_VIS_ONLY to _LIBCPP_TEMPLATE_VIS\n\nThe name _LIBCPP_TYPE_VIS_ONLY is no longer accurate because both\n_LIBCPP_TYPE_VIS and _LIBCPP_TYPE_VIS_ONLY expand to\n__attribute__((__type_visibility__)) with Clang. The only remaining difference\nis that _LIBCPP_TYPE_VIS_ONLY can be applied to templates whereas\n_LIBCPP_TYPE_VIS cannot (due to dllimport/dllexport not being allowed on\ntemplates).\n\nThis patch renames _LIBCPP_TYPE_VIS_ONLY to _LIBCPP_TEMPLATE_VIS.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291035 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a2e3d1e8adceaf3417a66cbdcbe86a8ac4bcbe54","date":"2017-01-05T00:04:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix Sphinx build error caused by bad indentation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291039 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46a0c2ef0cfee26a9c56d61763693966346a00e5","date":"2017-01-05T01:15:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix std::pointer_safety type in ABI v2\n\nIn the C++ standard `std::pointer_safety` is defined\nas a C++11 strongly typed enum. However libc++ currently defines\nit as a class type which simulates a C++11 enumeration. This\ncan be detected in valid C++ code.\n\nThis patch introduces an the _LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE ABI option.\nWhen defined `std::pointer_safety` is implemented as an enum type.\nUnfortunatly this also means it can no longer be provided as an extension\nin C++03.\n\nAdditionally this patch moves the definition for `get_pointer_safety()`\nout of the dylib, and into the headers. New usages of `get_pointer_safety()`\nwill now use the inline version instead of the dylib version. However in\norder to keep the dylib ABI compatible the old definition is explicitly\ncompiled into it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291046 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3dfeced41bc6e9307cd9156ec360e30f6223933","date":"2017-01-05T01:28:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR26961 - Add default constructor to std::pointer_safety struct.\n\nIn ABI v1 libc++ implements std::pointer_safety as a class type instead\nof an enumeration. However this class type does not provide\na default constructor as it should. This patch adds that default constructor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291059 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d0f20b2b080102af0087b730120cd7f1e4dba3c6","date":"2017-01-05T01:34:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix XPASS buildbot failure related to structured bindings\n\nThe test was previously set to XFAIL if __cpp_structured_bindings\nwasn't defined. However there are Clang 4.0 versions which do not\ndefine this macro but do provide structured bindings, which causes\nthe test to pass unexpectedly.\n\nThis patch changes the XFAIL to an UNSUPPORTED.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291060 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a60459a2255d0e0868bf8046432911928dd144a","date":"2017-01-05T02:55:10.000Z","author":{"name":"Richard Smith","email":"richard-llvm@metafoo.co.uk"},"message":"PR31540: install libc++abi headers into include/c++/v1 in build area.\n\nThis allows an in-build-area clang binary to find <cxxabi.h>.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291065 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85294a2fac3685600a8bc9823d0d7fb0a73ce9ea","date":"2017-01-05T03:57:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get test-suite configuring on Windows with clang-cl\n\nThis patch gets the test suite \"working\" on Windows, although\nnone of the tests pass.\n\nIn order to reuse the existing configuration, which uses UNIX\nstyle flags not accepted by clang-cl, this patch only works with clang++.\nWhen clang-cl is specified the test harness secretly looks for\nclang++ and then it configures it using the INCLUDE and LIB enviroment\nvariables.\n\nThis is very much a work in progress.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291072 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"976f3f3ea0330362eed46b3aa583e1f7b42653d3","date":"2017-01-05T05:18:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test suite configuration when no lit.site.cfg is available\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291081 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"856712bda23f0f9e6897df232b73591120e7ae69","date":"2017-01-05T06:06:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix PR31402:  map::__find_equal_key has undefined behavior.\n\nSummary:\nThis patch fixes llvm.org/PR31402 by replacing `map::__find_equal_key` with `__tree::__find_equal`, which has already addressed the same undefined behavior.\n\nUnfortunately I haven't been able to write a test case which causes the UBSAN diagnostic mentioned in the bug report. I can write tests which exercise the UB but for some reason they do not cause UBSAN to fail. Any help writing a test case would be appreciated.\n\n\nReviewers: mclow.lists, vsk, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28131\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291087 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"20f0c0f3a6be778f56e7084d9897c442302d5fdc","date":"2017-01-05T08:07:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get tests linking on Windows.\n\nThis patch is a temporary hack to get the tests passing on\nWindows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"704ed27a819036549a9bb5c125c1a4b670d251de","date":"2017-01-05T09:03:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use C++11 static_assert in variant tests. Patch from Michael Park\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291093 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dceaa0e352e6db5defe1f63011c80550bc92037a","date":"2017-01-05T09:06:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add gcc-[56] clang-3.[678] to list of XFAILS for variant tests. Patch from Michael Park\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291094 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3451a65e1b3e4bd5751493a31920d99ed1ed00c5","date":"2017-01-05T17:54:45.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"thread_support: split out {,non-}recursive mutex\n\nSplit out the recursive and non-recursive mutex.  This split is needed\nfor platforms which may use differing types for the two mutex (e.g.\nWin32 threads).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291145 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa6429dc4198ca00feb21b449a03255988b3cf9a","date":"2017-01-05T21:22:22.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"typeinfo: style adjustments for adding MS ABI RTTI\n\nThis is motivated by adding a third RTTI scheme to libc++.  Split out\nthe two forms of the itanium RTTI representation.  This is based on\nsuggestions from Eric Fiselier.  NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291174 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3de2448e9f491e5651f203a27e619b83af94807","date":"2017-01-05T23:25:44.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"config_elast: fix typo (NFC)\n\nMissed the original typo which was duplicated.  NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291192 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66134e8a5f7fc172dcc9124349047bb793affbaa","date":"2017-01-06T20:05:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Cleanup and document <__threading_support>\n\nSummary:\nThis patch attempts to clean up the macro configuration mess in `<__threading_support>`, specifically the mess involving external threading variants. Additionally this patch adds design documentation for `<__threading_support>` and the configuration macros it uses.\n\nThe primary change in this patch is separating the idea of an \"external API\" provided by `<__external_threading>` and the idea of having an external threading library. Now `_LIBCPP_HAS_THREAD_API_EXTERNAL` means that libc++ should use `<__external_threading>` and that the header is expected to exist.  Additionally the new macro `_LIBCPP_HAS_THREAD_LIBRARY_EXTERNAL` is now used to configure for using an \"external library\"  with the default threading API.\n\nReviewers: compnerd, rmaprath\n\nSubscribers: smeenai, cfe-commits, mgorny\n\nDifferential Revision: https://reviews.llvm.org/D28316\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291275 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8eb066a1066b286c66109750cd7a91ed5a7693e7","date":"2017-01-06T20:58:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace _LIBCPP_HAS_NO_DELETED_FUNCTIONS with _LIBCPP_CXX03_LANG\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291278 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5170d7d88f35a757f5fa89b09238e2d729fd22b4","date":"2017-01-06T21:42:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add _LIBCPP_COMPILER_[CLANG|GCC|MSVC|IBM] macros.\n\nThis patch refactors the compiler detection done in `__config` by creating a\nset of `_LIBCPP_COMPILER_<TYPE>` macros. The goal of this patch is to make\nit easier to detect what compiler is being used outside of `__config`.\n\nAdditionally this patch removes workarounds for GCC in `__bit_reference`. I\ntested GCC 4.8 and 4.9 without the workaround and neither seemed to need it\nanymore.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1572c468b3d1a6cc096ba802c69bcc7decc87adc","date":"2017-01-06T23:15:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix breakage caused when _LIBCPP_HAS_THREAD_API_PTHREAD is manually defined\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bab7b41d2e159fdd36d020dc9889ce30ef77141a","date":"2017-01-06T23:59:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Configure default ABI library as NONE on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291306 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"afd7cc87ce65d8763ca249798f4f8acbeede67d9","date":"2017-01-07T00:01:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix linking of DLL's on Windows\n\nOn Windows the runtime search path for DLL's is the same as PATH.\nThis patch changes the test suite to add the libc++ build directory\nto the runtime PATH.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291309 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5616ee5bac5f74c82366121a45d65037a70cad13","date":"2017-01-07T00:10:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get all tuple tests passing on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291311 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"51eb1be9ecd834b27ffa5f3447218de3af4a34e9","date":"2017-01-07T01:12:15.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Strip trailing whitespace. NFC, no code review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291322 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32ff3279eb04981ad01bb386a1c1407738cfa40e","date":"2017-01-07T02:43:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add _LIBCPP_ABI_[ITANIUM|MICROSOFT] macros.\n\nThis patch adds a libc++ configuration macro for the ABI we\nare targeting, either Itanium or Microsoft. For now we configure\nfor the Microsoft ABI when on Windows with a compiler that defines\n_MSC_VER. However this is only temporary until Clang implements\nbuiltin macros we can use.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2342c11c50e53c34dd1f5137513d96e9eba9eb3b","date":"2017-01-07T02:45:35.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Correct macro name in documenation\n\nThe macro is named `_LIBCPP_TEMPLATE_VIS`, not `_LIBCPP_TEMPLATE_ONLY`.\nNo functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc1d780758e3759212d452e7d71da75bb3b2c076","date":"2017-01-07T02:48:30.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"thread: implement sleep_for on Windows\n\nWindows does not provide an implementation of `nanosleep`.  Round up the\ntime duration to the nearest ms and use `Sleep`.  Although this may\nover-sleep, there is no hard real-time guarantee on the wake, so\nsleeping a bit more is better than under-sleeping as it within the\nspecification.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291331 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"32b19c3d9fdde3d93288593ae7492ec837e87967","date":"2017-01-07T03:01:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Tolerate presence of __deallocate macro\n\nSummary:\nOn Windows the identifier `__deallocate` is defined as a macro by one of the Windows system headers. Previously libc++ worked around this by `#undef __deallocate` and generating a warning. However this causes the WIN32 version of `__threading_support` to always generate a warning on Windows. This is not OK.\n\nThis patch renames all usages of `__deallocate` internally as to not conflict with the macro.\n\nReviewers: mclow.lists, majnemer, rnk, rsmith, smeenai, compnerd\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28426\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291332 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"678eadd13f9ee6e0d5893eb1be4aa7a505c51611","date":"2017-01-07T03:07:45.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"provide Win32 native threading\n\nAdd an implementation for the Win32 threading model as a backing API for\nthe internal c++ threading interfaces.  This uses the Fls* family for\nthe TLS (which has the support for adding termination callbacks),\nCRITICAL_SECTIONs for the recursive mutex, and Slim Reader/Writer locks\n(SRW locks) for non-recursive mutexes.  These APIs should all be\navailable on Vista or newer.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291333 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5bea45dea17c136ac8134296af12899f521beea4","date":"2017-01-07T05:13:32.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"system_error: correct ELAST emulation on Windows\n\nELAST should point to the last valid error string value.  However,\n`_sys_nerr` provides the number of elements in the errlist array.  Since\nthe index is 0-based, this is off-by-one.  Adjust it accordingly.\n\nThanks to David Majnemer for catching this!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291336 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4d15e8ac48508218e4427a21dbe79509856a2e98","date":"2017-01-07T06:09:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Explicitly specify MSVC mangling of iostream globals. Patch from Dave Lee\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34777546b99b79c9ff9a4d7ab11672cbe4270fc9","date":"2017-01-07T09:53:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Ensure Sleep(...) isn't passed the value 0 on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1da56949832354c915ad1f22bd947bf84c87ae94","date":"2017-01-07T10:04:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Implement terminate(), unexpected() and uncaught_exceptions() on Windows\n\nSummary:\nThis patch implements the following functions on Windows by forwarding to the MSVCRT:\n\n* `get_terminate()`\n* `set_terminate()`\n* `terminate()`\n* `set_unexpected()`\n* `get_unexpected()`\n* `unexpected()`\n* `uncaught_exception()`\n\n* `uncaught_exceptions()`\n\nReviewers: compnerd, rnk, majnemer, smeenai\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28442\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291343 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"09a03c6b1f140794b98cb8d82230a1f314e0a08a","date":"2017-01-07T10:19:24.000Z","author":{"name":"Michael Park","email":"mpark@apache.org"},"message":"Added \"Michael Park\" to `CREDITS.TXT`.\n\nSummary: Test commit + give myself credit.\n\nReviewers: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D28431\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291344 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c60e8fcdcd6b463a66929120b0d37ff2d1412811","date":"2017-01-07T11:27:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace identifiers called `__out` because Windows.h #defines it.\n\nWindows is greedy and it defines the identifier `__out` as a macro.\nThis patch renames all conflicting libc++ identifiers in order\nto correctly work on Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da39f1bc799bad3a6701b9c4eda52120939e3d8c","date":"2017-01-09T10:38:56.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Fix externally-threaded shared library builds after r291275.\n\nNeed to allow unresolved symbols in the dylib. This was previously done for\nLIBCXX_HAS_EXTERNAL_THREAD_API, but we have since split that into two with\nLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY being the externally-threaded variant.\n\nAlso a minor CMakeLists.txt cleanup.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291433 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d32d2f5a1f39d4cae9469645faa74b647698001","date":"2017-01-09T18:07:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0403R1 - 'Literal suffixes for basic_string_view'. Requires clang 4.0 (specifically, r290744)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291457 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac7fc6cf28ac6fb256e46b7e815cf78fdce53905","date":"2017-01-09T19:21:48.000Z","author":{"name":"Bruno Cardoso Lopes","email":"bruno.cardoso@gmail.com"},"message":"[Chrono][Darwin] Make steady_clock use CLOCK_UPTIME_RAW\n\nUse CLOCK_UPTIME_RAW in case clock_gettime is available on Darwin.\n\nOn Apple platforms only CLOCK_UPTIME_RAW or mach_absolute_time are able\nto time functions in the nanosecond range. Thus, they are the only\nacceptable implementations of steady_clock.\n\nDifferential Revision: https://reviews.llvm.org/D27429\n\nrdar://problem/29449467\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291466 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b78198fc5a45c49ce5b2defc59c579a0884ca58","date":"2017-01-09T20:29:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added XFAIL for the apple versions of clang as well\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291475 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fe92cc0c9d18f61723ac89b5ccfd307ed7ecbca","date":"2017-01-09T20:29:35.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Move _PairT declaration out of __hash_combine to avoid warning under C++98\n\nSummary:\nSome parts of the FreeBSD tree are still compiled with C++98, and until\nrL288554 this has always worked fine.  After that, a complaint about the\nnewly introduced local _PairT is produced:\n\n    /usr/include/c++/v1/memory:3354:27: error: template argument uses local type '_PairT' [-Werror,-Wlocal-type-template-args]\n        typedef __scalar_hash<_PairT> _HashT;\n                              ^~~~~~\n    /usr/include/c++/v1/memory:3284:29: error: template argument uses local type '_PairT' [-Werror,-Wlocal-type-template-args]\n        : public unary_function<_Tp, size_t>\n                                ^~~\n    /usr/include/c++/v1/memory:3356:12: note: in instantiation of template class 'std::__1::__scalar_hash<_PairT, 2>' requested here\n        return _HashT()(__p);\n               ^\n\nAs far as I can see, there should be no problem moving the _PairT\nstruct to just before the __hash_combine() function, which fixes this\nparticular warning.\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits, emaste\n\nDifferential Revision: https://reviews.llvm.org/D28472\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291476 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3e767754031663427d66f57266ade5a20333aad","date":"2017-01-09T22:32:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Swap two lines in __mutex_base. On systems with high clock rates, we could mistakenly return no_timeout when a mutex had timed out if we got a tick between these two lines.  Thanks to Brian Cain for the bug report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291492 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7ebce14ad564c31f0bfa4aae116d88ee2688957a","date":"2017-01-09T23:07:12.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Adorn __call_once_proxy with `inline` and `_LIBCPP_INLINE_VISIBILITY`\n\nAs per discussion with mclow and EricWF on irc, this is small and\nsimple enough to deserve being inlined.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291497 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"174ff71839038b1443f4116b9bad85a48fe3935d","date":"2017-01-09T23:41:38.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[cmake] Obtain LLVM_CMAKE_PATH from llvm-config if available\n\nUse the new --cmakedir option to obtain LLVM_CMAKE_PATH straight from\nllvm-config. Fallback to local reconstruction if llvm-config does not\nsupport this option.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291508 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7dbfec9d32c452ad45a61589063c96a026ea229","date":"2017-01-10T00:51:02.000Z","author":{"name":"Bruno Cardoso Lopes","email":"bruno.cardoso@gmail.com"},"message":"[Chrono][Darwin] Include header for gettimeofday\n\nFollowup on r291466 and include the proper header. This fixes:\nhttps://build.chromium.org/p/chromium.fyi/builders/ClangToTMac/builds/12620/steps/gclient%20runhooks/logs/stdio\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291517 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d3240888f4ac6d4a00a67f982e6ae9b26953409","date":"2017-01-10T04:18:47.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"threading_support: delete the critical section\n\nAlthough the CriticalSection itself doesnt need to be destroyed, there\nmay be debug data associated with it.  Plug a possible small leak.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291536 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47b1cefa76d219a81e0436dc5c8de03f9c6f557a","date":"2017-01-10T08:48:48.000Z","author":{"name":"Roger Ferrer Ibanez","email":"roger.ferreribanez@arm.com"},"message":"Mark tests as unsupported under libcpp-no-exceptions\n\nThe destructor of std::promise needs to construct a std::future_error\nexception so it calls std::make_exception_ptr. But under\nlibcpp-no-exceptions this will trigger an abort.\n\nDifferential Revision: https://reviews.llvm.org/D27614\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291550 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6c0b90773292cd20f343242cd4806b8232b6837","date":"2017-01-10T16:59:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix up some mismatched SFINAE conditionsin shared_ptr; some used '_Tp*', others used 'element_type *'. Today, they're the same - but soon they won't be. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291572 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd7c88461bf08a50036700100def7d555c20da48","date":"2017-01-10T18:40:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Qualify some type names that I thought were fine, but some of the bots don't like.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291580 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"39441fe9f00a58ffc2fdff92a4b0e8a280a5f444","date":"2017-01-10T19:51:17.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake][libcxx] Move Python check to main CMake file\n\nThis is to make sure this check is called even when building as\npart of LLVM runtimes when we are doing standalone but not out of\ntree build.\n\nDifferential Revision: https://reviews.llvm.org/D28392\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291592 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"94fc5a96f58071703d81d14690094dcd266a5e17","date":"2017-01-11T00:56:10.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake][libcxx] Do not rely on the existence of c++abi or unwind targets\n\nThere is no guaranteed order in which CMake files for individual\nruntimes are invoked and therefore we cannot rely on existence of\ntargets defined in other runtimes. Use the new HAVE_<name> options\ninstead in those cases.\n\nDifferential Revision: https://reviews.llvm.org/D28391\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c91834411b322ab360eb1f193f489327e719652","date":"2017-01-11T23:11:40.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake][libcxx] Check that we have libcxxabi before using it\n\nWhen doing standalone build, check that we actually have libcxxabi\nbefore attempting to use it.\n\nDifferential Revision: https://reviews.llvm.org/D28580\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291723 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"010074a5961833f18e81881f2627aa4a0e1f37e4","date":"2017-01-11T23:56:29.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Revert \"[CMake][libcxx] Check that we have libcxxabi before using it\"\n\nThis reverts commit 8c91834411b322ab360eb1f193f489327e719652.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291726 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b81ce92008ac80db6e3ebf41c26d59e560d76833","date":"2017-01-11T23:56:31.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Revert \"[CMake][libcxx] Do not rely on the existence of c++abi or unwind targets\"\n\nThis reverts commit 94fc5a96f58071703d81d14690094dcd266a5e17.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"075841019152022bdc2a43353e301f075355d94f","date":"2017-01-11T23:56:33.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Revert \"[CMake][libcxx] Move Python check to main CMake file\"\n\nThis reverts commit 39441fe9f00a58ffc2fdff92a4b0e8a280a5f444.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ce921fa9622a556ab37ff1d6d7368853a262a916","date":"2017-01-12T04:37:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0426: Constexpr for std::char_traits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291741 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d7046177930a87cab738862b3f4bec734818fe2e","date":"2017-01-12T05:40:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"disable use of __builtin_memcmp temporarily to get the tests passing again\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291742 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c84cd4a0908bb1bc2b09c3cbe1bf4c374e8e447e","date":"2017-01-12T06:22:36.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Pair _aligned_malloc with _aligned_free\n\nAttempting to pair an `_aligned_malloc` with a regular free causes heap\ncorruption. Pairing with `_aligned_free` is required instead.\n\nMakes the following libc++ tests pass on Windows:\n\n```\nstd/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t.pass.cpp\nstd/language.support/support.dynamic/new.delete/new.delete.array/new_align_val_t_nothrow.pass.cpp\nstd/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t.pass.cpp\nstd/language.support/support.dynamic/new.delete/new.delete.single/new_align_val_t_nothrow.pass.cpp\n```\n\nDifferential Revision: https://reviews.llvm.org/D28512\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c4d3afdfadc8caa537621ea508b23e328b0aaafc","date":"2017-01-12T16:25:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add new macro _LIBCPP_BUILTIN_MEMCMP_ISCONSTEXPR to use in std::char_traits. \nThis tells whether or not the builtin function __builtin_memcmp is constexpr.\nOnly defined for clang 4.0 and later, and not true for any shipping version of Apple's clang.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291773 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a147b7d648764d780dab5c147f6ed457e90ba2d","date":"2017-01-13T18:03:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"Rework fix for PR19460 - Use explicit bool as an extension instead.\"\n\nThis reverts commit 3a1b90a866b6d5d62a5f37fbfb3a1ee36cc70dd1.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291921 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1669d3dac5597466fc8754537013dce8aa8843cd","date":"2017-01-13T18:25:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix merge conflict caused by r291921\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291925 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ccb58d0a2c539a5cec75a30f09243fd3064939a6","date":"2017-01-13T18:29:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update version to 5.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291928 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebaf7dab14c3bf1c4f995d9ad1199b6c2784a8ca","date":"2017-01-13T22:02:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add _LIBCPP_DIAGNOSE_WARNING and _LIBCPP_DIAGNOSE_ERROR macros.\n\nClang recently added a `diagnose_if(cond, msg, type)` attribute\nwhich can be used to generate diagnostics when `cond` is a constant\nexpression that evaluates to true. Otherwise no attribute has no\neffect.\n\nThis patch adds _LIBCPP_DIAGNOSE_ERROR/WARNING macros which\nuse this new attribute. Additionally this patch implements\na diagnostic message when a non-const-callable comparator is\ngiven to a container.\n\nNote: For now the warning version of the diagnostic is useless\nwithin libc++ since warning diagnostics are suppressed by the\nsystem header pragma. I'm going to work on fixing this.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291961 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eaf292013defd65d96984e12733f67cb35e05561","date":"2017-01-13T22:42:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Diagnose non-const-callable hash functions and comparators\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291969 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ed767588b00ce6db464924cd9c2817be67f8149","date":"2017-01-13T23:45:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Diagnose invalid memory orderings in <atomic>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291976 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfcceeeadf615ac6ae1b003c42c97f53dc5c0777","date":"2017-01-14T01:33:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove unused parameters in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291986 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cdffd529471b538f75a201002eb6a3bf1335483a","date":"2017-01-14T01:58:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't force use of lld in tests on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291987 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5904a27648ae30cd25d1a41d11b9be298198bb3","date":"2017-01-14T03:35:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't dump llvm-config --cmakedir output if command fails.\n\nThis patch adjusts the out-of-tree CMake configuration so that\nthe stderr output is ignored when an old llvm-config is found\nthat doesn't support --cmakedir.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291991 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50ca3248fb8ab469698329334f8de1f456d1713f","date":"2017-01-14T04:27:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use __is_identifier to detect Clang extensions instead of __has_extension.\n\nWhen -pedantic-errors is specified `__has_extension(<feature>)` is always\nfalse when it would otherwise be true. This causes C++03 <atomic> to break\nalong with other issues.\n\nThis patch avoids the above problem by using __is_identifier(...) instead since\nit is not affected by -pedantic-errors. For example instead of checking for\n__has_extension(c_atomics) we now check `!__is_identifier(_Atomic)`, which\nis only true when _Atomic is not a keyword provided by the compiler.\n\nThis patch applies similar changes to the detection logic for __decltype and\n__nullptr as well.\n\nNote that it does not apply this change to the C++03\n`static_assert` macro since -Wc11-extensions warnings generated by expanding\nthat macro will appear in user code, and will not be suppressed as part of a\nsystem header.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291995 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f19b75f913b0540dcaaf97ad71643a532f47eb7a","date":"2017-01-14T05:43:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Tweak .clang-format configuration.\n\nRemove the custom configuration options for brace wrapping. They\ndon't work well for inline functions or type-traits classes.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@291998 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8d2a5ad70b4a4411c82e7f2da5c2accd6b30cc91","date":"2017-01-14T05:55:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark 'constexpr char_traits' as complete.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292000 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fdd3c91b5ff4275feaf2b1a9cc09caf4784e58be","date":"2017-01-14T06:06:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] [CMake] Link with /nodefaultlibs on Windows\n\nSummary:\nThis patch attempts to fix the libc++ build/link so that it doesn't use an default C++ libraries on Windows.  This is needed to prevent linking to MSVC's STL library.\n\nAdditionally this patch changes libc++ so that it is always linked with the non-debug DLL's (e.g. `/MD`). This is needed so that the test suite can correctly link the same libraries without needing to know which configuration `c++.dll` was linked with.\n\n\nReviewers: compnerd, rnk, majnemer, kimgr, awson, halyavin, smeenai\n\nSubscribers: cfe-commits, mgorny\n\nDifferential Revision: https://reviews.llvm.org/D28441\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292001 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"157fd3412424e98b313d90862ca1f0186d0b03d0","date":"2017-01-14T07:54:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++][CMake] Use debug MSVC runtimes when libc++ is built in debug mode\n\nSummary: This patch allows libc++ to be built against the debug MSVC runtimes instead of just the release ones.\n\nReviewers: rnk, majnemer, compnerd, smeenai\n\nSubscribers: mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28725\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292006 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"78463e748debee3e6a72d2b8217df53a2b0666d7","date":"2017-01-14T10:22:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix copy-paste errors in r292001\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292010 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"30d12e372adb7a20580c913f4ef68189b4833c58","date":"2017-01-14T10:27:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix Windows try_lock implementation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292011 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"06192cb7749a2a49f56a70a110b59e40c71219c3","date":"2017-01-14T10:31:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark test as UNSUPPORTED on Windows since it hangs forever\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292012 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29d52a28e49ae1aca6e16ea8b1dd3c9c016f2546","date":"2017-01-14T11:35:15.000Z","author":{"name":"Jonas Hahnfeld","email":"Hahnfeld@itc.rwth-aachen.de"},"message":"Fix last_write_time tests for filesystems that don't support negative and very large times\n\nSeems to be the case for NFS.\n\nOriginal patch by Eric Fiselier!\nDifferential Revision: https://reviews.llvm.org/D22452\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292013 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"433a39703bfba58b28e5aad249c1045a32c37707","date":"2017-01-14T19:11:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix thread creation on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292022 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"543e83bfc7be43857c2e1c7ae7f565a58bcec447","date":"2017-01-14T20:19:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt two at fixing threading on Windows\n\nReviewers: compnerd\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28735\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292027 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5fd0d08f722328511d59c2c2170b7b846b83b437","date":"2017-01-14T20:21:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix demangle.h on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292028 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5cd8a36772782775e0ad4cd4c09133612c71b1e3","date":"2017-01-14T20:25:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL native handle tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292029 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f620d224b7415be8056a8850824c49ebfa69673c","date":"2017-01-15T00:06:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around python3 bytes vs str in libc++ test config\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292038 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3508e7a87750fe8ff30d44a9154e36509b0ceb8f","date":"2017-01-16T00:33:07.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Reland \"[CMake][libcxx] Move Python check to main CMake file\"\n\nThis relands commit r291728.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292084 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c59c3172dc3aba926fb490d189717b5021b31acc","date":"2017-01-16T00:33:09.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Reland \"[CMake][libcxx] Do not rely on the existence of c++abi or unwind targets\"\n\nThis relands commit r291727.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292085 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6948dbedcaaea1484e1dc2c571fbf2ca193b7277","date":"2017-01-16T00:33:11.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"Reland \"[CMake][libcxx] Check that we have libcxxabi before using it\"\n\nThis relands commit r291726.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292086 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d25c997c77d689cac28f44bc7ef379ade7a04ffe","date":"2017-01-16T03:02:10.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the missing constexpr stuff in <array>. Fixes PR#31645.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292091 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b894a0b46d21d8c95703ae1221a3185434acf9e5","date":"2017-01-16T08:14:25.000Z","author":{"name":"Michael Park","email":"mpark@apache.org"},"message":"Added a workaround for a `-fdelayed-template-parsing` bug.\n\nSummary:\nThere seems to be an additional bug in `-fdelayed-template-parsing`\nsimilar to\nhttp://llvm.org/viewvc/llvm-project?view=revision&revision=236063.\n\nThis is a workaround for it for <variant> to compile with `clang-cl` on Windows.\n\nReviewers: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D28734\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a1d7d2ffb8381b96538cff556481d792dd8d93a0","date":"2017-01-16T12:19:54.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Don't assume __libcpp_thread_t is an integral type\n\nWe have already refactored the underlying platform thread type into\n__libcpp_thread_t, but there are few places in the source where we\nstill assume it is an integral type.\n\nThis patch refactores those points back into the threading API.\n\nDifferential revision: https://reviews.llvm.org/D28608\n\nReviewers: EricWF\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"49a9e0c64cfdaff372b3fa2ec62df3f1b8241811","date":"2017-01-16T12:44:08.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Improve design documentation for the external-thread-library\n  configuration\n\nNFC.\n\nDifferential revision: https://reviews.llvm.org/D28610\n\nReviewers: EricWF\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292108 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24872f4e351dfc336dc6507363734b07f6954bb3","date":"2017-01-16T13:13:01.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"[libcxx] Follow-up to r292107\n\nI've missed a couple of updates. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292109 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47a547e4383b86716cb3ba2ded0ccbf2e6952cd7","date":"2017-01-16T19:52:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make sym_check python 3 compatible\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292152 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bde2871b62190f3423a2acbfd334be93782a1889","date":"2017-01-16T20:47:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve CMake and LIT support for Windows\n\nThis patch contains multiple cleanups and fixes to better support building on\nWindows.\n\n* [Test] Fix handling of library runtime search paths by correctly adding them\n  to the PATH variable when running the tests.\n\n* [Test] Don't explicitly force \"--target=i686-pc-windows\" when running the\n  test suite. Clang++ seems to deduce the correct target.\n\n* [Test] Fix `.sh.cpp` tests on Windows by properly escaping flags used in\n  shell commands. Specifically windows style paths which included spaces\n  were causing these tests to fail.\n\n* [CMake] Add \"vcruntime\" to the list of supported C++ ABI libraries in CMake, and\n  teach the test suite how to handle it. For now libc++ defaults to using\n  \"vcruntime\" on Windows except when libc++abi is in tree; That is probably\n  a bug and should be changed to always use vcruntime, at least for now.\n\n* [Misc] Move the \"c++-build\" include directory to the libc++ binary dir\n  instead of the top level project dir and rename it \"c++build\". This is just\n  misc cleanup. Libc++ shouldn't be creating internal build files and directories\n  at the top-level projects root.\n\n* [Misc] Build type_info's destructor when building for MSVC. This is a temporary\n  work around to prevent link errors until we have a proper type_info\n  implementation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292157 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dae39608bbfe0d0bdea05e041a77df1e3e99e48b","date":"2017-01-16T21:01:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Introduce _LIBCPP_EXTERN_VIS to fix __libcpp_debug_function link errors\n\nSummary: On Windows tests that use `_LIBCPP_ASSERT` fail to link because the assertion handler function isn't correctly exported from the libc++ dylib. This patch fixes the dll import/export issues by introducing a new visibility macro `_LIBCPP_EXTERN_VIS` for use on external variables.\n\nReviewers: compnerd, smeenai, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28728\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d24e9101dbc3dd1416dbff01d5410920550aca4","date":"2017-01-16T21:15:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix std::tuples EBO when targeting the MSVC ABI.\n\nMSVC/clang-cl doesn't do a full EBO unless __declspec(empty_bases)\nis applied to the derived type. This causes certain tuple tests\nto fail.\n\nThis patch adds the empty_bases attribute to __tuple_impl in order\nfor tuple to fully provide the EBO.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292159 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebb98392304940f2231e06dbad068c17291a1509","date":"2017-01-17T00:32:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename new_handler in tests to avoid conflicts with MSVC symbols.\n\nOn Windows the header new.h defines \"new_handler\" in the global\nnamespace.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292177 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2e5a364ebc2099b620219acc2af4df2f7babd880","date":"2017-01-17T01:16:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add warning messages to buildit/testit about their upcoming removal\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292181 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8993759ae957800a061e60d1809482efb03e3ba3","date":"2017-01-17T02:46:33.000Z","author":{"name":"Kevin Hu","email":"hxy9243@gmail.com"},"message":"[Test patch] Inline hot functions in libcxx shared_ptr\n\nMoves hot functions such as atomic add into the memory header file\nso that they can be inlined, which brings performance benefits.\n\nPatch by Kevin Hu, Aditya Kumar, Sebastian Pop\n\nDifferential Revision: https://reviews.llvm.org/D24991\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292184 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9133eadd600f539e0719a23a8848504e4809c70c","date":"2017-01-17T03:05:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix DLL build by removing _LIBCPP_FUNC_VIS from member of class marked dllexport\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292185 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a7ae303de36dfa1e0a165c52cd073c51dc85e8cb","date":"2017-01-17T03:16:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add ABI option to remove recently inlined __shared_count functions from the library.\n\nIn order to allow inlining of previously out-of-line functions without an ABI break\nlibc++ provides legacy definitions in the dylib that old programs can\ncontinue to use. Unfortunatly Windows link.exe detects this hack and diagnoses the duplicate\ndefinitions.\n\nThis patch disable the duplicate definitions on Windows by adding an ABI option\nwhich disables all \"legacy out-of-line symbols\"\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292190 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"37b2be9c5810d3f43146f7d20522cac2db32e7a0","date":"2017-01-17T22:10:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix std::string assignment ambiguity from braced initializer lists.\n\nWhen support for `basic_string_view` was added to string it also\nadded new assignment operators from `basic_string_view`. These caused\nambiguity when assigning from a braced initializer. This patch fixes\nthat regression by making the basic_string_view assignment operator\nrank lower in overload resolution by making it a template.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292276 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c8fc92cc09a98fde9087b3270259e4444251a5a2","date":"2017-01-17T22:24:45.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Don't ask whether Incomplete& can be assigned to.\n\nThis is the subject of an active NB comment. Regardless of what the Working\nPaper currently says, asking this question is morally wrong, because the\nanswer can change when the type is completed. C1XX now detects such\nprecondition violations and complains about them; perhaps Clang should too.\n\nFixes D28591.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292281 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e39559043acf4a24f1f7f321c39b1ad48bd6c08","date":"2017-01-17T23:27:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't strip -m32 from the user provide command line flags. This fixes the compiler-rt 32 bit sanitizer build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292291 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b30568b31303da9e8b633d0405c12d404a01aee","date":"2017-01-17T23:41:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix type_info's constructor by making it explicit again.\n\nIn recent changes type_info's private constructor was\naccidentally made implicit. This patch fixes that.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292294 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08305aaf6e3012b4a3080ea84d966d0dfdc736ad","date":"2017-01-18T00:05:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow sym_diff.py to report non-zero for non-breaking ABI changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292297 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6fbac40a3018d03f79c22e143b5805e01f20857f","date":"2017-01-18T01:48:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add support for running our test suite against MSVC's STL\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292326 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"44dbdb4b855ce97be05efb4ceece7399b3830ffc","date":"2017-01-18T03:57:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"More configuration changes for running the test suite against MSVC's STL\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292337 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6fb649095756392143a631f2ab67de2a4d9ff4ed","date":"2017-01-18T05:34:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get more std::string _LIBCPP_DEBUG tests passing\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292342 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2b48899a51b67765b506467d2f199145917a92a","date":"2017-01-18T05:48:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix filesystem::path assignment from {}\n\nAdding `path::operator=(string_type&&)` made the expression `p = {}`\nambiguous. This path fixes that ambiguity by making the `string&&`\noverload a template so it ranks lower during overload resolution.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292345 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55c5f6be8df4e4a6bc6799ec162b8e976bee083a","date":"2017-01-18T06:08:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add mechanism to override LIT options using enviroment variables\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292346 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3dcf50c4b24cb117e10968288034fcbc5b0e5ce2","date":"2017-01-18T06:24:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"Add mechanism to override LIT options using enviroment variables\"\n\nThe buildbots currently depend on the old configuration. I'll recommit\nonce Zorg is fixed and reset\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d4bd61d7836006db2d5d811a864228ffc18083d","date":"2017-01-18T07:56:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Re-add mechanism to override LIT options using enviroment variables.\n\nThere was a dumb mistake in the original commit that has now\nbeen fixed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292351 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3564b92bcaa73fefde1cf5f7e159069f66f797c","date":"2017-01-18T20:09:56.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC warnings C4127 and C6326 about constants.\n\nMSVC has compiler warnings C4127 \"conditional expression is constant\" (enabled\nby /W4) and C6326 \"Potential comparison of a constant with another constant\"\n(enabled by /analyze). They're potentially useful, although they're slightly\nannoying to library devs who know what they're doing. In the latest version of\nthe compiler, C4127 is suppressed when the compiler sees simple tests like\n\"if (name_of_thing)\", so extracting comparison expressions into named\nconstants is a workaround. At the same time, using std::integral_constant\navoids C6326, which doesn't look at template arguments.\n\ntest/std/containers/sequences/vector.bool/emplace.pass.cpp\nReplace 1 == 1 with true, which is the same as far as the library is concerned.\n\nFixes D28837.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292432 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16e2ba19dfffdcf9bba202eb8a27fd79e3d15303","date":"2017-01-18T20:10:25.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix comment typos, strip trailing whitespace.\n\nNo functional change, no code review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292434 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa0c167446fbc56f35511534b31d9414ce82b648","date":"2017-01-18T22:19:14.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Add msvc_stdlib_force_include.hpp.\n\nNo functional change; nothing includes this, instead our test harness\ninjects it via the /FI compiler option.\n\nNo code review; blessed in advance by EricWF.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292443 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"56257d4918afea566180a8f1d1c0d52da06d3c93","date":"2017-01-19T15:30:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark two of the TS implementations as 'in progress'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292490 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e70e03c7f6e7be329ab7edcf28f4cdf2ff4aad7c","date":"2017-01-19T23:48:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adjust msvc_stdlib_force_include.hpp to handle clang++\n\nSummary: This patch adjusts the newly added `msvc_stdlib_force_include.hpp` so that it also works when used with `clang++`.\n\nReviewers: STL_MSFT\n\nReviewed By: STL_MSFT\n\nDifferential Revision: https://reviews.llvm.org/D28917\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e013dacf4a4217343f82b2b5fddb2428d26572c5","date":"2017-01-20T00:00:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix demangle helper after r286788\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292541 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fba0eeedddd43ba6656089bdd81f43b1204fc4a8","date":"2017-01-20T00:57:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix handling of Apple target triple when checking the ABI lists.\n\nThe check-cxx-abilist rule uses TARGET_TRIPLE to determine which\nABI list to check. However the triple on Apple contains the darwin\nversion which changes frequently, but libc++ doesn't need\ndifferent ABI lists for each darwin version.\n\nThis patch strips the minor version and patchlevel from TARGET_TRIPLE\nbefore using it to determine the ABI list.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292557 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e28ff3340529380313b1d3d1d2da766a951b2051","date":"2017-01-20T01:13:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[NFC] Group aligned new/delete definitions together in new.cpp\n\nThis patch is cleanup to prepare for future changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292560 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d54d974f1fabaec41a4c115ce57aec7a43c31270","date":"2017-01-20T01:47:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable aligned new/delete on Apple platforms without posix_memalign\n\nSummary:\nThis patch disables the aligned new/delet overloads on Apple platforms without `posix_memalign`. This fixes libc++.dylib build regressions on such platforms.\nThis fixes http://llvm.org/PR31448.\n\nThis patch should also be merged into the 4.0 release branch\n\n\nReviewers: mclow.lists, rsmith, dexonsmith, jeremyhu\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28931\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292564 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"478f902c62af8a4315c5fa5ec869892f869bee5f","date":"2017-01-20T04:39:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor unique_ptr/shared_ptr deleter test types into single header.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292577 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19b1c83593091947cfa4357199879b346de81cac","date":"2017-01-20T06:27:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Still expose std::align_val_t in C++17 even if we don't have aligned new/delete.\n\nr292564 disabled the aligned new/delete overloads on platforms without\nposix_memalign. Unfortunately that patch also disabled the  align_val_t\ndefinition in C++17 as well.\n\nThis patch causes align_val_t to be exposed in C++17 regardless\nof if we have the new/delete overloads.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292582 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76c85b10e2c5000152c03955c7f1dacc45e5d121","date":"2017-01-20T12:46:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't default older GCC's to C++17, but C++14 or C++11 instead\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292605 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cefc52072fc63f3c0a04669d361893a923d6606","date":"2017-01-20T12:52:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"Don't default older GCC's to C++17, but C++14 or C++11 instead\"\n\nThe commit isn't quite right, and I want to only have to merge one\ncommit into 4.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ee856f131dc433ff3c7522a4782aed7ac6de4f4a","date":"2017-01-20T12:54:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't default older GCC's to C++17, but C++14 or C++11 instead\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292607 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"952eaecfc6fa504c40d6f7220d8c017d014cda0c","date":"2017-01-21T00:02:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement P0513R0 - \"Poisoning the Hash\"\n\nSummary:\nExactly what the title says.\n\nThis patch also adds a `std::hash<nullptr_t>` specialization in C++17, but it was not added by this paper and I can't find the actual paper that adds it.\n\nSee http://wg21.link/P0513R0 for more info.\n\nIf there are no comments in the next couple of days I'll commit this\n\nReviewers: mclow.lists, K-ballo, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28938\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292684 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"17b6e14cdce39f56c38a643cfa39c1d25fc092e3","date":"2017-01-21T00:57:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix recent build errors\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292689 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85e34e4ab71cc457ff235a1df88db24226d355b9","date":"2017-01-21T14:42:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert accidentally changes which reverted r292582\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292717 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45f4ec28a291aba044c4ba959775f80f873b11f9","date":"2017-01-23T17:25:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Removed some un-needed ifdefs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292806 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec1d3f7e2de2cc57f6aaac1329e1a11d6980cf39","date":"2017-01-23T18:00:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Revert previous cleanup; I got too agressive removing #ifdefs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292809 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6111e65cba441856289356e8d93ea2aa1ebe224a","date":"2017-01-23T19:51:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a typo in __config that prevented the aligned new/delete tests from passing on Mac OS.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292822 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fbe68a68abb507c3bc2d930e3c91ae9a176b6b52","date":"2017-01-23T19:53:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2778: basic_string_view is missing constexpr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292823 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f472d6c89df1fbf536af7cac1e7a68d09a5598ec","date":"2017-01-23T21:24:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix GCC C++03 build by hiding default template argument in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292830 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cdb5d2500482a37b0764c2bac53caebd8a314aa8","date":"2017-01-23T21:41:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Manually force the use of __decltype in C++03 with Clang 3.4.\n\n<string> uses `decltype` in a way incompatible with `__typeof__`.\nThis is problematic when compiling <string> with Clang 3.4 because\neven though it provides `__decltype` libc++ still used `__typeof__`\nbecause clang 3.4 doesn't provide __is_identifier which libc++\nuses to detect __decltype.\n\nThis patch manually detects Clang 3.4 and properly configures\nfor it.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292833 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c90d1f776b8f7975ac679a1c0cb862345214b99","date":"2017-01-24T04:57:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Never use <cassert> within libc++\n\nSummary:\nIt is my opinion that libc++ should never use `<cassert>`, including in the `dylib`. This patch remove all uses of `assert` from within libc++ and replaces most of them with `_LIBCPP_ASSERT` instead.\n\nAdditionally this patch turn `LIBCXX_ENABLE_ASSERTIONS`  off by default, because the standard library should not be aborting user programs unless explicitly asked to.\n\nReviewers: mclow.lists, compnerd, smeenai\n\nReviewed By: mclow.lists\n\nSubscribers: mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D29063\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292883 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"66ed0bc836633790af993285dcd5f62443a6203a","date":"2017-01-24T09:11:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove all usages of REQUIRES-ANY in the test suite.\n\nPending LIT changes are about to remove the REQUIRES-ANY keyword\nin place of supporting boolean && and || within \"REQUIRES\". This\npatch prepares libc++ for that change so that when applied\nthe bots don't lose their mind.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292901 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1bd94ed50dd0463496e78888f01ae3772bbe43fb","date":"2017-01-24T10:19:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bad XFAIL which recent LIT changes diagnosed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292905 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1a3bde19efae8e6f55be191f796a8566db09afd9","date":"2017-01-24T10:38:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert yet another accidental change caused by r292684\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292908 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a49c64f18250e904b365d4d4e4ea5affacf78835","date":"2017-01-24T12:26:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"[libcxx] Never use <cassert> within libc++\"\n\nThis reverts commit r292883. Unfortunately <string_view> uses\n_LIBCPP_ASSERT in a way which is not compatible with the C++11 dylib\nbuild. I'll investigate more tomorrow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292923 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c73c1fc7aeea9efe8dbe10b4f31fab6fe80ab648","date":"2017-01-24T13:03:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update Linux ABI lists to reflect inlining change in LLVM. More investigation tomorrow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292929 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b08183bc1f0f76a1c436a30498dfbdbc7c2d1dbf","date":"2017-01-24T16:28:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"A couple more tests for constexpr stuff in string_view. No changes other than test code.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292943 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5f53d07302a3da5f1f28343cab610de005777a6","date":"2017-01-24T18:03:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG2736 as complete. No code changes, but we have more tests now\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292958 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98494057e894c151e6576b919a3f242211d1d3f3","date":"2017-01-24T18:15:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2733: [fund.ts.v2] gcd / lcm and bool.  We already did tbis for C++17, so replicate the changes in experimental.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292962 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a89d24bb05509f8a22ce03839cf247c5490795e","date":"2017-01-24T19:37:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update status for LWG2733\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bef26f787ddf69961ee16ea2f25bfed976b7f4f3","date":"2017-01-24T19:44:55.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test to make sure that implicit conversion from error_code to bool will fail\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292969 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b4d17ade8956ef2c77cbb6e7cd9461edd1f58bca","date":"2017-01-24T22:22:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove auto_ptr in C++17. Get it back by defining _LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292986 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4e42dc97f3cf3e63ef3e6a23cada1970259eb7ea","date":"2017-01-24T23:09:12.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change the return type of emplace_[front|back] back to void when building with C++14 or before. Resolves PR31680.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292990 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bb0cca6462f3ce85b3f6e8a117bec8e9d15f98c","date":"2017-01-24T23:28:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2556: Wide contract for future::share()\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@292992 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a032c59d015cd7bee8883c91ae0d39134d6af19","date":"2017-01-25T17:00:30.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"[libcxx] Mentions \"targeting C++11 and above\" instead of \"targeting C++11\" in the doc\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293071 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19cd3fd00f0a21023a32da67f134b076ad0c48fe","date":"2017-01-25T20:14:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a typo in the synopsis (noecept -> noexcept). Thanks to Kim for the catch\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293079 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f783971aa077d1a3a125280f05fc9e2e3df8cc50","date":"2017-01-26T06:58:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Use the new __has_feature(cxx_constexpr_string_builtins) for detection of the C-string intrinsics for constexpr support in std::char_traits. Thanks to Richard for the intrisic support.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293154 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bcc92d75df0274b9593ebd097fcae60494e3bffc","date":"2017-01-26T10:40:17.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Fix chromium build (libcxx)\n\nRemove the reference to pthread_mach_thread_np() in libcxx headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293167 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da709135c5762810e2dd5322d28f1f80501c7531","date":"2017-01-26T14:36:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fixed a couple of invalid statuses for 2665 and 2758\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293179 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"362353aa2d011cbd5f008661a46beaba734d9296","date":"2017-01-26T18:37:18.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Disable thread safety analysis for some functions in __thread_support\n\nMany thread-related libc++ test cases fail on FreeBSD, due to the\nfollowing -Werror warnings:\n\n    In file included from test/std/thread/thread.threads/thread.thread.this/sleep_until.pass.cpp:17:\n    In file included from include/thread:97:\n    In file included from include/__mutex_base:17:\n    include/__threading_support:222:1: error: mutex '__m' is still held at the end of function [-Werror,-Wthread-safety-analysis]\n    }\n    ^\n    include/__threading_support:221:10: note: mutex acquired here\n      return pthread_mutex_lock(__m);\n             ^\n    include/__threading_support:231:10: error: releasing mutex '__m' that was not held [-Werror,-Wthread-safety-analysis]\n      return pthread_mutex_unlock(__m);\n             ^\n    include/__threading_support:242:1: error: mutex '__m' is still held at the end of function [-Werror,-Wthread-safety-analysis]\n    }\n    ^\n    include/__threading_support:241:10: note: mutex acquired here\n      return pthread_mutex_lock(__m);\n             ^\n    include/__threading_support:251:10: error: releasing mutex '__m' that was not held [-Werror,-Wthread-safety-analysis]\n      return pthread_mutex_unlock(__m);\n             ^\n    include/__threading_support:272:10: error: calling function 'pthread_cond_wait' requires holding mutex '__m' exclusively [-Werror,-Wthread-safety-analysis]\n      return pthread_cond_wait(__cv, __m);\n             ^\n    include/__threading_support:278:10: error: calling function 'pthread_cond_timedwait' requires holding mutex '__m' exclusively [-Werror,-Wthread-safety-analysis]\n      return pthread_cond_timedwait(__cv, __m, __ts);\n             ^\n    6 errors generated.\n\nThis is because on FreeBSD, the pthread functions have lock annotations.\nSince the functions in __thread_support are internal to libc++ only, add\nno_thread_safety_analysis attributes to suppress these warnings.\n\nReviewers: mclow.lists, EricWF, delesley, aaron.ballman\nReviewed By: aaron.ballman\nSubscribers: ed, aaron.ballman, joerg, emaste, cfe-commits\nDifferential Revision: https://reviews.llvm.org/D28520\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293197 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc116591fde97da70d4221d8dcfa7a8f0047129a","date":"2017-01-29T18:16:33.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"config: prevent the re-definition of a macro\n\nThis causes unnecessary warnings when building with `cl`.  Newer\nversions of the C standard permit the redefinition of the macro to the\nsame value (which is the case here), unfortunately, `cl` does not yet\nimplement this.  Add a check to prevent the redefinition.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293439 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"286816274d9dbe831d5db64c53dcac29115ca4f6","date":"2017-01-29T22:31:28.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: remove dead function\n\nThis template was defined inline, within the TU only and had no uses\nacross the entire repository.  Remove the dead code.  NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b35cd98bc1cc9d5f71a3246c462c2decec831a29","date":"2017-01-30T00:15:47.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: tolerate the existence of a `__deref` macro\n\nMicrosoft's SAL has a `__deref` macro which results in a compilation\nfailure when building the filesystem module on Windows.  Rename the\nmember function internally to avoid the conflict.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293449 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eebb4f71e044e27c2ef84155202c1af15eaff235","date":"2017-01-30T00:15:50.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: inline single use of a typedef\n\nThe typedef is not particularly long, and used in exactly one location.\nJust spell it out at the site.  NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293450 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"52241cb5119e3b49e67209607f122ee8be00e2f4","date":"2017-01-30T03:58:26.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: remove some extraneous _LIBCPP_FUNC_VIS\n\nThese member functions were decorated with `_LIBCPP_FUNC_VIS` when the\nclass is also decorated with external visibility.  This breaks down when\nbuilding for PE/COFF, where the member function cannot be decorated if\nit is within a decorated class.  The class attribute will propagate to\nthe member.  Remove the extraneous decoration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293454 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1d3b737603f3063ed8230b7adb0ab206e78997b5","date":"2017-01-30T18:50:32.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: add missing file header\n\nThe directory_iterator implementation file was missing the file header.\nAdd one.  NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293530 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5c518e17a9197c96ade21022f199713279d2867f","date":"2017-01-30T18:50:34.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: port directory_iterator to Windows\n\nThis adds a basic first cut implementation for directory_iterator on\nWindows.  It uses the FindFirstFile/FindNextFile which has the same\nrestrictions as opendir/readdir where there exists a TOCTOU race\ncondition.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293531 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"445b823bf171af4ece7f56255a97a70f4a35dce0","date":"2017-01-30T19:57:27.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"experimental: avoid using raw _WIN32 in filesystem\n\nUse the _LIBCPP_WIN32API macro instead of _WIN32 checks.  Fix a missed\nrenaming for style conformance.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293543 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e70b4ec8afd25354305ec6e536d06a1eebb1f211","date":"2017-01-31T01:26:09.000Z","author":{"name":"Justin Bogner","email":"mail@justinbogner.com"},"message":"Revert \"Adorn __call_once_proxy with `inline` and `_LIBCPP_INLINE_VISIBILITY`\"\n\nWhile this change didn't really hurt, it does lead to spurious\nwarnings about not being able to override weak symbols if you end up\nlinking objects built with this change to ones built without it.\nFurthermore, since __call_once_proxy is called indirectly anyway it\ndoesn't actually inline ever.\n\nLonger term, it would probably make sense to give this symbol internal\nvisibility instead.\n\nThis reverts r291497\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9247fd2f7946cc947f8f00bb180b1066b34158db","date":"2017-01-31T03:40:52.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#31779: basic_string::operator= isn't exception safe.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cb14d02f6dfef73054f8eb5abce5bccf9e66d54d","date":"2017-01-31T12:37:48.000Z","author":{"name":"Alex Lorenz","email":"arphaman@gmail.com"},"message":"Workaround new -Wshadow warning introduced by r293599\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293619 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90b3732f7a2588ce7bb8d758675b389dc2e7ff37","date":"2017-01-31T13:12:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix up some no-exception compile failures\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1773efdab35500164383f996bbbe086c68409d35","date":"2017-02-02T11:56:26.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Extend XFAIL to c++98.\n\nNFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293881 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e520f0b308bd6dfd533fc74db74e04c8709c7de4","date":"2017-02-02T19:44:11.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Avoid implementation defined behavior in a test.\n\nSummary:\nnum_put::put uses %p for pointer types, but the exact format of %p is\nimplementation defined behavior for the C library. Compare output to\nsnprintf for portability.\n\nReviewers: EricWF, mclow.lists\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D29197\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@293926 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1b1dcf53806eb34a981d248c5713920bda2e1fc","date":"2017-02-04T20:27:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Undefine min/max in __tree\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294099 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e6abfa091e785c1716d3bfbdb940d1e63449376","date":"2017-02-04T20:38:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark basic_string::assign templates as inline to improve ABI stability.\n\nVisible definitions for basic_string::assign are sometimes emitted in\nthe dylib depending on the version of LLVM used to compile libc++.\nThis can cause the check-cxx-abilist target to fail.\n\nThis patch attempts marks the basic_string::assign templates as inline\nto prevent this. That way the export list is consistent across LLVM\nversions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294100 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"236b752f2bc5f6848cd0896b9082896a7d23a52a","date":"2017-02-04T22:57:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix inconsistency in tuple's SFINAE. Patch from Andrey Khalyavin\"\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294106 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b89eba01e80fa5ecbc07bee3f273e1aa79b41158","date":"2017-02-04T23:22:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit [libcxx] Never use <cassert> within libc++\n\nIt is my opinion that libc++ should never use `<cassert>`, including in the `dylib`.\nThis patch remove all uses of `assert` from within libc++ and replaces most of them with `_LIBCPP_ASSERT` instead.\n\nAdditionally this patch turn `LIBCXX_ENABLE_ASSERTIONS`  off by default,\nbecause the standard library should not be aborting user programs unless explicitly asked to.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294107 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dab86778dfb1c1dbf95658ce5c6dbb754218800c","date":"2017-02-05T01:16:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix typo in docs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294115 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1138f041fc7b1c81dab2b930d9ed136802110312","date":"2017-02-05T01:19:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove CMake hack\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294116 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7566869dabd82699f26c8c95f18de331ec3950ce","date":"2017-02-05T17:21:52.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"filesystem: fix n4100 conformance for `temp_directory_path`\n\nN4100 states that an error shall be reported if\n`!exists(p) || !is_directory(p)`.  We were missing the first half of the\nconditional.  Invert the error and normal code paths to make the code\neasier to follow.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294127 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e2261bde80c7e23419eec6dac308f88d246fe989","date":"2017-02-05T20:06:38.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Change the base class of std::bad_optional_access.  This is a (subtle) ABI change, and is in response to http://http://wg21.link/LWG2806, which I *expect* to be adopted in Kona. I am making this change now in anticipation, and will get it into 4.0, because (a) 4.0 is the first release with std::optional, and (b) I don't want to make an ABI-change later, when the user base should be significantly larger. Note that I didn't change std::experimental::bad_optional_access, because that's still specified to derive from std::logic_error.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294133 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d55abe9d8277fe6ab8ca680767acdbbb63da4360","date":"2017-02-05T20:14:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adjust Linux ABI list after r294133\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294138 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d78b104afa78d836daed250b082d397ec18552ad","date":"2017-02-05T20:17:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Adjust Apple ABI list after r294133\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294139 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a1c7fbb6f9cb88ed48e5c2f7fde3913ec88e20b2","date":"2017-02-05T20:36:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix variant build errors with GCC 7\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294141 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0becc206e35937a4902238a0dabbca31445a3f81","date":"2017-02-05T20:52:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Restore the _NOEXCEPT on the dtor of bad_optional_access. Destructors are noexcept by default, so it's not really needed, but the other exception classes have the _NOEXCEPT, and gcc complains if these are missing. I think we should remove them all - but not today.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294142 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5597800045d2053774514354adf7fbd8bd36cc3d","date":"2017-02-05T22:47:09.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix Clang -Wunused-local-typedef, part 1/3.\n\nGuard typedefs and static_asserts with _LIBCPP_VERSION.\n\ntest/std/containers/sequences/vector.bool/move_assign_noexcept.pass.cpp\ntest/std/containers/sequences/vector.bool/move_noexcept.pass.cpp\ntest/std/containers/sequences/vector.bool/swap_noexcept.pass.cpp\nAdditionally deal with conditional compilation.\n\ntest/std/containers/associative/map/map.cons/move_noexcept.pass.cpp\ntest/std/containers/associative/multimap/multimap.cons/move_noexcept.pass.cpp\nAdditionally deal with typedefs used by other typedefs.\n\nFixes D29135.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294154 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"939607910d58aa2414091cc6eeb2e1c143a7770c","date":"2017-02-05T22:47:41.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix Clang -Wunused-local-typedef, part 2/3.\n\nThese typedefs were completely unused.\n\nFixes D29136.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294155 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0eb6bb8d2dfe2d8539f681eea4488396f01da850","date":"2017-02-05T22:47:54.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix Clang -Wunused-local-typedef, part 3/3.\n\ntest/std/strings/string.classes/typedefs.pass.cpp\nActually test what basic_string's typedefs stand for.\n\ntest/std/utilities/meta/meta.trans/meta.trans.other/result_of11.pass.cpp\nNotDerived and ND were completely unused.\n\ntest/std/utilities/utility/pairs/pairs.pair/default.pass.cpp\nP2 was mistakenly not being used. Yes, that's\nright: -Wunused-local-typedef CAUGHT A MISTAKE! AMAZING!\n\nFixes D29137.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294156 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02af098ef7e48d774036632ccdf67a3f52aab6ed","date":"2017-02-05T22:48:02.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix Clang -Wdeprecated-declarations with MSVC's CRT.\n\nlibcxx's tests use various C Standard Library functions that have been\nmarked by MSVC's CRT as deprecated by Microsoft (not by ISO).\n\nlibcxx's usage is cromulent (just checking with decltype to see if the functions\nare being dragged in by various headers as required by the Standard), so\ndefining _CRT_SECURE_NO_WARNINGS will silence the warnings in a targeted manner.\nThis needs to be defined before including any CRT headers.\n\nAlso, make this file prettier.\n\nFixes D29138.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294157 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"041fb56800c84bd3695aef8f4273c68b4248f107","date":"2017-02-05T22:48:07.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix Clang -Wpessimizing-move \"moving a temporary object prevents copy elision\".\n\nN4618 30.6.6 [futures.unique_future]/12 declares \"shared_future<R> share() noexcept;\".\n\nFixes D29139.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b40cb9832b4b41bc459641ca940b946c5211f091","date":"2017-02-05T22:48:13.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Avoid MSVC's non-Standard ABI in underlying_type.pass.cpp.\n\nWhen compiled with Clang for Windows, this was emitting \"enumerator value\nevaluates to 4294967295, which cannot be narrowed to type 'int' [-Wc++11-narrowing]\".\n\nThe test should more strenuously avoid poking this ABI deficiency (and it\nalready has coverage for explicitly specified underlying types).\n\nFixes D29140.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294159 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19ab479cc2ed609992f194ab48a6906432558345","date":"2017-02-05T22:48:20.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix comment typos.\n\nNo functional change, no code review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294160 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fdbd18ff71c976643380d5cf0ac8580487123b2d","date":"2017-02-05T22:48:27.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Strip trailing whitespace.\n\nNo functional change, no code review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294161 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"07d23d5d93fff480a5ff8f3309bcf8c95bf3c71f","date":"2017-02-06T01:25:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2773 - std::ignore should be constexpr.\n\nIn addition to the PR for LWG 2773 this patch also ensures\nthat each of std::ignores constructors or assignment operators\nare constexpr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a67aa062c6198af789f866cc0ac66091f6eb114a","date":"2017-02-06T02:41:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG 2765 as complete. No changes needed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294167 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cda122b35320c8e49a35f4f5e44c7da7023e4402","date":"2017-02-06T05:26:49.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Refer to _LIBCPP_MSVC macro where applicable\n\nReplace preprocess conditions of defined(_MSC_VER) &&\n!defined(__clang__) with defined(_LIBCPP_MSVC).  NFC.\n\nPatch by Dave Lee!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294171 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a00ab8ea7bc69c327b8d4df60e7bf1719441a3f","date":"2017-02-06T15:17:22.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Set up 'upcoming meeting' bug list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294189 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c3eec461e73229d3d79e4a7454d2e3617be779f8","date":"2017-02-06T15:29:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a typo - extra '>'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294190 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24597f254dc229da1aa50258b7f444a0e479460f","date":"2017-02-06T16:03:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some tests to verify that we implement LWG#2837 correctly. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294194 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"166d27ed3133af1deb0c1b73ab142847e1942644","date":"2017-02-07T02:46:59.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"filesystem: return the constructed object\n\nThis really should get identified properly by the compiler to convert to\na NVRO, but compress the code anyways.  This makes the implementation\nidentical to directory_iterator.cpp\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294270 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"542c6e8f9b78b2be4fae31691ea2a03976594ca6","date":"2017-02-07T15:34:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG2784 as ready\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294311 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"426546ecec21fc65d78e56d7716915daf5b59686","date":"2017-02-07T18:41:25.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Stop using random_shuffle in the libc++ test suite. It's going to be removed in c++17. Use shuffle() instead. No change to libc++, just the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294328 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a78d25b71bbbb47b25a73ff928ab277d30f0415","date":"2017-02-07T21:04:19.000Z","author":{"name":"Dan Albert","email":"danalbert@google.com"},"message":"Use copy.deepcopy instead of doing it manually.\n\nReviewers: EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D29209\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294350 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd4ab9c404be91918a72fc586a3754d40360fa5e","date":"2017-02-07T21:20:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failures when using modules.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294353 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b495bd9d72a3905b347ee0848c62ac80a23cbc9","date":"2017-02-07T21:21:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix python3 syntax error\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fecf0579406081010195d87cd5a74608c33d5004","date":"2017-02-07T21:51:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix bugs in filesystem detected by _LIBCPP_ASSERT.\n\nRecently I turned on libc++'s debug mode assertions when\nCMake is configured with -DLIBCXX_ENABLE_ASSERTIONS=ON. This\nchange exposed assertion failures caused by bugs in filesystem.\nThis patch fixes those failures.\n\nThe first bug was that `PathParser` was using front()/back()\non empty string views in order to get the address of the character.\nHowever this is UB on empty strings. Those operations now use data()\nto obtain the pointer.\n\nThe second bug was that directory_iterator attempted to capture errno when it\nwas unset and there was an assertion to detect this.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294360 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25f28d0c9ec4f42f3eabbc5c6bd9c53485c325c3","date":"2017-02-08T00:10:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Prevent UBSAN from generating unsigned overflow diagnostics in the hashing internals\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"34da9b5d0971ca204db7ba9a488a681f76e491d0","date":"2017-02-08T00:14:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing include in <numeric>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b8fc14abc2ac3bbef8a135fbc4ad2264493edc6","date":"2017-02-08T07:40:59.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Temporarily disable the LCM/GCD tests under UBSAN.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6c7c93f95aa007040960de6f39eafb0d720dfecd","date":"2017-02-08T09:57:32.000Z","author":{"name":"Michal Gorny","email":"mgorny@gentoo.org"},"message":"[test] Fix hard_link_count test to account for fs with dir nlink==1\n\nFilesystems are not required to maintain a hard link count consistent\nwith number of subdirectories. For example, on btrfs all directories\nhave nlink==1. Account for that in the test.\n\nDifferential Revision: https://reviews.llvm.org/D29706\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294431 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59955033d224af1c6df1d766509fa8f894dfd4c2","date":"2017-02-08T19:04:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update info for LWG 2665 in upcoming_meeting.html\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294501 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4699a5b998767285d36f5a864984c7338d40274","date":"2017-02-09T02:19:43.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx][CMake] Support in-tree libunwind when building as part of runtimes\n\nWhen building as part of runtimes, there is no predefined order in\nwhich the runtimes are loaded, so the targets from other projects\nmight not be available. We need to rely on HAVE_<name> variables\ninstead in that case.\n\nDifferential Revision: https://reviews.llvm.org/D29575\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294553 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1b939615869e8243a26efe159eece9a703a3c3fe","date":"2017-02-09T09:31:41.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Threading support: externalize sleep_for() function.\n\nDifferent platforms implement the wait/sleep functions in difrerent ways.\nIt makes sense to externalize this into the threading API.\n\nDifferential revision: https://reviews.llvm.org/D29630\n\nReviewers: EricWF, joerg\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a0c9c3d7ab80a3db97e621153fe6d5f8e9285a5","date":"2017-02-09T14:12:29.000Z","author":{"name":"Joerg Sonnenberger","email":"joerg@bec.de"},"message":"Use protected name for the prototype arguments.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294585 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d8b62dceb22903184109eeadb90612bcc17ac367","date":"2017-02-09T19:01:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR31916 - std::visit rejects visitors accepting lvalue arguments\n\nA static assertion was misfiring since it checked\nis_callable<Visitor, decltype(__variant_alt<T>.value)>. However\nthe decltype expression doesn't capture the value category as\nrequired. This patch applies extra braces to decltype to fix\nthat.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294612 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1147753b1ccb0bbc40d05e7e73089e2b7bb38317","date":"2017-02-09T22:53:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Start libc++ python cleanup and consolidation.\n\nLibc++ frequently creates and uses utilities written in python.\nCurrently there are python modules under both libcxx/test and\nlibcxx/util. My goal with these changes is to consolidate them\ninto a single package under libcxx/utils/libcxx.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294644 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed803866ea662686377a526e62c6638b6a26956b","date":"2017-02-09T23:18:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move libcxx/test/libcxx python package into libcxx/utils/libcxx.\n\nThis patch merges the test python package with the newly\ncreated package in utils.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294651 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5115d24d2c9becf83320937bfb331fb766252dbc","date":"2017-02-09T23:29:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"add missing python import\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294660 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7be9c9ae5cf71294a81712d5b819254d22e5c2c4","date":"2017-02-10T00:01:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing libc++ import\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294673 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"917331c88bd2afce0cf0fdbcab55a64541b5bcf0","date":"2017-02-10T01:27:42.000Z","author":{"name":"David L. Jones","email":"dlj@google.com"},"message":"Check for musl-libc's max_align_t in addition to other variants.\n\nSummary:\nLibcxx will define its own max_align_t when it is not available. However, the\navailability checks today only check for Clang's definition and GCC's\ndefinition. In particular, it does not check for musl's definition, which is the\nsame as GCC's but guarded with a different macro.\n\nReviewers: mclow.lists, EricWF\n\nReviewed By: EricWF\n\nSubscribers: chandlerc, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28478\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294683 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7666130d06326bfd001e6093ffdedc9b5bbee873","date":"2017-02-10T02:44:23.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Fully qualify (preprend ::) calls to math functions from libc\n\nSummary:\nThis can cause a compile failure in cases like:\n\ndouble log(double);\nnamespace foo {\n  namespace log {}\n}\nusing namespace foo;\nvoid bar(int i) {\n  log((double)i);\n}\n\nReviewers: EricWF, mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D29804\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294696 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29e1142d8b8a6c13b44ab982d741ab4908cddfaf","date":"2017-02-10T02:49:52.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"__threading_support: fix windows build\n\nThe build was broken as there was no overload for long and\nstd::chrono::nanoseconds.  Add an explicit conversion to use the\noperator+.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294698 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4fd0d50a960af808fe65456ee46e13446596c48f","date":"2017-02-10T03:20:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to fix finding clang++ on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294699 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7bee0d9c6c9fbcf8a495ca02784f1d8752d2894","date":"2017-02-10T03:58:20.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"docs: add some documentation for building on Windows\n\nThis covers how to build libc++ for Windows.  This allows others to\nreplicate the MS ABI style build for libc++.  It only depends on msvcrt\nas it uses the Windows threading model and the Windows ABI and can serve\nas an ABI compatible replacement for msvcprt.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294705 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d60b66ad4f04e7320eb926f8557cef30b3778f99","date":"2017-02-10T04:25:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Split exception.cpp and new.cpp implementation into different files for different runtimes.\n\nexception.cpp is a bloody mess. It's full of confusing #ifdef branches for\neach different ABI library we support, and it's getting unmaintainable.\n\nThis patch breaks down exception.cpp into multiple different header files,\nroughly one per implementation. Additionally it moves the definitions of\nexceptions in new.cpp into the correct implementation header.\n\nThis patch also removes an unmaintained libc++abi configuration.\nThis configuration may still be used by Apple internally but there\nare no other possible users. If it turns out that Apple still uses\nthis configuration internally I will re-add it in a later commit.\nSee http://llvm.org/PR31904.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"801e00b0cdf2e9b49fbbeb516cf45b6885ee692d","date":"2017-02-10T05:07:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Correctly default to using the system libc++abi on Apple.\n\nThis patch fixes a regression where libc++ didn't correctly\nselect the system libc++abi when no in-tree version was found.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294712 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b9eccbec08de158b14424b84c85260e0c562a45d","date":"2017-02-10T06:24:34.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: allow -target usage on Windows\n\nWhen running the tests on Windows with a debug build, _DEBUG must be\nadded to the flags prior to the -target as the forced inclusion of a\nheader will prevent the compile test for the flag to fail.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3078f63a9896656815babc4f95ded9c30d04009","date":"2017-02-10T06:38:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"properly escape compiler path in .sh.cpp tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294718 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74ec9d794752449be4bd8288ec619a6435e4ad0d","date":"2017-02-10T06:51:19.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: fix test under Windows\n\nWhen running the test under clang-cl, we do not report `__GNUC__`, which\nis needed to supress the warnings which are being treated as errors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294719 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4aac249f71808e9ce3315c6c55de023f08608b9e","date":"2017-02-10T06:51:21.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: XFAIL windows for non-portable test\n\nThis test validates that the lock_guard is declared variadically across\nC++03 and C++11.  Given the lack of stable ABI on Windows and the fact\nthat the RTTI encoding on Windows is different, XFAIL it on that target.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294720 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1b6382ee31d987ba0af05c8cf586624745887ca","date":"2017-02-10T06:59:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Properly escape ShellTest subsitutions on Windows. Try 2\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3298ad74ee5d5dfaa94b50ac4beb0c8f7e577c1","date":"2017-02-10T07:43:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"Split exception.cpp and new.cpp implementation into different files for different runtimes.\"\n\nThe compiler-rt CMake configuration needs some tweaking before this can land.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1edf3166ef0f32f05e68e7a4150f57365221135e","date":"2017-02-10T08:57:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Recommit \"Split exception.cpp and new.cpp implementation into different files for different runtimes.\"\n\nThis recommits r294707 with additional fixes. The main difference is\nlibc++ now correctly builds without any ABI library.\n\nexception.cpp is a bloody mess. It's full of confusing #ifdef branches for\neach different ABI library we support, and it's getting unmaintainable.\n\nThis patch breaks down exception.cpp into multiple different header files,\nroughly one per implementation. Additionally it moves the definitions of\nexceptions in new.cpp into the correct implementation header.\n\nThis patch also removes an unmaintained libc++abi configuration.\nThis configuration may still be used by Apple internally but there\nare no other possible users. If it turns out that Apple still uses\nthis configuration internally I will re-add it in a later commit.\nSee http://llvm.org/PR31904.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294730 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f2dbd02b3038da0e39b7b84f9caaf71ae23d2243","date":"2017-02-10T09:16:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to fix Apple buildit bots\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"00d9a944af2ac00e92e294c9893c83dd75450f46","date":"2017-02-10T09:25:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix yet another Apple buildit bug\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ebf66a385ffcadade40363c0609b1ba244086d7d","date":"2017-02-10T20:49:08.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make lcm/gcd work better in edge cases. Fixes a UBSAN failure.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294779 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"197b8821c637133a180f0fdc725df195fd388771","date":"2017-02-10T22:44:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a bug I introduced in the tests for experimental::lcm and experimental::gcd.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294798 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff5eeb6beebda3cb406906d8cff40a5fb41eedf2","date":"2017-02-11T08:30:18.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Fix the build of thread.cpp on CloudABI.\n\nCloudABI does provide unistd.h, but doesn't define __unix__. We need to\ninclude this header file to make hardware_concurrency work.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294832 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c253e58209c64d42a85816ee95054b5fffb46ea5","date":"2017-02-11T08:33:16.000Z","author":{"name":"Ed Schouten","email":"ed@nuxi.nl"},"message":"Remove a now unneeded __CloudABI__ check.\n\nCloudABI has gained the setlocale() function in the meantime, meaning\nthere is no longer a need to conditionalize this.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294833 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"430800ddb8644d59a551394ec76e01d0350aabe9","date":"2017-02-12T16:44:17.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"cmath: adjust math forwards for Windows\n\nThe newer versions of ucrt have the math routines.  Use the CRT version\nto determine if we should include the math routines.  Fixes two tests\nfor Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294899 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0849d28af1ece494385c7b74b5fc2f7bf7202b6d","date":"2017-02-12T17:37:44.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: squelch -Wreturn-type error\n\nAdd an unreachable marker to avoid a -Wreturn-type error when building\non Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294901 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"be3d93ca489c7314932795f1cae064312974a47d","date":"2017-02-12T17:37:45.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"math: pull more C functions from std\n\nThe newer ucrt version provides the gamma meth routines.  Includede them\nwhen building the library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294902 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"effe3dc412528d0e34bfa41a56d1dc0a03e1e0bc","date":"2017-02-12T17:37:48.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: mark requirement for pthread test\n\nThis test explicitly is checking the behaviour of std::thread and\npthread interactions.  This requires pthreads.  Add an appropriate\nrequirement.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294903 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd18417b4d3124a298e86ba351286a91c2ce6c1e","date":"2017-02-12T21:42:35.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: use char32_t rather than wchar_t\n\nwchar_t is not as portable as char32_t.  On Windows, wchar_t is\n16-bytes and on Linux 32-bits.  The conversion to utf8 causes the\ncharacters to exceed the limits on char16_t, resulting in tautological\ncomparisons.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294917 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bacb35f5ae2c135e120d0049de96cef5d8dbbf93","date":"2017-02-12T21:42:37.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"math: follow up to SVN r294902\n\nPull in the math functions from ucrt 14+ after auditing the library.  It\nseems that they are now complete for C99 math.  Fixes more windows\ntests!\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294918 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7f5b63b5c4019effcebab880ec3078f6a7c1be21","date":"2017-02-13T15:26:47.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: mark another test as requiring pthreads\n\nThis is checking pthread specific behaviour.  Add a requirement on\npthreads.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294956 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"766ba681072a42838ae5c7ba1ae63448ba23c78f","date":"2017-02-13T15:26:50.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"math: actually pull the declarations/overloads into std\n\nThe previous changes missed the change to include/cmath.  These changes\nallow some of the rand.distribution tests to pass on Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294957 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5748d2b404785f82d6a92b497f58dc4c4c33e06d","date":"2017-02-13T15:26:51.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"config: disable thread safety analysis on COFF\n\nclang cannot properly handle __declspec and __attribute__ on classes\nright now.  This prevents the shared_mutex tests from working.  Disable\nthe use of the annotation on COFF targets.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294958 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c477cb41afd22162ab5ac671eea3cb78cdc2d6c","date":"2017-02-13T22:44:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for noexcept functions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@294995 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e80bd1ab0b2c8c82953694bab4b0b4f259b81060","date":"2017-02-16T15:47:45.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"threading_support: make __thread_sleep_for be alertable\n\nOn Windows, we were using `Sleep` which is not alertable.  This means\nthat if the thread was used for a user APC or WinProc handling and\nthread::sleep was used, we could potentially dead lock.  Use `SleepEx`\nwith an alertable sleep, resuming until the time has expired if we are\nawoken early.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295329 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af5f91fd19684288de409f450df6b7a7099fdda4","date":"2017-02-16T15:47:50.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"math: correct the MSVCRT condition\n\nFixes a number of tests in the testsuite on Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d5854559eb3ef3e59e1e825109a5ceb19d55382c","date":"2017-02-16T18:50:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update a couple of issue statuses\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4203bfb5d323be994f3851cec1455cdc7a156153","date":"2017-02-17T01:00:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"add tests for ENAMETOOLONG\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0eaf2e84741448aacdd5112c4684ed5974b56338","date":"2017-02-17T01:17:10.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix PR 31938 - std::basic_string constructors use non-deductible parameter types.\n\nSummary:\nThis patch fixes http://llvm.org/PR31938. The description below is copy/pasted from the bug:\n\nThe standard says:\n\ntemplate<class charT, class traits = char_traits<charT>,\n         class Allocator = allocator<charT>>\nclass basic_string {\n  using value_type = typename traits::char_type;\n  // ...\n  basic_string(const charT* s, const Allocator& a = Allocator());\n};\n\nlibc++ actually chooses to declare the constructor as\n\n  basic_string(const value_type* s, const Allocator& a = Allocator());\n\nThe implicit deduction guides from class template argument deduction make what was previously an implementation detail visible:\n\nstd::basic_string s = \"foo\"; // error, can't deduce charT.\n\nThe constructor in question is in the libc++ DSO, but fortunately it looks like fixing this will not result in an ABI break.\n\n\n@rsmith How does this look? I did more than just the constructors mentioned in the PR, but IDK how far to take it.\n\n\nReviewers: mclow.lists, rsmith\n\nReviewed By: rsmith\n\nSubscribers: cfe-commits, rsmith\n\nDifferential Revision: https://reviews.llvm.org/D29863\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"25380e401c15e78501a09f23987b9e0b27865df1","date":"2017-02-17T01:53:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove more basic_string member function templates from the dylib exports\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295398 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"43ec7b868c362099a4d3c6427a81abd5c1dc2fec","date":"2017-02-17T01:56:57.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"update revision in CHANGELOG.TXT and fix python error\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295399 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9aeac6b4e3e9469b69d6eefb07e761b5bd1da9a","date":"2017-02-17T02:31:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark a couple for basic_string member templates as inline. no ABI change this time.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"515ba559b91cc334e654644f86967de85d737846","date":"2017-02-17T03:25:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Remove unexpected handlers in C++17\n\nSummary:\nThis patch implements [P0003R5](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r5.html) which removes exception specifications from C++17.\n\nThe only changes to the library are removing `set_unexpected`, `get_unexpected`, `unexpected`, and `unexpected_handler`. These functions can be re-enabled in C++17 using `_LIBCPP_ENABLE_CXX17_REMOVED_UNEXPECTED_FUNCTIONS`.\n\n@mclow.lists what do you think about removing stuff is this way?\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: mclow.lists, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D28172\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ebcc5c9c4903c4b9f628186357fa1b8bdadcc07","date":"2017-02-17T03:30:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add doc for _LIBCPP_ENABLE_CXX17_DISABLED_AUTO_PTR and make it work under _LIBCPP_ENABLE_CXX17_REMOVED_FEATURES\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"224dbbb3d61fee2056520e74af983612cc96332e","date":"2017-02-17T05:04:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around Clang assertion when testing C++17  deduction guides with '-g'.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"836ae8fa96093c87b71ca0835e390a462c004ebe","date":"2017-02-17T06:59:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"add implicit deduction guide tests for string_view\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c9af4d2991184eb3bbb1a4ab8f14a85efc64dbf","date":"2017-02-17T07:00:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove dead code in test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295423 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ba5f008f884bca4f58b635155bf25cfc5f767b26","date":"2017-02-17T07:31:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use inline namespaces with GCC instead of __attribute__((__strong__)).\n\nGCC 7.0.1 started warning that __attribute__((__strong__)) is depricated.\nThis patch switches to using inline namespace with GCC instead. I believe\nthis wasn't done originally in order to support older GCC versions w/o\nsupport for inline namespaces, or because earlier versions of GCC warned\nusers that the STL was using an inline namespace (even though it shouldn't affect users).\n\nHowever I believe all of the above problems are gone for GCC 4.9 and greater.\nTherefore switching to using inline namespaces instead of using __strong__\nis the most correct behavior.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295428 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b7fd0be37076c8fe5a26a5850580426bcd4c0740","date":"2017-02-17T08:37:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update all bug URL's to point to https://bugs.llvm.org/...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295434 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e72cf6de5af38c172e9bc30948dd81e3eeab728e","date":"2017-02-17T23:08:42.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"cmath: Use c99 math on a new enough msvcrt\n\nMSVCRT 14+ supports the C99 math routines that we need.  Use them\naccordingly.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295509 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29a83004609da2a6d5395b0576cf12219b206a8f","date":"2017-02-17T23:08:44.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"math: fix typo in macro\n\nMAJOR was misspelt as NAJOR.  Fix the spelling.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"958d196f22c5ba074faf1e01bf66308d17323af1","date":"2017-02-17T23:08:46.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: prevent incorrect quoting of paths\n\nThe path would previously get an extra leading space as the arguments\nwould be parsed when generating the final command to run.  Pretokenise\nthe arguments to permit proper quoting of the paths.  This avoids a\nnumber of ignoring non-existent path warnings from clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295511 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"524f10955055bbce33bef3c34b6fc430c7263a54","date":"2017-02-18T19:28:36.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: explicitly size enumeration\n\nOn certain targets, enumerations may be smaller than an `unsigned long`.\nUse an explicitly sized enumeration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295558 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1eab168286c3dc764db59bbbee3b74fdf2f2c8a6","date":"2017-02-18T19:28:38.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"math: add type promoting template definition on MSVCRT\n\nWhen building with MSVCRT, we need to manually provide the type\npromoting overloads to allow the correct type deduced invocation for\nsignbit(Int) and fpclassify(int).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295559 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7556597a12efe4b654e48225d471995daf4d7bf6","date":"2017-02-18T19:28:41.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"test: silence warnings on clang under clang-cl\n\nWhen running under clang-cl mode, we do not define `__GNUC__`, resulting\nin the test failing.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295560 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e891cc8c09b265ae8102faff4694abd965959207","date":"2017-02-18T19:28:43.000Z","author":{"name":"Saleem Abdulrasool","email":"compnerd@compnerd.org"},"message":"Revert \"threading_support: make __thread_sleep_for be alertable\"\n\nThis reverts SVN r295329.  Although `__libcpp_thread_sleep_for` should\nbe alertable, the implementation causes a large regression in the test\nsuite.  Add a FIXME item there for now to get the test suite in a better\nstate before attempting to fix that behaviour.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@295561 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dec9851c7f3f994f80bb42c6da8077174bfa9dae","date":"2017-02-27T13:19:25.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Fix cmake dependency for the external-thread-library variant. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296338 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"62aeff93e94fac11c48bd166829805bc11bb18d3","date":"2017-02-27T15:49:51.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Fix typo in error message. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296346 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f017a82a255007eaae0872dd7262dec61f652a8","date":"2017-02-27T16:10:57.000Z","author":{"name":"Asiri Rathnayake","email":"asiri.rathnayake@arm.com"},"message":"Fix LIBCXX_HAS_EXTERNAL_THREAD_API builds. NFC.\n\nAdd the missing check in the __config header.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296351 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"244033db8b51d9f3ff581248f43f040777c23264","date":"2017-02-27T21:10:41.000Z","author":{"name":"Steven Wu","email":"stevenwu@apple.com"},"message":"Remove XFAIL in implicit_deduction_guides tests\n\nThe clang assertion causing these tests failing with sanitizer is fixed\nin r295794. All the bots running libcxx tests should be upgraded and\nrunning the compiler with the fix.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296385 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0268c19d723847b9c2973b577f67324449a01957","date":"2017-03-01T01:07:56.000Z","author":{"name":"Michael Park","email":"mpark@apache.org"},"message":"Updated the XFAIL comment in variant tests.\n\nSummary:\n`ConstexprTestTypes::NoCtors` is an aggregate type (and consequently a literal type) in C++17,\nbut not in C++14 since it has a base class. This patch updates the comment to accurately describe the reason for the XFAIL.\n\nReviewers: EricWF\n\nReviewed By: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D30481\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296558 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"67f7a781263dad0b1ea54eb2d2afb00f2fd938ef","date":"2017-03-01T01:27:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR32097 - is_abstract doesn't work on class templates.\n\nThis patch fixes llvm.org/PR32097 by using the __is_abstract\nbuiltin type-trait instead of the previous library-only implementation.\n\nAll supported compilers provide this trait. I've tested as far\nback as Clang 3.2, GCC 4.6 and MSVC trunk.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296561 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6422362d5f9683f7e1003fe244b3fe84d6cca6f","date":"2017-03-01T02:02:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve diagnostics when an invalid hash is used in an unordered container.\n\nThis patch adds a static assertion that the specified hash meets\nthe requirements of an enabled hash, and it ensures that the static\nassertion is evaluated before __compressed_pair is instantiated.\nThat way the static assertion diagnostic is emitted first.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296565 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9ddb9a2174d23cef5124bf3ebd83610d7a2e510","date":"2017-03-01T02:34:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failures due to bad test hasher\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296568 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0987c0c3919a8309383f49d6bc9d3ba6452c5aa3","date":"2017-03-01T02:52:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark test as unsupported in C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296571 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29ed46b12e6c5cf0e2f5aadae50137d8eb31bcac","date":"2017-03-01T03:09:18.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx] Support threads on Fuchsia\n\nDifferential Revision: https://reviews.llvm.org/D30278\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c57fb58f187066b14a625c3a84409e1b2169324c","date":"2017-03-01T21:53:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Generate the test configuration even when LIBCXX_INCLUDE_TESTS=OFF.\n\nThis patch changes the CMake configuration so that it always\ngenerates the test/lit.site.cfg file, even when testing is disabled.\n\nThis allows users to test libc++ without requiring them to have\na full LLVM checkout on their machine.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296685 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3acadce0c26c182c070c827e8fedc7745bd2802","date":"2017-03-01T23:14:34.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Fix Apple-specific XFAIL directive in libc++ test\n\nThese tests are failing in XCode 8.0, 8.1, and 8.2, but not in Xcode\n8.3. Annoyingly the version numbering for clang does not follow Xcode\nand is bumped to 8.1 only in Xcode 8.3. So Xfailing apple-clang-8.0\nshould catch all cases here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296704 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5876a625baa31baa822133aca0abb211aa4ac43a","date":"2017-03-01T23:45:03.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Fix Apple-specific XFAIL directive in libc++ test\n\nThis tests is failing in XCode 7.0. But Xcode 7.3 that shipped\nan updated clang has this test passing. This is fixing green dragon\nwhich runs this configuration.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296712 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a30d98b7ec6fc16510ac085f3a16c9ac2c7b35a8","date":"2017-03-02T00:03:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix python 3 syntax error in sym_diff\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296716 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c10e963f3d17c11a34ff4da9810940e63b130a7d","date":"2017-03-02T01:57:40.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Revert \"Fix Apple-specific XFAIL directive in libc++ test\"\n\nThis reverts commit r296712. It broke our bot.\n\nIt turns out that the test is passing with c++11 and c++14 but\nnot c++1z on this particular version of the compiler. Since one\njob is defaulting to c++1z and the other is testing all config I'm\nnot sure how to fix this...\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd89190e69590fb1a9434a3df362642789110644","date":"2017-03-02T02:01:11.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Recommit r296712: \"Fix Apple-specific XFAIL directive in libc++ test\"\n\nThe test is passing with c++11 and c++14 but not c++1z on this\nparticular version of the compiler. Try to use lit boolean condition\nto satisfy this constaint.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296725 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"459bbcdd4413a5ff427c212db0ece8c2290b1c47","date":"2017-03-02T02:04:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove more usages of REQUIRES-ANY in the test-suite\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4795f130eb51e786137012583e3a67d12720f2d6","date":"2017-03-02T02:51:27.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Mark some std::num_get method templates inline\n\nD29157 will make explicit template instantiations expand to default\nvisibility, at which point these method templates will need to be\nexplicitly marked hidden visibility to avoid leaking into other DSOs.\nUnfortunately, because of clang PR32114, they must be marked inline (in\nconjunction with `-fvisibility-inlines-hidden`) to actually hide them,\nsince clang doesn't respect the hidden visibility annotation.\n\nSince this involves an ABI change, mark these methods inline in a\nseparate change, so that the ABI changes can be reviewed separately and\nverified to be safe.\n\nDifferential Revision: https://reviews.llvm.org/D30523\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296729 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"24e8dbdd2d8d6ce75681d0bc9579c72c5942fc92","date":"2017-03-02T03:02:50.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Make _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS export members\n\nWhen building libc++ with hidden visibility, we want explicit template\ninstantiations to export members. This is consistent with existing\nWindows behavior, and is necessary for clients to be able to link\nagainst a hidden visibility built libc++ without running into lots of\nmissing symbols.\n\nAn unfortunate side effect, however, is that any template methods of a\nclass with an explicit instantiation will get default visibility when\ninstantiated, unless the methods are explicitly marked inline or hidden\nvisibility. This is not desirable for clients of libc++ headers who wish\nto control their visibility, and led to PR30642.\n\nAnnotate all problematic methods with an explicit visibility specifier\nto avoid this. The problematic methods were found by running\nhttps://github.com/smeenai/bad-visibility-finder against the libc++\nheaders after making the _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS change. The\nmethods were marked with the new _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS\nmacro, which was created for this purpose.\n\nIt should be noted that _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS was originally\nintended to expand to default visibility, and was changed to expanding\nto default type visibility to fix PR30642. The visibility macro\ndocumentation was not updated accordingly, however, so this change makes\nthe macro consistent with its documentation again, while explicitly\nfixing the methods which resulted in that PR.\n\nDifferential Revision: https://reviews.llvm.org/D29157\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b7349243eb2ba9c7875dd79833e5608ca6e0e13","date":"2017-03-02T03:22:18.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Make _LIBCPP_TYPE_VIS export members\n\nSummary:\nMost classes annotated with _LIBCPP_TYPE_VIS need to have at least some\nof their members exported, otherwise we have a lot of link errors when\nlinking against a libc++ built with hidden visibility. This also makes\n_LIBCPP_TYPE_VIS be consistent across platforms, since on Windows it\nalready exports members.\n\nWith this change made, any template methods of a class marked\n_LIBCPP_TYPE_VIS will also get default visibility when instantiatied,\nwhich is not desirable for clients of libc++ headers who wish to control\ntheir visibility; this is the same issue as PR30642. Annotate all\nproblematic methods with an explicit visibility specifier to avoid this.\n\nThe problematic methods were found by running bad-visibility-finder [1]\nagainst the libc++ headers after making the _LIBCPP_TYPE_VIS change. The\nsmall methods were marked for inlining; the larger ones hidden.\n\n[1] https://github.com/smeenai/bad-visibility-finder\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25208\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296732 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dc69aac6c6432b363adc454857cb0a7c5d0a3f11","date":"2017-03-02T19:35:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Add option to disable new/delete overloads when libc++abi provides them.\n\nSummary:\nCurrently both libc++ and libc++abi provide definitions for operator new/delete. However I believe this is incorrect and that one or the other should offer them.\n\nThis patch adds the CMake option `-DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS` which defaults no `ON` unless `-DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=ON` is specified.\n\n\n\nReviewers: mclow.lists, mehdi_amini, dexonsmith, danalbert, smeenai, mgorny, rmaprath\n\nReviewed By: mehdi_amini\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D30516\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6748b28c42cf2ac64f95f318e154e32fa052134","date":"2017-03-02T19:59:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update ABI list for 4.0 release\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296805 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f282bc8767e881d9cd0f95e84a6fb8ced7f733e1","date":"2017-03-02T21:16:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failures caused by new/delete calls getting optimized away\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296813 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cbd39f03a4d10e0d6c58f8fda07ca1dbfb3b0cb","date":"2017-03-02T21:55:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around GCC linking errors within libc++abi due to missing new/delete definitions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296822 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3df9fd892427238911676a280236efdb10a124fd","date":"2017-03-02T22:08:42.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Fix libc++ test experimental/algorithms/alg.random.sample/sample.pass.cpp when ran in c++11 mode 32 bits\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296830 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"92dbfc48cc0c8440fc3690f53c16615a5b327c84","date":"2017-03-02T22:10:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"remove max_size() extension from polymorphic_allocator. It is unneeded\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296831 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"778ec30428f6818514c9ff4ebf5ca8db0d84de91","date":"2017-03-02T23:18:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around test failure on 32 bit OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296840 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04732df052cb091f2374a6927e470064727ff4c8","date":"2017-03-03T02:02:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix sign-compare warning in test; Oddly this only appears on OS X\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296851 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4dfb45247a5b306ced6c71b2792530c1551078e","date":"2017-03-03T03:43:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Clean up more usages of _LIBCPP_HAS_NO_RVALUE_REFERENCES\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296854 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c795c2a010758d782f530ab534cb0d68614c3241","date":"2017-03-03T17:24:29.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Fix libc++ test to pass in C++03 mode\n\nWas hitting: \"error: scalar initializer cannot be empty\"\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296889 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c1b1d7f0bb5e6a30ab7b8bfa1b0f009aaf8db0e4","date":"2017-03-03T22:35:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix hash requirements check in __hash_table.\n\nr296565 attempted to add better diagnostics when an unordered container\nis instantiated with a hash that doesn't meet the Hash requirements.\n\nHowever I mistakenly checked the wrong set of requirements. Specifically\nit checked if the hash met the requirements for specializations of\nstd::hash. However these requirements are stricter than the generic\nHash requirements.\n\nThis patch fixes the assertions to only check the Hash requirements.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296919 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a075831614abc819566eba3576f9c1e13c6face8","date":"2017-03-03T22:47:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove the buildit and testit scripts; they haven't been supported in years\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296922 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b75f6de984f86537776521fb5f8a5f0a801740e7","date":"2017-03-04T01:29:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"teach LIT how to detect the glibc version\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"45a6abf0fd0b53f4376922d001b291d64ef4d9ce","date":"2017-03-04T12:28:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix nonsense comment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@296965 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e116393a063977d7f12ea4d2988fdeb206739fbf","date":"2017-03-06T16:06:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update list with changes from Kona meeting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297021 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd6055e52661d89caca93a53a1d487fc1ccb66ef","date":"2017-03-06T16:09:02.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Header update with info about the current status of C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297022 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5a99cf1939cdb12311bbec57b744366fd29d2d29","date":"2017-03-06T20:46:55.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Updated email address in `CREDITS.txt`.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297065 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76a3c6615374c30725afabd4468a5a026cb5ec46","date":"2017-03-06T20:49:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark two any_cast issues as complete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297066 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b537d38bb287ec8e2d4e70ed9a30ef9d3fa8a43b","date":"2017-03-06T20:56:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG 2781 as complete. No changes required\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297069 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7c7df6461c9746403d7618dd9d170bfbc108e265","date":"2017-03-06T21:02:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2787 - [file_status.cons] is inconsistent\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297071 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"27d4f668b33304b5c927a076e81a3b6b36d77234","date":"2017-03-06T21:07:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG 2789 as complete. No changes required\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297073 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f158316563daa72ba5fc89f1f05cd13d7314312e","date":"2017-03-06T21:09:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark LWG 2806 as complete. Libc++ speculatively shiped this change in 4.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297074 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f8ab3ed89adbadf1e916b62b0c2138e39d16edd","date":"2017-03-06T21:23:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add list of filesystem NB comments to TODO.TXT so they can be tracked separately\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297079 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f1dab6865e955e0a025780f80f64dfc5218e821e","date":"2017-03-08T20:06:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR32183 - Wrap GCC exception implementation in missing namespace std\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297306 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"15da97cb66c806b3b7e57a5601f3dae7fdbd56d5","date":"2017-03-09T00:18:00.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Avoid double defining macro on Windows\n\nPut proper guards around _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS.\nNo functional change on non-Windows. Avoids incorrect macro redefinition\non Windows.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3b7c1348ca31918186362fa75cd14c33ec2e72f4","date":"2017-03-09T01:54:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable unsigned integer sanitizer for basic_string::replace(). Patch from tomcherry@google.com\n\nbasic_string::replace() has the below line\n\n__sz += __n2 - __n1;\n\nwhich fails overflow checks if __n1 > __n2, as the negative result\nfrom the subtraction then overflows the original __sz when added to\nit.\n\nThis behavior is valid as unsigned integer overflow is defined to wrap\naround the maximum value and that produces the correct final value for\n__sz.  Therefore, we disable this check on this function.\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297355 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76880f55bf22de77f45db5fc9ebe66c63c7e0a16","date":"2017-03-11T00:07:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix DoNotOptimize on MSVC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297532 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c51e0d21a1702074241a1541dccbd1ea857bb350","date":"2017-03-11T03:24:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change test coverage generation to use llvm-cov instead of gcov.\n\nClang doesn't produce gcov compatible coverage files. This\ncauses lcov to break because it uses gcov by default. This\npatch switches lcov to use llvm-cov as the gcov-tool.\n\nUnfortunatly llvm-cov doesn't provide a gcov like interface by\ndefault so it won't work with lcov. However `llvm-cov gcov` does.\nFor this reason we generate 'llvm-cov-wrapper' script that always\npasses the gcov flag.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297553 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5cdf67386f64ed197b69ac0f6a2280efbb2d9dea","date":"2017-03-11T05:28:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"fix test coverage capture dirs\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297555 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd1f05915f74bafacb395ccc84c6f9b6e5cdd5d9","date":"2017-03-14T04:12:29.000Z","author":{"name":"Bruno Cardoso Lopes","email":"bruno.cardoso@gmail.com"},"message":"Fix cmake to find the compiler-rt libs on darwin\n\nFollowup for r297553, which left darwin in a broken state\nhttp://green.lab.llvm.org/green/job/clang-stage2-cmake-RgSan_build/3812\n\nrdar://problem/31011980\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297703 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"abba685fcda46bb775a8e34e66f6a176f0a780cb","date":"2017-03-14T17:08:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG2784, and mark 2786, 2795, 2804, 2812, 2826, 2834, 2837 and 2838 as complete - since we do them already\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297752 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"755dd5959cdfa4968c19efe4830aa48ab8beb937","date":"2017-03-14T17:24:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Also mark LWG#2785 as complete, because we already implemented that\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297753 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a16fa8ae274e049f694a0b69b4c86f0ffe0103e","date":"2017-03-14T17:35:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG issues 2868, 2872, and 2890 as complete. There's nothing we need to do for them.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297758 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b23f9c81d7d86cd023d5b43292e22bff76443e6","date":"2017-03-14T19:36:30.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Fixed unintentional assignment-in-assert in new \"extending memory management tools\" algorithms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297772 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e807cbcd5be09418adcb38a50098520fe009bc45","date":"2017-03-15T00:59:54.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Add deployment knobs to tests (for Apple platforms)\n\nThe tests for libc++ specify -target on the command-line to the\ncompiler, but this is problematic for a few reasons.\n\nFirstly, the -target option isn't supported on Apple platforms. Parts\nof the triple get dropped and ignored. Instead, software should be\ncompiled with a combination of the -arch and -m<name>-version-min\noptions.\n\nSecondly, the generic \"darwin\" target references a kernel version\ninstead of a platform version. Each platform has its own independent\nversions (with different versions of libc++.1.dylib), independent of the\nversion of the Darwin kernel.\n\nThis commit adds support to the LIT infrastructure for testing against\nApple platforms using -arch and -platform options.\n\nIf the host is not on OS X, or the compiler type is not clang or apple-clang, then this commit has NFC.\nIf the host is on OS X and --param=target_triple=... is specified, then a warning is emitted to use arch and platform instead. Besides the warning, there's NFC.\nIf the host is on OS X and *no* target-triple is specified, then use the new deployment target logic. This uses two new lit parameters, --param=arch=<arch> and --param=platform=<platform>. <platform> has the form <name>[<version>].\nBy default, arch is auto-detected from clang -dumpmachine, and platform is \"macosx\".\nIf the platform doesn't have a version:\nFor \"macosx\", the version is auto-detected from the host system using sw_vers. This may give a different version than the SDK, since new SDKs can be installed on older hosts.\nOtherwise, the version is auto-detected from the SDK version using xcrun --show-sdk-path.\n-arch <arch> -m<name>-version-min=<version> is added to the compiler flags.\nThe target triple is computed as <arch>-apple-<platform>. It is *not* passed to clang, but it is available for XFAIL and UNSUPPORTED (as is with_system_cxx_lib=<target>).\nFor convenience, apple-darwin and <arch>-apple-darwin are added to the set of available features.\nThere were a number of tests marked to XFAIL on x86_64-apple-darwin11\nand x86_64-apple-darwin12. I updated these to\nx86_64-apple-macosx10.7 and x86_64-apple-macosx10.8.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297798 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d4c3fa48a68d44ee9f8e2dd77e42548d712cf0c","date":"2017-03-15T18:41:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2761: 'basic_string should require that charT match traits::char_type'. Tests for string_view, too\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@297872 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b1f95bb0d877a6cb9507a4febbe4b9b3b28540b","date":"2017-03-20T18:18:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add two more papers from Kona, and sort them\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298284 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cf6e0db0b9caaf49dee2cdee1bdceeb60429935a","date":"2017-03-21T18:38:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0548: 'common_type and duration' This involves a subtle change in the return type of the unary +/- operators for std::chrono::duration, though I expect that no one will notice.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298416 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ccca38d07a8bbc01612aed3276e1ec667198c9f","date":"2017-03-21T18:40:46.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a bit more to one of the chrono tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298418 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b6874c8e2de455456b822bb30ecdb4519ebed78","date":"2017-03-21T19:12:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a couple of 'C++11'-isms from the last checkin, which broke the '03 bot.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298422 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"faf14a571aa89d39e5e58046581ebe57997786e2","date":"2017-03-21T21:05:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix test failure I introduced\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298438 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0da4cb892be645cf366eb7e3f267e647e5f77011","date":"2017-03-22T22:41:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Work around C1XX bug which breaks poisoned hash tests.\n\nSummary: This is my attempt to work around the C1XX bug described to me by @BillyONeal.\n\nReviewers: BillyONeal, STL_MSFT, CaseyCarter\n\nReviewed By: BillyONeal\n\nSubscribers: cfe-commits, BillyONeal\n\nDifferential Revision: https://reviews.llvm.org/D31260\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298554 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03096267d63ffc62898be94f454171d93bf5f845","date":"2017-03-23T00:48:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Address post-commit review comments regarding test_workarounds.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298566 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"af552ba05ab66f87d51e8de7b77f9dd65de1394f","date":"2017-03-23T02:40:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0599: 'noexcept for hash functions'. Fix a couple of hash functions (optional<T> and unique_ptr<T>) which were mistakenly marked as 'noexcept'. Reviewed as https://reviews.llvm.org/D31234\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298573 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"570f32c8dd02715d2448e69b47fc1c3fae90c9b1","date":"2017-03-23T06:20:18.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Can't test for noexcept on C++03; std::hash<nullptr_t> isn't available until C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298580 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad3680b23e99b1266c61282c216ae454aded1d10","date":"2017-03-23T06:21:24.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Worked around GCC bug 56480. Explicit specialization in a different namespace.\n\nSummary: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56480\n\nReviewers: EricWF\n\nReviewed By: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D31273\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46da6b82953b3745432d9b5abbe327450338f03d","date":"2017-03-23T06:25:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Silence a couple of 'unused variable' warnings in c++03 tests. No functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298582 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"03b862f6eadb02a7e116e7ad309254b4c093e755","date":"2017-03-23T13:43:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove random_shuffle in C++17.  Please use shuffle instead. If you have to, you cant get it back by defining _LIBCPP_ENABLE_CXX17_REMOVED_RANDOM_SHUFFLE before including any libc++ headers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298597 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a901b56e773329caf83e29dc5ec9b294f8a599a0","date":"2017-03-23T13:44:06.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"One more file for the random_shuffle removal\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298598 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"699c414d73095e763910e06985310a39ebb61a39","date":"2017-03-23T14:20:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Use 'REQUIRES: c++98 || c++03 || c++11 || c++14' instead of the deprecated 'REQUIRES-ANY: c++98, c++03, c++11, c++14'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298600 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50145cc3e9013e35be1d2471590b0841f5b639da","date":"2017-03-23T14:39:23.000Z","author":{"name":"Bruce Mitchener","email":"bruce.mitchener@gmail.com"},"message":"[libcxx] Improve code generation for vector::clear().\n\nSummary:\nBy manipulating a local variable in the loop, when the loop can\nbe optimized away (due to no non-trivial destructors), this lets\nit be fully optimized away and we modify the __end_ separately.\n\nThis results in a substantial improvement in the generated code.\n\nPrior to this change, this would be generated (on x86_64):\n\n    movq    (%rdi), %rdx\n    movq    8(%rdi), %rcx\n    cmpq    %rdx, %rcx\n    je    LBB2_2\n    leaq    -12(%rcx), %rax\n    subq    %rdx, %rax\n    movabsq    $-6148914691236517205, %rdx ## imm = 0xAAAAAAAAAAAAAAAB\n    mulq    %rdx\n    shrq    $3, %rdx\n    notq    %rdx\n    leaq    (%rdx,%rdx,2), %rax\n    leaq    (%rcx,%rax,4), %rax\n    movq    %rax, 8(%rdi)\n\nAnd after:\n\n    movq    (%rdi), %rax\n    movq    %rax, 8(%rdi)\n\nThis brings this in line with what other implementations do.\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D25241\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298601 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50e32f569cafe323c9b6cf31bfe641a06481977f","date":"2017-03-23T16:13:50.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update the algorithm tests to not use the (deprecated) function binders. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298618 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59bcc879abd489e2399fa138783e9a3db14a478f","date":"2017-03-24T03:40:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement Pp0156r2: 'Variadic Lock Guard, version 5'  Reviewed as https://reviews.llvm.org/D31163.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298681 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0c70c79106e39db7fbc1372dc5ce6c11d85b9b52","date":"2017-03-24T05:19:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Move the scoped_lock inside the '#ifndef NO_THREADS' block to fix the no-threading build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298686 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21ae16e203a4975c18bd3cdc7cfab33f5160ac2e","date":"2017-03-24T05:45:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement P0298R3: 'std::byte'. Reviewed as https://reviews.llvm.org/D31022\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298689 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5048b1e0924884906a0f5e6ee06d270ce32999d9","date":"2017-03-24T16:17:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"XFAIL the std::byte tests on a bunch of old clang versions, because they don't like 'std::byte b1{1}'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298706 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5b0087fc62b3864853d794fdd2c4df4007d13ed7","date":"2017-03-25T03:12:37.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Update package version\n\nMake it consistent with the rest of LLVM.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298762 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e577401c13b8cef3dbcea5659305bba0e9c92ae0","date":"2017-03-25T03:22:35.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Fix capitalization in comment\n\nFix a stray capital letter in the middle of a sentence. No functional\nchange.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298763 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f23e281656e7dffa312ad788dbadbe5d606dc243","date":"2017-03-25T03:29:51.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Fix word transposition in comment\n\n\"to due\" -> \"due to\". No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298764 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68fdad67e334de18451c749550908274a5fd2542","date":"2017-03-25T03:42:20.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Fix some comment typos\n\nRemove a stray letter, add a missing letter. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298766 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76c1482e7cd544aeb5fe7ad898d223790359ae6f","date":"2017-03-27T06:31:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark *fail tests as UNUSUPPORTED instead of XFAIL on old compilers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298832 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b148779b383f36e7fec8d40b1956831b0ec3bd5","date":"2017-03-27T10:44:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark *pass tests as UNUSUPPORTED instead of XFAIL on old compilers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298839 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f012f260c391937dc5810c5a640f33447a8525cd","date":"2017-03-28T19:33:31.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Add a key function for bad_function_call\n\nSummary:\nbad_function_call is currently an empty class, so any object files using\nthat class will end up with their own copy of its typeinfo, typeinfo\nname and vtable, leading to unnecessary duplication that has to be\nresolved by the dynamic linker. Instead, give bad_function_call a key\nfunction and put a definition for that key function in libc++ itself, to\ncentralize the typeinfo and vtable.\n\nThis is consistent with the behavior for other exception classes. The\nkey functions are defined in libc++ rather than libc++abi since the\nclass is defined in the libc++ versioning namespace, so ABI\ncompatibility with libstdc++ is not a concern.\n\nGuard this change behind an ABI macro, since it isn't backwards\ncompatible (i.e., clients built against the new libc++ headers wouldn't\nbe able to run against an older libc++ library).\n\nReviewers: mclow.lists, EricWF\n\nSubscribers: mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D27387\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@298937 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a74c73d3f962b1f7e31923438f10ab7c109674a","date":"2017-03-30T04:40:56.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Do not pass an explicit reexported symbol list when building libc++ dylib if also defining new/delete\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299052 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f18ccd87b3f960e8f2da1fc9bc96db5673f4b8be","date":"2017-03-30T04:45:33.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"libc++ testing: allow to provide a path for `use_system_cxx_lib`\n\nAs we're trying to setup testing / bots for all shipping version of libc++\non macOS/iOS, we'll need to be able to pass a path to where to find the\ndylib for each previous version of the OS.\n\nDifferential Revision: https://reviews.llvm.org/D31486\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299053 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f140f00413c0371241ea88dbe70c993183cfea4","date":"2017-03-30T04:47:19.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Reexport operator new / delete from libc++abi\n\nBoth libc++ and libc++abi export a weak definition of operator\nnew/delete. On Darwin, this can often cause dirty __DATA in the\nshared cache when having to switch from one to the other. Instead,\nlibc++ should reexport libc++abi's implementation of these symbols.\n\nPatch by: Ted Kremenek <kremenek@apple.com>\n\nDifferential Revision: https://reviews.llvm.org/D30765\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299054 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6c9ed3296e872101f762530d6981811f9a3987de","date":"2017-03-30T04:51:19.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"libc++ config testing: `use_system_cxx_lib` can be a bool\n\nFix the libc++ Green Dragon bot.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299055 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1d7c51f6e4002c193058a75dbb033ba12cfa345","date":"2017-03-30T05:07:18.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"libc++ testing: fix assertion around `use_system_cxx_lib`\n\nActually fix (hopefully) the assertions about `use_system_cxx_lib`,\nthe previous attempt failed because I misread the error.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299056 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9783bae9287c5d40cf1c4bd9b940bae5cd2c1976","date":"2017-03-30T05:21:33.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"libc++ testing: fix invalid python syntax\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299057 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5612bd42dca629a808a855402e6f7ecea1d77427","date":"2017-03-30T19:43:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2842 - optional(U&&) needs to SFINAE on decay_t<in_place_t>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299100 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b3c1c4d9b7e38973d8e8b18db3f78bec8a43b39","date":"2017-03-30T20:06:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix LWG 2934 - optional<const T> doesn't compare with T\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299105 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ccc0f58ef74fe8bc3c4203db9f32d431b701f142","date":"2017-03-31T00:34:05.000Z","author":{"name":"Reid Kleckner","email":"rnk@google.com"},"message":"Try to fix the libcxx build with mingw64\n\nSummary:\nmingw64 has lots of default libs that libc++ and its test programs\nshould link against.\n\nWith this patch, cmake now runs successfully with GCC on Windows.\n\nReviewers: mati865, EricWF\n\nSubscribers: mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D31518\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299144 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cc6415930b6f4b266b1fb3728a5189b3e578a218","date":"2017-03-31T17:39:56.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"Use strong enums independently of -fobjc-arc\n\nr145698 introduced _LIBCPP_HAS_NO_STRONG_ENUMS by copy-pasting the\n__has_feature check from objc_arc_weak/_LIBCPP_HAS_OBJC_ARC_WEAK, and\naccidentally started defining _LIBCPP_HAS_NO_STRONG_ENUMS whenever\n__has_feature(objc_arc_weak).  This is totally bogus, and means that\nLibc++ thinks Objective-C++ compilations with -fobjc-arc don't have\nstrong enums.\n\nDelete the accidental line.\n\nI thought about adding a test, but it would be entirely duplicative of\nthe patch (if has-feature strong enums, check that has-no-strong-enums\nis not defined).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed3c0e6b3f3b61180710214e79a80a5342fb467d","date":"2017-04-01T03:20:48.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"string: Remove always_inline from basic_string::__init\n\nThis is effectively a partial revert of r278356, which started inlining\nbasic_string::__init.  Even if we want to help the compiler along with\nan inlinehint, we shouldn't hamstring it by forcing it to inline all the\ntime.\n\nLibc++ uses always_inline widely as a limit-the-ABI-hack, but since\n__init is already on the dylib boundary, it makes no sense here and just\nharms the debugging experience at -O0.\n\nrdar://problem/31013102\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299290 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9dcbb46826fd4d29b1485f25e8986d36019a6dca","date":"2017-04-03T04:04:24.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Explicitly mark specializations as dllexport\n\nMethod specializations don't get exported even if there's an exported\nextern template instantiation on Windows. Explicitly mark the methods\nfor export. They're already exported on Linux and Darwin, so there's no\nABI change on those platforms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299348 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3b3a65d89b16a397882b3e88d50539a79919931","date":"2017-04-03T20:53:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"suppress GCC warning about noexcept functions changing mangling\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299385 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6547dc88b401260bab3016f29e5eed6f0b6b4ba2","date":"2017-04-03T23:23:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++17 dylib build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299401 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0867373a5c15190d7937f14173ae4a8e0cf19bb6","date":"2017-04-04T01:05:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around recent -Wshadow changes in Clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"607e0c71ec4f7fd377ad3f6c47b08dbe89f66eaa","date":"2017-04-04T02:54:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more -Wshadow warnings introduced by recent Clang change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299411 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1662a857dbd02c4ec3fea5ae9b55805e87102c52","date":"2017-04-05T22:53:05.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake][libcxx] Use builtins rather than gcc_s when compiler-rt is requested\n\nWhen compiler-rt is requested, we should attempt to link compiler-rt\nbuiltins library rather than gcc_s.\n\nDifferential Revision: https://reviews.llvm.org/D31617\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299599 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6dcde2cf111a16e826d51203a6ab0bf7a7679a3e","date":"2017-04-06T01:10:22.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Use alternate string layout for ARMv7k\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299606 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2fe5562fc1789c2c3bfae0434e3f18f0d331f2c0","date":"2017-04-06T01:14:57.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Fix remote test execution in lit\n\nCan be used as such:\n\n  $ python /path/to/lit.py -sv /path/to/llvm/build/projects/libcxx/test/ \\\n    --param=use_system_cxx_lib=true \\\n    --param=executor='SSHExecutor(\"remote.domain\", \"username\")'\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299607 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9a13b433e32679309eb51c7d873acc0829154593","date":"2017-04-06T04:47:49.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Respect Windows Store app CRT restrictions\n\nSome CRT APIs are unavailable for Windows Store apps [1]. Detect when\nwe're targeting the Windows Store and don't try to refer to non-existent\nCRT functions in that case. (This would otherwise lead to a compile\nerror when using the libc++ headers and compiling for Windows Store.)\n\n[1] https://docs.microsoft.com/en-us/cpp/cppcx/crt-functions-not-supported-in-universal-windows-platform-apps\n\nDifferential Revision: https://reviews.llvm.org/D31737\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de4f6cbb5e68ef321e50896a4b3dd38bfa4625e5","date":"2017-04-06T14:32:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Restore Missing awk regex tests. Thanks to dexonsmith for noticing, and proposing this as https://reviews.llvm.org/D16541\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299652 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4cbff19346e8e56f0ad029bd15725046901820a3","date":"2017-04-06T15:56:55.000Z","author":{"name":"Mehdi Amini","email":"mehdi.amini@apple.com"},"message":"Revert \"Restore Missing awk regex tests. Thanks to dexonsmith for noticing, and proposing this as https://reviews.llvm.org/D16541\"\n\nThis reverts commit r299652, 32bits MacOS is broken.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299656 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e7a5f18b1c9c47f484d9c9012e919e57d2748698","date":"2017-04-06T18:34:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Recommit awk tests with warnings removed. Initial commit r299652, reverted r299656.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299680 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"abdcc5c29c095fa6af2e53f7010881947de57dab","date":"2017-04-06T18:54:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Some of Eric's buildbots don't like this test. Disable it while I figure out why.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299686 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"effdf248ec678a8f5fd1f139428a94c0de272dd9","date":"2017-04-06T21:06:33.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake][libcxx] Use check_c_compiler_flag to check for nodefaultlibs\n\nWe're using -nodefaultlibs to avoid the dependency on C++ library\nwhen using check_cxx_compiler_flag, and as such we cannot use\ncheck_cxx_compiler_flag to check the availability of -nodefaultlibs\nitself.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299711 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2889d45aaab654382eb4140ea5224c1948f7e880","date":"2017-04-06T23:50:21.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Allow a standard library to implement conditional noexcept for optional and unique_ptr hash functions.\n\nThese tests were unconditionally asserting that optional and unique_ptr declare throwing hashes, but MSVC++ implements conditional noexcept forwarding that of the underlying hash function. As a result we were failing these tests but there's nothing forbidding strengthening noexcept in that way.\n\nChanged the ASSERT_NOT_NOEXCEPT asserts to use types which themselves have non-noexcept hash functions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0bdae913c374cfcb2e05c9d6f39abdbd4998977e","date":"2017-04-06T23:50:33.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Add noexcept(false) to more strongly indicate that not being noexcept is important for hash tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299735 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04b59f934e3b639e5866aea40b7089fdc5f0f080","date":"2017-04-07T02:20:52.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Drop support for CRTs older than VS 2015\n\nLLVM dropped support for Visual Studio versions older than 2015 quite\nsome time ago, so I consider it safe to drop libc++'s support for older\nCRTs. The CRT in Visual Studio 2015 provides a lot of previously missing\nfunctions, so targeting it requires less special casing.\n\nDifferential Revision: https://reviews.llvm.org/D31798\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"733ab2f9f07bdd8658c8490997f4e97eab2b7f71","date":"2017-04-07T05:55:28.000Z","author":{"name":"Akira Hatanaka","email":"ahatanaka@apple.com"},"message":"Revert \"Allow a standard library to implement conditional noexcept for optional and unique_ptr hash functions.\"\n\nThis reverts commit r299734.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299744 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c50c6b79c309d0a46f741fdf1c33f6f0ef9b74fa","date":"2017-04-10T22:51:07.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#32606: std::decay mishandles abominable function types\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299894 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a43fe068885e47c7e5c44888353cfa47353588ad","date":"2017-04-10T23:47:47.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix PR#32605: common_type<T> is not SFINAE-friendly\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299901 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"726efd8dfd4fcb3282a8c685d55eaad067d5d9af","date":"2017-04-11T00:18:28.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove some trigraphs that GCC was complaining about\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299907 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f4f8803751e823acc58fd985586e6dd2e079ee6b","date":"2017-04-11T01:54:48.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a C++03 failure\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299909 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"41324261fac47d89e22bcef54420b43851272801","date":"2017-04-11T14:04:03.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark P0599 as complete. It was implemented in r298573\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299941 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fe1d923fd3498bc55d2238626dd87a3a6910f06f","date":"2017-04-11T14:06:39.000Z","author":{"name":"Ben Craig","email":"ben.craig@ni.com"},"message":"[libc++] Fix unknown pragma warning on MSVC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01208afbd62ed67b33424e8b9bf0477b992bc1b8","date":"2017-04-11T17:08:53.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2873: 'Add noexcept to several shared_ptr related functions' This issue missed a couple, so I added those as well (see LWG#2942)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@299963 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a98a45148f028c7f3f93fdaeb513ca2c36e384dd","date":"2017-04-12T00:07:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some FAIL constexpr tests for optional's copy/move ctors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300009 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"00f804a0a58f86885f96b317ae4cca085c085f2f","date":"2017-04-12T17:16:38.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Avoid Clang's -Wunused-const-variable in is_constructible.pass.cpp.\n\nThis happens when using Clang with MSVC's STL, so there are no actual uses of this variable.\n\nFixes D31966.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300079 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d5fdc110f42a3d43029963d3fdb30714f79d074","date":"2017-04-12T19:56:37.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Use more appropriate conditional for ABI macro definition\n\nThe inline function definition ABI macro is gated on COFF dllexport\nsemantics, so it's more appropriate to mark it with the object file\nformat macro rather than the generic _WIN32 macro. We now have no uses\nof _WIN32 apart from those used to define the other Windows macros :)\n\nClarify the ABI macro comment and make the object file format check\nexhaustive while I'm here.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"39683f13779361f4f35ef71aa18e18bcfc0e799d","date":"2017-04-12T22:43:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix incorrectly qualified return type from  unique_ptr::get_deleter().\n\nFor reference deleter types the const qualifier on the return type\nof get_deleter() should be ignored, and a non-const deleter should\nbe returned.\n\nThis patch fixes a bug where \"const deleter_type&\" is incorrectly\nformed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300121 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"22381ddf4fde34c187ef7e53d562677388f6b5ed","date":"2017-04-12T22:51:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement part of LWG#2857 - any/optional. Still to do - variant. Reviewed as https://reviews.llvm.org/D31956\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300123 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9bd669bd90dc95fc29ec9b8d1c7abd86800e4022","date":"2017-04-12T22:51:56.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Additional test file for r300123\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300124 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b41c797ba9c49a75aaf0d5a4fd7a6db0574f5e5","date":"2017-04-12T23:08:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Implement LWG 2911 - add an is_aggregate type-trait\n\nSummary:\nThis patch implements http://cplusplus.github.io/LWG/lwg-defects.html#2911.\n\nI'm putting this up for review until __is_aggregate is added to clang (See D31513)\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D31515\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300126 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"87fd9b2370f6d9907f3da68980b0960e25325643","date":"2017-04-12T23:17:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failures with older Clang versions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300132 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db14bcc51c71ee5f859534225e2e0ced7a31d8f9","date":"2017-04-12T23:45:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix __compressed_pair so it doesn't copy the argument multiple times, and add constexpr.\n\nSummary:\n__compressed_pair takes and passes it's constructor arguments by value. This causes arguments to be moved 3 times instead of once. This patch addresses that issue and fixes `constexpr` on the constructors.\n\nI would rather have this fix than D27564, and I'm fairly confident it's not ABI breaking but I'm not 100% sure.\n\nI prefer this solution because it removes a lot of code and makes the implementation *much* smaller.\n\nReviewers: mclow.lists, K-ballo\n\nReviewed By: K-ballo\n\nSubscribers: K-ballo, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D27565\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300140 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"161ccc1a72083c64f22893252eb0b3865b49ba5f","date":"2017-04-13T00:34:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix most failures caused by r300140\n\nr300140 introduced a bunch of failures by changing the internal\ninterface provided by __compressed_pair. This patch fixes all of\nthe failures caused by the new interface by changing the existing\ncode to use it.\n\nIn addition to those changes this patch also fixes two separate\nissues causing test failures:\n\n1) Fix the member swap definition for __map_value_compare. Previously\n   the swap was incorrectly configured to swap the comparator as const.\n\n2) Fix an assertion failure in futures.task.members/ctor_func_alloc.pass.cpp\nthat incorrectly expected a move to take place when a single copy is sufficient.\n\nThere is one remaining failure regarding make_shared. I'll commit a fix for that\nshortly.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300148 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55d7bd0e5f0847e3a67144747917e2924788ddf6","date":"2017-04-13T00:50:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix the default constructibility of __compressed_pair.\n\nThis patch fixes a bug where the =default default ctor for\n__compressed_pair was incorrect for const qualified types.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300152 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dca3bcdd97740b86e248d7778daf270d0ea8335a","date":"2017-04-13T01:02:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more bad member swap definitions in unordered_map.\n\nThe __unordered_map_equal and __unordered_map_hash wrappers\nattempt to swap const qualified predicates whenever the predicate\nis empty, and is subject to the EBO.\n\nSwapping const values seems blatently incorrect. This patch removes\nthe const qualifier so the values are swapped as non-const.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300154 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3b7f79609f7b4e73e4497da211186c6f91ec8cd1","date":"2017-04-13T01:03:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update tests -verify error messages after r300140.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300156 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0cb22a2fb4b7463115b682545b829715e5acd48a","date":"2017-04-13T01:11:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests that std::unique_ptr's default constructor is constexpr.\n\nstd::unique_ptr's default constructor must be constexpr in order\nto allow constant initialization to take place for static objects;\nEven though we can never have a constexpr unique_ptr variable since\nit's not a literal type.\n\nThis patch adds tests that constant initialization takes place by\nusing the __attribute__((require_constant_initialization)) macro.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dd5982633c1e5f4d744040ac9db9d81c14abaa59","date":"2017-04-13T01:13:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 test failures\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300159 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"706e2c7374ac18fdb0e2d65a85f352651ac24a71","date":"2017-04-13T02:54:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Diagnose when reverse_iterator is used on path::iterator.\n\npath::iterator isn't a strictly conforming iterator. Specifically\nit stashes the current element inside the iterator. This leads to\nUB when used with reverse_iterator since it requires the element\nto outlive the lifetime of the iterator.\n\nThis patch adds a static_assert inside reverse_iterator to disallow\n\"stashing iterator types\", and it tags path::iterator as such a type.\n\nAdditionally this patch removes all uses of reverse_iterator<path::iterator>\nwithin the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300164 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e4b267b262fc750242f068f559c39d9f86fc00fe","date":"2017-04-13T02:56:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix template >> within C++03 code\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300165 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0301092a7b1b1f573fbb6bfb8719f741bd4ac367","date":"2017-04-13T05:27:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup any_cast failure test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300175 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3b3b1f4a1eda0e9b1163de095598f02c09e2a49","date":"2017-04-13T10:17:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add TEST_NOEXCEPT_FALSE to support D31738\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300191 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ac5bc55962461645e741c64fba3b0c85cd3b8b3","date":"2017-04-13T14:41:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Refactor throw_with_nested. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300197 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b975b451afb5b4fde42e7422ea4c54cdc3cffa8a","date":"2017-04-13T16:27:38.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Explicitly set output directory for DLL\n\nDLLs on Windows are treated as runtime targets. Explicitly set the\noutput directory for them, to be consistent with other platforms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300206 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6403571b400521b37bebb1c1d794e4084685f39d","date":"2017-04-13T16:57:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2855 - made easy by previous refactoring\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300218 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"059256914c5dd8684c44629a020aac50159d1401","date":"2017-04-13T18:25:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Remove the binders from C++17. Reviewed as https://reviews.llvm.org/D31769\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300232 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e1c9dfba1a33d58537fcd3fe39e4ecb1c82541d6","date":"2017-04-13T20:13:32.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Add _LIBCPP_DISABLE_EXTERN_TEMPLATE config option\n\nWhen the libc++ extern template macros were added, the intent was for it\nto be possible for consumers of the headers to disable extern templates\n(via `-D_LIBCPP_EXTERN_TEMPLATE(...)=`). Unfortunately, support for\nspecifying function-like macros varies on the command line varies across\ncompilers (e.g. MSVC doesn't support it at all), and cmake doesn't allow\nit for the same reason. Add a non-function macro for this purpose.\n\nThe intended use is for libraries which want to use the libc++ headers\nwithout taking a dependency on the libc++ library itself. I can name the\nmacro something which reflects its intent rather than its behavior (e.g.\n`_LIBCPP_HEADER_ONLY`) if desired.\n\nDifferential Revision: https://reviews.llvm.org/D31725\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300246 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"82a50d6474eb7e4706cfa0800d55c9d6f11d2c65","date":"2017-04-13T21:29:21.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx] Direct support for Fuchsia\n\nFuchsia's libc was forked from musl, but has evolved sufficiently\nsince then so it no longer makes sense to pretend it's musl. This\nchange implements direct support for Fuchsia rather than\npiggybacking on musl support.\n\nDifferential Revision: https://reviews.llvm.org/D31970\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300261 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"dfac40a8fc1ab5b4b1246412b4c1a8e11975c909","date":"2017-04-15T02:45:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make clang-format use C++03 syntax\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300387 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"81f58e5052d3f4631b7b3e5f37df9dd5b51cc926","date":"2017-04-15T05:28:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rewrite and cleanup unique_ptr tests.\n\nThis patch almost entirely rewrites the unique_ptr tests. There are a couple\nof reasons for this:\n\nA) Most of the *.fail.cpp tests were either incorrect or could be better written\n  as a *.pass.cpp test that uses <type_traits> to check if certain operations\n  are valid (Ex. Using static_assert(!std::is_copy_constructible_v<T>) instead\n  of writing a failure test).\n\nB) [unique.ptr.runtime] has very poor test coverage. Many of the constructors\n  and assignment operators have to tests at all. The special members that have\n  tests have very few test cases and are typically way out of date.\n\nC) The tests for [unique.ptr.single] and [unique.ptr.runtime] are largely\n  duplicates of each other. This means common requirements have two different\n  sets of tests in two different test files. This makes the tests harder to\n  maintain than if there was a single copy.\n\nTo address (A) this patch changes almost all of the *.fail.cpp tests into\n.pass.cpp tests using type traits; Allowing the *.fail.cpp tests to be removed.\n\nThe address (B) and (C) the tests for [unique.ptr.single] and [unique.ptr.runtime]\nhave been combined into a single directory, allowing both specializations to share\ncommon tests. Tests specific to the single/runtime specializations are given the\nsuffix \"*.single.pass.cpp\" or \"*.runtime.pass.cpp\".\n\nFinally the unique.ptr test have been moved into the correct directory according\nto the standard. Specifically they have been removed from \"utilities/memory\" into\n\"utilities/smartptr\".\n\nPS. This patch also adds newly written tests for upcoming unique_ptr changes/fixes.\nHowever since these tests don't currently pass they are guarded by the macro\nTEST_WORKAROUND_UPCOMING_UNIQUE_PTR_CHANGES. This allows other STL's to validate\nthe tests before libc++ implements the changes. The relevant libc++ changes should\nland in the next week.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300388 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9ea4041df83cdd1d2340bd39e980bf60d9beeab0","date":"2017-04-15T05:41:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libcxx] Fix check-cxx-abilist on OS X\n\nSummary:\nRecent commits broke the check-cxx-abilist by changing the default OS X to use `-rexport_library` instead of `-reexport_symbol_list`. Apparently `-reexport_library` doesn't export the symbols into `libc++.dylib`s symbol table, whereas `-reexport_symbol_list` does.\n\nThis means the change removed ~500 symbols from the symbol table. I've been told this change is non ABI breaking, but it does make it harder to maintain the ABI lists, and hence the ABI.\n\nThis patch fixes the issue by switching back to `-reexport_symbol_list`. It still avoid the issues fixed in r299052 by putting the new/delete symbols in a different symbol list file, which is only exported when LIBCXX_ENABLE_NEW_DELETE_DEFINITIONS in OFF.\n\n\nReviewers: mehdi_amini, smeenai, dexonsmith\n\nReviewed By: smeenai\n\nSubscribers: mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D31644\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"622c7d584632b35fb48b817b066c8d619ff660a5","date":"2017-04-15T06:49:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix PR32642 - string::insert and string::append don't work with move_iterator.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300397 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ad335bfc0e0aa07d25575d915897fa95cf7f974","date":"2017-04-15T12:05:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Simplify test helper\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300399 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98d9a858da5c08085eeec92f7edabd2555225ef2","date":"2017-04-15T19:32:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2857 for variant. Tests from Casey Carter @ Microsoft.\n\nAlso mark LWG 2857 as complete, since the changes to optional and\nany were completed by Marshall earlier.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300403 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a4fd0c9d612bde45184460088d8c2e20510a74b4","date":"2017-04-16T01:51:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Overhaul unique_ptr - Implement LWG 2801, 2905, 2520.\n\nThis patch overhauls both specializations of unique_ptr while implementing\nthe following LWG issues:\n\n* LWG 2801 - This issue constrains unique_ptr's constructors when the deleter type\n  is not default constructible. Additionally it adds SFINAE conditions\n  to unique_ptr<T[]>::unique_ptr(Up).\n\n* LWG 2905 - This issue reworks the unique_ptr(pointer, /* see below */ deleter)\n  constructors so that they correctly SFINAE when the deleter argument cannot\n  be used to construct the stored deleter.\n\n* LWG 2520 - This issue fixes initializing unique_ptr<T[]> from nullptr.\n  Libc++ had previously implemented this issue, but the suggested resolution\n  still broke initialization from NULL. This patch re-works the\n  unique_ptr<T[]>(Up, deleter) overloads so that they accept NULL as well\n  as nullptr.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300406 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e3aef86de204d246fa2420b358409d61c71e04a3","date":"2017-04-16T02:06:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup default_delete specializations\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300407 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"745a5cd57f36498fb41684ccbb4eaa275b9c8324","date":"2017-04-16T02:14:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup and better scope unique_ptr internals\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300408 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cebb3e984fafb2da3403b75263a983178af9eff2","date":"2017-04-16T02:25:55.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[CMake][libcxx] Fix the --target and --gcc-toolchain flag handling\n\nCMake has the problem with the single dash variant because of the\nspace, so use the double dash with equal sign version. We also\ndon't have to pass the target triple when checking for compiler-rt\nsince that flag is already included in compile flags now.\n\nDifferential Revision: https://reviews.llvm.org/D32068\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300409 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ad421ef159829ff93603f534728d730cdf771a42","date":"2017-04-16T02:40:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace _LIBCPP_HAS_NO_<C++03 feature> with _LIBCPP_CXX03_LANG in vector.\n\nThis patch cleans up all usages of the following feature test macros inside\n<vector> and its tests:\n\n* _LIBCPP_HAS_NO_RVALUE_REFERENCES\n* _LIBCPP_HAS_NO_VARIADICS\n* _LIBCPP_HAS_NO_GENERALIZED_INITIALIZERS\n\nWhere needed the above guards were replaced with _LIBCPP_CXX03_LANG.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300410 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ffaa304088cfa328cde8b4ceb1e5b144e1277c9b","date":"2017-04-16T02:47:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround Clang bug regarding template template parameters\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300411 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6c26be6c876670b71eba01225f6dd03ce3aca7e3","date":"2017-04-16T02:50:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace _LIBCPP_HAS_NO_<C++03 feature> with _LIBCPP_CXX03_LANG in <array>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300412 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"48503005c364658c28c7240d1fd988f97367a313","date":"2017-04-16T03:17:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace _LIBCPP_HAS_NO_<C++03 feature> with _LIBCPP_CXX03_LANG in deque\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300413 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55ff80ecacf05f35604328997b70f93f84bcbebc","date":"2017-04-16T03:45:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace _LIBCPP_HAS_NO_<C++03 feature> with _LIBCPP_CXX03_LANG in <list>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300414 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed67bb60077f0e8e27950d7b303de8526bc6b5da","date":"2017-04-16T04:02:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Replace _LIBCPP_HAS_NO_<C++03 feature> with _LIBCPP_CXX03_LANG in <forward_list>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300415 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1cbdb0cb0e751ed518f8c027276371c50b3c4802","date":"2017-04-16T04:05:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup one more <forward_list> test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5e1df5e1708a54b91827bde2e015add392e21e79","date":"2017-04-17T13:19:14.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2853 as complete. No code changes required, but added a couple of extra tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300449 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"07d84589324e1a419f1cac35a0d088b6702001c1","date":"2017-04-17T14:18:44.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Sigh. Once again forgot about the 'no exceptions' bots.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"634a2b535f23cf80c9e2cb971c23bbe8610c9624","date":"2017-04-17T20:15:16.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[optional] Update synopsis for LWG2934\n\n(comment-only change)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300488 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7e698523da09ccaa22be62fefad92133bd7ec87c","date":"2017-04-17T20:20:27.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix passing incorrectly value-category when constructing unique_ptr's deleter\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300489 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"55dc5daa60b46c454ed9ab28969df222e776b8a6","date":"2017-04-17T22:32:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around GCC 4.9 bug regarding default initialization of const variables\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"937aecfb3d094fa12dc4ac6904af65ad96131304","date":"2017-04-18T00:19:50.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Allow a standard library to implement conditional noexcept for optional and unique_ptr hash functions.\n\nThese tests were unconditionally asserting that optional and unique_ptr declare throwing hashes, but MSVC++ implements conditional noexcept forwarding that of the underlying hash function. As a result we were failing these tests but there's nothing forbidding strengthening noexcept in that way.\n\nChanged the ASSERT_NOT_NOEXCEPT asserts to use types which themselves have non-noexcept hash functions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300516 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"688edc78f9763a124f851a360bf47867fb3f27e8","date":"2017-04-18T07:17:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update google benchmark\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300530 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"30ea4d0c86112c272b51706d7316cd0811018d4e","date":"2017-04-18T07:40:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Emit benchmark tests into the benchmarks build directory, not lib/\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300533 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f2efbd520d24b86f68dcf35a053e399fe3be67f","date":"2017-04-18T17:22:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2788 as complete - we already do this\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300568 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6f448f694365b7d43a9fb904c7065885de1186a2","date":"2017-04-18T18:44:33.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Silence unused parameter/typedef warnings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300575 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"21d02bea5818ecd0210dd6f08d9523dc9c010890","date":"2017-04-18T20:04:39.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Silence another unused-typedef warning\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3de1e063a9c3278bbd9915bb45bbc3157e52b31","date":"2017-04-18T20:58:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> for std::set and std::multiset\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300595 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ce924dce570e468a88e8a1ddf6dfe86b6422d5a0","date":"2017-04-18T21:08:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> macros in std::map and std::multimap\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300600 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7162dceba521d54f42579eb44abe3a97c1842ddc","date":"2017-04-18T21:16:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> macro uses in std::stack.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300602 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a8d1b917ee753942c31562c79266620a897a2ff8","date":"2017-04-18T21:23:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> for std::queue and std::priority_queue.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300604 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cdc049a904b837e02816c483f7d76b242e8687e","date":"2017-04-18T22:37:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> macros in std::unordered_set and std::unordered_multiset\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300619 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1ae14a374d5e15c60c6d3ae4adbcdf57c5e3a401","date":"2017-04-18T22:50:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> in std::unordered_map and std::unordered_multimap\n\nThis completes the cleanup of the containers, at least within the tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300620 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"690d999934398a3a98cb183c795ee6271eefd438","date":"2017-04-18T23:05:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> macros in thread.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300622 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"82810a6cef6c4817b7d2e42844e85b8f475ea7d3","date":"2017-04-18T23:09:36.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> macros for std::initializer_list\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300623 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6b17a7ba2c6c549c679c18309dd8adce23425010","date":"2017-04-18T23:26:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> in algorithm\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300625 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e915b5c1f28e3407d92c2d5981b377b3ed94e985","date":"2017-04-18T23:38:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> in the input.output library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300626 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d89c715f29c3adfb41ce00de3c6bc0f243f0df39","date":"2017-04-18T23:42:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-features> macro usage in regex\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300627 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"97db517a49a20426edf5a64a897746906b2fb25e","date":"2017-04-19T00:23:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> macros in the numeric tests and headers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3e92897754578c07b0e4326c14aa87e4e8ff39c1","date":"2017-04-19T00:28:44.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> in the string library.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300633 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d311b3c55a4906e677c7ac313a3879f32cda5e50","date":"2017-04-19T00:56:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> in the utilities library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300635 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"869c5adc9021164312bd4d08cba38f328950e076","date":"2017-04-19T01:02:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup _LIBCPP_HAS_NO_<c++11-feature> in support headers and final tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300637 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5875c1d527fdf7ed6a272c1cc30d81c8bab880ed","date":"2017-04-19T01:23:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup remaining _LIBCPP_HAS_NO_<c++11-feature> usages in container headers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300643 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"191f075c6fe7440659781f2603088b2df337c06a","date":"2017-04-19T01:23:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup remaining usages of _LIBCPP_HAS_NO_<c++11-feature> in tuple and utility\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300644 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ec0df99de480bb6cf4d3bc9872126a365346e0d7","date":"2017-04-19T01:28:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup remaining usages of _LIBCPP_HAS_NO_<c++11-feature> in the functional library\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300646 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa55cef64a81e8b4b4fa0bc3aab04e1dc4180bbf","date":"2017-04-19T01:34:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup usages of _LIBCPP_HAS_NO_<c++11-feature> in <bitset>, <ios>, <locale>, and <iterator>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300648 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2c4b8af9aada61d83610330416eb8a39a8aa5494","date":"2017-04-19T01:35:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup usages of _LIBCPP_HAS_NO_<c++11-feature> in <exception>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300649 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fbca5e054712a9172bd24959d9bf797bd4a08995","date":"2017-04-19T02:07:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix tests for extended noexcept in the container adaptors tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300652 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d282d7e6d483b4596423a49a94b20a364c712a0","date":"2017-04-19T20:11:04.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Use _LIBCPP_ABI_MICROSOFT instead of _MSC_VER\n\n_LIBCPP_ABI_MICROSOFT is more appropriate to use here, since the\nconditionals are controlling Microsoft mangling. It wasn't used\noriginally since it didn't exist at the time.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04f2896e8517491c52dd0ec97299a01d8a016aec","date":"2017-04-19T21:52:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix typo in Windows test configuration code\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300770 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a5ca9445f6661da4ed63f766c96ef4fab95f8c1f","date":"2017-04-19T23:26:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add appveyor.yml config for a future Windows bot.\n\nI'm currently trying to get a libc++ Windows builder working on appveyor.\nThis patch adds the configuration file needed to build libc++ on Appveyor.\nDetails of where the buildbot can be found will come later\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300786 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"02213ed1e1953b1166613c34ae84dfd54e0deb01","date":"2017-04-19T23:27:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"change what branches Appveyor builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300788 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"47c3219d73b6e90902b3732c107480b81804fb15","date":"2017-04-20T01:45:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix dllimport on a class template\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300808 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b105246262ea1f18043a5846df03005683eeef97","date":"2017-04-20T01:50:39.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Make linker errors verbose on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300809 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"23ccaa54dce1584bdda0041e558a60c214bed593","date":"2017-04-20T04:19:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename the static version of libc++ on Windows.\n\nPreviously both the static version of libc++ and the\nimport library for the DLL had the same name, 'c++.lib'.\n\nThis patch renames the static library on Windows to be `libc++.lib`\nso it no longer conflicts. This naming convention is consistent with\nother windows libraries.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300817 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5bf8bed95858fd84de813f27a011156fd9ae7898","date":"2017-04-20T04:24:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable the filesystem library on Windows by default\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300820 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6ca6874880b48e2ed87ffca8025b4d3e31bcba97","date":"2017-04-20T20:22:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix comment and remove incorrect linker flags in test configuration\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300881 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a67beb7b946e71d0338cc49389850c6384ec4716","date":"2017-04-20T23:22:46.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix ATOMIC_<TYPE>_LOCK_FREE macros on Windows.\n\nPreviously the ATOMIC_<TYPE>_LOCK_FREE macros were implemented\nusing __GCC_ATOMIC_<TYPE>_LOCK_FREE but GCC specific macros\nare defined when -fms-compatibility is specified.\n\nTo avoid this Libc++ now tries to use the newly added\n__CLANG_ATOMIC_<TYPE>_LOCK_FREE macros instead, and only falls\nback to the GCC versions when the Clang ones aren't available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300920 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3d1d1eab22db1c887b035c5aedbbcb4e46913ee8","date":"2017-04-20T23:33:49.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Default to vcruntime when targeting MSVC\n\nSummary:\nlibc++abi is never the right option for LIBCXX_TARGETING_MSVC, since it\ntargets the Itanium ABI, whereas MSVC uses the Microsoft ABI. Make the\ndefault ABI be vcruntime when targeting MSVC even if libc++abi is\npresent in the tree.\n\nDifferential Revision: https://reviews.llvm.org/D32320\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300921 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b34376320f39b9347df89f3e9a954dce5b4d1d50","date":"2017-04-21T00:43:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix 'verify-support' available feature\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300934 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa22e515ac53c6f845731748bba426cff8df8d13","date":"2017-04-21T01:10:04.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Resolve unused local typedef warning in test.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300937 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c94dd0a5711a17a7ff96db054ff1eae7fff5d3ff","date":"2017-04-21T01:48:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL Windows test failures under test/libcxx\n\nThis patch XFAIL's a number of tests under test/libcxx when on Windows.\nThese failures need more investigation or patches to either Clang or libc++\nbut for now we don't want them to prevent the bot from going green.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300941 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c0574ee0512cf77c0db991319d220a3601159bec","date":"2017-04-21T02:13:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark exception_ptr tests as XFAIL on Windows for now\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9f6e23c7c9ec505f2185f4dac3a2df372f94a9c1","date":"2017-04-21T03:09:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"update XFAIL comments with more details\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@300944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fba865a2177284a39750a344e0ca84d94b2d9b1f","date":"2017-04-21T22:38:59.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"Expand test coverage for LWG2857\n\n* Cover optional's emplace-from-initializer_list overload\n\n* Verify that any::emplace and optional::emplace return a reference to the correct type even for throwing cases.\n\nDifferential Revision: https://reviews.llvm.org/D32106\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@301055 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5df171df50207ff24132adaf94203d55eb428234","date":"2017-04-21T23:14:55.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"cmath: Skip Libc for integral types in isinf, etc.\n\nFor std::isinf, the standard requires effectively calling isinf as\ndouble from Libc for integral types. But integral types are never\ninfinite; we don't need to call Libc to return false.\n\nAlso short-circuit other functions where Libc won't have interesting\nanswers: signbit, fpclassify, isfinite, isnan, and isnormal.\n\nI added correctness tests for integral types since we're no longer\ndeferring to Libc.\n\nIn review it was pointed out that in future revisions of the C++\nstandard we may add more types to std::is_arithmetic (e.g.,\nstd::is_fixed_point).  I'll leave it to a future commit to hack this to\nallow using math functions on those.  We'll need to change things like\n__libcpp_fpclassify anyway, so I'm not sure anything here would really\nbe future-proof.\n\nhttps://reviews.llvm.org/D31561\nrdar://problem/31361223\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@301060 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57c405955f0abd56f81152ead9e2344b532276ad","date":"2017-04-23T16:58:48.000Z","author":{"name":"Justin Lebar","email":"jlebar@google.com"},"message":"Add missing acquire_load to call_once overload.\n\nSummary: Seemed to have been overlooked in D24028.\n\nThis bug was found and brought to my attention by Paul Wankadia.\n\nReviewers: kubamracek, EricWF, dvyukov\n\nDifferential Revision: https://reviews.llvm.org/D32402\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@301132 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6cff9cfbcc778ec1e0df15f7f4e74afad3ca9358","date":"2017-05-03T21:02:19.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Qualify calls to __invoke, __apply_fuctor, and __mu\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302082 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"16d4a3f21c3eee853579b06619d9a3a1a1de7825","date":"2017-05-03T21:14:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to fix appveyor build\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302084 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59a094fac7eb222dd0c873d3eb0fe0a2c154dab3","date":"2017-05-03T23:33:54.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"CMake: Only add test/ subdirectory when it exists\n\nr296685 started adding the test/ subdirectory even when\nLIBCXX_INCLUDE_TESTS=OFF.  This is great for testing libcxx standalone,\nbut it also breaks the build when the test/ subdirectory is removed\n(and our submission system strips all test/ directories).\n\nThis patch updates the logic to check for test/ before adding it.\n\nrdar://problem/31931366\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302095 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"621612c8454448bc7fa69e2efa6b590a903c071d","date":"2017-05-04T00:16:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Test commit for Appveyor - Remove incorrect caching logic\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca57b1475e164028442c8c44bc1c02ee042b402d","date":"2017-05-04T01:06:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix macro redefinition warnings for _LIBCPP_NO_RTTI\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302099 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83e040ffab30c02aca00c58d0450ca52e7083736","date":"2017-05-04T01:06:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Use nullptr instead of the literal 0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302100 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8677b63a2c6b0325802d61387f403d2cedff5447","date":"2017-05-04T01:17:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to setup MSVC 2017\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f3b2962c723c786d80fc8b8ce24ba87dd968159e","date":"2017-05-04T01:17:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to escape paths correctly\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302102 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bd0685fed08b68e39fe5eaef5bd1e94c59465d7b","date":"2017-05-04T01:35:11.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] In msvc_stdlib_force_include.hpp, use _HAS_CXX17 to set TEST_STD_VER.\n\n_HAS_CXX17 indicates whether MSVC's STL is in C++17 mode.\n\nIn MSVC there's a distinction between CRT headers like stdlib.h and STL headers\nlike cstdlib. Only the STL headers drag in yvals.h, our internal STL-wide header\nthat defines internal macros like _HAS_CXX17.\n\n_HAS_CXX17 is an MSVC STL library macro, unconditionally defined. We centralize\neverything on this, because we have to ask different questions to determine\nwhether C1XX, EDG, or Clang is in 14 or 17 mode, and we additionally permit\nusers to override the detection in one way (it's okay to ask for 17 from the\ncompiler, but only 14 from the libs, at least for the moment; only noexcept\nin the type system will give us a headache).\n\nAs this header is for testing MSVC's STL, we can assume _HAS_CXX17 is defined.\n\nFixes D32726.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302104 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"559442652c038e04bea4bc5254eed4c149a7b529","date":"2017-05-04T01:43:58.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Strip trailing whitespace. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302105 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a64f7198c770c34d2b0a4d69a825ab374edaa355","date":"2017-05-04T05:16:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Setup Appveyor bot for MSVC 2017 and MSVC 2015\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302113 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"58291566ed2efbe77d4a295299cc17043d383160","date":"2017-05-04T05:32:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to enable the LIT progress bar on Appveyor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302115 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3c51b64ddc15f1c36e0e19b8fa4c1d753015f917","date":"2017-05-04T05:58:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"update buildbot doc to link to the new Appveyor builders\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302116 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f77a7df6f213d98fcc6967a1e310294fce72d823","date":"2017-05-04T06:02:50.000Z","author":{"name":"Jonas Hahnfeld","email":"Hahnfeld@itc.rwth-aachen.de"},"message":"[libcxx][CMake] Set library dir when built under runtimes/\n\nThis will put libraries into the build root's lib/ directory by default.\n\nDifferential Revision: https://reviews.llvm.org/D32736\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302117 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7d96f16173a9ee1bd4ec0023f37ded92fcf90298","date":"2017-05-04T06:27:06.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"test commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302120 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74abe0b15fa59970e1621ea610b5dcd90fc02255","date":"2017-05-04T06:28:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"test commit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302122 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b8577430eabc0952f1cfd45db11d837435417bad","date":"2017-05-04T07:40:23.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update Appveyor bot link to point to new llvm-mirror Appveyor account\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302128 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"474dfc389d4314a9b635e739b478a92ddae97123","date":"2017-05-04T07:45:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix incorrect usage of __libcpp_mutex_trylock. Patch from Andrey Khalyavin\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302129 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d252306885d2873ec4cb5f1f36d7e8f3a4802f77","date":"2017-05-04T15:32:54.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] variant: enable constexpr construction tests on MSVC STL\n\n* Add a new macro _MSVC_STL_VER to detect when the MSVC STL is being tested\n* Workaround C1XX __is_trivially_copyable bug\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302158 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"49abbf545e0fdb36b4686f4b09c09a41d844c34f","date":"2017-05-04T15:54:09.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Name the local variable in the C1XX implementation of DoNotOptmize\n\nDifferential Revision: https://reviews.llvm.org/D32510\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302162 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3320e88ab4c8afe55bf9a71ded2ccc6c2220b8c9","date":"2017-05-04T16:36:39.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Use lgamma_r instead of lgamma in binomial_distribution, because freakin' POSIX took a perfectly fine call and made it not thread safe.\n\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302168 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"907c1196a7c153e6040dd850dc194abc62aabc80","date":"2017-05-04T17:08:54.000Z","author":{"name":"Mehdi Amini","email":"joker.eph@gmail.com"},"message":"Add markup for libc++ dylib availability\n\nLibc++ is used as a system library on macOS and iOS (amongst others). In order\nfor users to be able to compile a binary that is intended to be deployed to an\nolder version of the platform, clang provides the\navailability attribute <https://clang.llvm.org/docs/AttributeReference.html#availability>_\nthat can be placed on declarations to describe the lifecycle of a symbol in the\nlibrary.\n\nSee docs/DesignDocs/AvailabilityMarkup.rst for more information.\n\nDifferential Revision: https://reviews.llvm.org/D31739\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8ef97ec75141028eca55d2f978644a9e99ed6971","date":"2017-05-04T19:04:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Change Appveyor to download Clang from llvm.org instead of my private server\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302181 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"29514913dd21888a6a6d5dc2a752cea7727356b2","date":"2017-05-04T19:13:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failure with GCC 4.9\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302182 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3b66a4d811532a0c56a1ecffd7c58af804e2562","date":"2017-05-05T05:19:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Document XFAIL's with the relevent bug number\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302213 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"799d02d2f3f96bf4bd00aacc19bfb636ce8acb20","date":"2017-05-05T20:32:26.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix new warnings emitted by GCC 7\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302280 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"50ca6f720fca3ef95813d1366bea47cd081814b6","date":"2017-05-05T20:39:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix remaining GCC 7 build warnings\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302283 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4726a9c72726ada2cd7068ced09e01635282dce2","date":"2017-05-05T20:50:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix detection for [[fallthrough]] with GCC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302285 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"08fd3361bd23246d89f7007badee0fef65f025d7","date":"2017-05-05T21:31:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix condition_variable::wait_until and wait_for on Windows.\n\nThe ERROR_TIMEDOUT returned by the Windows API does not\nhave the same value as ETIMEDOUT. This caused condition_variable\nto return timeouts as unknown errors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302297 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53a76dd67940a0fbbc695cbe07afd63eff4d4802","date":"2017-05-05T21:32:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Mark test using <sys/time.h> as UNSUPPORTED on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302298 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff9b14a34a9aded9994e7c1b5f358aaf770e4d66","date":"2017-05-05T23:01:38.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Be compatible with LWG 2438 \"std::iterator inheritance shouldn't be mandated\".\n\nIn C++17, these iterators are allowed but not required\nto inherit from the deprecated std::iterator base class.\n\nFixes D32727.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302318 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"154d7f1ad6f7750e65400298b35baa9f6b352e48","date":"2017-05-05T23:38:24.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix MSVC \"warning C6326: Potential comparison of a constant with another constant\".\n\nThe expressions `1 == 1` and `true` have the same type, value category, and value.\n\nFixes D32924.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302322 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5dbf234992bd2a27f4d5e4625162af5ad60de47b","date":"2017-05-05T23:51:39.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Suppress MSVC's /analyze warning C6294 in a more fine-grained manner.\n\nFixes D32926.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302325 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9f9f0b205227ee69093d550b8c6e98f72c75a9e","date":"2017-05-06T02:58:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix lgamma_r linking errors on Windows. It appears the normal lgamma function is thread safe anyway\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302330 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2f214595bc6e074c3945ae96fe76604788aa4910","date":"2017-05-06T20:58:50.000Z","author":{"name":"Dimitry Andric","email":"dimitry@andric.com"},"message":"Ensure showbase does not overflow do_put buffers\n\nSummary:\nIn https://bugs.freebsd.org/207918, Daniel McRobb describes how using\nstd::showbase with ostreams can cause truncation of unsigned long long\nwhen output format is octal.  In fact, this can even happen with\nunsigned int and unsigned long.\n\nTo ensure this does not happen, add one additional character to the\ndo_put buffers if std::showbase is on.  Also add a test case.\n\nReviewers: EricWF, mclow.lists\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits, emaste\n\nDifferential Revision: https://reviews.llvm.org/D32670\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302362 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4bd682bf5d3e8eaaad35c7b1857f013172c0a082","date":"2017-05-07T21:15:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix two test failures caused by Windows mangling of function types.\n\nOn Windows the function template `template <class T> void test()` has\nthe same mangled name when instantiated with the distinct types `void()`\nand `void() noexcept`. When this occurs Clang emits an error. This error\nwas causing two type-traits tests to fail.\n\nHowever this can be worked around by using class templates instead of\nfunction templates, which is what this patch does to fix the errors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302380 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b90dc26a99f82aa7b870964ad8b7dcf1341bb1ef","date":"2017-05-07T21:21:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Accept Windows specific output in system error tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302381 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f9c9d254cfa234430a06a91189f25621ce3b747a","date":"2017-05-07T21:41:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix Windows test failures caused by identical temp file names.\n\nThis patch fixes test failures that occur on Windows because\nthe tests attempt to generate two distinct temp file names but\nget the same name both time.\n\nThe fix for this is to create the first temp file before requesting\na second temporary file name. This ensures that the second name\nwill be unique.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fb888ad4549e75b13db67a03366161ccdd9e276","date":"2017-05-07T22:10:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Temporarly XFAIL aligned new/delete tests on Windows.\n\nLibc++ doesn't provide its own definitions of new/delete on Windows,\ninstead using the versions provided by VCRuntime. However VCRuntime\ndoes not yet implement aligned new/delete so these tests fail.\n\nIt might be possible for libc++ to provide its own definitions only\nfor aligned new/delete as long as MSVC doesn't provide it. However\nbefore this can be done libc++ needs to figure out how to implement\nstd::get_new_handler.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"04da0e13a327fc5325fff83c6e670a55cb593bc4","date":"2017-05-07T23:19:14.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Actually remove the MSVC STL when linking and testing libc++ on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302387 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"46795cca2bc47ee4c338b2e181cac5193dec5e92","date":"2017-05-07T23:37:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"Actually remove the MSVC STL when linking and testing libc++ on Windows\"\n\nThis reverts commit r302387.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302389 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5a600a26f8966a291ea185ddaa52b56fc942656","date":"2017-05-08T00:29:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix DLL import for __time_get_c_storage member functions.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302390 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1133de5f1837ae6c39aac61a904a832a90f0f154","date":"2017-05-08T00:37:31.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix DLL import/export on Win32 locale helpers\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302391 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"78f5dc09ca97ed41ebba33cc6f216cceb0d4eea9","date":"2017-05-08T01:17:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Implement exception_ptr on Windows\n\nSummary:\nThis patch implements exception_ptr on Windows using the `__ExceptionPtrFoo` functions provided by MSVC.\n\nThe `__ExceptionPtrFoo` functions are defined inside the C++ standard library, `msvcprt`, which is unfortunate because it requires libc++ to link to the MSVC STL. However this doesn't seem to cause any immediate problems. However to be safe I kept all usages within the libc++ dylib so that user programs wouldn't have to link to MSVCPRT as well.\n\nNote there are still 2 outstanding exception_ptr/nested_exception test failures.\n\n* `current_exception.pass.cpp` needs to be rewritten for the Windows exception_ptr semantics which copy the exception every time.\n* `rethrow_if_nested.pass.cpp` need investigation. It hits a stack overflow, likely from recursion.\n\nThis patch also gets most of the `<future>` tests passing as well.\n\nReviewers: mclow.lists, compnerd, bcraig, rmaprath, majnemer, BillyONeal, STL_MSFT\n\nSubscribers: mgorny, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D32927\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302393 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"720637d9f224ec4ddb5eeec832b45617300fa8b2","date":"2017-05-08T01:31:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix shared_mutex dll import errors on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302394 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca052ce73a56c9bf13ac1dd17e61ac294e6a4a78","date":"2017-05-08T02:09:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix Windows locale detection\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302396 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ed6937378649d1c9006c95dda8212287cb7a3f02","date":"2017-05-08T13:15:22.000Z","author":{"name":"Ben Craig","email":"ben.craig@ni.com"},"message":"Fix Windows tests when __config_site is present.\nPreviously, the force includes would complain about a missing _DEBUG symbol.\nNow we dump macros before adding the force includes to the command line.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302421 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f9bc2d28c85fd11a7a5418b0749df6c3c7b91d1","date":"2017-05-08T21:52:05.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Resolve integer overflow warnings in GCD and LCM tests\n\nlcm.pass.cpp:\n19: Update headers to that actually used in the test.\n41: test0 was triggering narrowing warnings for all callers, because the\ninputs were always ints, but some of the explicit template arguments were\nsmaller than that. Instead, have this function accept ints and static_cast\nexplicitly to the types we want before calling std::lcm.\n47: Replace unnecessary ternary.\n55: Use foo_t instead of typename foo<>::type\n111/116: intX_t were not std::qualified but only <cfoo> headers were included.\n141: C1XX has a bug where it interprets 2147483648 as unsigned int. Then the\nnegation trips \"negation of unsigned value, result still unsigned\" warnings.\nPerma-workaround this issue by saying INT_MIN, which better documents the\nintended behavior and avoids triggering warnings on C1XX.\n\ngcd.pass.cpp:\nSame changes as lcm.pass.cpp but for GCD.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302472 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b5a065c20939f26724b0e64d66efd0d611eeea73","date":"2017-05-08T21:54:53.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Fix possible loss of data warnings on amd64\n\nIn T_size_size.pass, there is an explicit template argument to std::min to ask\nfor unsigned, to avoid type deduction errors. However, C1XX' warnings still\nhate this use, because a 64 bit value (a size_t) is being passed to a function\naccepting an unsigned (a 32 bit value).\n\nInstead, change the tests to pass around std::size_t instances, and explicitly\nnarrow when constructing the string type under test. This also allows\nremoval of explicit template arguments to std::min.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302473 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2ec6d3933a3aaf53754ab0ff095383c1fc7d4964","date":"2017-05-08T22:02:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Refactor <locale> RAII guards to aid upcoming Windows locale changes.\n\nPreviously <locale> used std::unique_ptr<remove_ptr<locale_t>, locale-mgmt-function>\nas a scope guard for (A) creating new locales, and (B) setting the thread specific locale\nin RAII safe manner.\n\nHowever using unique_ptr has some problems, first it requires that locale_t is a pointer\ntype, which may not be the case (Windows will need a non-pointer locale_t type that emulates _locale_t).\n\nThe second problem is that users of the guards had to supply the locale management function to the custom\ndeleter at every call site. However these locale management functions don't exist natively Windows, making\na good Windows implementation of locale more difficult.\n\nThis patch creates distinct and simply RAII guards that replace unique_ptr. These guards handle calling\nthe correct locale management function so that callers don't have too. This simplification will\naid in upcoming Windows fixes.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302474 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9197008809270a936e31c00946f58757fcb8d9a9","date":"2017-05-09T00:00:00.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix GCC 7 test failures.\n\nThis patch fixes the test failures and unexpected passes that occur\nwhen testing against GCC 7. Specifically:\n\n* don't mark __gcd as always inline because it's a recursive function. GCC diagnoses this.\n* don't XFAIL the aligned allocation tests. GCC 7 supports them but not the -faligned-allocation option.\n* Work around gcc.gnu.org/PR78489 in variants constructors.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302488 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2a1cb9c2e667c9dff8da7aa0383d3b50da304de5","date":"2017-05-09T01:26:39.000Z","author":{"name":"Ben Craig","email":"ben.craig@ni.com"},"message":"Revert \"Fix Windows tests when __config_site is present.\"\nIt's 2017, and line endings are still an issue.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302496 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6aa3e7963d0848c8d18625a68b06be729017049","date":"2017-05-09T01:34:12.000Z","author":{"name":"Ben Craig","email":"ben.craig@ni.com"},"message":"Fix Windows tests when __config_site is present.\nPreviously, the force includes would complain about a missing _DEBUG symbol.\nNow we dump macros before adding the force includes to the command line.\nNow with proper newlines.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302497 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"867ae2992990d1768a7d4956db5551c2f3276a76","date":"2017-05-09T11:18:03.000Z","author":{"name":"Tom Stellard","email":"tstellar@redhat.com"},"message":"docs: Fix Sphinx detection with out-of-tree builds\n\nAdapt to changes made in r302499.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302517 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01c2bb36774643c3d3ef81e7b85b163501e0d863","date":"2017-05-09T23:47:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix misspelling of environment throughout libc++\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302600 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"df432266f08c23d62e5521b3914ee3da6ecb5b1d","date":"2017-05-09T23:57:22.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test runtime environment on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302602 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f715326aa20d881a8e510bd6124d95293ba7c56d","date":"2017-05-10T00:05:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to unbreak Libc++ test configuration\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302604 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4680f0c7e609f0d84907a625f8c5896bb8ef1677","date":"2017-05-10T00:23:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Improve how LIT reports the added environment variables\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302607 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85fc444fc660d78af8c943e1f527a6f97ef9e984","date":"2017-05-10T02:30:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add MinGW64 builder to Appveyor.\n\nWith the amount of work happening on Windows we should\nhave a MinGW bot to make sure we don't regress that functionality.\nCurrently it doesn't build :-(\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302614 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9d987bafc44ddcbf495f2491ee821560f0338de3","date":"2017-05-10T02:34:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"attempt to fix appveyor syntax error\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302616 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fc474757dd8553170efe0f7933240fb3fe6814e8","date":"2017-05-10T02:36:48.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Support using MinGW POSIX threads on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302617 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff17452d7c37b4f355dda36c549a29686c528a8e","date":"2017-05-10T02:43:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename Appveyor install helper script.\n\nI'm really lazy and the old name for the helper script\nkilled 2 letter tab completion for the include directory.\nThis patch renames it to avoid that problem and enable\nlazyness.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302619 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5fa184dabd5e37860d849fdd4a1d1dcf54fcbcb4","date":"2017-05-10T08:04:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to speculatively unbreak Apple build bots\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302627 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f0346a566395620123e35d48da4fee038eb188da","date":"2017-05-10T19:10:49.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] support machinery changes for EDG & C1XX /Za\n\nThis change works around a couple of bugs:\n\n1. EDG doesn't like explicit constexpr in a derived class. This program:\n\n  struct Base {};\n  struct Derived : Base {\n      constexpr Derived() = default;\n  };\n\n  triggers \"error: defaulted default constructor cannot be constexpr.\"\n\n2. C1XX with /Za has no idea which constructor needs to be valid for copy elision.\n\nThe change also conditionally disables parts of the msvc_stdlib_force_include.hpp header that conflict with external configuration when _LIBCXX_IN_DEVCRT is defined.\n\nDifferential Revision: https://reviews.llvm.org/D32778\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302707 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1bc7a4b31e271f28dddd68fa2a81744714541e21","date":"2017-05-10T19:35:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Fix PR32979 -  types with a private std::enable_shared_from_this base break shared_ptr\n\nSummary:\nThis patch fixes bugs.llvm.org/PR32979.\n\n[util.smartptr.shared.const] says:\n> In the constructor definitions below, enables shared_from_this with p, for a pointer p of type Y*, means\n> that if Y has an unambiguous and accessible base class that is a specialization of enable_shared_from_-\n> this.\n\nThis means that libc++ needs to respect the access specifier of the base class, and not attempt to construct\nand enabled_shared_from_this base if it is private. However access specifiers don't affect overload resolution\nso our current implementation will attempt to construct the private base. \n\nThis patch uses SFINAE to correctly detect if the shared_ptr input has an accessible enable_shared_from_this\nbase class.\n\nReviewers: mclow.lists\n\nReviewed By: mclow.lists\n\nSubscribers: cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D33033\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302709 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b423f1e8608fed8abe743dcf6588754080180842","date":"2017-05-10T19:43:31.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Update is_trivially_copyable tests with CWG 2094\n\nClang 5.0 implements these changes here: https://github.com/llvm-mirror/clang/commit/87cd035326a39523eeb1b295ad36cff337141ef9\nMSVC++ will implement these changes in the first toolset update to 2017.\n\nDifferential Revision: https://reviews.llvm.org/D33021\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302710 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f6e8a9c876e1106173e751fb28ea4dd155150f54","date":"2017-05-10T19:55:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Clean up LIT failure output by not showing the entire environment\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302713 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"74424d09b4db468f806ea8d49a1c98d7f2f49eef","date":"2017-05-10T20:09:20.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix enable_shared_from_this test in C++11\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302721 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"19fc985cce2c6c6ab439192c082be29c57711729","date":"2017-05-10T20:19:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL is_trivially_copyable test for compilers that don't implement Core 2094\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302723 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76515a2dcf907cf99c98362f306e1b9fa317023e","date":"2017-05-10T20:37:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2591 - Patch from K-Ballo\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302724 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"41af64afad4ac5525e7fc0a506915124f126c0ca","date":"2017-05-10T20:57:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[libc++] Refactor Windows support headers.\n\nSummary:\nThis patch refactors and tries to remove as much of the Windows support headers as possible. This is needed because they currently introduce super weird include cycles and dependencies between STL and libc headers.\n\nThe changes in this patch are:\n\n* remove `support/win32/support.h` completely. The required parts have either been moved into `support/win32/msvc_support.h` (for `MSVC` only helpers not needed by Clang), or directly into their respective `foo.h` headers.\n\n* Combine `locale_win32.h` and `locale_mgmt_win32.h` into a single headers, this header should only be included within `__locale` or `locale` to avoid include cycles.\n\n* Remove the unneeded parts of `limits_win32.h` and re-name it to `limits_msvc_win32.h` since it's only needed by Clang.\n\nI've tested this patch using Clang on Windows, but I suspect it might technically regress our non-existent support for MSVC. Is somebody able to double check?\n\nThis refactor is needed to support upcoming fixes to `<locale>` on Windows.\n\n\n\nReviewers: bcraig, rmaprath, compnerd, EricWF\n\nReviewed By: EricWF\n\nSubscribers: majnemer, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D32988\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302727 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f3d5935a377ad4d4be4ab1ef93e8e9294814a53","date":"2017-05-10T20:58:30.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Fix bad #endif in msvc_stdlib_force_include.hpp.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302728 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ca91fd09f750c03b4e6802ecdd38ae2a7d4ff728","date":"2017-05-10T21:30:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Don't interfere with the __builtin_foo namespace under MSVC\n\nThis patch follows up on feedback received in the review for\nD32988. Specifically that libc++ should not mess with the\n__builtin namespace, and that libc++ should use __popcnt to implement\n__pop_count under MSVC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302731 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2df956f21ef37f8a9699806e3b3eaf9adc0c7b70","date":"2017-05-10T21:34:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix MinGW build to use Pthread when the header is available.\n\nSome MinGW configurations use WinPThread instead of the native\nthreading interfaces. When this happens libc++ doesn't build because\nit tries to use the wrong threading API.\n\nThis patch attempts to correctly detect and enable pthreads; Selecting\nthem when __MINGW32__ is defined and __has_include(<pthread.h>) is true.\nI'm not sure if this works correctly 100% of the time but it seemed\nlike the most correct approach available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302734 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ab2f54f10323bd23a46ff21f38b70c2356a72aad","date":"2017-05-10T21:40:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove usages of _LIBCPP_MSVC which is never defined\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302736 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"98e4596f65f20e7f48517c57643401cf702d1e70","date":"2017-05-10T23:29:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround -W#warnings on Windows until the correct fixes can land\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302743 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f318b708ef85476a584519445d791a1c2e1000c9","date":"2017-05-11T07:17:12.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Fix `std::visit` for the zero variants case.\n\nSummary:\nThe following code is broken:\n\n```\n    std::visit([]{});\n```\n\nReviewers: EricWF\n\nReviewed By: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D33090\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302773 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fdd8117a99218ba080f96d40ae065ebd97c3eb2","date":"2017-05-11T13:51:09.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2796 as complete. No functionality change; we had tests that covered it already. Just added comments to the tests\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302798 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4cbf03ea8813e396411e192db37b0de65b06655c","date":"2017-05-11T13:55:20.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2850 as complete. No functionality change; we had tests that covered it already. Just added comments to the tests. Thanks to K-ballo for the heads up.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302799 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fdc890aeb7a6e8653f435d950879bca187a05a9","date":"2017-05-11T14:00:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Replace a nested namespace used for overload resolution with a struct. Richard Smith says that using the namespace results in an ODR violation, but I disagree. Nevertheless, the struct works just as well.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302800 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"83c266a94fb9b8bc71cd0c4cfd57db4c841da102","date":"2017-05-11T14:25:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2782 as complete. No functionality change; we already do this. Just added a few more tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302802 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a12fdedd5024ea83274739aca05a5d3eb5a07f4f","date":"2017-05-11T23:04:04.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix XFAIL to reflect recent fixes in GCC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302841 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"40e4fb68ac53b3581801353dcf6f123cc551ecc8","date":"2017-05-12T01:19:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard usage of libc++ regex internals inside test.\n\nThis patch attempts to make lookup_classname.pass.cpp usable against\nother STL implementations by guarding the use of __regex_word. That being\nsaid it seems likely that the test is still non-conforming due to how\nlibc++ handles the \"w\" character class.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302859 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2d31e197db370d037393e8e02f4bf836f7acc952","date":"2017-05-12T01:44:51.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix or move tests with non-standard assumptions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302862 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b22e6987b88aef021f228af2e0d810bf16964dcf","date":"2017-05-12T01:49:32.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move tests for libc++ configurations into libcxx/ test subdirectory\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302864 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8e7fc5f6b363203697b1cf3b27bb054f4fecf489","date":"2017-05-12T02:02:09.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move POSIX specific test under test/libcxx subdirectory\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302865 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"050bf66723586f50ed4af632576e3e29971a3db9","date":"2017-05-12T03:35:53.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove non-standard basic_string_view::clear() member.\n\nThis patch removes the clear() member from <string_view>. The\nmodifier was removed from the TS before it ever landed in the standard.\nThere is no reason libc++ should be providing this method.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302869 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e250cc68ceda7bc60b6eca37995b31053afd9ef8","date":"2017-05-12T03:38:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Cleanup test issues reported by STL @ Microsoft.\n\nThis patch cleans up a number of issues reported by STL, including:\n\n1) Fix duplicate is_convertible test.\n2) Move non-standard reference_wrapper tests under test/libcxx\n3) Fix assumption that sizeof(wchar_t) == 32 in the codecvt and\n   wstring_convert tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302870 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"db15e80b330f75130aa791838e873e0463e2bf51","date":"2017-05-12T03:53:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix C++03 test failures caused by static_assert emulation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302871 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7e33af585892ba2ec89793b8e152ee4718f67436","date":"2017-05-12T20:33:32.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Avoid P0138R2, direct-list-init of fixed enums from integers, part 1/3.\n\nThis C++17 Core Language feature isn't necessary when testing std::byte.\nIt's a minor convenience, but it limits test coverage to very new compilers.\n\nThis part changes the code.\n\nFixes D32386.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302944 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a17261169e8eec3f38c3c46e15960e6cfed9424b","date":"2017-05-12T20:33:41.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Avoid P0138R2, direct-list-init of fixed enums from integers, part 2/3.\n\nThis C++17 Core Language feature isn't necessary when testing std::byte.\nIt's a minor convenience, but it limits test coverage to very new compilers.\n\nThis part activates the tests for more compilers.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302945 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd1c7cb4b4d33ec86d957b6fc2ce78fba8bad0b6","date":"2017-05-12T20:33:46.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Add specific test for P0138R2, direct-list-init of fixed enums from integers, part 3/3.\n\nTest the C++17 Core Language feature independently from other std::byte tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@302946 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6a5647485a4e910ac67781d1a9e5782bb3f5d7e5","date":"2017-05-17T15:30:01.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark the copy constructor and move \nconstructor to be constexpr. This only works when the contained type has a constexpr copy/move ctor.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303268 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"9e6b540dad3d9793341613320a7f88aeaf43f010","date":"2017-05-17T18:51:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make next/prev/advance/distance operations on iterators be constexpr. I missed this when I implemented the rest of P0031R0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303281 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"64182a5877865cde2538c6038f98e3df33c93a03","date":"2017-05-19T23:02:49.000Z","author":{"name":"Erik Pilkington","email":"erik.pilkington@gmail.com"},"message":"[test] Add support for Objective-C++ tests\n\nDifferential revision: https://reviews.llvm.org/D33049\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303466 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9197bd465e319bd92ed9a89c1398c235788abcf","date":"2017-05-23T18:55:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement LWG#2790: Remove istreambuf_iterator::operator->. It never did anything useful.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303675 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6d52b3b76ce5103985d1ab8bf3ad18b0d90d954f","date":"2017-05-25T00:22:33.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some constexpr tests for optional's move/copy ctor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303824 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10411c162642303cf458eb921c1cf7760eaa61ef","date":"2017-05-25T02:29:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add non-parallel version of for_each_n (+tests) from the Parallelism TS\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303833 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8392d4940d7b419ecda0334564368aa9b6a7475e","date":"2017-05-25T04:09:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix broken links on C++1z status page\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303835 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"737c3bf25ec897ec6e461644ef3658a52798e2ff","date":"2017-05-25T04:36:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add <experimental/coroutine>\n\nThis patch adds the library portions of the coroutines PDTS,\nwhich should now be supported by Clang.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303836 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d3f919eb7bf9e03ae16ed46804dab1489b54c134","date":"2017-05-25T05:11:40.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Disable the coroutines tests until Clang bumps __cpp_coroutines to reflect recent changes\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303837 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eb6bf87030cd912dc6379476ecff91d3d1b0bdb5","date":"2017-05-25T05:30:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove <experimental/coroutine> from the module map for now. It doesn't work unless modules are enabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303838 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efae8792d80314d9d884d76187795db7a1f9346b","date":"2017-05-25T13:40:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make for_each_n only avaliable on C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303856 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"798ecd6c0fe5364b7065ea3c839426eb77213e39","date":"2017-05-25T14:20:26.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Last commit included some extra constexpr; remove them\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303862 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3e0bf439653c7179f36892fcc21a1a8dd987bec","date":"2017-05-25T15:43:31.000Z","author":{"name":"Erik Pilkington","email":"erik.pilkington@gmail.com"},"message":"Add support for shared_ptr<FunctionType>\n\nFixes PR27566.\n\nDifferential revision: https://reviews.llvm.org/D30837\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303874 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8a80169b01290332fa6d21199fc2594a66527da3","date":"2017-05-25T16:05:54.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark LWG#2900 as complete - we already do this, and I checked the tests in a couple days ago (r303268 & r303824)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303876 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3a07dd740be63878167a0ea19fe81869954badd7","date":"2017-05-25T16:16:17.000Z","author":{"name":"Erik Pilkington","email":"erik.pilkington@gmail.com"},"message":"Fix a test that was failing in C++11 mode introduced in r303874\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303878 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b55cce1c8e50c69fe67100170967c791218f204","date":"2017-05-25T17:42:17.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Workaround C1XX bug in uses_allocator_types.hpp\n\nVSO#109062 \"Explicit template argument specification with empty template parameter pack expansion does not imply further empty pack expansion\"\n\nDifferential Revision: https://reviews.llvm.org/D33214\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303888 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a42191c839865d43f676f78fb5a9392e4d8d88d1","date":"2017-05-25T17:42:21.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Remove workaround for C1XX conversion-to-nullptr bug\n\nVSO#391542 \"Types can't be convertible to nullptr_t\"\n\nAlso put internal bug numbers on the workarounds in test_workarounds.h for correlation.\n\nDifferential Revision: https://reviews.llvm.org/D33290\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303889 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0b958696f5bd639ff64e6731a2f01f99b305519f","date":"2017-05-25T18:52:34.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update coroutine_handle<P>::promise to reflect N4663.\n\nThis patch updates the promise() member to match the current spec.\nSpecifically it removes the non-const overload and make the return\ntype of the const overload non-const.\n\nThis patch also makes the ASSERT_NOT_NOEXCEPT tests libc++ specific,\nsince other implementations may be free to strengthen the specification.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303895 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90c133182522822887f2b03c6d4c2c81827d298d","date":"2017-05-25T19:01:14.000Z","author":{"name":"Billy Robert O'Neal III","email":"bion@microsoft.com"},"message":"Add asserts that the nullptr is maintained in string erase operations.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303899 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1bc177fd5bef62dd3808841dd38735a0b06d1233","date":"2017-05-25T19:04:55.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update more coroutine_handle signatures to reflect N4663.\n\nThanks to Casey Carter for pointing out the out-of-date tests and\nimplementation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303900 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fa3bd28afb0468488b877d4649ac0c7c623059aa","date":"2017-05-25T22:37:15.000Z","author":{"name":"Martell Malone","email":"martellmalone@gmail.com"},"message":"libcxx: fix bootstrapping for mingw-w64\n\nDifferential Revision: https://reviews.llvm.org/D33388\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303928 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"afb54769d49cf039b77814ee1c143b68ec425cfc","date":"2017-05-25T22:43:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Correct typo: LIBCXXABI_BUILTINS_LIBRARY -> LIBCXX_BUILTINS_LIBRARY\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303929 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b3559ed0d6923010006ebb6c8757efdde5b1fd63","date":"2017-05-25T23:39:29.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Re-add <experimental/coroutine> to the module map.\n\nThe original issues were caused because <experimental/coroutine>\ndidn't correctly #ifdef out enough of the header, which caused incomplete\ntypes to be used.\n\nThis patch fixes the `#if defined(__cpp_coroutines)` guard and re-adds\nthe headers to the module map.\n\nIt also uglifies some incorrectly non-reserved names.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303936 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fd6177ffd65b782ca8f554ad067c0a80088a3650","date":"2017-05-26T00:37:33.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] make_shared<T()>(...) is, uh, libc++-specific\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303947 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"90b8e58ffa884e808fbd567c048bb7970f51c693","date":"2017-05-26T01:00:56.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Fix breakage from r303947 =(\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303951 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"efcf07d44ad45ed984f9219934b22020d642f05e","date":"2017-05-26T01:27:08.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove incorrect #ifdef guards around variant tests.\n\nThe tests were previously guarded by #if defined(_LIBCPP_VER) || defined(_MSVC_STL_VER),\nwhich is both incorrect (e.g. _LIBCPP_VERSION) and unneeded. Although the tests are\ntechnically non-standard (yet) they are supported by both libc++ and MSVC's STL.\n\nlibstdc++ doesn't regularly use the test suite so I'm not concerned about guarding these\ntests for them.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303953 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c80ef6ed28d95c07755ecd90daadf441ff06891c","date":"2017-05-26T01:52:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard <experimental/coroutine> against older Clang versions.\n\nClang started providing -fcoroutines and defining __cpp_coroutines\nway before it implemented the __builtin_coro_foo functions. This\nmeans that simply checking if __cpp_coroutines is not a sufficient\nway of detecting the actual feature.\n\nThis patch implements _LIBCPP_HAS_NO_COROUTINES which implements\na slightly more complex feature check. Specifically it requires\n__cpp_coroutines >= 201703L, which only holds for Clang 5.0 built\nafter 2017/05/24.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303956 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4aec787d1597d9980772edb99cf00e659d538257","date":"2017-05-26T03:02:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Get <experimental/coroutine> working in C++03.\n\nClang supports coroutines in all dialects; Therefore libc++ should too,\notherwise the Clang extension is unusable.\n\nI'm not convinced extending support to C++03 is a feasible long term\nplan, since as the library grows to offer things like generators it\nwill be come increasingly difficult to limit the implementation to C++03.\n\nHowever for the time being supporting C++03 isn't a big deal.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303963 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a317745593f95e1e72aa06d836ead19c9c6b53d4","date":"2017-05-26T04:09:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Workaround debug info bug in Clangs coroutine implementation\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@303966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10d9a93dddb0d2d38a22e4ce176d785981cd04f3","date":"2017-05-28T19:38:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[coroutines] Add end-to-end tests within libc++\n\nThis patch adds end-to-end/breathing tests for coroutines\ninto libc++. The tests aren't specifically to test libc++ requirements\nbut instead are intented to ensure coroutines are working fine in general.\n\nAlthough libc++ isn't exactly the most correct place for these tests\nto live, there is one major advantage. The libc++ test suite is also\nused by MSVC and by adding the tests here it ensures they will be\nrun against all currently available coroutine implementations.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304101 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1e9e38539a3824aa919814c0f265b04307156520","date":"2017-05-28T20:25:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove XFAIL's for recently fixed bug\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304102 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"75fc44aece26d56e111f4343979a5abef7818196","date":"2017-05-28T20:30:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add hack to allow test to run w/o C++17 copy elision\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304103 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5202852ad676d365382db721a4e7ca66d95af625","date":"2017-05-28T20:49:11.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL tests which trigger coroutine debug info crash in Clang\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304104 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bcb4a4e5d76f7da953c96b7d254ca3511156bac6","date":"2017-05-28T20:49:13.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix use of uninitialized memory\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304105 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"120949f3e02396fbde0a8a0f1a6fb932f9a40952","date":"2017-05-28T20:56:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Correct XFAIL's in coroutine tests to only list ubsan\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304106 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0a8dab6dc6a3750c908c3f907da540c028db8640","date":"2017-05-29T05:00:24.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix multiple bugs in coroutine tests.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304124 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"704a0db8d36faf3e1aa3c6bcb774653ccbb152de","date":"2017-05-29T06:42:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix coroutine test failures caused by API misusages.\n\nMore tests to come. I think that from_address overload should be deleted\nor ill-formed, except for the 'void*' one; The user cannot possibly\nhave a typed pointer to the coroutine state.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304131 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"53d1985f22add9cecdfa3410a8fe75537bf9ff0e","date":"2017-05-29T19:24:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[coroutines] Make coroutine_handle<T>::from_address ill-formed for everything but void*.\n\nfrom_address requires that the provided pointer refer to the suspended coroutine,\nwhich doesn't have a type, or at least not one knowable by the user. Therefore\nevery use of `from_address` with a typed pointer is almost certainly a bug.\n\nThis behavior is a part of the TS specification, but hopefully it will be\nin the future.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304172 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8fa39c327d26ad0cc9453080ffa93b54df4d226b","date":"2017-05-29T19:46:16.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix <experimental/coroutine> in C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304173 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fecf2a493be8f07757de71f22ff08e9e2015d873","date":"2017-05-29T23:17:28.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add missing 'requires coroutines' to module map\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304180 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bed65743b48bbbf355d88dd972103d87e24db153","date":"2017-05-30T20:12:55.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] s/uexpectedly/unexpectedly/\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ac633a2a52ce37dd2463753c2be98a76bc65536b","date":"2017-05-31T21:20:18.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove uses of _UI because Windows is evil and tchar.h #define's it\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304348 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0db8645d28889d1c2c9ce03256cbb12dae6a2e21","date":"2017-05-31T21:34:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Transform the libc++ coroutine shell tests into normal .pass.cpp tests.\n\nThe shell test versions didn't get all of the flags normal tests\ndo, specifically warning flags. This patch makes them .pass.cpp tests,\nand uses a lit.local.cfg to add -fcoroutines-ts and to make them\nUNSUPPORTED when that flag isn't available.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304351 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"256425754dd739443c3f2913f482655c1425e1a3","date":"2017-05-31T21:39:54.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Guard against more macros in tchar.h\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304352 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"018a3d51a47f7275c59e802709104498b729522b","date":"2017-05-31T22:07:49.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"[Libc++] Use #pragma push_macro/pop_macro to better handle min/max on Windows\n\nSummary:\nThis patch improves how libc++ handles min/max macros within the headers. Previously libc++ would undef them and emit a warning.\nThis patch changes libc++ to use `#pragma push_macro`  to save the macro before undefining it, and `#pragma pop_macro` to restore the macros and the end of the header.\n\nReviewers: mclow.lists, bcraig, compnerd, EricWF\n\nReviewed By: EricWF\n\nSubscribers: cfe-commits, krytarowski\n\nDifferential Revision: https://reviews.llvm.org/D33080\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7b7ac67cfb9a9c22b11a8100f6a37e0b1d692c9b","date":"2017-05-31T22:14:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix Libc++ build with MinGW64\n\nSummary: This patch corrects the build errors I encountered when building on MinGW64.\n\nReviewers: mati865, rnk, compnerd, smeenai, bcraig\n\nReviewed By: mati865, smeenai\n\nSubscribers: martell, chapuni, cfe-commits\n\nDifferential Revision: https://reviews.llvm.org/D33082\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304360 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5ead340ec2917f22b7a6d2dbd5b8b149852e94dd","date":"2017-05-31T22:20:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix silly mistakes in recent changes made to coroutine test\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304364 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a99bc1563be76bb4f7cd58c290e0a6f08d98d269","date":"2017-05-31T23:27:25.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Define -DNOMINMAX when running the tests on Windows\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304372 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a16c62a07e65e9b6c13090a89cee31632b0f8370","date":"2017-06-01T01:00:59.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Upgrade Clang version used by appveyor\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304377 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bf86c8f4dc47804eb67b0d71e9dc926bc0c7b26a","date":"2017-06-01T02:14:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Rename unreserved names in tuple\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304382 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"59e24fe13cd28efe94a3d0b04929fa652dc8a5d9","date":"2017-06-01T02:29:37.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix more unreserved names\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304383 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"01e23b3a4be9420d174de691640b177d4a3e54fd","date":"2017-06-01T02:31:01.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix name used in -verify diagnostic to match trunk\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304384 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a9d992d3107d294c8d93327d8d76a8b1bc56c79a","date":"2017-06-01T18:48:27.000Z","author":{"name":"Vedant Kumar","email":"vsk@apple.com"},"message":"Remove ubsan XFAILS in two tests\n\nThese two tests are ubsan-clean now:\nhttp://lab.llvm.org:8080/green/job/clang-stage2-cmake-RgSan_check/3553/\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304450 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"974e519e855004714f3df4260e74dbc664caa0ab","date":"2017-06-01T20:00:40.000Z","author":{"name":"Vedant Kumar","email":"vsk@apple.com"},"message":"Mark two coroutine tests as unsupported under ubsan\n\nThey appear to crash inside of SelectionDAG on some Linux bots, when\nubsan is enabled.\n\nhttps://bugs.llvm.org/show_bug.cgi?id=33271\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304462 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2e612e1621ff0682dd170a948a3ea59f5497f4ea","date":"2017-06-01T22:40:16.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Allow non-libc++ coroutine_handle::done to strengthen noexcept\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304487 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"84d753555fd37109d68b5c2ea5eb2f752907d31c","date":"2017-06-02T18:30:16.000Z","author":{"name":"Vedant Kumar","email":"vsk@apple.com"},"message":"Revert \"Mark two coroutine tests as unsupported under ubsan\"\n\nThis reverts commit r304462, thereby re-enabling two tests under ubsan.\nWe expect these tests to pass now that PR33271 is fixed.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304580 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c6895928903b83ca237c9cdcaecc5a4fe894bcfd","date":"2017-06-02T20:06:49.000Z","author":{"name":"Vedant Kumar","email":"vsk@apple.com"},"message":"Mark two coroutine tests as unsupported under ubsan, again\n\nThis reverts commit r304580, making bool_await_suspend.pass.cpp and\ngenerator.pass.cpp unsupported on ubsan again. The host compiler is\nbased on r304329, which has the change from PR33271 (r304277). However,\nthis was not enough to address the issue.\n\nBot Failure:\nhttp://lab.llvm.org:8011/builders/libcxx-libcxxabi-x86_64-linux-ubuntu-ubsan/builds/628\n\nUnknown type!\nUNREACHABLE executed at /home/eric/full-llvm/llvm/lib/IR/ValueTypes.cpp:287!\nllvm::EVT::getEVT(llvm::Type*, bool) (/usr/local/bin/clang-5.0+0x17e7a07)\nllvm::TargetLoweringBase::getValueType(llvm::DataLayout const&, llvm::Type*, bool) const (/usr/local/bin/clang-5.0+0x852c4a)\nllvm::ComputeValueVTs(llvm::TargetLowering const&, llvm::DataLayout const&, llvm::Type*, llvm::SmallVectorImpl<llvm::EVT>&, llvm::SmallVectorImpl<unsigned long>*, unsigned long) (/usr/local/bin/clang-5.0+0x141b6e9)\n llvm::SelectionDAGBuilder::visitTargetIntrinsic(llvm::CallInst const&, unsigned int) (/usr/local/bin/clang-5.0+0x237b1ca)\n\nclang-5.0: /home/eric/full-llvm/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:1236: virtual void llvm::DwarfDebug::endFunctionImpl(const llvm::MachineFunction *): Assertion `LScopes.getAbstractScopesList().size() == NumAbstractScopes && \"ensureAbstractVariableIsCreated inserted abstract scopes\"' failed.\n__assert_fail_base /build/glibc-9tT8Do/glibc-2.23/assert/assert.c:92:0\n(/lib/x86_64-linux-gnu/libc.so.6+0x2dc82)\nllvm::DwarfDebug::endFunctionImpl(llvm::MachineFunction const*) (/usr/local/bin/clang-5.0+0x223f86b)\nllvm::DebugHandlerBase::endFunction(llvm::MachineFunction const*) (/usr/local/bin/clang-5.0+0x227a5a1)\nllvm::AsmPrinter::EmitFunctionBody() (/usr/local/bin/clang-5.0+0x222522f)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b1d8bca7275b1373f05c4edf639edb073cd94892","date":"2017-06-03T00:08:32.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix some undefined behavior in __hash_table. Thanks to vsk for the report and the patch. Reviewed as https://reviews.llvm.org/D33588.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304617 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"118d2fef0227cd5878d3fdac6f67a523e9e09433","date":"2017-06-03T01:21:29.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix the recently introduced test to work on C++03\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304629 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"91d004da6c1c05f76d45cc933b64863488fa4c54","date":"2017-06-05T19:59:17.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Remove workaround for C1XX empty parameter pack bug\n\nWas VSO#109062. This bug was filed *4 years ago*. I submitted a workaround to enable the scoped_allocator_adaptor tests to pass. Bug fixed a week and a half later. This was either a waste of my time, or I've discovered that libc++ has magical bugfix-inducing powers. My money's on the latter.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304730 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"018fbafdf33a84a7eb4503341f62d808b8189fa1","date":"2017-06-06T02:46:12.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Add _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to msvc_stdlib_force_include.hpp.\n\nThis macro will instruct MSVC's STL to not warn about features that are deprecated in C++17,\nas libcxx tests those features and uses them elsewhere.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304765 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"57a009ae03e36eb48943d7ebcdd71fffa5df3210","date":"2017-06-06T18:47:26.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"add missing constexpr to optional::value_or\n\n[Credit to cpplearner]\n\nDifferential Revision: https://reviews.llvm.org/D27850\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304813 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3da9072b088181d11445cd5650d9fccd14189ae7","date":"2017-06-07T00:06:04.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"[test] Test changes to accommodate LWG 2904 \"Make variant move-assignment more exception safe\"\n\nAlso: Move constexpr / triviality extension tests into the std tree and make them conditional on _LIBCPP_VERSION / _MSVC_STL_VERSION.\n\nhttps://reviews.llvm.org/D32671\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304847 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7457967300e31f651a56dbc155ba5f87ab08fa9b","date":"2017-06-07T09:06:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test with exceptions disabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304883 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3762fe69d2a4fe2bcbcdcd17ef68d6e4d63d8fcb","date":"2017-06-07T10:22:43.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Implement LWG 2904.\n\nSummary:\n- Removed the move-constructibe requirement from copy-assignable.\n- Updated `__assign_alt` such that we direct initialize if\n  `_Tp` can be `nothrow`-constructible from `_Arg`, or `_Tp`'s\n  move construction can throw. Otherwise, construct a temporary and move it.\n- Updated the tests to remove the pre-LWG2904 path.\n\nDepends on D32671.\n\nReviewers: EricWF, CaseyCarter\n\nReviewed By: EricWF\n\nDifferential Revision: https://reviews.llvm.org/D33965\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304891 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8f0ca597083d9789c0417dc0ddf7754331ba109f","date":"2017-06-07T10:27:17.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Mark LWG 2904 as complete.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304893 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"276a69c18b3eeb6e8a3a2f22178a1d87aed3d27b","date":"2017-06-07T20:47:42.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix compile error with Bionic's PTHREAD_MUTEX_INITIALIZER\n\nOn Bionic PTHREAD_MUTEX_INITIALIZER contains the expression \"<enum-type> & <integer-type>\",\nwhich causes ADL to perform name lookup for operator&. During this lookup Clang decides\nthat it requires the default member initializer for std::mutex while defining the DMI\nfor std::mutex::__m_.\n\nIf I'm not mistaken this is caused by the explicit noexcept declaration on the defaulted\nconstructor.\n\nThis patch removes the explicit noexcept and instead allows the compiler to declare\nthe default constructor implicitly noexcept. It also adds a static_assert to ensure\nthat happens.\n\nUnfortunatly because it's not easy to change the value of _LIBCPP_MUTEX_INITIALIZER\nfor a single test there is no good way to test this patch.\n\nThe Clang behavior causing the trouble here was introduced in r287713, which first\nappears in the 4.0 release.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304942 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1cf5591af9f5f7d8a97ae069bc736c1250a35a33","date":"2017-06-08T00:38:56.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix class template deduction for scoped_lock.\n\nr304862 changed how CTD handles deducing a non-primary class template\nusing a non-dependent constructor of the primary template. This change\nrequires libc++ to provide explicit deduction guides to make scoped_lock\nwork again.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304955 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d66e43aff1e0f6f67d3f1845ae2425d2a3f165fa","date":"2017-06-08T07:18:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert r304955 - Fix class template deduction for scoped_lock.\n\nRichard decided to fix these cases in Clang, even though they are\nrepresentative of a larger problem for more complex\ncases.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3113ac6f85e785b9be21ddd3ce23140b6ba21c4c","date":"2017-06-08T07:18:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add tests for class template deduction on std::tuple.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304967 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c597e3867ed45682a1e09edd56c47759416b0888","date":"2017-06-08T08:03:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"XFAIL tuple deduction guide test on GCC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304969 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8ba816b36692643f6cdb4c58462c8793a333603a","date":"2017-06-08T18:21:59.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Remove a Clang/C2 workaround.\n\nClang/LLVM doesn't need this workaround.\n\nFixes D33955.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@304999 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"76836caa7db223769d360576a2e9f0c4b464ff65","date":"2017-06-08T18:22:03.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Update locale names for Windows.\n\nlocale.codecvt.byname/ctor_char.pass.cpp:\nThis test used to use \"en_US\" as a plain string instead of using platform_support.\nNeed to fix this because MS STL expects \"en-US\" instead.\n\nplatform_support.h:\nThese are the legacy Windows locale names. Should use IETF tags instead.\nI've also added en_US, since a test was using that as a locale string as well.\n\nmsvc_stdlib_force_include.hpp:\nRemove _MSVC_STL_VER. The libraries will directly define _MSVC_STL_VERSION in the future.\n\nFixes D29351.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305000 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"fb97c4408f385278c39139ace2f18a04cae31312","date":"2017-06-10T02:22:13.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the non-parallel versions of exclusive_scan and transform_exclusive_scan. Reviewed as https://reviews.llvm.org/D34038.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305136 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"568c481c7bd7844ea9e836e5681dc929e550644c","date":"2017-06-12T14:41:37.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"[array.tuple]/1 says that instantiating tuple_element<N, array<T, M>> is ill-formed if N >= M.  We didn't do that. Add a static_assert to cause a failure, and a test that checks that we failed\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305191 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bc37f8d93dc614ce0ca1c0c2bb9c42edfea13445","date":"2017-06-12T16:13:17.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Make tuple_element static_assert in pair if the index is out of range. Also, add a message to variant_alternative<> in the similar case (it already asserted). Add tests for this\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305196 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3128b5abf0265394f476827fd6216e87a4950ae7","date":"2017-06-12T16:33:41.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Mark the recent variant test as UNSUPPORTED for C++ before 17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305198 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6bb9569124fdfac71530417d701100a36dd02d51","date":"2017-06-13T02:28:40.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add a test with an empty input range - should do nothing\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305268 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"246eb897c921e1aee45361d7c10c6fd274cc7f74","date":"2017-06-13T14:34:58.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix bug 33389 - __is_transparent check requires too much\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305292 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0175dfdfdf1c5dbb31da46df6c7a6a3449827b84","date":"2017-06-14T04:48:45.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement the non-parallel versions of reduce and transform_reduce for C++17\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305365 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c590dae5d628fb2fb4e2b9b6870dacfebb265251","date":"2017-06-14T05:51:18.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Add an `__is_inplace_index` metafunction.\n\nSummary: This is used to constrain `variant`'s converting constructor correctly.\n\nReviewers: EricWF, mclow.lists\n\nReviewed By: EricWF, mclow.lists\n\nDifferential Revision: https://reviews.llvm.org/D34111\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305370 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"eaa74739c0d038d3c1fd9b449e4589f9f9cf78ff","date":"2017-06-14T07:12:55.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Mark `__is_inplace_*` tests as UNSUPPORTED in <= C++14.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305373 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"13498f6888cf14b33383e29db42df4f7eb549e6e","date":"2017-06-14T16:40:03.000Z","author":{"name":"James Y Knight","email":"jyknight@google.com"},"message":"PR32476: __nop_locale_mgmt.h not needed with newlib 2.5+\n\nNewlib 2.5 added the locale management functions, so it should not\ninclude __nop_local_mgmt.h. This change adds proper guard around that\ninclude statement.\n\nFor newlib 2.4, some releases contain these functions and some don't,\nand they all have the same version numbers. This patch will work\nproperly with the initial \"2.4.0\" release which does not include these\nfunctions and require __nop_local_mgmt.h.\n\nThis has been tested against newlib 2.2 and 2.5, and also sanity\nchecks against other different version numbers.\n\nPatch by Martin J. O'Riordan and Walter Lee\n\nDifferential Revision: https://reviews.llvm.org/D32146\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305394 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"899f113f6c12fb633ef1707afbd0a215eaac320d","date":"2017-06-14T16:54:43.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"In several places in std::allocator<const T> (and one in shared_ptr, we were casting a 'const T*' to a 'void *' - implicitly casting away the const. Add const_cast to make that explicit. No functional change.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305397 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ff5f9b28baebd8c9a0ce36350fc46edabac52a8e","date":"2017-06-14T20:00:36.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add some const_casts in places where we were implicitly casting away constness. No functional change, but now they're explicit\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305410 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"405af58e6be6dae38c9ddd0dff6316e541df96b7","date":"2017-06-14T21:23:57.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Rework some metaprogramming to use the detection idiom; no functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305417 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"aa356d6b866bdfbf143e3dc5dce069ff6dc080c4","date":"2017-06-14T23:17:45.000Z","author":{"name":"Aditya Kumar","email":"hiraditya@msn.com"},"message":"[locale] Avoid copy of __atoms when char_type is char\n\nThe function num_get<_CharT>::stage2_int_prep makes unnecessary copy of src\ninto atoms when char_type is char. This can be avoided by creating\na switch on type and just returning __src when char_type is char.\n\nAdded the test case to demonstrate performance improvement.\nIn order to avoid ABI incompatibilities, the changes are guarded\nwith a macro _LIBCPP_ABI_OPTIMIZED_LOCALE_NUM_GET\n\nDifferential Revision: https://reviews.llvm.org/D30268\nReviewed by: EricWF\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305427 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"957d7f4ec7d358022102276ae3536141b498e17a","date":"2017-06-15T01:53:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Move external instantiation for __vector_base_common to vector.cpp\n\nPreviously the explicit instantiation for this was in locale.cpp,\nbut that didn't make much sense. This patch creates a new vector.cpp\nsource file to contain the explicit instantiation.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305442 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8c6e35cf2c55f0605b08bd8975f50d3dfea63e06","date":"2017-06-15T02:54:12.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test when modules are enabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305445 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"954bf04d1dd3a077d4abcb15bb3a1a6bd049916a","date":"2017-06-15T02:54:15.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add hack to get --param=enable_modules=true working with a __config_site header\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305446 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"924c998c0e18eaa477bb9016f0657e5c34e5c8eb","date":"2017-06-15T03:02:43.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"remove incorrectly committed assertion\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305447 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"63e0adbe3a6c36436fd9d7873b72159773816b3c","date":"2017-06-15T03:03:45.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix another test with modules enabled\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305448 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"5f8e0d7ed9d5c2661583954ac9a46d5f7949fc31","date":"2017-06-15T03:50:02.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"attempt to fix GCC ToT build failures\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305451 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"270a04fb0672538d802677abbab4140203d9a4ec","date":"2017-06-15T05:44:49.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Renamed some of the newly added tests. No functional change\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305453 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"daea5bc50824cddc1fd7f64d199c7e14ec045965","date":"2017-06-15T14:31:11.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add missing include to __bsd_locale_fallbacks.h.  Fixes https://bugs.llvm.org/show_bug.cgi?id=33370\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305469 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"660d2654f860d405b15422fbf50a5345f7f48761","date":"2017-06-16T00:36:17.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow coroutine_handle<const T> to support creation from const references to the promise_type\n\nIt seems conceivable that a user would need to get a coroutine handle\nhaving only a const reference to the promise_type, for example from\nwithin a const member function of the promise.\n\nThis patch allows that use case. A coroutine_handle<const T> can be used\nin essentially the same way a coroutine_handle<T>, ie to start and destroy\nthe coroutine. The constness of the promise doesn't/shouldn't propagate\nto the handle.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305536 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"73202133d993eb33775562ad36161840e2c78be5","date":"2017-06-16T01:57:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Allow the libc++ C header wrappers to be included when compiling C.\n\nC99 at least. C89 still fails due to the use of block comments.\n\nNOTE: Having libc++ on the include path when compiling C is not\nrecommended or ever really supported. However it happens often\nenough that this change is warrented.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305539 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4b1c560ca313f8fdd268d93586b175b60124b738","date":"2017-06-16T06:17:52.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix potential bug by casting to the POSIX specified type\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305549 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"10a803db2c8eae727d732c6969c71c7dda232bf2","date":"2017-06-18T14:52:26.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"any: Add availability for experimental::bad_any_cast\n\nAs a follow up to r302172, add missing availability for bad_any_cast.\n\nrdar://problem/32161524\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305647 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b001ff730b5f50696f6ce25cc638a6a4fdaeefa","date":"2017-06-18T15:34:47.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"func.wrap.func.con: Fix test comment\n\nThis tests moving `function`, not `const function`.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305648 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2b93569a364e4d09df12887d950635de40f502c4","date":"2017-06-18T16:50:23.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"iostreams: Fix deployment target for streams dylib support\n\nFix an off-by-one in r302172, which triggered building local versions of\nthe iostreams when deploying to `<= macOS 10.9`, when it should have\nbeen `< macOS 10.9`.  10.9 had the dylib support.\n\nThis defines `_LIBCPP_AVAILABILITY_NO_STREAMS_EXTERN_TEMPLATE` less\noften, reducing code size for users with deployment targets of exactly\nmacOS 10.9 or iOS 7.0.\n\nrdar://problem/32233981\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305649 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7db4f7b42648a33050ff1a8c85098080ebe55d34","date":"2017-06-19T04:27:41.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"path: Use string_view_t consistently\n\nMost of filesystem/path.cpp uses string_view_t. This fixes the two spots\nthat use string_view directly.\n\nhttps://reviews.llvm.org/D34332\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305661 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b47a9bc6c40a06aeaec76262e056b8bd1a5203ec","date":"2017-06-19T08:25:57.000Z","author":{"name":"Michael Park","email":"mcypark@gmail.com"},"message":"Add a missing SFINAE condition to the `variant`'s converting constructor.\n\nRemarks: This function shall not participate in overload resolution unless\n         `is_same_v<decay_t<T>, variant>` is false, unless `decay_t<T>` is\n         neither a specialization of `in_place_type_t` nor a specialization of\n         `in_place_index_t`, unless `is_constructible_v<Tj, T>` is true, and\n         unless the expression `FUN(std::forward<T>(t))` (with `FUN` being the\n         above-mentioned set of imaginary functions) is well formed.\n\nDepends on D34111.\n\nReviewers: EricWF, K-ballo\n\nReviewed By: EricWF\n\nSubscribers: fhahn\n\nDifferential Revision: https://reviews.llvm.org/D34112\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305668 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"bfe423eeb359337af3d317985a883dcc8cd09617","date":"2017-06-20T20:34:13.000Z","author":{"name":"Reid Kleckner","email":"rnk@google.com"},"message":"Fix discovery of cxxabi.h in the monorepo layout\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305841 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"750da9c57296fabbd6675c10c5ac89db12b2d3f2","date":"2017-06-20T20:34:50.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Add more tests to tuple_size_structured_bindings.pass.cpp and make it friendlier to C1XX.\n\nStyle/paranoia: 42.1 doesn't have an exact binary representation. Although this doesn't\ncause failures, it makes me uncomfortable, so I'm changing it to 42.5.\n\nC1XX rightly warns about unreferenced variables. Adding tests for their values\nmakes C1XX happy and improves test coverage.\n\nC1XX (somewhat obnoxiously) warns about seeing a struct specialized as a class.\nAlthough the Standard doesn't care, saying struct consistently is better.\n(The Standard itself is still inconsistent about whether to depict tuple_element\nand tuple_size as structs or classes.)\n\nFixes D33953.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305843 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b836deb5dbe77218c1e5f496bc43287d13ccf897","date":"2017-06-20T21:00:02.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Strip trailing whitespace. NFC.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305848 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3497449a37f36d54b7897760eeabe496ae165ad8","date":"2017-06-20T21:10:53.000Z","author":{"name":"Stephan T. Lavavej","email":"stl@exchange.microsoft.com"},"message":"[libcxx] [test] Fix -Wmismatched-tags in tuple_size_structured_bindings.pass.cpp.\n\nClang and C1XX both complain about mismatched class/struct, but libc++ and MSVC's STL\ndiffer on what they use for tuple_element/tuple_size, so there's no way to win here.\n\nI'm reverting this part of my previous change. In the future, I'll have to suppress\nthe warning for one compiler or the other.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305854 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"186b81a5171a6add1d4c3f9606004de059a77717","date":"2017-06-21T21:42:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Attempt to avoid static init ordering issues with globalMemCounter\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@305955 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3477ae445a7e5646e2c6228485cb607290f6e112","date":"2017-06-23T05:12:42.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Implement inclusive_scan/transform_inclusive_scan for C++17.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306083 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2ac0ed06e2fe2642d4e56003694606bcb03a512b","date":"2017-06-26T04:25:15.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated for the Toronto meeting\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306269 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a028f3c8d991a37385d5d91945b926f08bfd9c26","date":"2017-06-26T17:39:48.000Z","author":{"name":"Akira Hatanaka","email":"ahatanaka@apple.com"},"message":"[libcxx] Annotate c++17 aligned new/delete operators with availability\nattribute.\n\nThis is needed because older versions of libc++ do not have these\noperators. If users target an older deployment target and try to compile\nprograms in which these operators are explicitly called, the compiler\nwill complain.\n\nThe following is the list of minimum deployment targets for the four\nOSes:\n\nmacosx: 10.13\nios: 11.0\ntvos: 11.0\nwatchos: 4.0\n\nrdar://problem/32664169\n\nDifferential Revision: https://reviews.llvm.org/D34556\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306310 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a12318f5ae0aae44eb17f376d3598717b45f7a5f","date":"2017-06-28T18:18:30.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Added failing tests for index out of range for tuple_element<pair<T1,T2>> and variant_alternative<>\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306580 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c98c89099a91e56a686dc7f7dcf4cf2b03a6dd34","date":"2017-06-28T18:19:34.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Updated notest on 2974\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306581 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"68506703753864bfa09268094d78c7374db5ef75","date":"2017-06-29T02:52:46.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Hoist explicit instantiation above implicit. NFC\n\nThe string literal operators have implicit instantiations of\nbasic_string<char> and basic_string<wchar>, which prevent the dllimport\non the subsequent explicit instantiation declarations from having an\neffect. Hoisting the explicit instantiations above the implicit ones\nfixes the issue.\n\nI think it's pretty unfortunate that the ordering has such an effect,\nand I'd fixed the same issue for dllexport in r288682. dllimport is more\ncomplicated from a codegen perspective, however, and clang's behavior of\nignoring the dllimport when there's a previous implicit instantiation is\nconsistent with cl, so changing the order is our only recourse.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306632 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4438e211a728650ba767344a8f8448ab0be56357","date":"2017-06-29T23:07:27.000Z","author":{"name":"David L. Jones","email":"dlj@google.com"},"message":"[lit/libcxx] Fix a remaining reference to lit.util.capture() in custom libcxx/Darwin code.\n\nSummary:\nThis reference to lit.util.capture is functionally identical to\nsubprocess.check_output, so this change switches to call the library routine\ndirectly.\n\nReviewers: mzolotukhin, EricWF\n\nReviewed By: mzolotukhin\n\nSubscribers: sanjoy, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D34841\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306755 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"c5247b417b993968ee625d9181b5ab7eb332ad41","date":"2017-06-30T18:50:23.000Z","author":{"name":"Akira Hatanaka","email":"ahatanaka@apple.com"},"message":"Revert \"[libcxx] Annotate c++17 aligned new/delete operators with availability\"\n\nThis reverts commit r306310.\n\nr306310 causes clang to reject a call to an aligned allocation or\ndeallocation function if it is not implemented in the standard library\nof the deployment target. This is not the desired behavior when users\nhave defined their own aligned functions.\n\nrdar://problem/32664169\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@306859 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3288eac67369acd35e37ee70d140af2836957f0b","date":"2017-07-05T03:37:05.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Implement LWG 2937 - equivalent(\"dne\", \"exists\") is not an error\n\nThis patch speculatively implements the PR for LWG 2937, which fixes\ntwo issues with equivalent.\n\n(1) It makes equivalent(\"dne\", \"exists\") an error. Previously only\n    equivalent(\"dne\", \"dne\") was an error and the former case was not (it returned false).\n    Now equivalent reports an error when either input doesn't exist.\n\n(2) It makes equivalent(p1, p2) well-formed when `is_other(p1) && is_other(p2)`.\n    Previously this was an error, but there is seemingly no reason why it should be on POSIX system.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307117 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f26da86616c5c5e58580536a30b750ab50c8bc51","date":"2017-07-05T03:50:03.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Add dummy CMake target for *.pass.cpp tests when LIBCXX_CONFIGURE_IDE=ON.\n\nIn order for IDE's like CLion to correctly parse and highlight the tests\nit needs to know roughly how to build them. This patch adds a dummy CMake target\nfor each/all of the .pass.cpp tests in the test suite to solve this problem.\nThe target is only created when LIBCXX_CONFIGURE_IDE=ON, so it shouldn't affect\nmost users.\n\nOriginally I wasn't sure that this change deserved to live upstream, but it's\nquite frustrating to edit libc++ tests using CLion or Visual Studio without it,\nin particular the filesystem tests which rely heavily on macros. Even though the change\nshould have no effect on non-IDE users/configurations I decided to commit it upstream\nwith the hopes it will benefit somebody other than me.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307118 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"530ad8eb203ccb4ae1bcdd72c4f4205c2a9cf3d8","date":"2017-07-05T03:54:38.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix equivalent test on OS X and FreeBSD\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307119 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e00d350bbdf86bbcd3ed84aebd7c007b12ebd5a1","date":"2017-07-05T16:37:19.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Fix a bug in regex_Iterator where it would report zero-length matches forever. Reported as http://llvm.org/PR33681. Thanks to Karen Arutyunov for the report.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307171 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"58cb7c19bfa4af50667a5dd9f8b81efb160e86db","date":"2017-07-05T22:40:58.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Suppress -Waligned-allocation-unavailable warning in libc++ test suite\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307218 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"e452f6a7e30bb9d0113954edc8c48daf2d20c20c","date":"2017-07-07T05:13:36.000Z","author":{"name":"Duncan P. N. Exon Smith","email":"dexonsmith@apple.com"},"message":"cmath: Support clang's -fdelayed-template-parsing\n\nr283051 added some functions to cmath (in namespace std) that have the\nsame name as functions in math.h (in the global namespace).  Clang's\nlimited support for `-fdelayed-template-parsing` chokes on this.  Rename\nthe ones in `cmath` and their uses in `complex` and the test.\n\nrdar://problem/32848355\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307357 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"316bb1188f1645ca1bacad71c008ab98f3932015","date":"2017-07-07T23:02:30.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix diagnostic in verify test to match new Clang output\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307450 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b2e9337b06425b4af554651d5f2fa65615eb009f","date":"2017-07-08T04:18:41.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix filesystem build on platforms with weird time_t types.\n\n32-bit powerpc provides a 64 bit time_t type and older ppc64 systems\nprovide time_t as a floating point type. This caused problems when building\noperations.cpp since operations.cpp contained compile time tests for conversions\nbetween time_t and filesystem time type.\n\nWhen these tests failed they caused the libc++ build to fail as well. This is unfortunate.\n\nThis patch moves the tests out of the source file and into the test suite. It also\nexpands the tests to allow testing of the weird time_t configurations on all platforms.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307461 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8b30287098cc1ec2cf97aa653e2e0727533efac2","date":"2017-07-09T17:15:49.000Z","author":{"name":"Casey Carter","email":"Casey@Carter.net"},"message":"optional: Implement LWG 2900 and P0602\n\nDifferential Revision: https://reviews.llvm.org/D32385\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307505 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"631d697c6262e23ed6789ea613d9dd20b900e512","date":"2017-07-09T22:20:07.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix test failure to to new/delete ellisions\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307510 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3f22e24981f70dbbabe12b009ceb99fa0a35ff2f","date":"2017-07-10T04:16:50.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Work around PR31864 - ATOMIC_LLONG_LOCK_FREE is incorrect in 32 bit builds\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307517 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"6bfa7316ad167fa0d6ee3343520c3c614a119a4d","date":"2017-07-10T04:32:21.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Fix issues with UBSAN test configuration.\n\nOn Apple the test feature 'sanitizer-new-delete' was incorrectly\ngetting added to the LIT feature set, which mistakenly caused tests\nto be disabled when using UBSAN (the feature is only needed with ASAN/MSAN/TSAN).\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307518 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f7ed02c939ea082fe25ec7dde4f0161b5c3eabbc","date":"2017-07-10T21:02:54.000Z","author":{"name":"Weiming Zhao","email":"weimingz@codeaurora.org"},"message":"[libc++] Refactoring __sync_* builtins; NFC\n\nSummary: Wrap __sync_* builtins with __libcpp_ functions to facility future customizations as atomic operations are unavailable on some targets.\n\nReviewers: danalbert, EricWF, jroelofs\n\nSubscribers: joerg, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D34918\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307591 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7a188e3165e359063b307d2edd3561f32154e2b1","date":"2017-07-10T21:23:32.000Z","author":{"name":"Weiming Zhao","email":"weimingz@codeaurora.org"},"message":"Revert \"[libc++] Refactoring __sync_* builtins; NFC\"\n\nThis reverts commit 72ff8866bca49ee7d24c87673293b4ce88a039ec.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307593 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"880dc47f3718c9a2e913a87676f351547760b3a1","date":"2017-07-10T21:37:35.000Z","author":{"name":"Weiming Zhao","email":"weimingz@codeaurora.org"},"message":"[libc++] Refactoring __sync_* builtins; NFC (Reland)\n\nSummary: Wrap __sync_* builtins with __libcpp_ functions to facility future customizations as atomic operations are unavailable on some targets.\n\nReviewers: danalbert, EricWF, jroelofs\n\nSubscribers: joerg, llvm-commits\n\nDifferential Revision: https://reviews.llvm.org/D34918\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307595 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"347be61138344a566133e99b4514b1da16a81c87","date":"2017-07-11T02:39:50.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"[libcxx][CMake] Add install path variable to allow overriding the destination\n\nThis is going to be used by the runtime build in the multi-target\nsetup to allow using different install prefix for each target.\n\nDifferential Revision: https://reviews.llvm.org/D33762\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307615 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"d60e344b70d220f9f9b9f2b9fac306179934e271","date":"2017-07-12T01:16:33.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Revert \"[libc++] Refactoring __sync_* builtins; NFC (Reland)\"\n\nThis reverts commit r307595. The commit had some issues that needed\nto first be addressed in review.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307746 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"12f2b260eddbdeaa1a41410cb13fcbf210c423ba","date":"2017-07-12T01:38:35.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Remove <__refstring> header; Move it into source directory.\n\nThe libc++ <__refstring> headers has no real reason why it should\nbe a public header that libc++ ships. The only reason it was in the include\ndirectory was because libc++abi needed it to build the library.\n\nHowever keeping <__refstring> a header had other problems, like requiring its\ndependancies to also be in the headers. For that reason this patch\nmoves it into the source directory.\n\nTo work around libc++abi's need for this header a duplicated copy was added\nto libc++abi in r307748. While duplicating the code is an unfortunate solution\nit's the best solution that's currently possible.\n\nIn the future I would like to start a discussion on the mailing lists about\nmaking libc++abi build as a sub-project of libc++, requiring the libc++ sources\nalways be present.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307749 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"de79ab6e4f497c0fc294bfb4c7b4b5f274ae26ed","date":"2017-07-12T01:45:13.000Z","author":{"name":"Ben Craig","email":"ben.craig@ni.com"},"message":"Fix unrepresentable enum for clang-cl unstable ABI\n\nWhen using LIBCXX_ABI_UNSTABLE=YES, clang-cl gave the following warning:\n\nP:\\llvm_master\\src\\llvm\\projects\\libcxx\\include\\string(683,51):\nwarning: enumerator value is not representable in the underlying type\n'int' [-Wmicrosoft-enum-value]\n\nFixed by switching from enums to static const size_type.\n\nhttps://reviews.llvm.org/D35174\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307751 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"a3c3d5f6c1df3b999213c63de5c46ec364ffd89a","date":"2017-07-13T20:47:24.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Use proper template terminology. NFC\n\nIt's supposed to be \"class template\" and \"function template\" instead of\n\"template class\" and \"template function\".\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307954 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1beaa5accc989e49d50807c519ef29ebf2418f58","date":"2017-07-13T21:28:17.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Remove unused _LIBCPP_FUNC_VIS_ONLY\n\nThis has been unused since r282644.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307965 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"cd75b288ca9566fcee1c8c55fd30575b780b7505","date":"2017-07-13T21:35:52.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Mark string operator+ _LIBCPP_FUNC_VIS\n\nIt has an extern template instantiation declaration in the headers and a\ncorresponding instantiation definition in the library, so we must mark\nit with _LIBCPP_FUNC_VIS to make it available outside the library.\n\nThis doesn't cause any ABI changes as-is since we don't build libc++\nwith hidden visibility (so the function is exported anyway). It's needed\nfor building libc++ with hidden visibility, however.\n\nClarify the Windows behavior for extern function templates while I'm\nhere, since this exercises that behavior.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307966 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"b58dd3d4f4b8e8c41b581a377d34aa1b34c0ce44","date":"2017-07-13T22:08:59.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] class template -> template class. NFC\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307972 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"0d6a92ed81471b5c69572873e2e38c8ad78575ed","date":"2017-07-14T03:56:54.000Z","author":{"name":"Shoaib Meenai","email":"smeenai@fb.com"},"message":"[libc++] Clean up cl warning 4231 disabling\n\nOnce upon a time, extern templates used to be a Microsoft extension, so\ncl would warn about their usage, and libc++ suppressed that warning.\nThey've long since been standardized, so the warning is defunct. (libc++\nalso doesn't currently support building with cl anyway.)\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@307997 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"4649a1eae0a36039cad2d3160050289d898cc915","date":"2017-07-15T15:22:21.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update issues moved in Toronto\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@308097 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"893ac44f2ad4ec9c8f607817817c6c670ccb0d08","date":"2017-07-16T23:59:23.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Update libc++ status pages with results of the Toronto Meeting - and for C++2a\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@308153 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"7afe61ad1dd29bd3db4668655502a1109b7cfea0","date":"2017-07-17T03:02:27.000Z","author":{"name":"Marshall Clow","email":"mclow.lists@gmail.com"},"message":"Add case for c++2a to libc++ and test macros\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@308159 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"da4047d8384ec30c33f2dad1091325b81d39cf72","date":"2017-07-17T21:52:31.000Z","author":{"name":"Bruno Cardoso Lopes","email":"bruno.cardoso@gmail.com"},"message":"Check for _MSC_VER before defining _LIBCPP_MSVCRT\n\nSome targets (e.g. Darwin) might have the Win32 API available, but they\ndo not use MSVC CRT. Assume _LIBCPP_MSVCRT only when _MSC_VER is available\nand __MINGW32__ isn't defined.\n\nDifferential Revision: https://reviews.llvm.org/D34588\n\nrdar://problem/32628786\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@308225 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"158fe1062cf7da1851d3560757f0a3f716bb815a","date":"2017-07-18T19:48:02.000Z","author":{"name":"Leo Li","email":"aoli@google.com"},"message":"[CMake] Use MATCHES for regular expression.\n\nSubscribers: mgorny\n\nDifferential Revision: https://reviews.llvm.org/D35514\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/trunk@308347 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"8bdac77197262660410b0e4fec9de67f6cac3261","date":"2017-07-19T12:20:52.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Creating release_50 branch off revision 308441\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@308447 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"526c3a93942714925a19bdd6206b5698227575dc","date":"2017-07-19T14:04:38.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Drop 'svn' suffix from version number.\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@308471 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f09864638f7be6aedd8d7e16e8ffd855d95689bd","date":"2017-08-03T16:34:10.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Merging r309917:\n------------------------------------------------------------------------\nr309917 | ericwf | 2017-08-02 19:50:43 -0700 (Wed, 02 Aug 2017) | 4 lines\n\nAdd system header pragma to BSD locale fallback headers.\n\nThis prevent leaking warnings to the user about use of C++11\nextensions in C++03.\n------------------------------------------------------------------------\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@309958 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"85720f5dad53c307009c36799ef9dd52138a8d6b","date":"2017-08-04T16:52:25.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Merging r309920:\n------------------------------------------------------------------------\nr309920 | ericwf | 2017-08-02 21:28:10 -0700 (Wed, 02 Aug 2017) | 5 lines\n\nFix libcxx build with glibc 2.26+ by removing xlocale.h include.\n\nPatch by Khem Raj. Reviewed as D35697. Also see PR33729.\n\n\n------------------------------------------------------------------------\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@310068 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"912b70c7a9920de3c0c4cb23bf4e1bf4be294821","date":"2017-08-07T19:48:12.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Merging r309296 and r309307:\n------------------------------------------------------------------------\nr309296 | marshall | 2017-07-27 10:44:03 -0700 (Thu, 27 Jul 2017) | 1 line\n\nImplement P0739R0: 'Some improvements to class template argument deduction integration into the standard library' This is an API change (not ABI change) due to a late change in the c++17 standard\n------------------------------------------------------------------------\n\n------------------------------------------------------------------------\nr309307 | marshall | 2017-07-27 11:47:35 -0700 (Thu, 27 Jul 2017) | 1 line\n\nDisable the deduction guide test I added in 309296 for the moment, while I figure out which compilers don't support deduction guides\n------------------------------------------------------------------------\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@310286 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"2621f4251037424ec2350d5ba0272bcc959f47de","date":"2017-08-07T19:49:04.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Merging r309838:\n------------------------------------------------------------------------\nr309838 | marshall | 2017-08-02 10:31:09 -0700 (Wed, 02 Aug 2017) | 1 line\n\nFix PR33727: std::basic_stringbuf only works with DefaultConstructible allocators. Thanks to Jonathan Wakely for the report and suggested fix\n------------------------------------------------------------------------\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@310287 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"ef34b82889be4aa6438da96868f3c5d9fd38edcc","date":"2017-08-07T19:49:31.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Merging r309851:\n------------------------------------------------------------------------\nr309851 | marshall | 2017-08-02 11:21:34 -0700 (Wed, 02 Aug 2017) | 1 line\n\nFix shadowing warning\n------------------------------------------------------------------------\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@310288 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"3fa4f9bbd1408f9b42b5a92c937cc832f3061ee8","date":"2017-08-18T20:59:31.000Z","author":{"name":"Hans Wennborg","email":"hans@hanshq.net"},"message":"Merging r309474:\n------------------------------------------------------------------------\nr309474 | smeenai | 2017-07-28 19:54:41 -0700 (Fri, 28 Jul 2017) | 9 lines\n\n[libc++] Hoist extern template above first use\n\nThis function template is referenced inside class basic_string as a\nfriend function. The extern template declaration needs to be above that\nfriend declaration to actually take effect.\n\nThis is important because this function was marked as exported in\nr307966, so without the extern template taking effect, it can leak into\nother DSOs as a visible symbol.\n------------------------------------------------------------------------\n\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@311197 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"f22cb8b8c6f17e35505c3dc41c2a87453bedf083","date":"2017-08-25T00:19:47.000Z","author":{"name":"Eric Fiselier","email":"eric@efcs.ca"},"message":"Update ABI lists for 5.0\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@311735 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"396abfea0eb5d32ef0da81c1274f8064018be078","date":"2017-11-13T21:27:53.000Z","author":{"name":"Tom Stellard","email":"tstellar@redhat.com"},"message":"Merging r312693:\n\n------------------------------------------------------------------------\nr312693 | marshall | 2017-09-06 21:19:32 -0700 (Wed, 06 Sep 2017) | 1 line\n\nAdd even more string_view tests. These found some bugs in the default parameter value for rfind/find_last_of/find_last_not_of\n------------------------------------------------------------------------\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@318088 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"290625979a9a458ea260c34233f13f3c02688f70","date":"2017-11-15T00:21:20.000Z","author":{"name":"Tom Stellard","email":"tstellar@redhat.com"},"message":"Merging r313776:\n\n------------------------------------------------------------------------\nr313776 | marshall | 2017-09-20 10:34:11 -0700 (Wed, 20 Sep 2017) | 1 line\n\nFix a bit of UB in __independent_bits_engine. Fixes PR#34663\n------------------------------------------------------------------------\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@318236 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"1496b0e710aa010a384910b36d10a257cdeae2b7","date":"2017-11-22T14:45:26.000Z","author":{"name":"Tom Stellard","email":"tstellar@redhat.com"},"message":"Merging r312892:\n\n------------------------------------------------------------------------\nr312892 | ericwf | 2017-09-10 16:41:20 -0700 (Sun, 10 Sep 2017) | 10 lines\n\nFix PR34298 - Allow std::function with an incomplete return type.\n\nThis patch fixes llvm.org/PR34298. Previously libc++ incorrectly evaluated\nthe __invokable trait via the converting constructor `function(Tp)` [with Tp = std::function]\nwhenever the copy constructor or copy assignment operator\nwas required. This patch further constrains that constructor to short\ncircut before evaluating the troublesome SFINAE when `Tp` matches\nstd::function.\n\nThe original patch is from Alex Lorenz.\n------------------------------------------------------------------------\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@318835 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"598ae4fa2e4da8b0a4b839c8c26b6cd3f672a968","date":"2017-11-22T15:06:35.000Z","author":{"name":"Tom Stellard","email":"tstellar@redhat.com"},"message":"Merging r315994:\n\n------------------------------------------------------------------------\nr315994 | ericwf | 2017-10-17 06:03:17 -0700 (Tue, 17 Oct 2017) | 18 lines\n\n[libc++] Fix PR34898 - vector iterator constructors and assign method perform push_back instead of emplace_back.\n\nSummary:\nThe constructors `vector(Iter, Iter, Alloc = Alloc{})` and `assign(Iter, Iter)` don't correctly perform EmplaceConstruction from the result of dereferencing the iterator. This results in them performing an additional and unneeded copy.\n\nThis patch addresses the issue by correctly using `emplace_back` in C++11 and newer.\n\nThere are also some bugs in our `insert` implementation, but those will be handled separately.\n\n@mclow.lists We should probably merge this into 5.1, agreed?\n\nReviewers: mclow.lists, dlj, EricWF\n\nReviewed By: mclow.lists, EricWF\n\nSubscribers: cfe-commits, mclow.lists\n\nDifferential Revision: https://reviews.llvm.org/D38757\n------------------------------------------------------------------------\n\ngit-svn-id: https://llvm.org/svn/llvm-project/libcxx/branches/release_50@318837 91177308-0d34-0410-b5e6-96231b3b80d8\n"},{"hash":"35a26f82dae8b292290815ae6ede8f849ce7806f","date":"2018-02-07T23:24:50.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@blockone.io"},"message":"Removal of files we do not need and modifications to make libcxx work under EOS\n"},{"hash":"7a5152abf8089937a2656a5d8b3b59c793f64bf9","date":"2018-02-12T16:39:16.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"removed functions not provided by our libc\n"},{"hash":"959b01fb8b617851e260bd2218ac8ba74269fec9","date":"2018-02-12T18:32:45.000Z","author":{"name":"wanderingbort","email":"bart.wyatt@block.one"},"message":"Merge pull request #1 from EOSIO/libc++-cleanup\n\nremoved functions not provided by our libc"},{"hash":"9a2c03a6dbe4deaa1eceb012ada6795ac526cf4a","date":"2018-03-08T21:26:54.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"floating point functions restored\n"},{"hash":"2880ac42909d4bb29687ed079f8bb4405c3b0869","date":"2018-03-08T22:14:23.000Z","author":{"name":"Kevin Heifner","email":"heifner_k@ociweb.com"},"message":"Merge pull request #2 from EOSIO/restore-floating-point\n\nfloating point functions restored"},{"hash":"4c6b13701f9b0a02c198290932f2e8f37091a225","date":"2018-03-09T22:49:37.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"attempt to fix builtins issue (draft)\n"},{"hash":"3c1e58e4e4fb86c0bc4e98442c3e7ae0a90a042d","date":"2018-03-09T23:26:45.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"builtins replacements for int\n"},{"hash":"1843e8328997e81c05dc01cf738297b31fb53289","date":"2018-03-12T13:21:48.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@blockone.io"},"message":"comment updated\n"},{"hash":"e4bd4494f1ac4c18e7ac12278149d53dec0f5ff6","date":"2018-03-12T14:05:03.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@blockone.io"},"message":"move include<builtins.h> up in locale.cpp\n"},{"hash":"4db45e5e5948995eea60a4e4fecadb96e52c2af2","date":"2018-03-12T17:47:39.000Z","author":{"name":"wanderingbort","email":"bart.wyatt@block.one"},"message":"Merge pull request #3 from EOSIO/atomic-builtins\n\nAtomic builtins"}]