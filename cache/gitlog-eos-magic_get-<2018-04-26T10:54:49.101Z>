[{"hash":"2a53f298023c4e8161846b852a2a813f248b84d0","date":"2016-03-22T19:29:11.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"initial varsion\n"},{"hash":"b8090f7307690e56b3ea9878f2d4cbf67ca1cb0f","date":"2016-03-22T19:30:00.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Header fixed\n"},{"hash":"15049ba2c0264ea2902b517e8bd03b9b7ddea0be","date":"2016-03-24T19:19:39.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Multiple improvements\n"},{"hash":"cadda8cef176b2f48e08f8c93dd6f510de83afb6","date":"2016-03-24T19:24:29.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Make a separate header\n"},{"hash":"062e0d1260236f20579211378ab07feb585083ab","date":"2016-04-01T18:48:08.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More asserts, allow enums, more methods and basic documentation\n"},{"hash":"04ce540c7887a9a352860b4785d479ff7d9d4b23","date":"2016-04-01T18:53:11.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Force C++ source highlighting\n"},{"hash":"37edc2e60b4c9b55af3790f6e37bb1baf9e94e8c","date":"2016-04-01T18:54:23.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Force C++ source highlighting 2\n"},{"hash":"3520c3e84eeefcbb3e4f44f9c688e2b58ada59fd","date":"2016-04-01T19:01:21.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Minor formatting update\n"},{"hash":"4005ef56f8a41926e8aff7acf51a7e203a8b0be5","date":"2016-04-07T18:02:21.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More functions, more assertions, enums support, more tests and better docs\n"},{"hash":"73d85bee28dfa05d1138fb3a606dc79fa52c9951","date":"2016-04-07T18:26:02.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Readme updated\n"},{"hash":"d6bf6d1e746ac3e9769b90fdf7bbe740d0bcb903","date":"2016-04-08T18:55:06.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added pod_ops namespace and a lot of usefull generic operations. Improved diagnostics and docs\n"},{"hash":"7e080019ce7fdc55d8ec0230a1db626c3c4716ef","date":"2016-04-08T18:56:51.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Improved docs\n"},{"hash":"8e31b5756bde05c72d235f0da8aebecbba1f4211","date":"2016-04-10T08:49:34.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added TravisCI integration\n"},{"hash":"06b08dc8f4f826da4c3644e671a7c91daba7c637","date":"2016-04-10T08:51:35.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"TravisCI fixes (1)\n"},{"hash":"32555ca0d1bb71f798254ebd6f9dab4eba4bb06c","date":"2016-04-10T09:15:49.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"TravisCI fixes (2)\n"},{"hash":"ded8e738665a0c359e47fa3aba8de7e6f23d66c3","date":"2016-04-10T09:39:13.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Docs updated\n"},{"hash":"f0a92f01e72630517e9415d99eb068ba9cab907e","date":"2016-04-11T17:41:37.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"support for empty structures in flat_* methods, slightly more compact streaming operators\n"},{"hash":"0127ec9f8eac8ba121cec23b5676f62c90d7552a","date":"2016-04-12T18:53:03.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Operators in pod_ops namespace are now disabled for POD type if that POD type could be implicitly converted to type that has required operator (fixes output of 'using namespace pod_ops; std::cout << std::true_type{};')\n"},{"hash":"1dc4a2ba8f2f74280b733e3c0872a49a8e1418f1","date":"2016-04-19T05:13:34.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added flat transparent comparators\n"},{"hash":"a64a6c12f4f67e0ac0b4aae2297dcd52844d3672","date":"2016-05-09T17:42:50.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Slightly improved compilation times\n"},{"hash":"cba975b09ba035354f81606794f56320afef8057","date":"2016-05-16T18:23:32.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Compiletion time is now close to O(log(sizef(POD)) instead of O(sizeof(POD))\n"},{"hash":"03985e679a10b23bccb16cc8ce7ff485f1d4506f","date":"2016-05-16T18:40:50.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Heavy tests on fields count detection\n"},{"hash":"1d54811464f009c9aaf66226266338ffd1a45d5c","date":"2016-05-16T20:45:34.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Compilation time is now O( log(sizeof(POD)) )\n"},{"hash":"d9e60e74cc33b0dcce92b3d34ecfdddf644aac62","date":"2016-05-21T10:36:56.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Improved compilation times and added more static asserts\n"},{"hash":"eb2b9f8f89166e1cfe51d0c66dfb2ec885f093ed","date":"2016-05-21T10:38:57.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More tests\n"},{"hash":"2c3567630ebbbd8953a6024839a79e68456d1e95","date":"2016-06-06T20:20:43.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added flat_hash<> and removed some whitespaces\n"},{"hash":"99e3c623f45074dac0b2bd5ee1c234d1ce2d5b27","date":"2016-06-07T19:43:44.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Modifications to make library suitable for Boost\n"},{"hash":"11aa87e21f51f9d5b06b66a18733de31448d6289","date":"2016-06-08T18:26:55.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More docs, more Boost related modifications, more examples and tests. Work on rel_ops is going on\n"},{"hash":"db967a38a8652f8a74565b812a4be886135ec404","date":"2016-06-09T20:05:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More experiments with pod_ops, more tests and docs\n"},{"hash":"efe421e98262e929fa3f19d5079ebebc228ddb93","date":"2016-06-09T20:10:35.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Link to the docs provided\n"},{"hash":"36d22fe4de2b1e3cb1f669d49de4adce04097817","date":"2016-06-15T20:30:56.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Updated docs, examples and polished headers\n"},{"hash":"620f9f4f80eb78e12dd636d4b50b2bacd6c6f739","date":"2016-06-15T20:41:30.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix travisCI tests\n"},{"hash":"96b0c9b7d7337e3137b068cc772f809291960f01","date":"2016-06-15T20:51:48.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Another TravisCI fix\n"},{"hash":"f058b9b77171d9b0e8ae80bc1ceca8cac84b68b9","date":"2016-06-15T20:58:32.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Minor fix of README formatting\n"},{"hash":"9fb1071862fa8d786ca53d04585baa9247773e40","date":"2016-06-15T21:04:12.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Another travis related fix\n"},{"hash":"ebd3750681c415d040c6c302684b15baf6f1c05c","date":"2016-06-15T21:14:31.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Another travis related fix no2\n"},{"hash":"dc585f67fd8432a6f7a64f5a06e8541335106d43","date":"2016-06-15T21:18:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Another travis related fix no3\n"},{"hash":"2284d6f7032da64d48f055d61d377979af5bfa74","date":"2016-06-18T09:35:40.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes\n"},{"hash":"d78d30038085c2171feae6ed02919c92ec674620","date":"2016-06-18T09:38:02.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (2)\n"},{"hash":"2854894a742ab3a20da227464e10174d3e16b2e9","date":"2016-06-18T09:40:38.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (3)\n"},{"hash":"1405b1ab645d18dca25e51d1446d7cfe0da90d99","date":"2016-06-18T10:06:03.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (4)\n"},{"hash":"a83f1043f3caa9aa007d9141c3fbbe43c40ff409","date":"2016-06-18T10:16:30.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (5)\n"},{"hash":"3ee92b6a14a9ffafe4b77e765ef8794bf4c5a028","date":"2016-06-18T10:27:35.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (6)\n"},{"hash":"54f82e94821c9e4c5998cedb92f2b91f399b9761","date":"2016-06-18T10:35:58.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (7)\n"},{"hash":"b9987c70ab6a9b3d9fcb7632a0d385bf2b66c247","date":"2016-06-18T11:37:35.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (8)\n"},{"hash":"74a1bb1eac6536c55a413f510c34a803814361c0","date":"2016-06-18T11:46:54.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More travisCI related fixes (9)\n"},{"hash":"1b0ae91a5257a428c9b3cc8645c362fb06b1bd59","date":"2016-06-18T14:04:35.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"New library name in README\n"},{"hash":"c9bb66911ad457327f4463bf6d2ce1ea7bff21f2","date":"2016-07-12T18:32:38.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"rename get to flat_get. Remove some usings\n"},{"hash":"2ca4142e93a4079e9e30c178cc305f1b31c3322b","date":"2016-07-12T18:34:05.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Made an as_tuple function and improved some of the functions to reinterpret_cast to tuple only once\n"},{"hash":"6ef486f0b7034dfd006dd4c6c65c0dd3dcba829d","date":"2016-07-12T19:20:55.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"detail::as_tuple -> detail::as_flat_tuple\n"},{"hash":"4211404f20f6cca349bdde0485b93c7ea1c87f6f","date":"2016-07-14T19:29:05.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added tuple_size method, updated the docs and dropped some useless specializations\n"},{"hash":"275172514872d15d7ace9665122ef4cf491b6a14","date":"2016-07-14T19:31:16.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Changed comparisons _impl to work with sequence_tuple::tuple and made those _impl functions to constexpr\n"},{"hash":"7d9dec3b44836bf4ab3ec93a35421d1666eb8a32","date":"2016-07-14T19:35:17.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fair implementation of comparison operators (now actually uses the underlying operators of POD types). More constexpr methods and adde some include guards\n"},{"hash":"27cd2d78e305e78e2d59d6a895d8d98e3dbfb173","date":"2016-07-14T19:38:34.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Initial commit of reflections based on 'structured bindings' from C++17\n"},{"hash":"9ecedfe6ca8435a25e100bd1b1575b5970bc9b2f","date":"2016-07-18T20:42:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Better formatting for generated files\n"},{"hash":"135faf692d0651f3e829d28781c95ecf4f193eb2","date":"2016-07-18T20:46:45.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Move some files and change header names\n"},{"hash":"212efb1be04558a6b96bc98e88996d703510c44f","date":"2016-07-18T20:48:14.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added initial and untested version of C++17 functionality\n"},{"hash":"67b1b5c06a34fdaccb04d3376e38e759e5580ef4","date":"2016-07-18T20:49:21.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Rename internal function to better reflect their usability in C++17\n"},{"hash":"494a9cf6cabc08ecaffbc76f0d7ae3d1111b53c6","date":"2016-07-18T20:51:22.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Rename more internal functions to better match their usability (removed flat prefix and moved to sequence_tuple namespace)\n"},{"hash":"9fbb780839da1443c584828b40791bb36f00bea2","date":"2016-07-18T20:54:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Move more files to better reflect their content and usability (pod_ -> flat_)\n"},{"hash":"452e01ff0b2a98d37d82e3dc27810d6606c6c807","date":"2016-07-28T20:24:18.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Generator updated, more compact c++17 code produced\n"},{"hash":"16e28d3c3cec84663e2399bfbb7d423a7209938d","date":"2016-07-28T20:45:57.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"tuned cpp17 generator: the output is even more compact now\n"},{"hash":"79a79332aef9692ad691a86587ddca65f417d61a","date":"2016-07-28T20:46:47.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Do not include c++17 headers by default (they are not tested yet)\n"},{"hash":"b5dea7e0c41c243c1a6de2887e91c3921daa792d","date":"2016-09-05T18:41:53.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Improved docs, removed unused classes\n"},{"hash":"217b4f9d504244d4af03ad6623c36191a1207fc8","date":"2016-09-06T22:37:03.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixed typo\n"},{"hash":"f4126ca4642fa5083931365f8dd451da6164a0de","date":"2016-09-26T17:41:45.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added test case from Lisa Lippincott and started fixing the issue\n"},{"hash":"4c2f7fbce42291b9d5d3b7b2c038d1e8e413d1e1","date":"2016-09-26T17:43:49.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Representing nested structures as nested tuples; fails to compile\n"},{"hash":"313d6676644b1ee1d4c2d9adc6f9c707c0a9e864","date":"2016-09-26T17:45:03.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixing the compilation; still fails to compile\n"},{"hash":"fd381c5dd4dff2f8566f14dc396a0ca6b68faa9e","date":"2016-09-28T19:40:35.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Continuing work on correct representation of structures with tricky alignments\n"},{"hash":"558a49daee4dc660a458bedab719f15f1d9d0a3a","date":"2016-09-28T19:42:19.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Use std::tuple in most of the places, instead adding and reinventing new functionality in our own tuple\n"},{"hash":"46ca2b70b24019743461644435f9a0cd5fe6ccd9","date":"2016-09-28T19:43:47.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More tests enabled and more fixes\n"},{"hash":"3dad4f62710174ca788d09f8ff514d8b7755d428","date":"2016-09-28T19:45:01.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More tests fixed and enabled, dropped hand-written comparators in favour of std::tuple default ones\n"},{"hash":"72c831cb1a8f0f3469a01a2dfe6089f5f64c2b9c","date":"2016-09-29T18:21:59.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More fixes and debugging for nested structures\n"},{"hash":"282094999e2d004e992d6fbe993e78cb9698d824","date":"2016-09-29T18:23:01.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Attempt to use std::tuple to avoid reinventing all the tuple functionality from scratch\n"},{"hash":"12940c6ed9cc95cbe7ce8158c1e12ce34bd0f334","date":"2016-09-29T18:24:17.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Attempt to fix ineffective std::tuple_cat by implementing it from scratch\n"},{"hash":"138a7aff2e751b9c6c99516b7c91ae87155d4992","date":"2016-09-29T18:25:59.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Dropping std::tuple and fixing my own tuple implementation. std::tuple on GCC-6 was exceeding template instantiation depth limit extreamely fast\n"},{"hash":"ac034a6ef732c9a6c28a8167c5127e4424a47002","date":"2016-09-29T18:28:26.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Removing copypasted code and improving compilation times\n"},{"hash":"b0347fb617194a428b03531b15dbcd087698c4c3","date":"2016-09-29T18:29:27.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Improving compilation times\n"},{"hash":"d6687e5d181ff74bfd11f712c4fb56a720b73504","date":"2016-09-29T18:30:47.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Cleanups, clang related workarounds\n"},{"hash":"c9bc21ed9c0a7a03f0cec46046df9f90300de059","date":"2016-09-29T18:31:42.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix all the known clang related issues\n"},{"hash":"378acb1fe91a4c58a1a499efd992a3dd126d079b","date":"2016-09-29T18:33:24.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More tests and significant compilation time improvement\n"},{"hash":"940cb1507fff00a5c4cbe6b1aff94d9554717833","date":"2016-09-29T18:42:23.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix testing issue with missing boost/type_index.hpp header and enable clang\n"},{"hash":"558734e7f88d0659b48d38a555707fc071e81c37","date":"2016-09-29T18:45:33.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixing clang compile options\n"},{"hash":"a144d044df98dea131460e7d161a01979a790ab7","date":"2016-09-29T19:08:03.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Disable clang, as it is too old in repo\n"},{"hash":"7c252b4ca5137c895755c94c541af0f5c0cd5cfe","date":"2016-09-29T19:35:22.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Updated the motivating example\n"},{"hash":"5ae2e2fd5f3234d659917386707016f134ee2c6e","date":"2016-09-30T17:26:18.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Optimized compilation times\n"},{"hash":"c110bdf0e64d3f290b479e20b619e6a284f28ea6","date":"2016-09-30T17:28:15.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Minor refactoring and one more test\n"},{"hash":"9c88c56cb3e9658053172d88a5dd2eed3e42ba53","date":"2016-10-08T14:58:51.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Remove unused classes, drop member reference checks as was proposed by Anton Bikineev\n"},{"hash":"8e0f27baee592d743a509ad50ad2e3b2f053cf5a","date":"2016-10-08T15:00:47.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Add more tests and try to relax POD requirement as was proposed by Anton Bikineev\n"},{"hash":"48b86158f0403437e0b52938f03d1b422ed0dd70","date":"2016-10-08T15:02:44.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added static_assert for fields_count() function. Now noncopy constructable classes are not allowed\n"},{"hash":"a277cdac19bb9b0dcc71561ff3ef3f170d50f30a","date":"2016-10-08T15:04:27.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Minor cleanups and made fields_count() correctly work with structures that have bitfields\n"},{"hash":"e353fd63f2943f49bd7a08033678b68c859d0670","date":"2016-10-12T19:05:27.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixed typo\n"},{"hash":"26fffe6ff00e028f63b0e07374c31695e535c9d8","date":"2016-10-14T05:59:22.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added 'How it works' section into the docs\n"},{"hash":"e815460aedc27c9d0ab3d003e83645679963a8eb","date":"2016-12-25T13:59:13.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Updated the autotesting script\n"},{"hash":"cb876b55a8f47b4824e971f2b6bbc9afd83988cf","date":"2016-12-26T19:09:43.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Runc CI tests only in C++14 mode\n"},{"hash":"1314722a22c7015a6a5a8c662310df7034ad442f","date":"2016-12-28T19:07:09.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Started rewriting the library to support precise and flat operations independently from C++ Standard\n"},{"hash":"fb04223e5e1c4da19a105ee3f26b07d0fc59ff6d","date":"2016-12-28T19:08:05.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Separate folders for precise and flat functions\n"},{"hash":"2d289f6b285bd466ce072efa6be231d3c54df995","date":"2016-12-28T19:09:39.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Started adopting the precise functions for C++14\n"},{"hash":"88f7ad3902f6d73c6879686b9cb5bf052b20d5b4","date":"2016-12-28T19:10:43.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Started adding code for for_each_field function\n"},{"hash":"0147c60f1e7b23f77a1e63178545c16b4b909367","date":"2016-12-28T19:11:38.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More code and tests for for_each_field function\n"},{"hash":"d6d1082157eba1a08235b19cfd43af0a3ab7ff4d","date":"2016-12-28T19:12:29.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Separate tests on common, flat and precise\n"},{"hash":"32b682261da86a4a53327d4e116a5a4ebe93b8dc","date":"2016-12-28T19:13:52.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Functions write and read now use for_each_field in C++14 mode\n"},{"hash":"bc849f583e7388d571da6842fd75d490ca3abe53","date":"2016-12-28T19:15:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Operators and functors for precise mode added\n"},{"hash":"63a41e02565c8dd93f1bcb73466dbb1461d604a8","date":"2016-12-28T19:16:22.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Cleanup code and fix hash functor\n"},{"hash":"af0a9371265aa9198cb83ab43df09f0faaaad572","date":"2016-12-28T19:19:29.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More tests, some refactoring, flat functions now have their precise version, started improving the documents, fixed issues with const propagations, better separation of functions (now IO functions are not part of the core.hpp)\n"},{"hash":"9bca907657e16879b6680ba2a7d9999d2a6ba816","date":"2016-12-29T18:51:52.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixed typos in docs and better structuring of reference section\n"},{"hash":"459a25f817ce00a595dad860f208b302b73ab1af","date":"2016-12-31T18:42:44.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"A few more examples\n"},{"hash":"cfee20e36f7c405c716459e0c213c3cbbd9c8532","date":"2017-01-01T15:07:16.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixed multiple typos in docs and added more short examples\n"},{"hash":"7532ba8ba14b651076d8981e4d1a8d14473f1fe3","date":"2017-01-03T18:44:26.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Polishing the docs\n"},{"hash":"6ea565dd6d4db326861eb888e57297e2d259f2ce","date":"2017-01-03T18:51:11.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix for Jamfile\n"},{"hash":"afd995e5dddd19c88f4af0d8ed823b048b938483","date":"2017-01-05T17:54:08.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added info about reinterpret casts into the reference section. Improved formatting and added more examples\n"},{"hash":"b4f147722e3e83e5c6760931933303fcaa241e84","date":"2017-01-06T14:55:33.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Updated README.md\n"},{"hash":"7d422edf854414c4abd2bd59e1863d7912b9ea2b","date":"2017-01-06T14:59:19.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Updated README.md (fixed comments\n"},{"hash":"2f3c46dd9d84ca165c3bd3e6ff346ba56a56860a","date":"2017-01-06T15:17:41.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Attempt to test on Windows\n"},{"hash":"3eda0d10c6e4892791815c3ea34d5138e1835763","date":"2017-01-06T19:29:12.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"try to test on MSVC 2017\n"},{"hash":"fd68ea93ee9fa50e5d4a709e6e6df8e8380efbbc","date":"2017-01-06T20:46:41.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Deduplicate some code, create a separate config header, assume that MSVC 2017 RC supports C++14\n"},{"hash":"7992256108b96e1a0ae1d238349924825b898ffc","date":"2017-01-06T21:06:46.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Use ugly vendor specific extension to detect partial C++14 compatibility\n"},{"hash":"afc6fe1272e638da68878e0231881a0c458193be","date":"2017-01-06T21:19:29.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Remove vendor specific macro for C++14 detection and aply a fix for appveyor.yml\n"},{"hash":"bea67d50780dfab4d21aec4c1a6047084d79eecf","date":"2017-01-06T21:34:24.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix typo\n"},{"hash":"191184a42223e469f39221f947a5376689dde8ca","date":"2017-01-15T07:49:56.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Use BOOST_PFR_USE_CPP17 macro instead of copypasted check, fix copyright dates, drop unnecessary dependencies in core17_generated.hpp\n"},{"hash":"04f27144755ed101f97c6bf550eaccfa1e2a3013","date":"2017-01-15T10:55:19.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Attempt to reduce msvc requirement\n"},{"hash":"2c24e038d0e9f6d931809784c3030947012f2207","date":"2017-01-15T11:41:58.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Revert the MSVC check\n"},{"hash":"34fd38787763fc676dc65c8eb35774391036e7b5","date":"2017-01-20T19:31:23.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Use PNG badges (they look more habitally)\n"},{"hash":"f788912a71053387bc52aa52b68bc4096fcc68fe","date":"2017-04-17T02:41:44.000Z","author":{"name":"Santiago Castro","email":"santi.1410@hotmail.com"},"message":"Fix broken Markdown headings\n"},{"hash":"33ec908c446e36086f737e12cbb0579f248dd0a1","date":"2017-04-17T18:38:15.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Merge pull request #6 from bryant1410/develop\n\nFix broken headings in Markdown files"},{"hash":"62a9e5b758e34d0e7ba097caee3d0ea7a9c9dfaf","date":"2017-05-29T20:24:17.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Tested on a C++17 compatible compiler, fixed a bunch of issues and made all the tests compil and run successfully\n"},{"hash":"b7d7abd65dc52f99d2f853bb0c0e8ef26037f05c","date":"2017-08-10T17:16:25.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix compilation on clang 3.9, more tests for private/protected and improved error detection for #7\n"},{"hash":"efd11f441fe606e403d76d2bde28cd4830f4a7e9","date":"2017-08-10T17:18:05.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Make sure the we are not working with polymorphyc type. More tests added\n"},{"hash":"78251885b47bd5f9ebbb6034adc4ddd50cae835b","date":"2017-08-13T08:12:37.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Add info on 'precise' and 'flat' into the Overview section #8\n"},{"hash":"1dfcc666c1df6e66e84912609b67655bde2d3a1e","date":"2017-08-13T08:48:14.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Improved error message and fixes for C++14\n"},{"hash":"b0f042d1d8441785d0407aa23db494d19f39f12c","date":"2017-08-19T09:14:05.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix issue with tuple_element and add examples from Readme to tests\n"},{"hash":"1bdd543304e0c3203c9b4af6e3f29195f6329df3","date":"2017-08-19T09:15:49.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Add a check on broken structured bindings and some notes on workarounds (#9)\n"},{"hash":"5262e209e4e5b0910479208086c90c7d1541e92f","date":"2017-08-19T09:18:12.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Split examples.cpp into two files\n"},{"hash":"982cb043755ab07adafc86738595563ed9c818dc","date":"2017-08-19T09:53:40.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Docs were updated, as was proposed in #8\n"},{"hash":"2a28aacc17908e90d3972df36e11ee40dd35e8f0","date":"2017-09-06T18:47:48.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Initial version of loophole core14 implementation, copied from Alexandr Poltavsky\n"},{"hash":"7b0939289fdb18934500bb1ca347041d6dc0feb3","date":"2017-09-06T18:49:38.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Refactoring: as_tuple* => tie_as_tuple*; moved some code to separate files\n"},{"hash":"a6d655e0643c7347e8f1e4b34d7e1700cbbdc456","date":"2017-09-06T18:51:43.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Simplifications and more work for core14  loophole\n"},{"hash":"79a7a1b25de13cca9f3c99bf54ed90868950be78","date":"2017-09-06T18:52:48.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"core14 loophole now closer to working state\n"},{"hash":"0cf44d634e7e33f1ed53ea50fb0aeaa94efe926e","date":"2017-09-06T18:57:22.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Reduce instantiations count by dropping some of the rvalue overloads of internal methods; reduce detail stuff used for public functions; reduced includes count\n"},{"hash":"3d8b5c33e6600656efcbfbf6b2b0d140b1a179b6","date":"2017-09-12T18:18:13.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Loophole implementation now works. Added many tests, added BOOST_PFR_USE_LOOPHOLE flag, disabled some unwanted ADLs\n"},{"hash":"28a787a6a8ca393b6e120ddf7c9cda8552f11e9f","date":"2017-09-13T18:53:49.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Removed cloophole friend functions and probably slightly improved compilation speed\n"},{"hash":"14d59f5340267883a1790c7abad96a8584d678d8","date":"2017-09-16T17:46:38.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Enable more tests for loophole\n"},{"hash":"b67893d92e22f486b106128f0e2682d058ed36d7","date":"2017-09-16T18:19:41.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Updated docs and enabled Loophole by default\n"},{"hash":"1bf21ae5b996a006af2d3336234b29b048eae2a8","date":"2017-09-17T07:15:44.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fix issue in test\n"},{"hash":"551b36a53672e53c8175e44d4faf72e0d405a7c9","date":"2017-09-19T00:42:48.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"initial commit of offset-based getter\n\nThe idea here is to try to remove \"cast_to_layout_compatible\", which\ntechnically violates strict aliasing rules. Instead, we want to try\nto compute something like \"offsetof\" at compile-time for each struct member,\nand use pointer arithmetic and reinterpret casts to do this legally.\n\nThe basic idea is to take the function \"make_flat_tuple_of_references\"\nand generalize it, so that it need not actually work with tuples.\nInstead, it can work with any class type, provided that it is also given\na \"getter\" function object which it can use to do \"get<idx>\".\n\nWe provide a trivial getter, which calls sequence_tuple::get.\n\nWe also provide a \"offset_based_getter\" which can work with user-defined\nstructure types, provided we are given a layout-compatible tuple as a template\nparameter.\n\nThe basic idea is to take the layout-compatible tuple, then replace all the\nmembers with corresponding `std::aligned_storage_t`. This doesn't change the\nlayout, but it makes everything trivially constructible and constexpr and all that.\n\nThen we can construct that on the stack, and take differences between the main tuple\naddress, and the members' addresses.\n\nAt time of writing the tests are passing for me, but I haven't tested with compilers\nother than gcc, or examined assembly to see if this method is being optimized the\nway I hope it is.\n\nThis commit changes both core14_classic and core14_loophole to use the offset_based_getter,\nbut until further testing it might have been better to keep the other method around also.\n"},{"hash":"49ae43f99ff7661503f200411ef939af4526f75e","date":"2017-09-27T17:30:28.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Started work on issue #11 (wrong fields count if class member is not default constructible)\n"},{"hash":"c03977e29f63d77173dcf581e1cc61668dfb4c8f","date":"2017-09-28T01:57:22.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"fix compilation of previous commit on gcc 7.2 WIP\n"},{"hash":"6cab0a9684414b457f98a7ffb8dac2beb1886a41","date":"2017-09-28T04:38:31.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"add another static_assert regarding offset_based_getter\n"},{"hash":"f0dfa5ed4e7e3f9e3268ae505fd0dce9d95e5d41","date":"2017-09-28T04:48:36.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"add some more code comments around offset_based_getter\n"},{"hash":"2a6a4752b8486db25645cfd3ba61d09108a61ccc","date":"2017-09-28T05:14:21.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"add support for volatile qualifier to offset_based_getter\n"},{"hash":"6844dcb48fa40d53b965d6a4e9ff32b50b21eb23","date":"2017-09-28T06:23:53.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"attempt to fixup value category logic changes introduced in the refactor\n\ni didn't think intuitively that these changes were significant but they\nappear to be necessary to pass the tests\n"},{"hash":"62b972e500f8c7f4d1f282d546964cd718cdd499","date":"2017-09-28T14:03:50.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"comment out rvalue-reference overloads of offset_based_getter\n\nthis mirrors the earlier practice of commenting this out in\ncast_to_layout_compatible\n"},{"hash":"3aba48c9a97cf461ddcefbdcba2558ab378bb3b9","date":"2017-09-28T14:13:55.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"use cast_to_layout_compatible again for enums in core14_loophole\n\nthis partially reverts a subtle change to static_cast in\n551b36a53672e53c8175e44d4faf72e0d405a7c9\n\nthe reason that is wrong is that the static_cast produces a new value,\nwhile we need to produce a reference to the underlying type of the enum\nessentially.\n"},{"hash":"af8be96595980c0f17ef84b9f965f75cc42bcd60","date":"2017-09-28T14:55:34.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"adjust a code comment in offset_based_getter\n"},{"hash":"f75fa56076f1a487a963a92b4ea4daab19726caf","date":"2017-09-28T18:08:32.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixed issue #11 - incorrect fields count detection for non-default-constructible types\n"},{"hash":"a9b952cdb8db486398ac5afa84b2b3771a364f1c","date":"2017-09-28T19:33:52.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"add a configuration flag to control the use of offset_based_getter\n\nthis might be useful if on some compilers, cast_to_layout_compatible\nleads to better codegen\n"},{"hash":"96b7c386666ff92e30a2333b7ccb047f94cf724e","date":"2017-09-28T19:37:57.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"fixup handling of volatile qualified user-defined types in offset_based_getter\n"},{"hash":"29ab2524aa6c39f0c35d42bf4f44d956ca508bf8","date":"2017-09-28T22:13:38.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"massaging of offset_based_getter offset calculation and code comments\n"},{"hash":"d37163cc9804a5031ca921530bf001b202b86231","date":"2017-09-28T22:40:39.000Z","author":{"name":"Chris Beck","email":"beck.ct@gmail.com"},"message":"use internal implementation of std::aligned_storage, remove constexpr\n\nthis fixes msvc2017 issues in godbolt\n"},{"hash":"41d73e45d4d5a51eb9deeb5d9c0068d1dff8189b","date":"2017-10-01T18:57:27.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Added one more example and some tests\n"},{"hash":"f91d809fc0e573838eacd239eb3b372bb130f769","date":"2017-10-01T19:10:34.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Polished readme\n"},{"hash":"6814449a82c4401e89538dbd19e63330e7eac892","date":"2017-10-12T11:52:03.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Merge pull request #13 from cbeck88/develop\n\nAttempt to factor out cast_to_layout_compatible"},{"hash":"5770f676713c63e2bc3a3b057bea29349ac8a1cd","date":"2017-10-13T17:33:39.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Polishing: use std::addressof for getting address of user provided type, make some functions static and constexpr\n"},{"hash":"623e0ec0931f4795b8dc4f9aee2974264c1fc106","date":"2017-10-13T18:30:06.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"More compile time checks and tests for #14\n"},{"hash":"1b138a4bd76b1118c433ed5623f0447f64cf057d","date":"2017-10-16T20:55:05.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixes for classes that could be constructed from everything. Fixes #15\n"},{"hash":"12f8e1baa126cb2bf1be9ab757f65a0203da1a64","date":"2017-10-16T20:56:32.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixes for non default constructible classes in loophole impl\n"},{"hash":"c48df9ba12447c1ed95da80dee4b85fb40bce5ff","date":"2017-10-16T20:58:34.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Multiple small fixes and improved testing\n"},{"hash":"d7cfbef235f7c80d25fc732e0292f9b9404d4ff3","date":"2017-10-16T20:59:21.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"MSVC fixes\n"},{"hash":"52b7f8f83a1ae4221766911db0a39ef217367f4d","date":"2017-10-16T21:01:15.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Final MSVC fixes, including detection idiom rewrite and simplifications of some tests. Docs updated to show MSVC usage ability\n"},{"hash":"d48749660583a5964bd9fef69b64db03895e3d39","date":"2017-10-16T21:06:50.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Appveyor fixes and badges update\n"},{"hash":"ab5140df5265e1d654e50d80ebcc447fce6cef7f","date":"2017-10-17T06:00:26.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Relax MSVC check\n"},{"hash":"0c0332fe97296d0d034ee2961a4a0d9d6ed97371","date":"2017-10-17T07:11:01.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Use preview version of msvc in appveyor"},{"hash":"a9e5e73c3014b2bb59c980f69929914f6b191239","date":"2017-10-17T19:02:31.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Simplifications for MSVC and some polishing\n"},{"hash":"372f72a9fd108a305ce5fb922c448f81aed33a4d","date":"2017-10-17T19:23:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Appveyor script fixes\n"},{"hash":"6a5a04de55f3044c9305ceb909fb4fdfb39ea072","date":"2017-10-17T20:20:41.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Run MinGW instead of MSVC in Appveyor. Apveyor does not have the latest MSVC, required for PFR library build\n"},{"hash":"f686c9a77ebfcaf294c5b7e09955ee9810553ac7","date":"2017-10-18T08:05:10.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Fixes for autotesting on MinGW"},{"hash":"b8f5ddd70f1d5efad0f87e27867e6bdcc2473ba8","date":"2017-10-18T19:37:29.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"MSVC related checks improved and Appveyor fixes applied\n"},{"hash":"999e7d86191c4888513bded963b617d6b22f6a91","date":"2017-10-18T19:38:32.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Dropped BOOST_PFR_NO_STRICT_ALIASING macro\n"},{"hash":"8031f575fe6cee6c0272ed64319a0934711a79fb","date":"2017-10-18T19:40:54.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Ironed out the lvalues and rvalues in detail namespace. Less template instantiations must happen now\n"},{"hash":"72b69d32884f25814c523160f8f1aedf3cb2b912","date":"2017-10-20T11:26:07.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"GCC related fixes and simplifications\n"},{"hash":"1bdc6cae9bc6b32582429a9c599bf83fb40a6c86","date":"2017-10-20T13:45:55.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Made tests more strict and updated MSVC bersion in readme\n"},{"hash":"2007f2f33969c2cf3030c76b48334f2fa19afd4f","date":"2017-10-20T13:46:57.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Test on clang too in TravisCI\n"},{"hash":"30d65a2ad41da29802e172df59fab4a05b256f39","date":"2017-10-20T14:08:44.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Test on GCC7 in C++14 and C++17 modes instead of testing on clang\n"},{"hash":"250d5011f4ffdbed4ca57a61291fd708fe155aaf","date":"2017-10-20T15:02:26.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Travis CI related fixes\n"},{"hash":"a11ff11ab41d161456897403b37d88cc265ee96d","date":"2018-02-20T19:52:48.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Do not forward declare basic_string_view. Fixes #19\n"},{"hash":"a229d560eecf31fccd7a0ed058e5d69c8de35b52","date":"2018-02-20T20:16:18.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Remove leak sanitizer comand line option (address sanitizer includes leak sanitizer). This may probably fix the CI failures with GCC-7\n"},{"hash":"d9735b867c9276f187c58502722958d32e43cf7e","date":"2018-02-20T20:31:43.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"Set sudo to true to make sanitizers comfortable\n"},{"hash":"8b575abe4359abd72bb9556f64ee33aa2a6f3583","date":"2018-02-21T20:29:26.000Z","author":{"name":"Antony Polukhin","email":"antoshkka@gmail.com"},"message":"We can pass string_view by copy now (like all the cool people do\\!), because we do not use forward declared string_view any more.\n"},{"hash":"89fda1da702e6c76a22bfb6233e9e3d0641708ec","date":"2018-03-23T13:34:28.000Z","author":{"name":"Daniel Larimer","email":"dan.larimer@block.one"},"message":"fix warnings generated by extra ;\n"}]