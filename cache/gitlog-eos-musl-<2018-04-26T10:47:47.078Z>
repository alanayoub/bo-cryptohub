[{"hash":"0b44a0315b47dd8eced9f3b7f31580cf14bbfc01","date":"2011-02-12T05:22:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial check-in, version 0.5.0\n"},{"hash":"0bcbb53dc492aae22039445bfdb609bd8d615992","date":"2011-02-12T05:26:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure that the compiler doesn't try to reorder around atomic ops\n"},{"hash":"e1d8d25a5024ec7832250e62825aab71ed8a253d","date":"2011-02-13T21:46:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix omission that kept sa_restorer from being used\n"},{"hash":"6027201e5a7c810b3073c85f7373aae84b303ba3","date":"2011-02-13T21:48:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure that musl is compiled as C99 code & XSI option is available in headers\n"},{"hash":"dc3776d445957cd3ea4a682db518701b93d34292","date":"2011-02-14T00:01:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix previous commit that broke sigreturn. looks like the asm is needed.\n"},{"hash":"f38c154be257835d6d5112c2f92c4a4c8bed91cc","date":"2011-02-14T00:02:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"added missing O_NDELAY\n"},{"hash":"50e26f09eb13f6568113a05dbcfe94a6b1010da0","date":"2011-02-14T00:50:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorganize thread exit code, make pthread_exit call cancellation handlers\n"},{"hash":"1a9a2ff7b0daf99100db53440a0b18b2801566ca","date":"2011-02-14T00:58:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorganize thread exit code, make pthread_exit call cancellation handlers (pt2)\n"},{"hash":"a5dec11306d7988ec136bd86143591257dd3c56f","date":"2011-02-14T02:28:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use umount2 syscall for umount (new targets lack old 1-arg umount)\n"},{"hash":"978ca016593077d27cc2a828f21c5e45e57074aa","date":"2011-02-14T02:29:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"syscall cleanup for umount2\n"},{"hash":"2cdfb7ca26f46f151afbc23d5d94fc68597137f5","date":"2011-02-14T03:45:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleaning up syscalls in preparation for x86_64 port\n\n- hide all the legacy xxxxxx32 name cruft in syscall.h so the actual\nsource files can be clean and uniform across all archs.\n\n- cleanup llseek/lseek and mmap2/mmap handling for 32/64 bit systems\n\n- alternate implementation for nice if the target lacks nice syscall\n"},{"hash":"f9d880d25893dbf4caaa2f4e0c4d9bc8c1aea22a","date":"2011-02-14T04:08:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup multibyte stuff to remove ugly casts, sanitize the ptr align casts\n"},{"hash":"a130d33cad10546dd6b9bc2be71b0e3f5b0cf06b","date":"2011-02-14T04:26:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fixed missing cast in the non-i386 version of shmat (preparation for ports)\n"},{"hash":"05ea04558f4e20056ab4f198dc483a5700432dee","date":"2011-02-14T04:32:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"explicitly release crt/* to the public domain\n"},{"hash":"7fe308eb9fbebdd39a2e17352b172aa00b381dba","date":"2011-02-14T04:38:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use a more-correct integer type, and silence 64-bit warnings as a bonus\n"},{"hash":"80695b1d1e64a026c473a33965e680444e863e34","date":"2011-02-14T10:10:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"begin namespace-cleanup of standard C headers\n"},{"hash":"74eea628cf43355ba2b227f0bb3c31697d637761","date":"2011-02-14T23:41:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"extensive header cleanup for standards conformance & correctness\n\nthanks to Peter Mazinger (psm) for pointing many of these issues out\nand submitting a patch on which this commit is loosely based\n"},{"hash":"e8362c8b51ffa205cf0ada159445c482e85e1a81","date":"2011-02-14T23:45:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"major bugfix for sigset_t (it was mistakenly 1024 bytes instead of bits)\n\nnote that object files using sigset_t (or struct sigaction) need to be\nrecompiled to work correctly after this fix.\n"},{"hash":"c255e5542df8733d6a7227730120bb0c281019b0","date":"2011-02-15T00:13:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"put confstr.c with the other conf functions\n"},{"hash":"5377715ce07269131f011e6f4e978fb5dbf0b294","date":"2011-02-15T00:18:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure standard functions mk[sd]temp don't depend on removed function mktemp\n"},{"hash":"c247ebdd989365d20da3ce41fdeb2002e0a1ba13","date":"2011-02-15T00:33:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more header fixes, minor warning fix\n"},{"hash":"a8c17e6587e68c4330999dd408d4add1d81296bf","date":"2011-02-15T00:37:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some pointer signedness issues (this was invalid C)\n"},{"hash":"6fbf8bfd750a5c982b716bea0802692847918951","date":"2011-02-15T00:40:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"another pointer signedness fix\n"},{"hash":"c316b284456e8b8d5f6e2ff18ece9c15b60033c7","date":"2011-02-15T01:03:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update various bits headers for new linux additions\n\nbased on patch by nik\n"},{"hash":"1322cb82a33a2a59e75937911d910dabc48e9af9","date":"2011-02-15T01:33:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"header cleanup, conformance fixes - signals\n"},{"hash":"131b5be2f44012ae952f5883e13c1ae72ce3b033","date":"2011-02-15T01:45:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more header cleanup and conformance fixes - locale.h, time.h\n"},{"hash":"ca1aa5bae951dfd8ea85341609266688ec776482","date":"2011-02-15T01:53:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more header cleanup and conformance fixes - string.h\n"},{"hash":"976f42d1f15c135e4e0dd79eb6168b67c2ec6492","date":"2011-02-15T02:15:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"guard against hard links to non-ordinary-files when reading tcb shadow\n"},{"hash":"df6e3ec74a4801a067c269c108909fb41843be1e","date":"2011-02-15T02:58:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add WHATSNEW file for 0.5.9 release\n"},{"hash":"8f4865c8d25e508154a1cb89291f79489a4b3b4c","date":"2011-02-15T02:59:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add previously-missing ios646.h\n"},{"hash":"1355fdca7cb923c93f9011d8e9dcf49e1a67e537","date":"2011-02-15T05:33:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"preparing build system to handle ports - step 1\n"},{"hash":"59666802fba592a59f2f4ea4dcb053287fd55826","date":"2011-02-15T07:20:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pthread_create return EAGAIN on resource failure, as required by POSIX\n"},{"hash":"0b2006c8fea021b7fa1fd267bf270cb8c279f230","date":"2011-02-15T08:24:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"begin unifying clone/thread management interface in preparation for porting\n"},{"hash":"7b2dd2235dd0db3a2f71e25d1c0925e0348e1996","date":"2011-02-15T08:56:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"finish unifying thread register handling in preparation for porting\n"},{"hash":"a5bf06c035168122725ec32537f99ab1e6c8432c","date":"2011-02-15T09:00:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move arch-specific internal headers into place\n"},{"hash":"cfe373146d232d7c89a60920f77b9451bcfee96b","date":"2011-02-15T09:12:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"finish moving 32-bit-specific junk out of source files.\n"},{"hash":"03a2f3e48caec15b1a9cebccc85328e9b8169df0","date":"2011-02-15T09:40:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup socketcall syscall interface to ease porting to sane(r) archs\n"},{"hash":"13a026bd79f0024d57b7edf8305d625599d10810","date":"2011-02-15T10:06:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"split off arch-specific stdarg.h stuff\n"},{"hash":"f7eb91e7952553dc24a734030a6c78f8dc6ed455","date":"2011-02-15T10:42:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getrlimit handling on 32-bit systems, and ease porting to 64-bit\n"},{"hash":"c2afb747b0296f23cd1903e82ccbdee3fc2978fd","date":"2011-02-15T10:52:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"yet another ugly legacy syscall rename...\n"},{"hash":"1e12632591ab98a6ea3af8680716c28282552981","date":"2011-02-15T12:32:09.000Z","author":{"name":"Nicholas J. Kain","email":"njkain@gmail.com"},"message":"Port musl to x86-64.  One giant commit!\n"},{"hash":"bb89bdd00e494baa11ceb67bf40cc28b0104b642","date":"2011-02-15T13:02:33.000Z","author":{"name":"Nicholas J. Kain","email":"njkain@gmail.com"},"message":"Update x86_64 bits to mirror (modulo platform differences) the latest changes\nto i386.\n"},{"hash":"ebc4a17957d81803ca649a81083aabbd58260460","date":"2011-02-15T13:21:47.000Z","author":{"name":"Nicholas J. Kain","email":"njkain@gmail.com"},"message":"Remove __syscall_lseek from x86_64 syscall.h.\n"},{"hash":"062354f2e13148c6524f332f0a5aed877a3c9d61","date":"2011-02-15T13:26:46.000Z","author":{"name":"Nicholas J. Kain","email":"njkain@gmail.com"},"message":"Optimize x86_64 atomics to take advantage of 64-bitness.\n"},{"hash":"44460c6d1eb1233f6598229d787d179c095b053f","date":"2011-02-15T19:32:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some type leakage (timer_t) from x86_64 commit\n"},{"hash":"9b235e8374bfe15f73d470b4ad7d1c579fd9a71e","date":"2011-02-15T19:39:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove standalone syscall cruft\n\nthis was originally written for an early draft of the library where\nnon-standard functions would reside in a static library separate from\nthe shared libc.so, which would implement a pure standard. the idea\nwas not to depend on an implementation-dependent __syscall_ret\nfunction in the main libc. but it turned out to be better to put\neverything in a single library for both static and dynamic linking\nuses, and thus the (incomplete) remnants of this feature were just\nenlarging the source and binary.\n"},{"hash":"0b9a1ed00cc1c24f19cc0a069cfa94115b61d3d9","date":"2011-02-15T19:52:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some docs fixes for x86_64\n"},{"hash":"3eb9feaa88b82845341ab1e34c4c8e1de04c1dcd","date":"2011-02-15T20:10:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken signal.h from header cleanup\n"},{"hash":"4e30249643271212ba76bb62e3f7eacc99f62f8c","date":"2011-02-15T20:25:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix another error from header cleanup, missing size_t in time.h\n"},{"hash":"62275f7876b602ccbc8f0712ba4cf75bb8597bbe","date":"2011-02-15T20:52:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"news for upcoming release\n"},{"hash":"c0248191bd524938950a87392ee76cd499ac06d1","date":"2011-02-15T20:56:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix x86_64 wrongly reporting itself as ILP32 instead of LP64\n"},{"hash":"26f3551419d853f463e1eec42d41812b4b67f667","date":"2011-02-15T21:08:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototype for gnu strcasestr (currently a stub)\n"},{"hash":"cda892ddbea3e669ad622ed4aaa766d066ff0d57","date":"2011-02-15T21:08:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix directory reading on x86_64\n"},{"hash":"1d729537873f70da83f2608e7529aad887cf13c1","date":"2011-02-15T21:28:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"feature test support in unistd.h\n"},{"hash":"6d36c2098be0b431cad5c8f8327f1beb943028b0","date":"2011-02-15T22:33:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing EXIT_* in stdlib.h after header cleanup\n"},{"hash":"f451462098deada2fc30831a28719456e7d474a7","date":"2011-02-16T00:15:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the types of some integer constant limits in headers\n"},{"hash":"8894947ba2b9f595d8aac1030b7c79f3c6a51f27","date":"2011-02-16T00:16:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect some limit constants with feature test macros on x86_64\n"},{"hash":"571312de5fe09764b2d469642636934f6d8cf608","date":"2011-02-16T00:47:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move stdio stuff that's not arch-specific out of bits\n"},{"hash":"bad481266e8744f8c4241e577f06e8cabf6f7f89","date":"2011-02-16T14:30:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix compile failure: legacy cuserid needs to define feature test\n"},{"hash":"22cd9cae819a0fd432da4b1d21502a242871e5d9","date":"2011-02-16T14:49:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"patch from njk: make x86_64 __uniclone branchless.\n"},{"hash":"e3657ba5992468f0340efdb741ec32ac0e0acb5c","date":"2011-02-16T14:50:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"patch by njk, simplifies thread register initialization for x86_64\n\nIt's not necessary to save any registers on the stack across syscall in\nx86_64 __set_thread_area.  Don't waste cycles or bytes on it.\n"},{"hash":"5cbd76c6b05b381f269e0e204e10690d69f1d6ea","date":"2011-02-16T23:19:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix printf %n specifier - missing breaks had it clobbering memory\n"},{"hash":"56b784d603827a564a40b19228078a361959cd14","date":"2011-02-17T02:21:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add to pthread.h: pthread_mutex_timedlock and sched.h, time.h\n"},{"hash":"417dbe92cbecae31aa569cb4033560eb140bff56","date":"2011-02-17T03:37:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some gnu software wrongly uses \"struct siginfo\" instead of siginfo_t...\n"},{"hash":"798a12ecc4ec4a7780beaf2f5fb86ffbc9738755","date":"2011-02-17T04:36:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ucontext is no longer in the standard, so use gnu-friendly struct name\n\nnote that this header is still bogus and needs a lot of work and\nfactoring into arch-dependent parts...\n"},{"hash":"b24bc15f5c3828184f123698b4b545fef4edac99","date":"2011-02-17T05:03:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't compare elements with themselves during qsort.\n\nthis is actually a workaround for a bug in gcc, whereby it asserts\ninequality of the keys being compared...\n"},{"hash":"19e35c500bd2b5e6146e42705ab9b69c155a2006","date":"2011-02-17T15:28:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"daemon should check for failures and return -1\n"},{"hash":"187fe29d5b89644b68cade75a34257a1c32a75f6","date":"2011-02-17T15:30:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make daemon try the operations that might fail before fork rather than after\n"},{"hash":"a36164c4743df0a9112fb3641966b213694e25f7","date":"2011-02-17T20:15:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve Makefile handling of git checkouts with missing lib/ and config.mak\n"},{"hash":"4fd159568aa1852fbbe6c11d35ccecaec3715d7c","date":"2011-02-17T22:12:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new solution for empty lib dir (old one had some problems)\n"},{"hash":"e882756311c7b06e59fcc8e582f03852b7dcfd30","date":"2011-02-17T22:16:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorganize pthread data structures and move the definitions to alltypes.h\n\nthis allows sys/types.h to provide the pthread types, as required by\nPOSIX. this design also facilitates forcing ABI-compatible sizes in\nthe arch-specific alltypes.h, while eliminating the need for\ndevelopers changing the internals of the pthread types to poke around\nwith arch-specific headers they may not be able to test.\n"},{"hash":"127ab575fc2b200459dc5543d25f5e87d3fdb9db","date":"2011-02-17T22:57:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid deleting the lib/empty file\n"},{"hash":"d09d068f9b01509da0e40405081157f0fcd39324","date":"2011-02-17T22:57:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update WHATSNEW in preparation for release\n"},{"hash":"6d333355e77107c130e863660a632df953c8b5da","date":"2011-02-17T23:30:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document in config.mak sample that x86_64 is supported\n"},{"hash":"982a47843316e65f2b849e9def893195396aeec0","date":"2011-02-18T00:15:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prepare WHATSNEW for release\n"},{"hash":"d5ca067c7bb47081c169ff8b0213c73418f0525e","date":"2011-02-18T04:13:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add portable lchown (trivial to support and a few ancient things want it..)\n"},{"hash":"3e9e30166f22f8fb0d5664500bb52a00d1a3c6a3","date":"2011-02-18T21:32:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reformat mkstemp like mkdtemp\n\nthis is cleaner and makes it easy to impose a limit on the number of\nretries later if it seems desirable to do so.\n"},{"hash":"446b4207cc7a30d8a4d5b2445a5a1b27d440f55d","date":"2011-02-18T22:04:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"major improvements to temp file name generator\n\nuse current time in nanoseconds and some potentially-random (if aslr\nis enabled) pointer values for the initial tempfile name generation,\nand step via a cheap linear prng on collisions. limit the number of\nretry attempts to prevent denial of service attacks even if an\nattacker can guess the filenames.\n"},{"hash":"e9417fffb39c299e556c5ad0c1545f0c02618e3c","date":"2011-02-19T00:52:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add pthread_atfork interface\n\nnote that this presently does not handle consistency of the libc's own\nglobal state during forking. as per POSIX 2008, if the parent process\nwas threaded, the child process may only call async-signal-safe\nfunctions until one of the exec-family functions is called, so the\ncurrent behavior is believed to be conformant even if non-ideal. it\nmay be improved at some later time.\n"},{"hash":"ad2fe25041622b6cf426b0f98af0e52c2c9727f6","date":"2011-02-19T03:03:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support the ugly and deprecated ucontext and sigcontext header stuff...\n\nonly the structures, not the functions from ucontext.h, are supported\nat this point. the main goal of this commit is to make modern gcc with\ndwarf2 unwinding build without errors.\n\nhonestly, it probably doesn't matter how we define these as long as\nthey have members with the right names to prevent errors while\ncompiling libgcc. the only time they will be used is for propagating\nexceptions across signal-handler boundaries, which invokes undefined\nbehavior anyway. but as-is, they're probably correct and may be useful\nto various low-level applications dealing with virtualization, jit\ncode generation, and so on...\n"},{"hash":"b386d8186226f28e1b610be657a89e357768efa1","date":"2011-02-19T06:02:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototypes for brk and sbrk\n"},{"hash":"f3ef7a61245c5ace26ca13bccf14a28876ea7bfc","date":"2011-02-19T07:23:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing WIFCONTINUED macro and improve WIFSIGNALED\n"},{"hash":"52874c82a85a0f5c4b0eecd78ad8b3a349377cf3","date":"2011-02-19T07:26:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototype wait3 and wait4\n"},{"hash":"cc2a8228fa0b35c9aee69efa7ac657bb7a4704f9","date":"2011-02-19T07:28:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup cruft left from when kernel and user time_t disagreed\n"},{"hash":"095a5ae6f2466cdd457cdf3e9925b1fbd302c9be","date":"2011-02-19T07:52:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add syscall wrappers for inotify\n"},{"hash":"2e6239dd064d201c6e1b0f589bae9ff27949d2eb","date":"2011-02-19T14:34:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix major bug created from copying mkdtemp logic\n"},{"hash":"69ecbd0f3188be97f91cc0d6415836d23e88f7fc","date":"2011-02-19T14:40:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make mktemp match the historic behavior, and update functions that use it\n\nthe historic mktemp is supposed to blank the template string on\nfailure, rather than returning 0. just zero the first character so\nthat mkstemp and mkdtemp can still retry with O(1) space requirement.\n"},{"hash":"fb11b6b85e1e01daf17228be32d7f98b47517363","date":"2011-02-19T15:38:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pthread_exit run dtors for last thread, wait to decrement thread count\n"},{"hash":"a49c119276742d7d212fb88f83a8f559ca549e72","date":"2011-02-19T15:51:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prevent sigprocmask/pthread_sigmask from blocking implementation signals\n\nthis code was wrongly disabled because the old version was trying to\nbe too clever and didn't work. replaced it with a simple version for\nnow.\n"},{"hash":"19eb13b9a4cf2f787f60b6e2a6d26a6cd7d3ffd2","date":"2011-02-19T16:04:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"race condition fix: block all signals before decrementing thread count\n\nthe existence of a (kernelspace) thread must never have observable\neffects after the thread count is decremented. if signals are not\nblocked, it could end up handling the signal for rsyscall and\ncontributing towards the count of threads which have changed ids,\ncausing a thread to be missed. this could lead to one thread retaining\nunwanted privilege level.\n\nthis change may also address other subtle race conditions in\napplication code that uses signals.\n"},{"hash":"4b1244a0bfec55bc4cad91ff157997929f106215","date":"2011-02-19T17:43:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement the remaining clock_* interfaces\n"},{"hash":"5316d083ec87e91cd11fde900e0158f82563d8dc","date":"2011-02-19T17:44:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in wordexp.h (note that the function is still unimplemented)\n"},{"hash":"98e02144dabec08c1d652a8cb233900516da6d23","date":"2011-02-19T20:21:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use rt_sigprocmask, not legacy sigprocmask, syscall in pthread exit code\n"},{"hash":"13e8459232608f841d5e3f7171da80a8dfce7941","date":"2011-02-19T22:56:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround gcc bug 46926 by providing a dumb sincos implementation\n\nnote that this library itself is built with -ffreestanding so sincos.c\nshould not be miscompiled even if the gcc used to compile musl has\nthis bug.\n"},{"hash":"2b43ef8fc76eaf3912aa98316eae82797494276d","date":"2011-02-20T05:28:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sys/param.h not depend on PATH_MAX and NAME_MAX\n\nthis is a nonstandard header used only by backwards programs, but for\nsome reason it's extremely popular. the recent namespace cleanup fixes\nbroke it, because PATH_MAX and NAME_MAX will not be defined unless an\napproriate feature test macro has been defined. moreover, it's too\nlate to just #define _GNU_SOURCE in param.h, since limits.h may have\nalready been included.\n\nlet's just hard-code standard values and be done with it.\n"},{"hash":"8668f033bcd452cd7751ee34de32d77a8df6f9be","date":"2011-02-20T06:26:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fill in some missing siginfo stuff in signal.h\n"},{"hash":"855df698c49610696c562979790381414243c63c","date":"2011-02-20T06:48:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move the GNU siginfo renaming so it doesn't lead to mismatching names\n"},{"hash":"d6a1e0c79e84e6f13cd567b6401e0de1f9b5d4bb","date":"2011-02-20T07:44:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"resolve some header namespace non-issues\n\nafter re-reading 2.2.2 of POSIX 2008, all of these are in the correct\nreserved namespaces and do not need protection.\n"},{"hash":"eee150f39c294883841d4f3ad9ce290ea1529a9e","date":"2011-02-20T20:06:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make real symbols for the legacy (nonstandardized) utmp functions\n\nthis is needed in the long term for ABI compatibility anyway, and in\nthe immediate, it helps with building broken programs like GNU screen\nthat try to prototype the functions themselves rather than using the\nheader.\n"},{"hash":"96f2197494791f5884c01b5caa908074cc7e90a6","date":"2011-02-20T20:16:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix null pointer dereference introduced in last sigprocmask commit\n"},{"hash":"a23baf586a1ca78213d43bce5fee2a30715b473b","date":"2011-02-20T21:10:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix simple_malloc size restrictions\n\ndo not allow allocations that overflow ptrdiff_t; fix some overflow\nchecks that were not quite right but didn't matter due to address\nlayout implementation.\n"},{"hash":"598a0147cde14d093d17b81c102a1757b5ef9975","date":"2011-02-20T21:12:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix simple_malloc malloc(0) behavior not to return non-unique pointers\n"},{"hash":"26031da0f83a2a3ed52190077931ee6c18dfd689","date":"2011-02-20T21:16:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make malloc(0) return unique pointers rather than NULL\n\nthis change is made with some reluctance, but i think it's for the\nbest. correct programs must handle either behavior, so there is little\nadvantage to having malloc(0) return NULL. and i managed to actually\nmake the malloc code slightly smaller with this change.\n"},{"hash":"b1b752372f10c904d398f64266b3188703727736","date":"2011-02-20T21:21:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in inotify structure\n"},{"hash":"f552c792c7ce5a560f214e1104d93ee5b0833967","date":"2011-02-20T21:34:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"include sys/sysmacros.h from sys/types.h when _GNU_SOURCE is defined\n"},{"hash":"bdc9ed15651b70e89f83c5a9f7d1ba349e624503","date":"2011-02-20T22:10:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix %n specifier, again. this time it was storing the wrong value.\n"},{"hash":"46b99426e16c6a4df9f6217cd7989afd4520f557","date":"2011-02-20T22:17:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototypes for GNU asprintf/vasprintf\n"},{"hash":"3075f7e847b0c717959054b86360722326dbde1e","date":"2011-02-20T22:19:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup asprintf stuff\n"},{"hash":"ba68efc921578438db5ab263edd2e9c4654bb412","date":"2011-02-21T00:07:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"shave off 2 bytes from crt1.o _start\n"},{"hash":"4ee039f3545976f9e3e25a7e5d7b58f1f2316dc3","date":"2011-02-21T03:24:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid referencing address of extern function from vdprintf\n\nthis change is in preparation for upcoming PIC/shared library support.\nthe intent is to avoid going through the GOT, mainly so that dprintf\nis operable immediately, prior to processing of relocations. having\ndprintf accessible from the dynamic linker will make writing and\ndebugging the dynamic linker much easier.\n"},{"hash":"d89c9e8a63018810bb6a3e2ae55604996cc21e7b","date":"2011-02-21T03:30:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use an accessor function for __libc data pointer when compiled as PIC\n\nprior to this change, a large portion of libc was unusable prior to\nrelocation by the dynamic linker, due to dependence on the global data\nin the __libc structure and the need to obtain its address through the\nGOT. with this patch, the accessor function __libc_loc is now able to\nobtain the address of __libc via PC-relative addressing without using\nthe GOT. this means the majority of libc functionality is now\naccessible right away.\n\nnaturally, the above statements all depend on having an architecture\nwhere PC-relative addressing and jumps/calls are feasible, and a\ncompiler that generates the appropriate code.\n"},{"hash":"cfcbea1e4373ad5db085f7efed302e6f229e2171","date":"2011-02-21T20:43:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove sample utf-8 code that's not part of the standard library\n"},{"hash":"e2ee1bdd8df7637267f5daae74e2849f77751f6e","date":"2011-02-22T03:26:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make startup code PIE-compatible\n"},{"hash":"8cd48f0965c8b362ae21ec93528ba64a25a18b7f","date":"2011-02-22T03:27:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup comment cruft in startup code\n"},{"hash":"71e6be641fb1e4080c2bb901e83423546d0ad5af","date":"2011-02-22T04:00:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change errno to static linkage (improves PIC code generation)\n"},{"hash":"a6238c30d169cbac6bc4c4977622242063e32270","date":"2011-02-22T22:11:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rewind must clear the error indicator in addition to seeking\n"},{"hash":"9f19b3ec8dec1e9402e31172a74b72cd46d3da36","date":"2011-02-24T17:34:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix backwards conditional in stpncpy\n\nthis only made the function unnecessarily slow on systems with\nunaligned access, but would of course crash on systems that can't do\nunaligned accesses (none of which have ports yet).\n"},{"hash":"b8ff2aaabb55521686179464593553fe1c91b2e2","date":"2011-02-24T17:35:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add implementation of memccpy function\n"},{"hash":"73d310e1d2b76cd14b9913bbc3d8e75be91be5a6","date":"2011-02-24T17:36:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"apply feature test protection to memccpy\n"},{"hash":"41d518360fd2da0f19d6a2f8d8c5f226b201c1e9","date":"2011-02-24T21:37:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"various changes in preparation for dynamic linking support\n\nprefer using visibility=hidden for __libc internal data, rather than\nan accessor function, if the compiler has visibility.\n\noptimize with -O3 for PIC targets (shared library). without heavy\ninlining, reloading the GOT register in small functions kills\nperformance. 20-30% size increase for a single libc.so is not a big\ndeal, compared to comparaible size increase in every static binaries.\n\nuse -Bsymbolic-functions, not -Bsymbolic. global variables are subject\nto COPY relocations, and thus binding their addresses in the library\nat link time will cause library functions to read the wrong (original)\ncopies instead of the copies made in the main program's bss section.\n\nadd entry point, _start, for dynamic linker.\n"},{"hash":"2a195dd31ceb2a483ea547444aac080bee132ad2","date":"2011-02-27T04:50:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing prototype for strsignal\n"},{"hash":"015d33c5075b9c0a4df8f28e844e4f7ace91c647","date":"2011-02-27T05:28:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup utf-8 multibyte code, use visibility if possible\n\nthis code was written independently of musl, with support for a the\nbackwards, nonstandard \"31-bit unicode\" some libraries/apps might\nwant. unfortunately the extra code (inside #ifdef) makes the source\nharder to read and makes code that should be simple look complex, so\ni'm removing it. anyone who wants to use the old code can find it in\nthe history or from elsewhere.\n\nalso, change the visibility of the __fsmu8 state machine table to\nhidden, if supported. this should improve performance slightly in\nshared-library builds.\n"},{"hash":"f2374ed852654ca13404986d8c04f82bf58812cb","date":"2011-02-27T07:59:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement fexecve\n"},{"hash":"b1b465c4382d6956e2973b70d644b0c20f530430","date":"2011-02-27T08:48:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup namespace in sys/time.h\n"},{"hash":"eda8e9da763df3fd25fc6c78602d7c79296eae6b","date":"2011-02-27T08:48:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement futimens and utimensat\n"},{"hash":"07e9d63b8f0614f582f0f453437eaafe92441435","date":"2011-03-01T16:57:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"depends on settimeofday which needs _GNU_SOURCE feature test\n"},{"hash":"71df8b2760348c55b1c0d04aeebcae372d9760d3","date":"2011-03-01T17:04:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use -L/...../ -lgcc instead of /...../libgcc.a in musl-gcc wrapper\n\nthis should avoid warnings about unused libs when not linking, and\nmight fix some other obscure issues too. i might replace this approach\nwith a completely different one soon though.\n"},{"hash":"ebd7af6940bebb3b083a4d9239da27a66d1c32ec","date":"2011-03-03T05:30:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement POSIX shared memory\n"},{"hash":"a53d2f3425aa32b5770b03acbab12d1df3af7226","date":"2011-03-03T05:32:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"namespace cleanup in sys/mman.h\n"},{"hash":"b480808a6a511c9350a6559b63938ac261c83a76","date":"2011-03-03T23:30:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize POSIX TSD for fast pthread_getspecific\n"},{"hash":"03dcc3417ce4388a652bdd053cb2b6af860daf00","date":"2011-03-03T23:32:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"preliminaries to adding POSIX semaphores\n"},{"hash":"6fc5fdbdc70dd17ea8e681a361fb4dae541ee953","date":"2011-03-04T05:45:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement POSIX semaphores\n"},{"hash":"8c967b93862193421c1ba0ed49b52835e9625ba1","date":"2011-03-04T05:59:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"enforce stack size min in pthread_attr_setstacksize\n"},{"hash":"951e76409117f114da4ce9895514658a88a3ad4b","date":"2011-03-07T20:42:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement barrier attribute functions (essentially no-ops)\n"},{"hash":"63b06c0e904fbdbc87b3e17d067b62afe9bb3dd1","date":"2011-03-07T20:46:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reject invalid attribute settings\n\nnote that this is a pedantic conformance issue and waste of code. it\nonly affects broken code or code that is probing for conformance.\n"},{"hash":"b4d40e44e36f28cf5a52e9f0c12e622c3baf1657","date":"2011-03-07T21:20:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement pthread_condattr_* interfaces\n\nnote that, while the attributes are stored, they are not used in\npthread_cond_init yet.\n"},{"hash":"cc2e0b45a6fe7b0927519cc960fae8e4c0c0ebee","date":"2011-03-07T21:43:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement pthread_rwlockattr_* (essentially no-ops)\n"},{"hash":"7d57e05fa8d15dc838638f7db19e88b02a21c18b","date":"2011-03-07T21:45:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prototypes for pthread_condattr_* and pthread_rwlockattr_*\n"},{"hash":"5fd4a9816573a3b6a244b73b84ce0cec871321da","date":"2011-03-07T22:39:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use the selected clock from the condattr for pthread_cond_timedwait\n"},{"hash":"9fe28f703d44ff1ddecdca945bfb5fc87de5e8ad","date":"2011-03-07T23:09:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one error in sem_(timed)wait (using old sem value instead of new)\n"},{"hash":"5d0d6d983664cc3816d63432397271719dade83c","date":"2011-03-07T23:32:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add macros for use with d_type extension field in dirent\n"},{"hash":"9d5251f72b627974bcf438501e07ad42c24d94be","date":"2011-03-08T07:32:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disallow cpu time clocks as condattr clock values\n"},{"hash":"1d6b1f15929ff19f4dce4f83947e14f7c3fc3c19","date":"2011-03-08T07:33:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement pthread_mutexattr_[gs]etpshared functions\n"},{"hash":"4820f9268d3dc1f2aac923de0a591ffd5d54ea89","date":"2011-03-08T08:41:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix and optimize non-default-type mutex behavior\n\nproblem 1: mutex type from the attribute was being ignored by\npthread_mutex_init, so recursive/errorchecking mutexes were never\nbeing used at all.\n\nproblem 2: ownership of recursive mutexes was not being enforced at\nunlock time.\n"},{"hash":"7e6be42a77989c01155bdc7333ea58206e1563d4","date":"2011-03-08T17:08:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix major breakage in pthread_once (it was always deadlocking)\n\nthe issue was a break statement that was breaking only from the\nswitch, not the enclosing for loop, and a failure to set the final\nsuccess state.\n"},{"hash":"e5dd18319bbd47c89aac5e1571771958a43e067d","date":"2011-03-08T17:19:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rwlock trylock functions were wrongly returning EAGAIN instead of EBUSY\n"},{"hash":"31e06075d5a71b53461638ee871bfb6163e20dd5","date":"2011-03-08T17:20:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify and optimize pthread_mutex_trylock\n"},{"hash":"ac12eb91bd7aa6f1f1642de1350c4f29ea0f4d08","date":"2011-03-08T17:35:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fcntl.h should make availabel the mode constants from sys/stat.h\n\nalso remove some legacy nonsense that crept in.\n"},{"hash":"91f7db26212714254e35f3060c22bb1ea20f04fd","date":"2011-03-08T22:34:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typos in dirent.h\n"},{"hash":"370f78f2c80c64b7b0780a01e672494a26b5678e","date":"2011-03-10T00:42:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix raise semantics with threads.\n"},{"hash":"0bed7e0acfd34e3fb63ca0e4d99b7592571355a9","date":"2011-03-10T01:07:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix race condition in raise - just mask signals\n\na signal handler could fork after the pid/tid were read, causing the\nwrong process to be signalled. i'm not sure if this is supposed to\nhave UB or not, but raise is async-signal-safe, so it probably is\nallowed. the current solution is slightly expensive so this\nimplementation is likely to be changed in the future.\n"},{"hash":"6dc05fbe198ccb326dceb8f05ee943f9a4dfb4ba","date":"2011-03-10T01:21:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize pthread initialization\n\nthe set_tid_address returns the tid (which is also the pid when called\nfrom the initial thread) so there is no need to make a separate\nsyscall to get pid/tid.\n"},{"hash":"3f5420bcda134de80ed6b0f0da1d7d23f147a4cc","date":"2011-03-10T01:23:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make fork properly initialize the main thread in the child process\n"},{"hash":"500c969f059dc1b12dc3809d270cb169abbd57d3","date":"2011-03-10T01:31:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error handling for pthread_sigmask\n\nit must return errno, not -1, and should reject invalud values for how.\n"},{"hash":"1b538acb0ac8520a8a5fd828add2e52e1d2a41eb","date":"2011-03-10T14:54:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix errno behavior in clock_* functions\n\nthese functions are specified inconsistent in whether they're\nspecified to return an error value, or return -1 and set errno.\nhopefully now they all match what POSIX requires.\n"},{"hash":"6871fd773dcedbf056317d5d5e87b4859e97c4a4","date":"2011-03-10T15:17:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sigaltstack work (missing macros in signal.h, error conditions)\n"},{"hash":"0558683d3db05bc7022be57bc8ece9699df24228","date":"2011-03-10T15:26:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sigsuspend syscall\n"},{"hash":"0a949ebdf0b9fc054ea868bd049c8f2c7aed973e","date":"2011-03-10T15:43:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't fail with EINTR in sigtimedwait\n\nPOSIX allows either behavior, but sigwait is not allowed to fail with\nEINTR, so the retry loop would have to be in one or the other anyway.\n"},{"hash":"5b9429adb78aeb5e98fa26bd9b2b3eef981e4c52","date":"2011-03-10T15:59:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sigtimedwait a cancellation point\n"},{"hash":"0f8cc94d68a54893fc2aee90503735045618d8ae","date":"2011-03-10T16:01:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sigsuspend a cancellation point\n"},{"hash":"c8c4ef7d4404b94483c68b7479eb98b9b09f996c","date":"2011-03-10T16:02:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless return value checks for functions that cannot fail\n"},{"hash":"11dbbe9fbac33ede053803ebf7193550ec5cfb48","date":"2011-03-10T16:06:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more cancellation points: tcdrain, clock_nanosleep\n"},{"hash":"52213f734134055968ef14bf54b71f0dd370763a","date":"2011-03-10T16:59:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"security fix: check that cancel/rsyscall signal was sent by the process itself\n"},{"hash":"dc54a7cbb9f0aad6f614131ecc683fbb0b717115","date":"2011-03-10T23:26:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix errors in sigqueue (potential information leak, wrong behavior)\n\n1. any padding in the siginfo struct was not necessarily zero-filled,\nso it might have contained private data off the caller's stack.\n\n2. the uid and pid must be filled in from userspace. the previous\nrsyscall fix broke rsyscalls because the values were always incorrect.\n"},{"hash":"5fcebcde6aeba6ae4a339790beba5331fbcd3b6e","date":"2011-03-10T23:31:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize pthread termination in the non-detached case\n\nwe can avoid blocking signals by simply using a flag to mark that the\nthread has exited and prevent it from getting counted in the rsyscall\nsignal-pingpong. this restores the original pthread create/join\nthroughput from before the sigprocmask call was added.\n"},{"hash":"81af503610761a69476a3adbe8341fa8b6d078aa","date":"2011-03-11T02:34:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sem_open and sem_close to obey posix semantics\n\nmultiple opens of the same named semaphore must return the same\npointer, and only the last close can unmap it. thus the ugly global\nstate keeping track of mappings. the maximum number of distinct named\nsemaphores that can be opened is limited sufficiently small that the\nlinear searches take trivial time, especially compared to the syscall\noverhead of these functions.\n"},{"hash":"cfe581b6bc795e3f00ac30791314ec0f9be4b4ad","date":"2011-03-11T02:52:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some semaphore wait semantics (race condition deadlock and error checking)\n"},{"hash":"682a0f271f8b9a5842679a0f7070139a1f456c0d","date":"2011-03-11T03:05:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure behavior of sem_open when sem does not exist\n"},{"hash":"8d07a0350ef2cfa209db05980ffa0b916744f3d4","date":"2011-03-11T05:48:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"list major changes in preparation for release\n"},{"hash":"26761987333743be7900a9eca512fa335025a8d3","date":"2011-03-11T14:46:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"formatting whatsnew file\n"},{"hash":"f1821fce81bffa61a78639527bde2a34db45244f","date":"2011-03-11T14:46:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"missing const in some pthread_attr_* prototypes\n"},{"hash":"cabf2ff349183eca9ebc0a7b16d0223c193a013a","date":"2011-03-11T14:50:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing ENOTSUP error code\n"},{"hash":"1659aa0e62cf23f3007e01ad8ca7123d8e2b061e","date":"2011-03-11T14:51:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_attr_* implementations to match corrected prototypes\n"},{"hash":"243b542382990d8c2d0e5469ae68dfd622551a3e","date":"2011-03-11T14:51:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement dummy pthread_attr_[gs]etschedparam functions\n\nfor some reason these functions are not shaded by the PS/TPS option in\nPOSIX, so presumably they are mandatory, even though the functionality\nthey offer is optional. for now, provide them in case any programs\ndepend on their existence, but disallow any priority except the\ndefault.\n"},{"hash":"8bb0e48889807a1421c15ab0eeaac198df27c7e5","date":"2011-03-11T15:02:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"match dimensions so we can use all slots without invoking OOB-array-access\n"},{"hash":"6f05b6bbd5c6de6477baac63a23edc44283e1b1b","date":"2011-03-11T18:38:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update whatsnew file for release of 0.7.0\n"},{"hash":"9f50b77d2ba154ba0d8cbccea94af1f7b902fd1a","date":"2011-03-11T19:51:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document some additional important changes\n"},{"hash":"d8d19f4d46284d5b6124710a5235b6fe090c013f","date":"2011-03-13T02:54:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"pthread.h needs clockid_t\n\nactually it gets this from time.h if _POSIX_C_SOURCE or any other\nfeature test macros are defined, but it breaks if they're not.\n"},{"hash":"5eb0d33ec0f08b123c5c10877d6258d05fa9453a","date":"2011-03-13T02:55:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement flockfile api, rework stdio locking\n"},{"hash":"eff62b8a96dbbffa16648048ac684c9042751fe2","date":"2011-03-13T03:53:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"misplaced & in times() made it fail to work, and clobber the stack\n"},{"hash":"b446c55b6f2c692c58f32e5777a8976534a03274","date":"2011-03-14T15:49:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some old cruft from sys/types.h\n"},{"hash":"9dd7d7e3f6a90ae00e83fd98f30c48389c4f5ab2","date":"2011-03-14T15:49:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"partially-written draft of fmemopen, still in #if 0\n"},{"hash":"4d9cc0b399b1d6a146cb45e64c74b7ee562de7a6","date":"2011-03-16T14:39:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize file locking: avoid cache-polluting writes to global storage\n"},{"hash":"cc832d8a31e674c3d8ee7168e4a613b5bf8124e0","date":"2011-03-16T15:35:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't expose EAGAIN, etc. from timed futex wait to caller\n"},{"hash":"29fae65780f4c5ccda3758828da7a83073297ccc","date":"2011-03-16T15:36:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cut out a syscall on thread creation in the case where guard size is 0\n"},{"hash":"d4f9e0b3642a81d07c95302cd9aa0dcaf7de1a05","date":"2011-03-16T20:25:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct error returns for error-checking mutexes\n"},{"hash":"1d59f1eddbcca03063cf080ded6df13170adcb23","date":"2011-03-16T20:49:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify logic, slightly optimize contended case for non-default mutex types\n"},{"hash":"e914f8b7ec79f622fa3b017af434642f61d45ce8","date":"2011-03-17T16:14:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize contended normal mutex case; add int compare-and-swap atomic\n"},{"hash":"b1c43161c2b37e35eae60fa61621a24a5d820d83","date":"2011-03-17T16:21:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unify lock and owner fields of mutex structure\n\nthis change is necessary to free up one slot in the mutex structure so\nthat we can use doubly-linked lists in the implementation of robust\nmutexes.\n"},{"hash":"93cc986ab37b14f8c6b624439ce2a2beca7b3cf7","date":"2011-03-17T17:17:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorder mutex struct fields to make room for pointers (upcoming robust mutexes)\n\nthe layout has been chosen so that pointer slots 3 and 4 fit between\nthe integer slots on 32-bit archs, and come after the integer slots on\n64-bit archs.\n"},{"hash":"18c7ea8055cf733f168d2c74d7cc8523a360f5f1","date":"2011-03-17T17:35:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid function call to pthread_self in mutex unlock\n\nif the mutex was previously locked, we can assume pthread_self was\nalready called at the time of locking, and thus that the thread\npointer is initialized.\n"},{"hash":"047e434ef5fd5437a74f98f63c40a77a683f7f3f","date":"2011-03-18T00:41:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement robust mutexes\n\nsome of this code should be cleaned up, e.g. using macros for some of\nthe bit flags, masks, etc. nonetheless, the code is believed to be\nworking and correct at this point.\n"},{"hash":"a012aa879fb790c8e0446638b206b7f34e92c51e","date":"2011-03-18T02:38:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken wmemchr (unbounded search)\n"},{"hash":"c35bb6645f32bc684dc3da99d4d71c4ead2d4717","date":"2011-03-18T02:55:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement wprintf family of functions\n\nthis implementation is extremely ugly and inefficient, but it avoids a\ngood deal of code duplication and bloat. it may be cleaned up later to\neliminate the remaining code duplication and some of the warts, but i\ndon't really care about its performance.\n\nnote that swprintf is not yet implemented.\n"},{"hash":"e18b56382154fe1c5803f6b9ee36e2991174c037","date":"2011-03-18T13:19:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement [v]swprintf\n"},{"hash":"fc27b96c7d9b2c82679508a57ac998d773f14f08","date":"2011-03-18T13:59:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document changes for 0.7.1\n"},{"hash":"f5ba2bc9ca84d67f03f2542bfff0525f2f478e4c","date":"2011-03-19T01:52:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"various legacy and linux-specific stuff\n\nthis commit is part of an effort to make more of busybox work\nout-of-the-box.\n"},{"hash":"56fd65e861e0ad0ea7677211f8258a8f64233f26","date":"2011-03-19T01:53:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some linux headers useful from user apps.\n\ni'm still not sure whether it's a good idea to include or use any of\nthese, but i'll add them for now. it may make more sense to just add\nofficial kernel headers to the include path for compiling programs\nthat need them.\n"},{"hash":"d00ff2950eacc375d57e44d65c7697f636c67625","date":"2011-03-19T22:51:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul syscall interface\n\nthis commit shuffles around the location of syscall definitions so\nthat we can make a syscall() library function with both SYS_* and\n__NR_* style syscall names available to user applications, provides\nthe syscall() library function, and optimizes the code that performs\nthe actual inline syscalls in the library itself.\n\npreviously on i386 when built as PIC (shared library), syscalls were\nincurring bus lock (lock prefix) overhead at entry and exit, due to\nthe way the ebx register was being loaded (xchg instruction with a\nmemory operand). now the xchg takes place between two registers.\n\nfurther cleanup to arch/$(ARCH)/syscall.h is planned.\n"},{"hash":"b0e83133e2e9242c60e83d25b1c5425ffc6d6d6f","date":"2011-03-19T22:58:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some ioctl stuff to sys/mount.h\n"},{"hash":"462dbfc20788a6c9dd1ea4bb1cef086aa189615a","date":"2011-03-19T23:05:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove comment cruft that got left behind in x86_64 syscall.s\n"},{"hash":"685e40bb09f5f24a2af54ea09c97328808f76990","date":"2011-03-20T01:36:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"syscall overhaul part two - unify public and internal syscall interface\n\nwith this patch, the syscallN() functions are no longer needed; a\nvariadic syscall() macro allows syscalls with anywhere from 0 to 6\narguments to be made with a single macro name. also, manually casting\neach non-integer argument with (long) is no longer necessary; the\ncasts are hidden in the macros.\n\nsome source files which depended on being able to define the old macro\nSYSCALL_RETURNS_ERRNO have been modified to directly use __syscall()\ninstead of syscall(). references to SYSCALL_SIGSET_SIZE and SYSCALL_LL\nhave also been changed.\n\nx86_64 has not been tested, and may need a follow-up commit to fix any\nminor bugs/oversights.\n"},{"hash":"7877db6b2f2deeceaac027579c661610655127f5","date":"2011-03-20T01:50:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in x86_64 part of syscall overhaul\n"},{"hash":"bae862ab18186aba5cd80f1443492f7730dff5f3","date":"2011-03-20T02:18:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"honor namespace for i386 syscall.h, even though it's not a standard header\n"},{"hash":"be82e122bf37fdcd1766d1ed220f0300b30ab6a3","date":"2011-03-20T03:18:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"if returning errno value directly from a syscall, we need to negate it.\n"},{"hash":"aa398f56fa398f2202b04e82c67f822f3233786f","date":"2011-03-20T04:16:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"global cleanup to use the new syscall interface\n"},{"hash":"095820016689dfdc9141f477a86de22054c86078","date":"2011-03-23T17:24:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"very cheap double-free checks in malloc\n"},{"hash":"b470030f839a375e5030ec9d44903ef7581c15a2","date":"2011-03-24T18:18:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul cancellation to fix resource leaks and dangerous behavior with signals\n\nthis commit addresses two issues:\n\n1. a race condition, whereby a cancellation request occurring after a\nsyscall returned from kernelspace but before the subsequent\nCANCELPT_END would cause cancellable resource-allocating syscalls\n(like open) to leak resources.\n\n2. signal handlers invoked while the thread was blocked at a\ncancellation point behaved as if asynchronous cancellation mode wer in\neffect, resulting in potentially dangerous state corruption if a\ncancellation request occurs.\n\nthe glibc/nptl implementation of threads shares both of these issues.\n\nwith this commit, both are fixed. however, cancellation points\nencountered in a signal handler will not be acted upon if the signal\nwas received while the thread was already at a cancellation point.\nthey will of course be acted upon after the signal handler returns, so\nin real-world usage where signal handlers quickly return, it should\nnot be a problem. it's possible to solve this problem too by having\nsigaction() wrap all signal handlers with a function that uses a\npthread_cleanup handler to catch cancellation, patch up the saved\ncontext, and return into the cancellable function that will catch and\nact upon the cancellation. however that would be a lot of complexity\nfor minimal if any benefit...\n"},{"hash":"8ae2fa65636b732e04e19b2521edc335867ba53b","date":"2011-03-25T02:58:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix non-atomicity of puts\n"},{"hash":"c322fe4e1a9bcc20f7a2ded1ac0e1674ea282bc0","date":"2011-03-25T03:05:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize spinlock spin\n"},{"hash":"b8b85a42729dc96e43d51848823fbe28ad92b5c0","date":"2011-03-25T03:06:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize contended case for pthread_spin_trylock\n"},{"hash":"d8dc2faf1033e134e3a8f39bdf15c065f4d234be","date":"2011-03-25T03:06:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prepare pthread_spin_unlock for archs that need memory barriers\n"},{"hash":"a37452430f93700aeb122d693959ad79d8e43ada","date":"2011-03-25T03:16:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify and optimize FILE lock handling\n"},{"hash":"9ae8d5fc71a4b61ec826d58f03f7b543755fb1d4","date":"2011-03-25T20:34:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix all implicit conversion between signed/unsigned pointers\n\nsadly the C language does not specify any such implicit conversion, so\nthis is not a matter of just fixing warnings (as gcc treats it) but\nactual errors. i would like to revisit a number of these changes and\npossibly revise the types used to reduce the number of casts required.\n"},{"hash":"92b52b70e8c0786c95cb73a691e1f6e89a73be46","date":"2011-03-25T20:50:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove -Wno-pointer-sign example from dist/config.mak\n"},{"hash":"ea343364a719add2cd8adf8a50c15bb5f9400dd8","date":"2011-03-26T02:13:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"match glibc/lsb cancellation abi on i386\n\nglibc made the ridiculous choice to use pass-by-register calling\nconvention for these functions, which is impossible to duplicate\ndirectly on non-gcc compilers. instead, we use ugly asm to wrap and\nconvert the calling convention. presumably this works with every\ncompiler anyone could potentially want to use.\n"},{"hash":"e3cd6c5c265cd481db6e0c5b529855d99f0bda30","date":"2011-03-28T05:14:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"major stdio overhaul, using readv/writev, plus other changes\n\nthe biggest change in this commit is that stdio now uses readv to fill\nthe caller's buffer and the FILE buffer with a single syscall, and\nlikewise writev to flush the FILE buffer and write out the caller's\nbuffer in a single syscall.\n\nmaking this change required fundamental architectural changes to\nstdio, so i also made a number of other improvements in the process:\n\n- the implementation no longer assumes that further io will fail\n  following errors, and no longer blocks io when the error flag is set\n  (though the latter could easily be changed back if desired)\n\n- unbuffered mode is no longer implemented as a one-byte buffer. as a\n  consequence, scanf unreading has to use ungetc, to the unget buffer\n  has been enlarged to hold at least 2 wide characters.\n\n- the FILE structure has been rearranged to maintain the locations of\n  the fields that might be used in glibc getc/putc type macros, while\n  shrinking the structure to save some space.\n\n- error cases for fflush, fseek, etc. should be more correct.\n\n- library-internal macros are used for getc_unlocked and putc_unlocked\n  now, eliminating some ugly code duplication. __uflow and __overflow\n  are no longer used anywhere but these macros. switch to read or\n  write mode is also separated so the code can be better shared, e.g.\n  with ungetc.\n\n- lots of other small things.\n"},{"hash":"05b694028e0537954ea2d5e69774e0c24bf9ab47","date":"2011-03-28T21:31:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getc - the classic error of trying to store EOF+0-255 in a char type..\n"},{"hash":"83b6c9e052ed8c813c03a5517943b61caef6b065","date":"2011-03-29T00:29:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless field in pthread struct (wasted a good bit of space)\n"},{"hash":"ef839c73d7ad51249550675defdcb24349e6ffd0","date":"2011-03-29T00:43:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototype for getpass\n"},{"hash":"117581ca69ec2a9c341390eed353646b47a512df","date":"2011-03-29T02:22:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken spinlock due to miscompilation\n\nactually this trick also seems to have made the uncontended case slower.\n"},{"hash":"4cc78719dd22a685ddd89b92ac3bfc308c4c19b3","date":"2011-03-29T02:34:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug from syscall overhaul: extra __syscall_ret call for 0-arg syscalls\n\nthis mainly just caused bloat, but could corrupt errno if a 0-arg\nsyscall ever failed.\n"},{"hash":"4106cdcd2de34bf3b9839e042344d92eae887ecb","date":"2011-03-29T02:36:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert some more spin optimizations that turned out to be pessimizations\n"},{"hash":"0b240ccf523b9af23dd1efa78274f397fcc90cdd","date":"2011-03-29T12:24:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"learned something new - remove is supposed to support directories on POSIX\n"},{"hash":"9646e4d024c05332c9653419abd6c41fdd48a33b","date":"2011-03-29T12:25:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix messed-up errno if remove fails for a non-EISDIR reason\n"},{"hash":"507a9fa6ff9948eb7d858467b7be2cb1dcf15d03","date":"2011-03-29T12:34:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix tmpnam to generate better names, not depend on non-ISO-C symbols\n"},{"hash":"a88edbec15abe3c8e08d5065d8bea399898e757c","date":"2011-03-29T12:37:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make tmpfile fail after exceeding max tries.\n"},{"hash":"8250742b90b8b54e642fa9201bf0cf8b7c27bbb8","date":"2011-03-29T13:00:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix tempnam name generation, and a small bug in tmpnam on retry limit\n"},{"hash":"70c31c7bd779400d2eb56dcb4075bb37227081db","date":"2011-03-29T14:05:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some preliminaries for adding POSIX timers\n"},{"hash":"bf619d82c82052741323aa63c107fbd346c8aaba","date":"2011-03-29T16:58:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"major improvements to cancellation handling\n\n- there is no longer any risk of spoofing cancellation requests, since\n  the cancel flag is set in pthread_cancel rather than in the signal\n  handler.\n\n- cancellation signal is no longer unblocked when running the\n  cancellation handlers. instead, pthread_create will cause any new\n  threads created from a cancellation handler to unblock their own\n  cancellation signal.\n\n- various tweaks in preparation for POSIX timer support.\n"},{"hash":"80c4dcd2535a2d7f01eb539b0358dc51b0c0e122","date":"2011-03-29T17:01:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement POSIX timers\n\nthis implementation is superior to the glibc/nptl implementation, in\nthat it gives true realtime behavior. there is no risk of timer\nexpiration events being lost due to failed thread creation or failed\nmalloc, because the thread is created as time creation time, and\nreused until the timer is deleted.\n"},{"hash":"8524d6536c7bcb893115c0c48982c7311906c1db","date":"2011-03-29T19:11:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert mutex \"optimization\" that turned out to be worse\n"},{"hash":"1c1aa32eea467b2ed43b457b5528713933b32e95","date":"2011-03-29T22:30:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"missing prototype for wcscoll (stub)\n"},{"hash":"680630011d38eb9f96f92b2f080cc60f38f6df21","date":"2011-03-30T02:43:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorder timer initialization so that timer_create does not depend on free\n\nthis allows small programs which only create times, but never delete\nthem, to use simple_malloc instead of the full malloc.\n"},{"hash":"124b4ebc8a293e616cc0a7eaba3587c9b7ff13ec","date":"2011-03-30T12:58:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cheap special-case optimization for normal mutexes\n\ncycle-level benchmark on atom cpu showed typical pthread_mutex_lock\ncall dropping from ~120 cycles to ~90 cycles with this change. benefit\nmay vary with compiler options and version, but this optimization is\nvery cheap to make and should always help some.\n"},{"hash":"02084109f0f0d6e0a7fe4a8cb3a90a422725e264","date":"2011-03-30T13:06:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"streamline mutex unlock to remove a useless branch, use a_store to unlock\n\nthis roughly halves the cost of pthread_mutex_unlock, at least for\nnon-robust, normal-type mutexes.\n\nthe a_store change is in preparation for future support of archs which\nrequire a memory barrier or special atomic store operation, and also\nshould prevent the possibility of the compiler misordering writes.\n"},{"hash":"620a1346382f9e10b516bc168f86d499b6716769","date":"2011-03-30T13:29:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename __simple_malloc.c to lite_malloc.c - yes this affects behavior!\n\nwhy does this affect behavior? well, the linker seems to traverse\narchive files starting from its current position when resolving\nsymbols. since calloc.c comes alphabetically (and thus in sequence in\nthe archive file) between __simple_malloc.c and malloc.c, attempts to\nresolve the \"malloc\" symbol for use by calloc.c were pulling in the\nfull malloc.c implementation rather than the __simple_malloc.c\nimplementation.\n\nas of now, lite_malloc.c and malloc.c are adjacent in the archive and\nin the correct order, so malloc.c should never be used to resolve\n\"malloc\" unless it's already needed to resolve another symbol (\"free\"\nor \"realloc\").\n"},{"hash":"a1eb8cb5dab06dd23c256d03d82ef6b0efc4b6c6","date":"2011-03-30T14:32:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid crash on stupid but allowable usage of pthread_mutex_unlock\n\nunlocking an unlocked mutex is not UB for robust or error-checking\nmutexes, so we must avoid calling __pthread_self (which might crash\ndue to lack of thread-register initialization) until after checking\nthat the mutex is locked.\n"},{"hash":"b8be64c43da207a2f497c1c5b5720e4a2027348a","date":"2011-03-30T16:06:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize timer creation and possibly protect against some minor races\n\nthe major idea of this patch is not to depend on having the timer\npointer delivered to the signal handler, and instead use the thread\npointer to get the callback function address and argument. this way,\nthe parent thread can make the timer_create syscall while the child\nthread is starting, and it should never have to block waiting for the\nbarrier.\n"},{"hash":"3990c5c6a40440cdb14746ac080d0ecf8d5d6733","date":"2011-03-30T17:04:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid all malloc/free in timer creation/destruction\n\ninstead of allocating a userspace structure for signal-based timers,\nsimply use the kernel timer id. we use the fact that thread pointers\nwill always be zero in the low bit (actually more) to encode integer\ntimerid values as pointers.\n\nalso, this change ensures that the timer_destroy syscall has completed\nbefore the library timer_destroy function returns, in case it matters.\n"},{"hash":"a5323c57686340d3a8a6b0d6b3e6faab2a22ce8d","date":"2011-03-30T18:14:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some missing prototypes for nonstandard functions (strsep, clearenv)\n"},{"hash":"c9806fc2f9b68be8942740da508eaaf0695d020e","date":"2011-03-31T23:04:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"greatly simplify pthread_key_create (~20% size reduction)\n"},{"hash":"c1b39b203dc3614469f2581fa4d6146cf0ac2af0","date":"2011-03-31T23:06:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify pthread_key_delete\n\ncalling this function on an uninitialized key value is UB, so there is\nno need to check that the table pointer was initialized.\n"},{"hash":"ded6cb5f719464649bcb61624d52327ae444bfca","date":"2011-04-01T23:53:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use a_store to set cancel flag in pthread_cancel, to ensure a barrier\n"},{"hash":"78eb0879cd031be62a6905bcf5de0db4b7cf30cf","date":"2011-04-02T00:36:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document changes for upcoming 0.7.5 release\n"},{"hash":"c1f15004337f855eb681098a4f3fdc77f105577d","date":"2011-04-02T00:47:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document more changes\n"},{"hash":"3df3d4f5127a15c1237006d22f948b430f9dbe7e","date":"2011-04-02T00:48:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misspelled PTHREAD_CANCELED constant\n"},{"hash":"3bb00f45799ae6df48c2a00496ee57b42f7d2621","date":"2011-04-02T00:58:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"somehow timespec tv_nsec had the wrong type on x86_64... fixed\n"},{"hash":"5243e5f1606a9c6fcf01414ed5561616588bc0b9","date":"2011-04-02T01:10:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove obsolete and useless useconds_t type\n"},{"hash":"6c16d3e98ab2e466bb12ded12dfad1f8f272b1f8","date":"2011-04-02T02:07:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use bss instead of mmap for main thread's pthread thread-specific data\n\nthis simplifies code and removes a failure case\n"},{"hash":"4ae5e811f8d291a0df1418e1aae583161c142952","date":"2011-04-02T02:15:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify setting result on thread cancellation\n"},{"hash":"952987a0cb9b1973fdf23e05f8ddc6fe3c98fd68","date":"2011-04-02T02:35:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorganize the __libc structure for threaded performance issues\n\nwe want to keep atomically updated fields (locks and thread count) and\nreally anything writable far away from frequently-needed function\npointers. stuff some rarely-needed function pointers in between to\npad, hopefully up to a cache line boundary.\n"},{"hash":"bf8785825ac57371c268f54866923d6f89231639","date":"2011-04-02T03:07:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid over-allocation of brk on first malloc\n\nif init_malloc returns positive (successful first init), malloc will\nretry getting a chunk from the free bins rather than expanding the\nheap again. also pass init_malloc a hint for the size of the initial\nallocation.\n"},{"hash":"d1c24ac4ec721ea49c15b277eaebed30f8df1e4c","date":"2011-04-02T03:15:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update release notes\n"},{"hash":"9a909fcd915c65628931dcf6e7b34f261e39e3a3","date":"2011-04-02T17:54:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"apparently fseek should not set the error flag on failed seek\n"},{"hash":"8de03e1a90e60f62806c488cfa4985f99e869f87","date":"2011-04-02T17:55:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't disable seeking after first seek failure\n\nthis could cause problems if the application uses dup2(fd,fileno(f))\nto redirect, and the old fd was not seekable but the new fd is.\n"},{"hash":"fd80cfa00b34ec81b3049b98c66f6a45301ca6c4","date":"2011-04-03T06:33:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"omit pthread tsd dtor code if tsd is not used\n"},{"hash":"537d33d33478034b62928e5cacf397b049ac78ab","date":"2011-04-03T06:40:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify pthread tsd key handling\n"},{"hash":"06baa2b56cc64ec974f0dc6e67001d0cfa030826","date":"2011-04-03T14:24:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"d_fileno alias for d_ino in dirent\n\nthis is nonstandard but since POSIX reserved d_ prefix in dirent.h we\nmight as well define it unconditionally. some programs depend on it.\n"},{"hash":"f01d35184291c650f6a38f8b3da41693bfde0e70","date":"2011-04-03T16:03:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify calling of timer signal handler\n"},{"hash":"6f1414e10297b75a58a92b678444fd277abc9a4f","date":"2011-04-03T16:08:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert to deleting kernel-level timer from cancellation handler\n\nthis is necessary in order to avoid breaking timer_getoverrun in the\nlast run of the timer event handler, if it has not yet finished.\n"},{"hash":"6e9ed66d0db17ac9ad2342fc107e8c4528fce0ba","date":"2011-04-03T16:10:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"timer threads should sleep and stay asleep... a long time\n"},{"hash":"c9b2d8016fca3b0545433e9d58a04c038b6fc921","date":"2011-04-03T16:20:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't trust siginfo in rsyscall handler\n\nfor some inexplicable reason, linux allows the sender of realtime\nsignals to spoof its identity. permission checks for sending signals\nshould limit the impact to same-user processes, but just to be safe,\nwe avoid trusting the siginfo structure and instead simply examine the\nprogram state to see if we're in the middle of a legitimate rsyscall.\n"},{"hash":"1ad049b7b60b2c1704b8bb5b94ee4f95d7540b3a","date":"2011-04-03T17:03:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix race condition in rsyscall handler\n\nthe problem: there is a (single-instruction) race condition window\nbetween a thread flagging itself dead and decrementing itself from the\nthread count. if it receives the rsyscall signal at this exact moment,\nthe rsyscall caller will never succeed in signalling enough flags to\nsucceed, and will deadlock forever. in previous versions of musl, the\nabout-to-terminate thread masked all signals prior to decrementing\nthe thread count, but this cost a whole syscall just to account for\nextremely rare races.\n\nthe solution is a huge hack: rather than blocking in the signal\nhandler if the thread is dead, modify the signal mask of the saved\ncontext and return in order to prevent further signal handling by the\ndead thread. this allows the dead thread to continue decrementing the\nthread count (if it had not yet done so) and exiting, even while the\nlive part of the program blocks for rsyscall.\n"},{"hash":"66def4e776a0c6d68559309aa043163f77b148a5","date":"2011-04-03T17:15:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block all signals during rsyscall\n\notherwise a signal handler could see an inconsistent and nonconformant\nprogram state where different threads have different uids/gids.\n"},{"hash":"7e795ca7edfb2b952abe6a839e84a94420ff8a90","date":"2011-04-03T19:42:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix statvfs syscalls (missing size argument)\n"},{"hash":"7fd3995282db788e33f1bfd7eea95b480d45c804","date":"2011-04-03T20:15:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"pthread_create need not set errno\n"},{"hash":"1db283bf19c3e2a41345895b887a88aea086cb29","date":"2011-04-03T20:20:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add setresuid/setresgid functions (nonstandard)\n"},{"hash":"2155afd73ef15b8a4ce0f0b488068120cca1f0b6","date":"2011-04-03T22:15:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototype getdtablesize (nonstandard function)\n"},{"hash":"c68b26369e89ead7511ef113850035775c5d183d","date":"2011-04-03T22:16:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix serious bug in strchr - char signedness\n\nsearch for bytes with high bit set was giving (potentially dangerous)\nwrong results. i've tested, cleaned up, and hopefully sped up this\nfunction now.\n"},{"hash":"e898a790538ba4c1b7fdb0d16e1cc4c98dd84185","date":"2011-04-03T22:44:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix various bugs in strtold:\n\n0e10000000000000000000000000000000 was setting ERANGE\n\nexponent char e/p was considered part of the match even if not\nfollowed by a valid decimal value\n\n\"1e +10\" was parsed as \"1e+10\"\n\nhex digits were misinterpreted as 0..5 instead of 10..15\n"},{"hash":"3910e93340990a8107d9d9d1e8d5e9102817315f","date":"2011-04-03T23:18:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make ualarm actually work (obsolete function removed from SUS)\n"},{"hash":"5600088d387491bd0af1879aa64e5d388805d8ec","date":"2011-04-03T23:51:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix nl_langinfo to actually use the existing, correct internal version\n"},{"hash":"bd57e2b43a5b56c00a82adbde0e33e5820c81164","date":"2011-04-04T20:24:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use a local temp buffer for unbuffered streams in vfprintf\n\nthis change makes it so most calls to fprintf(stderr, ...) will result\nin a single writev syscall, as opposed to roughly 2*N syscalls (and\npossibly more) where N is the number of format specifiers. in\nprinciple we could use a much larger buffer, but it's best not to\nincrease the stack requirements too much. most messages are under 80\nchars.\n"},{"hash":"98c5583ad5d633166e28034c0a3544ad48b532b6","date":"2011-04-04T20:30:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify vdprintf implementation greatly based on recent vfprintf changes\n\nsince vfprintf will provide a temporary buffer in the case where the\ntarget FILE has a zero buffer size, don't bother setting up a real\nbuffer for vdprintf. this also allows us to skip the call to fflush\nsince we know everything will be written out before vfprintf returns.\n"},{"hash":"b761bd19aa1ae0f95dd2146397b7f39b44a471b6","date":"2011-04-04T21:26:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix rare but nasty under-allocation bug in malloc with large requests\n\nthe bug appeared only with requests roughly 2*sizeof(size_t) to\n4*sizeof(size_t) bytes smaller than a multiple of the page size, and\nonly for requests large enough to be serviced by mmap instead of the\nnormal heap. it was only ever observed on 64-bit machines but\npresumably could also affect 32-bit (albeit with a smaller window of\nopportunity).\n"},{"hash":"bd1f6eba8ca41994e7b7aefbe1513bd1b24f1279","date":"2011-04-04T22:00:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.7.6 bugfix release\n"},{"hash":"f9569662c08d371b85c77f025dd5c6e00b4a4c8b","date":"2011-04-05T13:16:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix various floating point rounding and formatting errors in *printf\n"},{"hash":"2f3d02cd83a46244c3f5a6fec851d7eded1376f4","date":"2011-04-05T13:24:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overflow in printf %N$ argument handling\n"},{"hash":"16675df793e896174230bdb6f99865c526830d3c","date":"2011-04-05T13:27:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misaligned read on early string termination in strchr\n\nthis could actually cause rare crashes in the case where a short\nstring is located at the end of a page and the following page is not\nreadable, and in fact this was seen in gcc compiling certain files.\n"},{"hash":"25ce7621e0cbbbc7d31f016f0840a07b12e68912","date":"2011-04-05T14:28:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for next bugfix release\n"},{"hash":"39e48531eff4e3c3e3e6d1339ff6085f1e2f69bc","date":"2011-04-05T15:16:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support the nonstandard err.h interfaces\n\nnote that unlike the originals, these do not print the program\nname/argv[0] because we have not saved it anywhere. this could be\nchanged in __libc_start_main if desired.\n"},{"hash":"f93de08ca48944996695273930d528947cd382fa","date":"2011-04-05T16:07:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"uncomment IP_PKTINFO\n\nthis was a hack leftover from testing before the initial\ncheck-in to git.\n"},{"hash":"8b61c816933abe9ac152a05ccf8bd801f7bc13bf","date":"2011-04-05T16:13:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"alternate name for syslog.h\n"},{"hash":"e72180083e4b0203d1883b6054198decdb60071c","date":"2011-04-05T16:25:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add more legacy functions: setlinebuf and setbuffer\n"},{"hash":"5546f7a73a9b7e53ee48f23d9b51922cef8c03df","date":"2011-04-05T16:32:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add pivot_root syscall wrapper\n"},{"hash":"ef8b4b1aa68608d7dc65cad41f19b85ec0d3e7af","date":"2011-04-05T16:35:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add (nonstandard) cfmakeraw function\n"},{"hash":"92b2eb8d0331abcf7afbddeca80ebdcf136d8b3d","date":"2011-04-05T17:20:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement if_indextoname and if_nametoindex functions\n"},{"hash":"e86cc888dfc8a413e52194887e90ea14d4e32cb5","date":"2011-04-05T18:05:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some missing ipv6 stuff\n"},{"hash":"2c4e9e6e4b570f4dbbcc5f2402b0257a3b43380a","date":"2011-04-05T18:11:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add getmntent_r interface (all of mntent is nonstandard anyway)\n"},{"hash":"f209440bcfb5bee2386f00392f00f68c716850ce","date":"2011-04-05T19:38:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement the adjtime and adjtimex functions (nonstandard)\n"},{"hash":"5788d97221434903407fec3f0e48b2ca19643a30","date":"2011-04-05T19:40:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sysexits.h legacy header\n"},{"hash":"0438e9fd63bedaa43173fc26b567568ecddac55d","date":"2011-04-05T19:45:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"getopt.h is a GNU-getopt-specific header. always expose GNU functions.\n"},{"hash":"8bb82b4e58cb4dedb276151c47a799c1e51af230","date":"2011-04-05T20:33:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sysv ipc message queues (completely untested)\n"},{"hash":"918a40f257328a2d7490829b54687cd38d7b787b","date":"2011-04-05T21:27:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ip6 pktinfo stuff for x86_64\n\nthese defs should probably all be moved out of bits and unified...\n"},{"hash":"729cb49f52c825ac44f437e1ff0865d9f0b3626a","date":"2011-04-05T22:00:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new framework to inhibit thread cancellation when needed\n\nwith these small changes, libc functions which need to call functions\nwhich are cancellation points, but which themselves must not be\ncancellation points, can use the CANCELPT_INHIBIT and CANCELPT_RESUME\nmacros to temporarily inhibit all cancellation.\n"},{"hash":"59a37f8f1f95980354c8f9ca30f77324d5660aaf","date":"2011-04-05T22:58:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document more changes\n"},{"hash":"fc0cf2852d1c1254a0e6ab25018f02b325eadf43","date":"2011-04-06T03:58:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix (hopefully) statvfs breakage on x86_64 that resulted from fixing i386...\n"},{"hash":"104d0134419eea7539cb5e0cc0405e5c6c9a0dff","date":"2011-04-06T04:02:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect (and conflicting on LP64 archs) types for sysv ipc msgq functions\n"},{"hash":"cd3bb38412cfcc3bc47985ba25287e0af463609a","date":"2011-04-06T13:26:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signal-based timers with null sigevent argument\n\nsince timer_create is no longer allocating a structure for the timer_t\nand simply using the kernel timer id, it was impossible to specify the\ntimer_t as the argument to the signal handler. the solution is to pass\nthe null sigevent pointer on to the kernel, rather than filling it in\nuserspace, so that the kernel does the right thing. however, that\nprecludes the clever timerid-versus-threadid encoding we were doing.\n\ninstead, just assume timerids are below 1M and thread pointers are\nabove 1M. (in perspective: timerids are sequentially allocated and\nseem limited to 32k, and thread pointers are at roughly 3G.)\n"},{"hash":"a113434cd68ce30642c4995b1caadcd084be6f09","date":"2011-04-06T16:24:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"major semaphore improvements (performance and correctness)\n\n1. make sem_[timed]wait interruptible by signals, per POSIX\n2. keep a waiter count in order to avoid unnecessary futex wake syscalls\n"},{"hash":"6b87e941f932a93120383de33f5237395fc1354a","date":"2011-04-06T16:35:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix completely bogus loop condition in getmntent_r\n\nsomehow this worked on my simple fstab, but horribly broke in general,\nleading to use of uninitialized offset array and crashes.\n"},{"hash":"1fee6186fed608ba61257e04355b5b24bd859a05","date":"2011-04-06T18:28:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix prototype for strsep\n"},{"hash":"00817f07392c15d3614aa996c45767be8baca6e1","date":"2011-04-06T18:46:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document more changes for 0.7.7\n"},{"hash":"2b55a619e48e587a09d0620b959dd73f808d57ed","date":"2011-04-06T19:44:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add IN_LOOPBACKNET constant (nonstandard but in reserved namespace)\n"},{"hash":"97d0988fd816ff9474535cf356b53ce6a5acc6ef","date":"2011-04-06T19:47:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _res (__res_state()) dummy\n"},{"hash":"92bd4c60315554e116d4d46b6c4b66518ffd1272","date":"2011-04-06T20:40:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add startup abi functions, dummy for now. eventually needed for c++ support.\n"},{"hash":"095ad156734a5a082e8717e59d76d75db286827c","date":"2011-04-06T21:50:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in sys/msg.h\n"},{"hash":"622804ece745732da0998ec45a2931d94f9dcb4e","date":"2011-04-06T23:46:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix rsyscall handler: must not clobber errno from signal context\n"},{"hash":"74950b336d27532718428c7f5f98409c74f30819","date":"2011-04-06T23:47:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"pthread exit stuff: don't bother setting errno when we won't check it.\n"},{"hash":"b2486a8922bf4977bd82c8190258e39de28c053b","date":"2011-04-07T00:27:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move rsyscall out of pthread_create module\n\nthis is something of a tradeoff, as now set*id() functions, rather\nthan pthread_create, are what pull in the code overhead for dealing\nwith linux's refusal to implement proper POSIX thread-vs-process\nsemantics. my motivations are:\n\n1. it's cleaner this way, especially cleaner to optimize out the\nrsyscall locking overhead from pthread_create when it's not needed.\n2. it's expected that only a tiny number of core system programs will\never use set*id() functions, whereas many programs may want to use\nthreads, and making thread overhead tiny is an incentive for \"light\"\nprograms to try threads.\n"},{"hash":"c2cd25bff89c3581780e7eb267262cb8c4da0d38","date":"2011-04-07T00:32:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consistency: change all remaining syscalls to use SYS_ rather than __NR_ prefix\n"},{"hash":"6682ed1e744dab88f22b9188e3be5746abbae06e","date":"2011-04-07T00:43:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fixed crash in new rsyscall (failure to set sa_flags for signal handler)\n"},{"hash":"bb8d3d00e239f1929af29c441eb729132ffeed83","date":"2011-04-07T20:10:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage due to converting a return type to size_t in iconv...\n"},{"hash":"4095f8338d77cad73a8afbf2d4a0d7987e472bab","date":"2011-04-07T20:13:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken unsigned comparison in wcstoumax\n"},{"hash":"cb8dff2149c393c94c2abbef186c564829b97e93","date":"2011-04-07T20:19:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misplaced *'s in string functions (harmless)\n"},{"hash":"74f75541ffb73181edcc0d7e4efcc4325242e1d9","date":"2011-04-08T03:13:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug in TRE found by clang (typo && instead of &)\n"},{"hash":"d4fbebe18d2d063069b1505d357a1ff3b5ca0ab8","date":"2011-04-08T03:18:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized variables in dns lookup code\n"},{"hash":"e2cc0bee118d7a282bdce0b71db433def3022fb6","date":"2011-04-08T12:14:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"return the requested string as the \"canonical name\" for numeric addresses\n\npreviously NULL was returned in ai_canonname, resulting in crashes in\nsome callers. this behavior was incorrect. note however that the new\nbehavior differs from glibc, which performs reverse dns lookups. POSIX\nis very clear that a reverse DNS lookup must not be performed for\nnumeric addresses.\n"},{"hash":"d104c1f7e22b9745b6028ff8fbc3bc88137ba1c2","date":"2011-04-08T12:49:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken dns response parsing code that made most ipv6 lookups fail\n"},{"hash":"5b8d81f706da0b7dc0abb5d0d74595d5b2f60d52","date":"2011-04-08T13:21:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ipv6 address printing: 2001 appeared as 201, etc.\n"},{"hash":"7168790763cdeb794df52be6e3b39fbb021c5a64","date":"2011-04-08T13:24:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround broken msghdr struct on 64bit linux\n\nPOSIX clearly specifies the type of msg_iovlen and msg_controllen, and\nLinux ignores it and makes them both size_t instead. to work around\nthis we add padding (instead of just using the wrong types like glibc\ndoes), but we also need to patch-up the struct before passing it to\nthe kernel in case the caller did not zero-fill it.\n\nif i could trust the kernel to just ignore the upper 32 bits, this\nwould not be necessary, but i don't think it will ignore them...\n"},{"hash":"60685ecad1c2398b4ab95fa7bf88c8336d914a6c","date":"2011-04-08T15:56:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken sigsetjmp on x86_64\n"},{"hash":"5e72cb4a363fbf2e5b4cbeddbfde2d98ec209056","date":"2011-04-08T16:15:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consistency with pthread stack min in limits.h\n"},{"hash":"67e793e5e14fe031569117fd88328268e67ad4ee","date":"2011-04-08T16:16:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"better fix sysconf pthread stack min\n"},{"hash":"2cff36a84f268c09f4c9dc5a1340652c8e298dc0","date":"2011-04-09T05:17:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around a nasty bug in linux readv syscall\n\naccording to posix, readv \"shall be equivalent to read(), except...\"\nthat it places the data into the buffers specified by the iov array.\nhowever on linux, when reading from a terminal, each iov element\nbehaves almost like a separate read. this means that if the first iov\nexactly satisfied the request (e.g. a length-one read of '\\n') and the\nsecond iov is nonzero length, the syscall will block again after\ngetting the blank line from the terminal until another line is read.\nsimply put, entering a single blank line becomes impossible.\n\nthe solution, fortunately, is simple. whenever the buffer size is\nnonzero, reduce the length of the requested read by one byte and let\nthe last byte go through the buffer. this way, readv will already be\nin the second (and last) iov, and won't re-block on the second iov.\n"},{"hash":"2d1d62ed47452126bb632207dd64b0fdaf4c13ed","date":"2011-04-09T05:32:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prepare notes for 0.7.8 release\n"},{"hash":"82171d6ac0d84876cdc6dd6319b0790b42cdb47e","date":"2011-04-09T06:23:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"greatly improve SIGEV_THREAD timers\n\ncalling pthread_exit from, or pthread_cancel on, the timer callback\nthread will no longer destroy the timer.\n"},{"hash":"2063c4cac27f118c21dcb9352e8a4903131c88c8","date":"2011-04-09T06:26:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"run pthread tsd destructors when a timer thread pretends to exit\n"},{"hash":"196d6437dc69ede78af29d500f8ae8d650a17515","date":"2011-04-10T22:27:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing float.h macros\n\nactually FLT_ROUNDS needs to expand to a static inline function that\nobtains the current rounding mode and returns it, but that will be\nadded later with fenv.h stuff.\n"},{"hash":"4a19634f07821cf4ef0e9a1d060e148dd2a429fd","date":"2011-04-10T22:32:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing UTIME_* macros in sys/stat.h\n"},{"hash":"691b20bec013c7a2758a38bafd21b7649c2cc920","date":"2011-04-11T02:46:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add legacy BSD-style timer*() macros in sys/time.h\n"},{"hash":"2555fe1b6da21119f87d407ef3838648d5fd601d","date":"2011-04-11T02:47:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some ugly legacy type names in sys/types.h (u_char etc.)\n"},{"hash":"5eaa22132b8bf22f4074baed2eb1eb9b9a799fd5","date":"2011-04-11T04:10:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update README since we now DO have a mailing list\n"},{"hash":"01612447847063c2c9b574a3df6c197d26fd1533","date":"2011-04-11T05:50:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove ugly warning-suppression hack from crypt - this invokes UB!\n"},{"hash":"52458cfa8c79a9eacb81e151e15cdeff04b75d37","date":"2011-04-11T05:52:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fputwc return value\n"},{"hash":"dae17a1aaf25d8333e729173d86659066607d87d","date":"2011-04-11T05:58:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix errno handling in scandir:\n\n1. saved errno was not being restored, illegally clearing errno to 0.\n2. no need to backup and save errno around free; it will not touch\nexcept perhaps when the program has already invoked UB...\n"},{"hash":"28bde3b78746c4f773600c415fbc740efec4e311","date":"2011-04-11T14:38:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup types stuff in headers, fix missing u_int*_t in sys/types.h\n"},{"hash":"43b2e9bf26371e096b69f4753ff9f6dbec437f5e","date":"2011-04-11T14:48:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more types cleanup\n\nthe basic idea is that the only things in alltypes.h should be types\nthat either vary from system to system (in practice, not just in\ntheoretical la-la land - this is the implementation so we choose what\nconstraints we want to impose on ports) or which are needed by\nmultiple system headers.\n"},{"hash":"209f2bbd95cfac3a71bb8afa452c794d1ccf94cf","date":"2011-04-12T15:50:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing rlimit macros\n"},{"hash":"e514228043c2618f925bcfe8db71b0ff4e2b2113","date":"2011-04-12T15:50:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix printf(\"%.9g\", 1.1) and similar not dropping trailing zeros\n"},{"hash":"7ecab79f581c9bd2369dc00a7649bb5af9089302","date":"2011-04-12T16:01:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some traditional aliases to stat.h\n"},{"hash":"0729fd9fd94bf39c49741b61641c68411ccc2cbe","date":"2011-04-12T16:03:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"utmpx.h is no longer under standards, so expose ut_exit structure\n"},{"hash":"4f4ba4c02f6e670d679b2ffba2645d709ddf4dd9","date":"2011-04-12T16:18:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken bswap_32\n"},{"hash":"c546be175c169399420fff4706cd1d4fcefd7d31","date":"2011-04-12T17:04:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move bswap functions to static inline in byteswap.h\n"},{"hash":"c89862660bd3845ace7977480db3a43dc80475f4","date":"2011-04-12T17:13:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize ntohl etc. in terms of bswap functions\n\nwe can do this without violating the namespace now that they are\nmacros/inline functions rather than extern functions. the motivation\nis that gcc was generating giant, slow, horrible code for the old\nfunctions, and now generates a single byte-swapping instruction.\n"},{"hash":"0913560a3ffd4572d926b4f9bed3dbf3e6a1b3f0","date":"2011-04-12T17:36:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more changes for upcoming 0.7.8\n"},{"hash":"e2915eeeea244d3818d5eb7532ed35c6cf43c8fd","date":"2011-04-12T21:52:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"speed up threaded fork\n\nafter fork, we have a new process and the pid is equal to the tid of\nthe new main thread. there is no need to make two separate syscalls to\nobtain the same number.\n"},{"hash":"750b738e53f799443fcfcd3a0751318c072a022f","date":"2011-04-13T12:35:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ptsname_r (nonstandard) and split ptsname (standard) to separate file\n\nthis eliminates the ugly static buffer in programs that use ptsname_r.\n"},{"hash":"6597f9ac133fd4f47dea307d6260fd52eae77816","date":"2011-04-13T12:36:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement memrchr (nonstandard) and optimize strrchr in terms of it\n"},{"hash":"0f5b43550c071832afd0c2e21e9c9fe9a2260ac6","date":"2011-04-13T12:45:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect GNU sighandler_t typedef\n"},{"hash":"3f44f298e46b78cb8fe80be76798e799589ae55e","date":"2011-04-13T13:03:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix prototypes/signature for setgroups, etc.\n"},{"hash":"91e836fda7d4e2a4ba38d5faec6e3876b1b5e179","date":"2011-04-13T13:39:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement getgrouplist (for initgroups), formerly dummied-out\n"},{"hash":"cac7d837ccc35b7e80d8f1eb7338f8e9d8b1b2d8","date":"2011-04-13T17:16:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix and cleanup suseconds_t/timeval stuff (broken on 64-bit)\n\ntrash in the upper 32 bits was making the kernel sleep forever in\nselect on 64-bit systems.\n"},{"hash":"45a3219944f03ece5742b6aecb79b6dc7c9ac0bb","date":"2011-04-13T17:22:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typos on RLIM_NLIMITS, remove _GNU_SOURCE test for it\n\nRLIM_* is in the reserved namespace for this header\n"},{"hash":"6f0259a4fc7d827db027fe122377687ef780e17c","date":"2011-04-13T18:52:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug whereby getopt_long allowed mismatch in last char of option name\n"},{"hash":"55b123b5ede22f5c401d2992ae933a2f935dac6c","date":"2011-04-13T18:55:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add syscall wrapper for flock\n\nit should be noted that flock does not mix well with standard fcntl\nlocking, but nonetheless some applications will attempt to use flock\ninstead of fcntl if both exist. options to configure or small patches\nmay be needed. debian maintainers have plenty of experience with this\nunfortunate situation...\n"},{"hash":"b778a2ba69d7707d13280ce2d44c4153eb1e2431","date":"2011-04-13T19:24:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add profile for getmntent_r\n"},{"hash":"b5b43b6d6245efac10cd0d2b6d23ee8f91d75261","date":"2011-04-13T20:13:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add syslog.h cruft for syslogd to use...\n"},{"hash":"07e865cc5afb11e6e882e998306ab0f7fb64357e","date":"2011-04-13T20:45:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"numerous fixes to sysv ipc\n\nsome of these definitions were just plain wrong, others based on\noutdated ancient \"non-64\" versions of the kernel interface.\n\nas much as possible has now been moved out of bits/*\n\nthese changes break abi (the old abi for these functions was wrong),\nbut since they were not working anyway it can hardly matter.\n"},{"hash":"a444ee34103bb06dbcf6ddfa10abd7712982b090","date":"2011-04-13T21:24:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix syslog (corrected SIGPIPE blocking, and using dgram instead of stream)\n\nit actually appears the hacks to block SIGPIPE are probably not\nnecessary, and potentially harmful. if i can confirm this, i'll remove\nthem.\n"},{"hash":"a77411a50d22f6c9db305f19efda5ab2db3266de","date":"2011-04-13T21:51:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless SIGPIPE protection from syslog\n\nper the standard, SIGPIPE is not generated for SOCK_DGRAM.\n"},{"hash":"19c1830eaaab05652d87b5ee9557d0d7a40c2f06","date":"2011-04-13T22:32:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify syslog, add vsyslog interface (nonstandard)\n\nwith datagram sockets, depending on fprintf not to flush the output\nearly was very fragile; the new version simply uses a small fixed-size\nbuffer. it could be updated to dynamic-allocate large buffers if\nneeded, but i can't envision any admin being happy about finding\n64kb-long lines in their syslog...\n"},{"hash":"9beb6330c08839e8bb2ebcd129c97c395d9d327e","date":"2011-04-14T00:47:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify cancellation point handling\n\nwe take advantage of the fact that unless self->cancelpt is 1,\ncancellation cannot happen. so just increment it by 2 to temporarily\nblock cancellation. this drops pthread_create.o well under 1k.\n"},{"hash":"016a5dc1925a66c7d1ffc14b862b1342f399cfda","date":"2011-04-14T16:51:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use a separate signal from SIGCANCEL for SIGEV_THREAD timers\n\notherwise we cannot support an application's desire to use\nasynchronous cancellation within the callback function. this change\nalso slightly debloats pthread_create.c.\n"},{"hash":"ec2e50d0d78fb19c4a0b6f3e1d394408860425b4","date":"2011-04-14T18:39:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cheap trick to further optimize locking normal mutexes\n"},{"hash":"e983aea0aec4b77cd3eb39dabc763b08c4485395","date":"2011-04-14T19:10:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change sem_trywait algorithm so it never has to call __wake\n"},{"hash":"33a3f202d1998ca7ba2d3bec1e4886accc0053a7","date":"2011-04-14T20:23:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add useless type fd_mask. it's in the reserved namespace.\n"},{"hash":"9b96220e5a9d1648c84060357ebe473e2afbe45c","date":"2011-04-14T23:14:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in legacy FAPPEND definition\n"},{"hash":"b172dc8b58a5db37d61cb4718cd42628126710f1","date":"2011-04-15T01:43:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make tmpfile slightly more efficient (use unlink syscall instead of remove)\n"},{"hash":"ace973637f5b38a02ac2699e38f282372042bf7c","date":"2011-04-15T01:45:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken fcntl locks on x86_64\n"},{"hash":"c2b18f3531b8cd2d5e2295626cff77b7765b356e","date":"2011-04-15T01:49:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fcntl.h: move macros that do not vary between archs out of bits\n"},{"hash":"0a84e72c42ba01c9fa794d5e94aabf8a704e8b7d","date":"2011-04-15T01:50:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix FAPPEND typo on x86_64 (previously only fixed on i386)\n"},{"hash":"a3aa89d8268a4d3af43d94e77f473753fd99d8da","date":"2011-04-15T02:06:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix O_SYNC definition, cleanup fcntl.h\n"},{"hash":"088ae5995a75ab06882322fd3ef39f12df06bbbc","date":"2011-04-15T03:33:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document some changes in the upcoming release\n"},{"hash":"69cf09c821b94668f03c942585d99c13121731c8","date":"2011-04-15T16:04:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid setting errno when checking for tty\n\nsetting errno here is completely valid, but some programs, notably\nbusybox printf, assume that errno will not be set during output and\ntreat this as an error condition. in any case, skipping it slightly\nreduces code size and saves time.\n"},{"hash":"d251c2645c86e89704545337b955ff8b3e835290","date":"2011-04-15T16:06:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement wordexp. first try, may be buggy. intended to be safe.\n"},{"hash":"90f09a0dde3b37ebfabc4d3f6e2bb64086b7e804","date":"2011-04-15T16:07:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove stupid debug code in wordexp\n"},{"hash":"feee98903cd8119d9a3db62589246a940f44a9f5","date":"2011-04-17T15:43:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul pthread cancellation\n\nthis patch improves the correctness, simplicity, and size of\ncancellation-related code. modulo any small errors, it should now be\ncompletely conformant, safe, and resource-leak free.\n\nthe notion of entering and exiting cancellation-point context has been\ncompletely eliminated and replaced with alternative syscall assembly\ncode for cancellable syscalls. the assembly is responsible for setting\nup execution context information (stack pointer and address of the\nsyscall instruction) which the cancellation signal handler can use to\ndetermine whether the interrupted code was in a cancellable state.\n\nthese changes eliminate race conditions in the previous generation of\ncancellation handling code (whereby a cancellation request received\njust prior to the syscall would not be processed, leaving the syscall\nto block, potentially indefinitely), and remedy an issue where\nnon-cancellable syscalls made from signal handlers became cancellable\nif the signal handler interrupted a cancellation point.\n\nx86_64 asm is untested and may need a second try to get it right.\n"},{"hash":"e74664016b025ea9718da59e680555961444ee4d","date":"2011-04-17T16:09:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some minor issues in cancellation handling patch\n\nsignals were wrongly left masked, and cancellability state was not\nswitched to disabled, during the execution of cleanup handlers.\n"},{"hash":"02eff258c6a39746db287e20c142153e80c81bac","date":"2011-04-17T16:15:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't use pthread_once when there is no danger in race\n"},{"hash":"ebf82447be4b30bedc19ad868c3a0662b1ba596d","date":"2011-04-17T17:21:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize cancellation enable/disable code\n\nthe goal is to be able to use pthread_setcancelstate internally in\nthe implementation, whenever a function might want to use functions\nwhich are cancellation points but avoid becoming a cancellation point\nitself. i could have just used a separate internal function for\ntemporarily inhibiting cancellation, but the solution in this commit\nis better because (1) it's one less implementation-specific detail in\nfunctions that need to use it, and (2) application code can also get\nthe same benefit.\n\npreviously, pthread_setcancelstate dependend on pthread_self, which\nwould pull in unwanted thread setup overhead for non-threaded\nprograms. now, it temporarily stores the state in the global libc\nstruct if threads have not been initialized, and later moves it if\nneeded. this way we can instead use __pthread_self, which has no\ndependencies and assumes that the thread register is already valid.\n"},{"hash":"09dae2b7b66f741b30aa7ce95ab395239da20762","date":"2011-04-17T19:30:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bugs in cancellable syscall asm\n\nx86_64 was just plain wrong in the cancel-flag-already-set path, and\ncrashing.\n\nthe more subtle error was not clearing the saved stack pointer before\nreturning to c code. this could result in the signal handler\nmisidentifying c code as the pre-syscall part of the asm, and acting\non cancellation at the wrong time, and thus resource leak race\nconditions.\n\nalso, now __cancel (in the c code) is responsible for clearing the\nsaved sp in the already-cancelled branch. this means we have to use\ncall rather than jmp to ensure the stack pointer in the c will never\nmatch what the asm saved.\n"},{"hash":"eb0e8fa0b1960cff4bd65ebefc798f70273b0bc9","date":"2011-04-17T20:32:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"debloat: use __syscall instead of syscall where possible\n\ndon't waste time (and significant code size due to function call\noverhead!) setting errno when the result of a syscall does not matter\nor when it can't fail.\n"},{"hash":"9080cc153cc2b09881c3245becbd68534db18d7c","date":"2011-04-17T20:53:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up handling of thread/nothread mode, locking\n"},{"hash":"1ebde9c3a228e8daa4bdba98046556b4b6829f5e","date":"2011-04-17T21:06:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_exit from cancellation handler\n\ncancellation frames were not correctly popped, so this usage would not\nonly loop, but also reuse discarded and invalid parts of the stack.\n"},{"hash":"2afed79f15a32e9616a27f9d327cef0cefbbaab1","date":"2011-04-17T21:09:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"pthread_exit is not supposed to affect cancellability\n\nif the exit was caused by cancellation, __cancel has already set these\nflags anyway.\n"},{"hash":"e98bdca9df8df791fe93ec8eec920fa8d14da1f5","date":"2011-04-17T21:32:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minimal realpath implementation using /proc\n\nclean and simple, but fails when the caller does not have permissions\nto open the file for reading or when /proc is not available. i may\nreplace this with a full implementation later, possibly leaving this\nversion as an optimization to use when it works.\n"},{"hash":"1bc44a473431228f5b46652740cb967a0de16e9e","date":"2011-04-17T23:25:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in x86_64 cancellable syscall asm\n"},{"hash":"61b56a8d2151a60ec67a459a9d325b29c5dc3b41","date":"2011-04-18T22:42:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove bogus extra logic for close cancellability\n\nlike all other syscalls, close should return to the caller if and only\nif it successfully performed its action. it is necessary that the\napplication be able to determine whether the close succeeded.\n"},{"hash":"be2e06d347fdb83e9c4f57e57fa29b78f6276a0c","date":"2011-04-19T00:50:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"recheck cancellation disabled flag after syscall returns EINTR\n\nwe already checked before making the syscall, but it's possible that a\nsignal handler interrupted the blocking syscall and disabled\ncancellation, and that this is the cause of EINTR. in this case, the\nold behavior was testably wrong.\n"},{"hash":"d2c604d5a40bc75fe83a62fd20377c20a73aa0d5","date":"2011-04-19T01:11:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect syslog against cancellation\n\nthese functions are allowed to be cancellation points, but then we\nwould have to install cleanup handlers to avoid termination with locks\nheld.\n"},{"hash":"df9e11bb063446df760e8f7c62ea5eb6ba3faa34","date":"2011-04-19T01:17:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect ftw and nftw against cancellation\n"},{"hash":"75a0be1f65f400489cc09b20a92a4569ad2b0782","date":"2011-04-19T01:22:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid fd leak if opendir is cancelled when calloc has failed\n"},{"hash":"43ee4df3384853a9c53f4f45b31d190ff9b0d7f0","date":"2011-04-19T01:35:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dns lookups: protect against cancellation and fix incorrect error codes\n"},{"hash":"4f24994920cf3c8a9a6f60d4573a7673a3095b02","date":"2011-04-19T17:16:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized waiters field in semaphores\n"},{"hash":"a6054e3c94aa0491d7366e4b05ae0d73f661bfe2","date":"2011-04-20T03:09:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move some more code out of pthread_create.c\n\nthis also de-uglifies the dummy function aliasing a bit.\n"},{"hash":"f0fc95d439459bac27d0d26ec151700a1579b028","date":"2011-04-20T03:37:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid malloc of potentially-large string in wordexp\n"},{"hash":"145c05345d6172eef1c8c274d696dbe1c01b88ab","date":"2011-04-20T03:42:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block cancellation in wordexp, handle more errors\n"},{"hash":"1c76683cb4377a481dc1085b63170bb276512267","date":"2011-04-20T19:20:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add syscall wrappers for posix_fadvise, posix_fallocate\n"},{"hash":"23573509244d4d5b4dc6d114b5807f72418f3411","date":"2011-04-20T19:25:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support posix_madvise (previous a stub)\n\nthe check against MADV_DONTNEED to because linux MADV_DONTNEED\nsemantics conflict dangerously with the POSIX semantics\n"},{"hash":"53ab4e793bcff0dd5fa9cf76a4170cbacae342c9","date":"2011-04-20T19:36:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing include in posix_madvise.c (compile error)\n"},{"hash":"b052f13cd1215cf444f16ccf14c96e32f61f73e0","date":"2011-04-20T19:55:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"namespace fixes for sys/mman.h\n"},{"hash":"18bca575107d80ca81241d1429ded62918c5bd2e","date":"2011-04-20T23:05:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"shadow password fixes: empty fields should read as -1 not 0\n"},{"hash":"29a15ad077bd7af683d3c838d21be1c216f22f8f","date":"2011-04-20T23:15:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix initgroups (uninitialized count passed to getgrouplist)\n"},{"hash":"d4b5d6e98160b3c76b37fef1b0581c3b9a7cd192","date":"2011-04-21T00:00:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bugs in ipv4 parsing\n"},{"hash":"f1ac8a28d8f3c93ef42c20460992f74822975f11","date":"2011-04-21T00:02:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disallow blank strings as service or host name\n"},{"hash":"4921ce08673d14e53b3931b8536238d944a2c1ce","date":"2011-04-21T00:55:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement (nonstandard) forkpty\n"},{"hash":"10d7561db5d51231939fa0b42d17eaac2bff6938","date":"2011-04-21T01:01:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"properly create new session/controlling terminal in forkpty\n"},{"hash":"f9a6372a98cc4d1b70400b2e7238e1f9eae50558","date":"2011-04-21T01:05:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround bug in linux dup2\n\nthe linux documentation for dup2 says it can fail with EBUSY due to a\nrace condition with open and dup in the kernel. shield applications\n(and the rest of libc) from this nonsense by looping until it succeeds\n"},{"hash":"870cc679771f776333953b2a990a107393d9d0fd","date":"2011-04-21T01:41:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix minor bugs due to incorrect threaded-predicate semantics\n\nsome functions that should have been testing whether pthread_self()\nhad been called and initialized the thread pointer were instead\ntesting whether pthread_create() had been called and actually made the\nprogram \"threaded\". while it's unlikely any mismatch would occur in\nreal-world problems, this could have introduced subtle bugs. now, we\nstore the address of the main thread's thread descriptor in the libc\nstructure and use its presence as a flag that the thread register is\ninitialized. note that after fork, the calling thread (not necessarily\nthe original main thread) is the new main thread.\n"},{"hash":"f492c95401b3a6fedb3973631496ee329447b25e","date":"2011-04-21T18:21:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"include signal.h to avoid thorny __sigcontext/sigcontext issues\n\nthis is explicitly allowed by POSIX\n"},{"hash":"4b5f054098e484baa6d457aebe8bdab0eeb90215","date":"2011-04-21T18:27:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move wait.h macros out of bits. they do not vary.\n"},{"hash":"31f014e0a751d2bb9d40a09fe2cd1a8b0111acf6","date":"2011-04-21T20:57:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bogus return values for inet_pton\n"},{"hash":"d878dceccaff9931160250496c6cc87a8fe45811","date":"2011-04-22T01:52:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"omit errno update path for syscalls that cannot fail\n"},{"hash":"cbb65af6ae2fd129102e2cc27e29d23df7580c97","date":"2011-04-22T03:33:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update release notes in prep for 0.7.9 release\n"},{"hash":"e6cc1d6c0e66970c7445df4f16a729f019d30efd","date":"2011-04-22T22:48:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix initial stack alignment in new threads on x86_64\n"},{"hash":"db9915ee97670885f3f2302d8c41ac6c61f2d77e","date":"2011-04-23T00:14:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update release notes to new format, add more\n"},{"hash":"5efc6af4ebb9d50eb978d0338835544fdfea0396","date":"2011-04-25T14:40:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix 2 eof-related bugs in scanf\n\n1. failed match of literal chars from the format string would always\nreturn matching failure rather than input failure at eof, leading to\ninfinite loops in some programs.\n\n2. unread of eof would wrongly adjust the character counts reported by\n%n, yielding an off-by-one error.\n"},{"hash":"34d81974d341e0174d1fc690b4d3e3b9b1767586","date":"2011-04-25T21:04:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ipv6 parsing code (formerly dummied-out)\n"},{"hash":"3486365e952292987d84313cc7b84a42238ec83f","date":"2011-04-25T21:49:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug in ipv6 parsing that prevented parsing a lone \"::\"\n"},{"hash":"d179807f6b57d5657639b083dea2da94f07de664","date":"2011-04-26T12:41:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prototype for mempcpy\n"},{"hash":"32e2c468baac683114efdf836632aa948872b5ce","date":"2011-04-26T12:42:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"typo in prototype for mempcpy\n"},{"hash":"b5b41212a686849fe061b8c4bb80d38f893d00c7","date":"2011-04-26T16:28:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"function signature fix: add const qualifier to mempcpy src arg\n"},{"hash":"4bb9b4f3b4a6794da3091f58acbd938ff66fc15b","date":"2011-04-27T16:19:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add word-sized ctz function to atomic.h\n\nstrictly speaking this and a few other ops should be factored into\nasm.h or the file should just be renamed to asm.h, but whatever. clean\nit up someday.\n"},{"hash":"22263709eda9f7d692a0f484fd759f757418dbd7","date":"2011-04-27T17:27:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace heap sort with smoothsort implementation by Valentin Ochs\n\nSmoothsort is an adaptive variant of heapsort. This version was\nwritten by Valentin Ochs (apo) specifically for inclusion in musl. I\nworked with him to get it working in O(1) memory usage even with giant\narray element widths, and to optimize it heavily for size and speed.\nIt's still roughly 4 times as large as the old heap sort\nimplementation, but roughly 20 times faster given an almost-sorted\narray of 1M elements (20 being the base-2 log of 1M), i.e. it really\ndoes reduce O(n log n) to O(n) in the mostly-sorted case. It's still\nsomewhat slower than glibc's Introsort for random input, but now\nconsiderably faster than glibc when the input is already sorted, or\nmostly sorted.\n"},{"hash":"e6bac87d0eaab116878a04874bc5b6a3496cb938","date":"2011-04-27T20:06:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct variadic prototypes for execl* family\n\nthe old versions worked, but conflicted with programs which declared\ntheir own prototypes and generated warnings with some versions of gcc.\n"},{"hash":"def0af189871a499efdc9bc37438d8b20eb702ab","date":"2011-04-28T03:41:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use compiler builtins for variadic macros when available\n\nthis slightly cuts down on the degree musl \"fights with\" gcc, but more\nimportantly, it fixes a critical bug when gcc inlines a variadic\nfunction and optimizes out the variadic arguments due to noticing that\nthey were \"not used\" (by __builtin_va_arg).\n\nwe leave the old code in place if __GNUC__ >= 3 is false; it seems\nlike it might be necessary at least for tinycc support and perhaps if\nanyone ever gets around to fixing gcc 2.95.3 enough to make it work..\n"},{"hash":"1477a3be62746765d7f93c4c7b0f7948a1541fd3","date":"2011-04-29T15:14:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid crashing when nel==0 is passed to qsort\n"},{"hash":"d02c50d6a34ff28db2486fbeac86e513286d52e9","date":"2011-05-02T00:12:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor optimization in puts: use inline putc_unlocked macro for newline\n"},{"hash":"a9be201cc0a2c04f430c029dd070fc0fbcd164b3","date":"2011-05-02T02:16:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround for preprocessor bug in pcc\n\nwith this patch, musl compiles and mostly works with pcc 1.0.0. a few\ntests are still failing and i'm uncertain whether they are due to\nportability problems in musl, or bugs in pcc, but i suspect the\nlatter.\n"},{"hash":"bd6746732536fdf2ebaadff6f98aee0879b1674d","date":"2011-05-02T02:59:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined call order in fclose, possible lost output depending on compiler\n\npcc turned up this bug by calling f->close(f) before fflush(f),\nresulting in lost output and error on flush.\n"},{"hash":"78c808b1264cbbec6c7cf4e9c4f321736a218949","date":"2011-05-02T13:18:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fclose return status logic, again\n\nthe previous fix was incorrect, as it would prevent f->close(f) from\nbeing called if fflush(f) failed. i believe this was the original\nmotivation for using | rather than ||. so now let's just use a second\nstatement to constrain the order of function calls, and to back to\nusing |.\n"},{"hash":"202911435b56fe007ca62fc6e573fa3ea238d337","date":"2011-05-05T21:44:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add SA_NOMASK alias for SA_NODEFER with _GNU_SOURCE\n"},{"hash":"f16a3089be33a75ef8e75b2dd5ec3095996bbb87","date":"2011-05-07T00:00:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"completely new barrier implementation, addressing major correctness issues\n\nthe previous implementation had at least 2 problems:\n\n1. the case where additional threads reached the barrier before the\nfirst wave was finished leaving the barrier was untested and seemed\nnot to be working.\n\n2. threads leaving the barrier continued to access memory within the\nbarrier object after other threads had successfully returned from\npthread_barrier_wait. this could lead to memory corruption or crashes\nif the barrier object had automatic storage in one of the waiting\nthreads and went out of scope before all threads finished returning,\nor if one thread unmapped the memory in which the barrier object\nlived.\n\nthe new implementation avoids both problems by making the barrier\nstate essentially local to the first thread which enters the barrier\nwait, and forces that thread to be the last to return.\n"},{"hash":"9dd6399c95ed3ebc62492f6dedc569b5f0d8bb8e","date":"2011-05-07T00:27:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove debug code that was missed in barrier commit\n"},{"hash":"77f15d108ee021d4dfbeebe793661131c4470d4d","date":"2011-05-07T01:45:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reduce some ridiculously large spin counts\n\nthese should be tweaked according to testing. offhand i know 1000 is\ntoo low and 5000 is likely to be sufficiently high. consider trying to\nadd futexes to file locking, too...\n"},{"hash":"99b8a25e941e54537bf39ca2f265c345f393f112","date":"2011-05-08T03:23:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul implementation-internal signal protections\n\nthe new approach relies on the fact that the only ways to create\nsigset_t objects without invoking UB are to use the sig*set()\nfunctions, or from the masks returned by sigprocmask, sigaction, etc.\nor in the ucontext_t argument to a signal handler. thus, as long as\nsigfillset and sigaddset avoid adding the \"protected\" signals, there\nis no way the application will ever obtain a sigset_t including these\nbits, and thus no need to add the overhead of checking/clearing them\nwhen sigprocmask or sigaction is called.\n\nnote that the old code actually *failed* to remove the bits from\nsa_mask when sigaction was called.\n\nthe new implementations are also significantly smaller, simpler, and\nfaster due to ignoring the useless \"GNU HURD signals\" 65-1024, which\nare not used and, if there's any sanity in the world, never will be\nused.\n"},{"hash":"4c4e22d781d75a461097cccc2ecac5adbafb1a59","date":"2011-05-08T03:37:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize compound-literal sigset_t's not to contain useless hurd bits\n"},{"hash":"11e4b92556a02f43b500e6815690354b0f710843","date":"2011-05-08T03:39:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize out useless default-attribute object in pthread_create\n"},{"hash":"15b77d52c950c375514d2e8152e7112fd018e20e","date":"2011-05-08T04:03:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eventfd syscall wrapper and read/write wrappers\n"},{"hash":"8628eff9128d66cc69dbc301341dc55130a9817e","date":"2011-05-11T23:58:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the last known rounding bug in floating point printing\n\nthe observed symptom was that the code was incorrectly rounding up\n1.0625 to 1.063 despite the rounding mode being round-to-nearest with\nties broken by rounding to even last place. however, the code was just\nnot right in many respects, and i'm surprised it worked as well as it\ndid. this time i tested the values that end up in the variables round,\nsmall, and the expression round+small, and all look good.\n"},{"hash":"c5025bfabefe952507cf333ea89854d6ba612549","date":"2011-05-17T18:13:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.7.10\n"},{"hash":"19892bf0a740062cf51b84c27f53f7c0f3120b53","date":"2011-05-22T16:34:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix brk/sbrk behavior to match the real legacy functions\n"},{"hash":"e98136207ad1a6df1cdc1578e4ad56f8f0db4047","date":"2011-05-23T01:54:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wcsncpy writing past end of buffer\n"},{"hash":"86339bc4ba69ca5c88fd5570875cf17a275bd019","date":"2011-05-23T01:58:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix strncat and wcsncat (double null termination)\n\nalso modify wcsncpy to use the same loop logic\n"},{"hash":"3a17f757a80816961cd1fbf4664a5cbb02563b2d","date":"2011-05-27T00:59:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"modernize coding style in sjlj asm\n"},{"hash":"c97f0d998cae23472ea30564663a8612dcfb6f83","date":"2011-05-28T22:36:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial implementation of posix_spawn\n\nfile actions are not yet implemented, but everything else should be\nmostly complete and roughly correct.\n"},{"hash":"d6c0c9784615ddb316ace52f3a9e2f025214ba2a","date":"2011-05-28T22:39:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"posix_spawn: honor POSIX_SPAWN_SETSIGDEF flag\n"},{"hash":"a0ae0b09368e6dbfa82860187dcd6fdf86d86fee","date":"2011-05-29T03:30:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add file actions support to posix_spawn\n"},{"hash":"dd45edb5ff6198493edf1315d3e4e6ffc7b96447","date":"2011-05-29T03:31:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add accidentally-omitted file needed for posix_spawn file actions\n"},{"hash":"f48832ee15027763826c8a7ff9eeed3fc06bb499","date":"2011-05-29T16:58:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix backwards posix_spawn file action order\n"},{"hash":"9a59faab3c0c46d2e96245e11fc71351caba1a2e","date":"2011-05-29T18:09:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add useless, obsolescent function ulimit\n"},{"hash":"11c531e21de9c417166da934898ea7225a758fdf","date":"2011-05-30T05:41:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement uselocale function (minimal)\n"},{"hash":"ddd87b2f10baf35ed32917bd488be8bf53ad0cc3","date":"2011-05-30T15:31:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement pthread_[sg]etconcurrency.\n\nthere is a resource limit of 0 bits to store the concurrency level\nrequested. thus any positive level exceeds a resource limit, resulting\nin EAGAIN. :-)\n"},{"hash":"c74d306f47e9f212a63dc0187fb08aa275a8f1a5","date":"2011-05-30T17:32:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"missing prototypes for mbsnrtowcs and wcsnrtombs\n"},{"hash":"a6c399cf62bbd88f0f0142fd3e9e1e72bd093bc3","date":"2011-06-05T17:30:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate (harmless in this case) vla usage in fnmatch.c\n"},{"hash":"0dc99ac413d8bc054a2e95578475c7122455eee8","date":"2011-06-05T23:29:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"safety fix for glob's vla usage: disallow patterns longer than PATH_MAX\n\nthis actually inadvertently disallows some valid patterns with\nredundant / or * characters, but it's better than allowing unbounded\nvla allocation.\n\neventually i'll write code to move the pattern to the stack and\neliminate redundancy to ensure that it fits in PATH_MAX at the\nbeginning of glob. this would also allow it to be modified in place\nfor passing to fnmatch rather than copied at each level of recursion.\n"},{"hash":"da88b16a221c9d327e1bfa61dd6f4f08dacce57a","date":"2011-06-06T22:04:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of d_name in struct dirent\n\nbasically there are 3 choices for how to implement this variable-size\nstring member:\n1. C99 flexible array member: breaks using dirent.h with pre-C99 compiler.\n2. old way: length-1 string: generates array bounds warnings in caller.\n3. new way: length-NAME_MAX string. no problems, simplifies all code.\n\nof course the usable part in the pointer returned by readdir might be\nshorter than NAME_MAX+1 bytes, but that is allowed by the standard and\ndoesn't hurt anything.\n"},{"hash":"71a80c5767aa4e6b7cbc2b58feef3cfca76e29fe","date":"2011-06-06T22:10:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use volatile pointers for intentional-crash code.\n"},{"hash":"cbf35978a9870fb1f5c73a852c986d4fcca6c2d4","date":"2011-06-07T00:12:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use __attribute__((const)) for errno and pthread_self if __GNUC__ is defined\n\nthis is not too ugly and should result in significant code size and\nperformance improvements for many programs.\n"},{"hash":"ab11386aaaffc93755ff86199bf753a6d5ef4b45","date":"2011-06-07T05:52:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for POSIX message queues, except mq_notify\n"},{"hash":"ede353d8e5c9198cf467aad95e49a496020898ed","date":"2011-06-07T06:42:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement mq_notify\n"},{"hash":"86f8c72bb1cc1fad05e1ed1b2a6f4433defc9cf7","date":"2011-06-07T15:14:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mq send/recv functions are cancellation points\n"},{"hash":"0b6b43ed3fd26cf8cd926193be5c9fd831b534c4","date":"2011-06-07T15:26:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use __WCHAR_TYPE__ on i386 if it is defined\n\nunfortunately traditional i386 practice was to use \"long\" rather than\n\"int\" for wchar_t, despite the latter being much more natural and\nlogical. we followed this practice, but it seems some compilers (clang\nand maybe certain gcc builds or others too..?) have switched to using\nint, resulting in spurious pointer type mismatches when L\"...\" wide\nstrings are used. the best solution I could find is to use the\ncompiler's definition of wchar_t if it exists, and otherwise fallback\nto the traditional definition.\n\nthere's no point in duplicating this approach on 64-bit archs, as\ntheir only 32-bit type is int.\n"},{"hash":"2b0cedac8d03bbeb1bd0e1d77fab775b1d9f3e25","date":"2011-06-07T19:05:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"define MQ_PRIO_MAX\n"},{"hash":"e1d2a8e2394640e4b573117b7653fd0f163671fe","date":"2011-06-07T19:07:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mq names without leading / have impl-def behavior; allowing them is easier\n"},{"hash":"e0037efc1253e190c7c75f74e5a05333fdd807bb","date":"2011-06-08T20:33:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"isgreater etc. relation macros for math.h\n"},{"hash":"ecc0f5138dd784eadea66f5b244515a98b381d39","date":"2011-06-08T20:41:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement psignal and psiginfo\n"},{"hash":"c19a6be5a18d51a157cf91bf3909f71fa277e588","date":"2011-06-08T20:47:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"it's called getgrgid_r, not getgruid_r...\n"},{"hash":"2697b4e755f0ca3f0c660894eb6e906a046789bb","date":"2011-06-10T01:47:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add netpacket/packet.h\n\nlooks like busybox is going to want it, and apparently some other\nlow-level network software does too...\n"},{"hash":"382584724308442f03f3d29f7fc6de9e9d140982","date":"2011-06-12T14:25:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"another return value fix for mktemp...\n"},{"hash":"2afebbbcd16e8bfc5e008a40b2faf3bd8cf14e88","date":"2011-06-12T14:53:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"malloc: cast size down to int in bin_index functions\n\neven if size_t was 32-bit already, the fact that the value was\nunsigned and that gcc is too stupid to figure out it would be positive\nas a signed quantity (due to the immediately-prior arithmetic and\nconditionals) results in gcc compiling the integer-to-float conversion\nas zero extension to 64 bits followed by an \"fildll\" (64 bit)\ninstruction rather than a simple \"fildl\" (32 bit) instruction on x86.\nreportedly fildll is very slow on certain p4-class machines; even if\nnot, the new code is slightly smaller.\n"},{"hash":"b09b78905b09016becda8df81a43e11bebd88208","date":"2011-06-12T19:58:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"floating point environment, untested\n\nat present the i386 code does not support sse floating point, which is\nnot part of the standard i386 abi. while it may be desirable to\nsupport it later, doing so will reduce performance and require some\ntricks to probe if sse support is present.\n\nthis first commit is i386-only, but it should be trivial to port the\nasm to x86_64.\n"},{"hash":"52cf24a0f45f208b1627a64e4af9a5ed8cb28ae7","date":"2011-06-13T17:37:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fesetround - it was writing to status word instead of control word\n"},{"hash":"773b0fe4473be18fdcc1b822630e2ebdb1719536","date":"2011-06-13T17:37:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"x86_64 fenv support (untested; at least known to build successfully)\n"},{"hash":"73d2fde1195401dfb87935f46126f9481af1a8c3","date":"2011-06-13T18:06:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong type for wcsrchr argument 2\n"},{"hash":"76100a724ee714a64f773e325d084fd0422aea3d","date":"2011-06-14T00:21:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove old useless timezone.s file (unused)\n"},{"hash":"1e4f1cf154d18d2bd13cd4524a8bbae6786efd02","date":"2011-06-14T00:28:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove all .size and .type directives for functions from the asm\n\nthese are useless and have caused problems for users trying to build\nwith non-gnu tools like tcc's assembler.\n"},{"hash":"f09e78de983a8d1daf2f6e071a998eb615f1ce67","date":"2011-06-14T00:37:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sigset macro for 64-bit systems (<< was overflowing due to wrong type)\n"},{"hash":"0e1762539c2ad359ba10502cdfb750b5afd2329e","date":"2011-06-14T00:52:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid 64bit warnings when using pointers as entropy for temp names\n"},{"hash":"6232b96f5153d0b718054a8bc569fcd7d596bab2","date":"2011-06-14T05:23:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor locking optimizations\n"},{"hash":"f58c8a0f391987a65e055ae591ec59b9df7b7f7c","date":"2011-06-14T05:25:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"run dtors before taking the exit-lock in pthread exit\n\npreviously a long-running dtor could cause pthread_detach to block.\n"},{"hash":"7779dbd2663269b465951189b4f43e70839bc073","date":"2011-06-14T05:35:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix race condition in pthread_kill\n\nif thread id was reused by the kernel between the time pthread_kill\nread it from the userspace pthread_t object and the time of the tgkill\nsyscall, a signal could be sent to the wrong thread. the tgkill\nsyscall was supposed to prevent this race (versus the old tkill\nsyscall) but it can't; it can only help in the case where the tid is\nreused in a different process, but not when the tid is reused in the\nsame process.\n\nthe only solution i can see is an extra lock to prevent threads from\nexiting while another thread is trying to pthread_kill them. it should\nbe very very cheap in the non-contended case.\n"},{"hash":"836ba93d93f901d25e8ed4ac34209cf547d8e217","date":"2011-06-15T03:14:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"__syscall5 inline is having trouble with PIC; just use the function for now\n"},{"hash":"c7d19f9923c66a2ddb47272f1e8fec8b804f54c4","date":"2011-06-15T03:15:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"restore use of .type in asm, but use modern @function (vs %function)\n\nthis seems to be necessary to make the linker accept the functions in\na shared library (perhaps to generate PLT entries?)\n\nstrictly speaking libc-internal asm should not need it. i might clean\nthat up later.\n"},{"hash":"32aea2087a699bb4bd9c34347b6ef8d164ee0d0b","date":"2011-06-16T20:53:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"duplicate re_nsub in LSB/glibc ABI compatible location\n"},{"hash":"7f5471529c2f85ce528292ea5d4a146597d47588","date":"2011-06-16T21:11:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some struct padding to match LSB/glibc ABI where it may be helpful\n"},{"hash":"5a2e74ebd2dc6d2fb3766662e68dcbc62e3e9081","date":"2011-06-18T11:39:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"copy-paste error in prctl.h\n"},{"hash":"d43ff110bcb258df61448d21da3b1a89088388f6","date":"2011-06-18T11:41:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix memory leak on failure in realpath\n"},{"hash":"51e2d8310222ddd4d4e895f55c627100d863aa95","date":"2011-06-18T23:48:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"experimental dynamic linker!\n\nsome notes:\n- library search path is hard coded\n- x86_64 code is untested and may not work\n- dlopen/dlsym is not yet implemented\n- relocations in read-only memory won't work\n"},{"hash":"596d60c5650488069ac1bbabb786685ebd3298c1","date":"2011-06-19T02:52:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linker 64bit fix: hash table entries are always 32bit\n"},{"hash":"779165e6d42cfb3d19859e4eaa0da6807b24ad20","date":"2011-06-19T12:33:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"x86_64: ensure that dtor pointer passed to app is 0 so it won't be used\n\nleaving it uninitialized caused unpredictable crashes or worse due to\ncalling an indeterminate function pointer.\n"},{"hash":"d19adeec52ee2e5f9524d306576cfd6bfc4a031a","date":"2011-06-20T02:42:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make ldso asm more uniform with rest of codebase (no unnecessary suffixes)\n"},{"hash":"c7ce1b20d2f37f97f9cfcd57cb4fb4c7cd66a3a0","date":"2011-06-23T22:02:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial commit of prng implementation by Szabolcs Nagy\n"},{"hash":"b7f6e0c6f848b7a8c64b3f7b72014b48a9923729","date":"2011-06-24T02:04:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prepare support for LD_LIBRARY_PATH (checking suid/sgid safety)\n\nthe use of this test will be much stricter than glibc and other\ntypical implementations; the environment will not be honored\nwhatsoever unless the program is confirmed non-suid/sgid by the aux\nvector the kernel passed in. no fallback to slow syscall-based\nchecking is used if the kernel fails to provide the information; we\nsimply assume the worst (suid) in this case and refuse to honor\nenvironment.\n"},{"hash":"ec05a0b08f0d93341c149a6f3235e4ee5711b2f8","date":"2011-06-24T02:13:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adapt build/install/gcc-wrapper systems for dynamic linking support\n"},{"hash":"a654b0243b450379f94bd08a4e4e4306efbec3c0","date":"2011-06-24T18:02:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use symlink rather than bogus linker script for libc.so\n\nthe linker script caused a bogus DT_NEEDED entry\n"},{"hash":"e0b0ff1598ff747713631224a54e63af70761a71","date":"2011-06-24T22:32:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use soname in ld-musl.so to prevent filename appearing in DT_NEEDEDs\n"},{"hash":"368ba4a0a9aa5cc9a769872adbef6da433babf54","date":"2011-06-25T04:18:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"keep track of which dsos have been relocated\n"},{"hash":"e8dbf00a789e3b56ca6c3d88e8048b7b2c18b797","date":"2011-06-25T04:47:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"discard dso descriptors after performing relocations\n\neventually (once dlopen exists) this behavior will be conditional on\ndlopen/dlsym not being reachable.\n"},{"hash":"f937031800e3130b3b4bb42d0d547bb69a5d32db","date":"2011-06-25T05:38:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize opendir using O_CLOEXEC\n"},{"hash":"568b8075a4406ca8cb1f718e74fd0829cb7f0b90","date":"2011-06-25T05:56:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"proper path searching for dynamic linker\n\nfirst, use $LD_LIBRARY_PATH unless suid. if that fails, read path from\n/etc/ld-musl-$ARCH.path and fallback to a builtin default.\n"},{"hash":"4d95a58524d277ce51a5d27d964f0628f6e23841","date":"2011-06-25T13:23:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"const correctness in mq_notify\n\nwhy did gcc allow this invalid assignment to compile in the first place?\n"},{"hash":"59633c736dcf6dcd11c24edab4803c85b8462bf6","date":"2011-06-25T16:26:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix possible (questionable) strict aliasing violations and ptr arith\n"},{"hash":"e8b8f3c90e02d8fa077be0f273fce1e48e2719d2","date":"2011-06-25T19:38:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move all limits that don't vary out of bits/limits.h, into main limits.h\n"},{"hash":"49388f3b7b72a1695bef05f64439b602b2e77a53","date":"2011-06-25T21:49:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle library paths better (ignore empty path components, etc.)\n"},{"hash":"febbd12d00883a716a9edca25011f8aa306b859b","date":"2011-06-25T22:18:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"XSI search.h API implementation by Szabolcs Nagy\n"},{"hash":"6250c0be4b56ca42b8b4db1d2b9d672811378dc0","date":"2011-06-25T22:54:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"wordexp cannot use we_offs unless WRDE_DOOFFS flag is set\n\npreviously, a potentially-indeterminate value from we_offs was being\nused, resulting in wrong we_wordc and subsequent crashes in the\ncaller.\n"},{"hash":"1a3ff4f9099cf3d6b65a77cf9bfb7f69a7698a30","date":"2011-06-25T22:57:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic linker issue in musl-gcc wrapper\n"},{"hash":"32de61e81a64c8bb2cd23e3476f00433692f8e59","date":"2011-06-26T02:36:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some symbol resolution issues in dynamic linker\n\n1. search was wrongly beginning with lib itself rather than dso head\n2. inconsistent resolution of function pointers for functions in plt\n"},{"hash":"e22c2d3ee6c436ca69aa07d52943bf2808a22aac","date":"2011-06-26T19:52:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use .type directives for math asm (needed for dynamic linking to work)\n"},{"hash":"5d0965cb56f92e24b36b98882543f8ee1e03b5ff","date":"2011-06-26T20:12:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate OOB array hacks in malloc\n"},{"hash":"6e53a6eca42ec40d12dced55f4840df883e2f76e","date":"2011-06-26T20:34:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix useless use of potentially-uninitialized mode variable in sem_open\n"},{"hash":"6b3d5e508fcf16abe18c163c4c31a47f2d35a306","date":"2011-06-26T21:39:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"error handling in dynamic linking\n\nsome of the code is not yet used, and is in preparation for dlopen\nwhich needs to be able to handle failure loading libraries without\nterminating the program.\n"},{"hash":"bc30aea457c2406b3888df647e5a8af1dfeaadc8","date":"2011-06-26T21:41:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"type directives for x86_64 math asm\n"},{"hash":"59ab43f5f8dbd1baf98d3c483c723d155b6f95c8","date":"2011-06-26T23:23:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"experimental dlopen/dlsym and dynlink changes needed to support them\n"},{"hash":"92ab5d8d156545ab0daff6062d7a519861684fb6","date":"2011-06-27T01:21:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix resolving symbols in objects loaded in RTLD_LOCAL mode\n\nbasically we temporarily make the library and all its dependencies\npart of the global namespace but only for the duration of performing\nrelocations, then return them to their former state.\n"},{"hash":"0e4dae3d77f67bed0cd29c98b67b86c7d9853ac9","date":"2011-06-27T01:36:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in dlopen: don't use null pointer\n\ndeps can be null if a library has no dependencies (such as libc itself)\n"},{"hash":"97507bde474b0091a28628a7dae943c377758d49","date":"2011-06-27T01:50:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add RTLD_DEFAULT support\n"},{"hash":"06933cc72445e12ee46b2930659eb5db0f9d6a43","date":"2011-06-27T02:09:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't leave the lock held on dlopen failure..\n"},{"hash":"9e17b71fa658f102ecb2f210534070a2328dd6c9","date":"2011-06-27T02:39:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stale pointer issue in dynamic linker with dlopen\n"},{"hash":"87a30ce50d390422b3f4f0bd0e3f0664fb6a7da7","date":"2011-06-27T05:01:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"match LSB/glibc constants for dynamic loader\n"},{"hash":"230f1813ad8264f09d5247fa0ed1e8e361c21e0e","date":"2011-06-27T05:02:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further fixup dlfcn.h\n"},{"hash":"207c45d7abdf7a4bd93973f195deb4d8e202c3e3","date":"2011-06-28T01:38:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup shared library build system to be more $HOME-local-install friendly\n\nthe path for the dynamic linker is now configurable, and failure to\ninstall the symlink for it will not stop the build.\n"},{"hash":"f9c9d8c333494c0a81301d326f28528d96594efd","date":"2011-06-28T02:34:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor updates to INSTALL documentation\n"},{"hash":"8d54681f15125e5a26669128cba66cd28fc52e5b","date":"2011-06-28T12:27:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix a few bugs from last dynamic linking build system commit\n\nsome cruft was left and DESTDIR was not being used correctly.\n"},{"hash":"c7debe13ee3c1ca2039b67bb7e4891365017ac1a","date":"2011-06-28T18:13:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker relocate the main program image last, after all libs\n\nprior to this change, copy relocations for initialized pointer\nvariables would not reflect the relocated contents of the pointer.\n"},{"hash":"bf30100ad7e208dbac5835b38881c98ceb5b928f","date":"2011-06-28T18:20:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use load address from elf header if possible\n\nthis is mostly useless for shared libs (though it could help for\nprelink-like purposes); the intended use case is for adding support\nfor calling the dynamic linker directly to run a program, as in:\n./libc.so ./a.out foo\n\nthis usage is not yet supported.\n"},{"hash":"e41182796014b0e2b52c7b3e6ee69ad7d0c3e723","date":"2011-06-28T18:41:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use type directives for fenv asm functions\n"},{"hash":"6717e62ac0ebcea681c7db4fafd36d2a0f1d6034","date":"2011-06-28T23:40:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reclaim the memory wasted by dynamic linking for use by malloc\n"},{"hash":"2cee45762a1e69444cd711a1a8112a401540081a","date":"2011-06-29T02:06:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.7.11\n"},{"hash":"9f17413c753030811761d576fdb95f200bd818d7","date":"2011-06-29T04:29:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"textrel support, cheap and ugly\n"},{"hash":"af3d5405b8d7b00c121643d7a0c0b9bb31cc7139","date":"2011-06-29T04:42:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around linux bug in mprotect\n\nper POSIX: The mprotect() function shall change the access protections\nto be that specified by prot for those whole pages containing any part\nof the address space of the process starting at address addr and\ncontinuing for len bytes.\n\non the other hand, linux mprotect fails with EINVAL if the base\naddress and/or length is not page-aligned, so we have to align them\nbefore making the syscall.\n"},{"hash":"f7dff1852b996363061e04531a15a3403351c375","date":"2011-06-29T19:29:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"locking support for random() prng\n\nthese interfaces are required to be thread-safe even though they are\nnot state-free. the random number sequence is shared across all\nthreads.\n"},{"hash":"47e72e10d5e1c7e88b8e419586baf55b12141446","date":"2011-06-29T21:13:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid errors in ucontext.h when no feature test macros are defined\n"},{"hash":"f9ed11f3e1337d6bac6298db1d66d4f27bb59f6b","date":"2011-06-29T23:26:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"posix_memalign should fail if size is not a multiple of sizeof(void *)\n"},{"hash":"fb62ae74d0c87ff506e970bf18579cc96b16e046","date":"2011-06-30T12:11:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buffer overrun in getgrent code when there are no group members\n"},{"hash":"7640497f5f28ddb4aa13528676a99b603320f47e","date":"2011-06-30T15:42:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement the nonstandard GNU function fpurge\n\nthis is a really ugly and backwards function, but its presence will\nprevent lots of broken gnulib software from trying to define its own\nversion of fpurge and thereby failing to build or worse.\n"},{"hash":"a0b56b947a5a8a58fe2accea7f6d9ee927d70ad4","date":"2011-06-30T16:44:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add and consolidate nasty stdio_ext junk\n\nhopefully this resolves the rest of the issues with hideously\nnonportable hacks in programs that use gnulib.\n"},{"hash":"e5cb55fedd811f71cd91ef097a8a4a4964d8c564","date":"2011-06-30T17:27:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix logic in __fwriting\n"},{"hash":"f6fd351c703a2843959b3be83078d9dce33f30f3","date":"2011-06-30T20:31:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"catch invalid ld80 bit patterns and treat them as nan\n\nthis should not be necessary - the invalid bit patterns cannot be\ncreated except through type punning. however, some broken gnu software\nis passing them to printf and triggering dangerous stack-smashing, so\nlet's catch them anyway...\n"},{"hash":"daaef3552d9f1fa9b6dc839b66637df3672b0541","date":"2011-06-30T20:37:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error in previous ld80 fpclassify commit\n"},{"hash":"17be8291048587a166a6707f394fe0d48b078ce9","date":"2011-07-01T00:23:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fill in junk in stropts.h\n\nSTREAMS are utterly useless as far as I can tell, but some software\nwas apparently broken by the presence of stropts.h but lack of macros\nit's supposed to define...\n"},{"hash":"191ebcac31ceb27664790a70a36ff4602e12d9d0","date":"2011-07-01T03:02:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simple rpath support (no token expansion yet) for dynamic linker\n"},{"hash":"e936e4612f2b06d5812eb9215ef69c6a5f5b17d7","date":"2011-07-01T03:12:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"res_search symbol, aliased to res_query for now (better than nothing)\n"},{"hash":"2fdea17c3da17f6ae96601283b28d025ed4d4cee","date":"2011-07-02T02:40:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dlopen UB due to longjmp/volatile rules violation\n"},{"hash":"58483f0afdc440edf992ff75cb3209a44f624776","date":"2011-07-03T20:41:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"0.7.12 release notes\n"},{"hash":"2f0c415cebfedff0e4eb49b743a591a4c15d454e","date":"2011-07-03T23:26:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"iconv was not returning -1 on most failure\n\nthis broke most uses of iconv in real-world programs, especially\nglib's iconv wrappers.\n"},{"hash":"3d54adbe4752f3aaa61a1be412b6116ff7dd5be1","date":"2011-07-04T05:01:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"printf(\"%#x\",0) should print 0 not 0x0\n"},{"hash":"cc44d9f2017855ad29c5c1301e8368158a4c2fa7","date":"2011-07-04T05:57:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"zero precision with zero value should not inhibit prefix/width printing\n"},{"hash":"a9e6d01114c8b4aa264d5d49aa26de8bda2c76be","date":"2011-07-04T15:55:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"printf: \"if a precision is specified, the '0' flag shall be ignored.\"\n"},{"hash":"6b1d3817cfb5d2b9d3eb66667fba2bc8e87180ef","date":"2011-07-09T22:06:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing signalfd flags\n"},{"hash":"594b16e00491a8d5e18be7669ae1c2d4219e52c7","date":"2011-07-12T04:31:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify iconv and support more legacy codepages\n"},{"hash":"95a85e047e2353959735d93de91df717a4b90900","date":"2011-07-12T06:43:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"legacy japanese charset support in iconv (only from, not to)\n"},{"hash":"c3c5e88c31b78f7b32b3d8b5c2450d75fa858951","date":"2011-07-12T06:52:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"\"implement\" getnetbyaddr and getnetbyname\n\nthese are useless legacy functions but some old software contains\ncruft that expects them to exist...\n"},{"hash":"0e2331c9b6e0c0b4f24019d4062f4c655d28cbaf","date":"2011-07-13T00:30:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"gb18030 support in iconv (only from, not to)\n\nalso support (and restrict to subsets) older chinese sets, and\nexplicitly refuse to convert to cjk (since there's no code for it yet)\n"},{"hash":"ecc9c5fcfa4831b290cc1a63c0346cbb0c1fcf42","date":"2011-07-14T04:51:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new restartable integer parsing framework.\n\nthis fixes a number of bugs in integer parsing due to lazy haphazard\nwrapping, as well as some misinterpretations of the standard. the new\nparser is able to work character-at-a-time or on whole strings, making\nit easy to support the wide functions without unbounded space for\nconversion. it will also be possible to update scanf to use the new\nparser.\n"},{"hash":"d3fd192523db544e6005051f224a2d7bafabedd9","date":"2011-07-14T05:12:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wcsto[iu]max with high characters\n\nstopping without letting the parser see a stop character prevented\ngetting a result. so treat all high chars as the null character and\npass them into the parser.\n\nalso eliminated ugly tmp var using compound literals.\n"},{"hash":"47d027ee1a44829819c345287623fe75374893ab","date":"2011-07-15T02:11:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix various bugs in new integer parser framework\n\n1. my interpretation of subject sequence definition was wrong. adjust\nparser to conform to the standard.\n\n2. some code for handling tail overflow case was missing (forgot to\nfinish writing it).\n\n3. typo (= instead of ==) caused ERANGE to wrongly behave like EINVAL\n"},{"hash":"94a0171d807dc94302d6505041fc58879c27f3bd","date":"2011-07-17T01:24:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix logic error in fread\n\nfread was calling f->read without checking that the file was in\nreading mode. this could:\n1. crash, if f->read was a null pointer\n2. cause unwanted blocking on a terminal already at eof\n3. allow reading on a write-only file\n"},{"hash":"4ec07e1f60128cdac63bd98e7091240d6e5d888c","date":"2011-07-17T03:17:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure in fork that child gets its own new robust mutex list\n"},{"hash":"fa845669ce03c26c069fc34e7377b47fac23edd8","date":"2011-07-22T01:15:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix errno value when fdopendir is given an invalid file descriptor\n\nthis resolves an issue reported by Vasiliy Kulikov\n"},{"hash":"63d447e2a3bb7faf69e0befb123e6ffff0ce47ea","date":"2011-07-22T02:44:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"socket headers macro adjustment - workaround for buggy programs\n\nsome program was undefining AF_NETLINK and thereby breaking AF_ROUTE...\n"},{"hash":"d40e344f7b311980dfe3c165d8cbecfe04c12bd2","date":"2011-07-22T04:23:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"incorrect check for open failure in openpty function\n\n-1, not 0, indicates failure\n"},{"hash":"c0fe5b9da9f98b83262717c0090817f1fbb3d8a0","date":"2011-07-22T04:25:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"check for fd exhaustion in forkpty\n\nwe cannot report failure after forking, so the idea is to ensure prior\nto fork that fd 0,1,2 exist. this will prevent dup2 from possibly\nhitting a resource limit and failing in the child process. fcntl\nrather than dup2 is used prior to forking to avoid race conditions.\n"},{"hash":"e3eb49321c85e43fcc6842f3f57ee097b32555e4","date":"2011-07-24T03:45:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some preliminaries for vdso clock support\n\nthese changes also make it so clock_gettime(CLOCK_REALTIME, &ts) works\neven on pre-2.6 kernels, emulated via the gettimeofday syscall. there\nis no cost for the fallback check, as it falls under the error case\nthat already must be checked for storing the error code in errno, but\nwhich would normally be hidden inside __syscall_ret.\n"},{"hash":"a53de812d258a7b0be44ce5dfc96e0f8ce137817","date":"2011-07-24T04:26:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify dynamic linker startup\n\ninstead of creating temp dso objects on the stack and moving them to\nthe heap if dlopen/dlsym are used, use static objects to begin with,\nand just donate them to malloc if we no longer need them.\n"},{"hash":"f7adc39e3793114e989f0a830af966230cd2c83d","date":"2011-07-24T04:54:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"const correctness on function pointer\n"},{"hash":"6ab444d97a00fd8d04264cefef0291d3c7b5b701","date":"2011-07-24T04:54:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"load vdso, if present, into the dso list\n"},{"hash":"e91c375fd027a485bd7415afbaf059d429e11e11","date":"2011-07-24T05:10:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround for gcc's optimizer breaking dynamic symbol resolution\n"},{"hash":"427173b9325d604d30650c16f1774942130aec52","date":"2011-07-24T06:19:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix resolution of weak symbols (hopefully right now) and vdso\n"},{"hash":"dd92a09ecac74760823b047c074e4b21a8cb531f","date":"2011-07-25T13:21:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"comment non-obvious de bruijn sequence code in int parser\n"},{"hash":"e01ac67599dea1fd78a1bd1a0339a1da07dc9578","date":"2011-07-25T13:22:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"when resolving symbols with only weak defs, use first def, not last def\n"},{"hash":"649af9f73a84aa45742324d44384a873c8709915","date":"2011-07-29T00:43:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix for setenv bogus var argument handling\n\nthanks to mikachu\n\nper POSIX:\n\nThe setenv() function shall fail if:\n\n[EINVAL] The name argument is a null pointer, points to an empty\nstring, or points to a string containing an '=' character.\n"},{"hash":"bbdcc403cae440c5f965f0f4c0de1f2d7fd256a7","date":"2011-07-29T01:48:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate mk*temp dependency on snprintf\n\nthis helps some tiny programs be even more tiny, and barly increases\ncode size even if both are used.\n"},{"hash":"aed707f679cce80afd929f0efaf080f1e8481330","date":"2011-07-29T02:03:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove ugly prng from mk*temp and just re-poll time on retry\n"},{"hash":"acb04806628990ad2430e04261dd20f23babde5e","date":"2011-07-30T02:59:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new attempt at making set*id() safe and robust\n\nchanging credentials in a multi-threaded program is extremely\ndifficult on linux because it requires synchronizing the change\nbetween all threads, which have their own thread-local credentials on\nthe kernel side. this is further complicated by the fact that changing\nthe real uid can fail due to exceeding RLIMIT_NPROC, making it\npossible that the syscall will succeed in some threads but fail in\nothers.\n\nthe old __rsyscall approach being replaced was robust in that it would\nreport failure if any one thread failed, but in this case, the program\nwould be left in an inconsistent state where individual threads might\nhave different uid. (this was not as bad as glibc, which would\nsometimes even fail to report the failure entirely!)\n\nthe new approach being committed refuses to change real user id when\nit cannot temporarily set the rlimit to infinity. this is completely\nPOSIX conformant since POSIX does not require an implementation to\nallow real-user-id changes for non-privileged processes whatsoever.\nstill, setting the real uid can fail due to memory allocation in the\nkernel, but this can only happen if there is not already a cached\nobject for the target user. thus, we forcibly serialize the syscalls\nattempts, and fail the entire operation on the first failure. this\n*should* lead to an all-or-nothing success/failure result, but it's\nstill fragile and highly dependent on kernel developers not breaking\nthings worse than they're already broken.\n\nideally linux will eventually add a CLONE_USERCRED flag that would\ngive POSIX conformant credential changes without any hacks from\nuserspace, and all of this code would become redundant and could be\nremoved ~10 years down the line when everyone has abandoned the old\nbroken kernels. i'm not holding my breath...\n"},{"hash":"afade2356ea148e715307be8f7334b790282341e","date":"2011-07-30T03:10:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add setxid.c for new set*id() framework. missed in last commit.\n"},{"hash":"7dd60b80f965af451f952b9f45bd9b6aec0fae74","date":"2011-07-30T04:24:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug in synccall with no threads: lock was taken but never released\n"},{"hash":"7683fceedebd98dda19b1a379b92406b64ce7f92","date":"2011-07-30T10:11:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate dependence of perror on printf\n"},{"hash":"dba68bf98fc708cea4c478278c889fc7ad802b00","date":"2011-07-30T12:02:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add proper fuxed-based locking for stdio\n\npreviously, stdio used spinlocks, which would be unacceptable if we\never add support for thread priorities, and which yielded\npathologically bad performance if an application attempted to use\nflockfile on a key file as a major/primary locking mechanism.\n\ni had held off on making this change for fear that it would hurt\nperformance in the non-threaded case, but actually support for\nrecursive locking had already inflicted that cost. by having the\ninternal locking functions store a flag indicating whether they need\nto perform unlocking, rather than using the actual recursive lock\ncounter, i was able to combine the conditionals at unlock time,\neliminating any additional cost, and also avoid a nasty corner case\nwhere a huge number of calls to ftrylockfile could cause deadlock\nlater at the point of internal locking.\n\nthis commit also fixes some issues with usage of pthread_self\nconflicting with __attribute__((const)) which resulted in crashes with\nsome compiler versions/optimizations, mainly in flockfile prior to\npthread_create.\n"},{"hash":"544ee752cd38febfa3aa3798b4dfb6fabd13846b","date":"2011-07-30T12:19:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some bugs in setxid and update setrlimit to use __synccall\n\nsetrlimit is supposed to be per-process, not per-thread, but again\nlinux gets it wrong. work around this in userspace. not only is it\nneeded for correctness; setxid also depends on the resource limits for\nall threads being the same to avoid situations where temporarily\nunlimiting the limit succeeds in some threads but fails in others.\n"},{"hash":"ad5881842eaa6a04fcb35b822b0a046a3f7e73a2","date":"2011-07-31T01:09:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up pthread_sigmask/sigprocmask dependency order\n\nit's nicer for the function that doesn't use errno to be independent,\nand have the other one call it. saves some time and avoids clobbering\nerrno.\n"},{"hash":"07827d1a82fb33262f686eda959857f0d28cd8fa","date":"2011-07-31T01:11:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix race condition in sigqueue\n\nthis race is fundamentally due to linux's bogus requirement that\nuserspace, rather than kernelspace, fill in the siginfo structure. an\nintervening signal handler that calls fork could cause both the parent\nand child process to send signals claiming to be from the parent,\nwhich could in turn have harmful effects depending on what the\nrecipient does with the signal. we simply block all signals for the\ninterval between getuid and sigqueue syscalls (much like what raise()\ndoes already) to prevent the race and make the getuid/sigqueue pair\natomic.\n\nthis will be a non-issue if linux is fixed to validate the siginfo\nstructure or fill it in from kernelspace.\n"},{"hash":"acfd06df17fd3940e4602af4b9132f61a6a3eb7f","date":"2011-07-31T04:10:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consistency: use struct __ucontext instead of ucontext_t in prototypes\n\nthis is necessary to avoid build errors if feature test macros are not\nproperly defined when including ucontext.h\n"},{"hash":"e95b0a9d1077b3d20d1b6efebe5135eb99a8b7ef","date":"2011-08-01T04:03:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in dns code with new stdio locking code\n"},{"hash":"f4e8e64b82a85158d9de884e1765474c0c317d19","date":"2011-08-01T04:11:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"port numbers should always be interpreted as decimal\n\nper POSIX and RFC 3493:\n\nIf the specified address family is AF_INET, AF_INET6, or AF_UNSPEC,\nthe service can be specified as a string specifying a decimal port\nnumber.\n\n021 is a valid decimal number, therefore, interpreting it as octal\nseems to be non-conformant.\n"},{"hash":"88798393cab009ce78fe498051072db71ba9d035","date":"2011-08-01T04:31:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong messages in gai_strerror\n\ni had missed the fact that a couple values were unassigned...\n"},{"hash":"88c4e720317845a8e01aee03f142ba82674cd23d","date":"2011-08-02T23:19:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul posix semaphores to fix destructability race\n\nthe race condition these changes address is described in glibc bug\nreport number 12674:\n\nhttp://sourceware.org/bugzilla/show_bug.cgi?id=12674\n\nup until now, musl has shared the bug, and i had not been able to\nfigure out how to eliminate it. in short, the problem is that it's not\nvalid for sem_post to inspect the waiters count after incrementing the\nsemaphore value, because another thread may have already successfully\nreturned from sem_wait, (rightly) deemed itself the only remaining\nuser of the semaphore, and chosen to destroy and free it (or unmap the\nshared memory it's stored in). POSIX is not explicit in blessing this\nusage, but it gives a very explicit analogous example with mutexes\n(which, in musl and glibc, also suffer from the same race condition\nbug) in the rationale for pthread_mutex_destroy.\n\nthe new semaphore implementation augments the waiter count with a\nredundant waiter indication in the semaphore value itself,\nrepresenting the presence of \"last minute\" waiters that may have\narrived after sem_post read the waiter count. this allows sem_post to\nread the waiter count prior to incrementing the semaphore value,\nrather than after incrementing it, so as to avoid accessing the\nsemaphore memory whatsoever after the increment takes place.\n\na similar, but much simpler, fix should be possible for mutexes and\nother locking primitives whose usage rules are stricter than\nsemaphores.\n"},{"hash":"344ea148852ed02f280cb92f8fc1611529d60448","date":"2011-08-02T23:59:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in cancellation due to signal functions overhaul\n\nsigaddset was not accepting SIGCANCEL as a valid signal number.\n"},{"hash":"c68de0be2fb649f91b31080224fb6e48084eaaee","date":"2011-08-03T00:31:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid accessing mutex memory after atomic unlock\n\nthis change is needed to fix a race condition and ensure that it's\npossible to unlock and destroy or unmap the mutex as soon as\npthread_mutex_lock succeeds. POSIX explicitly gives such an example in\nthe rationale and requires an implementation to allow such usage.\n"},{"hash":"ec381af90208a5675183202cf05078eac208edfb","date":"2011-08-03T01:11:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unify and overhaul timed futex waits\n\nnew features:\n\n- FUTEX_WAIT_BITSET op will be used for timed waits if available. this\n  saves a call to clock_gettime.\n\n- error checking for the timespec struct is now inside __timedwait so\n  it doesn't need to be duplicated everywhere. cond_timedwait still\n  needs to duplicate it to avoid unlocking the mutex, though.\n\n- pushing and popping the cancellation handler is delegated to\n  __timedwait, and cancellable/non-cancellable waits are unified.\n"},{"hash":"bdd893377fe65519fae90948cd8f3c635757eaba","date":"2011-08-03T01:15:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sem_timedwait bug introduced in timedwait unification\n\nthis dec used to be performed by the cancellation handler, which was\ncalled when popped.\n"},{"hash":"4717bfec708d264111f70f37850ffc09238c4bd5","date":"2011-08-03T01:18:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correctly handle old kernels without FUTEX_WAIT_BITSET\n\nfutex returns EINVAL, not ENOSYS, when op is not supported.\nunfortunately this looks just like EINVAL from other causes, and we\nend up running the fallback code and getting EINVAL again. fortunately\nthis case should be rare since correct code should not generate EINVAL\nanyway.\n"},{"hash":"4f5ba9211e2b8e176ff9dfee3bdb0453cbc4d59b","date":"2011-08-03T01:22:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stubbed-out reboot call\n"},{"hash":"8aeee8db21858becb45a8e9f6b5bc23109638bcb","date":"2011-08-03T12:36:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"timedwait: play it safe for now\n\nit's unclear whether EINVAL or ENOSYS is used when the operation is\nnot supported, so check for both...\n"},{"hash":"50304f2eefb4c79ceaf4605203f3825a35d831c0","date":"2011-08-03T14:21:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul rwlocks to address several issues\n\nlike mutexes and semaphores, rwlocks suffered from a race condition\nwhere the unlock operation could access the lock memory after another\nthread successfully obtained the lock (and possibly destroyed or\nunmapped the object). this has been fixed in the same way it was fixed\nfor other lock types.\n\nin addition, the previous implementation favored writers over readers.\nin the absence of other considerations, that is the best behavior for\nrwlocks, and posix explicitly allows it. however posix also requires\nread locks to be recursive. if writers are favored, any attempt to\nobtain a read lock while a writer is waiting for the lock will fail,\ncausing \"recursive\" read locks to deadlock. this can be avoided by\nkeeping track of which threads already hold read locks, but doing so\nrequires unbounded memory usage, and there must be a fallback case\nthat favors readers in case memory allocation failed. and all of this\nmust be synchronized. the cost, complexity, and risk of errors in\ngetting it right is too great, so we simply favor readers.\n\ntracking of the owner of write locks has been removed, as it was not\nuseful for anything. it could allow deadlock detection, but it's not\nclear to me that returning EDEADLK (which a buggy program is likely to\nignore) is better than deadlocking; at least the latter behavior\nprevents further data corruption. a correct program cannot invoke this\nsituation anyway.\n\nthe reader count and write lock state, as well as the \"last minute\"\nwaiter flag have all been combined into a single atomic lock. this\nmeans all state transitions for the lock are atomic compare-and-swap\noperations. this makes establishing correctness much easier and may\nimprove performance.\n\nfinally, some code duplication has been cleaned up. more is called\nfor, especially the standard __timedwait idiom repeated in all locks.\n"},{"hash":"fc0ecd35d8e0041c81bbe08c10c7fcb946da85e0","date":"2011-08-03T16:13:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement if_nameindex and if_freenameindex\n"},{"hash":"730bee725a770b543181424b52203dd1634ab5d1","date":"2011-08-03T23:45:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix static linking dependency bloat with cancellation\n\npreviously, pthread_cleanup_push/pop were pulling in all of\npthread_create due to dependency on the __pthread_unwind_next\nfunction. this was not needed, as cancellation cleanup handlers can\nnever be called unless pthread_exit or pthread_cancel is reachable.\n"},{"hash":"56385dd5feb4292183c48f62355e1ce4d796957e","date":"2011-08-03T23:50:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"missed detail in cancellation bloat fix\n"},{"hash":"5f37fc132a8f41994f37b6712feb2d4fd34c2be0","date":"2011-08-03T23:57:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further debloat cancellation handlers\n\ncleanup push and pop are also no-ops if pthread_exit is not reachable.\nthis can make a big difference for library code which needs to protect\nitself against cancellation, but which is unlikely to actually be used\nin programs with threads/cancellation.\n"},{"hash":"338b663ddb64ecf8a62ad0d1020a29587e0ca81b","date":"2011-08-05T10:43:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one bug in siglongjmp that caused unpredictable behavior\n\nif saved, signal mask would not be restored unless some low signals\nwere masked. if not saved, signal mask could be wrongly restored to\nuninitialized values. in any, wrong mask would be restored.\n\ni believe this function was written for a very old version of the\njmp_buf structure which did not contain a final 0 field for\ncompatibility with siglongjmp, and never updated...\n"},{"hash":"98acf04fc00cbded6169056f2cd541d31725c091","date":"2011-08-07T00:09:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use weak aliases rather than function pointers to simplify some code\n"},{"hash":"357876052b125dcd74882f61afec19d8f519074c","date":"2011-08-07T00:20:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify multi-threaded errno, eliminate useless function pointer\n"},{"hash":"8426a99048261b998a27557cf34f81626ffe9f12","date":"2011-08-07T00:45:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure the compiler does not move around thread-register-based reads\n\nif gcc decided to move this across a conditional that checks validity\nof the thread register, an invalid thread-register-based read could be\nperformed and raise sigsegv.\n"},{"hash":"188ebf51b4ef58aa0ce0a3a09ed1756d6db2e2dd","date":"2011-08-07T04:05:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"close should not be cancellable after \"failing\" with EINTR\n\nnormally we allow cancellation to be acted upon when a syscall fails\nwith EINTR, since there is no useful status to report to the caller in\nthis case, and the signal that caused the interruption was almost\nsurely the cancellation request, anyway.\n\nhowever, unlike all other syscalls, close has actually performed its\nresource-deallocation function whenever it returns, even when it\nreturned an error. if we allow cancellation at this point, the caller\nhas no way of informing the program that the file descriptor was\nclosed, and the program may later try to close the file descriptor\nagain, possibly closing a different, newly-opened file.\n\nthe workaround looks ugly (special-casing one syscall), but it's\nactually the case that close is the one and only syscall (at least\namong cancellation points) with this ugly property.\n"},{"hash":"b2b95a58b4326c8a8aa87fdf6e8b0f6421dbaf99","date":"2011-08-07T08:50:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fast path for normal mutexes back to pthread_mutex_lock\n"},{"hash":"b3c08a16c0a085e8de01cdc9de106aaa332d27d5","date":"2011-08-07T15:14:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify unified timed wait code, drop support for newer method\n\nthe new absolute-time-based wait kernelside was hard to get right and\nbasically just code duplication. it could only improve \"performance\"\nwhen waiting, and even then, the improvement was just slight drop in\ncpu usage during a wait.\n\nactually, with vdso clock_gettime, the \"old\" way will be even faster\nthan the \"new\" way if the time has already expired, since it will not\ninvoke any syscalls. it can determine entirely in userspace that it\nneeds to return ETIMEDOUT.\n"},{"hash":"cdfb725ca3e20e14c64ca8695496e430b89b3b2c","date":"2011-08-07T19:48:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use weak aliase rather than weak reference for vdso clock_gettime\n\nthis works around pcc's lack of working support for weak references,\nand in principle is nice because it gets us back to the stage where\nthe only weak symbol feature we use is weak aliases, nothing else.\n\nhaving fewer dependencies on fancy linker features is a good thing.\n"},{"hash":"140778582487fb082716eec74324d7b16beb2daf","date":"2011-08-07T22:31:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"condition variable signal/bcast need not wake unless there are waiters\n"},{"hash":"c5168071738467fb67e932976e56f364291cca60","date":"2011-08-11T19:54:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block signals in timer threads\n\nif a timer thread leaves signals unblocked, any future attempt by the\nmain thread to prevent the process from being terminated by blocking\nsignals will fail, since the signal can still be delivered to the\ntimer thread.\n"},{"hash":"8b625e45ff27ae6604ced1039d6c28293b60380a","date":"2011-08-12T02:34:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"normal exit from timer thread should run dtors, restore cancel state\n"},{"hash":"b1a7102d832220066e7352f40e5744da932f5a28","date":"2011-08-12T05:11:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more efficient signal blocking for timer threads\n\ndue to the barrier, it's safe just to block signals in the new thread,\nrather than blocking and unblocking in the parent thread.\n"},{"hash":"407d933052c310ebc5541dae2ecd8c4bd8f55fb9","date":"2011-08-12T14:32:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"pthread and synccall cleanup, new __synccall_wait op\n\nfix up clone signature to match the actual behavior. the new\n__syncall_wait function allows a __synccall callback to wait for other\nthreads to continue without returning, so that it can resume action\nafter the caller finishes. this interface could be made significantly\nmore general/powerful with minimal effort, but i'll wait to do that\nuntil it's actually useful for something.\n"},{"hash":"4054a135fc0e6c1b7c33f688dcddecee0b2b22d2","date":"2011-08-12T14:37:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement forkall\n\nthis is a \"nonstandard\" function that was \"rejected\" by POSIX, but\nnonetheless had its behavior documented in the POSIX rationale for\nfork. it's present on solaris and possibly some other systems, and\nduplicates the whole calling process, not just a single thread. glibc\ndoes not have this function. it should not be used in programs\nintending to be portable, but may be useful for testing,\ncheckpointing, etc. and it's an interesting (and quite small) example\nof the usefulness of the __synccall framework originally written to\nwork around deficiencies in linux's setuid syscall.\n"},{"hash":"ad5759821ced59bbb70eb36d396df2a787141089","date":"2011-08-13T12:40:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix clock() function\n\nit previously was returning the pseudo-monotonic-realtime clock\nreturned by times() rather than process cputime. it also violated C\nnamespace by pulling in times().\n\nwe now use clock_gettime() if available because times() has\nridiculously bad resolution. still provide a fallback for ancient\nkernels without clock_gettime.\n"},{"hash":"ef9dd035344de750ed9420bd3e4bc5c2b7475dba","date":"2011-08-13T12:42:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing include in last commit\n"},{"hash":"9205e486091c3901d0e5aa9a0384dc07dae6114d","date":"2011-08-14T19:17:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"macro for pthread_equal\n\nno sense bloating apps with a function call for an equality comparison...\n"},{"hash":"6cb277d75e07557dd8442202722d280c1bf93c08","date":"2011-08-14T19:19:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"typo in macro definitions for x86_64\n"},{"hash":"ce7c6341d38ecd3af4d1e01032e9ea8b4078aa97","date":"2011-08-15T05:59:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify and improve double-free check\n\na valid mmapped block will have an even (actually aligned) \"extra\"\nfield, whereas a freed chunk on the heap will always have an in-use\nneighbor.\n\nthis fixes a potential bug if mmap ever allocated memory below the\nmain program/brk (in which case it would be wrongly-detected as a\ndouble-free by the old code) and allows the double-free check to work\nfor donated memory outside of the brk area (or, in the future,\nsecondary heap zones if support for their creation is added).\n"},{"hash":"2719cc86285d85df42f13ba0ae5b07b262c39686","date":"2011-08-16T04:24:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"LD_PRELOAD support\n"},{"hash":"623753ad64a3625b010c10c00c45262d2eec2495","date":"2011-08-16T04:42:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"RTLD_NEXT support\n\nthe asm wrapper is needed to get the return address without\ncompiler-specific extensions.\n"},{"hash":"a045883365ccb404a63b7c56a42daf0851e579fa","date":"2011-08-16T11:46:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"honor AT_SECURE aux vector flag\n"},{"hash":"cf8506ad94caa91fc1cd44b9134494dd6ecd6caf","date":"2011-08-16T12:50:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ldso: move the suid/secure check code closer to env/auxv processing\n\nthis does not change behavior, but the idea is to avoid letting other\ncode build up between these two points, whereby the environment\nvariables might get used before security it checked.\n"},{"hash":"47a8816ded18284d924387c918186935d2495c01","date":"2011-08-16T14:38:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"partially working strptime\n\nit's missing at least:\n- derived fields\n- week numbers\n- short year (without century) support\n- locale modifiers\n"},{"hash":"3e082df3cc4c287f659e9067b2b23c7db0855695","date":"2011-08-17T03:18:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bogus pathconf result for file size bits\n"},{"hash":"c0f344160d22d889460573d003cf349626a38184","date":"2011-08-17T03:23:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in pathconf, -1, not 0, means unsupported.. syncio presumably works, too.\n"},{"hash":"df0b5a49406763aa4719dfad561a5de8924ecd59","date":"2011-08-23T13:37:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"security hardening: ensure suid programs have valid stdin/out/err\n\nthis behavior (opening fds 0-2 for a suid program) is explicitly\nallowed (but not required) by POSIX to protect badly-written suid\nprograms from clobbering files they later open.\n\nthis commit does add some cost in startup code, but the availability\nof auxv and the security flag will be useful elsewhere in the future.\nin particular auxv is needed for static-linked vdso support, which is\nstill waiting to be committed (sorry nik!)\n"},{"hash":"1c8bead345eca58ddc5177a121142b527937adee","date":"2011-08-23T13:43:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use new a_crash() asm to optimize double-free handler.\n\ngcc generates extremely bad code (7 byte immediate mov) for the old\nnull pointer write approach. it should be generating something like\n\"xor %eax,%eax ; mov %al,(%eax)\". in any case, using a dedicated\ncrashing opcode accomplishes the same thing in one byte.\n"},{"hash":"291666a14a41fe46c1e302585de97b399ab631e7","date":"2011-08-23T16:55:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"bring back ___environ symbol (3 underscores)\n\nits existence doesn't hurt anything, and dynamic-linked binaries using\nprevious versions of musl were wrongly binding to it instead of\n__environ.\n"},{"hash":"1f5ff26cd788d29c77e322e7584da46466723572","date":"2011-08-27T23:42:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken FD_* macros on 64-bit targets\n\n1 is too small if int is 32-bit but unsigned long is 64-bit. be\nexplicit and use 1UL.\n"},{"hash":"adb7093caae451348371d2299f6113b788439602","date":"2011-09-02T18:25:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing prototypes/wrong signature for psiginfo, psignal\n"},{"hash":"b158b32a44d56ef20407d4285b58180447ffff1f","date":"2011-09-03T04:45:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement open_memstream\n\nthis is the first attempt, and may have bugs. only minimal testing has\nbeen performed.\n"},{"hash":"ad70ba774fe4fda8379b59b2b353cbd451d693cc","date":"2011-09-03T20:10:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix RTLD_NEXT on x86_64\n\nthe return address was being truncated to 32 bits, preventing the\ndlsym code from determining which module contains the calling code.\n"},{"hash":"1461e027579c16a6bd95a264d9a1db75a4c3fa74","date":"2011-09-03T23:49:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement open_wmemstream\n\nnot heavily tested, but it seems to be correct, including the odd\nbehavior that seeking is in terms of wide character count. this\nprecludes any simple buffering, so we just make the stream unbuffered.\n"},{"hash":"1e6937643577e1fb5ea8696c2f583e20bcd29279","date":"2011-09-04T00:19:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some length calculations in memory streams\n"},{"hash":"d4fa6f0e08ff5a292d2aeeeeda80670a1a082cae","date":"2011-09-04T03:26:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement fmemopen\n\ntesting so far has been minimal. may need further work.\n"},{"hash":"32d67e938e8da0f37c59247acee8b10eaf9a113c","date":"2011-09-04T04:06:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix twos complement overflow bug in mem streams boundary check\n\nthe expression -off is not safe in case off is the most-negative\nvalue. instead apply - to base which is known to be non-negative and\nbounded within sanity.\n"},{"hash":"c88f36f55623124d09f48631974ca38aaec00057","date":"2011-09-04T04:08:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize seek function for memory streams\n"},{"hash":"7ee3dcb3c603b20fcd4547ffb00e11701c6d1cf4","date":"2011-09-04T14:29:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"memstreams: fix incorrect handling of file pos > current size\n\nthe addition is safe and cannot overflow because both operands are\npositive when considered as signed quantities.\n"},{"hash":"f81279ff583ef81bc88a46dd1d0140fb6e0ed222","date":"2011-09-04T20:04:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fmemopen fixes\n\ndisallow seek past end of buffer (per posix)\nfix position accounting to include data buffered for read\ndon't set eof flag when no data was requested\n"},{"hash":"22e4542348352235614b57948025bdd0cc30dc32","date":"2011-09-04T20:06:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fmemopen: fix eof handling, hopefully right this time\n"},{"hash":"a7778dae226fbae335383bc92b6cdfccc5ea9f2e","date":"2011-09-05T01:37:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle pending cancellation when enabling async cancellation\n\nthis is not strictly required by the standard, but without it, there\nis a race condition where cancellation arriving just before async\ncancellation is enabled might not be acted upon. it is impossible for\na conforming application to work around this race condition since\ncalling pthread_testcancel after setting async cancellation mode is\nnot allowed (pthread_testcancel is not specified to be\nasync-cancel-safe). thus the implementation should be responsible for\neliminating the race, from a quality-of-implementation standpoint.\n"},{"hash":"e72ee5786b1f328da131b87388333c2e3a09b7b3","date":"2011-09-05T01:40:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some fmemopen behaviors\n\nread should not be allowed past \"current size\".\nappend mode should write at \"current size\", not buffer size.\nnull termination should not be written except when \"current size\" grows.\n"},{"hash":"d2e061a2bd3f7674cfef2e2217e0695419041b5e","date":"2011-09-05T01:53:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more fmemopen null termination fixes\n\nnull termination is only added when current size grows.\nin update modes, null termination is not added if it does not fit\n(i.e. it is not allowed to clobber data).\n\nthese rules make very little sense, but that's how it goes..\n"},{"hash":"5989dde3459b2ccd304f89e3e875136e5608b8ff","date":"2011-09-05T19:39:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"strptime: fix use of uninitialized dest field in converting integer\n"},{"hash":"96cea94ad258be262ecf15b33d13cf775e59720d","date":"2011-09-06T02:23:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect overflow errors on strtoul, etc.\n"},{"hash":"b4de6f93aed733b8fc8d103e5ced69ebe7d659e6","date":"2011-09-09T05:07:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement POSIX asynchronous io\n\nsome features are not yet supported, and only minimal testing has been\nperformed. should be considered experimental at this point.\n"},{"hash":"eb351a9e633e5893f0c3bb48808c3ed0280585b5","date":"2011-09-10T03:10:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_join wait call: thread termination tid futex is not private\n\nthis seeme to be the bug that prevented enabling of private futex\nsupport. i'm going to hold off on switching to private futexes until\nafter the next release, and until i get a chance to audit all\nwait/wake calls to make sure they're using the correct private\nargument, but with this change it should be safe to enable private\nfutex support.\n"},{"hash":"8fe5fa56eeade4fc19c5401861c179c2fdfeaf3d","date":"2011-09-11T16:35:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix serious bug in pthread_join\n\non spurious wakeups/returns from __timedwait, pthread_join would\n\"succeed\" and unmap the thread's stack while it was still running. at\nbest this would lead to SIGSEGV when the thread resumed execution, but\nin the worst case, the thread would later resume executing on top of\nanother new thread's stack mapped at the same address.\n\nspent about 4 hours tracking this bug down, chasing rare\ndifficult-to-reproduce stack corruption in a stress test program.\nstill no idea *what* caused the spurious wakeups; i suspect it's a\nkernel bug.\n"},{"hash":"d4045a1683d402dd4e53b3ae388d8794d7238c7e","date":"2011-09-12T02:43:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"declare alloca in stdlib.h when _GNU_SOURCE is defined\n"},{"hash":"a6540174be064806b6eb4dc6abff48a9b4facfdd","date":"2011-09-12T02:45:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add dummied strverscmp (obnoxious GNU function)\n\nprograms that use this tend to horribly botch international text\nsupport, so it's questionable whether we want to support it even in\nthe long term... for now, it's just a dummy that calls strcmp.\n"},{"hash":"ce17ea6f2cae0c0c1c14dac5c7c7330f2503d069","date":"2011-09-12T02:50:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prototypes for GNU *_unlocked stdio functions\n\nactually these are just weak aliases for the normal locking versions\nright now, and they will probably stay that way since making them\nlock-free without slowing down the normal versions would require\nsignificant code duplication for no benefit.\n"},{"hash":"fb80e047cc7d0b900445ca6ce38f10199dafd98b","date":"2011-09-12T04:00:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement gnu sigisemptyset\n"},{"hash":"28af39fe427ffec8b836f4f30450ffc30b03e5c4","date":"2011-09-13T13:53:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some stray trailing space characters\n"},{"hash":"801b311a5b6f00a9490ae9933439d1e62451fbd3","date":"2011-09-13T17:41:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"0.8.0 release\n"},{"hash":"0f1ef81462f3533c52a0b030b4bfe87f7f200dcc","date":"2011-09-13T18:45:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing posix_spawnattr_init/destroy functions\n"},{"hash":"fd408d27a079ad4ef1b283a0c77d781789c28763","date":"2011-09-13T19:39:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix prototypes for aio_read and aio_write\n"},{"hash":"5e9deea0039204f3b29edb1ffe0e30325d456f84","date":"2011-09-13T20:12:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix cruft left in release notes\n"},{"hash":"13cd969552409e05c941829f2aabb15e2f4d9a1f","date":"2011-09-14T01:09:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix various errors in function signatures/prototypes found by nsz\n"},{"hash":"4da289e1b3a0d09048d9be1dfc3a7280531a1e48","date":"2011-09-14T01:21:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix return types for aio_read and aio_write again\n\nprevious fix was backwards and propagated the wrong type rather than\nthe right one...\n"},{"hash":"7c131a310875fe4255b049b7e7394074d4104311","date":"2011-09-14T13:36:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inconsistent signature for aio_error\n"},{"hash":"a94925740447b509c3639c9f8c6ca2d75bbb07ab","date":"2011-09-14T13:37:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove incorrectly-made-visible internal dst offset variable\n"},{"hash":"d1d141c5f128d2ea6efa0e5aad25c3f8af41cadc","date":"2011-09-14T23:11:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"0.8.1 release notes\n"},{"hash":"71f7a3c2ce7377a6c77f46524002505b9454861b","date":"2011-09-15T17:03:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement ptrace syscall wrapper (untested)\n"},{"hash":"d431d4546e5f028646592533d2fa2a53284bc2e4","date":"2011-09-16T14:13:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ptrace (maybe)\n"},{"hash":"144c951b0df6be51a67c9f4d5d3626c22a947f16","date":"2011-09-16T16:08:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix idiotic const-correctness error in lio_listio\n\ni blame this one on posix for using hideous const-qualified double\npointers which are unusable without hideous casts.\n"},{"hash":"5b91c2233583ed2a9512269223221186d9a79fc6","date":"2011-09-16T16:44:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix generic sigsetjmp (unused anyway) pointer signedness error\n"},{"hash":"813d37839b97960d38f10ea93d9c4a391c1c91a5","date":"2011-09-16T18:29:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use a_swap rather than old name a_xchg\n"},{"hash":"2b71a4d1dfb0487cc2558df646a262ffb8261585","date":"2011-09-16T18:33:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix more instances of old a_xchg (use new a_swap name)\n"},{"hash":"471c6067d9a0665809a125260a7dede8ee357f98","date":"2011-09-16T18:39:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix assumptions that char is signed\n"},{"hash":"d5fd1fa48564a5528f53e5b1cab5063a0545d7f7","date":"2011-09-17T15:37:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dummy implementation of set_thread_area\n\neventually we may have a working \"generic\" implementation for archs\nthat don't need anything special. in any case, the goal of having\nstubs like this is to allow early testing of new ports before all the\ndetails needed for threads have been filled in. more functions like\nthis will follow.\n"},{"hash":"455fc98389fac09d8cf7ec4cde310a5b7ca47485","date":"2011-09-17T15:41:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.2\n"},{"hash":"3f72cdac73030761120cf32aeef44e7d03e2f1fa","date":"2011-09-18T14:14:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul clone syscall wrapping\n\nseveral things are changed. first, i have removed the old __uniclone\nfunction signature and replaced it with the \"standard\" linux\n__clone/clone signature. this was necessary to expose clone to\napplications anyway, and it makes it easier to port __clone to new\narchs, since it's now testable independently of pthread_create.\n\nsecondly, i have removed all references to the ugly ldt descriptor\nstructure (i386 only) from the c code and pthread structure. in places\nwhere it is needed, it is now created on the stack just when it's\nneeded, in assembly code. thus, the i386 __clone function takes the\ndesired thread pointer as its argument, rather than an ldt descriptor\npointer, just like on all other sane archs. this should not affect\napplications since there is really no way an application can use clone\nwith threads/tls in a way that doesn't horribly conflict with and\nclobber the underlying implementation's use. applications are expected\nto use clone only for creating actual processes, possibly with new\nnamespace features and whatnot.\n"},{"hash":"c8175666f22952d1b0ea280b217d8896f0c24bec","date":"2011-09-18T19:31:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move invariant netinet/in.h stuff out of bits/in.h\n"},{"hash":"ca8373dfcf03c808a32b3846f95d802fefc4c2e8","date":"2011-09-18T19:39:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more bits junk (tcp.h)\n"},{"hash":"b0c088ee550634e07a6289a8ac98cb8009f81c66","date":"2011-09-18T20:34:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup more bits cruft (sysmacros and socket)\n"},{"hash":"4f4bf0ad2e8c729de92db06318b9614ab2cdcc5c","date":"2011-09-18T20:42:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable dynamic linking/loading code in static libc builds, for now\n\nit does not work, but some configure scripts will falsely detect\nsupport then generate programs that crash when they call dlopen.\n"},{"hash":"d960d4f2cbf18ff3476c7ac03698ec253885dd8e","date":"2011-09-18T20:44:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial commit of the arm port\n\nthis port assumes eabi calling conventions, eabi linux syscall\nconvention, and presence of the kernel helpers at 0xffff0f?0 needed\nfor threads support. otherwise it makes very few assumptions, and the\ncode should work even on armv4 without thumb support, as well as on\nsystems with thumb interworking. the bits headers declare this a\nlittle endian system, but as far as i can tell the code should work\nequally well on big endian.\n\nsome small details are probably broken; so far, testing has been\nlimited to qemu/aboriginal linux.\n"},{"hash":"53431b091b22a663a428c67f8c617740f5882706","date":"2011-09-19T15:56:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken multi-inclusion guard in sys/reg.h\n"},{"hash":"089aeb08a083d798b59fc84cbff9383f304b1b8f","date":"2011-09-19T20:59:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect long double parameters on arm (and other future ports)\n\nthis was the cause of crashes in printf when attempting to print\nfloating point values.\n"},{"hash":"224c7a376acbc2feda12169b806e9845c828595e","date":"2011-09-19T21:39:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the type of wchar_t on arm; support wchar_t varying with arch\n\nreally wchar_t should never vary, but the ARM EABI defines it as an\nunsigned 32-bit int instead of a signed one, and gcc follows this\nnonsense. thus, to give a conformant environment, we have to follow\n(otherwise L\"\"[0] and L'\\0' would be 0U rather than 0, but the\napplication would be unaware due to a mismatched definition for\nWCHAR_MIN and WCHAR_MAX, and Bad Things could happen with respect to\nsigned/unsigned comparisons, promotions, etc.).\n\nfortunately no rules are imposed by the C standard on the relationship\nbetween wchar_t and wint_t, and WEOF has type wint_t, so we can still\nmake wint_t always-signed and use -1 for WEOF.\n"},{"hash":"f780ac5baf4f204b3980cd07655e1462ca8455c3","date":"2011-09-20T00:02:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup redundancy in bits/signal.h versions\n"},{"hash":"8c07f6eac843c2acb217083d48c4cef95f2b891c","date":"2011-09-20T02:27:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some more siginfo aliases broken software expects...\n"},{"hash":"114c80f1416617399c85c2df09dd307532399903","date":"2011-09-20T03:35:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the definition of struct statvfs to match lsb abi\n\nat the same time, make struct statfs match the traditional definition\nand make it more useful, especially the fsid_t stuff.\n"},{"hash":"03a8362930c3c4fe49ee6b9cb2ba9f28153b15d3","date":"2011-09-20T14:58:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken siginfo_t with _GNU_SOURCE defined\n\nthis bug was introduced in a recent patch. the problem we're working\naround is that broken GNU software wants to use \"struct siginfo\"\nrather than \"siginfo_t\", but \"siginfo\" is not in the reserved\nnamespace and thus not legal for the standard header to use.\n"},{"hash":"32b82cf5cdc282839cc02c57a50c991e376f0348","date":"2011-09-20T15:16:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the fsid_t structure to match name of __val\n\nthis is a case of poorly written man pages not matching the actual\nimplementation, and why i hate implementing nonstandard interfaces\nwith no actual documentation of how they're intended to work.\n"},{"hash":"246e15c0dc4f2e0120f7e54445d621bd3b1afbd8","date":"2011-09-20T15:18:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix statvfs.c to match new fsid_t definition\n"},{"hash":"2318207adcad74283881ffcefbad92797a2495aa","date":"2011-09-20T16:14:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect include guard in mqueue.h\n"},{"hash":"d23a543d8acfedb7c0284888d72c4aa347b8c46e","date":"2011-09-20T18:51:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make stdbool.h conform to c99\n"},{"hash":"fd9e01e92a5d665e5b6c3221cd67970038cf7a6c","date":"2011-09-21T00:02:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some header typos\n"},{"hash":"7dd86ec16852cf189e88fb2829caee4e114087e7","date":"2011-09-21T23:39:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new installation guide with alternate and primary libc setups\n"},{"hash":"d30c331d1f3262223a99408ff2d49641a46ce409","date":"2011-09-21T23:40:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new gcc wrapper now supports pre-4.4 gcc versions and is more robust\n"},{"hash":"0b6eb2dfb2e84a8a51906e7634f3d5edc230b058","date":"2011-09-22T00:11:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update syscalls with off_t arguments to handle argument alignment, if needed\n\nthe arm syscall abi requires 64-bit arguments to be aligned on an even\nregister boundary. these new macros facilitate meeting the abi\nrequirement without imposing significant ugliness on the code.\n"},{"hash":"4a08c85111835c00a4c007aa3a198d9474932a97","date":"2011-09-22T00:24:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.3\n"},{"hash":"319df20bc9c20231d8efd810780c012cbdcfb109","date":"2011-09-22T01:01:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"gnu search.h has struct qelem...\n"},{"hash":"ca52e347673126956a4f21247d8a551ea668f61f","date":"2011-09-22T01:30:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid setting FILE lock count when not using flockfile\n\nfor now this is just a tiny optimization, but later if we support\ncancellation from __stdio_read and __stdio_write, it will be necessary\nfor the recusrive lock count to be zero in order for these functions\nto know they are responsible for unlocking the FILE on cancellation.\n"},{"hash":"81a5577a860b1d320239a84c84266e4d7045f450","date":"2011-09-22T02:25:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing SIG_DFL, SIG_IGN, SIG_ERR without posix in signal.h\n"},{"hash":"bf027ca5e0c7bc0b90e84dcbb1d7cbea6ed1e3ef","date":"2011-09-22T03:17:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use poll rather than select in dns lookups (also clock_gettime)\n\nif the file descriptor resource limit has been increased past\nFD_SETSIZE, this is actually a security issue; we could write past the\nend of the fd_set object. using poll makes it a non-issue, and\nsimplifies the code at the same time.\n\nalso, use clock_gettime instead of gettimeofday, for reduced bloat\nand better entropy.\n"},{"hash":"12d547b262c2c8c4e23d0a62eb59581929c2da89","date":"2011-09-22T03:27:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dns lookups (and thus getaddrinfo) cancellable\n"},{"hash":"0d4d94efd5dfe9348582c92a2de6923bb66492ac","date":"2011-09-22T03:57:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect against/handle cancellation reading shadow passwords\n"},{"hash":"ee6fc9a0931e881fb00fc9ae307f921c5527e55e","date":"2011-09-22T19:25:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"wrong __WORDSIZE in x86_64 header\n"},{"hash":"c651c473e5b5ba005e476d8ead7954c881950f92","date":"2011-09-22T19:35:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup/debloat i386 user.h\n"},{"hash":"2eff02e4a032323a45541c79967638d8c77d79e4","date":"2011-09-22T19:36:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix x86_64 user.h (previously was just a copy of i386)\n"},{"hash":"4b153ac42428447a148e6da543ebe6df017078db","date":"2011-09-23T01:08:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix deadlock in condition wait whenever there are multiple waiters\n\nit's amazing none of the conformance tests i've run even bothered to\ncheck whether something so basic works...\n"},{"hash":"d5bde7babb88f0279f3ad592d585f3f954090696","date":"2011-09-23T02:56:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"\"optimize\" arm __pthread_self\n\nactually this is just to avoid gcc being stupid and refusing to inline\nthe function version, even when the size cost is essentially identical\nwhether it's inlined or not.\n"},{"hash":"1587224ed60aa38b7a26c5eaf692f1f1ab525afd","date":"2011-09-23T18:24:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sys/user.h may need stdint.h\n"},{"hash":"c41a76f58ce0238172effe982f2cee7bbd2a60a4","date":"2011-09-24T02:24:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"FD_ISSET must return an int. this is the easiest way.\n\ncasting to int would not be correct because high bits could be lost.\nmapping the high bits down onto low bits would be costlier in the\ncommon case where the result is just used in a conditional. changing\nthe type of the bit array elements to int would permute the order of\nthe bit array on 64-bit big endian systems, so that's not an option\neither.\n"},{"hash":"97c5b5a87c3d9df54278e1073d6177f77536bd32","date":"2011-09-24T02:58:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ABA race in cond vars, improve them overall\n\npreviously, a waiter could miss the 1->0 transition of block if\nanother thread set block to 1 again after the signal function set\nblock to 0. we now use the caller's thread id as a unique token to\nstore in block, which no other thread will ever write there. this\nensures that if block still contains the tid, no signal has occurred.\nspurious wakeups will of course occur whenever there is a spurious\nreturn from the futex wait and another thread has begun waiting on the\ncond var. this should be a rare occurrence except perhaps in the\npresence of interrupting signal handlers.\n\nsignal/bcast operations have been improved by noting that they need\nnot avoid inspecting the cond var's memory after changing the futex\nvalue. because the standard allows spurious wakeups, there is no way\nfor an application to distinguish between a spurious wakeup just\nbefore another thread called signal/bcast, and the deliberate wakeup\nresulting from the signal/bcast call. thus the woken thread must\nassume that the signalling thread may still be waiting to act on the\ncond var, and therefore it cannot destroy/unmap the cond var.\n"},{"hash":"cba4e1c0a3423ed07ef5c79f6e29360996f32fd7","date":"2011-09-25T06:38:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new futex-requeue-based pthread_cond_broadcast implementation\n\nthis avoids the \"stampede effect\" where pthread_cond_broadcast would\nresult in all waiters waking up simultaneously, only to immediately\ncontend for the mutex and go back to sleep.\n"},{"hash":"09ec0f3aab4df2993f4a2a992529655f6c4f7a70","date":"2011-09-25T06:56:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix logic for when wakeup is not desired on cond bcast\n\nsomehow i forgot that normal-type mutexes don't store the owner tid.\n"},{"hash":"cf940165d4caf132405a3fe3df58b57eb735ac04","date":"2011-09-26T01:10:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize cond waiter move using atomic swap instead of cas loop\n"},{"hash":"c11d1e696723f41d7873332e51fb6858b417fa5f","date":"2011-09-26T01:14:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert previous change in cond var waiter move\n\nusing swap has a race condition: the waiters must be added to the\nmutex waiter count *before* they are taken off the cond var waiter\ncount, or wake events can be lost.\n"},{"hash":"729d6368bdf9faa33299cdfa68efc7422af33bd7","date":"2011-09-26T04:25:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"redo cond vars again, use sequence numbers\n\ntesting revealed that the old implementation, while correct, was\ngiving way too many spurious wakeups due to races changing the value\nof the condition futex. in a test program with 5 threads receiving\nbroadcast signals, the number of returns from pthread_cond_wait was\nroughly 3 times what it should have been (2 spurious wakeups for every\nlegitimate wakeup). moreover, the magnitude of this effect seems to\ngrow with the number of threads.\n\nthe old implementation may also have had some nasty race conditions\nwith reuse of the cond var with a new mutex.\n\nthe new implementation is based on incrementing a sequence number with\neach signal event. this sequence number has nothing to do with the\nnumber of threads intended to be woken; it's only used to provide a\nvalue for the futex wait to avoid deadlock. in theory there is a\ndanger of race conditions due to the value wrapping around after 2^32\nsignals. it would be nice to eliminate that, if there's a way.\n\ntesting showed no spurious wakeups (though they are of course\npossible) with the new implementation, as well as slightly improved\nperformance.\n"},{"hash":"fd142e5ec44aaafffbb8bb4ea41c4288d3fa937a","date":"2011-09-26T04:59:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup various minor issues reported by nsz\n\nthe changes to syscall_ret are mostly no-ops in the generated code,\njust cleanup of type issues and removal of some implementation-defined\nbehavior. the one exception is the change in the comparison value,\nwhich is fixed so that 0xf...f000 (which in principle could be a valid\nreturn value for mmap, although probably never in reality) is not\ntreated as an error return.\n"},{"hash":"1fa05210100caefc8546746e08358d81739f4b41","date":"2011-09-26T16:54:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix lost signals in cond vars\n\ndue to moving waiters from the cond var to the mutex in bcast, these\nwaiters upon wakeup would steal slots in the count from newer waiters\nthat had not yet been signaled, preventing the signal function from\ntaking any action.\n\nto solve the problem, we simply use two separate waiter counts, and so\nthat the original \"total\" waiters count is undisturbed by broadcast\nand still available for signal.\n"},{"hash":"3bec53e0d3bb5e74d2e2dca34f50aadfaf832607","date":"2011-09-26T17:14:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"another cond var fix: requeue count race condition\n\nlock out new waiters during the broadcast. otherwise the wait count\nadded to the mutex might be lower than the actual number of waiters\nmoved, and wakeups may be lost.\n\nthis issue could also be solved by temporarily setting the mutex\nwaiter count higher than any possible real count, then relying on the\nkernel to tell us how many waiters were requeued, and updating the\ncounts afterwards. however the logic is more complex, and i don't\nreally trust the kernel. the solution here is also nice in that it\nreplaces some atomic cas loops with simple non-atomic ops under lock.\n"},{"hash":"7e14ed1360c65b78c3ad1fc4fafea13e30067478","date":"2011-09-26T22:56:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ctype macros to cast argument to (unsigned) first\n\nissue reported by nsz, but it's actually not just pedantic. the\nfunctions can take input of any arithmetic type, including floating\npoint, and the behavior needs to be as if the conversion implicit in\nthe function call took place.\n"},{"hash":"3f39c9b3130cd6c142d358159879b799370a6663","date":"2011-09-27T16:18:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect allocation failure check in pthread_create\n\nmmap returns MAP_FAILED not 0 because some idiot thought the ability\nto mmap the null pointer page would be a good idea...\n"},{"hash":"60164570111873175111cf8a5b973375e492eee9","date":"2011-09-27T17:50:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"process-shared barrier support, based on discussion with bdonlan\n\nthis implementation is rather heavy-weight, but it's the first\nsolution i've found that's actually correct. all waiters actually wait\ntwice at the barrier so that they can synchronize exit, and they hold\na \"vm lock\" that prevents changes to virtual memory mappings (and\nblocks pthread_barrier_destroy) until all waiters are finished\ninspecting the barrier.\n\nthus, it is safe for any thread to destroy and/or unmap the barrier's\nmemory as soon as pthread_barrier_wait returns, without further\nsynchronization.\n"},{"hash":"aef84ca7ec87ed21c2a2d5eecf3b4bbd6cbe3db9","date":"2011-09-27T20:45:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix clobbering of errno in get(pw|gr)([ug]id|nam) by fclose\n"},{"hash":"f135ef3f343b824c5039e3dbbc31b5545fbe7a12","date":"2011-09-27T20:47:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing va_end in prctl syscall wrapper\n"},{"hash":"7e76095180a5d64821e21900b85dbd8829e2d90d","date":"2011-09-27T21:00:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve error handling in mntent stuff...\n\nnot sure if this is correct/ideal. it needs further attention.\n"},{"hash":"5e9e78ecd7ec5178483af8f1130cb6a958982b73","date":"2011-09-27T21:02:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"convert the barrier pshared option back to 0/1 values when getting it\n"},{"hash":"d8dc1df1c2aa461d094d3cfe97e2cc68dd331e6e","date":"2011-09-27T21:03:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pshared barrier wrong return value.\n\ni set the return value but then never used it... oops!\n"},{"hash":"bfae1a8b713305ec3e65c7d6abd7ad64d5df6363","date":"2011-09-27T22:17:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"check mutex owner in pthread_cond_wait\n\nwhen used with error-checking mutexes, pthread_cond_wait is required\nto fail with EPERM if the mutex is not locked by the caller.\npreviously we relied on pthread_mutex_unlock to generate the error,\nbut this is not valid, since in the case of such invalid usage the\ninternal state of the cond variable has already been potentially\ncorrupted (due to access outside the control of the mutex). thus, we\nhave to check first.\n"},{"hash":"bc244533ccd72a0ad075571e338a6af35cc162f5","date":"2011-09-27T22:22:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve/debloat mutex unlock error checking in pthread_cond_wait\n\nwe're not required to check this except for error-checking mutexes,\nbut it doesn't hurt. the new test is actually simpler/lighter, and it\nalso eliminates the need to later check that pthread_mutex_unlock\nsucceeds.\n"},{"hash":"823813e3f4d7a8d3848e092bcdf975c8b94b6194","date":"2011-09-27T22:39:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in pthread_testcancel if pthread_self has not been called\n"},{"hash":"3ac092bd7d700c6316c64660e2a722a2f85652a5","date":"2011-09-27T22:56:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in pthread_cond_wait mutex-locked check\n\nit was assuming the result of the condition it was supposed to be\nchecking for, i.e. that the thread ptr had already been initialized by\npthread_mutex_lock. use the slower call to be safe.\n"},{"hash":"067bdc2c180885af831f55f971f5eb17d2c9dc27","date":"2011-09-28T03:08:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correctly handle the degenerate barrier in the pshared case\n"},{"hash":"f0a8d60d32b7d6a093596abdbb9711e64eff2594","date":"2011-09-28T15:36:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"stupid typo (caused by rather ugly spelling in POSIX..) in aio\n"},{"hash":"8f4a115e7d38c31ad8d8c7233eaff2db270aebd8","date":"2011-09-28T16:47:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"barrier destroy must also wait for threads in other processes exiting barrier\n\nthe vm lock only waits for threads in the same process exiting.\nactually this fix is not enough, but it's a start...\n"},{"hash":"95b147967216a057d51a1b970da777486be716e3","date":"2011-09-28T22:00:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"next step making barrier self-sync'd destruction safe\n\ni think this works, but it can be simplified. (next step)\n"},{"hash":"9cee9307e3b8ed31e772d564d1dc53e6d888acba","date":"2011-09-28T22:57:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve pshared barriers\n\neliminate the sequence number field and instead use the counter as the\nfutex because of the way the lock is held, sequence numbers are\ncompletely useless, and this frees up a field in the barrier structure\nto be used as a waiter count for the count futex, which lets us avoid\nsome syscalls in the best case.\n\nas of now, self-synchronized destruction and unmapping should be fully\nsafe. before any thread can return from the barrier, all threads in\nthe barrier have obtained the vm lock, and each holds a shared lock on\nthe barrier. the barrier memory is not inspected after the shared lock\ncount reaches 0, nor after the vm lock is released.\n"},{"hash":"ede5ae7b0bb5a7ed9edeb2eeb8e24d30af64d185","date":"2011-09-28T23:37:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make getmntent_r discard long lines when it returns error, not seek back\n\nseeking back can be performed by the caller, but if the caller doesn't\nexpect it, it will result in an infinite loop of failures.\n"},{"hash":"de543b05c87d79a9313991810e9ee8ecdaad8f19","date":"2011-09-28T23:45:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix excessive/insufficient wakes in __vm_unlock\n\nthere is no need to send a wake when the lock count does not hit zero,\nbut when it does, all waiters must be woken (since all with the same\nsign are eligible to obtain the lock).\n"},{"hash":"5f814682b48c59f07568d349f979eed4cf306703","date":"2011-09-29T02:07:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't crash on null strings in printf\n\npassing null pointer for %s is UB but lots of broken programs do it anyway\n"},{"hash":"4b87736998e8d8c0610c3c31b6862c77248a98df","date":"2011-09-29T04:48:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix various bugs in path and error handling in execvp/fexecve\n"},{"hash":"12ace5bf76040e928df1abd57e9b5134ca4647c6","date":"2011-10-01T04:52:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"first attempt at arm dynamic linking\n"},{"hash":"cd319d73c77a4c6c8996b65f61e3bdc59a47d0c3","date":"2011-10-01T04:54:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"typo in arm reloc.h\n"},{"hash":"74cc7c69f951ad90d1b56b3dde3fddb3fa9516fe","date":"2011-10-01T04:55:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"typo (copy 2) in arm reloc.h\n"},{"hash":"fcaf7065698bce12a444803587421ae88446f6c0","date":"2011-10-01T05:33:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linker entry point for arm\n\nmildly tested, seems to work\n"},{"hash":"8b98c09f8c6a0c366f06b7e6a4b3555a07e5244d","date":"2011-10-01T05:35:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dlsym entry point for arm\n"},{"hash":"b85fec2ded3f005b877e25b63215c0d09d4a9f7f","date":"2011-10-01T13:11:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure-to-wake in rwlock unlock\n\na reader unlocking the lock need only wake one waiter (necessarily a\nwriter, but a writer unlocking the lock must wake all waiters\n(necessarily readers). if it only wakes one, the remainder can remain\nblocked indefinitely, or at least until the first reader unlocks (in\nwhich case the whole lock becomes serialized and behaves as a mutex\nrather than a read lock).\n"},{"hash":"5a2e18093725c3965486641f0ad0b61a44f7ed68","date":"2011-10-03T02:58:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"synchronize cond var destruction with exiting waits\n"},{"hash":"b3b00d11e87926b553429d341b020a8a070e4ea1","date":"2011-10-03T04:03:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sysconf for PTHREAD_KEYS_MAX\n"},{"hash":"7fe58d3511387ab6c57909f6e4baef58acd6bd56","date":"2011-10-03T04:09:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use count=0 instead of 1 for recursive mutex with only one lock reference\n\nthis simplifies the code paths slightly, but perhaps what's nicer is\nthat it makes recursive mutexes fully reentrant, i.e. locking and\nunlocking from a signal handler works even if the interrupted code was\nin the middle of locking or unlocking.\n"},{"hash":"b8688ff87574fad6b3056443a5385010952fb243","date":"2011-10-03T04:11:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash if pthread_mutex_unlock is called without ever locking\n\nthis is valid for error-checking mutexes; otherwise it invokes UB and\nwould be justified in crashing.\n"},{"hash":"b6f9974ad843b6b106db082fc44e710c0eb06e3b","date":"2011-10-03T04:19:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify robust mutex unlock code path\n\nright now it's questionable whether this change is an improvement or\nnot, but if we later want to support priority inheritance mutexes, it\nwill be important to have the code paths unified like this to avoid\nmajor code duplication.\n"},{"hash":"5e977e8b48c6862767ea0a1255233600957c05db","date":"2011-10-03T04:27:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"recovering ownerdead robust mutex must reset recursive lock count\n"},{"hash":"73f5ff4e8646a5fddbeae5070a53f05870e51dd1","date":"2011-10-04T15:50:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make [U]INTn_C() macros have the right type...\n\n...and still be valid in #if directives.\n"},{"hash":"e6d765a8b1278e9e5f507638ccdec9fe40e52364","date":"2011-10-05T04:26:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fcntl O_* flags for arm\n\nno idea why these 4 are permuted and the rest are standard/generic\n"},{"hash":"2b89e56c94c1ce4369a3c7a17304df17df1fa822","date":"2011-10-09T04:02:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in arm clone() asm\n"},{"hash":"8e8ddeff7eee6294e24c0a9a29053164f990f1b3","date":"2011-10-10T02:51:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix F_GETOWN return value handling\n\nthe fcntl syscall can return a negative value when the command is\nF_GETOWN, and this is not an error code but an actual value. thus we\nmust special-case it and avoid calling __syscall_ret to set errno.\nthis fix is better than the glibc fix (using F_GETOWN_EX) which only\nworks on newer kernels and is more complex.\n"},{"hash":"f753049a50132a23849ef89a8af5ff86ad595c25","date":"2011-10-15T03:00:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify atexit and fflush-on-exit handling\n"},{"hash":"b7c683be35586f671d91c9883c9a41920938df9b","date":"2011-10-15T03:21:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support __cxa_atexit, and registering atexit functions from atexit handlers\n\nmildly tested; may have bugs. the locking should be updated not to use\nspinlocks but that's outside the scope of this one module.\n"},{"hash":"14f2e115c2a1ee473ec8f28b1e804329f6a4d765","date":"2011-10-15T03:31:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add dummy __cxa_finalize\n\nmusl's dynamic linker does not support unloading dsos, so there's\nnothing for this function to do. adding the symbol in case anything\ndepends on its presence..\n"},{"hash":"768f39a535e5f5a50c2c17dc072e92ba01665ef0","date":"2011-10-15T03:34:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make available a namespace-safe vfork, if supported\n\nthis may be useful to posix_spawn..?\n"},{"hash":"2bb75db611f1ce534073be20e5834cc75a7c531c","date":"2011-10-15T03:56:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support vfork on i386\n"},{"hash":"1d3c2768078937eeb2d4d265e34f7e549ccda5f1","date":"2011-10-15T04:28:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't define wchar_t on c++\n\nit's a keyword in c++ (wtf). i'm not sure this is the cleanest\nsolution; it might be better to avoid ever defining __NEED_wchar_t on\nc++. but in any case, this works for now.\n"},{"hash":"03860303c298f2ec7a9c0de683a68f4ab61697f0","date":"2011-10-17T16:23:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some details in ugly stuff that doesn't belong in libc\n\npatches by sh4rm4, presumably needed to make gdb or some similar junk\nhappy...\n"},{"hash":"42976cee2d31bbaade6d2169a9f234cd82af0715","date":"2011-10-17T16:24:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some missing GNU FNM_* extensions to the header\n\nnote that none of these are implemented, and programs depending on\nthem may break... patch by sh4rm4\n"},{"hash":"26120950e26478740a29fd0b1fd78a0bd6b880c8","date":"2011-10-26T04:28:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"report sem value overflows in sem_post\n\nthis is not required by the standard, but it's nicer than corrupting\nthe state and rather inexpensive.\n"},{"hash":"3ed8c9f2df0b5f0bfe1006037c46d4f32ec6ca7b","date":"2011-11-11T01:40:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix all missing instances of __cplusplus checks/extern \"C\" in headers\n\npatch by Arvid Picciani (aep)\n"},{"hash":"0c4188f6d76fad021a93eb1012630c717bda80a1","date":"2011-11-11T01:44:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signed overflows at most-negative values in ato(i|l|ll)\n\npatch by Pascal Cuoq (with minor tweaks to comments)\n"},{"hash":"4e3df7be8ff430de6f0f124a20112fb7be8a17d0","date":"2011-11-11T02:01:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix __cplusplus extern \"C\" closing brace in pty.h (typo?)\n"},{"hash":"e5d78fe8df9bd61940abcd98ad07ed69b7da4350","date":"2011-11-17T04:59:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix issue with excessive mremap syscalls on realloc\n\nCHUNK_SIZE macro was defined incorrectly and shaving off at least one\nsignificant bit in the size of mmapped chunks, resulting in the test\nfor oldlen==newlen always failing and incurring a syscall. fortunately\ni don't think this issue caused any other observable behavior; the\ndefinition worked correctly for all non-mmapped chunks where its\ncorrectness matters more, since their lengths are always multiples of\nthe alignment.\n"},{"hash":"c07daf0f2f696392c01ad97ad23ef01aa3cdf263","date":"2011-12-24T00:13:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken reboot wrapper (syscall needs extra silly magic arguments...)\n"},{"hash":"2adf2fb372745a406544188029d3f769f71a9f2c","date":"2012-01-17T05:34:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix char signedness bug in dynlinker hash function\n\nthis only affects non-ascii symbol names, which are probably not in\nuse anyway..\n"},{"hash":"07065210cae8ae40fceeee4febf338e1f1aecd0c","date":"2012-01-19T04:28:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"alias basename to glibc name for it, to meet abi goals\n\nnote that regardless of the name used, basename is always conformant.\nit never takes on the bogus gnu behavior, unlike glibc where basename\nis nonconformant when declared manually without including libgen.h.\n"},{"hash":"0b6dc0974426238cfe8fbb01ef64e7911f2da678","date":"2012-01-20T16:14:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic linker not to depend on DYNAMIC ptr in 0th entry of GOT\n\nthis fixes an issue using gold instead of gnu ld for linking. it also\nshould eliminate the need of the startup code to even load/pass the\ngot address to the dynamic linker.\n\nbased on patch submitted by sh4rm4 with minor cosmetic changes.\n\nfurther cleanup will follow.\n"},{"hash":"26f38328d66f4bd525e9d21a9245ba4c54d6ca10","date":"2012-01-21T03:10:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prlimit syscall wrapper\n"},{"hash":"5235a2a5a4d372cf7ebda7ccadf0325c7d4bad82","date":"2012-01-21T03:30:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use prlimit syscall for getrlimit/setrlimit\n\nthis allows the full range of 64-bit limit arguments even on 32-bit\nsystems. fallback to the old syscalls on old kernels that don't\nsupport prlimit.\n"},{"hash":"4904b64275d76e9a9f6f26ee3586dc600cce9ded","date":"2012-01-22T16:37:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update WHATSNEW in preparation for 0.8.4 (not finished)\n"},{"hash":"787c2648a9bdc9431237abc0fdd61971cbf289cd","date":"2012-01-22T20:49:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support GLOB_PERIOD flag (GNU extension) to glob function\n\npatch by sh4rm4\n"},{"hash":"ce7d72596c57386c493969cc56546c7aba2e1049","date":"2012-01-22T22:19:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix cancellation failure in single-threaded programs\n\neven a single-threaded program can be cancellable, e.g. if it's called\npthread_cancel(pthread_self()). the correct predicate to check is not\nwhether multiple threads have been invoked, but whether pthread_self\nhas been invoked.\n"},{"hash":"35620515a8ce0f83f0467968f01383c8f53d44dc","date":"2012-01-23T05:37:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update release notes for 0.8.4\n"},{"hash":"c82f4a32ec694903a37d3f9e48da52486a470aa2","date":"2012-01-23T05:57:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup dynamic linker, removing some code duplication\n"},{"hash":"e12fe65c928f038fb8db0caddcf535ab0a980c58","date":"2012-01-23T07:02:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linker support for PIE binaries (position-independent main program)\n\neven with this change, PIE will not work yet due to deficiencies in\nthe crt1.o startup code.\n"},{"hash":"fd7015d0c23edb9ae655e5ce3677f980f0cb1143","date":"2012-01-23T23:32:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken copy relocations from dynamic linker cleanup\n\nthis issue affected programs which use global variables exported by\nnon-libc libraries.\n"},{"hash":"d0678b58ab34f9afae099afc839430bdcd91aaac","date":"2012-01-24T00:51:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make glob mark symlinks-to-directories with the GLOB_MARK flag\n\nPOSIX is unclear on whether it should, but all historical\nimplementations seem to behave this way, and it seems more useful to\napplications.\n"},{"hash":"b768c7bc6398e297945b08dd5315cae472279a3a","date":"2012-01-24T05:22:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make gcc wrapper support -shared correctly\n\nit was previously attempting to link start files as part of shared\nobjects. this is definitely wrong and depending on the platform and\nlinker could range from just adding extraneous junk to introducing\ntextrels to making linking fail entirely.\n"},{"hash":"477e72ac4a263c163ddfd25b6e2371de0dd97e10","date":"2012-01-25T00:50:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add legacy futimes and lutimes functions\n\nbased on patch by sh4rm4. these functions are deprecated; futimens and\nutimensat should be used instead in new programs.\n"},{"hash":"6a193804a87a69856c3b5705b24a19a6ba4b6e16","date":"2012-01-25T03:51:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add MIN/MAX macros to sys/param.h\n\nthis is a nonstandard junk header anyway, so just do what apps expect..\n"},{"hash":"8eb9a3afba6c47c0c5fbb337612dae2ea19bd97e","date":"2012-01-25T20:30:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in FPE_FLTUND definition, signal.h\n"},{"hash":"c3db56c4cb2b5eb06cbf46b8fe526f4fe7e10321","date":"2012-01-26T15:53:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless \"extern\" keywords in headers\n"},{"hash":"4619901ec4b82d233a24e26ef3df01ddadc2d013","date":"2012-01-29T02:09:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux setfs[ug]id syscall wrappers\n\npatch by Jeremy Huntwork\n"},{"hash":"5e9314ff03076a94316d4e66efd082548c065f3d","date":"2012-01-29T16:54:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fgetpwent (nonstandard function)\n\nbased on patch by Jeremy Huntwork\n"},{"hash":"fa3bbbd453372c0894c8fe5170186d049911610f","date":"2012-01-31T19:39:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some missing junk in utmp.h\n"},{"hash":"108fdd3318529eea82406791bfb34f7f9f728662","date":"2012-01-31T22:10:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix previous utmp.h junk commit\n"},{"hash":"96e0aca4d544cb646c4f96e23397793995f92ab9","date":"2012-02-01T19:10:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix utmp.h mess, try 2\n"},{"hash":"147f355cb698fc90a07e48048275831de73d0fc4","date":"2012-02-01T19:12:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"apparently gnu caddr_t is supposed to be char *, not unsigned long\n\nthis type should never be used anyway, but some old junk uses it..\n"},{"hash":"4948a24df21c1e80bedc1f302547c9cb26e4dbfe","date":"2012-02-02T04:51:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make passwd/group functions safe against cancellation in stdio\n\nthese changes are a prerequisite to making stdio cancellable.\n"},{"hash":"58165923890865a6ac042fafce13f440ee986fd9","date":"2012-02-02T05:11:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make stdio open, read, and write operations cancellation points\n\nit should be noted that only the actual underlying buffer flush and\nfill operations are cancellable, not reads from or writes to the\nbuffer. this behavior is compatible with POSIX, which makes all\ncancellation points in stdio optional, and it achieves the goal of\nallowing cancellation of a thread that's \"stuck\" on IO (due to a\nnon-responsive socket/pipe peer, slow/stuck hardware, etc.) without\nimposing any measurable performance cost.\n"},{"hash":"4f4d6ae985cd6562beafdecd1f90e00a34520b45","date":"2012-02-03T04:54:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve gcc wrapper to support -nostdlib, -nostartfiles\n"},{"hash":"5a09a53010046fce204cb5138329f8aace79ab1a","date":"2012-02-03T08:16:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"include dummied-out dlopen and dlsym functions for static binaries\n\nthese don't work (or do anything at all) but at least make it possible\nto static link programs that insist on \"having\" dynamic loading\nsupport...as long as they don't actually need to use it.\n\nadding real support for dlopen/dlsym with static linking is going to\nbe significantly more difficult...\n"},{"hash":"f4ad36c4bf23899a3164ebd40ff5781c152bcb01","date":"2012-02-06T06:14:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add deprecated (removed from posix) [efg]cvt() functions\n\nthese have not been heavily tested, but they should work as described\nin the old standards. probably broken for non-finite values...\n"},{"hash":"4ce3cb5cddda7b4ee9643e1f75ee5b8f1f191906","date":"2012-02-06T19:39:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for init/finit (constructors and destructors)\n\nthis is mainly in hopes of supporting c++ (not yet possible for other\nreasons) but will also help applications/libraries which use (and more\noften, abuse) the gcc __attribute__((__constructor__)) feature in \"C\"\ncode.\n\nx86_64 and arm versions of the new startup asm are untested and may\nhave minor problems.\n"},{"hash":"ce4d97e3dc0aaec915f500bc1ef955208a5ef4c2","date":"2012-02-06T22:57:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"run ctors/dtors for shared objects loaded with dlopen\n"},{"hash":"4cf667c9c90cdcf63233467cbed42a2dab5c35a9","date":"2012-02-06T23:23:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"x86_64 vfork implementation\n\nuntested; should work.\n"},{"hash":"e5a7f14c818a622ea7fbbc981657eb0c47ce3c00","date":"2012-02-07T02:29:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add more of the locale_t interfaces, all dummied out to ignore the locale\n"},{"hash":"c09b6f8ab6edefba52183f8c5ecf6520a8b7ad8f","date":"2012-02-07T02:33:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some omissions and mistakes in locale_t interface definitions\n"},{"hash":"36bf56940af90baa478dd1258884291d5d213d10","date":"2012-02-07T02:51:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more locale_t interfaces (string stuff) and header updates\n\nthis should be everything except for some functions where the non-_l\nversion isn't even implemented yet (mainly some non-ISO-C wcs*\nfunctions).\n"},{"hash":"a591e0383a0a31ac94541846796b93fedc63a0c4","date":"2012-02-07T17:08:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert hacks for types of stdint.h integer constant macros\n\nper 7.18.4: Each invocation of one of these macros shall expand to an\ninteger constant expression suitable for use in #if preprocessing\ndirectives. The type of the expression shall have the same type as\nwould an expression of the corresponding type converted according to\nthe integer promotions. The value of the expression shall be that of\nthe argument.\n\nthe key phrase is \"converted according to the integer promotions\".\nthus there is no intent or allowance that the expression have\nsmaller-than-int types.\n"},{"hash":"1ba28b90d6de61460b06289d8484f489df64e47e","date":"2012-02-07T18:10:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"declare basename in string.h when _GNU_SOURCE is defined\n\nnote that it still will have the standards-conformant behavior, not\nthe GNU behavior. but at least this prevents broken code from ending\nup with truncated pointers due to implicit declarations...\n"},{"hash":"700a8156adc5bfb3ddf9c92dab4ffd516df31958","date":"2012-02-08T01:29:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reduce some wasted space in dso structure\n"},{"hash":"f2baf4d7b8be043b231ecf7fc611247196acd9f5","date":"2012-02-08T01:31:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect against cancellation in dlopen\n\ni'm not sure that it's \"correct\" for dlopen to block cancellation\nwhen calling constructors for libraries it loads, but it sure seems\nlike the right thing. in any case, dlopen itself needs cancellation\nblocked.\n"},{"hash":"570edb19d12dd3920b576db06b657b639fdbac00","date":"2012-02-08T03:48:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in inotify.h\n"},{"hash":"520f3ee2b61153b43a709724fe16fabed4ad8552","date":"2012-02-09T05:20:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in iswspace space list table\n"},{"hash":"ed2911a11317729c1a13e779237fed736c676c1b","date":"2012-02-09T05:27:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document iswspace and remove wrongly-included zwsp character\n"},{"hash":"afc35d5efde48b82a7786d9c89b115965da6b637","date":"2012-02-09T07:33:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace bad cancellation cleanup abi with a sane one\n\nthe old abi was intended to duplicate glibc's abi at the expense of\nbeing ugly and slow, but it turns out glib was not even using that abi\nexcept on non-gcc-compatible compilers (which it doesn't even support)\nand was instead using an exceptions-in-c/unwind-based approach whose\nabi we could not duplicate anyway without nasty dwarf2/unwind\nintegration.\n\nthe new abi is copied from a very old glibc abi, which seems to still\nbe supported/present in current glibc. it avoids all unwinding,\nwhether by sjlj or exceptions, and merely maintains a linked list of\ncleanup functions to be called from the context of pthread_exit. i've\nmade some care to ensure that longjmp out of a cleanup function should\nwork, even though it is not required to.\n\nthis change breaks abi compatibility with programs which were using\npthread cancellation, which is unfortunate, but that's why i'm making\nthe change now rather than later. considering that most pthread\nfeatures have not been usable until recently anyway, i don't see it as\na major issue at this point.\n"},{"hash":"2230218c283af7fbff08167685f17dad8d748f14","date":"2012-02-10T02:24:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"small fix for new pthread cleanup stuff\n\neven if pthread_create/exit code is not linked, run flag needs to be\nchecked and cleanup function potentially run on pop. thus, move the\ncode to the module that's always linked when pthread_cleanup_push/pop\nis used.\n"},{"hash":"f42bad9ccb2af7cde8a676d57c4d161455256456","date":"2012-02-11T05:05:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix illegal goto out of cleanup context in dns lookups\n"},{"hash":"88d84b7cc85841c575e54b635b125012c1d2e39d","date":"2012-02-11T05:06:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix default nameserver when resolv.conf doesn't exist\n"},{"hash":"414a4cdebc45925b59225cca208fee9c658b273e","date":"2012-02-16T02:47:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add float_t and double_t to math.h\n"},{"hash":"1611ab0d9b10ad3413f452c2b31a6c1c56dd6939","date":"2012-02-18T04:10:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add get_current_dir_name function\n"},{"hash":"3c870263c5a14b77628f83c06852a6f340b2443f","date":"2012-02-18T04:17:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"two fixes for \"make install\" handling of shared libs\n\n1. don't try to install (and thus build) shared libs when they were\ndisabled in config.mak\n\n2. ensure that the path for the dynamic linker exists before\nattempting to install it.\n"},{"hash":"61c2cf877ba7518a46d0391f119b3251e5a136b2","date":"2012-02-18T04:51:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove -std=gnu99 from musl-gcc wrapper\n\nwhile probably desirable, changing the default language variant is\noutside the scope of the wrapper's responsibility.\n"},{"hash":"f96eb335e1ea050b781904d589bf8413131bee48","date":"2012-02-18T04:56:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix get_current_dir_name behavior\n"},{"hash":"56ddcc720837522e0ff0199422284a7e69e5e891","date":"2012-02-23T18:07:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix for previous incorrect fix of cancellation in dns lookups\n\nuninitialized file descriptor was being closed on return, causing\nstdin to be closed in many cases.\n"},{"hash":"00b883a95561b7ed31b0907fcd7cb16267de6e4d","date":"2012-02-23T18:08:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix (hopefully) PTRACE_TRACEME (command 0) argument handling\n"},{"hash":"bae2e52bfd676c447862b9baec535db401aab075","date":"2012-02-24T02:24:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup and work around visibility bug in gcc 3 that affects x86_64\n\nin gcc 3, the visibility attribute must be placed on both the\ndeclaration and on the definition. if it's omitted from the\ndefinition, the compiler fails to emit the \".hidden\" directive in the\nassembly, and the linker will either generate textrels (if supported,\nsuch as on i386) or refuse to link (on targets where certain types of\ntextrels are forbidden or impossible without further assumptions about\nmemory layout, such as on x86_64).\n\nthis patch also unifies the decision about when to use visibility into\nlibc.h and makes the visibility in the utf-8 state machine tables\nbased on libc.h rather than a duplicate test.\n"},{"hash":"7fa29920ed19407bf1c3762f14dab9291548e976","date":"2012-02-25T01:02:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless attribute visibility from definitions\n\nthis was a failed attempt at working around the gcc 3 visibility bug\naffecting x86_64. subsequent patch will address it with an ugly but\nworking hack.\n"},{"hash":"78e79d9d502ab8cdbccf94a7f307c78b8847ad0e","date":"2012-02-25T01:07:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new attempt at working around the gcc 3 visibility bug\n\nsince gcc is failing to generate the necessary \".hidden\" directive in\nthe output asm, generate it explicitly with an __asm__ statement...\n"},{"hash":"06aec8d7152dfb8360cb7ed9b3d7215ca0b0b500","date":"2012-02-25T04:23:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace prototype for basename in string.h with non-prototype declaration\n\nGNU programs may expect the GNU version of basename, which has a\ndifferent prototype (argument is const-qualified) and prototype it\nthemselves too. of course if they're expecting the GNU behavior for\nthe function, they'll still run into problems, but at least this\neliminates some compile-time failures.\n"},{"hash":"834255a3ffb5be208024e66b1f794d9f4201413c","date":"2012-02-25T07:52:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use __attribute__((const)) on arm __pthread_self function\n"},{"hash":"dac084a4c5f52bb3b121675320c47d3c3614174e","date":"2012-02-27T23:51:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around \"signal loses thread pointer\" issue with \"approach 2\"\n\nthis was discussed on the mailing list and no consensus on the\npreferred solution was reached, so in anticipation of a release, i'm\njust committing a minimally-invasive solution that avoids the problem\nby ensuring that multi-threaded-capable programs will always have\ninitialized the thread pointer before any signal handler can run.\n\nin the long term we may switch to initializing the thread pointer at\nprogram start time whenever the program has the potential to access\nany per-thread data.\n"},{"hash":"aab33ec0a3c46ee82ef849a4c6308c9ccf7529bc","date":"2012-02-28T01:12:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update release notes for 0.8.5\n"},{"hash":"e3234d01094d9ed62e90c6d52a44601dce93a1bb","date":"2012-02-28T15:13:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_cleanup_pop(1) crash in non-thread-capable, static-linked programs\n"},{"hash":"b1a8e0d45465731a757ef476cf6a5cbd31d166f9","date":"2012-02-28T16:56:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.6\n"},{"hash":"95b930ad2646bb733ca9330ab3b990570e7ff9c6","date":"2012-02-28T20:59:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement wcsftime function\n"},{"hash":"4ce6766a3264b1ee5bf4056a0685b06939938247","date":"2012-03-01T03:36:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add <syscall.h> as an alias for <sys/syscall.h>\n\napparently some broken stuff (libstdc++) needs this.\n"},{"hash":"d36751943a35e884a8889895c3d6fae52a93fc9b","date":"2012-03-01T03:55:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use c++-friendly initializers for pthread initializer definitions\n\nthese will also avoid obnoxious warnings with gcc -Wbraces.\n"},{"hash":"15d143b547c5462c3cd0406f85896861a7be50cd","date":"2012-03-01T05:21:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"search internal headers first\n\nthis is necessitated by the ugly <syscall.h> just added\n"},{"hash":"051175d4fe2bdc7b09da9b303e88881ad4f936ff","date":"2012-03-01T06:34:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add memory.h, bogus legacy alias for string.h\n"},{"hash":"899b13cae77469a9ed1f076c456b66d567af69d8","date":"2012-03-02T03:08:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support null buffer argument to getcwd, auto-allocating behavior\n\nthis is a popular extension some programs depend on, and by using a\ntemporary buffer and strdup rather than malloc prior to the syscall,\ni've avoided the dependency on free and thus minimized the bloat cost\nof supporting this feature.\n"},{"hash":"e0614f7cd418afedd06c9bcd5abb965608bc52f8","date":"2012-03-02T04:24:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add all missing wchar functions except floating point parsers\n\nthese are mostly untested and adapted directly from corresponding byte\nstring functions and similar.\n"},{"hash":"ca19774c913739ef2bea9586a847d8719f19840f","date":"2012-03-02T04:43:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement a64l and l64a (legacy xsi stuff)\n"},{"hash":"536db2b5ac6b9fee7129417926c59ca12e8dffb0","date":"2012-03-02T05:23:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bugs in strptime handling of string day/month names, literals\n"},{"hash":"b93b7382d6db5efe51134db2eba1bcbe967d1c82","date":"2012-03-02T05:24:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"first try at implementing getdate function\n"},{"hash":"6cf51fe51ab48d66e917a2c99c0b40adb089268e","date":"2012-03-02T05:24:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove debug cruft that was left in getdate\n"},{"hash":"db3e78cee5640edd3af95682b5ed554814e0d342","date":"2012-03-02T05:36:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make math.h compatibe with c89\n"},{"hash":"9fcecd7b34c66e9d0a2b000809e022a4f3e5e951","date":"2012-03-02T16:38:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"typo in math.h c version check\n"},{"hash":"b4a07bb469ad5a81ee003b621c362d2e7be38159","date":"2012-03-02T17:48:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix obscure bug in strtoull reading the highest 16 possible values\n"},{"hash":"405ce58dcf59ecfb3e245fed0b96b1f35fbeaec1","date":"2012-03-03T03:35:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix nan/infinity macros in math.h, etc.\n\nthe previous version not only failed to work in c++, but also failed\nto produce constant expressions, making the macros useless as\ninitializers for objects of static storage duration.\n\ngcc 3.3 and later have builtins for these, which sadly seem to be the\nmost \"portable\" solution. the alternative definitions produce\nexceptions (for NAN) and compiler warnings (for INFINITY) on newer\nversions of gcc.\n"},{"hash":"d46cf2e14cc4df7cc75e77d7009fcb6df1f48a33","date":"2012-03-09T08:39:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add .gitignore file\n\nI've had this around for a long time but somehow it never got\ncommitted.\n"},{"hash":"b69f695acedd4ce2798ef9ea28d834ceccc789bd","date":"2012-03-13T05:17:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"first commit of the new libm!\n\nthanks to the hard work of Szabolcs Nagy (nsz), identifying the best\n(from correctness and license standpoint) implementations from freebsd\nand openbsd and cleaning them up! musl should now fully support c99\nfloat and long double math functions, and has near-complete complex\nmath support. tgmath should also work (fully on gcc-compatible\ncompilers, and mostly on any c99 compiler).\n\nbased largely on commit 0376d44a890fea261506f1fc63833e7a686dca19 from\nnsz's libm git repo, with some additions (dummy versions of a few\nmissing long double complex functions, etc.) by me.\n\nvarious cleanups still need to be made, including re-adding (if\nthey're correct) some asm functions that were dropped.\n"},{"hash":"bf9d9dcaa631db9918452d05c188f01c8e5f537f","date":"2012-03-13T05:55:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement nan, nanf, nanl\n"},{"hash":"3a6c828652c9223f9245252d3a5214e2e5144e49","date":"2012-03-13T15:06:43.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix copyright notice for the math lib\n"},{"hash":"df8b3e5aef151748426b17d4fbccd508acb14207","date":"2012-03-13T15:38:22.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"clean up __expo2.c, use a slightly better k constant\n"},{"hash":"291f839a440423a15487ba95822247adb2b098f6","date":"2012-03-13T16:37:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix scanf handling of \"0\" (followed by immediate EOF) with \"%x\"\n\nother cases with %x were probably broken too.\n\nI would actually like to go ahead and replace this code in scanf with\ncalls to the new __intparse framework, but for now this calls for a\nquick and unobtrusive fix without the risk of breaking other things.\n"},{"hash":"9560b6b152efeb23cc4e570dbaea5ef333ac971f","date":"2012-03-13T18:51:14.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"remove libm.h includes when math.h and float.h are enough\n"},{"hash":"8d0a6f7a1c47b280647f292e6864b85b72c71f2e","date":"2012-03-13T19:24:23.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math cleanup: use 1.0f instead of (float)1.0\n"},{"hash":"32ca5ef3ff3069bdaae5f95be1900a3c3f831247","date":"2012-03-13T20:11:46.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math cleanup: use 1.0f instead of 1.0F\n"},{"hash":"e0a54e6725eaa0b5aeb28e9815c310f70068d308","date":"2012-03-14T02:15:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct rounding for i387 sqrtf function\n"},{"hash":"809556e60a3359f646946879dd94c4760e5b8e84","date":"2012-03-15T05:29:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correctly rounded sqrt() asm for x86 (i387)\n\nthe fsqrt opcode is correctly rounded, but only in the fpu's selected\nprecision mode, which is 80-bit extended precision. to get a correctly\nrounded double precision output, we check for the only corner cases\nwhere two-step rounding could give different results than one-step\n(extended-precision mantissa ending in 0x400) and adjust the mantissa\nslightly in the opposite direction of the rounding which the fpu\nalready did (reported in the c1 flag of the fpu status word).\n\nthis should have near-zero cost in the non-corner cases and at worst\nvery low cost.\n\nnote that in order for sqrt() to get used when compiling with gcc, the\nbroken, non-conformant builtin sqrt must be disabled.\n"},{"hash":"46702f68f98244f7384d6ac1742a452f0d7a2610","date":"2012-03-15T05:55:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid changing NaNs in sqrt (x86 asm) to satisfy c99 f.9 recommendation\n"},{"hash":"5657cc58e5e135bba85c9a7045e10d8de4b1be0a","date":"2012-03-15T06:38:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement sincosf and sincosl functions; add prototypes\n\npresumably broken gcc may generate calls to these, and it's said that\nffmpeg makes use of sincosf.\n"},{"hash":"0144b45b71c0b78055b311fe3e7408fee71eb0c1","date":"2012-03-15T07:17:28.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"efficient sincos based on sin and cos\n"},{"hash":"40305f74bd70a575ce73260227ed3b64e0625b13","date":"2012-03-15T08:29:53.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"in math.h make lgamma_r and non-double bessel _GNU_SOURCE only\nlong double and float bessel functions are no longer xsi extensions\n"},{"hash":"1295848efb9171011e79610a5c3ab7c20859ea36","date":"2012-03-15T16:16:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify nan check in sqrt (x86 asm); result of sqrt is never negative\n"},{"hash":"9d507419db1289033c59da6976f8675f24ab873f","date":"2012-03-15T23:56:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove special nan handling from x86 sqrt asm\n\na double precision nan, when converted to extended (80-bit) precision,\nwill never end in 0x400, since the corresponding bits do not exist in\nthe original double precision value. thus there's no need to waste\ntime and code size on this check.\n"},{"hash":"6f21da618ff0d90597390563ce3e05970816b5a3","date":"2012-03-16T23:18:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update copyright status (math library and new year)\n"},{"hash":"a43c3a337f4fd8a273c6fe29604f3b24d8d32760","date":"2012-03-17T00:52:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert COPYRIGHT file changes in preparation to merge nsz's math branch\n"},{"hash":"2cbb24bba39ad3529315098b5619b6fec078eb82","date":"2012-03-17T00:53:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove junk sincos implementations in preparation to merge nsz's real ones\n"},{"hash":"93a50a26cd0f9efc59cc83daae7b2d916b327ab1","date":"2012-03-17T01:01:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"de7db6e927e568c52eaffeb51d7726a094ed0180","date":"2012-03-17T01:16:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace issues for lgamma, etc.\n\nstandard functions cannot depend on nonstandard symbols\n"},{"hash":"1a3dce4184895be87b32dcb7c891c5cb87d88a95","date":"2012-03-17T01:18:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make signgam a weak alias for an internal symbol\n\notherwise, the standard C lgamma function will clobber a symbol in the\nnamespace reserved for the application.\n"},{"hash":"8c071f872b2844ca297275176047f8d23eec96a7","date":"2012-03-17T01:20:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"other side of the signgam namespace fix: use the internal name\n"},{"hash":"2e77dc13f8bc2053642fcb136996f5f36c88c775","date":"2012-03-17T03:58:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make fma and lrint functions build without full fenv support\n\nthis is necessary to support archs where fenv is incomplete or\nunavailable (presently arm). fma, fmal, and the lrint family should\nwork perfectly fine with this change; fmaf is slightly broken with\nrespect to rounding as it depends on non-default rounding modes to do\nits work.\n"},{"hash":"d3fc724759ef08a8032e76e14f8cd96bfb837e17","date":"2012-03-17T04:02:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"one more fenv availability issue: lround\n"},{"hash":"523a3ab1a24c0aa06b14d9c931173cd90a46d29e","date":"2012-03-17T04:48:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't fail on inability to install dynamic linker (e.g. if not root)\n"},{"hash":"88cfaf8a142a8c57beccb89398a6421c4bbf121a","date":"2012-03-17T12:46:15.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix i386 fegetround and make fesetround faster\n\nNote that the new fesetround has slightly different semantics:\n\nStoring the floating-point environment with fnstenv makes the\nnext fldenv (or fldcw) \"non-signaling\", so unmasked and pending\nexceptions does not invoke the exception handler.\n(These are rare since exceptions are handled immediately and by\ndefault all exceptions are masked anyway. But if one manually\nunmasks an exception in the control word then either sets the\ncorresponding exception flag in the status word or the execution\nof an exception raising floating-point operation gets interrupted\nthen it may happen).\nSo the old implementation did not trap in some rare cases\nwhere the new implementation traps.\n\nHowever POSIX does not specify anything like the x87 exception\nhandling traps and the fnstenv/fldenv pair is significantly slower\nthan the fnstcw/fldcw pair (new code is about 5x faster here and\nit's dominated by the function call overhead).\n"},{"hash":"0b337e04aafe2cf5012bbef67b250eb25da67e0f","date":"2012-03-17T21:34:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"d5e576c7527c42b376d20ef38669ffc2a78b0a76","date":"2012-03-17T21:49:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor 387 fenv optimizations\n"},{"hash":"9cb6878e747909c7a45dd1c4dd550ac62e1f7690","date":"2012-03-17T22:02:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix x86_64 fe[gs]etround, analogous to nsz's x86 changes\n"},{"hash":"316e024f63af0d0d2bb0df3dfce2620f4be827d1","date":"2012-03-17T23:29:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize x86 feclearexcept\n\nif all exception flags will be cleared, we can avoid the expensive\nstore/reload of the environment and just use the fnclex instruction.\n"},{"hash":"b60053e7621a29ace6ab5c7b4e256e252f31ad13","date":"2012-03-18T00:10:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"try fixing/optimizing x86_64 fenv exception code\n\nuntested; may need followup-fixes.\n"},{"hash":"da0acc32efc85a91c4225157d22520743c6d8f8c","date":"2012-03-18T00:35:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.7\n"},{"hash":"65db6bf5ea1f27ec2cddd6423868baeff05cc719","date":"2012-03-18T01:40:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"c++ seems to want some casts in the float representation-access macros\n"},{"hash":"8e092217dd92ad3e95257255602c711b3304e38f","date":"2012-03-18T01:48:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move nonstandard gamma() etc. to _GNU_SOURCE only\n\nit's not even provided in the library at the moment, but could easily\nbe provided with weak aliases if desired.\n"},{"hash":"9e2a895aaaa4a3985e94ae4f3e24c1af65f9bb34","date":"2012-03-18T05:58:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix loads of missing const in new libm, and some global vars (?!) in powl\n"},{"hash":"9b6899f2c5cec70af6cea80ead7ba98fd2366ce9","date":"2012-03-18T18:27:39.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"faster lrint and llrint functions\n\nA faster workaround for spurious inexact exceptions\nwhen the result cannot be represented. The old code\nactually could be wrong, because gcc reordered the\ninteger conversion and the exception check.\n"},{"hash":"65db00983f3fa5449f20f2694477f9d5116f6ea5","date":"2012-03-18T19:40:43.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"make lrint and llrint functions work without fenv support\n"},{"hash":"afad262440d213633144d696b8fdda7a65bf26d1","date":"2012-03-18T19:52:33.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"simplify lround and llround functions\n\nSimple wrappers around round is enough because\nspurious inexact exception is allowed.\n"},{"hash":"8d9e948652eb8381f1f376cbd0c9bc5e2947d150","date":"2012-03-18T20:43:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm versions of some simple math functions for i386 and x86_64\n\nthese are functions that have direct fpu approaches to implementation\nwithout problematic exception or rounding issues. x86_64 lacks\nfloat/double versions because i'm unfamiliar with the necessary sse\ncode for performing these operations.\n"},{"hash":"b935147761d1770bb115f09f8c28ddb4d36e1236","date":"2012-03-18T21:09:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"assembly optimizations for fmod/remainder functions\n"},{"hash":"b1cbd70743f0e0e0295e92c3e38d7599114db8c6","date":"2012-03-18T23:36:55.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"add fma implementation for x86\n\ncorrectly rounded double precision fma using extended\nprecision arithmetics for ld80 systems (x87)\n"},{"hash":"d09a83f613c1d06442ed920ec55a0e5eedacb422","date":"2012-03-18T23:59:16.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fmal bug fix: nan input should not raise exception\n"},{"hash":"682e471400da612769b6e061f2e377db837274ef","date":"2012-03-19T01:05:57.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"remove unnecessary TODO comments from fma.c\n"},{"hash":"6f26cf3dacf9d426bbd18cecb4d486da56c17351","date":"2012-03-19T01:43:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm exponential functions for i386\n"},{"hash":"dbdec9722ee604969dddf51e81f8c9e4a9ce064a","date":"2012-03-19T01:55:31.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"37eb14dd2b92c51404fa54f56b6dfcd487ab5cbb","date":"2012-03-19T02:05:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for lrint family on i386\n"},{"hash":"aa1b4dff45788f8205e32ea01da243fe09568aa8","date":"2012-03-19T03:17:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken exponential asm\n\ninfinities were getting converted into nans. the new code simply tests\nfor infinity and replaces it with a large magnitude value of the same\nsign.\n\nalso, the fcomi instruction is apparently not part of the i387\ninstruction set, so avoid using it.\n"},{"hash":"495a52ae7bb581aac2942d7cb095cca2ff53ca3c","date":"2012-03-19T03:50:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for log functions\n"},{"hash":"0627e58af8514967372a8ff703e7a86c2571acc2","date":"2012-03-19T07:01:21.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"bc33e617040166e971ec1e6822ac1cc417eb6c9c","date":"2012-03-19T08:56:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for inverse trig functions\n\nunlike trig functions, these are easy to do in asm because they do not\ninvolve (arbitrary-precision) argument reduction. fpatan automatically\ntakes care of domain issues, and in asin and acos, fsqrt takes care of\nthem for us.\n"},{"hash":"58ff9e8eaf99f2294232be860daa2ca6f3674faf","date":"2012-03-19T09:15:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for scalbn family\n\nunlike some implementations, these functions perform the equivalent of\ngcc's -ffloat-store on the result before returning. this is necessary\nto raise underflow/overflow/inexact exceptions, perform the correct\nrounding with denormals, etc.\n"},{"hash":"9322344fa4c47a64361a81eda1b1930cd4341626","date":"2012-03-19T09:20:24.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"0b70a1e9a9651d21242c5b6da327ecab0f1a38a6","date":"2012-03-19T09:42:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for floor/ceil/trunc\n"},{"hash":"f767aba8afe84d6117c7c0376122a5ff704a69df","date":"2012-03-19T09:50:42.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"8051e08e10d2b739fcfcbc6bc7466e8d77fa49f1","date":"2012-03-19T09:54:07.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"simplify scalbn*.c implementations\n\nThe old scalbn.c was wrong and slow, the new one is just slow.\n(scalbn(0x1p+1023,-2097) should give 0x1p-1074, but the old code gave 0)\n"},{"hash":"1bf4dad32727ee17e6067caac6600ca0c5ab9f2d","date":"2012-03-19T09:56:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for modf functions\n"},{"hash":"be5b01f855b9a6460f8ed575bea50dd01030cb50","date":"2012-03-19T10:22:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken modf family functions\n"},{"hash":"da7458a602a6f0bdea25d6b9b613372048a974e6","date":"2012-03-19T10:28:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"02db27d9deaee71b244c91e720ec819c74dab150","date":"2012-03-19T13:00:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize exponential asm for i386\n\nup to 30% faster exp2 by avoiding slow frndint and fscale functions.\nexpm1 also takes a much more direct path for small arguments (the\nexpected usage case).\n"},{"hash":"27deb538896b5c3b8ceca206ec505ff834c97300","date":"2012-03-19T13:42:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for remquo\n\nthis could perhaps use some additional testing for corner cases, but\nit seems to be correct.\n"},{"hash":"9d82a15e152f72ca35a11a7bb359edb4d9232999","date":"2012-03-19T14:43:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for log2\n"},{"hash":"b04b588791e6afbe7e91684546b446b136fd518c","date":"2012-03-19T14:59:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for log1p\n"},{"hash":"9a810cb6851e9707b86ae3e5af5f265da3d6e6a1","date":"2012-03-19T17:06:06.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix erfl wrapper for long double==double case\n"},{"hash":"eca1c35e5be967478c8fe9381c6f4652b6645d5e","date":"2012-03-19T17:52:17.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"remove long double const workarounds\n\nSome long double consts were stored in two doubles as a workaround\nfor x86_64 and i386 with the following comment:\n/* Long double constants are slow on these arches, and broken on i386. */\nThis is most likely old gcc bug related to the default x87 fpu\nprecision setting (it's double instead of double extended on BSD).\n"},{"hash":"d9c1d72cdc993f3f701f0eea74f370420582e5f6","date":"2012-03-19T17:58:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"bug fix: wrong opcode for writing long long\n"},{"hash":"c3587effe27a3ac8c1406f064b7705963be9887a","date":"2012-03-19T18:14:32.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"minor fix in __tanl (get sign properly)\n"},{"hash":"2e8c8fbe7d65ba0026cb084dc8570d94cbc908ff","date":"2012-03-19T18:26:31.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"don't inline __rem_pio2l so the code size is smaller\n"},{"hash":"01fdfd491b5d83b72099fbae14c4a71ed8e0b945","date":"2012-03-19T21:49:03.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix long double const workaround in cbrtl\n"},{"hash":"2786c7d21611b9fa3b2fe356542cf213e7dd0ba4","date":"2012-03-19T21:57:58.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"use scalbn or *2.0 instead of ldexp, fix fmal\n\nSome code assumed ldexp(x, 1) is faster than 2.0*x,\nbut ldexp is a wrapper around scalbn which uses\nmultiplications inside, so this optimization is\nwrong.\n\nThis commit also fixes fmal which accidentally\nused ldexp instead of ldexpl loosing precision.\n\nThere are various additional changes from the\nwork-in-progress const cleanups.\n"},{"hash":"75483499dad38b97f5dabb710635e6a8bbbb1c84","date":"2012-03-19T22:27:45.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"new modff.c code, fix nan handling in modfl\n"},{"hash":"01084202815fefbb7db23825d8b11a570c455e13","date":"2012-03-19T22:30:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"4caa17b2a17d136efedfb63fceef832401063d70","date":"2012-03-19T22:30:45.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"don't try to create non-standard denormalization signal\n\nUnderflow exception is only raised when the result is\ninvalid, but fmod is always exact. x87 has a denormalization\nexception, but that's nonstandard. And the superflous *1.0\nwill be optimized away by any compiler that does not honor\nsignaling nans.\n"},{"hash":"b03255af77776703c8d48819e824d09f6f54ba86","date":"2012-03-19T22:39:47.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix remainder*.c: remove useless long double cast\n"},{"hash":"0cbb65479147ecdaa664e88cc2a5a925f3de502f","date":"2012-03-19T22:41:19.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"code cleanup of named constants\n\nzero, one, two, half are replaced by const literals\nThe policy was to use the f suffix for float consts (1.0f),\nbut don't use suffix for long double consts (these consts\ncan be exactly represented as double).\n"},{"hash":"634c3a63027aa4a693b64fae0e2f6e1635558e93","date":"2012-03-19T22:55:06.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"acb744921b73f5a73803e533e5e4a4896d164a26","date":"2012-03-20T01:55:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix exp asm\n\nexponents (base 2) near 16383 were broken due to (1) wrong cutoff, and\n(2) inability to fit the necessary range of scalings into a long\ndouble value.\n\nas a solution, we fall back to using frndint/fscale for insanely large\nexponents, and also have to special-case infinities here to avoid\ninf-inf generating nan.\n\nthankfully the costly code never runs in normal usage cases.\n"},{"hash":"97721a5508415a2f10eb068e022093811c9ff8be","date":"2012-03-20T02:07:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"0b0735af457e599a26a5f82f9e4615c60deac161","date":"2012-03-20T02:13:26.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"804fbf0b8c00fd4e2f37ef0769a610614d06138f","date":"2012-03-20T03:08:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use alternate formula for acos asm to avoid loss of precision\n"},{"hash":"c879a9592f09a49c1807ee95d4305c406f44882e","date":"2012-03-20T03:09:14.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"7513d3ecabb998e2c8c4cb9ed5de48c4b64a166b","date":"2012-03-20T03:53:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remquo asm: return quotient mod 8, as intended by the spec\n\nthis is a lot more efficient and also what is generally wanted.\nperhaps the bit shuffling could be more efficient...\n"},{"hash":"baa43bca0a051e8deb0d6a9a8882ceeea5c27249","date":"2012-03-20T04:51:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize scalbn family\n\nthe fscale instruction is slow everywhere, probably because it\ninvolves a costly and unnecessary integer truncation operation that\nends up being a no-op in common usages. instead, construct a floating\npoint scale value with integer arithmetic and simply multiply by it,\nwhen possible.\n\nfor float and double, this is always possible by going to the\nnext-larger type. we use some cheap but effective saturating\narithmetic tricks to make sure even very large-magnitude exponents\nfit. for long double, if the scaling exponent is too large to fit in\nthe exponent of a long double value, we simply fallback to the\nexpensive fscale method.\n\non atom cpu, these changes speed up scalbn by over 30%. (min rdtsc\ntiming dropped from 110 cycles to 70 cycles.)\n"},{"hash":"03c52e137a28f65519bf6e7c303e5bd25df6e929","date":"2012-03-20T09:25:02.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"1e2fea632b0257745ece5379378a1485f119602a","date":"2012-03-20T14:17:15.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix a cbrtl.c regression and remove x87 precision setting\n"},{"hash":"615bbd365f322cd8d0b1a4383ee0a6ce8e35b33b","date":"2012-03-20T18:59:50.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"clean up powl.c\nfix special cases, use multiplication instead of scalbnl\n"},{"hash":"f1347a3a453ce38bf55cd92f5922311235810fd1","date":"2012-03-20T19:04:53.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"clean up pow.c and powf.c\nfix comments about special cases\n"},{"hash":"8c6fc860a97f79146bf5c092d5cfb90fa6d9355a","date":"2012-03-20T19:08:35.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"remove a fixme comment\n"},{"hash":"91c28f61f43ba029166772e8ac25808ea3c3dc98","date":"2012-03-20T21:49:19.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"nearbyint optimization (only clear inexact when necessary)\n\nold code saved/restored the fenv (the new code is only as slow\nas that when inexact is not set before the call, but some other\nflag is set and the rounding is inexact, which is rare)\n\nbefore:\nbench_nearbyint_exact              5000000 N        261 ns/op\nbench_nearbyint_inexact_set        5000000 N        262 ns/op\nbench_nearbyint_inexact_unset      5000000 N        261 ns/op\n\nafter:\nbench_nearbyint_exact             10000000 N         94.99 ns/op\nbench_nearbyint_inexact_set       25000000 N         65.81 ns/op\nbench_nearbyint_inexact_unset     10000000 N         94.97 ns/op\n"},{"hash":"ad47d45e9da8df364cb0a61b6146d51c196c8891","date":"2012-03-20T23:44:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"upgrade to latest upstream TRE regex code (0.8.0)\n\nthe main practical results of this change are\n1. the regex code is no longer subject to LGPL; it's now 2-clause BSD\n2. most (all?) popular nonstandard regex extensions are supported\n\nI hesitate to call this a \"sync\" since both the old and new code are\nheavily modified. in one sense, the old code was \"more severely\"\nmodified, in that it was actively hostile to non-strictly-conforming\nexpressions. on the other hand, the new code has eliminated the\nuseless translation of the entire regex string to wchar_t prior to\ncompiling, and now only converts multibyte character literals as\nneeded.\n\nin the future i may use this modified TRE as a basis for writing the\nlong-planned new regex engine that will avoid multibyte-to-wide\ncharacter conversion entirely by compiling multibyte bracket\nexpressions specific to UTF-8.\n"},{"hash":"58bf74850f5f7286dc290aa22ad982f50620a1c8","date":"2012-03-20T23:51:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"80949ccdc6656c51292b4260b6e8d7b493ca6c45","date":"2012-03-21T01:10:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"limits.h: support gcc's -funsigned-char\n\nsome software apparently uses this and breaks with musl due to\nmismatching definitions...\n"},{"hash":"30df206cb0c66848142898115d301a0d80333d0f","date":"2012-03-21T03:29:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"x86_64 math asm, long double functions only\n\nthis has not been tested heavily, but it's known to at least assemble\nand run in basic usage cases. it's nearly identical to the\ncorresponding i386 code, and thus expected to be just as correct or\njust as incorrect.\n"},{"hash":"25501c1079756c9b438842da649585c2a6983c24","date":"2012-03-21T04:47:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial, very primitive strfmon\n"},{"hash":"47db8903f61e20aba53adfc987dfb576d22a0b81","date":"2012-03-21T16:42:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix DECIMAL_DIG definitions\n\nDECIMAL_DIG is not the same as LDBL_DIG\n\ntype_DIG is the maximimum number of decimal digits that can survive a\nround trip from decimal to type and back to decimal.\n\nDECIMAL_DIG is the minimum number of decimal digits required in order\nfor any floating point type to survive the round trip to decimal and\nback, and it is generally larger than LDBL_DIG. since the exact\nformula is non-trivial, and defining it larger than necessary may be\nlegal but wasteful, just define the right value in bits/float.h.\n"},{"hash":"2e0c1fed36be1f1435de79bfc7cdc34824cb5614","date":"2012-03-22T05:00:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sysconf support for dynamic limits (open files and processes)\n"},{"hash":"a4a0c91275788407763b1e5a9da17b777495ca85","date":"2012-03-22T13:54:47.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"acos.s fix: use the formula acos(x) = atan2(sqrt(1-x),sqrt(1+x))\n\nthe old formula atan2(1,sqrt((1+x)/(1-x))) was faster but\ncould give nan result at x=1 when the rounding mode is\nFE_DOWNWARD (so 1-1 == -0 and 2/-0 == -inf), the new formula\ngives -0 at x=+-1 with downward rounding.\n"},{"hash":"132f0a00831d3b64cc6ae35df69d6865516c64b5","date":"2012-03-22T19:36:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"tgmath.h: suppress any existing macro definitions before defining macros\n\nthis is necessary so that we can freely add macro versions of some of\nthe math/complex functions without worrying about breaking tgmath.\n"},{"hash":"13e400b3559666b5e584bdf6f8450aad826b43ae","date":"2012-03-22T19:54:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add creal/cimag macros in complex.h (and use them in the functions defs)\n"},{"hash":"494ba80e9a7f43be76dfee908bbd40ad0b608041","date":"2012-03-23T00:00:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify creal and cimag macros\n"},{"hash":"cb8fce4b4fa4557641e8ca4cc7061a7de9e44749","date":"2012-03-23T00:18:12.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"fix tgammal: don't set the signgam global\n(tgamma must be thread-safe, signgam is for lgamma* functions)\n"},{"hash":"6d8df2b9720b7133a0735c9d5a2aae55021bb2c2","date":"2012-03-23T00:26:04.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"minor rintl.c fix: remove unsupported ldbl format message\n"},{"hash":"a9e85c0a5c690086c652f3a8ae9a109389f671a3","date":"2012-03-23T04:28:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dlerror conform to posix\n\nthe error status is required to be sticky after failure of dlopen or\ndlsym until cleared by dlerror. applications and especially libraries\nshould never rely on this since it is not thread-safe and subject to\nrace conditions, but glib does anyway.\n"},{"hash":"ad2d2b963a4bf9e2631b345c898e8715b36b459e","date":"2012-03-23T05:52:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for hypot and hypotf\n\nspecial care is made to avoid any inexact computations when either arg\nis zero (in which case the exact absolute value of the other arg\nshould be returned) and to support the special condition that\nhypot(±inf,nan) yields inf.\n\nhypotl is not yet implemented since avoiding overflow is nontrivial.\n"},{"hash":"c5ec5b2ce93bd87eb3dbf966d8bf279089f8a35d","date":"2012-03-23T10:16:56.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"db0da51b5cd0b1a50634c7c4f8dbc31f0e581d36","date":"2012-03-24T21:43:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update README to remove information no longer relevant as of 0.8.7\n"},{"hash":"df82f8f2dcbf35ba0e91b8d529491178d896b3b5","date":"2012-03-24T21:46:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update COPYRIGHT status of TRE regex code\n"},{"hash":"bff650df9f1f6a0da80d8894535a41b0a2cca320","date":"2012-03-25T04:21:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add strfmon_l variant (still mostly incomplete)\n"},{"hash":"a9014ac1b9bc813a21752cd40e0a73441860e6e6","date":"2012-03-25T04:42:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"e68a4633e01e1a9ef41fa6dbc39d1d93dca130d3","date":"2012-03-26T11:47:31.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"Merge branch 'master' of git://git.etalabs.net/musl\n"},{"hash":"ad23771c32e5a125eae711ab644cf672e4896c76","date":"2012-03-27T20:01:21.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix typo in i386 remquof and remquol asm\n(fldl instruction was used instead of flds and fldt)\n"},{"hash":"1b229a2098a35795aa20bd09b8c81c5143e64277","date":"2012-03-27T20:12:20.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: remove comment about aliasing lgamma as gamma\nIt is probably not worth supporting gamma.\n(it was already deprecated in 4.3BSD)\n"},{"hash":"bbfbc7edaf992abe1d3d09868be07c4c1cc44db7","date":"2012-03-27T20:17:36.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: add dummy tgamma and tgammaf implementations\n"},{"hash":"cf682072ce16080ebe199e5055f686d81c8416ce","date":"2012-03-27T20:49:37.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix a regression in powl and do some cleanups\npreviously a division was accidentally turned into integer div\n(w = -i/NXT;) instead of long double div (w = -i; w /= NXT;)\n"},{"hash":"9f58d06007818c43b9504e959ef81ab5f113b374","date":"2012-03-28T21:51:09.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix modfl.c bug\nmodfl(+-inf) was wrong on ld80 because the explicit msb\nwas not taken into account during inf vs nan check\n"},{"hash":"f6ceccd92247575e4a35bc94f581a570b8052d43","date":"2012-03-29T12:03:18.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: rewrite modf.c and clean up modff.c\ncleaner implementation with unions and unsigned arithmetic\n"},{"hash":"d79ac8c38f3992b4547d155f5c8e612f51d9b32e","date":"2012-03-29T12:05:16.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: remove x86 modf asm\nthe int part was wrong when -1 < x <= -0 (+0.0 instead of -0.0)\nand the size and performace gain of the asm version was negligible\n"},{"hash":"7eabe8e69044e3683376165934a17210b6b148b9","date":"2012-03-29T12:09:57.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: minor cleanups in ceil and floor\n"},{"hash":"93a18a15e4428d4fe3f239081e0218ac0c69f458","date":"2012-03-31T03:33:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make math.h more c++-friendly\n"},{"hash":"4dbd94112ff74064554054b5ff27a7af547e4899","date":"2012-03-31T03:41:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize signbit macro\n"},{"hash":"4f346b08b33c9265c36fe8a14f5f908b1a9f296a","date":"2012-04-02T03:22:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve name lookup performance in corner cases\n\nthe buffer in getaddrinfo really only matters when /etc/hosts is huge,\nbut in that case, the huge number of syscalls resulting from a tiny\nbuffer would seriously impact the performance of every name lookup.\n\nthe buffer in __dns.c has also been enlarged a bit so that typical\nresolv.conf files will fit fully in the buffer. there's no need to\nmake it so large as to dominate the syscall overhead for large files,\nbecause resolv.conf should never be large.\n"},{"hash":"450f2c4a8515f2c5c9f469082bf69fdef009d26a","date":"2012-04-03T23:16:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless (at best, harmful) feature test checks in aio.h\n"},{"hash":"5bd0ab8af66829af74ed80cac767ce1c041fd767","date":"2012-04-04T04:37:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around nasty gcc bug in the i386 syscall asm\n\nwhen the \"r\" (register) constraint is used to let gcc choose a\nregister, gcc will sometimes assign the same register that was used\nfor one of the other fixed-register operands, if it knows the values\nare the same. one common case is multiple zero arguments to a syscall.\nthis horribly breaks the intended usage, which is swapping the GOT\npointer from ebx into the temp register and back to perform the\nsyscall.\n\npresumably there is a way to fix this with advanced usage of register\nconstaints on the inline asm, but having bad memories about hellish\ncompatibility issues with different gcc versions, for the time being\ni'm just going to hard-code specific registers to be used. this may\nhurt the compiler's ability to optimize, but it will fix serious\nmiscompilation issues.\n\nso far the only function i know what compiled incorrectly is\ngetrlimit.c, and naturally the bug only applies to shared (PIC)\nbuilds, but it may be more extensive and may have gone undetected..\n"},{"hash":"37eaec3ad396ea4502f4aea2395b3b5f5f69a1c6","date":"2012-04-04T15:34:28.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix x86 asin accuracy\nuse (1-x)*(1+x) instead of (1-x*x) in asin.s\nthe later can be inaccurate with upward rounding when x is close to 1\n"},{"hash":"d71d0805f9ad4010529bb94092a2e378b4edac9a","date":"2012-04-09T19:06:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"alloca cannot be a function. #define it to the gcc builtin if possible\n\ngcc makes this mapping by default anyway, but it will be disabled by\n-fno-builtin (and presumably by -std=c99 or similar). for the main\nprogram the error will be reported by the linker, and the issue can\neasily be fixed, but for dynamic-loaded so files, the error cannot be\ndetected until dlopen time, at which point it has become very obscure.\n"},{"hash":"3be616c1df7ee176b5e00b9f493136ca7385ec46","date":"2012-04-09T20:22:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix alloca issue in stdlib.h too\n\nI forgot _GNU_SOURCE also has it declared here...\n"},{"hash":"415c4cd7fdb3e8b7476fbb2be2390f4592cf5165","date":"2012-04-10T15:52:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new floating point parser/converter\n\nthis version is intended to be fully conformant to the ISO C, POSIX,\nand IEEE standards for conversion of decimal/hex floating point\nstrings to float, double, and long double (ld64 or ld80 only at\npresent) values. in particular, all results are intended to be rounded\ncorrectly according to the current rounding mode. further, this\nimplementation aims to set the floating point underflow, overflow, and\ninexact flags to reflect the conversion performed.\n\na moderate amount of testing has been performed (by nsz and myself)\nprior to integration of the code in musl, but it still may have bugs.\n\nso far, only strto(d|ld|f) use the new code. scanf integration will be\ndone as a separate commit, and i will add implementations of the wide\ncharacter functions later.\n"},{"hash":"4fb6aa02c88a6b8b718c0ae982d072aa6ab8559f","date":"2012-04-11T00:25:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unify strtof/strtod/strtold wrappers and fix initial whitespace issue\n"},{"hash":"2162541f38d3f642f5a643010548d62220d55a4d","date":"2012-04-11T01:47:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add \"scan helper getc\" and rework strtod, etc. to use it\n\nthe immediate benefit is a significant debloating of the float parsing\ncode by moving the responsibility for keeping track of the number of\ncharacters read to a different module.\n\nby linking shgetc with the stdio buffer logic, counting logic is\ndefered to buffer refill time, keeping the calls to shgetc fast and\nlight.\n\nin the future, shgetc will also be useful for integrating the new\nfloat code with scanf, which needs to not only count the characters\nconsumed, but also limit the number of characters read based on field\nwidth specifiers.\n\nshgetc may also become a useful tool for simplifying the integer\nparsing code.\n"},{"hash":"c5ff29699cb3cccf8dcd8e44ddf4dcb7599e585c","date":"2012-04-11T02:38:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"set errno properly when parsing floating point\n"},{"hash":"633a26c1e69b6a977d16086834f2b937e0378002","date":"2012-04-11T03:05:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix potential overflow in exponent reading\n\nnote that there's no need for a precise cutoff, because exponents this\nlarge will always result in overflow or underflow (it's impossible to\nread enough digits to compensate for the exponent magnitude; even at a\nfew nanoseconds per digit it would take hundreds of years).\n"},{"hash":"38b3f1fea8fe4f2c590c1a9438d219291a7bfcd2","date":"2012-04-11T03:41:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix float scanning of certain values ending in zeros\n\nfor example, \"1000000000\" was being read as \"1\" due to this loop\nexiting early. it's necessary to actually update z and zero the\nentries so that the subsequent rounding code does not get confused;\nbefore i did that, spurious inexact exceptions were being raised.\n"},{"hash":"48bb81adf80a439133c376d50ea814687fb5169f","date":"2012-04-11T04:18:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug parsing lone zero followed by junk, and hex float over-reading\n"},{"hash":"7ef1a9bba56aa756d8166c4c93cf4a178d6c0c0c","date":"2012-04-11T04:26:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect initial count in shgetc when data is already buffered\n"},{"hash":"1bdd5c8b9868ebc092074e078604acb80546e43f","date":"2012-04-11T18:11:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize floatscan: avoid excessive upscaling\n\nupscaling by even one step too much creates 3-29 extra iterations for\nthe next loop. this is still suboptimal since it always goes by 2^29\nrather than using a smaller upscale factor when nearing the target,\nbut performance on common, small-magnitude, few-digit values has\nalready more than doubled with this change.\n\nmore optimizations on the way...\n"},{"hash":"5837a0bb6b5cf516f79527e837368af0b494d51a","date":"2012-04-11T18:20:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify/debloat radix point alignment code in floatscan\n\nnow that this is the first operation, it can rely on the circular\nbuffer contents not being wrapped when it begins. we limit the number\nof digits read slightly in the initial parsing loops too so that this\ncode does not have to consider the case where it might cause the\ncircular buffer to wrap; this is perfectly fine because KMAX is chosen\nas a power of two for circular-buffer purposes and is much larger than\nit otherwise needs to be, anyway.\n\nthese changes should not affect performance at all.\n"},{"hash":"4054da9ba062c694dc4fde5c577fcb6da7743bc9","date":"2012-04-11T18:51:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize floatscan downscaler to skip results that won't be needed\n\nwhen upscaling, even the very last digit is needed in cases where the\ninput is exact; no digits can be discarded. but when downscaling, any\ndigits less significant than the mantissa bits are destined for the\ngreat bitbucket; the only influence they can have is their presence\n(being nonzero). thus, we simply throw them away early. the result is\nnearly a 4x performance improvement for processing huge values.\n\nthe particular threshold LD_B1B_DIG+3 is not chosen sharply; it's\nsimply a \"safe\" distance past the significant bits. it would be nice\nto replace it with a sharp bound, but i suspect performance will be\ncomparable (within a few percent) anyway.\n"},{"hash":"cc00f05632e5d7cbfb8ce49f4b0dfd59c3cf611d","date":"2012-04-11T18:59:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote branch 'nsz/master'\n"},{"hash":"5595de69608cbb250a8019d1ec5db22bcd32795b","date":"2012-04-12T00:25:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some more useful suggested options to config.mak template\n"},{"hash":"96acdae944f44a4a757cd98de297490fea2dddb5","date":"2012-04-12T01:29:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stupid typo in floatscan that caused excess rounding of some values\n"},{"hash":"470fecdd3aa90a1787a4f678a8cb76d3641fa9a9","date":"2012-04-12T03:08:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert invalid optimization in floatscan\n"},{"hash":"fe514951af4e67f05d17d796251af9a8229761eb","date":"2012-04-12T04:16:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize more integer cases in floatscan; comment the whole procedure\n"},{"hash":"3ddeedd8f75be8a3dc2a167746f36f871d7e595a","date":"2012-04-12T04:25:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove magic numbers from floatscan\n"},{"hash":"54222d1efc5239d3fc8c528672bd52bfd8dad813","date":"2012-04-13T07:26:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix spurious overflows in strtoull with small bases\n\nwhenever the base was small enough that more than one digit could\nstill fit after UINTMAX_MAX/36-1 was reached, only the first would be\nallowed; subsequent digits would trigger spurious overflow, making it\nimpossible to read the largest values in low bases.\n"},{"hash":"26832d045f46e68b79277916edbad7512d253704","date":"2012-04-13T07:59:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use macros instead of inline functions in shgetc.h\n\nat -Os optimization level, gcc refuses to inline these functions even\nthough the inlined code would roughly the same size as the function\ncall, and much faster. the easy solution is to make them into macros.\n"},{"hash":"11f3e33f9bbb31330b1dc4a51c07f8c58aef2fdd","date":"2012-04-13T08:38:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use fast version of the int reading code for the high-order digits too\n\nthis increases code size slightly, but it's considerably faster,\nespecially for power-of-2 bases.\n"},{"hash":"b6dbdc69b6d969b416428e0eb467eefbe5a7837f","date":"2012-04-13T22:40:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken regerror (typo) and missing message\n"},{"hash":"386b34a07bc65b6b0627d04105f60fb5fa79df33","date":"2012-04-13T23:50:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove invalid code from TRE\n\nTRE wants to treat + and ? after a +, ?, or * as special; ? means\nungreedy and + is reserved for future use. however, this is\nnon-conformant. although redundant, these redundant characters have\nwell-defined (no-op) meaning for POSIX ERE, and are actually _literal_\ncharacters (which TRE is wrongly ignoring) in POSIX BRE mode.\n\nthe simplest fix is to simply remove the unneeded nonstandard\nfunctionality. as a plus, this shaves off a small amount of bloat.\n"},{"hash":"0115a6ed964f4afe87847a252363801e96194f0b","date":"2012-04-14T03:06:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename __sa_restorer to sa_restorer in struct sigaction\n\nthis is legal since sa_* is in the reserved namespace for signal.h,\nper posix. note that the sa_restorer field is not used anywhere, so\nprograms that are trying to use it may still break, but at least\nthey'll compile. if it turns out such programs actually need to be\nable to set their own sa_restorer to function properly, i'll add the\nnecessary code to sigaction.c later.\n"},{"hash":"b9dd43db04ca312c3c1cc6ddc77e8f5bf559e72d","date":"2012-04-15T02:32:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signedness error handling invalid multibyte sequences in regexec\n\nthe \"< 0\" test was always false due to use of an unsigned type. this\nresulted in infinite loops on 32-bit machines (adding -1U to a pointer\nis the same as adding -1) and crashes on 64-bit machines (offsetting\nthe string pointer by 4gb-1b when an illegal sequence was hit).\n"},{"hash":"a68af229266d1a937a98fc7474ebe09b7c3c72b3","date":"2012-04-15T21:01:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add F_SETSIG and F_GETSIG (linux specific) to fcntl.h\n\nF_* is in the reserved namespace so no feature test is needed\n"},{"hash":"67b25fe0a8947de93e3eddd36dae24a9fec12ade","date":"2012-04-15T21:05:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move F_DUPFD_CLOEXEC out of bits\n\nfcntl values 1024 and up are universal, arch-independent. later I'll\nadd some of the other linux-specific ones for notify, leases, pipe\nsize, etc. here too.\n"},{"hash":"2ac580fdfe1daf9924f221dc98878ae480306bfa","date":"2012-04-16T05:53:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"floatscan: fix incorrect count of leading nonzero digits\n\nthis off-by-one error was causing values with just one digit past the\ndecimal point to be treated by the integer case. in many cases it\nwould yield the correct result, but if expressions are evaluated in\nexcess precision, double rounding may occur.\n"},{"hash":"f007bb854b0b2d2d12cd45a8feb674fa9abe70b2","date":"2012-04-16T05:55:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken shgetc limiter logic (wasn't working)\n"},{"hash":"bef7a85e45ccc4b40958ca6d94894ca0d27e8291","date":"2012-04-16T17:03:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in wordfree if we_offs is not initialized by the caller\n\nI'm not sure if it's legal for wordexp to modify this field, but this\nis the only easy/straightforward fix, and applications should not\ncare. if it's an issue, i can work out a different (but more complex)\nsolution later.\n"},{"hash":"0d5df2df4f57cf28adf91110f70cdee0bc830151","date":"2012-04-16T17:25:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"wordexp must set the we_offs entries of we_wordv to null pointers\n"},{"hash":"cc762434d91a2f441a1d2f44962ab1d4854b607b","date":"2012-04-16T19:36:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buggy limiter handling in shgetc\n\nthis is needed for upcoming new scanf\n"},{"hash":"18efeb320b763e541a7dbf61a7da1cbe13ab2be9","date":"2012-04-16T20:03:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new scanf implementation and corresponding integer parser/converter\n\nadvantages over the old code:\n- correct results for floating point (old code was bogus)\n- wide/regular scanf separated so scanf does not pull in wide code\n- well-defined behavior on integers that overflow dest type\n- support for %[a-b] ranges with %[ (impl-defined by widely used)\n- no intermediate conversion of fmt string to wide string\n- cleaner, easier to share code with strto* functions\n- better standards conformance for corner cases\n\nthe old code remains in the source tree, as the wide versions of the\nscanf-family functions are still using it. it will be removed when no\nlonger needed.\n"},{"hash":"96e9773eb764afa649b099a6e283dba4c69389a9","date":"2012-04-16T20:55:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use the new integer parser (FILE/shgetc based) for strtol, wcstol, etc.\n"},{"hash":"a4310aa2f592779118912fe5e7f6df4fd6b6d64a","date":"2012-04-16T21:17:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid hitting eof in wcstol\n\nshunget cannot unget eof status, causing wcstol to leave endptr\npointing to the wrong place when scanning, for example, L\"0x\". cheap\nfix is to make the read function provide an infinite stream of bogus\ncharacters rather than eof. really this is something of a design flaw\nin how the shgetc system is used for strto* and wcsto*; in the long\nterm, I believe multi-character unget should be scrapped and replaced\nwith a function that can subtract from the f->shcnt counter.\n"},{"hash":"f94cbdeb4181e604e193646af16a2e5daa3dd718","date":"2012-04-16T21:26:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement wcstod and family\n\nnot heavily tested but these functions appear to work correctly\n"},{"hash":"9d2a15a64e03b2e369161add728de3139dae5a7f","date":"2012-04-16T22:37:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"better description for errno==0\n"},{"hash":"cc3a4466605fe8dfc31f3b75779110ac93055bc1","date":"2012-04-17T01:50:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix %lf, etc. with printf\n\nthe l prefix is redundant/no-op with printf, since default promotions\nalways promote floats to double; however, it is valid, and printf was\nwrongly rejecting it.\n"},{"hash":"b5a8b28915aad17b6f49ccacd6d3fef3890844d1","date":"2012-04-17T14:58:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buffer overflow in vfprintf on long writes to unbuffered files\n\nvfprintf temporarily swaps in a local buffer (for the duration of the\noperation) when the target stream is unbuffered; this both simplifies\nthe implementation of functions like dprintf (they don't need their\nown buffers) and eliminates the pathologically bad performance of\nwriting the formatted output with one or more write syscalls per\nformatting field.\n\nin cases like dprintf where we are dealing with a virgin FILE\nstructure, everything worked correctly. however for long-lived files\n(like stderr), it's possible that the buffer bounds were already set\nfor the internal zero-size buffer. on the next write, __stdio_write\nwould pick up and use the new buffer provided by vfprintf, but the\nbound (wend) field was still pointing at the internal zero-size\nbuffer's end. this in turn allowed unbounded writes to the temporary\nbuffer.\n"},{"hash":"b7a2761780c28cd0167ce4e51623e42298096708","date":"2012-04-17T15:08:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"also ensure that write buffer is bounded when __stdio_write returns\n\nassuming other code is correct, this should be a no-op, but better to\nbe safe...\n"},{"hash":"03de77f5210addfd2ca2b35137152edfe2ab70be","date":"2012-04-17T15:50:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid null pointer dereference on %*p fields in scanf\n"},{"hash":"8b57a81577980e4b440addaa8f2bbed454be2a59","date":"2012-04-17T17:17:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid depending on POSIX symbol in code used from plain C functions\n"},{"hash":"73ec1d0495bb676012fd69491900ca8beb989ef7","date":"2012-04-17T18:19:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"introduce new wide scanf code and remove the last remnants of old scanf\n\nat this point, strto* and all scanf family functions are using the new\nunified integer and floating point parser/converter code.\n\nthe wide scanf is largely a wrapper for ordinary byte-based scanf;\nsince numbers can only contain ascii characters, only strings need to\nbe handled specially.\n"},{"hash":"e0d9f780d171326a12bf9daf2af1e2f0c51c89f6","date":"2012-04-17T18:22:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some bugs in scanf %[ handling detected while writing the wide version\n"},{"hash":"00722515729bb6943dc84a8c4aa9ccd715e48e74","date":"2012-04-17T23:37:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wide scanf to respect field width for strings\n"},{"hash":"99fbf4cfdbb3b67f30d595a7f1c535ca17c2f969","date":"2012-04-18T01:17:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make wide scanf %[ respect width\n"},{"hash":"bb477f9fd4a69bac77c70d2099272ee1ac17e62c","date":"2012-04-18T01:17:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of int parser to unget an initial mismatching character\n"},{"hash":"dad40407705801c8bb597d5bc9a4eda562cae890","date":"2012-04-18T02:05:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure to read infinity in scanf\n\nthis code worked in strtod, but not in scanf. more evidence that i\nshould design a better interface for discarding multiple tail\ncharacters than just calling unget repeatedly...\n"},{"hash":"9ab180fa57f3a01b2004c3d19ad8dc3732f6069d","date":"2012-04-18T02:15:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken %s and %[ with no width specifier in wide scanf\n"},{"hash":"2dd5dc78d4502381e2933137ed525acf339cb383","date":"2012-04-18T02:41:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix over-read in %ls with non-wide scanf\n"},{"hash":"a12aa2918535fd370419bd24b50a33974091c5a7","date":"2012-04-18T03:08:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure to distinguish input/match failure in wide %[ scanf\n\nthis also includes a related fix for vswscanf's read function, which\nwas returning a spurious (uninitialized) character for empty strings.\n"},{"hash":"bdeb184c3d08ea5017e1570e0f0431e9d7fd02fd","date":"2012-04-18T03:35:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wide scanf's handling of input failure on %c, and simplify %[\n"},{"hash":"1ff3e6fa2573ece62c53d7e22563a94f8398d0e1","date":"2012-04-18T07:53:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in exponent reading code or floats\n\nthis was basically harmless, but could have resulted in misreading\ninputs with more than a few gigabytes worth of digits..\n"},{"hash":"ef2c4fd91ffb0b333f7258e3d62266414d00702e","date":"2012-04-18T08:40:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.8\n"},{"hash":"ed0e3a357e5a5aef394b0b94d13c3a5c078f67f2","date":"2012-04-18T15:41:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect macro name for MATH_ERREXCEPT in math.h\n"},{"hash":"ba6a9e7734aaff8f4e7d49b888f9dd1954bc92b1","date":"2012-04-18T16:22:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"legacy junk compatibility grab-bag\n\n- add the rest of the junk traditionally in sys/param.h\n- add prototypes for some nonstandard functions\n- add _GNU_SOURCE to their source files so the compiler can check proto\n"},{"hash":"769d3d349824fb45218972a1cf0e912cfee62d51","date":"2012-04-18T17:11:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix header typo\n"},{"hash":"cb81b6947c0277a6a27ddc699d716e9cf2b524aa","date":"2012-04-19T16:47:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix really bad breakage in strtol, etc.: failure to accept leading spaces\n"},{"hash":"1bf725eda7a06713825b0609c9b39c55cf5ab76a","date":"2012-04-19T16:56:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further fixes to leading space issue (forgot the wide versions)\n"},{"hash":"c5d1adc56c22ead8caa9effcee0518a7a8ff3c06","date":"2012-04-20T02:02:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.9 (bugfix release)\n"},{"hash":"c61312596608bf819b693c04a395f1b4e3e0acf0","date":"2012-04-21T15:45:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken sysconf when correct value is -1\n\nthis caused glib to try to allocate >2gb for getpwnam_r, and probably\nnumerous other problems.\n"},{"hash":"33e7781b5b71eac594b6fa539f6d75939e9b676d","date":"2012-04-21T15:57:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overread (consuming an extra byte) scanning NAN\n\nbug detected by glib test suite\n"},{"hash":"2df2a97a20df22f598810b88409eb6107d23e7e1","date":"2012-04-21T17:50:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"skip leading zeros even after decimal point in floatscan\n\nin principle this should just be an optimization, but it happens to\nalso fix a nasty bug where values like 0.00000000001 were getting\ncaught by the early zero detection path and wrongly scanned as zero.\n"},{"hash":"77731d0ec16027cb0e3a593d5dd9bb906932303e","date":"2012-04-21T18:14:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make floatscan correctly set errno for overflow/underflow\n\ncare is taken that the setting of errno correctly reflects underflow\ncondition. scanning exact denormal values does not result in ERANGE,\nnor does scanning values (such as the usual string definition of\nFLT_MIN) which are actually less than the smallest normal number but\nwhich round to a normal result.\n\nonly the decimal case is handled so far; hex float require a separate\nfix to come later.\n"},{"hash":"80d7859f32c11826c24490cac8a8be48f737cee0","date":"2012-04-21T18:46:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix major breakage in iconv, bogus rejecting of dest charsets\n"},{"hash":"b1b3d3525bbc50a6781f57bfe423c7e18d64f625","date":"2012-04-22T14:37:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add getresuid and getresgid syscall wrappers\n"},{"hash":"8705a0f1afdf6e6eb5d2e325dafb3be7e58f259c","date":"2012-04-22T15:08:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some ugly byte swapping cruft in endian.h\n"},{"hash":"3f4de355ba02b0659ae84b8861f7360658a04b01","date":"2012-04-22T15:19:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in endian.h\n"},{"hash":"02eb568dedadb3d66c2751aba6bea559370ff32c","date":"2012-04-22T18:05:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove redundant (unmaintained) check in floatscan\n\nalso be extra careful to avoid wrapping the circular buffer early\n"},{"hash":"58f430c1e0255c0b28aed1e9bf3d892c18c06631","date":"2012-04-22T18:32:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new gcc wrapper, entirely specfile based\n\nthe _concept_ of this wrapper has been tested extensively, but the\nintegration with the build/install system, and using a persistent\nspecfile rather than one generated at build-time, have not been\nheavily tested and may need minor tweaks.\n\nthis approach should be a lot more robust (and easier to improve) than\nwriting a shell script that's responsible for trying to mimic gcc's\nlogic about whether it's compiling or linking, building shared libs or\nexecutable files, etc. it's also lighter weight and should result in\nmildly faster builds when using the wrapper.\n"},{"hash":"431a4cd4df25dd9cc9fd699c59036f896aef1003","date":"2012-04-22T18:39:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"getdtablesize is not standard; move it to its correct spot in unistd.h\n"},{"hash":"90da74ef51ddd51924042ee42b5e766908e9980c","date":"2012-04-22T18:41:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement getusershell, etc. legacy functions\n\nI actually wrote these a month ago but forgot to integrate them. ugly,\nprobably-harmful-to-use functions, but some legacy apps want them...\n"},{"hash":"a5d10eb1f587a13a513504ffb5d8e6a8738eee6f","date":"2012-04-23T16:03:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dlerror produce informative results\n\nnote that dlerror is specified to be non-thread-safe, so no locking is\nperformed on the error flag or message aside from the rwlock already\nheld by dlopen or dlsym. if 2 invocations of dlsym are generating\nerrors at the same time, they could clobber each other's results, but\nthe resulting string, albeit corrupt, will still be null-terminated.\nany use of dlerror in such a situation could not be expected to give\nmeaningful results anyway.\n"},{"hash":"7e38b1ea2bf1a0817942275cea89c959bf446d87","date":"2012-04-23T19:25:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"destubify iswalpha and update iswpunct to unicode 6.1\n\nalpha is defined as unicode property \"Alphabetic\" plus category Nd\nminus ASCII digits minus 2 special-cased Thai punctuation marks\nsupposedly misclassified by Unicode as letters.\n\npunct is defined as all of unicode except control, alphanumeric, and\nspace characters.\n\nthe tables were generated by a simple tool based on the code posted\npreviously to the mailing list. in the future, this and other code\nused for maintaining locale/iconv/i18n data will be published either\nin the main source repository or in a separate locale data generation\nrepository.\n"},{"hash":"640fe75ce8e0ca3a1af98197a93e9aa4884f79bf","date":"2012-04-23T20:02:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix spurious punct class for some surrogate codepoints (invalid)\n\nthis happened due to their entries in UnicodeData.txt\n"},{"hash":"38b5d7d0526be24fba0f0789407727e4e7950e63","date":"2012-04-23T20:10:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize iswprint\n"},{"hash":"1a63a9fc30e7a1f1239e3cedcb5041e5ec1c5351","date":"2012-04-23T23:19:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sync case mappings with unicode 6.1\n\nalso special-case ß (U+00DF) as lowercase even though it does not have\na mapping to uppercase. unicode added an uppercase version of this\ncharacter but does not map it, presumably because the uppercase\nversion is not actually used except for some obscure purpose...\n"},{"hash":"1b0ce9af6d2aa7b92edaf3e9c631cb635bae22bd","date":"2012-04-24T08:23:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new wcwidth implementation (fast table-based)\n\ni tried to go with improving the old binary-search-based algorithm,\nbut between growth in the number of ranges, bad performance, and lack\nof confidence in the binary search code's stability under changes in\nthe table, i decided it was worth the extra 1.8k to have something\nclean and maintainable.\n\nalso note that, like the alpha and punct tables, there's definitely\nroom to optimize the nonspacing/wide tables by overlapping subtables.\nthis is not a high priority, but i've begun looking into how to do it,\nand i suspect the table sizes can be roughly halved. if that turns out\nto be true, the new, fast, table-based implementation will be roughly\nthe same size as if i had just extended the old binary search one.\n"},{"hash":"f34d0ea511e552851c8c6148fb113816f41e6759","date":"2012-04-24T10:36:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new internal locking primitive; drop spinlocks\n\nwe use priority inheritance futexes if possible so that the library\ncannot hit internal priority inversion deadlocks in the presence of\nrealtime priority scheduling (full support to be added later).\n"},{"hash":"e7655ed37bc9c2d79d921af4f287ee5cf2788661","date":"2012-04-24T17:55:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"internal locks: new owner of contended lock must set waiters flag\n\nthis bug probably would have gone unnoticed since it's only used in\nthe fallback code for systems where priority-inheritance locking\nfails. unfortunately this approach results in one spurious wake\nsyscall on the final unlock, when there are no waiters remaining. the\nalternative (possibly better) would be to use broadcast wakes instead\nof reflagging the waiter unconditionally, and let each waiter reflag\nitself; this saves one syscall at the expense of invoking the\n\"thundering herd\" effect (worse performance degredation) when there\nare many waiters.\n\nideally we would be able to update all of our locks to use an array of\ntwo ints rather than a single int, and use a separate counter system\nlike proper mutexes use; then we could avoid all spurious wake calls\nwithout resorting to broadcasts. however, it's not clear to me that\npriority inheritance futexes support this usage. the kernel sets the\nwaiters flag for them (just like we're doing now) and i can't tell if\nit's safe to bypass the kernel when unlocking just because we know\n(from private data, the waiter count) that there are no waiters. this\nis something that could be explored in the future.\n"},{"hash":"4750cf4202c29a895639b89099a7bdbe9ae422b6","date":"2012-04-24T20:32:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ditch the priority inheritance locks; use malloc's version of lock\n\ni did some testing trying to switch malloc to use the new internal\nlock with priority inheritance, and my malloc contention test got\n20-100 times slower. if priority inheritance futexes are this slow,\nit's simply too high a price to pay for avoiding priority inversion.\nmaybe we can consider them somewhere down the road once the kernel\nfolks get their act together on this (and perferably don't link it to\nglibc's inefficient lock API)...\n\nas such, i've switch __lock to use malloc's implementation of\nlightweight locks, and updated all the users of the code to use an\narray with a waiter count for their locks. this should give optimal\nperformance in the vast majority of cases, and it's simple.\n\nmalloc is still using its own internal copy of the lock code because\nit seems to yield measurably better performance with -O3 when it's\ninlined (20% or more difference in the contention stress test).\n"},{"hash":"e4d35ea9cfb612bcfbaf141559d62e1dca9f13c4","date":"2012-04-24T20:49:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add another example option to dist/config.mak\n"},{"hash":"848d30a1e5f75988be4b291a431713e78ae09f79","date":"2012-04-24T22:06:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use signed char rather than plain char for int8_t\n\notherwise this BADLY breaks if -funsigned-char is passed to gcc\n"},{"hash":"60872cf9c93687e771c1b8bc41bb006bdcdc2e45","date":"2012-04-24T22:07:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"first attempt at enabling stack protector support\n\nthe code is written to pre-init the thread pointer in static linked\nprograms that pull in __stack_chk_fail or dynamic-linked programs that\nlookup the symbol. no explicit canary is set; the canary will be\nwhatever happens to be in the thread structure at the offset gcc\nhard-coded. this can be improved later.\n"},{"hash":"3ec8d29c754542c3f4b3d6c07ab6db17213aff17","date":"2012-04-25T04:05:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"gdb shared library debugging support\n\nprovide the minimal level of dynamic linker-to-debugger glue needed to\nlet gdb find loaded libraries and load their symbols.\n"},{"hash":"0bd7ac05d1c6691a7ff33c0145adcafb4f4803df","date":"2012-04-25T18:35:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.8.10\n"},{"hash":"2b87a5db82833c6d148b70d29a33cd51fff491e3","date":"2012-04-26T16:24:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update fnmatch to POSIX 2008 semantics\n\nan invalid bracket expression must be treated as if the opening\nbracket were just a literal character. this is to fix a bug whereby\nPOSIX left the behavior of the \"[\" shell command undefined due to it\nbeing an invalid bracket expression.\n"},{"hash":"a1b442335d6382b0dc0363fdd3a5604493b6a9c7","date":"2012-04-27T05:39:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support FLT_EVAL_METHOD changing on x86 with gcc -msse2 -mfpmath=sse\n\nif the compiler provides a value, use it; otherwise fallback to the\nplatform default (2).\n"},{"hash":"45b38550eec7de580d790440154791c67cae8475","date":"2012-04-28T22:05:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new fnmatch implementation\n\nunlike the old one, this one's algorithm does not suffer from\npotential stack overflow issues or pathologically bad performance on\ncertain patterns. instead of backtracking, it uses a matching\nalgorithm which I have not seen before (unsure whether I invented or\nre-invented it) that runs in O(1) space and O(nm) time. it may be\npossible to improve the time to O(n), but not without significantly\ngreater complexity.\n"},{"hash":"8b7112191020f1e44386a6311e0cb62ee4cea2ef","date":"2012-04-29T04:20:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix longstanding missing static in mq_notify (namespace pollution)\n"},{"hash":"50da5c264fd84ea2de8cf75bf39ceb81a4eecd71","date":"2012-04-29T23:54:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux-specific unshare syscall wrapper\n"},{"hash":"aa859403886ed4b50da36e7fe101f7431856c004","date":"2012-04-29T23:54:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix float_t and double_t defs on x86 when -mfpmath=sse -msse2 is used\n"},{"hash":"0e4a995213620630005a14f32c089879f7c0315e","date":"2012-04-30T00:31:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new math asm (abs/rounding) for x86_64\n\nuntested\n"},{"hash":"e5a9b50e973aadff2e6303d01be8807b1fb9c325","date":"2012-04-30T00:36:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in the x86_64 rounding asm\n"},{"hash":"28c5d46d844684feba2ddfc9027ea308d8d3612c","date":"2012-04-30T06:56:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one error that caused uninitialized memory read in floatscan\n\nthis caused misreading of certain floating point values that are exact\nmultiples of large powers of ten, unpredictable depending on prior\nstack contents.\n"},{"hash":"63374ee233c44891db80e6600d7a5a8c82e4ccca","date":"2012-04-30T07:00:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make stack protector work with gcc configured for non-tls canary\n"},{"hash":"f6819755779a084bf2f82cb90175a4d9a018de73","date":"2012-04-30T07:26:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"first try at writing an efficient and \"correct\" exp10\n\nthis is a nonstandard function so it's not clear what conditions it\nshould satisfy. my intent is that it be fast and exact for positive\nintegral exponents when the result fits in the destination type, and\nfast and correctly rounded for small negative integral exponents.\notherwise we aim for at most 1ulp error; it seems to differ from pow\nby at most 1ulp and it's often 2-5 times faster than pow.\n"},{"hash":"da5d89d42fb47c648fb83645e5e4a55bae907032","date":"2012-05-01T01:32:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add C stub for sqrtl (already implemented in asm on i386 and x86_64)\n"},{"hash":"a917c03706d94564082d5ccff032a3e2c3dad537","date":"2012-05-01T04:07:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support alternate glibc name pow10 for exp10\n"},{"hash":"d86d2829abc116c3e8741aa92727a5c55023088a","date":"2012-05-01T18:31:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove objcopy --weaken from the makefile\n\nas far as I can tell, it's not useful and never way. I wrote it way\nback under the assumption that non-weak symbols in the POSIX or\nextension namespace could conflict with legitimate uses of the same\nsymbol name in the main program or other libraries, but that does not\nseem to be the case.\n"},{"hash":"d76eafcbdc099abfc1b6d09829349f01c0bfcacf","date":"2012-05-01T23:30:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorganize Makefile to support \"least surprise\" config/make semantics\n\nthe major change here is that CFLAGS is now a variable that can be\nchanged entirely under user control, without causing essential flags\nto be lost. previously, \"CFLAGS += ...\" was valid in config.mak, but\nusing \"CFLAGS = ...\" in config.mak would have badly broken the build\nprocess unless the user took care to copy the necessary flags out of\nthe main Makefile.\n\nI have also added a distclean target that removes config.mak.\n"},{"hash":"6f0cf3061b2f68f8a43e3417cc61965ffaa2fe95","date":"2012-05-02T01:20:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove minimal linux kernel headers\n\nthese were at best of limited usefulness (for bootstrapping new\nsystems, mainly) and at worst caused real kernel headers to get\noverwritten when upgrading libc.\n\nin case they're needed by anyone, the exact same files are now\navailable in a new git repository:\n\ngit://git.etalabs.net/mini-lkh\n"},{"hash":"485fb14ab414ef7fde4469a51b116281758a4aa0","date":"2012-05-02T17:59:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix longstanding exit logic bugs in mbsnrtowcs and wcsnrtombs\n\nthese are POSIX 2008 (previously GNU extension) functions that are\nrarely used. apparently they had never been tested before, since the\nend-of-string logic was completely missing. mbsnrtowcs is used by\nmodern versions of bash for its glob implementation, and and this bug\nwas causing tab completion to hang in an infinite loop.\n"},{"hash":"c9dea48f84cd772ac250c091356dd6ef956ea3f6","date":"2012-05-03T00:56:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove attempts to be pie-compatible from i386 crt1.s\n\nit does not work; after further consideration, a separate Scrt1.s for\npie really is essential. it would be nice if the unified approach\nworked, but the linker fails to generate the correct PLT entries and\ninstead puts textrels in the main program, which don't work because\nthe kernel maps the text read-only.\n\nnew Scrt1.s will be committed soon in place of this.\n"},{"hash":"83023d1b50297cd2aa0fe4cbd2a0539462bb7c48","date":"2012-05-03T01:01:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"PIE support for i386\n"},{"hash":"faab12bececc03ae0472db99504b0fefc0b8e059","date":"2012-05-03T01:03:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consistency cleanup: removed redundant size suffixed from i386 asm\n"},{"hash":"94167cafd5a8f4f8309c3f82f5bda17f4767cb60","date":"2012-05-03T01:14:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"PIE support for x86_64 (untested)\n"},{"hash":"2be87702b79c02b1acf68d6159a4fb399d2c9a57","date":"2012-05-03T01:16:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some junk from x86_64 start files\n\nlooks like nik copied these \"extra arguments\" from the i386 code.\nthey're not actually arguments there, just 1-byte instructions to\nmake sure the stack is aligned to 16 bytes after all the other\narguments are pushed. since each push is 8 bytes on x86_64, they\nhappened to have no effect here, but their presence is confusing and a\nminor waste of space.\n"},{"hash":"e765239f334d670e1b68289a2fcaa6b82a3b9666","date":"2012-05-04T00:35:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make all .o files depend on *_impl.h and libc.h\n\nhopefully the annoyance of this will be minimal. these files all\ndefine internal interfaces which can change at any time; if different\nmodules are using different versions of the interfaces, the library\nwill badly break. ideally we would scan and add the dependency only\nfor C files that actually reference the affected interfaces, but for\nnow, err on the side of caution and force a rebuild of everything if\nany of them have changed.\n\nthis commit is in preparation for the upcoming ssp overhaul commit,\nwhich will change internals of the pthread struct.\n"},{"hash":"58aa5f45ed3282751ae118c107ff008d4df765dc","date":"2012-05-04T00:42:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul SSP support to use a real canary\n\npthread structure has been adjusted to match the glibc/GCC abi for\nwhere the canary is stored on i386 and x86_64. it will need variants\nfor other archs to provide the added security of the canary's entropy,\nbut even without that it still works as well as the old \"minimal\" ssp\nsupport. eventually such changes will be made anyway, since they are\nalso needed for GCC/C11 thread-local storage support (not yet\nimplemented).\n\ncare is taken not to attempt initializing the thread pointer unless\nthe program actually uses SSP (by reference to __stack_chk_fail).\n"},{"hash":"ca2d3c6ef45de4943e2fba793131206e491fcdb7","date":"2012-05-04T02:12:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add additional compatibility union member for ipv6 addresses\n\nin6_* is in the reserved namespace, so this is valid\n"},{"hash":"b959d04644d99f27d9f10344e76c079a12bc1ffd","date":"2012-05-04T02:27:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"uglify headers for the sake of junk that compiles with gcc -std=c89/-ansi\n"},{"hash":"61be1cfec1f5da66c68f92a6939e3a38e673c9d6","date":"2012-05-04T03:18:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement stub versions of sched_*\n\nthese actually work, but for now they prohibit actually setting\npriority levels and report min/max priority as 0.\n"},{"hash":"b4560a6da918ce3b63e87a78a3a3956f514e24ce","date":"2012-05-04T03:19:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid setting nondefault scheduler too\n"},{"hash":"2dd8d5e1b8ba1118ff1782e96545cb8a2318592c","date":"2012-05-04T04:13:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for ugly *64 functions with _LARGEFILE64_SOURCE\n\nmusl does not support legacy 32-bit-off_t whatsoever. off_t is always\n64 bit, and correct programs that use off_t and the standard functions\nwill just work out of the box. (on glibc, they would require\n-D_FILE_OFFSET_BITS=64 to work.) however, some programs instead define\n_LARGEFILE64_SOURCE and use alternate versions of all the standard\ntypes and functions with \"64\" appended to their names.\n\nwe do not want code to actually get linked against these functions\n(it's ugly and inconsistent), so macros are used instead of prototypes\nwith weak aliases in the library itself. eventually the weak aliases\nmay be added at the library level for the sake of using code that was\noriginally built against glibc, but the macros will still be the\ndesired solution in the headers.\n"},{"hash":"f0b85fd926c5a381416c94be62e7bc20d9fdbdb1","date":"2012-05-04T04:31:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add *64 junk for sys/*.h headers\n"},{"hash":"db4096c5f2ffb15e52015004ab5a900b820c6683","date":"2012-05-04T05:26:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized var in vfwprintf printing 0-prec string\n\nthis could lead to spurious failures of wide printf functions\n"},{"hash":"f697d66b81912af59128ac1b96bc0e2a4514b758","date":"2012-05-04T23:11:56.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: change the formula used for acos.s\n\nold: 2*atan2(sqrt(1-x),sqrt(1+x))\nnew: atan2(fabs(sqrt((1-x)*(1+x))),x)\nimprovements:\n* all edge cases are fixed (sign of zero in downward rounding)\n* a bit faster (here a single call is about 131ns vs 162ns)\n* a bit more precise (at most 1ulp error on 1M uniform random\nsamples in [0,1), the old formula gave some 2ulp errors as well)\n"},{"hash":"4027f4e8f948c26be5e61c774f9f9ce9af8942b5","date":"2012-05-05T00:18:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error reporting for dlsym with global symbols\n"},{"hash":"dac791226a0f6fb8d19d83b63a837254f804dbac","date":"2012-05-05T00:56:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/master'\n"},{"hash":"f8e054f95197bf9c4463122fba3ebc586d4a99f6","date":"2012-05-05T01:54:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve the build rules for installing /lib/ld-musl-$ARCH.so\n\nthese new rules should avoid spurious error messages when the\ndirectory (usually /lib) and the dynamic linker symlink already exist,\nand minimize the spam when they can't be created.\n"},{"hash":"7e4d79464adc3140b03f6e92a902d061c99b9ebe","date":"2012-05-05T02:51:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pthread stacks non-executable\n\nthis change is necessary or pthread_create will always fail on\nsecurity-hardened kernels. i considered first trying to make the stack\nexecutable and simply retrying without execute permissions when the\nfirst try fails, but (1) this would incur a serious performance\npenalty on hardened systems, and (2) having the stack be executable is\njust a bad idea from a security standpoint.\n\nif there is real-world \"GNU C\" code that uses nested functions with\nthreads, and it can't be fixed, we'll have to consider other ways of\nsolving the problem, but for now this seems like the best fix.\n"},{"hash":"64d2f8e82a877a52a3406ab77b930ea110aac228","date":"2012-05-05T03:24:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial commit of configure script\n\nthis script is not based on autoconf; however it attempts to follow\nthe same interface contracts for ease of integration with build\nsystems. it is also not necessary to use musl. manually written\nconfig.mak files are still supported, as is building without any\nconfig.mak at all as long as you are happy with the default options\nand you supply at least ARCH on the command line to make.\n"},{"hash":"a23563024fc75a85af955ca203e26c52f939b414","date":"2012-05-05T03:53:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update INSTALL file to reflect configure script usage\n"},{"hash":"8cfbc8be82898c98fc0a93e2cc7912d9e649f32e","date":"2012-05-05T04:02:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update license of njk contributed code (x86_64 asm)\n\nthese changes are based on the following communication via email:\n\n\"I hereby grant that all of the code I have contributed to musl on or\nbefore April 23, 2012 may be licensed under the terms of the following\nMIT license:\n\nCopyright (c) 2011-2012 Nicholas J. Kain\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"\n"},{"hash":"3f0636970b4bb0aaff7eb48bf144603a021c89a4","date":"2012-05-05T04:16:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"relicense musl under MIT license\n"},{"hash":"8a35deede1c2c1ca2e24aae676c90cac49eff073","date":"2012-05-05T06:39:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update readme and release notes for 0.9.0 release (not yet final)\n"},{"hash":"b4ccc3c1361ca611d6590dd4af288fb9fa6a843b","date":"2012-05-05T21:18:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add -frounding-math to build\n"},{"hash":"98c9af500125df41fdb46d7e384b00982d72493a","date":"2012-05-06T02:22:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix definitions of FP_ILOGB constants\n\ntwo issues: (1) the type was wrong (unsigned instead of signed int),\nand (2) the value of FP_ILOGBNAN should be INT_MIN rather than INT_MAX\nto match the ABI. this is also much more useful since INT_MAX\ncorresponds to a valid input (infinity). the standard would allow us\nto set FP_ILOGB0 to -INT_MAX instead of INT_MIN, which would give us\ndistinct values for ilogb(0) and ilogb(NAN), but the benefit seems way\ntoo small to justify ignoring the ABI.\n\nnote that the macro is just a \"portable\" (to any twos complement\nsystem where signed and unsigned int have the same width) way to write\nINT_MIN without needing limits.h. it's valid to use this method since\nthese macros are not required to work in #if directives.\n"},{"hash":"6cf865dba69bab6346dc268d9173609af36b984e","date":"2012-05-06T11:08:59.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: nextafter and nexttoward cleanup\n\nmake nexttoward, nexttowardf independent of long double representation.\nfix nextafterl: it did not raise underflow flag when the result was 0.\n"},{"hash":"106e75f7121b009c069733dcb8a70fe5e4380ab0","date":"2012-05-06T13:03:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add isastream (obsolete STREAMS junk)\n\napparently some packages see stropts.h and want to be able to use\nthis. the implementation checks that the file descriptor is valid by\nusing fcntl/F_GETFD so it can report an error if not (as specified).\n"},{"hash":"a45de0cb94b58f1b5ea4af1ca3531c56dc02c0a2","date":"2012-05-06T13:42:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/master'\n"},{"hash":"a3b20f67b35e26813d02e08043db2a5d9263f255","date":"2012-05-06T17:40:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"take byte order from gcc if gcc has defined it\n\nthis only works with gcc 4.6 and later, but it allows us to support\nnon-default endianness on archs like arm, mips, ppc, etc. that can do\nboth without having separate header sets for both variants, and it\nsaves one #include even on fixed-endianness archs like x86.\n"},{"hash":"4e597feef0595caefa39ab43c813734a1244fa84","date":"2012-05-06T18:48:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix unused variable warnings in new nextafter/nexttoward code\n\napparently initializing a variable is not \"using\" it but assigning to\nit is \"using\" it. i don't really like this fix, but it's better than\ntrying to make a bigger cleanup just before a release, and it should\nwork fine (tested against nsz's math tests).\n"},{"hash":"6ab8136b4477fd75381c06fa0e7fa93c89c712a1","date":"2012-05-06T19:24:28.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"add FORCE_EVAL macro to evaluate float expr for their side effect\nupdated nextafter* to use FORCE_EVAL, it can be used in many other\nplaces in the math code to improve readability.\n"},{"hash":"4a99440571e315612e8f7582702df8a41021501f","date":"2012-05-06T20:35:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some extra legacy header stuff\n"},{"hash":"2d3e2a7fc13296bb682b9a48b81f1c7130a94bde","date":"2012-05-06T21:19:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update release info for 0.9.0\n"},{"hash":"d7a90b35b9b5336a3e730e09d56f1c53f4e946ee","date":"2012-05-07T18:50:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ugly bugs in TRE regex parser\n\n1. * in BRE is not special at the beginning of the regex or a\nsubexpression. this broke ncurses' build scripts.\n\n2. \\\\( in BRE is a literal \\ followed by a literal (, not a literal \\\nfollowed by a subexpression opener.\n\n3. the ^ in \\\\(^ in BRE is a literal ^ only at the beginning of the\nentire BRE. POSIX allows treating it as an anchor at the beginning of\na subexpression, but TRE's code for checking if it was at the\nbeginning of a subexpression was wrong, and fixing it for the sake of\nsupporting a non-portable usage was too much trouble when just\nremoving this non-portable behavior was much easier.\n\nthis patch also moved lots of the ugly logic for empty atom checking\nout of the default/literal case and into new cases for the relevant\ncharacters. this should make parsing faster and make the code smaller.\nif nothing else it's a lot more readable/logical.\n\nat some point i'd like to revisit and overhaul lots of this code...\n"},{"hash":"a5a47783359dff3e583693bcddc1c5e3311d96ac","date":"2012-05-07T21:43:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regex breakage in last commit (failure to handle empty regex, etc.)\n"},{"hash":"17361482108e2a8757dc4aa69ed36b002251a08f","date":"2012-05-07T21:50:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix copy and paste error in regex code causing mishandling of \\) in BRE\n"},{"hash":"952700e8c32f7e81045cd01e1ecb3f7ca3f4c762","date":"2012-05-07T21:55:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error checking for \\ at end of regex (this was broken previously)\n"},{"hash":"0e195dfaa4902a73179f7ab296d47f01d3518ad3","date":"2012-05-07T22:05:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some assemblers don't like fistpq; use the alt. mnemonic fistpll\n"},{"hash":"3738a96e052603403e085e9a1024289ba3e09188","date":"2012-05-07T22:22:56.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix remquo.c when x==-y and a subnormal remainder bug as well\nbackported fix from freebsd:\nhttp://svnweb.FreeBSD.org/base?view=revision&revision=233973\n"},{"hash":"37bb3cce4598c19288628e675eaf1cda6e96958f","date":"2012-05-09T15:47:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"omit declaration of basename wrongly interpreted as prototype in C++\n\nthe non-prototype declaration of basename in string.h is an ugly\ncompromise to avoid breaking 2 types of broken software:\n\n1. programs which assume basename is declared in string.h and thus\nwould suffer from dangerous pointer-truncation if an implicit\ndeclaration were used.\n\n2. programs which include string.h with _GNU_SOURCE defined but then\ndeclare their own prototype for basename using the incorrect GNU\nsignature for the function (which would clash with a correct\nprototype).\n\nhowever, since C++ does not have non-prototype declarations and\ninterprets them as prototypes for a function with no arguments, we\nmust omit it when compiling C++ code. thankfully, all known broken\napps that suffer from the above issues are written in C, not C++.\n"},{"hash":"e0ff0d34dcce6993bedefe5ef61f10701d2b5a09","date":"2012-05-10T15:55:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in sys/param.h that broke setbit, etc. macros\n\nthis is all junk, but some programs use it.\n"},{"hash":"2e41887f54a8d01353204cb2509b4c466861e3b4","date":"2012-05-10T15:59:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"and another bug in setbit, etc. macros..\n"},{"hash":"bfb29b666ed4ab2f6679e0cb0ac92b12abf0abc3","date":"2012-05-10T16:10:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing parens in bit op macros (param.h)\n"},{"hash":"7e310e591e61cde57cf3960d6a064a1de2e94e6c","date":"2012-05-11T01:51:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing static (namespace clash)\n"},{"hash":"47c2a22fd6adcaf3f27b093df49bd97e3fdc16e7","date":"2012-05-11T02:16:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove __lock dependency from exit\n\nthere's no sense in using a powerful lock in exit, because it will\nnever be unlocked. a thread that arrives at exit while exit is already\nin progress just needs to hang forever. use the pause syscall for this\nbecause it's cheap and easy and universally available.\n"},{"hash":"9cfa3065c576e83949d659df0bba59e901671bc3","date":"2012-05-11T02:25:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/master'\n"},{"hash":"c8b01e73cad6a3edea7bfdf4e674f945fd7b6de3","date":"2012-05-11T02:41:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move vsyslog out of SYSLOG_NAMES conditional\n"},{"hash":"e700e59a90290babdb7e984a7a738f30a8f87dcf","date":"2012-05-11T03:32:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add one more bogus legacy header\n\nthis one is for program(s|ers) who haven't heard of uint16_t and\nuint32_t (which are obviously the correct types for use in such\nsituations, as they're the argument/return types for ntohs/htons and\nntohl/htonl).\n"},{"hash":"b47fdcdef8e88452914636ce23ee6792f259b5dc","date":"2012-05-11T15:05:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing IN6_ARE_ADDR_EQUAL\n\nwritten to avoid multiple conditional jumps and avoid ugly repetitive\nlines in the header file.\n"},{"hash":"d197d6421c317145e2aff89dd41de9d03eeaa00b","date":"2012-05-12T23:34:20.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"search: add tdestroy (gnu extension)\n"},{"hash":"6255c4c6a5599724d18311a7776aebe67f8e6d4a","date":"2012-05-12T23:50:53.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"search: add comments to tsearch_avl.c\n"},{"hash":"c3dbe9b22c93c187d806f5def44da5b47744923c","date":"2012-05-13T02:18:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing va_list for vsyslog\n"},{"hash":"7db6a871ca14b5a8e303e8b1819955970c79d034","date":"2012-05-13T03:31:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some gnu junk in netdb.h\n"},{"hash":"20052b9815f1009699fc6543d746010c67e8b962","date":"2012-05-13T03:34:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"namespace cleanup - NI_* is NOT reserved by netdb.h\n"},{"hash":"3777f5b90d25b2cafc5fd7be57580f1925fb5515","date":"2012-05-13T03:38:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"susv4 removed gethostbyname, etc. legacy cruft.\n"},{"hash":"e68c51ac46a9f273927aef8dcebc89912ab19ece","date":"2012-05-13T03:45:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use __h_errno_location for h_errno\n\nwe do not bother making h_errno thread-local since the only interfaces\nthat use it are inherently non-thread-safe. but still use the\npotentially-thread-local ABI to access it just to avoid lock-in.\n"},{"hash":"9a7fac7934975338449b63eb4d0409b472251dfa","date":"2012-05-13T04:44:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"let sysconf accurately report # of cpus available\n\ni've been trying out openmp and it seems like it won't be much use\nwithout this...\n"},{"hash":"e9cddc8e32b34f17c84d02fb52c11dfa4a3927f7","date":"2012-05-13T21:16:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"another BRE fix: in ^*, * is literal\n\ni don't understand why this has to be conditional on being in BRE\nmode, but enabling this code unconditionally breaks a huge number of\nERE test cases.\n"},{"hash":"13b2945a3c3de7c309ca2e44ab4cf76236ff1fdb","date":"2012-05-13T21:20:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some no-op end of string tests from regex parser\n\nthese are cruft from the original code which used an explicit string\nlength rather than null termination. i blindly converted all the\nchecks to null terminator checks, without noticing that in several\ncases, the subsequent switch statement would automatically handle the\nnull byte correctly.\n"},{"hash":"bc63e4fa2c9302c422e3bebd2653e4e36ee6372b","date":"2012-05-13T23:59:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct the check for gcc (previous version failed for cross compilers)\n"},{"hash":"f8ac55516d0336e26fbd1c69c4756e92f3e61407","date":"2012-05-14T04:01:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"missing limit LOGIN_NAME_MAX\n"},{"hash":"b5cbd549fd00aac164916fa0b6fea65d9dec60bf","date":"2012-05-14T04:10:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"useless lastlog path just to make some stuff happy\n"},{"hash":"55e2f5e98252b390c10e98f6d33db713fa15b0ed","date":"2012-05-14T12:14:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error in last configure change (lack of escaping)\n"},{"hash":"c5f3add3254de442f90f8102503c6df7b39e941e","date":"2012-05-14T18:52:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"yet another try to get the check for gcc right...\n"},{"hash":"01e94c46231f2670e9b0c1962f10de646674fded","date":"2012-05-17T00:14:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misplaced semicolon in preprocessor directive (#undef h_errno)\n"},{"hash":"3db29f0347976cd8f5eedf8a78cc3297a639714f","date":"2012-05-21T02:56:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move getpass decl to the right place\n"},{"hash":"9ae1cf6d292d8c24ad78d6e220186afc5076d120","date":"2012-05-22T02:51:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix out-of-bounds array access in pthread barriers on 64-bit\n\nit's ok to overlap with integer slot 3 on 32-bit because only slots\n0-2 are used on process-local barriers.\n"},{"hash":"7b5467cbae266d9cf91404a13c9b6b6e1d9b8204","date":"2012-05-22T03:55:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in utimes function that made it mess up file times\n"},{"hash":"419ae6d5c95629d3ebaff6f1880d52cb027ba924","date":"2012-05-23T01:52:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support _BSD_SOURCE feature test macro\n\npatch by Isaac Dunham. matched closely (maybe not exact) to glibc's\nidea of what _BSD_SOURCE should make visible.\n"},{"hash":"9f370fa99e2c25a717a672ee0a766d56e9d68a9a","date":"2012-05-23T01:54:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"bsd_signal is a legacy (removed) XSI function, not needed in _BSD_SOURCE\n\nits only purpose was for use on non-BSD systems that implement sysv\nsemantics for signal() by default.\n"},{"hash":"671ffab7769b4dfd873f0c585444823a67dc56bc","date":"2012-05-23T02:04:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"various header cleanups, some related to _BSD_SOURCE addition\n\nthere is no reason to avoid multiple identical macro definitions; this\nis perfectly legal C, and even with the maximal warning options\nenabled, gcc does not issue any warning for it.\n"},{"hash":"96601e3c617bb2122265419f0895730ed794f5af","date":"2012-05-23T02:07:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"_GNU_SOURCE implies all BSD features except ones GNU rejects\n"},{"hash":"030b452b8d6c95be6b6de661aed96e8379d1a80e","date":"2012-05-23T02:12:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing _BSD_SOURCE support in bits/*.h\n\nthis is actually rather ugly, and would get even uglier if we ever\nwant to support further feature test macros. at some point i may\nfactor the bits headers into separate files for C base, POSIX base,\nand nonstandard extensions (the only distinctions that seem to matter\nnow) and then the logic for which to include can go in the main header\nrather than being duplicated for each arch. the downside of this is\nthat it would result in more files having to be opened during\ncompilation, so as long as the ugliness does not grow, i'm inclined to\nleave it alone for now.\n"},{"hash":"af3330d7648627816fbc82aa3247419e8a528230","date":"2012-05-23T02:28:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some feature test fixes for unistd.h\n"},{"hash":"0c29adfe427ab6ed98cb73644f8f52a76045245c","date":"2012-05-23T02:43:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove everything related to forkall\n\ni made a best attempt, but the intended semantics of this function are\nfundamentally contradictory. there is no consistent way to handle\nownership of locks when forking a multi-threaded process. the code\ncould have worked by accident for programs that only used normal\nmutexes and nothing else (since they don't actually store or care\nabout their owner), but that's about it. broken-by-design interfaces\nthat aren't even in glibc (only solaris) don't belong in musl.\n"},{"hash":"25d575edc494e5a519468889e62beea4dde186ea","date":"2012-05-23T04:10:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"debloat jmp_buf in _GNU_SOURCE mode\n\ni originally made it the same size as the bloated GNU version, which\ncontains space for saved signal mask, but this makes some structures\ncontaining jmp_buf become much larger for no benefit. we will never\nuse the signal mask field with plain setjmp; sigsetjmp serves that\npurpose.\n"},{"hash":"cfd892fde9454e014d9b291a56ce5740d8bc4a78","date":"2012-05-23T18:13:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify cancellation push/pop slightly\n\nno need to pass unnecessary extra arguments on to the core code in\npthread_create.c. this just wastes cycles and code bloat.\n"},{"hash":"4da268f74b90696563db4f5d9d2b8e1c1351bdc6","date":"2012-05-23T19:45:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix issue with longjmp out of signal handlers and cancellation\n\nstale state information indicating that a thread was possibly blocked\nat a cancellation point could get left behind if longjmp was used to\nexit a signal handler that interrupted a cancellation point.\n\nto fix the issue, we throw away the state information entirely and\nsimply compare the saved instruction pointer to a range of code\naddresses in the __syscall_cp_asm function. all the ugly PIC work\n(which becomes minimal anyway with this approach) is defered to\ncancellation time instead of happening at every syscall, which should\nimprove performance too.\n\nthis commit also fixes cancellation on arm, which was mildly broken\n(race condition, not checking cancellation flag once inside the\ncancellation point zone). apparently i forgot to implement that. the\nnew arm code is untested, but appears correct; i'll test and fix it\nlater if there are problems.\n"},{"hash":"4d4f13e5813f3b1f7e7fd43cfe1a5da641dca96c","date":"2012-05-23T19:58:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bad opcode in arm syscall_cp_asm\n"},{"hash":"c37afdfdf393261e18364aed52571d0a5b011044","date":"2012-05-24T14:55:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"linux deprecated SYS_utime on some archs, so use SYS_utimes instead\n\nthe old code could be kept for cases where SYS_utime is available, but\nit's not really worth the ifdef ugliness. and better to avoid\ndeprecated stuff just in case the kernel devs ever get crazy enough to\nstart removing it from archs where it was part of the ABI and breaking\nstatic bins...\n"},{"hash":"e241896cd5ebe5d6b8e725fe4ac7a8d9c0980319","date":"2012-05-24T16:21:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid deprecated (by linux) alarm syscall; use setitimer instead\n"},{"hash":"54c567649eaadb99175b3883659872f791e482b1","date":"2012-05-24T16:27:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm syscall.h to reflect which syscalls actually exist (on EABI)\n"},{"hash":"73db33b94927d160f5dac5861a37ffbfd81d3ff6","date":"2012-05-25T04:35:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove leftover cp_sp cruft from cancellation code, fix small bug\n\nthe bug was that cancellation requests which arrived while a\ncancellation point was interrupted by a signal handler would not be\nacted upon when the signal handler returns. this was because cp_sp was\nnever set; it's no longer needed or used.\n\ninstead, just always re-raise the signal when cancellation was not\nacted upon. this wastes a tiny amount of time in the rare case where\nit even matters, but it ensures correctness and simplifies the code.\n"},{"hash":"7efd14ecc92de7ccdf0209168a4ae6b73cd9e07a","date":"2012-05-25T04:59:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cruft from pthread structure (old cancellation stuff)\n"},{"hash":"8b4c232efe182f4a9c8c52c5638af8fec92987bf","date":"2012-05-25T14:45:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regex on arm\n\nTRE has a broken assumption that wchar_t is signed, which is a sane\nexpectation, but not required by the standard, and false on ARM's ABI.\n\ni leave tre_char_t as wchar_t for now, since a pointer to it is\ndirectly passed to functions that need pointer to wchar_t. it does not\nseem to break anything. and since the maximum unicode scalar value is\n0x10ffff, just use that explicitly rather than using the max value of\nany particular C type.\n"},{"hash":"8cce15af83c04d8965561439f0a80a451a9b1af0","date":"2012-05-26T02:34:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure pthread-internal signals are unblocked before threads are used\n\nif the process started with these signals blocked, cancellation could\nfail or setxid could deadlock. there is no way to globally unblock\nthem after threads have been created. by unblocking them in the\npthread_self initialization for the main thread, we ensure that\nthey're unblocked before any other threads are created and also\noutside of any signal handler context (sigaction initialized\npthread_self), which is important so that return from a signal handler\nwon't re-block them.\n"},{"hash":"3f25354e624361f40011b242c492c2118184cc44","date":"2012-05-26T02:44:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid using pthread cleanup push/pop in stdio when not needed\n\nunfortunately in dynamic-linked programs, these macros cause\npthread_self to be initialized, which costs a couple syscalls, and\n(much worse) would necessarily fail, crash, and burn on ancient (2.4\nand earlier) kernels where setting up a thread pointer does not work.\n\ni'd like to do this in a more generic way that avoids all use of\ncleanup push/pop before pthread_self has been successfully called and\navoids ugly if/else constructs like the one in this commit, but for\nnow, this will suffice.\n"},{"hash":"aefd0f69bd22b825a6196e65b40a02e79fec23b5","date":"2012-05-26T22:01:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of strrchr(str, 0)\n\nbug report and solution by Richard Pennington\n"},{"hash":"6436b371af2b52a7b60a5b4f304d1aca2f9f60b3","date":"2012-05-26T22:02:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of mbsinit(0) (not UB; required to return nonzero)\n\nissue reported by Richard Pennington; slightly simpler fix applied\n"},{"hash":"054ba185999d29f6ae9a8e19549da95f783655b6","date":"2012-05-26T22:04:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overrun (n essentially ignored) in wcsncmp\n\nbug report and solution by Richard Pennington\n"},{"hash":"b94608ca10051e7911250aaa53f1435b0512018c","date":"2012-05-27T18:49:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup dynamic linker start code cruft\n\ntwo actual issues: one is that __dynlink no longer wants/needs a GOT\npointer argument, so the code to generate that argument can be\nremoved. the other issue was that in the i386 code, argc/argv were\nbeing loaded into registers that would be call-clobbered, then copied\nto preserved registers, rather than just being loaded into the proper\ncall-preserved registers to begin with.\n\nthis cleanup is in preparation for adding new dynamic linker\nfunctionality (ability to explicitly invoke the dynamic linker to run\na program).\n"},{"hash":"5c1909a8d210cd08a776a2fd6681dbea1f0ae480","date":"2012-05-27T20:01:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ldd and main program loading support to dynamic linker\n"},{"hash":"b1cf11c090900cc476c2a26d739e16aaffbdf6f5","date":"2012-05-28T20:55:03.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix nextafter definition in tgmath.h\n"},{"hash":"15c7af3e21e1e402067f9c2a7c8d3094ddc7f54f","date":"2012-05-29T02:46:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove duplicate lfs64 cruft in stdio.h\n"},{"hash":"b63cab76ec1cd91b518cd3bad72ee993c94d44a2","date":"2012-05-29T02:53:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prototype for BSD/GNU stdio *_unlocked extension functions\n\nalso fix up distinction of what is GNU-only and what's GNU+BSD\n"},{"hash":"a34b0465ba14c70532b8eaba650a9eac228fce57","date":"2012-05-29T02:54:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"there is no such GNU function fpurge, only __fpurge.\n\nno idea where I got the idea fpurge should exist...\n"},{"hash":"ed6717277c4c5d6f3296d931d35a0f1beb73a024","date":"2012-05-31T01:19:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix musl-gcc wrapper to work with -pie\n\nlinking the wrong crt1.o resulted in textrels and thus crashing\n"},{"hash":"a541297617e567eadc7448e1af35d7bb20461a8c","date":"2012-06-01T03:12:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"enable LARGEFILE64 aliases\n\nthese will NOT be used when compiling with -D_LARGEFILE64_SOURCE on\nmusl; instead, they exist in the hopes of eventually being able to run\nsome glibc-linked apps with musl sitting in place of glibc.\n\nalso remove the (apparently incorrect) fcntl alias.\n"},{"hash":"9ea20dcbaafe790bb034adadf05698088a2f9fab","date":"2012-06-01T03:32:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add LSB ABI __xstat, etc. junk\n"},{"hash":"19e48c5531fda9c4767b99b754cb9345902dd100","date":"2012-06-02T20:48:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use fistpll mnemonic instead of fistpq (more widely supported) on x86_64 too\n\nthis was fixed previously on i386 but the corresponding code on x86_64\nwas missed.\n"},{"hash":"d200bd727beab4f687e4891e2febc16b4ab97020","date":"2012-06-02T20:51:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"declare environ in unistd.h when _GNU_SOURCE feature test macro is used\n\nlots of broken programs expect this, and it's gotten to the point of\nbeing a troubleshooting FAQ topic. best to just fix it.\n"},{"hash":"9372655e884b3829c6639fc1a6047b2569f3c3ec","date":"2012-06-02T21:49:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add LSB abi junk for ctype functions\n\nthis should be the last major fix needed to support running\nglibc-linked conforming POSIX programs with musl in place of glibc, as\nlong as musl provides the features they need and they don't use\npthread cancellation (which is implemented as c++ exceptions in glibc,\nand fundamentally incompatible with musl).\n"},{"hash":"1e597a3e9bbdbe82d2ffd3963019d3a3edeed859","date":"2012-06-02T23:56:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove no-longer-needed unblocking of signals in pthread_create\n\nthis action is now performed in pthread_self initialization; it must\nbe performed there in case the first call to pthread_create is from a\nsignal handler, in which case the old signal mask could be restored on\nreturn from the signal.\n"},{"hash":"40bd1726b6aa93a8311a77a1fec6da0fe0489fd0","date":"2012-06-03T00:04:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove implementation-reserved bits when saving signal mask\n\nthis fix is necessary because a program could be started with some of\nthe implementation-reserved signals masked (e.g. due to exec having\nbeen called from a signal handler, or from a non-musl program) and\nthen could obtain an invalid-to-use-later sigset_t as the old/saved\nsignal mask.\n"},{"hash":"13b3645c46518e0e2fb91f0d665e60f7a8a44b2b","date":"2012-06-03T00:15:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"increase default thread stack size to 80k\n\nI've been looking for data that would suggest a good default, and\nsince little has shown up, i'm doing this based on the limited data I\nhave. the value 80k is chosen to accommodate 64k of application data\n(which happens to be the size of the buffer in git that made it crash\nwithout a patch to call pthread_attr_setstacksize) plus the max stack\nusage of most libc functions (with a few exceptions like crypt, which\nwill be fixed soon to avoid excessive stack usage, and [n]ftw, which\ninherently uses a fair bit in recursive directory searching).\n\nif further evidence emerges suggesting that the default should be\nlarger, I'll consider changing it again, but I'd like to avoid it\ngetting too large to avoid the issues of large commit charge and rapid\naddress space exhaustion on 32-bit machines.\n"},{"hash":"6a4b9472fb0a85e55030b37ec3017ba0319e03f9","date":"2012-06-03T01:20:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some ugly aliases for LSB ABI compatibility\n\nfor some nonsensical reason, glibc's headers use inline functions that\nredirect some of the standard functions to ugly nonstandard names (and\nlikewise for some of their nonstandard functions).\n"},{"hash":"2557d0ba47286ed3e868f8ddc9dbed0942fe99dc","date":"2012-06-03T01:53:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure that abort always works\n\nPer POSIX, \"The abort() function shall cause abnormal process\ntermination to occur, unless the signal SIGABRT is being caught and\nthe signal handler does not return.\"\n\nIf SIGABRT is blocked or if a signal handler is installed and does\nreturn, abort is still required to cause abnormal program termination.\nWe cannot use a_crash() to do this, since a SIGILL handler could also\nbe installed (and might even longjmp out of the abort, not expecting\nto be invoked from within abort), nor can we rely on resetting the\nsignal handler and re-raising the signal (this has race conditions in\nmulti-threaded programs). On the other hand, SIGKILL is a perfectly\nsafe, unblockable way to obtain abnormal program termination, and it\nrequires no ugly loop-and-retry logic.\n"},{"hash":"278883d0e2fbf698370b8ddb16b79d5fff0febf3","date":"2012-06-03T20:22:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix configure build/host/target terminology usage\n"},{"hash":"bd45dc9446166186cfdd5bc89ba719afa9ee7d4c","date":"2012-06-03T20:31:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.1\n"},{"hash":"3b94daba711090f1936f59fae6f7cbcba963b29e","date":"2012-06-04T12:03:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"_GNU_SOURCE is supposed to imply _LARGEFILE64_SOURCE\n\nthis is ugly and stupid, but now that the *64 symbol names exist, a\nlot of broken GNU software detects them in configure, then either\nbreaks during build due to missing off64_t definition, or attempts to\ncompile without function declarations/prototypes. \"fixing\" it here is\neasier than telling everyone to add yet another feature test macro to\ntheir builds.\n"},{"hash":"908bed20cd877a6c0c290c0c56cc7057ecc00296","date":"2012-06-05T23:42:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ctype abi junk (pointer should point to 0 slot, not -128 slot)\n"},{"hash":"f7d15dcc543c3b65c751064a5e51a0ec462f3cdb","date":"2012-06-06T15:21:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"treat failure of mprotect in map_library as a fatal load failure\n\nthe error will propagate up and be printed to the user at program\nstart time; at runtime, dlopen will just fail and leave a message for\ndlerror.\n\npreviously, if mprotect failed, subsequent attempts to perform\nrelocations would crash the program. this was resulting in an\nincreasing number of false bug reports on grsec systems where rwx\npermission is not possible in cases where users were wrongly\nattempting to use non-PIC code in shared libraries. supporting that\nusage is in theory possible, but the x86_64 toolchain does not even\nsupport textrels, and the cost of keeping around the necessary\ninformation to handle textrels without rwx permissions is\ndisproportionate to the benefit (which is essentially just supporting\nbroken library setups on grsec machines).\n\nalso, i unified the error-out code in map_library now that there are 3\nplaces from which munmap might have to be called.\n"},{"hash":"6e0ad2277ae28ba55c4c73bbfd0898d90ececd33","date":"2012-06-06T19:48:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make gcc wrapper rewrite link options rather than just extending them\n\nthis is not tested yet, but should work to get rid of unwanted\n--hash-style=gnu hacks present in some distro-patched gcc versions.\n"},{"hash":"08f70a30c00c587856a95d5951fb486269e4f651","date":"2012-06-07T00:45:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add configure check for gnu linker hash style setting\n\nsome broken distro-provided toolchains have modified gcc to produce\nonly \"gnu hash\" dynamic hash table by default. as this is unsupported\nby musl, that results in a non-working libc.so. we detect and switch\nthis on in configure rather than hard-coding it in the Makefile\nbecause it's not supported by old binutils versions, but that might\nnot even be relevant since old binutils versions already fail from\n-Bsymbolic-functions being missing. at some point I may review whether\nthis should just go in the Makefile...\n"},{"hash":"0c5efde8d06670e8709e3bff548921b05a7da692","date":"2012-06-07T02:00:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure try to disable stack protector\n\nin theory we could support stack protector in the libc itself, and\nusers wanting to experiment with such usage could add\n-fstack-protector to CFLAGS intentionally. but to avoid breakage in\nthe default case, override broken distro-patched gcc that forces stack\nprotector on.\n"},{"hash":"67a0383d07987cc4adeee3a06b60c666d9f9d62e","date":"2012-06-07T04:23:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid linking main program in linker tests\n\nit's possible that the user has provided a compiler that does not have\nany libc to link to, so linking a main program is a bad idea. instead,\ngenerate an empty shared library with no dependencies.\n"},{"hash":"f1fd7577ba7eb2a202833e89c63b8e01dedfca05","date":"2012-06-07T04:27:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use -nostdlib in linker tests to avoid possible missing crt/lib issues\n"},{"hash":"498a100d05666024fd0d409a27709a03e7e58dd3","date":"2012-06-07T04:32:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"check for ld support of -Bsymbolic-functions; disable shared if not avail\n\nthis issue affects the last gpl2 version of binutils, which some\npeople are still using out of aversion to gpl3. musl requires\n-Bsymbolic-functions because it's the only way to make a libc.so\nthat's able to operate prior to dynamic linking but that still behaves\ncorrectly with respect to global vars that may be moved to the main\nprogram via copy relocations.\n"},{"hash":"31eaad4796b9da459b15da70097c2b619fb01ea9","date":"2012-06-08T02:52:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix scanf bug reading literals after width-limited field\n\nthe field width limit was not being cleared before reading the\nliteral, causing spurious failures in scanf in cases like \"%2d:\"\nscanning \"00:\".\n"},{"hash":"e86b18a63eb6b65e18e761212f69a0abc16b50b1","date":"2012-06-08T02:58:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sysinfo struct was utter nonsense; no idea where it came from.\n\nthis broke the busybox \"free\" utility (memory reporting) and possibly\nother things like uptime.\n"},{"hash":"1429ce9ba2425b8abeefc311d56db5efe801d9d2","date":"2012-06-08T03:06:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sysinfo, try 2. it seems to work this time.\n"},{"hash":"6e9ff6a4cf4c6ab8f18e35934e33579c4caf2c3e","date":"2012-06-08T14:32:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix printf %ls with precision limit over-read issue\n\nprintf was not printing too many characters, but it was reading one\ntoo many wchar_t elements from the input. this could lead to crashes\nif running off the page, or spurious failure if the conversion of the\nextra wchar_t resulted in EILSEQ.\n"},{"hash":"63d40196b91df8937424cfa4495e8991c5a20827","date":"2012-06-08T14:36:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix %ls breakage in last printf fix\n\nsignedness issue kept %ls with no precision from working at all\n"},{"hash":"3d649468c7315d43aa99a44e882118d6872cb6ec","date":"2012-06-08T15:11:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signedness errors in stdint.h constant macros\n\nthe types of these expressions must match the integer promotions.\nunsigned 8- and 16-bit values promote to signed int, not unsigned int.\n"},{"hash":"f457b1cb0d49f1b47bc7baf4bb516f1860816f03","date":"2012-06-08T15:17:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix scanning of \"-0x\" pseudo-hex float (must give negative zero)\n"},{"hash":"819006a88b9473872fee91135b06f4e23231d97e","date":"2012-06-09T23:53:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add pthread_attr_setstack interface (and get)\n\ni originally omitted these (optional, per POSIX) interfaces because i\nconsidered them backwards implementation details. however, someone\nlater brought to my attention a fairly legitimate use case: allocating\nthread stacks in memory that's setup for sharing and/or fast transfer\nbetween CPU and GPU so that the thread can move data to a GPU directly\nfrom automatic-storage buffers without having to go through additional\nbuffer copies.\n\nperhaps there are other situations in which these interfaces are\nuseful too.\n"},{"hash":"6343ac8f5ab41b993a1b07563f9fc3787528d3ef","date":"2012-06-10T01:20:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix char signedness bug (arm-specific) in dynamic linker\n"},{"hash":"e361019c24b4dc930aa9431b895b478e1eee04e0","date":"2012-06-13T15:04:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add deprecated capabilities functions\n\nthese were left in glibc for binary compatibility after the public\npart of the interface was removed, and libcap kept using them (with\nits own copy of the header files) rather than just making the syscalls\ndirectly. might as well add them since they're so small...\n"},{"hash":"fbffcee63dde1cba27021177d2ed9ba4f3792a57","date":"2012-06-13T15:14:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add (currently stubbed due to stubbed strverscmp) versionsort function\n\nbased on patch by Emil Renner Berthing, with minor changes to dirent.h\nfor LFS64 and organization of declarations\n\nthis code should work unmodified once a real strverscmp is added, but\nI've been hesitant to add it because the GNU strverscmp behavior is\nharmful in a lot of cases (for instance if you have numeric filenames\nin hex). at some point I plan on trying to design a variant of the\nalgorithm that behaves better on a mix of filename styles.\n"},{"hash":"2169265ec6c902cd460bf96a1a0b5103657a4954","date":"2012-06-13T15:49:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add init_module/delete_module syscall wrappers\n\nthese are not exposed publicly in any header, but the few programs\nthat use them (modutils/kmod, etc.) are declaring the functions\nthemselves rather than making the syscalls directly, and it doesn't\nreally hurt to have them (same as the capset junk).\n"},{"hash":"23be72ae4534c13a7fd03f580934cc251ada619f","date":"2012-06-13T18:41:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add timegm function (inverse of gmtime), nonstandard\n"},{"hash":"cf254c32ec47df4975d14e97233918e42ee70cea","date":"2012-06-13T18:43:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix feature test macros in time.h\n\nstime is not _XOPEN_SOURCE, and some functions were missing with\n_BSD_SOURCE..\n"},{"hash":"de05a2ac22d33bd7631f182143ecea6dd01d9406","date":"2012-06-13T18:46:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert one change in time.h; no evidence BSD_SOURCE should expose these..\n"},{"hash":"ad5a332c750550adbd45f474e5936cae65b4fd5e","date":"2012-06-14T12:36:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorder exit code to defer stdio flush until after dtors\n\nthis is required in case dtors use stdio.\n\nalso remove the old comments; one was cruft from when the code used to\nbe using function pointers and conditional calls, and has little\nmotivation now that we're using weak symbols. the other was just\ncomplaining about having to support dtors even though the cost was\nmade essentially zero in the non-use case by the way it's done here.\n"},{"hash":"1dd6eee692be09f04398f378446afec96bc112f2","date":"2012-06-15T03:58:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"direct syscall to open in __init_security needs O_LARGEFILE\n\nit probably does not matter for /dev/null, but this should be done\nconsistently anyway.\n"},{"hash":"57d5fff5f7dd9af27152c84ce041c18597a22766","date":"2012-06-16T01:52:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"header file fixes: multiple include guard consistency and correctness\n\none file was reusing another file's macro name, and many had\ninconsistent underscores and application of SYS prefix, etc.\n\npatch by Szabolcs Nagy (nsz)\n"},{"hash":"3b43d10fafd64ac0a93fab463330a936b90ec15c","date":"2012-06-18T00:34:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fdopen should set errno when it fails due to invalid mode string\n"},{"hash":"deb90c79e5c498fbb48de1423df034447f330e38","date":"2012-06-18T01:24:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change stdio_ext __freading/__fwriting semantics slightly\n\nthe old behavior was to only consider a stream to be \"reading\" or\n\"writing\" if it had buffered, unread/unwritten data. this reportedly\ndiffers from the traditional behavior of these functions, which is\nessentially to return true as much as possible without creating the\npossibility that both __freading and __fwriting could return true.\n\ngnulib expects __fwriting to return true as soon as a file is opened\nwrite-only, and possibly expects other cases that depend on the\ntraditional behavior. and since these functions exist mostly for\ngnulib (does anything else use them??), they should match the expected\nbehavior to avoid even more ugly hacks and workarounds...\n"},{"hash":"a2f149b5d183a842487cc7c76d63511b67db32f5","date":"2012-06-19T00:29:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix erroneous utf-16 encoding with surrogates in iconv\n\napparently this was never tested before.\n"},{"hash":"673633c689989c5cb7ba0b919f8ef82c4041e2ec","date":"2012-06-19T00:43:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix iconv dest utf-16: unavailable chars must be replaced; EILSEQ is wrong\n"},{"hash":"26710be7148d51a954c4fe4acedab90d161e609a","date":"2012-06-19T01:41:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix multiple iconv bugs reading utf-16/32 and wchar_t\n"},{"hash":"2499cd9d9be0ba74e16a6c3dd304e6d69070be35","date":"2012-06-19T04:05:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove flush hook cruft that was never used from stdio\n\nthere is no need/use for a flush hook. the write function serves this\npurpose already. i originally created the hook for implementing mem\nstreams based on a mistaken reading of posix, and later realized it\nwasn't useful but never removed it until now.\n"},{"hash":"ca8a4e7fbdeeb05b58ac3d456bae696623b8e312","date":"2012-06-19T05:12:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor cleanup in fflush\n"},{"hash":"a71e0af25544fd2486e57ea51c6d05abdbf44c3e","date":"2012-06-19T05:27:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"stdio: handle file position correctly at program exit\n\nfor seekable files, posix imposed requirements on the offset of the\nunderlying open file description after a stream is closed. this was\ncorrectly handled (as a side effect of the unconditional fflush call)\nwhen streams were explicitly closed by fclose, but was not handled\ncorrectly at program exit time, where fflush(0) was being used.\n\nthe weak symbol hackery is to pull in __stdio_exit if either of\n__toread or __towrite is used, but avoid calling it twice so we don't\nhave to keep extra state. the new __stdio_exit is a streamlined fflush\nvariant that avoids performing any unnecessary operations and which\nnever unlocks the files or open file list, so we can be sure no other\nthreads write new data to a stream's buffer after it's already\nflushed.\n"},{"hash":"e15171b8d8e80e8b5bcf4e95b1709697858f545a","date":"2012-06-19T05:35:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add new stdio extension functions to make gnulib happy\n\nthis is mildly ugly, but less ugly than gnulib trying to poke at the\ndefinition of the FILE structure...\n"},{"hash":"5bc8e845bb4de2c472581136d2268c4bf103bcd4","date":"2012-06-19T19:18:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"include declarations for new stdio_ext functions (gnulib support)\n"},{"hash":"25c8444919cc129264f7b7f31090d05403477719","date":"2012-06-19T19:32:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add vhangup syscall wrapper\n\nrequest/patch by william haddonthethird, slightly modifed to add\n_GNU_SOURCE feature test macro so that the compiler can verify the\nprototype matches.\n"},{"hash":"914949d321448bd2189bdcbce794dbae2c8ed16e","date":"2012-06-20T01:41:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pointer overflow bug in floating point printf\n\nlarge precision values could cause out-of-bounds pointer arithmetic in\ncomputing the precision cutoff (used to avoid expensive long-precision\narithmetic when the result will be discarded). per the C standard,\nthis is undefined behavior. one would expect that it works anyway, and\nin fact it did in most real-world cases, but it was randomly\n(depending on aslr) crashing in i386 binaries running on x86_64\nkernels. this is because linux puts the userspace stack near 4GB\n(instead of near 3GB) when the kernel is 64-bit, leading to the\nout-of-bounds pointer arithmetic overflowing past the end of address\nspace and giving a very low pointer value, which then compared lower\nthan a pointer it should have been higher than.\n\nthe new code rearranges the arithmetic so that no overflow can occur.\n\nwhile this bug could crash printf with memory corruption, it's\nunlikely to have security impact in real-world applications since the\nability to provide an extremely large field precision value under\nattacker-control is required to trigger the bug.\n"},{"hash":"ca1773d8645672f6e67b10bc94aa5639b01a1ebe","date":"2012-06-20T02:22:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dummied-out fdatasync\n"},{"hash":"ee1f69a3606987a973ccd0b378d26d0fb077364a","date":"2012-06-20T02:24:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dummied-out fsync\n\nif we eventually have build options, it might be nice to make an\noption to dummy this out again, in case anybody needs a system-wide\ndisable for disk/ssd-thrashing, etc. that some daemons do when\nlogging...\n"},{"hash":"ee96c50d4bac709f02f7007ecf669952d56f1b2d","date":"2012-06-20T02:31:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mistake in length test in getlogin_r\n\nthis was actually dangerously wrong, but presumably nobody uses this\nbroken function anymore anyway..\n"},{"hash":"85a3ba3a289aa1e0d6cb8ad95f6f358a245a9422","date":"2012-06-20T02:44:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix localeconv values and implementation\n\ndynamic-allocation of the structure is not valid; it can crash an\napplication if malloc fails. since localeconv is not specified to have\nfailure conditions, the object needs to have static storage duration.\n\nneed to review whether all the values are right or not still..\n"},{"hash":"82a4499e671db62fab1e3928de6e00bb109d4c8d","date":"2012-06-20T13:27:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor perror behavior fix\n\npatch by nsz\n"},{"hash":"839bff64a17c1ecaed60feefd9b63554ca9cbad6","date":"2012-06-20T13:28:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix another oob pointer arithmetic issue in printf floating point\n\nthis one could never cause any problems unless the compiler/machine\ngoes to extra trouble to break oob pointer arithmetic, but it's best\nto fix it anyway.\n"},{"hash":"f313a1622448de578ab0b11a881f44a02c9082e6","date":"2012-06-20T16:07:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make strerror_r behave nicer on failure\n\nif the buffer is too short, at least return a partial string. this is\nhelpful if the caller is lazy and does not check for failure. care is\ntaken to avoid writing anything if the buffer length is zero, and to\nalways null-terminate when the buffer length is non-zero.\n"},{"hash":"b3d7d062af63d833b9a984770320534719252b61","date":"2012-06-20T17:48:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"duplocale: don't crash when called with LC_GLOBAL_LOCALE\n\nposix has resolved to add this usage; for now, we just avoid writing\nanything to the new locale object since it's not used anyway.\n"},{"hash":"f305467aad4659e92fff84be6c89d4767b6f99d4","date":"2012-06-20T18:32:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"popen: handle issues with fd0/1 being closed\n\nalso check for failure of dup2 and abort the child rather than\nreading/writing the wrong file.\n"},{"hash":"9c21f4342c787e04a9e31ad8a1d87a65c89968ca","date":"2012-06-20T18:39:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make popen cancellation-safe\n\nclose was the only cancellation point called from popen, but it left\npopen with major resource leaks if any call to close got cancelled.\nthe easiest, cheapest fix is just to use a non-cancellable close\nfunction.\n"},{"hash":"9799560f79d37fb53d821b2f0b591a6ff260ebc3","date":"2012-06-20T18:47:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid memory access in pclose\n"},{"hash":"1af8c255040b3e1ba4913fd935d117490bfe8774","date":"2012-06-20T18:50:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid cancellation in pclose\n\nat the point pclose might receive and act on cancellation, it has\nalready invalidated the FILE passed to it. thus, per musl's QOI\nguarantees about cancellation and resource allocation/deallocation,\nit's not a candidate for cancellation.\n\nif it were required to be a cancellation point by posix, we would have\nto switch the order of deallocation, but somehow still close the pipe\nin order to trigger the child process to exit. i looked into doing\nthis, but the logic gets ugly, and i'm not sure the semantics are\nconformant, so i'd rather just leave it alone unless there's a need to\nchange it.\n"},{"hash":"cea106fb8976d04b916953469439bc58fa111266","date":"2012-06-20T19:04:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fwrite return value when full write does not succeed\n"},{"hash":"c21a19d5a559cbd39963b89547900d24624f1fad","date":"2012-06-20T19:11:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ptsname_r to conform to the upcoming posix requirements\n\nit should return the error code rather than 0/-1 and setting errno.\n"},{"hash":"fad231b9609470e4c51b29b6bcb9abd23b7e9346","date":"2012-06-20T19:15:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support ld80 pseudo-denormal invalid bit patterns; treat them as nan\n\nthis is silly, but it makes apps that read binary junk and interpret\nit as ld80 \"safer\", and it gets gnulib to stop replacing printf...\n"},{"hash":"ac4fb51dde2f1fe9371a4cb51ff309d4868245ec","date":"2012-06-20T19:22:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken wcwidth tables\n\nunicode char data has both \"W\" and \"F\" wide types and the old table\nonly included the \"W\" ones. this omitted U+3000 (ideographic space)\nand all the wide-ascii, etc.\n"},{"hash":"e5fb6820a42a1f675ba09c15273953e1ace65777","date":"2012-06-20T21:25:58.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix fma bug on x86 (found by Bruno Haible with gnulib)\n\nThe long double adjustment was wrong:\nThe usual check is\n  mant_bits & 0x7ff == 0x400\nbefore doing a mant_bits++ or mant_bits-- adjustment since\nthis is the only case when rounding an inexact ld80 into\ndouble can go wrong. (only in nearest rounding mode)\n\nAfter such a check the ++ and -- is ok (the mantissa will end\nin 0x401 or 0x3ff).\n\nfma is a bit different (we need to add 3 numbers with correct\nrounding: hi_xy + lo_xy + z so we should survive two roundings\nat different places without precision loss)\n\nThe adjustment in fma only checks for zero low bits\n  mant_bits & 0x3ff == 0\nthis way the adjusted value is correct when rounded to\ndouble or *less* precision.\n(this is an important piece in the fma puzzle)\n\nUnfortunately in this case the -- is not a correct adjustment\nbecause mant_bits might underflow so further checks are needed\nand this was the source of the bug.\n"},{"hash":"4e8b0938d90793d6e1e200d6b25e6581b72bd4d0","date":"2012-06-21T02:16:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"proper error handling for fcntl F_GETOWN on modern kernels\n\non old kernels, there's no way to detect errors; we must assume\nnegative syscall return values are pgrp ids. but if the F_GETOWN_EX\nfcntl works, we can get a reliable answer.\n"},{"hash":"213db3e3fa715288dea6a0d317b9c04b609dca7b","date":"2012-06-24T01:16:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update syscall defs to latest kernel ones\n\npatch submitted by Kristian L. <email@thexception.net>\n"},{"hash":"9cf9c39e48342a5d4007824d49b88132d93d83e3","date":"2012-06-24T01:38:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add process_vm_readv and process_vm_writev syscall wrappers\n\nbased on a patch submitted by Kristian L. <email@thexception.net>\n"},{"hash":"ec820f1262a5d6331ad0fe9b56a8a84365766fd1","date":"2012-06-25T01:00:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.2\n"},{"hash":"9abab94b211c5103e3f6baf97ad76523618a553c","date":"2012-06-25T20:06:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm crti/crtn code\n\nlr must be saved because init/fini-section code from the compiler\nclobbers it. this was not a problem when i tested without gcc's\ncrtbegin/crtend files present, but with them, musl on arm fails to\nwork (infinite loop in _init).\n"},{"hash":"cdf51506ce895286011ff0abe5434557845108ee","date":"2012-06-29T04:56:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace old and ugly crypt implementation\n\nthe new version is largely the work of Solar Designer, with minor\nchanges for integration with musl. compared to the old code, text size\nis reduced by about 7k, stack space usage by about 70k, and\nperformance is greatly improved by avoiding expensive calculation of\nconstant tables on each run.\n\nthis version also adds support for extended des-based password hashes,\nwhich allow for unlimited key (password) length and configurable\niteration counts.\n\ni've also published the interface for crypt_r in a new crypt.h header.\nespecially since this is not a standard interface, i did not feel\ncompelled to match the glibc abi for the crypt_data structure. the\nglibc structure is way too big to allocate on the stack; in fact it's\nso big that the first usage may cause the main thread to exceed its\npre-committed stack size of 128k and thus could cause the program to\ncrash even on systems with overcommit disabled. the only legitimate\nuse of crypt_data for crypt_r is to store the hash string to return,\nso i've reserved 256 bytes, which should be more than sufficient\n(longest known password hashes are ~60 characters, and beyond that is\npossibly even exceeding some implementations' passwd file field size\nlimit).\n"},{"hash":"fe2df4ad3ea6080d01dea8d836cd4bbc896160fd","date":"2012-07-03T00:22:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid implicit pointer conversion in ld64 modfl\n"},{"hash":"007c03f84f5c4666d7260a53d67249ce4bccc140","date":"2012-07-03T00:25:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing prototype and simplify sincosl on ld64 archs\n"},{"hash":"8e26a591d059382cd28b96e457ede2fe07c550c7","date":"2012-07-03T02:48:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing function declarations for __stdio_exit\n"},{"hash":"e6129e6d836e5f4725d9b14ba7457b32e24adc61","date":"2012-07-03T02:49:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sigsetjmp on arm (needs asm)\n\nno idea why gcc refuses to compile the C code to use a tail call, but\nit's best to use asm anyway so we don't have to rely on the quality of\nthe compiler's optimizations for correct code.\n"},{"hash":"d6c0efe106b1016108207fb6872820c06dcef4f8","date":"2012-07-04T00:07:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"jmp_buf overhaul fixing several issues\n\non arm, the location of the saved-signal-mask flag and mask were off\nby one between sigsetjmp and siglongjmp, causing incorrect behavior\nrestoring the signal mask. this is because the siglongjmp code assumed\nan extra slot was in the non-sig jmp_buf for the flag, but arm did not\nhave this. now, the extra slot is removed for all archs since it was\nuseless.\n\nalso, arm eabi requires jmp_buf to have 8-byte alignment. we achieve\nthat using long long as the type rather than with non-portable gcc\nattribute tags.\n"},{"hash":"2121b8a44f086f6fb8aed98102379e7de9a4a5f1","date":"2012-07-04T03:53:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"configure: only use -ffloat-store on i386\n\nthis option is expensive and only used on old gcc's that lack\n-fexcess-precision=standed, but it's not needed on non-i386 archs\nwhere floating point does not have excess precision anyway.\n\nif musl ever supports m68k, i think it will need to be special-cased\ntoo. i'm not aware of any other archs with excess precision.\n"},{"hash":"25b88f081076a7beb2331ec219640d1a829cdcc4","date":"2012-07-04T16:18:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prototypes for getw/putw\n"},{"hash":"98eddc677609c20796982f3171165700613e3cf2","date":"2012-07-04T16:18:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sure getw/putw agree with prototypes by defining _GNU_SOURCE\n"},{"hash":"920baab81f98a3cae3436361cdd044afe21fe347","date":"2012-07-04T16:21:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"putw is supposed to return 0 (not the value written) on success\n\nthis is not a standard but it's the traditional behavior and it's more\nuseful because the caller can reliably detect errors.\n"},{"hash":"d93e028c6bbd491592313fc77e056f6424ea4668","date":"2012-07-07T20:32:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dlsym RTLD_NEXT support\n\npreviously this was being handled the same as a library-specific,\ndependency-order lookup on the next library in the global chain, which\nis likely to be utterly meaningless. instead the lookup needs to be in\nthe global namespace, but omitting the initial portion of the global\nlibrary chain up through the calling library.\n"},{"hash":"a3bdcd93764ba514ca83ccbc5c85fefaf18d31d7","date":"2012-07-08T04:05:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove little-endian assumption from arm atomic.h\n\nthis hidden endian dependency had left big endian arm badly broken.\n"},{"hash":"8bbc3be4b48e2e3b3e772a217a4277ce04762aff","date":"2012-07-09T01:32:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make arm syscalls (still non-inline) more efficient\n\nno need to pass zero for unused arguments; just omit them.\n"},{"hash":"59c4ead16a37a74ee092dd7be157709b54d15d96","date":"2012-07-10T04:59:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong value of FLT_EVAL_METHOD for x86_64\n"},{"hash":"bd1cf09c375e56c7fba6b7a1036b33b9591b5dba","date":"2012-07-10T05:18:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support -mfpmath=387 on x86_64\n\napparently somebody wants this for something... and it doesn't hurt.\n"},{"hash":"0420b874465db7544a9e1f320969b4920c9405d8","date":"2012-07-11T05:41:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix lots of breakage on dlopen, mostly with explicit pathnames\n\nmost importantly, the name for such libs was being set from an\nuninitialized buffer. also, shortname always had an initial '/'\ncharacter, making it useless for looking up already-loaded libraries\nby name, and thus causing repeated searches through the library path.\n\nmajor changes now:\n\n- shortname is the base name for library lookups with no explicit\n  pathname. it's initially clear for libraries loaded with an explicit\n  pathname (and for the main program), but will be set if the same\n  library (detected via inodes match) is later found by a search.\n\n- exact name match is never used to identify libraries loaded with an\n  explicit pathname. in this case, there's no explicit search, so we\n  can just stat the file and check for inode match.\n"},{"hash":"e864a29090459c98d106f6f74a16b3558e18fdca","date":"2012-07-11T05:47:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker depend on -DSHARED not -fPIC\n\nif libc.a is compiled PIC for use in static PIE code, this should not\ncause the dynamic linker (which still does not support static-linked\nmain program) to be built into libc.a.\n"},{"hash":"fcaec912ed406659832f452e71a6c965308362dd","date":"2012-07-11T06:44:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"changes to kernel sigaction struct handling in preparation for mips port\n"},{"hash":"0b637798cd1d44778b3386c04cea5f8a2701acda","date":"2012-07-11T06:44:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage from last commit: forgot to include ksigaction.h\n\nthis file can be overridden by a same-named file in an arch dir.\n"},{"hash":"5091e0802fea020bf6f7305e9743f276208413d4","date":"2012-07-11T06:48:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use unsigned bitmask for consistency in ksigaction\n\nthe type doesn't actually matter, just the size, but it's nice to be\nconsistent...\n"},{"hash":"cd8d72451662f0157d06fcf666669db543dcea3b","date":"2012-07-11T07:20:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unused var in new sigaction code\n"},{"hash":"6315004f6102dca44c4ba50654a36967b8b9c2a6","date":"2012-07-11T08:22:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"initial version of mips (o32) port, based on work by Richard Pennington (rdp)\n\nbasically, this version of the code was obtained by starting with\nrdp's work from his ellcc source tree, adapting it to musl's build\nsystem and coding style, auditing the bits headers for discrepencies\nwith kernel definitions or glibc/LSB ABI or large file issues, fixing\nup incompatibility with the old binutils from aboriginal linux, and\nadding some new special cases to deal with the oddities of sigaction\nand pipe syscall interfaces on mips.\n\nat present, minimal test programs work, but some interfaces are broken\nor missing. threaded programs probably will not link.\n"},{"hash":"d0bfbd9dca27e3053534bbf70b36e229d0c0cf21","date":"2012-07-11T15:34:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"generic c version of __set_thread_area for archs where it works\n\non other archs, like x86[_64], asm version is required\n"},{"hash":"5c94367a9b0f1c1dd0deadb0f320242b59f844bb","date":"2012-07-11T15:35:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"first attempt at making threads work on mips\n"},{"hash":"715b6403ce25110d594c7814e9cff860486a6f85","date":"2012-07-12T00:44:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix clone() on mips (args were in wrong order)\n\nwith this change, threads on mips seem to be working\n"},{"hash":"2b3cc04a8d383a56a7031e98a7e4da36958d943a","date":"2012-07-12T02:29:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix MAP_ANONYMOUS value for mips, remove cruft copied from i386\n"},{"hash":"b58f738bcb5877c83aef49129b40827a1d5ae4c7","date":"2012-07-12T02:59:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips clone() on real linux kernel\n\nthe old code worked in qemu app-level emulation, but not on real\nkernels where the clone syscall does not copy the register values to\nthe new thread. save arguments on the new thread stack instead.\n"},{"hash":"a03f69d4456d3ac5120cc07a22af8ecb631444bb","date":"2012-07-12T03:01:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mips clone: don't free stack space used to copy arg\n\nthe mips abi reserves stack space equal to the size of the in-register\nargs for the callee to save the args, if desired. this would cause the\nbeginning of the thread structure to be clobbered...\n"},{"hash":"92f8396b0c8e4f146563b87f46137484cfb36e31","date":"2012-07-12T03:36:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix potential race condition in detached threads\n\nafter the thread unmaps its own stack/thread structure, the kernel,\nperforming child tid clear and futex wake, could clobber a new mapping\nmade at the same location as the just-removed thread's tid field.\ndisable kernel clearing of child tid to prevent this.\n"},{"hash":"5fac93db379cd82bd2d661715b360924eccca82c","date":"2012-07-12T04:14:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips mcontext_t structure size\n\notherwise offs in ucontext_t will be wrong, and break code that\ninspects or modifies the signal makes (including cancellation code).\n"},{"hash":"ea4175e73f9ae886d60add33c4473774e8695062","date":"2012-07-12T15:00:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage of x86_64 sigaction from recent changes for mips\n"},{"hash":"c89f130f39b413d1fb1733166ca63d694685c529","date":"2012-07-12T15:14:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_kill unlocking\n\nit had not been updated for the futex-based locks\n"},{"hash":"bbbe87e35cfeef593e23010e35528e722027567f","date":"2012-07-12T15:23:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix several locks that weren't updated right for new futex-based __lock\n\nthese could have caused memory corruption due to invalid accesses to\nthe next field. all should be fixed now; I found the errors with fgrep\n-r '__lock(&', which is bogus since the argument should be an array.\n"},{"hash":"db11e96493d1a814266104332fa1f53a51622213","date":"2012-07-12T17:48:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips syscalls with long long args\n\nlike arm, mips requires 64-bit arguments to be \"aligned\" on an even\nregister boundary.\n"},{"hash":"ba8a96b0689943195cb49e7e4ef0de254532d9e2","date":"2012-07-12T18:21:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more mips bits-header fixes\n\nsignal handling was very broken because of this\n"},{"hash":"a1546e8d61144fdb0f2ac3270250349fa77166f0","date":"2012-07-12T18:24:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable dynamic linking on mips for now (broken)\n"},{"hash":"90e123f4a810d17c6bd8c2102939f6416481427e","date":"2012-07-12T20:54:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix redef of sigprocmask constants on mips\n\nthis fix is easier than trying to reorder the header stuff\n"},{"hash":"96107564e2eabbc13800fe7a7d930b67216d0805","date":"2012-07-13T01:37:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround another sendmsg kernel bug on 64-bit machines\n\nthe kernel wrongly expects the cmsg length field to be size_t instead\nof socklen_t. in order to work around the issue, we have to impose a\nlength limit and copy to a local buffer. the length limit should be\nmore than sufficient for any real-world use; these headers are only\nused for passing file descriptors and permissions between processes\nover unix sockets.\n"},{"hash":"e1e4d6b269dd5c03480d55b031f2932df0490c96","date":"2012-07-13T01:49:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mipsel (little endian) support\n\nthe fields in the mcontext_t are long long (for no good reason) even\non 32-bit mips, so the offset of the instruction pointer (as a word)\nvaries depending on endianness.\n"},{"hash":"532cd3a7171667d3f18e03c7c8d9d6f7846551e4","date":"2012-07-13T02:20:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sigsetjmp asm for mips\n"},{"hash":"48d20136b033da456f7bd98dfc9c384b39891d5f","date":"2012-07-13T03:18:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken mips a_fetch_add\n\nsc was overwriting the result\n"},{"hash":"649cec5f9868070b4d350b861ee7f68b03a552a8","date":"2012-07-13T05:31:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker tell the debugger its own pathname\n\nuse the main program's PT_INTERP header if possible, since this is\nsure to be a correct (and hopefully absolute) pathname.\n"},{"hash":"7be3b5a073e77f1147acfa728725f9f81d20ceb0","date":"2012-07-15T00:15:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid blx instruction which does not exist on armv4t or armv4\n"},{"hash":"06650b968461b72d5eb44063dd68c176be330372","date":"2012-07-15T00:16:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getservby*() with null pointer for protocol argument\n\nnot sure this is the best fix but it should work\n"},{"hash":"f07222739bc744fd7f5d5a06f2b39d07fde6ab3e","date":"2012-07-19T04:37:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in aio.h\n"},{"hash":"68c58223672465202958a5da16f19f64f32acf74","date":"2012-07-21T21:56:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix logic error for skipping failed interfaces in if_nameindex\n"},{"hash":"75fff40b9b536e0e6847d17ecc076894ca7b7068","date":"2012-07-22T22:49:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make getservby*_r return error code rather than -1 (and using errno)\n\nuntested but should be correct..\n"},{"hash":"dc046f55bbff5f79d022882723c73a6b9af0bf86","date":"2012-07-22T22:55:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add floating point register saving/restoring to mips setjmp/longjmp\n\nalso fix the alignment of jmp_buf to meet the abi. linux always\nemulates fpu on mips if it's not present, so enabling this code\nunconditionally is \"safe\" but may be slow. in the long term it may be\npreferable to find a way to disable it on soft float builds.\n"},{"hash":"d64624912469fc4eccee95e65d7c9e3a3076d699","date":"2012-07-22T22:58:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong size for sigjmp_buf signal set array\n\n128 is the size in bytes, not longs.\n"},{"hash":"b4f632bb279724eee4aa25bc4f575a9fde172551","date":"2012-07-22T23:02:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace issue in prototypes in math.h\n"},{"hash":"efe72c561925a711d8dbc7894ef27fe823205e21","date":"2012-07-22T23:42:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"getaddrinfo /etc/services lookup support\n"},{"hash":"845a5e69fa33bf49eea81a7b8c80902ab1687f2e","date":"2012-07-23T02:09:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove scanf dependency from getaddrinfo /etc/services support\n"},{"hash":"42f0e965c42d7611e7a02718bffb1a8ffba74488","date":"2012-07-23T20:32:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add pipe2 syscall\n\nbased on patch by orc and Isaac Dunham, with some details fixed.\n"},{"hash":"207460d09742304941f1a010a89fc2efa46bcb29","date":"2012-07-23T20:39:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add extended attributes syscalls\n\nbased on patch by orc and Isaac Dunham, with some fixes.\n"},{"hash":"53147f902b7f84d8108bd9738641a53722a4a205","date":"2012-07-23T20:50:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add splice and vmsplice syscalls\n\nbased on patches by orc and Isaac Dunham.\n"},{"hash":"d426b045332718ae6d42237303d657fd97c51455","date":"2012-07-23T20:54:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ioperm/iopl syscalls\n\nbased on patches by orc and Isaac Dunham, with some fixes. sys/io.h\nexists and contains prototypes for these functions regardless of\nwhether the target arch has them; this is a bit unorthodox but I don't\nthink it will break anything. the function definitions do not exist\nunless the appropriate SYS_* syscall number macro is defined, which\nshould make sure configure scripts looking for these functions don't\nfind them on other systems.\n\npresently, sys/io.h does not have the inb/outb/etc. port io\nmacros/functions. I'd be surprised if ioperm/iopl are useful without\nthem, so they probably need to be added at some point in appropriate\nbits/io.h files...\n"},{"hash":"5d26d5d15bf6c2fc8c0e58b76fb418b51e207af7","date":"2012-07-24T03:29:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"gcc wrapper improvement: leave libgcc dir in the library path\n\nthis is needed in case -lgcc is passed explicitly on the link command\nline, for example if the wrapper is being used to build musl itself.\n"},{"hash":"07e62953c768f9f09485388c22ffaed98d11d676","date":"2012-07-24T04:51:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"retry on cas failures in sem_trywait\n\nthis seems counter-intuitive since sem_trywait is supposed to just try\nonce, not wait for the semaphore. however, the retry loop is not a\nwait. instead, it's to handle the case where the value changes due to\na simultaneous post or wait from another thread while the semaphore\nvalue remains positive. in such a case, it's absolutely wrong for\nsem_trywait to fail with EAGAIN because the semaphore is not busy.\n"},{"hash":"e1b9c1b01be294cc2865acfe33544d5e5cc50eb4","date":"2012-07-27T04:14:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"save AT_HWCAP from auxv for subsequent use in machine-specific code\n\nit's expected that this will be needed/useful only in asm, so I've\ngiven it its own symbol that can be addressed in pc-relative ways from\nasm rather than adding a field in the __libc structure which would\nrequire hard-coding the offset wherever it's used.\n"},{"hash":"5aac5e2189f322a54a49958d928f30e1c9505561","date":"2012-07-27T04:17:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize arm setjmp/longjmp register saving/loading\n\nthe original code was wrongly based on how it would be done in thumb\nmode, but that's not needed because musl's asm only targets arm.\n"},{"hash":"970ef6a1240adfd685c27bf3407dfd06606a17e8","date":"2012-08-01T01:18:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize mempcpy to minimize need for data saved across the call\n"},{"hash":"129ca6c05d9ad155b02ed9198798c5e33673f195","date":"2012-08-02T18:32:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing static in getusershell (namespace pollution)\n"},{"hash":"b0fc78520d7d51ab064f629e228c27d0fa5a4b82","date":"2012-08-03T01:02:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix argument type error on wcwidth function\n\nsince the correct declaration was not visible, and since the\nrepresentation of the types wchar_t and wint_t always match, a\ncompiler would have to go out of its way to make this bug manifest,\nbut better to fix it anyway.\n"},{"hash":"1b23145e8890f4930c9129ed3f28eea9cbb1effc","date":"2012-08-03T01:05:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"abstract out compiler runtime library for linking libc.so\n\nthis allows config.mak to override the default -lgcc for building with\nother compilers such as pcc/clang/etc.\n"},{"hash":"8a996b7e6c3cf9f852bfcd2adf2ed68bf4725754","date":"2012-08-03T02:11:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.3\n"},{"hash":"5a3a37861573722ca417d774701b952f39abea7e","date":"2012-08-05T06:37:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"floating point support for arm setjmp/longjmp\n\nnot heavily tested, but at least they don't seem to break anything on\nsoft float targets with or without coprocessors. they check the auxv\nAT_HWCAP flags to determine which coprocessor, if any, is available.\n"},{"hash":"05eff01e89ee345e70acdbebc9c3778766b76ee2","date":"2012-08-05T06:38:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linker internals cleanup\n"},{"hash":"7cb44cd3de59dc3acf5428c19a6a882aa896e6d0","date":"2012-08-05T06:44:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more dynamic linker internals cleanup\n\nchanging the string printed for the dso name is not a regression; the\nold code was simply using the wrong dso name (head rather than the dso\ncurrently being relocated). this will be fixed in a later commit.\n"},{"hash":"87d13a4c33b8f75afac357f46341847ac92e2978","date":"2012-08-05T06:49:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more cleanup of dynamic linker internals\n"},{"hash":"d04378016bfc993d8727215d79567a1c52904ade","date":"2012-08-05T16:32:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynlink.lo depend on reloc.h in makefile\n\nthis is mainly a development convenience but will also ensure users\nbuilding from latest git always get up-to-date arch-specific dynamic\nlinker code without having to \"make clean\".\n"},{"hash":"babf820180368f00742ec65b2050a82380d7c542","date":"2012-08-05T16:50:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mips dynamic linker support\n\nnot heavily tested, but the basics are working. the basic concept is\nthat the dynamic linker entry point code invokes a pure-PIC (no global\naccesses) C function in reloc.h to perform the early GOT relocations\nneeded to make the dynamic linker itself functional, then invokes\n__dynlink like on other archs. since mips uses some ugly arch-specific\nhacks to optimize relocating the GOT (rather than just using the\nnormal DT_REL[A] tables like on other archs), the dynamic linker has\nbeen modified slightly to support calling arch-specific relocation\ncode in reloc.h.\n\nmost of the actual mips-specific behavior was developed by reading the\noutput of readelf on libc.so and simple executable files. i could not\nfind good reference information on which relocation types need to be\nsupported or their semantics, so it's possible that some legitimate\nusage cases will not work yet.\n"},{"hash":"470569ca00f4c6e388396614b9b9ce62aef239bb","date":"2012-08-05T16:57:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove configure check disabling shared libraries on mips\n"},{"hash":"59f4086cb157ab15ab59474d7cfab3a5cb92c5bd","date":"2012-08-05T17:46:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix change lost in the process of integrating mips dynamic linker\n"},{"hash":"fa91df41e82f0dc84edab3e9ec7dcb47d7195fa1","date":"2012-08-05T17:48:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more stuff lost committing mips dynamic linker\n"},{"hash":"7d9a5c6af7738abe31d7631d6ae7194f94e850eb","date":"2012-08-05T18:03:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more changes that were lost when committing mips dynamic linker\n"},{"hash":"32e7bd78ae3b290f28ada2b3d58460068ce08781","date":"2012-08-05T18:12:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"align mips _init/_fini functions\n\nsince .init and .fini are not .text, the toolchain does not seem to\nalign them for code by default. this yields random breakage depending\non the object sizes the linker is dealing with.\n"},{"hash":"7fee5f96063ffd55ba67a87a795222c30364e25f","date":"2012-08-05T18:23:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix socket.h on mips\n\nwhy does mips have to be gratuitously incompatible in every possible\nimaginable way?\n"},{"hash":"3a1e7566dbfc85b397c9c4677606782fd9851ecc","date":"2012-08-05T19:39:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dlsym RTLD_NEXT support for mips\n\nuntested\n"},{"hash":"721564a2640604f0291ae02a0439859ddd2167b3","date":"2012-08-05T21:23:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure accept mipsel\n"},{"hash":"6ecff18cc574b766c683a8a189fcbc3165935df6","date":"2012-08-07T23:10:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug dlsym bug that slipped in during dynamic linker cleanup\n"},{"hash":"ff02f94e2d3a1e96ffc1918abd06e09ddd11fd06","date":"2012-08-07T23:19:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix another mips gratuitous-incompatibility bug: ioctl numbers\n"},{"hash":"ae0b9da48c91087c5ab78e4918deb69665d0ccc6","date":"2012-08-07T23:59:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further fixes for mips ioctl.h header\n\nuntested; hopefully it's right now\n"},{"hash":"1fb01691547e85be253a4f1543be3920de651e27","date":"2012-08-08T18:18:16.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix exp.s on i386 and x86_64 so the exception flags are correct\n\nexp(inf), exp(-inf), exp(nan) used to raise wrong flags\n"},{"hash":"b3c4cc121f70faea45389fe7ddc1127ed5cbd8bb","date":"2012-08-10T00:47:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make crypt return an unmatchable hash rather than NULL on failure\n\nunfortunately, a large portion of programs which call crypt are not\nprepared for its failure and do not check that the return value is\nnon-null before using it. thus, always \"succeeding\" but giving an\nunmatchable hash is reportedly a better behavior than failing on\nerror.\n\nit was suggested that we could do this the same way as other\nimplementations and put the null-to-unmatchable translation in the\nwrapper rather than the individual crypt modules like crypt_des, but\nwhen i tried to do it, i found it was making the logic in __crypt_r\nfor keeping track of which hash type we're working with and whether it\nsucceeded or failed much more complex, and potentially error-prone.\nthe way i'm doing it now seems to have essentially zero cost, anyway.\n"},{"hash":"83b42d94bd1009da6a95052d9ef0edeb1c73c8e4","date":"2012-08-10T01:35:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add defines for number of sigset_t bytes syscalls expect\n\nyet another gratuitous mips incompatibility...\n"},{"hash":"2f437040e7911d9bef239588ea7ed6f4b9102922","date":"2012-08-10T02:52:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix (hopefully) all hard-coded 8's for kernel sigset_t size\n\nsome minor changes to how hard-coded sets for thread-related purposes\nare handled were also needed, since the old object sizes were not\nnecessarily sufficient. things have gotten a bit ugly in this area,\nand i think a cleanup is in order at some point, but for now the goal\nis just to get the code working on all supported archs including mips,\nwhich was badly broken by linux rejecting syscalls with the wrong\nsigset_t size.\n"},{"hash":"a02bf5fc508c32e8617ff0528d1cc89ed56e3d03","date":"2012-08-10T04:20:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add blowfish hash support to crypt\n\nthere are still some discussions going on about tweaking the code, but\nat least thing brings us to the point of having something working in\nthe repository. hopefully the remaining major hashes (md5,sha) will\nfollow soon.\n"},{"hash":"c5875ad34b88e159e664587df9f8a9dbac86879f","date":"2012-08-10T18:59:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect ptrdiff_t type on mips\n"},{"hash":"e3ebe7db5de64c193202f1c5b321c9a470e730c5","date":"2012-08-10T19:13:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use int instead of long for ptrdiff_t on all 32-bit archs\n\nthis is needed to match the underlying \"ABI\" standards. it's not\nreally an ABI issue since the binary representations are the same, but\nhaving the wrong type can lead to errors when the type arising from a\ndifference-of-pointers expression does not match the defined type of\nptrdiff_t. most of the problems affect C++, not C.\n"},{"hash":"4c346919a9b238748de2ee85ce6d749fc3cf7059","date":"2012-08-11T02:18:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"trivial optimization to printf: avoid wasted call frame\n\namusingly, this cuts more than 10% off the run time of printf(\"a\"); on\nthe machine i tested it on.\n\nsadly the same optimization is not possible for snprintf without\nduplicating all the pseudo-FILE setup code, which is not worth it.\n"},{"hash":"2b964b010e5d37cb2ff712d57a14095188d689e3","date":"2012-08-11T03:39:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor but worthwhile optimization in printf: avoid expensive strspn\n\nthe strspn call was made for every format specifier and end-of-string,\neven though the expected return value was 1-2 for normal usage.\nreplace with simple loop.\n"},{"hash":"617182734ca0beffa347747019d78b972e2038f9","date":"2012-08-11T22:10:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add bsd fgetln function\n\noptimized to avoid allocation and return lines directly out of the\nstream buffer whenever possible.\n"},{"hash":"35c16933f03a3db49f3e2048759d850460c8a509","date":"2012-08-11T22:39:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove buggy short-string wcsstr implementation; always use twoway\n\nsince this interface is rarely used, it's probably best to lean\ntowards keeping code size down anyway. one-character needles will\nstill be found immediately by the initial wcschr call anyway.\n"},{"hash":"f997e224fc30361fe683c6b5d0ba39718043ca8d","date":"2012-08-11T22:40:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unused but buggy code from strstr.c\n"},{"hash":"036eaa24cf573c69982ba18dd427de68f6eeba2a","date":"2012-08-11T23:51:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid need for -march=mips2 to compile mips atomic.h asm\n\nlinux guarantees ll/sc are always available. on mips1, they will be\nemulated by the kernel. thus they are part of the linux mips1 abi and\nsafe to use.\n"},{"hash":"aaa9eb5101e3a748218fb9373dd9655b50582da2","date":"2012-08-12T01:33:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"memcpy asm for i386 and x86_64\n"},{"hash":"0c42beb5f90fe5583c2cae5a31c2ef68847974e3","date":"2012-08-13T18:50:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"publicly expose getdents api under _BSD_SOURCE\n"},{"hash":"2242bf616b893e85886ed0a2348b96bf1cf7623e","date":"2012-08-13T18:51:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add significand[fl] math functions\n"},{"hash":"ab76321c14e18e70c853f34202a567749292eafc","date":"2012-08-13T20:00:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove significandl\n\nthis function never existed historically; since the float/double\nfunctions it's based on are nonstandard and deprecated, there's really\nno justification for its existence except that glibc has it. it can be\nadded back if there's ever really a need...\n"},{"hash":"23e6940a2cf101017df33236ebee0fd4e3383172","date":"2012-08-13T20:06:01.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"math: fix _BSD_SOURCE namespace in math.h\n"},{"hash":"2d93d6446191def352b8913e859d6104f1398c72","date":"2012-08-14T01:55:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/exp'\n"},{"hash":"b99836f3ad817788002bc0def7e2442341c03414","date":"2012-08-14T01:55:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/bsd'\n"},{"hash":"94e920d0cd12d1ef7d82ba72d912771235710328","date":"2012-08-15T02:50:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support configuring cross compiling with CROSS_COMPILE prefix variable\n"},{"hash":"0d4d1a96e4fd827267250e469affc7ebfc44324f","date":"2012-08-15T04:19:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update copyright/credits for recent code additions\n"},{"hash":"7650390de8f72822ec0d4a9fb5b52efcf0be4698","date":"2012-08-15T12:31:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing xattr functions\n\nnot sure why these were originally omitted..\n"},{"hash":"3f80afc50577dada3940b66ef5b67da2f43cc00a","date":"2012-08-15T19:35:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve headers to better deal with removed-in-posix-2008 features\n\nwith this patch, setting _POSIX_SOURCE, or setting _POSIX_C_SOURCE or\n_XOPEN_SOURCE to an old version, will bring back the interfaces that\nwere removed in POSIX 2008 - at least the ones i've covered so far,\nwhich are gethostby*, usleep, and ualarm. if there are other functions\nstill in widespread use that were removed for which similar changes\nwould be beneficial, they can be added just like this.\n"},{"hash":"dc82ee4e30ec0eae367f7ab076a7325b4d858dd5","date":"2012-08-16T02:35:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle null arguments to legacy bsd err.h functions\n"},{"hash":"11458e5b098319cf3e2d05c8cbaa74d58db740e3","date":"2012-08-17T20:53:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix float parsing logic for long decimal expansions\n\nthis affects at least the case of very long inputs, but may also\naffect shorter inputs that become long due to growth while upscaling.\nbasically, the logic for the circular buffer indices of the initial\nbase-10^9 digit and the slot one past the final digit, and for\nsimplicity of the loop logic, assumes an invariant that they're not\nequal. the upscale loop, which can increase the length of the\nbase-10^9 representation, attempted to preserve this invariant, but\nwas actually only ensuring that the end index did not loop around past\nthe start index, not that the two never become equal.\n\nthe main (only?) effect of this bug was that subsequent logic treats\nthe excessively long number as having no digits, leading to junk\nresults.\n"},{"hash":"da8d0fc4fa3490f418a438b7e0830f9af312d41f","date":"2012-08-17T21:13:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix extremely rare but dangerous race condition in robust mutexes\n\nif new shared mappings of files/devices/shared memory can be made\nbetween the time a robust mutex is unlocked and its subsequent removal\nfrom the pending slot in the robustlist header, the kernel can\ninadvertently corrupt data in the newly-mapped pages when the process\nterminates. i am fixing the bug by using the same global vm lock\nmechanism that was used to fix the race condition with unmapping\nbarriers after pthread_barrier_wait returns.\n"},{"hash":"07809363127dec2e4e9a421219a5eddf05b61592","date":"2012-08-17T23:32:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"split up installation target\n\npatch by Luca Barbato (lu_zero)\n"},{"hash":"efe9751468aae9eefd2f43781ae6d46170d97512","date":"2012-08-18T00:02:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug computing argc when invoking ld-musl-mips.so.1 progname ...\n"},{"hash":"259071c249643ecb5e6799422d45d053cb64d515","date":"2012-08-18T01:23:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"crt1 must align stack pointer on mips\n\nit's naturally aligned when entered with the kernel argv array, but if\nld.so has been invoked explicitly to run a program, the stack will not\nbe aligned due to having thrown away argv[0].\n"},{"hash":"3ae8b980d17e29c86c30939da2b9a251b9e6b36c","date":"2012-08-18T03:45:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add mips to supported arch list in INSTALL file\n"},{"hash":"53de960d6f12480a041b7b8cbf65cd1d3f3f9b23","date":"2012-08-18T03:51:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.4\n"},{"hash":"04109502c0355878d238bdba06a09b2593b2996f","date":"2012-08-18T20:00:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker report all failures before exiting\n\nbefore, only the first library that failed to load or symbol that\nfailed to resolve was reported, and then the dynamic linker\nimmediately exited. when attempting to fix a library compatibility\nissue, this is about the worst possible behavior. now we print all\nerrors as they occur and exit at the very end if errors were\nencountered.\n"},{"hash":"a749ba3adc2f3b4abfc68b21d4c3741b20c8f657","date":"2012-08-20T00:48:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug whereby most atexit-registered functions got skipped\n"},{"hash":"67ba40d1e05c39ffe71294476d2f2c13c481f3bd","date":"2012-08-23T18:38:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize legacy ffs function\n"},{"hash":"9a470b0a6eb85f8105155881fbd67f26a804f994","date":"2012-08-24T18:23:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dirent.h with _BSD_SOURCE\n"},{"hash":"43a5a00e4ab292e0a615b655f1e77837d6c1701e","date":"2012-08-24T19:55:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing uintXX_t in nameser.h\n"},{"hash":"d03b3e732368626769fb1cec7f3c3898ffb57cca","date":"2012-08-24T20:16:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"stdio_ext.h needs to include stdio.h, at least to get FILE...\n"},{"hash":"7dba0494e8153e4358b09cbf30ff07d5ba4dbf37","date":"2012-08-24T21:01:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"type exposure fixes in sys/sem.h\n"},{"hash":"2bd05a4fc26c297754f7ee5745a1c3b072a44b7d","date":"2012-08-25T21:13:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add gnu hash support in the dynamic linker\n\nbased on the patches contributed by boris brezillon.\n"},{"hash":"731e8ffdcf6877c04092aa9fbd2b17907b8846c7","date":"2012-08-25T21:24:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure canary is setup if stack-prot libs are dlopen'd into non-ssp app\n\npreviously, this usage could lead to a crash if the thread pointer was\nstill uninitialized, and otherwise would just cause the canary to be\nzero (less secure).\n"},{"hash":"08b3c71410e2e4dcbb32d8c6a4fb7c4a8b20ad87","date":"2012-08-25T21:30:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use new search_vec function to find vdso in dynamic linker\n"},{"hash":"dbcb3ad9255c71cbfeb4e9d65d56a8f49dcda6a6","date":"2012-08-25T21:31:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up search_vec usage for vdso\n"},{"hash":"a5d6199d091aad750b1fc325240a141a88ee770e","date":"2012-08-25T21:40:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug in gnu hash lookup on dlsym(handle, name) lookups\n\nwrong hash was being passed; just a copy/paste error. did not affect\nlookups in the global namespace; this is probably why it was not\ncaught in testing.\n"},{"hash":"b5289fd749bc4d2637610d712f8fe650f214f1d5","date":"2012-08-26T02:49:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add c11 quick_exit and at_quick_exit functions\n"},{"hash":"9bff7c133e73ecfb200614d7a7d386a164a1a61f","date":"2012-08-26T03:15:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement \"low hanging fruit\" from C11\n\nbased on Gregor's patch sent to the list. includes:\n- stdalign.h\n- removing gets in C11 mode\n- adding aligned_alloc and adjusting other functions to use it\n- adding 'x' flag to fopen for exclusive mode\n"},{"hash":"f419bcb9dcfb6af60fbf1d58d92caf4b3d62a4da","date":"2012-08-27T01:09:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dladdr support for dynamic linker (nonstandard extension)\n\nbased on patches submitted by boris brezillon. this commit also fixes\nthe issue whereby the main application and libc don't have the address\nranges of their mappings stored, which was theoretically a problem for\nRTLD_NEXT support in dlsym; it didn't actually matter because libc\nnever calls dlsym, and it seemed to be doing the right thing (by\nchance) for symbols in the main program as well.\n"},{"hash":"8b28aa9c94e7c6179d70fe73afcd3fff29809d61","date":"2012-08-27T14:07:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug caused by main app & libc having map set; cannot free them\n"},{"hash":"b439c051c7eee4eb4b93fc382f993aa6305ce530","date":"2012-08-29T13:36:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"get rid of eh_frame bloat\n\nif needed for debugging, it will be output in the .debug_frame section\ninstead, where it is not part of the loaded program and where the\nstrip command is free to strip it.\n"},{"hash":"88bf5a8a8d7d796f63cca8589f4de67aa8345f1a","date":"2012-08-29T16:41:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sha256/sha512 crypt\n\nbased on versions sent to the list by nsz, with some simplification\nand debloating. i'd still like to get them a bit smaller, or ideally\nmerge them into a single file with most of the code being shared, but\nthat can be done later.\n"},{"hash":"507b6091fa75903ff05c21a4470b7b7cc3061d0d","date":"2012-08-29T16:44:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"limit sha512 rounds to similar runtime to sha256 limit\n\nthese limits could definitely use review, but for now, i feel\nconsistency and erring on the side of preventing servers from getting\nbogged down by excessively-slow user-provided settings (think\n.htpasswd) are the best policy. blowfish should be updated to match.\n"},{"hash":"13157b025e7e19f7ecc27ee93e69057b7fda9b37","date":"2012-08-29T16:56:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"anti-DoS rounds count limits for blowfish and des crypt\n\nall of the limits could use review, but err on the side of avoiding\nexcessive rounds for now.\n"},{"hash":"0447b8dc5c4479fa7b505d2b9d341bca12adbd25","date":"2012-08-30T12:27:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing statics in crypt_sha256 code\n"},{"hash":"3f62f76cab46fbd28248ed251a88278c6ea1be3a","date":"2012-09-01T04:20:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong type for poll.h nfds_t\n\nthis should not break anything since the type should never be used\nexcept as the argument type for poll.\n"},{"hash":"fb247fafa04ee52dda816355ab0461132297b9a4","date":"2012-09-02T16:46:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid \"inline\" in public headers for strict c89 compatibility\n\nwhile musl itself requires a c99 compiler, some applications insist on\nbeing compiled with c89 compilers, and use of \"inline\" in the headers\nwas breaking them. much of this had been avoided already by just\nskipping the inline keyword in pre-c99 compilers or modes, but this\nnew unified solution is cleaner and may/should result in better code\ngeneration in the default gcc configuration.\n"},{"hash":"fcfba99503746e44585d7e318562dd425e8ff390","date":"2012-09-07T00:21:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken ttyname[_r] (failure to null-terminate result)\n"},{"hash":"594318fd3d13c7dda1ea87a76934e052ac74301f","date":"2012-09-07T00:25:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove dependency of memmove on memcpy direction\n\nthis commit introduces a performance regression in many uses of\nmemmove, which will need to be addressed before the next release. i'm\nmaking it as a temporary measure so that the restrict patch can be\ncommitted without invoking undefined behavior when memmove calls\nmemcpy with overlapping regions.\n"},{"hash":"bac03cdde1137c16b4c194e137310e2748661dcc","date":"2012-09-07T00:28:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove dependency of wmemmove on wmemcpy direction\n\nunlike the memmove commit, this one should be fine to leave in place.\nwmemmove is not performance-critical, and even if it were, it's\nalready copying whole 32-bit words at a time instead of bytes.\n"},{"hash":"400c5e5c8307a2ebe44ef1f203f5a15669f20347","date":"2012-09-07T02:44:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use restrict everywhere it's required by c99 and/or posix 2008\n\nto deal with the fact that the public headers may be used with pre-c99\ncompilers, __restrict is used in place of restrict, and defined\nappropriately for any supported compiler. we also avoid the form\n[restrict] since older versions of gcc rejected it due to a bug in the\noriginal c99 standard, and instead use the form *restrict.\n"},{"hash":"ac5d085691e5a797a21ae36111aa0b274e1cf4ba","date":"2012-09-07T02:58:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dladdr should be available under _BSD_SOURCE as well as _GNU_SOURCE\n"},{"hash":"c8ea985748a6857ac5db9ef50f9c92e2966c04d5","date":"2012-09-07T03:12:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _Noreturn function attribute, with fallback for pre-C11 GNUC\n"},{"hash":"453059571c9dc84dd168631eced25ec2d7afd98e","date":"2012-09-07T03:27:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid implicit pointer conversion in gnulib-compat functions\n"},{"hash":"0c05bd3a9c165cf2f0b9d6fa23a1f96532ddcdb3","date":"2012-09-07T03:34:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further use of _Noreturn, for non-plain-C functions\n\nnote that POSIX does not specify these functions as _Noreturn, because\nPOSIX is aligned with C99, not the new C11 standard. when POSIX is\neventually updated to C11, it will almost surely give these functions\nthe _Noreturn attribute. for now, the actual _Noreturn keyword is not\nused anyway when compiling with a c99 compiler, which is what POSIX\nrequires; the GCC __attribute__ is used instead if it's available,\nhowever.\n\nin a few places, I've added infinite for loops at the end of _Noreturn\nfunctions to silence compiler warnings. presumably\n__buildin_unreachable could achieve the same thing, but it would only\nwork on newer GCCs and would not be portable. the loops should have\nnear-zero code size cost anyway.\n\nlike the previous _Noreturn commit, this one is based on patches\ncontributed by philomath.\n"},{"hash":"c4ea0e3f8e286ec535691560d234d923b7f5d821","date":"2012-09-07T03:49:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide loff_t for splice syscall\n\nso far, this is the only actual use of loff_t i've found. some\nsoftware, including glib, assumes loff_t must exist if splice exists;\nthis is a reasonable assumption since the official prototype for\nsplice uses loff_t, as it always works with 64-bit offsets regardless\nof the selected libc off_t size. i'm using #define for now rather than\na typedef to make it easy to define in other headers if necessary\n(like the LFS64 ugliness), but it may be necessary to add it to\nalltypes.h eventually if other functions end up needing it.\n"},{"hash":"780aede41913528781bbc8ff0d0e27505595f7c0","date":"2012-09-07T03:57:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix constraint violation in ftw\n\nvoid* does not implicitly convert to function pointer types.\n"},{"hash":"b9bb8f67bbac9bab5314fb00974ad469476e936e","date":"2012-09-07T04:48:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup src/linux and src/misc trees, etc.\n\npreviously, it was pretty much random which one of these trees a given\nfunction appeared in. they have now been organized into:\n\nsrc/linux: non-POSIX linux syscalls (possibly shard with other nixen)\nsrc/legacy: various obsolete/legacy functions, mostly wrappers\nsrc/misc: still mostly uncategorized; some misc POSIX, some nonstd\nsrc/crypt: crypt hash functions\n\nfurther cleanup will be done later.\n"},{"hash":"9f65796c35bd93a1de42752ce8af901acfe4b1a4","date":"2012-09-07T16:18:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add clang-compatible thread-pointer code for mips\n\nclang does not presently support the \"v\" constraint we want to use to\nget the result from $3, and trying to use register...__asm__(\"$3\") to\ndo the same invokes serious compiler bugs. so for now, i'm working\naround the issue with an extra temp register and putting $3 in the\nclobber list instead of using it as output. when the bugs in clang are\nfixed, this issue should be revisited to generate smaller/faster code\nlike what gcc gets.\n"},{"hash":"c1a9658bd19245ff0fb52d3da567815d822fb622","date":"2012-09-08T03:13:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"default features: make musl usable without feature test macros\n\nthe old behavior of exposing nothing except plain ISO C can be\nobtained by defining __STRICT_ANSI__ or using a compiler option (such\nas -std=c99) that predefines it. the new default featureset is POSIX\nwith XSI plus _BSD_SOURCE. any explicit feature test macros will\ninhibit the default.\n\ninstallation docs have also been updated to reflect this change.\n"},{"hash":"695111036821f73870d8d7b4ba072368fc8f7941","date":"2012-09-08T03:55:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unneeded judgemental commentary from ftw.h\n"},{"hash":"3cd084bb03aabd303777e866ca30b320194ccbd7","date":"2012-09-08T03:56:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"TCP_* is in the reserved namespace for tcp.h; make use of that\n"},{"hash":"f0f17b5b70f700f83d6ee838458d52d94d4e7ac0","date":"2012-09-08T04:14:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add stdnoreturn.h (C11)\n\nfeatures.h contains the fallback logic for pre-C11 compilers\n"},{"hash":"231b9d1880bf686c0db918cea16c355f2d6598fc","date":"2012-09-08T04:21:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add timerfd interfaces (untested)\n"},{"hash":"5271ff46b9e983bec5fd9ab79d5aaf096fa54157","date":"2012-09-08T04:26:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken fallocate syscall in posix_fallocate\n\nthe syscall takes an extra flag argument which should be zero to meet\nthe POSIX requirements.\n"},{"hash":"adb88e773b3897fa222b5d1bb8e46b2d6b424214","date":"2012-09-08T04:33:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fallocate (nonstandardized) function\n\nthis is equivalent to posix_fallocate except that it has an extra\nmode/flags argument to control its behavior, and stores the error in\nerrno rather than returning an error code.\n"},{"hash":"90f770523f54b2e63a6ad46cba0149c9dc01ddd4","date":"2012-09-08T04:40:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux readahead syscall\n"},{"hash":"b72db3d1ed561d31d059acc7e9a5aacb8c5ee9ac","date":"2012-09-08T04:41:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move fallocate syscall wrapper to linux-specific syscalls dir\n"},{"hash":"00e6bbcc05403aec1c96674c1060d54f5f237e87","date":"2012-09-08T04:58:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux sync_file_range syscall\n"},{"hash":"997ba92a0fa85919b1c46346db8fb31b4e579c5a","date":"2012-09-08T05:03:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux tee syscall\n"},{"hash":"b7afd7a7ec95fdc98dd31078891a9563d6f4ac73","date":"2012-09-08T06:42:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sysmacros major/minor: result should have type unsigned int, not dev_t\n"},{"hash":"455f96857f91d14e193219ca00969354a981c09c","date":"2012-09-08T21:14:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove all remaining redundant __restrict/__inline/_Noreturn defs\n"},{"hash":"695a04fc251c3b9feae5535e0c14e7b8f932b892","date":"2012-09-08T22:16:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix redundant _Noreturn def in err.h\n\nnot sure why this was missed in the earlier commit.\n"},{"hash":"f59cedb549c642277673d28357e038801fecca64","date":"2012-09-08T23:43:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add IPPROTO_MAX to in.h\n"},{"hash":"b10d0230c1837be34e4ece7d6b11d19f1b578b9f","date":"2012-09-08T23:52:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add IPPROTO_HOPOPTS to in.h\n"},{"hash":"6cf8bfdb646efaf76c75a95d1ea0cd254706c037","date":"2012-09-09T00:22:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add acct, accept4, setns, and dup3 syscalls (linux extensions)\n\nbased on patch by Justin Cormack\n"},{"hash":"fe0260400eebb613338a720c9568c10ab4f17225","date":"2012-09-09T02:23:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add acct syscall source file, omitted in last syscalls commit\n"},{"hash":"208eb584efbf995e0c5d92f76d5f4c08ae0054b4","date":"2012-09-09T02:43:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"syscall organization overhaul\n\nnow public syscall.h only exposes __NR_* and SYS_* constants and the\nvariadic syscall function. no macros or inline functions, no\n__syscall_ret or other internal details, no 16-/32-bit legacy syscall\nrenaming, etc. this logic has all been moved to src/internal/syscall.h\nwith the arch-specific parts in arch/$(ARCH)/syscall_arch.h, and the\namount of arch-specific stuff has been reduced to a minimum.\n\nchanges still need to be reviewed/double-checked. minimal testing on\ni386 and mips has already been performed.\n"},{"hash":"41c5ee50eee769f85253946e4c4b5706de37e9e9","date":"2012-09-09T02:48:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable sync_file_range for now\n\nsomething is wrong with the logic for the argument layout, resulting\nin compile errors on mips due to too many args to syscall... further\ninformation on how it's supposed to work will be needed before it can\nbe reactivated.\n"},{"hash":"21419914c530c505cb450733b724257be703d9db","date":"2012-09-09T04:55:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken mips syscall asm\n\nthis code was using $10 to save the syscall number, but $10 is not\nnecessarily preserved by the kernel across syscalls. only mattered for\nsyscalls that got interrupted by a signal and restarted. as far as i\ncan tell, $25 is preserved by the kernel across syscalls.\n"},{"hash":"be48e22b424b6f858da0151a0b3b68bdb96b41ca","date":"2012-09-09T04:59:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips syscall_cp_asm code (saved register usage)\n"},{"hash":"328810d32524e4928fec50b57e37e1bf330b2e40","date":"2012-09-09T05:01:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"inline syscall support for mips\n\nthis drastically reduces the size of some functions which are purely\nsyscall wrappers.\n\ndisabled for clang due to known bugs satisfying register constraints.\n"},{"hash":"5e3c243d8df6b1504db9c1e6442d47ed38937e02","date":"2012-09-09T05:29:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"inline syscall support for arm\n\nmost pure-syscall-wrapper functions compile to the smallest/simplest\ncode possible (save r7 ; load syscall # ; svc 0 ; restore r7 ; tail\ncall to __syscall_ret).\n"},{"hash":"9a3bbce447403d735282586786dc436ec1ffbad4","date":"2012-09-09T18:53:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add 7-arg syscall support for mips\n\nno syscalls actually use that many arguments; the issue is that some\nsyscalls with 64-bit arguments have them ordered badly so that\nbreaking them into aligned 32-bit half-arguments wastes slots with\npadding, and a 7th slot is needed for the last argument.\n"},{"hash":"3d939be2e3bcd4bfaf5cba27c9122a77a9c67021","date":"2012-09-09T18:58:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reenable sync_file_range; should no longer break on mips\n"},{"hash":"141138c41b5b1cbb74c61690c9b6dbacce4e1983","date":"2012-09-09T20:09:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux ppoll syscall wrapper\n"},{"hash":"743546a9339d3da4304fd63f74872e90ac792f63","date":"2012-09-09T20:27:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo introduced in poll.h\n"},{"hash":"ea544bfe808ef74c6d1727312069c12dd1c5c150","date":"2012-09-09T20:29:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add preadv/pwritev syscall wrappers\n"},{"hash":"2416c63b81f7f79ea781725cf1117c191775c699","date":"2012-09-09T20:33:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix up lfs64 junk for preadv/pwritev\n"},{"hash":"a660180c6a93681c6efb54fb5826c08d4df60208","date":"2012-09-09T20:37:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mincore syscall wrapper\n"},{"hash":"c87584a3e962dabd7b97733bfc3700e003d87d28","date":"2012-09-09T20:50:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add setdomainname syscall, fix getdomainname (previously a stub)\n"},{"hash":"2c1cd2399a237db968a521cdaef3d47a3fb2c2e9","date":"2012-09-10T19:30:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add LIBCC (compiler runtime) logic and override to configure\n\nthis should both fix the issue with ARM needing -lgcc_eh (although\nthat's really a bug in the libgcc build process that's causing\nconsiderable bloat, which should be fixed) and make it easier to build\nmusl using clang/llvm in place of gcc. unfortunately I don't know a\ngood way to detect and support pcc's -lpcc since it's not in pcc's\ndefault library search path...\n"},{"hash":"3b5e69052a867e9d99cf4c655d775bd06e3437f1","date":"2012-09-10T22:05:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ppoll with null timeout argument\n"},{"hash":"1701e4f3d46b14c4c4be8a46e64f8eaf15a5c061","date":"2012-09-10T22:16:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reenable word-at-at-time copying in memmove\n\nbefore restrict was added, memove called memcpy for forward copies and\nused a byte-at-a-time loop for reverse copies. this was changed to\navoid invoking UB now that memcpy has an undefined copying order,\nmaking memmove considerably slower.\n\nperformance is still rather bad, so I'll be adding asm soon.\n"},{"hash":"a9555a995cea8aa67da571c95af61109140f2c8d","date":"2012-09-10T22:37:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix another ppoll issue (missing sigset_t size argument)\n"},{"hash":"2bf469310de6793228c103691859ed4d3158b117","date":"2012-09-10T23:04:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"asm for memmove on i386 and x86_64\n\nfor the sake of simplicity, I've only used rep movsb rather than\nbreaking up the copy for using rep movsd/q. on all modern cpus, this\nseems to be fine, but if there are performance problems, there might\nbe a need to go back and add support for rep movsd/q.\n"},{"hash":"b94067eeae894b5a26170cebc378261f83ad00cb","date":"2012-09-11T02:43:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate assumption that mips syscall restart preserves r25\n\nall past and current kernel versions have done so, but there seems to\nbe no reason it's necessary and the sentiment from everyone I've asked\nhas been that we should not rely on it. instead, use r7 (an argument\nregister) which will necessarily be preserved upon syscall restart.\nhowever this only works for 0-3 argument syscalls, and we have to\nresort to the function call for 4-argument syscalls.\n"},{"hash":"cfc09b1ecf0c6981494fd73dffe234416f66af10","date":"2012-09-11T06:23:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve mips syscall asm constraints to use immediates, if possible\n\nby using the \"ir\" constraint (immediate or register) and the carefully\nconstructed instruction addu $2,$0,%2 which can take either an\nimmediate or a register for %2, the new inline asm admits maximal\noptimization with no register spillage to the stack when the compiler\nsuccessfully performs constant propagration, but still works by\nallocating a register when the syscall number cannot be recognized as\na constant. in the case of syscalls with 0-3 arguments it barely\nmatters, but for 4-argument syscalls, using an immediate for the\nsyscall number avoids creating a stack frame for the syscall wrapper\nfunction.\n"},{"hash":"b238b37a0f9d12f87dc9b7ce1ece4bcde566a45f","date":"2012-09-14T00:56:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add O_PATH/O_SEARCH support to fcntl.h\n\nI'm not 100% sure that Linux's O_PATH meets the POSIX requirements for\nO_SEARCH, but it seems very close if not perfect. and old kernels\nignore it, so O_SEARCH will still work as desired as long as the\ncaller has read permissions to the directory.\n"},{"hash":"e2f6a3257e256ac26a755fb58290ceb1b839fa20","date":"2012-09-14T01:01:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"strsep is BSD|GNU, not GNU-only; it's originally from BSD\n"},{"hash":"d62f4e98881702f07501b965e5beebd7516deca2","date":"2012-09-14T19:32:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use vfork if possible in posix_spawn\n\nvfork is implemented as the fork syscall (with no atfork handlers run)\non archs where it is not available, so this change does not introduce\nany change in behavior or regression for such archs.\n"},{"hash":"9f74574fe697f0908d766579e73d94fc621463d4","date":"2012-09-15T03:38:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove forced -O3 from shared library CFLAGS\n\nI originally added -O3 for shared libraries to counteract very bad\nbehavior by GCC when building PIC code: it insists on reloading the\nGOT register in static functions that need it, even if the address of\nthe function is never leaked from the translation unit and all local\ncallers of the function have already loaded the GOT register. this\nmeasurably degrades performance in a few key areas like malloc. the\ninlining done at -O3 avoids the issue, but that's really not a good\nreason for overriding the user's choice of optimization level.\n"},{"hash":"afd209deb7d3bfc9cc31713e2cb8f22693ca6fae","date":"2012-09-15T03:52:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround gcc got-register-reload performance problems in malloc\n\nwith this patch, the malloc in libc.so built with -Os is nearly the\nsame speed as the one built with -O3. thus it solves the performance\nregression that resulted from removing the forced -O3 when building\nlibc.so; now libc.so can be both small and fast.\n"},{"hash":"4221f154ff29ab0d6be1e7beaa5ea2d1731bc58e","date":"2012-09-15T06:22:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buggy constraints in mips inline syscall asm\n\nif same register is used for input/output, the compiler must be told.\notherwise is generates random junk code that clobbers the result. in\npure syscall-wrapper functions, nothing went wrong, but in more\ncomplex functions where register allocation is non-trivial, things\nbroke badly.\n"},{"hash":"881868382a54b851b37d0b0f5f2d44f77af998a7","date":"2012-09-15T06:24:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update mips cancellation-point syscall asm with 7-arg and r25 fixes\n\nthese fixes were already made to the normal syscall asm but not the\ncancellation point version.\n"},{"hash":"aeaceb1fa89b865eb0bca739da9c450b5a054866","date":"2012-09-15T07:03:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert low rounds-count limits in crypt hashes\n\nit was determined in discussion that these kind of limits are not\nsufficient to protect single-threaded servers against denial of\nservice attacks from maliciously large round counts. the time scales\nsimply vary too much; many users will want login passwords with rounds\ncounts on a scale that gives decisecond latency, while highly loaded\nwebservers will need millisecond latency or shorter.\n\nstill some limit is left in place; the idea is not to protect against\nattacks, but to avoid the runtime of a single call to crypt being, for\nall practical purposes, infinite, so that configuration errors can be\ncaught and fixed without bringing down whole systems. these limits are\nvery high, on the order of minute-long runtimes for modest systems.\n"},{"hash":"075fdb909b7692df7f3c440331114a754267a167","date":"2012-09-15T07:19:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix syscall asm constraints for arm too\n\nno problems were detected so far, but the constraints seem to have\nbeen invalid just like the mips ones.\n"},{"hash":"7ad42b949665428e6f02c543bbc16172af5bbdeb","date":"2012-09-15T07:38:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"0.9.5 release notes\n"},{"hash":"5a1abeeb7c3774667e95ad5d3054164b0b833dcb","date":"2012-09-16T03:17:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stupid bug in updating of O_ACCMODE for O_SEARCH support\n\nthis could cause major bugs, and warrants a fix release right away.\n"},{"hash":"93ea998c9c5a29cb34f3171f24f96d3cfe4f9cb6","date":"2012-09-16T03:41:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add crypt_md5 password hash\n\ncontributed by nsz\n"},{"hash":"6d05d862975188039e648273ceab350d9ab5b69e","date":"2012-09-16T03:45:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add O_EXEC open mode\n\nthe linux O_PATH mode provides the necessary semantics for both the\nO_SEARCH and O_EXEC modes defined and required by POSIX 2008.\n"},{"hash":"bd261bf25e000a1b754616db0b2ee1e14835a75d","date":"2012-09-16T04:10:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.6\n"},{"hash":"662da62eb7cba808e98fe8ea65f6bbf55fa50f1e","date":"2012-09-17T02:26:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add clock_adjtime, remap_file_pages, and syncfs syscall wrappers\n\npatch by Justin Cormack, with slight modification\n"},{"hash":"f600105eef74a636a0efd1f1d07170ce5df9aa64","date":"2012-09-21T08:05:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"LFS64 alias for prlimit\n\nissue reported/requested by Justin Cormack\n"},{"hash":"0b3e2257fa9f4c4773f8aec1bdbccbc46a4d9477","date":"2012-09-21T17:47:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"offer REALGCC variable to configure musl-gcc wrapper at runtime\n\nthis is useful when the underlying gcc is already a wrapper, which is\nthe case at least on some uclibc-based system images. it's also useful\nfor running an older/newer/nondefault version of gcc.\n"},{"hash":"fce46bf980a82bad9e6c083066cae4813649ebf5","date":"2012-09-22T12:02:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken semctl on systems that don't use IPC_64 flag\n\nnot tested on mips and arm; they may still be broken. x86_64 should be\nok now.\n"},{"hash":"cccc13221da78957aa6dc813a325c13f1a930874","date":"2012-09-22T12:04:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix IPC_64 in msgctl too\n"},{"hash":"15d111203221e988b45b47535f96889f4208c1a7","date":"2012-09-22T20:08:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix remaining IPC_64 issue (shmctl)\n\nalso cleanup cruft related to the issue\n"},{"hash":"4b49060da09b37e36ae08b49499c4a53b4f53890","date":"2012-09-22T20:19:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getaddrinfo to accept port 0 (zero)\n\nnew behavior can be summarized as:\ninputs that parse completely as a decimal number are treated as one,\nand rejected only if the result is out of 16-bit range.\ninputs that do not parse as a decimal number (where strtoul leaves\nanything left over in the input) are searched in /etc/services.\n"},{"hash":"82dc1e2e783815e00a90cd3f681436a80d54a314","date":"2012-09-25T02:39:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of EINTR during close()\n\naustin group interpretation for defect #529\n(http://austingroupbugs.net/view.php?id=529) tightens the\nrequirements on close such that, if it returns with EINTR, the file\ndescriptor must not be closed. the linux kernel developers vehemently\ndisagree with this, and will not change it. we catch and remap EINTR\nto EINPROGRESS, which the standard allows close() to return when the\noperation was not finished but the file descriptor has been closed.\n"},{"hash":"507faa63cb12571c14d66eb37dedbe6adbbf40a8","date":"2012-09-26T04:56:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dirname to handle input of form \"foo/\" correctly\n\nalso optimized a bit.\n"},{"hash":"3f9ff1514e49b06c20a61af9ae9e52bd53b48d9a","date":"2012-09-27T20:56:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"slightly cleaner strlen, also seems to compile to better code\n\ntesting with gcc 4.6.3 on x86, -Os, the old version does a duplicate\nnull byte check after the first loop. this is purely the compiler\nbeing stupid, but the old code was also stupid and unintuitive in how\nit expressed the check.\n"},{"hash":"68dbd05039f8b256f586ed9a589645fa3a1b7f5f","date":"2012-09-27T21:19:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize strchrnul/strcspn not to scan string twice on no-match\n\nwhen strchr fails, and important piece of information already\ncomputed, the string length, is thrown away. have strchrnul (with\nnamespace protection) be the underlying function so this information\ncan be kept, and let strchr be a wrapper for it. this also allows\nstrcspn to be considerably faster in the case where the match set has\na single element that's not matched.\n"},{"hash":"e0ea44cb764fcdbe8515f22096930bede2c7896f","date":"2012-09-27T22:56:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm clone syscall bug (no effect unless app uses clone)\n\nthe code to exit the new thread/process after the start function\nreturns was mixed up in its syscall convention.\n"},{"hash":"8c0a3d9e5c169fc9d0f246ab59362b658b029ad7","date":"2012-09-29T05:05:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"microblaze port\n\nbased on initial work by rdp, with heavy modifications. some features\nincluding threads are untested because qemu app-level emulation seems\nto be broken and I do not have a proper system image for testing.\n"},{"hash":"c983e6415abdc30893b2fe359a334033c59ec621","date":"2012-09-29T05:14:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some indention-with-spaces that crept in\n"},{"hash":"39f296a95b02925b8c3439e140a5668e36055d9b","date":"2012-09-29T20:48:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use O_CLOEXEC to open semaphore files in sem_open\n"},{"hash":"3d8d90c5ccf66f1d243cb1b248b047295c197b5c","date":"2012-09-29T20:49:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sem_open should make process-shared semaphores\n\nthis did not matter because we don't yet treat process-shared special.\nwhen private futex support is added, however, it will matter.\n"},{"hash":"79a5e73e518213d5e77a06cfc0db74ffbf7922c6","date":"2012-09-29T21:36:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"emulate SOCK_CLOEXEC and SOCK_NONBLOCK for old (pre-2.6.27) kernels\n\nalso update syslog to use SOCK_CLOEXEC rather than separate fcntl\nstep, to make it safe in multithreaded programs that run external\nprograms.\n\nemulation is not atomic; it could be made atomic by holding a lock on\nforking during the operation, but this seems like overkill. my goal is\nnot to achieve perfect behavior on old kernels (which have plenty of\nother imperfect behavior already) but to avoid catastrophic breakage\nin (1) syslog, which would give no output on old kernels with the\nchange to use SOCK_CLOEXEC, and (2) programs built on a new kernel\nwhere configure scripts detected a working SOCK_CLOEXEC, which later\nget run on older kernels (they may otherwise fail to work completely).\n"},{"hash":"dc62790deec183697489d5fddea03c82f725e7fd","date":"2012-09-29T21:40:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move accept4, dup3, and pipe2 to non-linux-specific locations\n\nthese interfaces have been adopted by the Austin Group for inclusion\nin the next version of POSIX.\n"},{"hash":"9735d50070cc120f4749d1a458eacad7e9180a28","date":"2012-09-29T21:42:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always expose dup3 and pipe2\n\nthey will be in the next version of POSIX\n"},{"hash":"3609e019f352912e882b91b7a856c7b30569f2de","date":"2012-09-29T21:44:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always expose accept4\n\nit will be in the next version of POSIX\n"},{"hash":"f2d08cf7558176af7ef36cf5b5213e676b02d7ac","date":"2012-09-29T21:59:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some more O_CLOEXEC/SOCK_CLOEXEC issues\n"},{"hash":"8582a6e9f25dd7b87d72961f58008052a4cac473","date":"2012-09-29T22:09:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add 'e' modifier (close-on-exec) to fopen and fdopen\n\nthis feature will be in the next version of POSIX, and can be used\ninternally immediately. there are many internal uses of fopen where\nclose-on-exec is needed to fix bugs.\n"},{"hash":"d712dd396d7d69686f7001fd986bfc59217b72dd","date":"2012-09-29T22:14:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more close-on-exec fixes, mostly using new \"e\" flag to fopen\n"},{"hash":"2e3648b85db1c71bfc684233f7a521b0d4bbeb20","date":"2012-09-30T05:52:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"define some _POSIX_* macros that were omitted; required for XSI conformance\n"},{"hash":"6e2372a86c7e862ed931910f8a5f4b908639d689","date":"2012-09-30T21:53:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up, bugfixes, and general improvement for shm_open/shm_unlink\n\n1. don't make non-cloexec file descriptors\n2. cancellation safety (cleanup handlers were missing, now unneeded)\n3. share name validation/mapping code between open/unlink functions\n4. avoid wasteful/slow syscalls\n"},{"hash":"bf258341b71711461ce19891674d43c135827d0e","date":"2012-09-30T23:35:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul sem_open\n\nthis function was overly complicated and not even obviously correct.\navoid using openat/linkat just like in shm_open, and instead expand\npathname using code shared with shm_open. remove bogus (and dangerous,\nwith priorities) use of spinlocks.\n\nthis commit also heavily streamlines the code and ensures there are no\nfailure cases that can happen after a new semaphore has been created\nin the filesystem, since that case is unreportable.\n"},{"hash":"e44849f5cf331e655705b18d6c81c616e29d50d0","date":"2012-09-30T23:44:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect sem_open against cancellation\n\nalso fix one minor bug: failure to free the early-reserved slot when\nthe semaphore later found to already be mapped.\n"},{"hash":"030e52639248ac8417a4934298caa78c21a228d1","date":"2012-10-01T00:00:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add getopt reset support\n\nbased on proposed patches by Daniel Cegiełka, with minor changes:\n- use a weak symbol for optreset so it doesn't clash with namespace\n- also reset optpos (position in multi-option arg like -lR)\n- also make getopt_long support reset\n"},{"hash":"adefe830dd376be386df5650a09c313c483adf1a","date":"2012-10-03T15:49:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"tell the assembler to mark all files as not requiring executable stack\n\nfor some reason this option is undocumented. not sure when it was\nadded, so I'm using a configure test. gcc was already setting the mark\ncorrectly for C files, but assembler source files would need ugly\n.note boilerplate in every single file to achieve this without the\noption to the assembler.\n\nblame whoever thought it would be a good idea to make the stack\nexecutable by default rather than doing it the other way around...\n"},{"hash":"8431d7972fd9be0fdcaff8516316d748e81724bb","date":"2012-10-04T20:35:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"TLS (GNU/C11 thread-local storage) support for static-linked programs\n\nthe design for TLS in dynamic-linked programs is mostly complete too,\nbut I have not yet implemented it. cost is nonzero but still low for\nprograms which do not use TLS and/or do not use threads (a few hundred\nbytes of new code, plus dependency on memcpy). i believe it can be\nmade smaller at some point by merging __init_tls and __init_security\ninto __libc_start_main and avoiding duplicate auxv-parsing code.\n\nat the same time, I've also slightly changed the logic pthread_create\nuses to allocate guard pages to ensure that guard pages are not\ncounted towards commit charge.\n"},{"hash":"bc6a35fb7b02f068b901f22a56559996395cfd3b","date":"2012-10-05T00:04:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"partial TLS support for dynamic-linked programs\n\nonly TLS in the main program is supported so far; TLS defined in\nshared libraries will not work yet.\n"},{"hash":"9b153c043ea486d28f96a7e01419f650fe0e1b26","date":"2012-10-05T01:01:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"beginnings of full TLS support in shared libraries\n\nthis code will not work yet because the necessary relocations are not\nsupported, and cannot be supported without some internal changes to\nhow relocation processing works (coming soon).\n"},{"hash":"c91aa03d2488ef2c48276510dec360ed9582e861","date":"2012-10-05T01:08:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove freeing of dynamic linker data when dlopen/dlsym are not used\n\nthis was an optimization to save/recover a minimal amount of extra\nmemory for use by malloc, that's becoming increasingly costly to keep\naround. freeing this data:\n\n1. breaks debugging with gdb (it can't find library symbols)\n2. breaks thread-local storage in shared libraries\n\nit would be possible to disable freeing when TLS is used, but in\naddition to the above breakages, tracking whether dlopen/dlsym is used\nadds a cost to every symbol lookup, possibly making program startup\nslower for large programs. combined with the complexity, it's not\nworth it. we already save/recover plenty of memory in the dynamic\nlinker with reclaim_gaps.\n"},{"hash":"9c74856af78ac3e8aaa5f8b560e5022d2e6037d1","date":"2012-10-05T02:48:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic-linked TLS support for everything but dlopen'd libs\n\ncurrently, only i386 is tested. x86_64 and arm should probably work.\nthe necessary relocation types for mips and microblaze have not been\nadded because I don't understand how they're supposed to work, and I'm\nnot even sure if it's defined yet on microblaze. I may be able to\nreverse engineer the requirements out of gcc/binutils output.\n"},{"hash":"99a2af6f45b356324e99acf0da809ca416eed0de","date":"2012-10-05T05:00:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect TLS reloc macro names in x86_64 reloc.h\n"},{"hash":"642b7593c3b3488d229488a436bab294dcc27ee9","date":"2012-10-05T05:15:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix race condition in dlopen\n\norig_tail was being saved before the lock was obtained, allowing\ndlopen failure to roll-back other dlopens that had succeeded.\n"},{"hash":"dcd60371500a74d489372cac7240674c992c2484","date":"2012-10-05T15:51:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support for TLS in dynamic-loaded (dlopen) modules\n\nunlike other implementations, this one reserves memory for new TLS in\nall pre-existing threads at dlopen-time, and dlopen will fail with no\nresources consumed and no new libraries loaded if memory is not\navailable. memory is not immediately distributed to running threads;\nthat would be too complex and too costly. instead, assurances are made\nthat threads needing the new TLS can obtain it in an async-signal-safe\nway from a buffer belonging to the dynamic linker/new module (via\natomic fetch-and-add based allocator).\n\nI've re-appropriated the lock that was previously used for __synccall\n(synchronizing set*id() syscalls between threads) as a general\npthread_create lock. it's a \"backwards\" rwlock where the \"read\"\noperation is safe atomic modification of the live thread count, which\nmultiple threads can perform at the same time, and the \"write\"\noperation is making sure the count does not increase during an\noperation that depends on it remaining bounded (__synccall or dlopen).\nin static-linked programs that don't use __synccall, this lock is a\nno-op and has no cost.\n"},{"hash":"5f88c0edd5db0916cbbcdec9042d4986ca778ae8","date":"2012-10-05T16:09:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"small dynamic linker module search fix\n\nlibraries loaded more than once by pathname should not get shortnames\nthat would cause them to later be used to satisfy non-pathname load\nrequests.\n"},{"hash":"f4f77c068f1058d202a976678fce2617d59c0ff6","date":"2012-10-05T17:09:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix/improve shared library ctor/dtor handling, allow recursive dlopen\n\nsome libraries call dlopen from their constructors, resulting in\nrecursive calls to dlopen. previously, this resulted in deadlock. I'm\nnow unlocking the dlopen lock before running constructors (this is\nespecially important since the lock also blocked pthread_create and\nwas being held while application code runs!) and using a separate\nrecursive mutex protecting the ctor/dtor state instead.\n\nin order to prevent the same ctor from being called more than once, a\nmodule is considered \"constructed\" just before the ctor runs.\n\nalso, switch from using atexit to register each dtor to using a single\natexit call to register the dynamic linker's dtor processing as just\none handler. this is necessary because atexit performs allocation and\nmay fail, but the library has already been loaded and cannot be\nbacked-out at the time dtor registration is performed. this change\nalso ensures that all dtors run after all atexit functions, rather\nthan in mixed order.\n"},{"hash":"cf3fd3d002c728ed0ef5d3aef856ff3e1d418da0","date":"2012-10-06T05:22:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"TLS fixes, mainly alignment handling\n\ncompute offsets from the thread pointer statically when loading the\nlibrary, rather than repeating the logic on each thread creation. not\nonly is the latter less efficient at runtime; it also fails to provide\nsolid guarantees that the offsets will remain the same when the\ninitial alignment of memory is different. the new alignment handling\nis both more rigorous and simpler.\n\nthe old code was also clobbering TLS bss with random image data in\nsome cases due to using tls_size (size of TLS segment) instead of\ntls_len (length of the TLS data image).\n"},{"hash":"bd17431a2cba8aafd1e4f95f9b70e5800ee51d24","date":"2012-10-06T05:36:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix symbol acceptance/rejection rules for TLS\n\nsymbol value of 0 is not \"undefined\" for TLS; it's the address of the\nfirst symbol in the TLS segment. however, non-definition TLS\nreferences also have values of 0, so check the section.\n\nhopefully the new logic is more clear, too.\n"},{"hash":"6a2eaa3c5bbb8cc272cf6a4b7a9766a89e9b2c61","date":"2012-10-06T20:51:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buggy TLS size/alignment computations in static-linked TLS\n"},{"hash":"92e1cd9b0ba9a8fa86e0346b121e159fb88f99bc","date":"2012-10-06T20:56:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't crash if TLS library is loaded into process with no thread pointer\n"},{"hash":"00902c7384963192dda8a15938786a36dca7d7ab","date":"2012-10-07T03:57:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make new TLS setup block even implementation-internals signals\n\nthis is needed to ensure async-cancel-safety, i.e. to make it safe to\naccess TLS objects when async cancellation is enabled. otherwise, if\ncancellation were acter upon after the atomic fetch/add but before the\nthread saved the obtained memory, another access to the same TLS in\nthe cancellation handler could end up performing the atomic fetch/add\nagain, consuming more memory than is actually available and\noverflowing into other objects on the heap.\n"},{"hash":"017bf140ffb41e9a016df84dc4c1806e0686b28a","date":"2012-10-08T00:19:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage due to initializing thread pointer when loading libs\n\nat initial program load, all libraries must be loaded before the\nthread pointer can be setup, since the TP-relative addresses of all\ninitial TLS objects must be constant.\n"},{"hash":"0a96a37f06fda78ce3674b425888b1fc090578aa","date":"2012-10-08T01:43:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up and refactor program initialization\n\nthe code in __libc_start_main is now responsible for parsing auxv,\nrather than duplicating the parsing all over the place. this should\nshave off a few cycles and some code size. __init_libc is left as an\nexternal-linkage function despite the fact that it could be static, to\nprevent it from being inlined and permanently wasting stack space when\nmain is called.\n\na few other minor changes are included, like eliminating per-thread\nssp canaries (they were likely broken when combined with certain\ndlopen usages, and completely unnecessary) and some other unnecessary\nchecks. since this code gets linked into every program, it should be\nas small and simple as possible.\n"},{"hash":"f2b1f1af83e96f8f98fbf2a5c663d8d058f2a66d","date":"2012-10-08T15:20:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure that buffer for decoding auxv at startup is initially zero\n"},{"hash":"12e9b4faf68a1a02ebf5ad69c03ac10f170f14cb","date":"2012-10-12T02:47:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"i386 vsyscall support (vdso-provided sysenter/syscall instruction based)\n\nthis doubles the performance of the fastest syscalls on the atom I\ntested it on; improvement is reportedly much more dramatic on\nworst-case cpus. cannot be used for cancellable syscalls.\n"},{"hash":"964e9f3c4c8776820e98c967f3a411d4ca5075a7","date":"2012-10-12T02:51:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid the thread-ptr-init behavior of sigaction when not installing handler\n\nthis is necessary because posix_spawn calls sigaction after vfork, and\nif the thread pointer is not already initialized, initializing it in\nthe child corrupts the parent process's state.\n"},{"hash":"216dca82f6948627f55a0a04ab7d63a12213d8ed","date":"2012-10-12T03:09:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"comment possibly-confusing i386 vsyscall asm\n"},{"hash":"31f340a17a0024b71e35fd6378d9a3caca050d43","date":"2012-10-14T03:23:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove dead code from dynamic linker\n"},{"hash":"e23d358fd6254d88c85750a23cd1234855c3292c","date":"2012-10-14T03:25:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace clash (libc) in dynlink.c\n\nthis makes it so the #undef libc and __libc name are no longer needed,\nwhich were problematic because the \"accessor function\" mode for\naccessing the libc struct could not be used, breaking build on any\ncompiler without (working) visibility.\n"},{"hash":"185a97707429aacfa1e8db62fc9fdb2188539d86","date":"2012-10-14T03:46:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure pointer decay in inline-asm arg for i386 syscall6\n\nthis is actually a rather subtle issue: do arrays decay to pointers\nwhen used as inline asm args? gcc says yes, but currently pcc says no.\nhopefully this discrepency in pcc will be fixed, but since the\nbehavior is not clearly defined anywhere I can find, I'm using an\nexplicit operation to cause the decay to occur.\n"},{"hash":"36be5284c2a79406778ac489928c6deb05857329","date":"2012-10-14T03:53:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround broken hidden-visibility handling in pcc\n\nwith this change, pcc-built musl libc.so seems to work correctly. the\nproblem is that pcc generates GOT lookups for external-linkage symbols\neven if they are hidden, rather than using GOT-relative addressing.\nthe entire reason we're using hidden visibility on the __libc object\nis to make it accessible prior to relocations -- not to mention\ninexpensive to access. unfortunately, the workaround makes it even\nmore expensive on pcc.\n\nwhen the pcc issue is fixed, an appropriate version test should be\nadded so new pcc can use the much more efficient variant.\n"},{"hash":"c62b9f39803221e250a490275f4cb23e9f737a6d","date":"2012-10-14T23:56:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix main program TLS alignment for dynamic-linked programs\n\nthis change brings the behavior in line with the static-linked code,\nwhich seems to be correct.\n"},{"hash":"42c36f957d54926eec87b072a73439b9a1539347","date":"2012-10-15T01:10:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overlap of thread stacks with thread tls segments\n"},{"hash":"d5304147b983f309ed0c9050e3b8b6f2c9f87f43","date":"2012-10-15T15:42:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block uid/gid changes during posix_spawn\n\nusage of vfork creates a situation where a process of lower privilege\nmay momentarily have write access to the memory of a process of higher\nprivilege.\n\nconsider the case of a multi-threaded suid program which is calling\nposix_spawn in one thread while another thread drops the elevated\nprivileges then runs untrusted (relative to the elevated privilege)\ncode as the original invoking user. this untrusted code can then\npotentially modify the data the child process will use before calling\nexec, for example changing the pathname or arguments that will be\npassed to exec.\n\nnote that if vfork is implemented as fork, the lock will not be held\nuntil the child execs, but since memory is not shared it does not\nmatter.\n"},{"hash":"9ec4283b28cf676292fd5c6f681bef1e90e30c18","date":"2012-10-15T22:51:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for TLS variant I, presently needed for arm and mips\n\ndespite documentation that makes it sound a lot different, the only\nABI-constraint difference between TLS variants II and I seems to be\nthat variant II stores the initial TLS segment immediately below the\nthread pointer (i.e. the thread pointer points to the end of it) and\nvariant I stores the initial TLS segment above the thread pointer,\nrequiring the thread descriptor to be stored below. the actual value\nstored in the thread pointer register also tends to have per-arch\nrandom offsets applied to it for silly micro-optimization purposes.\n\nwith these changes applied, TLS should be basically working on all\nsupported archs except microblaze. I'm still working on getting the\nnecessary information and a working toolchain that can build TLS\nbinaries for microblaze, but in theory, static-linked programs with\nTLS and dynamic-linked programs where only the main executable uses\nTLS should already work on microblaze.\n\nalignment constraints have not yet been heavily tested, so it's\npossible that this code does not always align TLS segments correctly\non archs that need TLS variant I.\n"},{"hash":"21284ec75db064d3f27fcd1d6ae37b613db61c43","date":"2012-10-16T01:01:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"microblaze TLS relocation support, completely untested\n"},{"hash":"c86f2974e2acd330be2d587173dd4dd56db82e22","date":"2012-10-16T03:02:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add memmem function (gnu extension)\n\nbased on strstr. passes gnulib tests and a few quick checks of my own.\n"},{"hash":"858df113bfac4d2ebb60c3fac1538e07d56096b0","date":"2012-10-17T06:47:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"assert() is supposed to have type void\n"},{"hash":"ef2f595f7489a79b328766e3f8c2c899c8d23fd1","date":"2012-10-18T03:45:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix microblaze asm relocations for shared libc\n\nonly @PLT relocations are considered functions for purposes of\n-Bsymbolic-functions, so always use @PLT. it should not hurt in the\nstatic-linked case.\n"},{"hash":"f1e7a5e5f62945d99bf5277fe574d2cf3983413a","date":"2012-10-18T04:09:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix (hopefully; untested) completely broken/incomplete microblaze sigsetjmp\n"},{"hash":"44eb4d8b9b7b3b539bcd4e311e9d7c8e2acf8d80","date":"2012-10-18T19:58:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul system() and popen() to use vfork; fix various related bugs\n\nsince we target systems without overcommit, special care should be\ntaken that system() and popen(), like posix_spawn(), do not fail in\nprocesses whose commit charges are too high to allow ordinary forking.\n\nthis in turn requires special precautions to ensure that the parent\nprocess's signal handlers do not end up running in the shared-memory\nchild, where they could corrupt the state of the parent process.\n\npopen has also been updated to use pipe2, so it does not have a\nfd-leak race in multi-threaded programs. since pipe2 is missing on\nolder kernels, (non-atomic) emulation has been added.\n\nsome silly bugs in the old code should be gone too.\n"},{"hash":"97c8bdd88ae2ee03eb9d333a79fa669b3878fc76","date":"2012-10-18T20:41:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix parent-memory-clobber in posix_spawn (environ)\n"},{"hash":"f321de9e0ae130e21faab5afe109270ec913602d","date":"2012-10-19T00:19:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"floating point environment/exceptions support for mips\n"},{"hash":"776251867d07cca2866908186ef245f72596ce75","date":"2012-10-19T00:26:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid raising spurious division-by-zero exception in printf\n"},{"hash":"64251d8bbd42b50b6c2dae70d499f4bbfdac557e","date":"2012-10-19T01:50:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"better support for reverse-endian variants of arm/mips/microblaze\n\nthese macros are supported by more compilers\n"},{"hash":"1f485230df7a1c634fcec29d870d2566aee2031c","date":"2012-10-19T02:01:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure microblaze __set_thread_area returns success\n\nsince it did not set the return-value register, the caller could\nwrongly interpret this as failure.\n"},{"hash":"25011215be8fa7ebddaaf71ac30dbac851b761ca","date":"2012-10-19T02:13:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"inline syscalls for microblaze\n"},{"hash":"01e5a1b6cddb1c7f57eb8194ac7e864501d61aeb","date":"2012-10-19T03:02:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use $CC rather than \"$CC\" in configure script\n\nthis is necessary to allow $CC with arguments in it\n"},{"hash":"6a04d1b8c6181eebfc1d99c6b0e190728d4fabf1","date":"2012-10-19T04:27:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix order of syscall args for microblaze clone syscall\n\nwith this commit, based on testing with patches to qemu which are not\nyet upstream,\n"},{"hash":"ebee8c2b477807fe58fd35d35783633ea08b049c","date":"2012-10-19T05:33:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crashes in static-linked multithreaded programs without TLS\n"},{"hash":"599f97360389911c293e0ca4c5eb49e007377fba","date":"2012-10-19T19:02:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix usage of locks with vfork\n\n__release_ptc() is only valid in the parent; if it's performed in the\nchild, the lock will be unlocked early then double-unlocked later,\ncorrupting the lock state.\n"},{"hash":"dde325d7b3ff6332dc0c24e29f8827b1b16bdd92","date":"2012-10-19T22:52:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix struct stat size/padding on microblaze\n"},{"hash":"deb15b3cf23cb6093f439f7b37eaeb1263df5399","date":"2012-10-20T01:41:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in dlsym for looking up RTLD_DEFAULT, etc.\n\nthis was broken during the early dynamic-linked TLS commits, which\nrearranged some of the code for handling new relocation types.\n"},{"hash":"0a1c2c1c1755d03d7d3db11df612bbe7c5b69c46","date":"2012-10-20T01:57:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support looking up thread-local objects with dlsym\n"},{"hash":"2d321fa0627caa62272fcff8fb5303f1a5cbce39","date":"2012-10-21T00:31:04.000Z","author":{"name":"nsz","email":"nsz@port70.net"},"message":"complex: make _Complex_I work with gcc -std=c99 -pedantic-errors\n"},{"hash":"f1b23d41cff432a8d0939af427fa005b4a4f95d7","date":"2012-10-21T17:23:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix copy/paste error in popen changes that broke signals\n\nsignal mask was not being restored after fork, but instead blocked again.\n"},{"hash":"8489897e01b8a27c365c9c98b200ee25dc124cb4","date":"2012-10-21T22:28:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"accept \"nan(n-char-sequence)\" in strtod/scanf functions\n\nthis will prevent gnulib from wrapping our strtod to handle this\nuseless feature.\n"},{"hash":"31a55f233b313030a787240b76c06f2d08cde29f","date":"2012-10-21T22:37:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"as an extension, have putenv(\"VAR\") behave as unsetenv(\"VAR\")\n\nthe behavior of putenv is left undefined if the argument does not\ncontain an equal sign, but traditional implementations behave this way\nand gnulib replaces putenv if it doesn't do this.\n"},{"hash":"4eb4844b31906e1f8d4a1a1ff7a5c94e1083661f","date":"2012-10-21T23:15:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix issues with wait constants in stdlib.h\n\nthe W* namespace is not reserved, so the nonstandard ones must be\nmoved under extension features. also WNOHANG and WUNTRACED were\nmissing.\n"},{"hash":"838951c97edc05cb2a25948ee542415b55b8f605","date":"2012-10-22T19:17:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify logic in stpcpy; avoid copying first aligned byte twice\n\ngcc seems to be generating identical or near-identical code for both\nversions, but the newer code is more expressive of what it's doing.\n"},{"hash":"708c91f4e9be2cfd6d35e71361956e13f3201b85","date":"2012-10-25T00:03:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless failure-check from freopen (can't happen)\n"},{"hash":"892cafff665b44d238e3b664f61ca38dd965cba6","date":"2012-10-25T01:16:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"greatly improve freopen behavior\n\n1. don't open /dev/null just as a basis to copy flags; use shared\n__fmodeflags function to get the right file flags for the mode.\n\n2. handle the case (probably invalid, but whatever) case where the\noriginal stream's file descriptor was closed; previously, the logic\nre-closed it.\n\n3. accept the \"e\" mode flag for close-on-exec; update dup3 to fallback\nto using dup2 so we can simply call __dup3 instead of putting fallback\nlogic in freopen itself.\n"},{"hash":"c8cb6bcdf009e94c12c6e256b8e24a9bc5fdaf05","date":"2012-10-25T03:16:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct locking in stdio functions that tried to be lock-free\n\nthese functions must behave as if they obtain the lock via flockfile\nto satisfy POSIX requirements. since another thread can provably hold\nthe lock when they are called, they must wait to obtain the lock\nbefore they can return, even if the correct return value could be\nobtained without locking. in the case of fclose and freopen, failure\nto do so could cause correct (albeit obscure) programs to crash or\notherwise misbehave; in the case of feof, ferror, and fwide, failure\nto obtain the lock could sometimes return incorrect results. in any\ncase, having these functions proceed and return while another thread\nheld the lock was wrong.\n"},{"hash":"80a45458e0d9b75d508110bd880d0ae0432b0356","date":"2012-10-25T18:52:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"configure: test not just compiling but linking with -march/-mtune\n\npcc wrongly passes any option beginning with -m to the linker, and\nwill break at link time if these options were added to CFLAGS. testing\nlinking lets us catch this at configure time and skip them.\n"},{"hash":"607b05aca683eee5bcdb7bf9af4ebf02adc635d9","date":"2012-10-25T19:40:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use explicit visibility to optimize a few hot-path function calls\n\non x86 and some other archs, functions which make function calls which\nmight go through a PLT incur a significant overhead cost loading the\nGOT register prior to making the call. this load is utterly useless in\nmusl, since all calls are bound at library-creation time using\n-Bsymbolic-functions, but the compiler has no way of knowing this, and\nattempts to set the default visibility to protected have failed due to\nbugs in GCC and binutils.\n\nthis commit simply manually assigns hidden/protected visibility, as\nappropriate, to a few internal-use-only functions which have many\ncallers, or which have callers that are hot paths like getc/putc. it\nshaves about 5k off the i386 libc.so with -Os. many of the\nimprovements are in syscall wrappers, where the benefit is just size\nand performance improvement is unmeasurable noise amid the syscall\noverhead. however, stdio may be measurably faster.\n\nif in the future there are toolchains that can do the same thing\nglobally without introducing linking bugs, it might be worth\nconsidering removing these workarounds.\n"},{"hash":"3d99266b5e8fc6374a9d930f3ae9d444ffebb11e","date":"2012-10-26T20:30:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for detecting pcc's compiler runtime\n\nin old versions of pcc, the directory containing libpcc.a was not in\nthe library path, and other options like -print-file-name may have\nbeen needed to locate it. however, -print-file-name itself seems to\nhave been added around the same time that the directory was added to\nthe search path, and moreover, I see no evidence that older versions\nof pcc are capable of building a working musl shared library. thus, it\nseems reasonable to just test whether -lpcc is accepted.\n"},{"hash":"cd31a1fc089ab89fba2720926ea55e69eb311042","date":"2012-10-26T22:15:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further pcc fixes in configure\n\n-lpcc only works if -nostdlib is not passed, so it's useless. instead,\nuse -print-file-name to look up the full pathname for libpcc.a, and\ncheck whether that succeeds before trying to link with the result.\n\nalso, silence pcc's junk printed on stdout during tests.\n"},{"hash":"3ffb556c58ba69b4f52ae50fa92424300bd58bd1","date":"2012-10-27T00:14:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update documentation\n"},{"hash":"8fc7b5965ac6a000c93c7362276a6a7b193647f4","date":"2012-10-27T23:52:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"separate getc/putc from fgetc/fputc\n\nfor conformance, two functions should not have the same address. a\nconforming program could use the addresses of getc and fgetc in ways\nthat assume they are distinct. normally i would just use a wrapper,\nbut these functions are so small and performance-critical that an\nextra layer of function call could make the one that's a wrapper\nnearly twice as slow, so I'm just duplicating the code instead.\n"},{"hash":"86dd1e7bbb1e0901b7f07ed41be5dc98fd39f5ef","date":"2012-10-28T19:04:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix shmdt syscall calling convention on old archs\n"},{"hash":"dd762cf6e5886ed297886a19a2e2ffd49157a786","date":"2012-10-28T22:45:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.7\n"},{"hash":"76f28cfce59dfc499252c874f87c34567e6c86c6","date":"2012-10-29T01:17:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"system is a cancellation point\n\nideally, system would also be cancellable while running the external\ncommand, but I cannot find any way to make that work without either\nleaking zombie processes or introducing behavior that is far outside\nwhat the standard specifies. glibc handles cancellation by killing the\nchild process with SIGKILL, but this could be unsafe in that it could\nleave the data being manipulated by the command in an inconsistent\nstate.\n"},{"hash":"18c0e02e2bd53ceedbb843b06ff90890f1c734b0","date":"2012-11-01T01:27:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add dl_iterate_phdr interface\n\npatches by Alex Caudill (npx). the dynamic-linked version is almost\nidentical to the final submitted patch; I just added a couple missing\nlines for saving the phdr address when the dynamic linker is invoked\ndirectly to run a program, and removed a couple to avoid introducing\nanother unnecessary type. the static-linked version is based on npx's\ndraft. it could use some improvements which are contingent on the\nstartup code saving some additional information for later use.\n"},{"hash":"b367ab15fa68a59c8532f8d06f5d1b01aa5a5c7a","date":"2012-11-01T07:49:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid breakage if somebody wrongly defines empty feature test macros\n"},{"hash":"3a5aa8e49ce9a98725ceb311bb64f6168fc72d3e","date":"2012-11-02T02:58:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix unused variable warnings\n"},{"hash":"a617a8e2adaaac41dd1b662b6646e8392465801c","date":"2012-11-02T03:46:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix more unused variable warnings\n\nsome of these were coming from stdio functions locking files without\nunlocking them. I believe it's useful for this to throw a warning, so\nI added a new macro that's self-documenting that the file will never\nbe unlocked to avoid the warning in the few places where it's wrong.\n"},{"hash":"2f2f115b58269468304d2f26d029eb470fb44b4a","date":"2012-11-02T03:49:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove one unnecessary static var from dynamic linker\n"},{"hash":"fc5f16d18222d197ebf182e50048aa384d84269d","date":"2012-11-04T22:06:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mips cache flush/ctl syscall support and header\n"},{"hash":"32d6d77e544dbb1d9c44cacfc2ea0cbfe5ccfdef","date":"2012-11-05T19:29:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix numerous mips abi constant definition mismatches\n"},{"hash":"e8a0b27a7101f5b9939de83df3d6d8b606c5678b","date":"2012-11-05T19:30:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve SOCK_NONBLOCK/SOCK_CLOEXEC fallback code\n\nchecking for EINVAL should be sufficient, but qemu user emulation\nreturns EPROTONOSUPPORT in some of the failure cases, and it seems\nconceivable that other kernels doing linux-emulation could make the\nsame mistake. since DNS lookups and other important code might break\nif the fallback does not get invoked, be extra careful and check for\neither error.\n\nnote that it's important NOT to perform the fallback code on other\nerrors such as resource-exhaustion cases, since the fallback is not\natomic and will lead to file-descriptor leaks in multi-threaded\nprograms that use exec. the fallback code is only \"safe\" to run when\nthe initial failure is caused by the application's choice of\narguments, not the system state.\n"},{"hash":"1e717ea3d2a864e00e507f1a70a892c551955f1b","date":"2012-11-08T19:31:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dlsym asm for mips\n\nsaving the return address from the delay slot is not valid -- by the\ntime the instruction executes, the return address has already been\nreplaced.\n"},{"hash":"835f9f950e2f6059532bd9ab9857a856ed21a4fd","date":"2012-11-08T21:39:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up stdio_impl.h\n\nthis header evolved to facilitate the extremely lazy practice of\nomitting explicit includes of the necessary headers in individual\nstdio source files; not only was this sloppy, but it also increased\nbuild time.\n\nnow, stdio_impl.h is only including the headers it needs for its own\nuse; any further headers needed by source files are included directly\nwhere needed.\n"},{"hash":"efd4d87aa472523b07889af69874259db43b3c3c","date":"2012-11-08T22:04:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up sloppy nested inclusion from pthread_impl.h\n\nthis mirrors the stdio_impl.h cleanup. one header which is not\nstrictly needed, errno.h, is left in pthread_impl.h, because since\npthread functions return their error codes rather than using errno,\nnearly every single pthread function needs the errno constants.\n\nin a few places, rather than bringing in string.h to use memset, the\nmemset was replaced by direct assignment. this seems to generate much\nbetter code anyway, and makes many functions which were previously\nnon-leaf functions into leaf functions (possibly eliminating a great\ndeal of bloat on some platforms where non-leaf functions require ugly\nprologue and/or epilogue).\n"},{"hash":"3d9e3a309f794faf0df53c00b15d406f14931938","date":"2012-11-08T22:20:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix \"configure --prefix=\" and improve path/arg handling in configure\n\npreviously, empty string was treated as \"use default\". this is\napparently not compatible with standard configure semantics where an\nempty prefix puts everything under /. the new logic should be a lot\ncleaner and not suffer from such issues.\n"},{"hash":"40d5f7eb8323bcc36344424023b82603fa04cb93","date":"2012-11-09T03:41:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change ldso path file logic to replace rather than add to search path\n\nthis change was originally intended just to avoid repeated attempts to\nopen a nonexistant /etc/ls-musl-$(ARCH).path file, but I realized it\nalso prevents the default paths from being searched when such a path\nfile exists. despite the potential to break existing usage, I believe\nthe new behavior is the right behavior, and it's better to fix it\nsooner rather than later. with the old behavior, it was impossible to\ninhibit search of default paths which might contain musl-incompatible\nlibs (or even libs from a different cpu arch, on multi-arch machines).\n"},{"hash":"65465101ee23447bf30adc3a9ebf817d58f5d956","date":"2012-11-09T18:49:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support ldso path files without final newline\n"},{"hash":"dc059f03e8277abe3f515f350bd9615416aaa5ef","date":"2012-11-09T19:26:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always add memory streams to stdio open file list\n\nper interpretation for austin group issue #626, fflush(0) and exit()\nmust block waiting for a lock if another thread has locked a memory\nstream with flockfile. this adds some otherwise-unnecessary\nsynchronization cost to use of memory streams, but there was already a\nsynchronization cost calling malloc anyway.\n\npreviously the stream was only added to the open file list in\nsingle-threaded programs, so that upon subsequent call to\npthread_create, locking could be turned on for the stream.\n"},{"hash":"e9b885ee550e8a3eabc9d11c469baf1cfaf64f55","date":"2012-11-11T18:56:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix clobber of edx in i386 vsyscall asm\n\nthis function does not obey the normal calling convention; like a\nsyscall instruction, it's expected not to clobber any registers except\nthe return value. clobbering edx could break callers that were reusing\nthe value cached in edx after the syscall returns.\n"},{"hash":"1e21e78bf7a5c24c217446d8760be7b7188711c2","date":"2012-11-11T20:38:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for thread scheduling (POSIX TPS option)\n\nlinux's sched_* syscalls actually implement the TPS (thread\nscheduling) functionality, not the PS (process scheduling)\nfunctionality which the sched_* functions are supposed to have.\nomitting support for the PS option (and having the sched_* interfaces\nfail with ENOSYS rather than omitting them, since some broken software\nassumes they exist) seems to be the only conforming way to do this on\nlinux.\n"},{"hash":"7df42e8744d384c975b28192f66ab4c5e4c1fd90","date":"2012-11-11T20:54:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"report support of TPS option in unistd.h and sysconf\n\nalso update another newish feature in sysconf, stackaddr\n"},{"hash":"c4a35f8c2a4b1a7e62a4b9e5b2748fb4fbcace79","date":"2012-11-11T21:08:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"debloat src/thread tree but putting lots of junk in one file\n\nPOSIX includes mostly-useless attribute-get functions for each\nattribute-set function, presumably out of some object-oriented\ndogmatism. the get functions are not useful with the simple idiomatic\nusage of attributes. there are of course possible valid uses of them\n(like writing wrappers for pthread init functions that perform special\nactions on the presence of certain attributes), but considering how\ntiny these functions are anyway, little is lost by putting them all in\none file, and some build-time cost and archive-file-size benefits are\nachieved.\n"},{"hash":"b03c19a4b946b28dec03cf0820dc9d066fd143ce","date":"2012-11-12T22:13:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix long double constants in exp10l.c\n"},{"hash":"6f64505df37c41d7496612dffe86048765339a7a","date":"2012-11-12T22:41:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix exception behaviour of expm1l.c on inf and nan\n"},{"hash":"be81f51030d90de8d5eb0b65dbdab3032d5cae23","date":"2012-11-12T22:58:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: raise invalid flag in ilogb*.c on +-0, +-inf and nan\n"},{"hash":"04ccbdca6d88738e23e0d6a622ad33854c468646","date":"2012-11-12T23:21:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: raise exception flags in log1pl.c on <= -1 arguments\n"},{"hash":"37aa7f7301d6526c14635375886acd881b471f6c","date":"2012-11-12T23:30:06.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: raise flags in log2l.c on <= 0 arguments, and fix volatile\n"},{"hash":"52bcf3f5fb3251dca4df5b97b01543160340b31b","date":"2012-11-12T23:45:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix logb*.c exceptions now that ilogb raises invalid\n"},{"hash":"e2fe959fe2a450f74271d4d3c4b0d9456f889125","date":"2012-11-12T23:49:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: raise flags in logl.c on <= 0 arguments\n"},{"hash":"cfbaba79a2dd380e580a247b8fd36af60c878e8f","date":"2012-11-13T00:31:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"complex: add C11 CMPLX macros and replace cpack with them\n"},{"hash":"662ed2006568f953290f5e0b40cce38252db78f4","date":"2012-11-13T09:12:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix nextafter and nexttoward on maxdbl and maxflt input\n\nold code (return x+x;) returns correct value and raises correct\nflags only if the result is stored as double (or float)\n"},{"hash":"666271c105e4137bdfa195e217799d74143370d4","date":"2012-11-13T09:30:40.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix scalbn and scalbnf on overflow/underflow\n\nold code was correct only if the result was stored (without the\nexcess precision) or musl was compiled with -ffloat-store.\n(see note 160 in n1570.pdf section 6.8.6.4)\n"},{"hash":"c4359e01303da2755fe7e8033826b132eb3659b1","date":"2012-11-13T09:55:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: excess precision fix modf, modff, scalbn, scalbnf\n\nold code was correct only if the result was stored (without the\nexcess precision) or musl was compiled with -ffloat-store.\nnow we use STRICT_ASSIGN to work around the issue.\n(see note 160 in c11 section 6.8.6.4)\n"},{"hash":"033a9d6ad2a65ac03156b179e7c6101d2e72c4c0","date":"2012-11-13T12:34:45.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use '#pragma STDC FENV_ACCESS ON' when fenv is accessed\n"},{"hash":"7669d1e334e6b96455eece78da43bf830b93d697","date":"2012-11-13T17:15:10.000Z","author":{"name":"Richard Pennington","email":"rich@pennware.com"},"message":"import preliminary ppc work by rdp.\n"},{"hash":"1c8eb8bad791fe9d01d0d4ab77882db634fa933d","date":"2012-11-13T18:12:25.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"PPC port cleaned up, static linking works well now.\n"},{"hash":"6d3f1a39c14b12026df84f386875b094e3652990","date":"2012-11-13T18:59:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: turn off the STRICT_ASSIGN workaround by default\n\nthe volatile hack in STRICT_ASSIGN is only needed if\nassignment is not respected and excess precision is kept.\ngcc -fexcess-precision=standard and -ffloat-store both\nrespect assignment and musl use these flags by default.\ni kept the macro for now so the workaround may be used\nfor bad compilers in the future.\n"},{"hash":"529a8de46cbf6cce525ab25c4532822006502f29","date":"2012-11-13T20:54:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: simplify hypot and hypotf using scalbn\n\nthis also fixes overflow/underflow raising and excess\nprecision issues (as those are handled well in scalbn)\n"},{"hash":"45ff9d8eb6f43b8f612d1b01ada627f5b4447c45","date":"2012-11-14T00:01:38.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: ld80 invtrig cleanups\nkeeping only commonly used data in invtrigl\n"},{"hash":"68847ecd3a644d3ffd9be58603be1a3fa437dff0","date":"2012-11-14T08:27:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fenv: return FE_TONEAREST in dummy fegetround\n"},{"hash":"c6d441e3a246370d9c459396ec22b096db93850e","date":"2012-11-14T19:01:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'ppc-port/ppc-squashed'\n"},{"hash":"50cb6dbb0cd794aec06c6291ba55f369f9bbe142","date":"2012-11-14T19:04:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wchar limits mistakenly copied from arm\n"},{"hash":"574d01a69617921b72d0171f9a0d6cd414619220","date":"2012-11-14T19:08:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update ppc atomic code to match the endian-agnostic version on other archs\n"},{"hash":"e7257d3e63b10d4725450c383e94cdbb997d9151","date":"2012-11-14T19:24:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc atomic compare-and-swap function\n\nprevious version did not compare at all; it was just a fancy atomic\nwrite. untested. further atomic fixes may be needed.\n"},{"hash":"d1bf452d75bef2b098765fe94b9ccb24cdb6568b","date":"2012-11-14T19:27:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix indention with spaces in powerpc asm\n"},{"hash":"22781b4d8ecaf97ac52d2a501a2e7d3bc1920ce0","date":"2012-11-15T01:24:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update copyright file for recent contributions\n"},{"hash":"8bb181622222f2ee3462c8b021bcae4fcdbbd37a","date":"2012-11-15T13:37:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/math'\n"},{"hash":"7491bac33e0a14718e698a971b5bae79c9ac59ee","date":"2012-11-15T21:01:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ppc wchar_t is long, not int\n"},{"hash":"91738d0241aed345cac8685422d4518ea5f3cdf0","date":"2012-11-16T00:16:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable SO_REUSEPORT in sys/socket.h\n\nalthough a number is reserved for it, this option is not implemented\non Linux and does not work. defining it causes some applications to\nuse it, and subsequently break due to its failure.\n"},{"hash":"3bb6bd85808ace7b588d1c523bb7badfd9e72650","date":"2012-11-16T03:55:52.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix powerpc termios.h and ioctl.h\n"},{"hash":"7718e7cce5730265f2707fe378ec263b4c35624d","date":"2012-11-16T06:19:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ppc stat structure definition\n"},{"hash":"a4db94ab78db29eddc957879251f3e0bc7ffb571","date":"2012-11-17T03:22:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linking support for powerpc\n\nincomplete but at least partly working. requires all files to be\ncompiled in the new \"secure\" plt model, not the old one that put plt\ncode in the data segment. TLS is untested but may work. invoking the\ndynamic linker explicitly to load a program does not yet handle argv\ncorrectly.\n"},{"hash":"bbbf045ce96fe5daae7e220487dc44c9d971bd9d","date":"2012-11-17T22:22:41.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: exp.c clean up\n\noverflow and underflow was incorrect when the result was not stored.\nan optimization for the 0.5*ln2 < |x| < 1.5*ln2 domain was removed.\ndid various cleanups around static constants and made the comments\nconsistent with the code.\n"},{"hash":"bb9abdef48969671ee51f28379981a13c440d0d9","date":"2012-11-17T22:25:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"arg-skipping code for powerpc dynamic linker\n\nthis allows using the dynamic linker as a command to load programs.\n"},{"hash":"159c7655d06f04aa56a57385d633699c4c63d72c","date":"2012-11-17T22:39:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: cleanup exp2.c exp2f.c and exp2l.c\n\n* old code relied on sign extension on right shift\n* exp2l ld64 wrapper was wrong\n* use scalbn instead of bithacks\n"},{"hash":"5c6443ac42ba00ad3a0b4e98db4cc8f45596ca93","date":"2012-11-17T23:42:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add stub versions of some missing optional pthread interfaces\n\npriority inheritance is not yet supported, and priority protection\nprobably will not be supported ever unless there's serious demand for\nit (it's a fairly heavy-weight feature).\n\nper-thread cpu clocks would be nice to have, but to my knowledge linux\nis still not capable of supporting them. glibc fakes them by using the\n_process_ cpu-time clock and subtracting the thread creation time,\nwhich gives seriously incorrect semantics (worse than not supporting\nthe feature at all), so until there's a way to do it right, it will\nremain as a stub that always fails.\n"},{"hash":"d0197ff03100c716937900fc9c32042ab5581d4a","date":"2012-11-18T00:51:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add cleaned-up sys/mtio.h\n\nthis is mostly junk, but a few programs with tape-drive support\nunconditionally include it, and it might be useful.\n"},{"hash":"71955b2ff88b40446611142429416536c709c961","date":"2012-11-18T01:04:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in dynamic linker path file loading code\n\nfortunately the memory corruption could not hurt anything, but it\nprevented clearing the final newline and thus prevented the last path\nelement from working.\n"},{"hash":"ae67fe1aadb12db2d01eb7af0a3d837296216101","date":"2012-11-18T01:42:55.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"ppc socket.h: add forgotten cmsghdr\n"},{"hash":"ab1772c597ba8fe0c26400256b12d7a4df23880e","date":"2012-11-18T02:42:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: expf.c cleanup\n\nsimilar to exp.c cleanup: use scalbnf, don't return excess precision,\ndrop some optimizatoins.\nexp.c was changed to be more consistent with expf.c code.\n"},{"hash":"e93a0fe49dcc2ff9728faa8920df75009b9f46dc","date":"2012-11-18T02:49:16.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: expl.c cleanup\n\nraise overflow and underflow when necessary, fix various comments.\n"},{"hash":"a764db9a086ca036d4fc9181f96d19ab312a6560","date":"2012-11-18T02:52:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use float constants in exp10f.c\n\nuse the 'f' suffix when a float constant is not representable\n"},{"hash":"8d2887f88475bb26ff4d48b661e26265a74e73bb","date":"2012-11-18T04:14:40.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fcntl.h: O_SEARCH was missing for powerpc\n\nput some macros that do not differ between architectures in the\nmain header and remove from bits.\nrestructure mips header so it has the same structure as the others.\n"},{"hash":"19b1a8453e9d329a16711900a84797c5f1333208","date":"2012-11-18T20:19:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/math'\n"},{"hash":"0b52bf5c78435f3af4e0c1cbbe4177861e599847","date":"2012-11-18T21:10:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix feholdexcept -- it needs to clear exceptions after saving environment\n"},{"hash":"75c450cff34b5206aca6aab14b7ad909168b8f50","date":"2012-11-18T21:31:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fenv support for ppc, untested\n\nbased on code sent to the mailing list by nsz, with minor changes.\n"},{"hash":"f54ac2446abac57cacebc64df78a5ef850045700","date":"2012-11-18T21:58:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing const on powerpc FE_DFL_ENV\n"},{"hash":"61aa6324af982b635f8c392640a4e8e450c4c6b4","date":"2012-11-19T00:31:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add port io functions to sys/io.h\n\nbased on proposal by Isaac Dunham. nonexistance of bits/io.h will\ncause inclusion of sys/io.h to produce an error on archs that are not\nsupposed to have it. this is probably the desired behavior, but the\nerror message may be a bit unusual.\n"},{"hash":"0004ea613ac310daaee30c167112d796db33fa70","date":"2012-11-19T00:58:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage from introducing bits header for sys/io.h\n\napparently some other archs have sys/io.h and should not break just\nbecause they don't have the x86 port io functions. provide a blank\nbits/io.h everywhere for now.\n"},{"hash":"9565a349f217fb6f532fac06b7ef458a32c2ad2e","date":"2012-11-19T03:57:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc asm not to store data in volatile space below stack pointer\n\nit's essential to decrement the stack pointer before writing to new\nstack space, rather than afterwards. otherwise there is a race\ncondition during which asynchronous code (signals) could clobber the\ndata being stored.\n\nit may be possible to optimize the code further using stwu, but I\nwanted to avoid making any changes to the actual stack layout in this\ncommit. further improvements can be made separately if desired.\n"},{"hash":"6c0cba819fb593f1efa33e0acd0bf59597279d97","date":"2012-11-19T04:15:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error in configure script using >/dev/null in noclobber mode\n"},{"hash":"3fae236e00068d17e007275717940f5d5e94ba1a","date":"2012-11-19T15:58:09.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"powerpc: handle syscall error in clone.\n\nsigsetjmp: store temporaries in jmp_buf rather than on stack.\n"},{"hash":"2df4f6f17b1f14684cb991c53c9ef0ddaa8c7bad","date":"2012-11-21T05:24:05.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix invalid usage of mcontext_t in powerpc signal.h\n"},{"hash":"7bdf11c2c611a5d8a5171c188461ff267fd555b6","date":"2012-11-21T18:29:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc types to match abi, and some feature test issues\n"},{"hash":"57a0b82441e8d03a93965e2a373588721374ed78","date":"2012-11-21T18:36:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make powerpc signal.h namespace-clean for posix/isoc\n\nalso handle the non-GNUC case where alignment attribute is not available\nby simply omitting it. this will not cause problems except for\ninclusion of mcontex_t/ucontext_t in application-defined structures,\nsince the natural alignment of the uc_mcontext member relative to the\nstart of ucontext_t is already correct. and shame on whoever designed\nthis for making it impossible to satisfy the ABI requirements without\nGNUC extensions.\n"},{"hash":"65b98213e4a12997a519e34695250d9f3a4d6bc7","date":"2012-11-21T18:41:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add back NSIG, removed from powerpc in last commit, but for all archs\n\nunlike the previous definition, NSIG/_NSIG is supposed to be one more\nthan the highest signal number. adding this will allow simplifying\nlibc-internal code that makes signal-related syscalls, which can be\ndone as a later step. some apps might use it too; while this usage is\nquestionable, it's at least not insane.\n"},{"hash":"b5e3832f85bd818794b0f5f08a2a0ce31a4bba57","date":"2012-11-21T18:49:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ppc signal/NSIG related fix (warning fix, redefinition)\n"},{"hash":"808f225b7c60e24611dfe3df9f02538ec32a3fe6","date":"2012-11-21T18:50:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misordered typedefs in ppc signal.h\n"},{"hash":"4860db9f5452f442833366a475910e34f117b579","date":"2012-11-21T18:51:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more ppc signal.h typedef order fixes\n"},{"hash":"b0756d88a062ae15066719aaf9d54084a7f01d17","date":"2012-11-23T16:27:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove stuff that doesn't belong in powerpc 32-bit sigcontext\n\nthese fields were wrongly copied from the kernel's ppc64 struct def\n"},{"hash":"7538708f8b3000df2ec4e3022a1400b458123224","date":"2012-11-23T17:20:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix up leftover, incorrect NSIG definitions in arch-specific signal.h\n"},{"hash":"0375c68fe7ed39b1173b62574936152645624078","date":"2012-11-23T18:31:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing startfiles for powerpc\n"},{"hash":"a50136dfe186a3ea3d78a4264187915ad16ab861","date":"2012-11-23T19:30:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc setjmp/longjmp to save/restore float regs; enlarge/align jmp_buf\n"},{"hash":"ac562aa1ef4012f617583f474a8d8e5c972ed6ee","date":"2012-11-23T19:34:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc sigsetjmp asm to match the new jmp_buf size/offsets\n"},{"hash":"c72fc23843906e2571e817a62c94cee15648b7dc","date":"2012-11-23T19:35:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sigcontext/mcontext cleanup for arch-specific bits\n\nwith these changes, the members/types of mcontext_t and related stuff\nshould closely match the glibc definitions. unlike glibc, however, the\ndefinitions here avoid using typedefs as much as possible and work\ndirectly with the underlying types, to minimize namespace pollution\nfrom signal.h in the default (_BSD_SOURCE) profile.\n\nthis is a first step in improving compatibility with applications\nwhich poke at context/register information -- mainly debuggers, trace\nutilities, etc. additional definitions in ucontext.h and other headers\nmay be needed later.\n\nif feature test macros are used to request a conforming namespace,\nmcontext_t is replaced with an opaque structure of the equivalent size\nand alignment; conforming programs cannot examine its contents anyway.\n"},{"hash":"144dc4f479d49b8148f8b1b6b506b0f1096f911b","date":"2012-11-23T22:23:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix termios constants on mips\n"},{"hash":"98f56b12ceddba183c4fdba881ec753bbeea4e9f","date":"2012-11-24T00:54:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc ucontext, again..\n\nit should now really match the kernel. some of the removed padding\ncorresponded to the difference between user and kernel sigset_t. the\nspace at the end was redundant with the uc_mcontext member and seems\nto have been added as a result of misunderstanding glibc's definition\nversus the kernel's.\n"},{"hash":"4acc95e497956d926bc9b9a0534cc93a73a6d3e1","date":"2012-11-24T01:05:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"begin sys/user.h and sys/reg.h fixes for ports\n\naside from microblaze, these should be roughly correct for all archs\nnow. some misc junk macros and typedefs are missing, which should\nprobably be added for max compatibility with trace/debug tools.\n"},{"hash":"75a31faaedb12cad0b884a41c73057cb80a14ed3","date":"2012-11-26T01:56:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate gdb complaints about missing linux-gate.so.1\n\nactually, the hard-coded name should be eliminated too, and replaced\nby a search for the soname in the headers, but that can be done\nseparately later.\n"},{"hash":"132cc703f82b1d5d308c2db9a353d6c92ea29fda","date":"2012-11-26T02:12:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove microblaze user.h incorrectly copied from arm\n"},{"hash":"4b75f4ed8d08b26d4bf2ac96191b395218ad888e","date":"2012-11-26T03:28:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sys/procfs.h mostly work on most archs\n\nthese structures are purely for use by trace/debug tools and tools\nworking with core files. the definition of fpregset_t, which was\npreviously here, has been removed because it was wrong; fpregset_t\nshould be the type used in mcontext_t, not the type used in\nptrace/core stuff.\n"},{"hash":"a8da6c2f287037cbacc65578a268f355760eaf8e","date":"2012-11-26T04:04:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fixup mcontext stuff to expost gregset_t/fpregset_t as appropriate\n"},{"hash":"56c6943efed41adad6b3c11b2992628a5b0f1d27","date":"2012-11-26T17:05:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing limits when only _BSD_SOURCE is defined\n\nthe missing check did not affect the default profile, since it has\nboth _XOPEN_SOURCE and _BSD_SOURCE defined, but it did break programs\nwhich explicitly define _BSD_SOURCE, causing it to be the only feature\ntest macro present.\n"},{"hash":"b4d8a16c1afde1d06e1d46f22f5fab2cda408122","date":"2012-11-26T18:00:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix eventfd and inotify nonblock/cloexec flags to match arch values\n"},{"hash":"df31363d8c4ab3eee91ca1cf3c79a303eefafc4d","date":"2012-11-27T01:42:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove stat member aliases from ppc-specific bits/stat.h\n\nif these are to be supported, they belong in the main stat.h, not\nrepeated for each arch.\n"},{"hash":"e6dcebd5efa2d390f0a24dc11444024e9fd1990c","date":"2012-11-27T02:01:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update readme and release notes for 0.9.8\n"},{"hash":"1c322f2f0a9173a3ae8c8bfa12d5d8e92fb5d0ab","date":"2012-11-27T14:44:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some restrict-qualifier mismatches in newly added interfaces\n\nthese should have little/no practical impact but they're needed for\nstrict conformance.\n"},{"hash":"a7936f61b23100ac32f51776c5b3e52452c7598c","date":"2012-11-30T22:56:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ordering of shared library ctors with respect to libc init\n\npreviously, shared library constructors were being called before\nimportant internal things like the environment (extern char **environ)\nand hwcap flags (needed for sjlj to work right with float on arm) were\ninitialized in __libc_start_main. rather than trying to have to\ndynamic linker make sure this stuff all gets initialized right, I've\nopted to just defer calling shared library constructors until after\nthe main program's entry point is reached. this also fixes the order\nof ctors to be the exact reverse of dtors, which is a desirable\nproperty and possibly even mandated by some languages.\n\nthe main practical effect of this change is that shared libraries\ncalling getenv from ctors will no longer fail.\n"},{"hash":"7dcb640da361f272a6c317b03466fd2013934c81","date":"2012-12-01T02:00:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide NSIG under _BSD_SOURCE (default) as well as _GNU_SOURCE\n\nthis fixes a regression related to the changes made to bits/signal.h\nbetween 0.9.7 and 0.9.8 that broke some (non-portable) software.\n"},{"hash":"216b706548c16e3bc9612c8a2e5eed23f016504c","date":"2012-12-02T20:18:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix a couple issues in the inttypes.h PRI/SCN macros\n\nmost importantly, the format/scan macros for the [u]int_fast16_t and\n[u]int_fast32_t types were defined incorrectly assuming these types\nwould match the native word/pointer size. this is incorrect on any\n64-bit system; the \"fast\" types for 16- and 32-bit integers are simply\nint.\n\nanother issue which was \"only a warning\" (despite being UB) is that\nthe choice of \"l\" versus \"ll\" was incorrect for 64-bit types on 64-bit\nmachines. while it would \"work\" to always use \"long long\" for 64-bit\ntypes, we use \"long\" on 64-bit machines to match what glibc does and\nwhat the ABI documents recommend. the macro definitions were probably\nright in very old versions of musl, but became wrong when we aligned\nmost closely with the 'standard' ABI. checking UINTPTR_MAX is an easy\nway to get the system wordsize without pulling in new headers.\n\nfinally, the useless __PRIPTR macro to allow the underlying type of\n[u]intptr_t to vary has been removed. we are using \"long\" on all\ntargets, and thankfully this matches what glibc does, so I do not\nenvision ever needing to change it. thus, the \"l\" has just been\nincorporated directly in the strings.\n"},{"hash":"769fd4ce202225ba1f2621bbefb803ee9a268ebf","date":"2012-12-03T21:57:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"feature test macros: make _GNU_SOURCE enable everything\n\npreviously, a few BSD features were enabled only by _BSD_SOURCE, not\nby _GNU_SOURCE. since _BSD_SOURCE is default in the absence of other\nfeature test macros, this made adding _GNU_SOURCE to a project not a\npurely additive feature test macro; it actually caused some features\nto be suppressed.\n\nmost of the changes made by this patch actually bring musl in closer\nalignment with the glibc behavior for _GNU_SOURCE. the only exceptions\nare the added visibility of functions like strlcpy which were BSD-only\ndue to being disliked/rejected by glibc maintainers. here, I feel the\nconsistency of having _GNU_SOURCE mean \"everything\", and especially\nthe property of it being purely additive, are more valuable than\nhiding functions which glibc does not have.\n"},{"hash":"b3175f5c48d414ba792dfb77078dd5f559abd844","date":"2012-12-03T22:02:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _ALL_SOURCE as an alias for _GNU_SOURCE/enable-everything\n\nreportedly this is a semi-common practice among some BSDs and a few\nother systems, and will improve application compatibility.\n"},{"hash":"7aa73925e705047755221d6e1461a1e4180d26d7","date":"2012-12-04T14:32:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in arm user.h that happened during big user.h changes\n"},{"hash":"b427c822655156f17d17cd00110ff5bc22299a38","date":"2012-12-05T00:03:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use alternate argument syntax for restrict with lio_listio\n\nfor some reason I have not been able to determine, gcc 3.2 rejects the\narray notation. this seems to be a gcc bug, but since it's easy to\nwork around, let's do the workaround and avoid gratuitously requiring\nnewer compilers.\n"},{"hash":"a7c1f9727a099da0d4722d4cf81056acd205158b","date":"2012-12-05T05:00:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use __builtin_offsetof to implement offsetof when possible\n\napparently recent gcc versions have intentionally broken the\ntraditional definition by treating it as a non-constant expression.\nthe traditional definition may also be problematic for c++ programs.\n"},{"hash":"91b05889098c65425920b4c3bcd0712b73ea97eb","date":"2012-12-05T17:35:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add scsi headers scsi.h and sg.h\n\ndue to some historical oddity, these are considered libc headers\nrather than kernel headers. the kernel used to provide them too, but\nit seems modern kernels do not install them, so let's just do the\neasiest thing and provide them. stripped-down versions provided by\nJohn Spencer.\n"},{"hash":"b088f85582d8787911ef48449574bed4131b44a2","date":"2012-12-05T17:52:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove mips setjmp/longjmp code to save/restore fenv\n\nnothing in the standard requires or even allows the fenv state to be\nrestored by longjmp. restoring the exception flags is not such a big\ndeal since it's probably valid to clobber them completely, but\nrestoring the rounding mode yields an observable side effect not\nsanctioned by ISO C. saving/restoring it also wastes a few cycles and\n16 bytes of code.\n\nas for historical behavior, reportedly SGI IRIX did save/restore fenv,\nand this is where glibc and uClibc got the behavior from. a few other\nsystems save/restore it too (on archs other than mips), even though\nthis is apparently wrong. further details are documented here:\n\nhttp://www-personal.umich.edu/~williams/archive/computation/setjmp-fpmode.html\n\nas musl aims for standards conformance rather than coddling historical\nprograms expecting non-conforming behavior, and as it's unlikely that\nany historical programs actually depend on the incorrect behavior\n(such programs would break on other archs, anyway), I'm making the\nchange not to save/restore fenv on mips.\n"},{"hash":"96b3ea53f9ae365a82fb537d4fdac63c2082cc22","date":"2012-12-05T19:12:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inefficiency of math.h isless, etc. macros\n\npreviously, everything was going through an intermediate conversion to\nlong double, which caused the extern __fpclassifyl function to get\ninvoked, preventing virtually all optimizations of these operations.\n\nwith the new code, tests on constant float or double arguments compile\nto a constant 0 or 1, and tests on non-constant expressions are\nefficient. I may later add support for __builtin versions on compilers\nthat support them.\n"},{"hash":"4b43f05f3c754df56e8b6f844c012efd4e51a032","date":"2012-12-06T00:13:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove fenv saving/loading code from setjmp/longjmp on arm\n\nthe issue is identical to the recent commit fixing the mips versions:\ndespite other implementations doing this, it conflicts with the\nrequirements of ISO C and it's a waste of time and code size.\n"},{"hash":"0e10f740069c2d805d3199a8079b73e828c7d8d9","date":"2012-12-06T00:26:51.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add MAP_NORESERVE to bits/mman.h\n\nthis is needed for qemu, and since it differs for each arch\nit can't be circumvented easily by using a macro in CFLAGS.\n"},{"hash":"db846a6217c61e8d990b3f2f8e0162e93f9349ed","date":"2012-12-06T00:26:51.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"remove MAP_32 from non-x86 archs\n\nboth kernel and glibc define it only on x86(_64).\n"},{"hash":"7e0d4fce41ac95adc080bffa88ee0f51c1cf2837","date":"2012-12-06T15:57:22.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add more arch-specific MAP_ macros to bits/mman.h\n\nthese are also needed by qemu.\n"},{"hash":"3d3903fa5bd18f66c4f22fb766615d84b9519aa0","date":"2012-12-06T16:02:19.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"tcp.h: add SOL_TCP, analoguous to udp.h\n"},{"hash":"120e402de66bf0791a4f76dd1ee0e089809814f3","date":"2012-12-06T16:48:16.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fcntl.h: add some linux-specific F_ macros\n\nthankfully these are all generic across archs.\nthe DN_ macros are for usage with F_NOTIFY.\n"},{"hash":"a631c5df53c22146389228f228506936e258379b","date":"2012-12-06T17:14:49.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"bits/signal.h: add register names for x86(_64)\n\nglibc exposes them from ucontext.h.\nsince that header includes signal.h, it is safe to put them\ninto bits/signal.h, if _GNU_SOURCE is defined.\n"},{"hash":"7aec71c411373f8b28a8ba1443f2631ad08d4a1b","date":"2012-12-06T19:27:54.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add obsolete futimesat()\n\nthis function is obsolete, however it's available as a syscall\nand as such qemu userspace emulation tries to forward it to the\nhost kernel.\n"},{"hash":"f1bb78343a2fadf7087f3f0f7753084a23a334e9","date":"2012-12-06T19:27:54.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"ipc.h: fix gnu aliases for key and seq in struct ipc_perm\n\nthe macro was the wrong way round, additionally GNU defines\n__ prefixed versions, which are used by qemu.\n"},{"hash":"6bf0fdbdfc994df4977d73782f2b81d2ba449e04","date":"2012-12-06T19:27:54.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"unistd.h: fix wrong type for gid_t argument\n\nthe prototype is defined with const gid_t* rather than const gid_t[].\nit was already correctly defined in grp.h.\n"},{"hash":"0182c287ca223f7f881c6a9f1d2413cc747460d9","date":"2012-12-06T19:27:54.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add struct msgbuf to sys/msg.h\n"},{"hash":"a1990e1e833624b26b0ca55aa7fce56bb594f814","date":"2012-12-06T19:51:32.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add sigandset and sigorset (needed for qemu)\n"},{"hash":"6fb88a955a112223d3304bdaedc067771024725b","date":"2012-12-06T20:01:06.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add personality syscall\n"},{"hash":"b6f75ab07f56a6ed3701231bd48601f3bc45dce5","date":"2012-12-06T20:12:24.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add arch_prctl syscall (amd64/x32 only)\n"},{"hash":"e34d967c3eaa81ba6224b85cf19d79c6479c2056","date":"2012-12-06T20:43:00.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fixup for fcntl.h changes\n"},{"hash":"4ab26cc34c48a3374c54735a5df0bed106fda06e","date":"2012-12-06T20:50:37.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fixup sigandset\n"},{"hash":"30d2c1f5bf68183e6361c5dfa812c6e42a8ec78c","date":"2012-12-06T21:14:37.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"sigandset/sigorset: do not check for NULL pointers.\n\nthat way it's consistent with existing sig* functions, and saves\nsome code size.\n"},{"hash":"e00e07f66456d5bcdfde84a1801230ce8bf40ee7","date":"2012-12-06T21:45:56.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix F_DUPFD_CLOEXEC being defined twice\n"},{"hash":"6bffcc2335f584e45f0b704986413f42391c7057","date":"2012-12-06T21:48:46.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix sigorset/sigandset: _NSIG/8 is the size in bytes\n"},{"hash":"d1b6fc6ecc59441a37269d6512c5d34d1a2412cd","date":"2012-12-06T21:52:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix names of ipc_perm __key/__seq elements\n\npreviously the names were exposed as key/seq with _GNU_SOURCE and\n__ipc_perm_key/__ipc_perm/seq otherwise, whereas glibc always uses\n__key and __seq for the names. thus, the old behavior never matched\nglibc, and the new behavior always does, regardless of feature test\nmacros.\n\nfor now, i'm leaving the renaming here in sys/ipc.h where it's easy to\nchange globally for all archs, in case something turns out to be\nwrong, but eventually the names could just be incorporated directly\ninto the bits headers for each arch and the renaming removed.\n"},{"hash":"5c5e45e58bd0da2d74aea3e6631b240fedd707ef","date":"2012-12-06T22:05:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move signal.h REG_* macros under _GNU_SOURCE protection\n\nthey were accidentally exposed under just baseline POSIX, which is a\nbig namespace pollution issue. thankfully glibc only exposes them\nunder _GNU_SOURCE, not under any of its other options, so omitting\nthe pollution in the default _BSD_SOURCE profile does not hurt\napplication compatibility at all.\n"},{"hash":"2ad9cf52eb9fea12a19bcf893828e1361a0b6546","date":"2012-12-07T02:12:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid read in aligned_alloc\n\nin case of mmap-obtained chunks, end points past the end of the\nmapping and reading it may fault. since the value is not needed until\nafter the conditional, move the access to prevent invalid reads.\n"},{"hash":"03b0f13e908eb61c1218db5e4478f0162fa98f5a","date":"2012-12-07T21:16:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix trailing whitespace issues that crept in here and there\n"},{"hash":"55aef73f4789a97dc99f30e72776e55924255e1b","date":"2012-12-07T21:17:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move new linux syscall wrapper functions to proper source dir\n"},{"hash":"3ee67505fe50299d6df6e9bca894fd6b568669fb","date":"2012-12-07T21:22:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove __arch_prctl alias for arch_prctl\n\nif there's evidence of any use for it, we can add it back later. as\nfar as I can tell, glibc has it only for internal use (and musl uses a\ndirect syscall in that case rather than a function call), not for\nexposing it to applications.\n"},{"hash":"b8ccf8e46bab6ee9d63a6e392c3b33b9aa89255c","date":"2012-12-08T03:33:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"page-align initial brk value used by malloc in shared libc\n\nthis change fixes an obscure issue with some nonstandard kernels,\nwhere the initial brk syscall returns a pointer just past the end of\nbss rather than the beginning of a new page. in that case, the dynamic\nlinker has already reclaimed the space between the end of bss and the\npage end for use by malloc, and memory corruption (allocating the same\nmemory twice) will occur when malloc again claims it on the first call\nto brk.\n"},{"hash":"34aa169dcfa0a2945504fb696dee29bdf989c125","date":"2012-12-08T04:04:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for ctors/dtors on arm with modern gcc\n\na while back, gcc switched from using the old _init/_fini fragments\nmethod for calling ctors and dtors on arm to the __init_array and\n__fini_array method. unfortunately, on glibc this depends on ugly\nhacks involving making libc.so a linker script and pulling parts of\nlibc into the main program binary. so I cheat a little bit, and just\nwrite asm to iterate over the init/fini arrays from the _init/_fini\nasm. the same approach could be used on any arch it's needed on, but\nfor now arm is the only one.\n"},{"hash":"baf246e559e915a78a9703e10d15020c7edee423","date":"2012-12-10T21:40:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"syscall() declaration belongs in unistd.h, not sys/syscall.h\n\ntraditionally, both BSD and GNU systems have it this way.\nsys/syscall.h is purely syscall number macros. presently glibc exposes\nthe syscall declaration in unistd.h only with _GNU_SOURCE, but that\ndoes not reflect historical practice.\n"},{"hash":"f1c1a5ea8295a3f8e9ea2db8961c5a68e1a3f9ed","date":"2012-12-10T23:31:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document self-synchronized destruction issue for stdio locking\n"},{"hash":"490d4a0e9e96eabffa553b279b07725c39010c1a","date":"2012-12-11T02:36:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regressions in app compatibility from previous sys/ipc.h changes\n\ndespite glibc using __key and __seq rather than key and seq, some\napplications, notably busybox, assume the names are key and seq unless\nglibc is being used. and the names key and seq are really the ones\nthat _should_ be exposed when not attempting to present a\nstandards-conforming namespace; apps should not be using names that\nbegin with double-underscore. thus, the optimal fix is to use key and\nseq as the actual names of the members when in bsd/gnu source profile,\nand define macros for __key and __seq that redirect to plain key and\nseq.\n"},{"hash":"bcc20d2b94e2c6649597d552b94718197be0674f","date":"2012-12-11T14:38:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix double errno-decoding in the old-kernel fallback path of pipe2\n\nthis bug seems to have caused any failure by pipe2 on such systems to\nset errno to 1, rather than the proper error code.\n"},{"hash":"faea4c9937d36b17e53fdc7d5a254d7e936e1755","date":"2012-12-11T21:44:36.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"make CMPLX macros available in complex.h in non-c11 mode as well\n"},{"hash":"64623cd59a5e72c6322548bca3827a75d5d11918","date":"2012-12-11T21:57:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove long double version of bessel functions from math.h\n\nj0l,j1l,jnl,y0l,j1l,jnl are gnu extensions, bsd and posix do not\nhave them.\nnoone seems to use them and there is no plan to implement them any\ntime soon so we shouldn't declare them in math.h.\n"},{"hash":"482ccd2f7497a79ca83e998f54e823e7cedaaa6e","date":"2012-12-11T22:06:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: rewrite inverse hyperbolic functions to be simpler/smaller\n\nmodifications:\n* avoid unsigned->signed integer conversion\n* do not handle special cases when they work correctly anyway\n* more strict threshold values (0x1p26 instead of 0x1p28 etc)\n* smaller code, cleaner branching logic\n* same precision as the old code:\n    acosh(x) has up to 2ulp error in [1,1.125]\n    asinh(x) has up to 1.6ulp error in [0.125,0.5], [-0.5,-0.125]\n    atanh(x) has up to 1.7ulp error in [0.125,0.5], [-0.5,-0.125]\n"},{"hash":"b12a73d5bf595b7fbb73db30c6bb144078e86ef5","date":"2012-12-11T22:56:59.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: clean up inverse trigonometric functions\n\nmodifications:\n* avoid unsigned->signed conversions\n* removed various volatile hacks\n* use FORCE_EVAL when evaluating only for side-effects\n* factor out R() rational approximation instead of manual inline\n* __invtrigl.h now only provides __invtrigl_R, __pio2_hi and __pio2_lo\n* use 2*pio2_hi, 2*pio2_lo instead of pi_hi, pi_lo\n\notherwise the logic is not changed, long double versions will\nneed a revisit when a genaral long double cleanup happens\n"},{"hash":"1384ad5f33ff0a4bb3e52eb3aa7e6f2536148e04","date":"2012-12-11T23:16:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add empty __invtrigl.s to i386 and x86_64\n\n__invtrigl is not needed when acosl, asinl, atanl have asm\nimplementations\n"},{"hash":"9c6b1de0fb11d6e2927a19bbaf6345aedcc84297","date":"2012-12-12T00:28:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix comment in __rem_pio2f.c\n"},{"hash":"14cc9c7f38c80094c05353fcb11fe9e441340583","date":"2012-12-12T00:39:23.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: cosh cleanup\n\ndo fabs by hand, don't check for nan and inf separately\n"},{"hash":"0f53c1a4266ad4cca28115e2c3bcfdc86337d8ca","date":"2012-12-12T00:43:43.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add a non-dummy tgamma implementation\n\nuses the lanczos approximation method with the usual tweaks.\nsame parameters were selected as in boost and python.\n(avoides some extra work and special casing found in boost\nso the precision is not that good: measured error is <5ulp for\npositive x and <10ulp for negative)\n\nan alternative lgamma_r implementation is also given in the same\nfile which is simpler and smaller than the current one, but less\nprecise so it's ifdefed out for now.\n"},{"hash":"2384f27d34c1580dfac73d57d7c2c6b204f1d147","date":"2012-12-12T04:28:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"treat invalid C as an error even if warnings aren't enabled.\n"},{"hash":"d50955620ff2eaa4c0aa87bb51b91d63ac8d7b94","date":"2012-12-13T19:15:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing flags in sys/timerfd.h\n"},{"hash":"934609442339edb21a33532ccefac8b78e6305f2","date":"2012-12-14T11:49:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fixed tgmath.h for functions with integral result\n\nin tgmath.h the return values are casted to the appropriate\nfloating-point type (if the compiler supports gcc __typeof__),\nthis is wrong in case of ilogb, lrint, llrint, lround, llround\nwhich do not need such cast\n"},{"hash":"a8f73bb1a685dd7d67669c6f6ceb255cfa967790","date":"2012-12-14T17:29:56.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix i386/expl.s with more precise x*log2e\n\nwith naive exp2l(x*log2e) the last 12bits of the result was incorrect\nfor x with large absolute value\n\nwith hi + lo = x*log2e is caluclated to 128 bits precision and then\n  expl(x) = exp2l(hi) + exp2l(hi) * f2xm1(lo)\nthis gives <1.5ulp measured error everywhere in nearest rounding mode\n"},{"hash":"9cb589939cdbfb2fe273bef3fe557a9a162ddd73","date":"2012-12-15T05:43:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some missing macros to sys/shm.h\n\nthese are not specified in the standard, but in the reserved\nnamespace, so there is no problem with defining them unconditionally.\n"},{"hash":"969ddbc423238291d5c7982790bbe72720627ba4","date":"2012-12-15T05:49:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/math'\n"},{"hash":"1d7c4f8f93d82ad5d8f650e71bcd99201965d9ad","date":"2012-12-16T04:34:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in ldd (failure to print library load address)\n"},{"hash":"525ad96e0ef6e46b6ac28438ef2ffa1d5317fb64","date":"2012-12-16T16:28:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: move x86_64 exp2l implementation to exp2l.s from expl.s\n"},{"hash":"58bba42d1bd14e1ab01f3249ffc98afdbf841a6a","date":"2012-12-16T16:30:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: x86_64 version of expl, fixed some comments in the i386 version\n"},{"hash":"1aec620f9366c29d761fe42b3e02bd8024685db3","date":"2012-12-16T18:23:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: finished cosh.c cleanup\n\nchanged the algorithm: large input is not special cased\n(when exp(-x) is small compared to exp(x))\nand the threshold values are reevaluated\n(fdlibm code had a log(2)/2 cutoff for which i could not find\njustification, log(2) seems to be a better threshold and this\nwas verified empirically)\n\nthe new code is simpler, makes smaller binaries and should be\nfaster for common cases\n\nthe old comments were removed as they are no longer true for the\nnew algorithm and the fdlibm copyright was dropped as well\nbecause there is no common code or idea with the original anymore\nexcept for trivial ones.\n"},{"hash":"f143458223f90262a9c2d929f9e815a74e3aa139","date":"2012-12-16T18:49:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: sinh.c cleanup similar to the cosh one\n\ncomments are kept in the double version of the function\n"},{"hash":"e42a977fe5dbe48ba45072ab82886e6b5a694487","date":"2012-12-16T18:52:42.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: tanh.c cleanup similar to sinh, cosh\n\ncomments are kept in the double version of the function\n\ncompared to fdlibm/freebsd we partition the domain into one\nmore part and select different threshold points:\nnow the [log(5/3)/2,log(3)/2] and [log(3)/2,inf] domains\nshould have <1.5ulp error\n(so only the last bit may be wrong, assuming good exp, expm1)\n\n(note that log(3)/2 and log(5/3)/2 are the points where tanh\nchanges resolution: tanh(log(3)/2)=0.5, tanh(log(5/3)/2)=0.25)\n\nfor some x < log(5/3)/2 (~=0.2554) the error can be >1.5ulp\nbut it should be <2ulp\n(the freebsd code had some >2ulp errors in [0.255,1])\n\neven with the extra logic the new code produces smaller\nobject files\n"},{"hash":"d8a7619e371ff0f226200f6316abb46dd1192f3d","date":"2012-12-16T19:22:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: tgammal.c fixes\n\nthis is not a full rewrite just fixes to the special case logic:\n+-0 and non-integer x<INT_MIN inputs incorrectly raised invalid\nexception and for +-0 the return value was wrong\n\nso integer test and odd/even test for negative inputs are changed\nand a useless overflow test was removed\n"},{"hash":"c6383b7b10303457306932584fc23f24b5153a81","date":"2012-12-16T19:28:43.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use 0x1p-120f and 0x1p120f for tiny and huge values\n\npreviously 0x1p-1000 and 0x1p1000 was used for raising inexact\nexception like x+tiny (when x is big) or x+huge (when x is small)\n\nthe rational is that these float consts are large enough\n(0x1p-120 + 1 raises inexact even on ld128 which has 113 mant bits)\nand float consts maybe smaller or easier to load on some platforms\n(on i386 this reduced the object file size by 4bytes in some cases)\n"},{"hash":"e9e2b66e687bc0b4d07305a2b288ed8ff4ae5b4b","date":"2012-12-19T03:05:30.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: new type cast logic in tgmath.h\n\n* return type logic is simplified a bit and fixed (see below)\n* return type of conj and cproj were wrong on int arguments\n* added comments about the pending issues\n(usually we don't have comments in public headers but this is\nnot the biggest issue with tgmath.h)\n\ncasting the result to the right type cannot be done in c99\n(c11 _Generic can solve this but that is not widely supported),\nso the typeof extension of gcc is used and that the ?: operator\nhas special semantics when one of the operands is a null\npointer constant\n\nthe standard is very strict about the definition of null\npointer constants so typeof with ?: is still not enough so\ncompiler specific workaround is used for now\n\non gcc '!1.0' is a null pointer constant so we can use the old\n__IS_FP logic (eventhough it's non-standard)\n\non clang (and on gcc as well) 'sizeof(void)-1' is a null\npointer constant so we can use\n !(sizeof(*(0?(int*)0:(void*)__IS_FP(x)))-1)\n(this is non-standard as well), the old logic is used by\ndefault and this new one on clang\n"},{"hash":"26cf9c3c6b8dd8d8c94867fefaac64bac7df02a4","date":"2012-12-19T04:08:13.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"link.h: expose glibc/svr4 dynlinker debugging glue\n\nthis is already implemented in the dynliker (see struct debug),\nbut was not exposed.\nwe need it to do so to make wine happy...\n"},{"hash":"3bb167b33818b3ac569f73a2ff82ff1ab3b04c4a","date":"2012-12-19T05:09:57.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"x86_64/bits/signal.h: fix typo in REG_CSGSFS\n"},{"hash":"36d7303878a8827b706317383fc218529f432143","date":"2012-12-19T06:32:38.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add inet_network (required for wine)\n"},{"hash":"3c4214db727ed6300b34be28a5428b7abd6598df","date":"2012-12-19T09:57:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: more correct tgmath.h type cast logic\n\n__IS_FP is a portable integer constant expression now\n(uses that unsigned long long is larger than float)\nthe result casting logic should work now on all compilers\nsupporting typeof\n"},{"hash":"3159e2fc816f5c56b54f86f38748ba1ff9e18f9f","date":"2012-12-19T18:02:22.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"socket.h: add SO_(SND/RCV)BUFFORCE to generic block\n"},{"hash":"5d5ab51862cbd010bdf52dc3b04b0967450bcd1a","date":"2012-12-19T18:07:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"merge a few fixes by sh4rm4\n"},{"hash":"d12f2ed282745db172cbb37b18717ad0b8e3c534","date":"2012-12-20T17:16:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up and fix logic for making mmap fail on invalid/unsupported offsets\n\nthe previous logic was assuming the kernel would give EINVAL when\npassed an invalid address, but instead with MAP_FIXED it was giving\nEPERM, as it considered this an attempt to map over kernel memory.\ninstead of trying to get the kernel to do the rigth thing, the new\ncode just handles the error in userspace.\n\nI have also cleaned up the code to use a single mask to check for\ninvalid low bits and unsupported high bits, so it's simpler and more\nclearly correct. the old code was actually wrong for sizeof(long)\nsmaller than sizeof(off_t) but not equal to 4; now it should be\ncorrect for all possibilities.\n\nfor 64-bit systems, the low-bits test is new and extraneous (the\nkernel should catch the error anyway when the mmap2 syscall is not\nused), but it's cheap anyway. if this is an issue, the OFF_MASK\ndefinition could be tweaked to omit the low bits when SYS_mmap2 is not\ndefined.\n"},{"hash":"e172c7b4df9a33e3f090e347eebd5426b94e6fee","date":"2012-12-26T02:51:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix reference to libc struct in static tls init code\n\nlibc is the macro, __libc is the internal symbol, but under some\nconfigurations on old/broken compilers, the symbol might not actually\nexist and the libc macro might instead use __libc_loc() to obtain\naccess to the object.\n"},{"hash":"8442358d9dfc78261a5eab1f2cb13861c6e13207","date":"2012-12-26T21:55:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add linux extension POLLRDHUP to poll.h\n\nthe POLL prefix is in the reserved namespace for poll.h, so no feature\ntest macro checks are needed.\n"},{"hash":"820fccdefe3774d2902f0191966a5c2848405faa","date":"2012-12-27T04:48:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix alignment logic in strlcpy\n"},{"hash":"761ebe065ca75a2dda9407a1a31da273412525c6","date":"2012-12-28T01:44:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"align EPOLL_* flags with fcntl O_* flag definitions, which vary by arch\n\nthe old definitions were wrong on some archs. actually, EPOLL_NONBLOCK\nprobably should not even be defined; it is not accepted by the kernel\nand it's not clear to me whether it has any use at all, even if it did\nwork. this issue should be revisited at some point, but I'm leaving it\nin place for now in case some applications reference it.\n"},{"hash":"d18a410bbf259e5fee9fb8b4b0335ec64991d5db","date":"2012-12-28T20:39:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"expose [v]asprintf under _BSD_SOURCE\n\nreported/requested by Strake; simplified from the provided patch\n"},{"hash":"697acde67e0da4d73b46445ed536fe9923d515c7","date":"2013-01-01T20:59:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: bessel cleanup (j0.c and j0f.c)\n\na common code path in j0 and y0 was factored out so the resulting\nobject code is smaller\n\nunsigned int arithmetics is used for bit manipulation\n\nthe logic of j0 got a bit simplified (x < 1 case was handled\nseparately with a bit higher precision than now, but there are large\nerrors in other domains anyway so that branch has been removed)\n\nsome threshold values were adjusted in j0f and y0f\n"},{"hash":"5bb6b24952e3f95ede42b60ac64a33ac34b8e272","date":"2013-01-01T21:11:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: bessel cleanup (j1.c and j1f.c)\n\na common code path in j1 and y1 was factored out so the resulting\nobject code is a bit smaller\n\nunsigned int arithmetics is used for bit manipulation\n\nj1(-inf) now returns 0 instead of -0\n\nan incorrect threshold in the common code of j1f and y1f got fixed\n(this caused spurious overflow and underflow exceptions)\n\nthe else branch in pone and pzero functions are fixed\n(so code analyzers dont warn about uninitialized values)\n"},{"hash":"5652d70054daf3c2c9b6d475fdf9d24a940e51aa","date":"2013-01-01T21:20:45.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: bessel cleanup (jn.c and jnf.c)\n\nboth jn and yn functions had integer overflow issues for large\nand small n\n\nto handle these issues nm1 (== |n|-1) is used instead of n and -n\nin the code and some loops are changed to make sure the iteration\ncounter does not overflow\n\n(another solution could be to use larger integer type or even double\nbut that has more size and runtime cost, on x87 loading int64_t or\neven uint32_t into an fpu register is more than two times slower than\nloading int32_t, and using double for n slows down iteration logic)\n\nyn(-1,0) now returns inf\n\nposix2008 specifies that on overflow and at +-0 all y0,y1,yn functions\nreturn -inf, this is not consistent with math when n<0 odd integer in yn\n(eg. when x->0, yn(-1,x)->inf, but historically yn(-1,0) seems to be\nspecial cased and returned -inf)\n\nsome threshold values in jnf and ynf were fixed that seems to be\nincorrectly copy-pasted from the double version\n"},{"hash":"5d893e50b063e67360dabb120b547ba52bfc5b87","date":"2013-01-02T01:19:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some new-ish IPPROTO constants that were missing\n"},{"hash":"2c1f8fd5da3306fd7c8a2267467e44eb61f12dd4","date":"2013-01-04T19:36:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"__assert_fail(): remove _Noreturn, to get proper stacktraces\n\nfor _Noreturn functions, gcc generates code that trashes the\nstack frame, and so it makes it impossible to inspect the causes\nof an assert error in gdb.\n\nabort() is not affected (i have not yet investigated why).\n"},{"hash":"e895ddc0cd560ffb217c741139721a836c5f4b7f","date":"2013-01-04T19:36:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"wait.h: add linux specific, thread-related waitpid() flags\n\nthese flags are needed in order to be able to handle lwp id's\nwhich the kernel returns after clone() calls for new threads\nvia ptrace(PTRACE_GETEVENTMSG).\n\nfortunately, they're the same for all archs and in the reserved\nnamespace.\n"},{"hash":"87781ac64ce5fcd68fb2cf32a3b4305a807e6367","date":"2013-01-04T19:36:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"time.h: add BSD aliases for otherwise internal struct tm members\n"},{"hash":"2ba3f44db51a816d3f89ca64d8943a3bee03fa5f","date":"2013-01-04T19:36:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add legacy header values.h\n\nsome programs (procps, babl) expect it, and it doesn't seem to\ncause any harm to just add it.\nit's small and straightforward.\n\nsince math.h also defines MAXFLOAT, we undef it in both places,\nbefore defining it.\n"},{"hash":"d84923d89e4fe46877334cbaa5e4549f2c4cb8a6","date":"2013-01-04T19:36:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"setjmp.h: add struct tag for sigjmp_buf (GCC C++ compatibility)\n\nthe anonymous struct typedef with array notation breaks with\nGCC in C++ mode:\n\nerror: non-local function 'static<anonymous struct>\n(& boost::signal_handler::jump_buffer())[1]' uses anonymous type\n\nthis is a known GCC issue, as search results for that error msg\nsuggest.\n\nsince this is hard to work around in the calling C++ code, a\nfix in musl is preferable.\n"},{"hash":"121e3a38a1d0b324696fc1671029e4b815ea7fa4","date":"2013-01-07T22:54:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: erf and erfc cleanup\n\ncommon part of erf and erfc was put in a separate function which\nsaved some space and the new code is using unsigned arithmetics\n\nerfcf had a bug: for some inputs in [7.95,8] the result had\nmore than 60ulp error: in expf(-z*z - 0.5625f) the argument\nmust be exact but not enough lowbits of z were zeroed,\n-SET_FLOAT_WORD(z, ix&0xfffff000);\n+SET_FLOAT_WORD(z, ix&0xffffe000);\nfixed the issue\n"},{"hash":"6468fc9e37fd7a12c1406c03aa7c6b5e869d799b","date":"2013-01-10T19:05:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"check for invalid handles in dlsym/dlclose\n\nthis is wasteful and useless from a standpoint of sane programs, but\nit is required by the standard, and the current requirements were\nupheld with the closure of Austin Group issue #639:\nhttp://austingroupbugs.net/view.php?id=639\n"},{"hash":"2dec29741b7d7024da8f4f1e03d309510834b28d","date":"2013-01-10T22:57:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix another case of cloexec/nonblock flags not matching arch values\n"},{"hash":"f13a47886063675d1e68b581240557fef6a3169c","date":"2013-01-12T18:42:38.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing protocol families to sys/socket.h\n\nmissing protocol families based on current linux headers:\nPF_RDS, PF_LLC, PF_CAN, PF_TIPC, PF_NFC\n"},{"hash":"119645b6bb6578cc28718ab427e4b23860d67161","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing multicast socket options to netinet/in.h\n\nbased on linux headers add the missing MCAST_* options\nunder _GNU_SOURCE as they are not in the reserved namespace\n(this api was originally specified by RFC 3678)\n"},{"hash":"20103616635a14441c5e04477e7913f6f9095735","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing ptrace requests and options to sys/ptrace.h\n"},{"hash":"056c8b1ab582a7e4df2aa1a0d9b300b0c99c3f23","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing EHWPOISON to bits/errno.h\n\nit was already defined for mips, but was missing from other archs\n"},{"hash":"73bb048951cc7e6ccd493702834d5c59b219e9be","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing F_GETOWNER_UIDS flag to bits/fcntl.h\n"},{"hash":"bc1a8d2ae3837a7303f14d381a4c37218f0c8fcb","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing EXTPROC flag to bits/termios.h\n\nmips and powerpc already had this termios flag defined\n"},{"hash":"000806cde6416f51f783d2dc487d49b47d297e4e","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing mmap options and madvices to bits/mman.h based on linux headers\n"},{"hash":"c7351ffe9b9bbc6297ffad252ab1f6e39db87d73","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add RB_SW_SUSPEND and RB_KEXEC to sys/reboot.h\n\nusing the glibc names for the magic constants of the linux reboot syscall\n"},{"hash":"ada88f6178db186305d6c8f2fe1420d71490a798","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add EPOLLWAKEUP flag to sys/epoll.h\n"},{"hash":"48854dffdb66191e7e54c0ea94bd1bd330905d7d","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add IN_EXCL_UNLINK to sys/inotify.h\n"},{"hash":"645c6d99a58e0e5ab16f58e7498f2f4412a831da","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add mount flags to sys/mount.h\n\nadded various MS_*, MNT_*, UMOUNT_* flags following the linux\nheaders, with one exception: MS_NOUSER is defined as (1U<<31)\ninstead of (1<<31) which invokes undefined behaviour\n\nthe S_* flags were removed following glibc\n"},{"hash":"d650631dad1691ad778b2d7afd77ee77d8546d9a","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SWAP_FLAG_DISCARD to sys/swap.h\n"},{"hash":"200f96c6a04cb1b3af702968b86c363c6a73a50b","date":"2013-01-12T18:42:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add MOD_TAI to sys/timex.h and update STA_RONLY\n"},{"hash":"a753f7fe7a7b31acdf2beddeca23ccdbd38f0a2e","date":"2013-01-13T22:15:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix lio_listio return value in LIO_WAIT mode\n"},{"hash":"30779ee1aa7601eb4bd7409809a8a4f06d2a4360","date":"2013-01-13T22:18:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"crypt: fix the prototype of md5_sum, sha256_sum and sha512_sum\n\nthe internal sha2 hash sum functions had incorrect array size\nin the prototype for the message digest argument, fixed by\nusing pointer so it is not misleading\n"},{"hash":"9724defdb72fdb2ae4e8a60e928d40d84fe04800","date":"2013-01-13T22:54:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"in crypt_des change unnecessary union keybuf into unsigned char[]\n\noriginal FreeSec code accessed keybuf as uint32* and uint8* as well\n(incorrectly), this got fixed with an union, but then it seems the\nuint32* access is no longer needed so the code can be simplified\n"},{"hash":"dd959163828bda8b03e699de95298fffb2329bb9","date":"2013-01-13T23:06:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: remove an unused local variable from regexec\n\npos_start local variable is not used in tre_tnfa_run_backtrack\n"},{"hash":"21f01e1bf951dc3c543bb53de4d001dd4194da84","date":"2013-01-14T23:04:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/math'\n"},{"hash":"f05f59b804f83ff8443ba8c549d6be3ba79e71a6","date":"2013-01-15T00:05:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove unused \"params\" related code from regex\n\nsome structs and functions had reference to the params\nfeature of tre that is not used by the code anymore\n"},{"hash":"cdc5c74c6abdb47453f2f7a170ed88b88698dee7","date":"2013-01-16T16:47:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug in dladdr that prevented resolving addresses in the PLT\n"},{"hash":"4d98280388a21db6913911ff647b2e56338d46cf","date":"2013-01-16T16:49:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix warning building dynlink.c stub for static libc\n\nstruct dso was not defined in this case, and it's not needed in the\ncode that was using it anyway; void pointers work just as well.\n"},{"hash":"41d7c77d6a2e74294807d35062e4cd1d48ab72d3","date":"2013-01-19T01:35:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use a common definition of NULL as 0L for C and C++\n\nthe historical mess of having different definitions for C and C++\ncomes from the historical C definition as (void *)0 and the fact that\n(void *)0 can't be used in C++ because it does not convert to other\npointer types implicitly. however, using plain 0 in C++ exposed bugs\nin C++ programs that call variadic functions with NULL as an argument\nand (wrongly; this is UB) expect it to arrive as a null pointer. on\n64-bit machines, the high bits end up containing junk. glibc dodges\nthe issue by using a GCC extension __null to define NULL; this is\nobservably non-conforming because a conforming application could\nobserve the definition of NULL via stringizing and see that it is\nneither an integer constant expression with value zero nor such an\nexpression cast to void.\n\nswitching to 0L eliminates the issue and provides compatibility with\nbroken applications, since on all musl targets, long and pointers have\nthe same size, representation, and argument-passing convention. we\ncould maintain separate C and C++ definitions of NULL (i.e. just use\n0L on C++ and use (void *)0 on C) but after careful analysis, it seems\nextremely difficult for a C program to even determine whether NULL has\ninteger or pointer type, much less depend in subtle, unintentional\nways, on whether it does. C89 seems to have no way to make the\ndistinction. on C99, the fact that (int)(void *)0 is not an integer\nconstant expression, along with subtle VLA/sizeof semantics, can be\nused to make the distinction, but many compilers are non-conforming\nand give the wrong result to this test anyway. on C11, _Generic can\ntrivially make the distinction, but it seems unlikely that code\ntargetting C11 would be so backwards in caring which definition of\nNULL an implementation uses.\n\nas such, the simplest path of using the same definition for NULL in\nboth C and C++ was chosen. the #undef directive was also removed so\nthat the compiler can catch and give a warning or error on\nredefinition if buggy programs have defined their own versions of\nNULL prior to inclusion of standard headers.\n"},{"hash":"637dd2d383cc1f63bf02a732f03786857b22c7bd","date":"2013-01-24T01:21:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in dlsym: rejection of special RTLD_* handles as invalid\n"},{"hash":"4d07e5521ea811278f00f434fe2b8345ea1d8832","date":"2013-01-24T03:07:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for RTLD_NOLOAD to dlopen\n\nbased on patch by Pierre Carrier <pierre@gcarrier.fr> that just added\nthe flag constant, but with minimal additional code so that it\nactually works as documented. this is a nonstandard option but some\nmajor software (reportedly, Firefox) uses it and it was easy to add\nanyway.\n"},{"hash":"55ddbc3e5d70f03bc52aece95fffb6abad47dbf4","date":"2013-01-24T03:18:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add RTLD_NODELETE flag for dlopen\n\nthis is a trivial no-op, because dlclose never deletes libraries. thus\nwe might as well have it in the header in case some application wants\nit, since we're already providing it anyway.\n"},{"hash":"d5c164d5ff74f41976f2f983b14ce606fa396221","date":"2013-01-26T16:40:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix tm_to_time logic for number of days in november\n\nreport/patch by Hiltjo Posthuma <hiltjo@codemadness.org>\n"},{"hash":"725c55528dff9eefbc88a943749f3bc89bcb433f","date":"2013-01-31T05:49:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"SOL_TCP is nonstandard and not in the reserved namespace\n\nalternatively, we could define it in sys/socket.h since SO* is\nreserved there, and tcp.h includes sys/socket.h in extensions mode.\n\nnote that SOL_TCP is simply wrong and it's only here for compatibility\nwith broken applications. the correct argument to pass for setting TCP\nsocket options is IPPROTO_TCP, which of course has the same value as\nSOL_TCP but works everywhere.\n"},{"hash":"ae4b0b96d63fe3cbd70008350f998570c9e91f7f","date":"2013-02-01T06:10:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert regex \"cleanup\" that seems unjustified and may break backtracking\n\nit's not clear to me at the moment whether the code that was removed\n(and which is now being re-added) is needed, but it's far from being a\nno-op, and i don't want to risk breaking regex in this release.\n"},{"hash":"a57ac9bf64ba202bd94d1b81bddd93b850c7b9d6","date":"2013-02-01T06:49:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.9\n"},{"hash":"96fbcf7d80f469e39d1dd12533f8bb8d13b64fe5","date":"2013-02-01T20:57:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix up minor misplacement of restrict keyword in spawnattr sched stubs\n"},{"hash":"facc6acbfd20accea435d10fdd070b23877e40db","date":"2013-02-01T21:41:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace __wake function with macro that performs direct syscall\n\nthis should generate faster and smaller code, especially with inline\nsyscalls. the conditional with cnt is ugly, but thankfully cnt is\nalways a constant anyway so it gets evaluated at compile time. it may\nbe preferable to make separate __wake and __wakeall macros without a\ncount argument.\n\npriv flag is not used yet; private futex support still needs to be\ndone at some point in the future.\n"},{"hash":"c50925071cce9c6342597f5671e30d2970c6ff4a","date":"2013-02-02T02:19:25.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"make some arrays const\n\nthis way they'll go into .rodata, decreasing memory pressure.\n"},{"hash":"d5142642b8e6c45449158efdb8f8e87af4dafde8","date":"2013-02-02T03:10:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"pthread stack treatment overhaul for application-provided stacks, etc.\n\nthe main goal of these changes is to address the case where an\napplication provides a stack of size N, but TLS has size M that's a\nsignificant portion of the size N (or even larger than N), thus giving\nthe application less stack space than it expected or no stack at all!\n\nthe new strategy pthread_create now uses is to only put TLS on the\napplication-provided stack if TLS is smaller than 1/8 of the stack\nsize or 2k, whichever is smaller. this ensures that the application\nalways has \"close enough\" to what it requested, and the threshold is\nchosen heuristically to make sure \"sane\" amounts of TLS still end up\nin the application-provided stack.\n\nif TLS does not fit the above criteria, pthread_create uses mmap to\nobtain space for TLS, but still uses the application-provided stack\nfor actual call frame stack. this is to avoid wasting memory, and for\nthe sake of supporting ugly hacks like garbage collection based on\nassumptions that the implementation will use the provided stack range.\n\nin order for the above heuristics to ever succeed, the amount of TLS\nspace wasted on POSIX TSD (pthread_key_create based) needed to be\nreduced. otherwise, these changes would preclude any use of\npthread_create without mmap, which would have serious memory usage and\nperformance costs for applications trying to create huge numbers of\nthreads using pre-allocated stack space. the new value of\nPTHREAD_KEYS_MAX is the minimum allowed by POSIX, 128. this should\nstill be plenty more than real-world applications need, especially now\nthat C11/gcc-style TLS is now supported in musl, and most apps and\nlibraries choose to use that instead of POSIX TSD when available.\n\nat the same time, PTHREAD_STACK_MIN has been decreased. it was\noriginally set to PAGE_SIZE back when there was no support for TLS or\napplication-provided stacks, and requests smaller than a whole page\ndid not make sense. now, there are two good reasons to support\nrequests smaller than a page: (1) applications could provide\npre-allocated stacks smaller than a page, and (2) with smaller stack\nsizes, stack+TLS+TSD can all fit in one page, making it possible for\napplications which need huge numbers of threads with minimal stack\nneeds to allocate exactly one page per thread. the new value of\nPTHREAD_STACK_MIN, 2k, is aligned with the minimum size for\nsigaltstack.\n"},{"hash":"077549e0d468ff47fdf3e00bb3cfdb929ac8324f","date":"2013-02-02T03:23:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"if pthread_create fails, it must not attempt mmap if there is no mapping\n\nthis bug was introduced when support for application-provided stacks\nwas originally added.\n"},{"hash":"72768ea99e67162b7b42d9cd8917cf9a2c00f1f1","date":"2013-02-02T03:25:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stale locks left behind when pthread_create fails\n\nthis bug seems to have been around a long time.\n"},{"hash":"74025c80ce1eb4cda110ab2e3ac11718d3c6f2ff","date":"2013-02-02T05:59:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized map_len being used in munmap failure paths in load_library\n\nthis bug seems to have been introduced when the map_library signatures\nwas changed to return the mapping in a temp dso structure instead of\ninto separate variables.\n"},{"hash":"70b584bc9467ce939c73898212c17be1ab7e39af","date":"2013-02-02T06:31:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error returns in gethostby*_r functions\n\nthey're supposed to return an error code rather than using errno.\n"},{"hash":"b0302863a36ef6ad24bd25e3ef4df74b9a56980d","date":"2013-02-02T06:32:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix memory leak due to double call to getaddrinfo in gethostbyname*\n"},{"hash":"c0193550a022cb75d1cddb0254e98029b3b56420","date":"2013-02-02T06:59:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix blank ai_canonname from getaddrinfo for non-CNAMEs\n"},{"hash":"a47ad3ebce8e20a5d72535996a0d0d5458241213","date":"2013-02-02T07:07:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamically allocate storage for gethostby* buffers\n\nthis change shaves ~1k off libc.so bss size, and also avoids hard\nerrors in the case where the static buffer was not large enough to\nhold the result.\n\nthis whole framework is really ugly and might should be replaced or at\nleast heavily overhauled when some changes/factorizations are made to\ngetaddrinfo internals in the future.\n"},{"hash":"d432b2c057fc64256645422382c2f7e32c45b3cc","date":"2013-02-03T06:26:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression that made shared libs crash on arm\n"},{"hash":"89d3df6e5420878e35a93a481105017a94a02852","date":"2013-02-03T21:09:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"streamline old-kernel fallback path of pipe2 to use syscalls directly\n\nalso, don't waste code/time on F_GETFL since pipes always have blank\nflags initially (at least on old kernels, which are all this fallback\ncode matters for).\n"},{"hash":"fb6b159d9ec7cf1e037daa974eeeacf3c8b3b3f1","date":"2013-02-03T21:42:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul posix_spawn to use CLONE_VM instead of vfork\n\nthe proposed change was described in detail in detail previously on\nthe mailing list. in short, vfork is unsafe because:\n\n1. the compiler could make optimizations that cause the child to\nclobber the parent's local vars.\n\n2. strace is buggy and allows the vforking parent to run before the\nchild execs when run under strace.\n\nthe new design uses a close-on-exec pipe instead of vfork semantics to\nsynchronize the parent and child so that the parent does not return\nbefore the child has finished using its arguments (and now, also its\nstack). this also allows reporting exec failures to the caller instead\nof giving the caller a child that mysteriously exits with status 127\non exec error.\n\nbasic testing has been performed on both the success and failure code\npaths. further testing should be done.\n"},{"hash":"4862864fc1a6d162b297db09c216b136db83d7dd","date":"2013-02-03T22:09:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix unsigned comparison bug in posix_spawn\n\nread should never return anything but 0 or sizeof ec here, but if it\ndoes, we want to treat any other return as \"success\". then the caller\nwill get back the pid and is responsible for waiting on it when it\nimmediately exits.\n"},{"hash":"a8799356d560d3b02a19a4bda4a638a4a9a80856","date":"2013-02-03T23:21:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"base system() on posix_spawn\n\nthis avoids duplicating the fragile logic for executing an external\nprogram without fork.\n"},{"hash":"158f721adc851850f22f789ad672deb6b88d511d","date":"2013-02-06T01:40:22.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"Makefile: make it possible to build arch specific C files\n"},{"hash":"526900484ca5673630a5838e081db685c6856fe2","date":"2013-02-06T21:46:19.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"arm: add __aeabi_atexit()\n\narm eabi requires this symbol for static C++ dtors.\nusually it is provided by libstdc++, but when a C++ program\ndoesn't use the std lib (free-standing), the libc has to provide\nit.\nthis was encountered while building transmission, which\ndepends on such a C++ library (libutp).\n\nthis function is nearly identical to __cxa_atexit, but it has the\norder of argumens swapped for \"performance reasons\".\nsee page 25 of\n\n http://infocenter.arm.com/help/topic/com.arm.doc.ihi0043d/IHI0043D_rtabi.pdf\n\nthere are other aeabi specific C++ support functions missing, but\nit is not clear yet that GCC makes use of them so we omit them for\nthe moment.\n"},{"hash":"d75348ddda4e63c2a36c292a5b64b78d46e24422","date":"2013-02-07T08:05:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve error strings\n\nthis definitely has the potential to be a bikeshed topic, so some\njustification is in order. most of the changes made fit into one of\nthe following categories:\n1. alignment with text in posix, xsh 2.3\n2. eliminating overly-specific text for shared error codes\n3. making the message match more closely with the macro name\n4. removing extraneous words\n\nin particular, the EAGAIN/EWOULDBLOCK text is updated to match the\ndescription of EAGAIN (which covers both uses) rather than saying the\noperation would block, and ENOTSUP/EOPNOTSUPP is updated not to\nmention sockets.\n\nthe distinction between ENFILE/EMFILE has also been clarified; ENFILE\nis aligned with the posix text, and EMFILE, which lacks concise posix\ntext matching any historic message, is updated to emphasize that the\nexhausted resource is not open files/open file descriptions, but\nrather the integer 'address space' of file descriptors.\n\nsome messages may be further tweaked based on feedback.\n"},{"hash":"b9e08308f4d1fccc188408b223e6820194a5fadf","date":"2013-02-07T08:13:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in newly-added error message for EOWNERDEAD\n"},{"hash":"cac872957e8c9e3fc13904c1c55eee0253ec1382","date":"2013-02-17T18:21:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fgetgrent function\n\nbased on patch by Isaac Dunham, moved to its own file to avoid\nincreasing bss on static linked programs not using this nonstandard\nfunction but using the standard getgrent function, and vice versa.\n"},{"hash":"23ccb80fcb325bd89e40508a57ff4ccedea6926d","date":"2013-02-17T19:24:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consistently use the internal name __environ for environ\n\npatch by Jens Gustedt.\npreviously, the intended policy was to use __environ in code that must\nconform to the ISO C namespace requirements, and environ elsewhere.\nthis policy was not followed in practice anyway, making things\nconfusing. on top of that, Jens reported that certain combinations of\nlink-time optimization options were breaking with the inconsistent\nreferences; this seems to be a compiler or linker bug, but having it\ngo away is a nice side effect of the changes made here.\n"},{"hash":"f78cdbe8993d072bf60a65754544199016a1fe29","date":"2013-02-17T19:30:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unused #undef environ now that libc.h no longer #defines it\n"},{"hash":"2cc63358cdb0309ca996ffe56ccf402c2f2f16d5","date":"2013-02-21T03:43:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add mkostemp, mkstemps, and mkostemps functions and reorganize temp internals\n\nbased on patch contributed by Anthony G. Basile (blueness)\n\nsome issues remain with the filename generation algorithm and other\nsmall bugs, but this patch has been sitting around long enough that I\nfeel it's best to get it committed and then work out any remaining\nissues.\n"},{"hash":"3b00675bf51aef47705d8845de24dec8c6063078","date":"2013-02-21T03:56:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove leftover unused variable in mktemp after refactoring\n"},{"hash":"8d2f8064aa3d2cc7380c447dfbd8929543f36f51","date":"2013-02-21T03:58:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error cases in mkostemps core\n\n1. wrong return value and missing errno for negative suffix len\n2. failure to catch suffix len > strlen\n3. remove unwanted clearing of input string in invalid case\n"},{"hash":"8872e4e481d8702e68641605bba279796646773d","date":"2013-02-21T04:01:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use memcmp instead of str[n]cmp for temp function XXXXXX checking\n"},{"hash":"caec662217fc13cda95dc88b20d5c7a75e483ca6","date":"2013-02-21T20:35:26.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add arpa/ftp.h\n"},{"hash":"8224bdbbedc60a5d637d95ddd344501f667f0294","date":"2013-02-21T20:35:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"scsci/sg.h: fix usage of undefined macro HZ\n\nthis macro is 100 on all archs, at least in userspace, according\nto kernel headers.\n"},{"hash":"330fd96213da324f9164081df9a5226790d7c4ec","date":"2013-02-22T04:19:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong return value from wmemmove on forward copies\n"},{"hash":"e864ddc36819814b3b9ed17620459d66add512d3","date":"2013-02-22T04:54:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace stub with working strcasestr\n"},{"hash":"d1eae83a593309842550988e9c56492fac9cdece","date":"2013-02-26T06:30:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"namespace conformance to latest standards in strings.h\n"},{"hash":"4853c1f7f7b5023aa6a409abc1e759f5f92c9c4e","date":"2013-02-26T06:36:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement non-stub strverscmp\n\npatch by Isaac Dunham.\n"},{"hash":"5afc74fbaa2371f30df0dc9fb7bc3afe6bd96137","date":"2013-02-26T06:42:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix integer type issue in strverscmp\n\nlenl-lenr is not a valid expression for a signed int return value from\nstrverscmp, since after implicit conversion from size_t to int this\ndifference could have the wrong sign or might even be zero. using the\ndifference for char values works since they're bounded well within the\nrange of differences representable by int, but it does not work for\nsize_t values.\n"},{"hash":"e201d82aac6241c28cf53b51444e954bb5ebe5df","date":"2013-02-26T06:46:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix cruft in utmp.h that was broken by changes in utmpx.h\n\npatch by Chris Spiegel.\n"},{"hash":"99727dad25c6fd852291beef5e0da0a8d2ec8208","date":"2013-02-26T13:54:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wrong float_t on x86_64\n\nx86_64 does not have excess precision, at all\n"},{"hash":"8c741783fc96d559cfe79301c924c217b2905c0c","date":"2013-03-04T22:05:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some obscure header type size/alignment issues\n"},{"hash":"da1442c9a8c58f8ad85a1bd96007f60bc372d157","date":"2013-03-05T00:22:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix types for wctype_t and wctrans_t\n\nwctype_t was incorrectly \"int\" rather than \"long\" on x86_64. not only\nis this an ABI incompatibility; it's also a major design flaw if we\never wanted wctype_t to be implemented as a pointer, which would be\nnecessary if locales support custom character classes, since int is\ntoo small to store a converted pointer. this commit fixes wctype_t to\nbe unsigned long on all archs, matching the LSB ABI; this change does\nnot matter for C code, but for C++ it affects mangling.\n\nthe same issue applied to wctrans_t. glibc/LSB defines this type as\nconst __int32_t *, but since no such definition is visible, I've just\nexpanded the definition, int, everywhere.\n\nit would be nice if these types (which don't vary by arch) could be in\nwctype.h, but the OB XSI requirement in POSIX that wchar.h expose some\ntypes and functions from wctype.h precludes doing so. glibc works\naround this with some hideous hacks, but trying to duplicate that\nwould go against the intent of musl's headers.\n"},{"hash":"f44076181d25dd2401d182c111330b4290a9535c","date":"2013-03-06T14:32:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing type error in grp.h from adding fgetgrent\n"},{"hash":"08514d0614c97f8c7055955073517844e1b1cf0b","date":"2013-03-07T04:57:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix epoll structure alignment on non-x86_64 archs\n\nthis fix is far from ideal and breaks the rule of not using\narch-specific #ifdefs, but for now we just need a solution to the\nexisting breakage.\n\nthe underlying problem is that the kernel folks made a very stupid\ndecision to make misalignment of this struct part of the kernel\nAPI/ABI for x86_64, in order to avoid writing a few extra lines of\ncode to handle both 32- and 64-bit userspace on 64-bit kernels. I had\njust added the packed attribute unconditionally thinking it was\nharmless on 32-bit archs, but non-x86 32-bit archs have 8-byte\nalignment on 64-bit types.\n"},{"hash":"dfdc337b3b276e6ea0e4786ede699f4d0d93dc40","date":"2013-03-10T03:34:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove soname from libc.so/ld-musl\n\nit serves no purpose (binaries linked against musl as -lc/libc.so\nautomatically get the right DT_NEEDED value of libc.so) and causes\nldconfig to misbehave (making a symlink to ld-musl named libc.so in\n/lib). ldconfig is not used on pure musl systems, but if ld-musl is\ninstalled on a system where it's not the primary libc, this will\npollute the system /lib with a symlink to musl named libc.so, which\nshould NOT exist and could cause problems linking native apps. also,\nthe existence of the soname caused spurious warnings from ldconfig\nwhen /lib and /usr/lib were the same physical directory.\n"},{"hash":"427c0ca79e8ab429681310308a0a87cd5fdd1837","date":"2013-03-23T22:59:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix multiple bugs in syslog interfaces\n\n1. as reported by William Haddon, the value returned by snprintf was\nwrongly used as a length passed to sendto, despite it possibly\nexceeding the buffer length. this could lead to invalid reads and\nleaking additional data to syslog.\n\n2. openlog was storing a pointer to the ident string passed by the\ncaller, rather than copying it. this bug is shared with (and even\ndocumented in) other implementations like glibc, but such behavior\ndoes not seem to meet the requirements of the standard.\n\n3. extremely long ident provided to openlog, or corrupt ident due to\nthe above issue, could possibly have resulted in buffer overflows.\ndespite having the potential for smashing the stack, i believe the\nimpact is low since ident points to a short string literal in typical\napplication usage (and per the above bug, other usages will break\nhorribly on other implementations).\n\n4. when used with LOG_NDELAY, openlog was not connecting the\nnewly-opened socket; sendto was being used instead. this defeated the\nmain purpose of LOG_NDELAY: preparing for chroot.\n\n5. the default facility was not being used at all, so all messages\nwithout an explicit facility passed to syslog were getting logged at\nthe kernel facility.\n\n6. setlogmask was not thread-safe; no synchronization was performed\nupdating the mask. the fix uses atomics rather than locking to avoid\nintroducing a lock in the fast path for messages whose priority is not\nin the mask.\n\n7. in some code paths, the syslog lock was being unlocked twice; this\ncould result in releasing a lock that was actually held by a different\nthread.\n\nsome additional enhancements to syslog such as a default identifier\nbased on argv[0] or similar may still be desired; at this time, only\nthe above-listed bugs have been fixed.\n"},{"hash":"2d0f495e7bbcc1b17bf118b939e347e2d771fa2f","date":"2013-03-24T00:02:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add deprecated SIGIOT alias for SIGABRT\n\nreportedly some programs (e.g. showkeys in the kbd package) use it.\n"},{"hash":"7914ce9204e907ae770fcbe59975010520fcac58","date":"2013-03-25T02:40:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cruft from pre-posix_spawn version of the system function\n"},{"hash":"9cb6e6ea120cfaf1df9016883012d22fb57d43e1","date":"2013-03-25T02:41:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rewrite popen to use posix_spawn instead of fragile vfork hacks\n"},{"hash":"ae7399bfd86c59b8717bb81c70b2acb20acd0f9a","date":"2013-03-25T15:34:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in pipe2, use pipe() rather than __syscall(SYS_pipe, ...) for fallback\n\nSYS_pipe is not usable directly in general, since mips has a very\nbroken calling convention for the pipe syscall. instead, just call the\nfunction, so that the mips-specific ugliness is isolated in\nmips/pipe.s and not copied elsewhere.\n"},{"hash":"00f1521fdd3f57c7a190550426537089fc24b9da","date":"2013-03-27T02:54:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide emulation of fcntl F_DUPFD_CLOEXEC on old kernels\n\nI'm not entirely happy with the amount of ugliness here, but since\nF_DUPFD_CLOEXEC is used elsewhere in code that's expected to work on\nold kernels (popen), it seems necessary. reportedly even some modern\nkernels went back and broke F_DUPFD_CLOEXEC (making it behave like\nplain F_DUPFD), so it might be necessary to add some additional fixup\ncode later to deal with that issue too.\n"},{"hash":"ccc7b4c3a17ade90de71e1e0f44deebbffd646e6","date":"2013-03-27T03:07:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove __SYSCALL_SSLEN arch macro in favor of using public _NSIG\n\nthe issue at hand is that many syscalls require as an argument the\nkernel-ABI size of sigset_t, intended to allow the kernel to switch to\na larger sigset_t in the future. previously, each arch was defining\nthis size in syscall_arch.h, which was redundant with the definition\nof _NSIG in bits/signal.h. as it's used in some not-quite-portable\napplication code as well, _NSIG is much more likely to be recognized\nand understood immediately by someone reading the code, and it's also\nshorter and less cluttered.\n\nnote that _NSIG is actually 65/129, not 64/128, but the division takes\ncare of throwing away the off-by-one part.\n"},{"hash":"14a835b3868e4dccece15acbff6d5da6c0e1ff17","date":"2013-04-01T03:25:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement pthread_getattr_np\n\nthis function is mainly (purely?) for obtaining stack address\ninformation, but we also provide the detach state since it's easy to\ndo anyway.\n"},{"hash":"0b2764d054c169c9abc8be8979ac3ea7a191c49e","date":"2013-04-01T03:27:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide prototype for pthread_getattr_np\n"},{"hash":"201e6603c3675e61eae5f548536ecd45a589f465","date":"2013-04-01T15:20:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in setpriority syscall wrapper\n"},{"hash":"2e762105b7b99e258d74e3585fe36161729a2b56","date":"2013-04-01T16:24:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new linux tcp socket option flags to netinet/tcp.h\n"},{"hash":"d4c04d1360ca0f9dfe1b8b1454f0bd1688cdc066","date":"2013-04-01T16:24:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add ADJ_SETOFFSET timex mode bit (new in linux v2.6.39)\n"},{"hash":"46f45f73342528fe344893a4db53656c6875bd77","date":"2013-04-01T16:24:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"adding ethernet protocol ids to if_ether.h following linux\n"},{"hash":"e82bd04cf77629976eb24f31222f877f17a6000b","date":"2013-04-01T16:24:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new socket options to sys/socket.h following linux\n"},{"hash":"ca2300d9ac006c3940e4ff1ce9c64ba64b9582b5","date":"2013-04-01T17:54:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add the new SO_REUSEPORT socket option to mips and powerpc\n\nSO_REUSEPORT implementation was merged in the linux kernel commit\nc617f398edd4db2b8567a28e899a88f8f574798d 2013-01-23\n"},{"hash":"8d3ee0575423edd203ee9e9f6b8ef1974ed5b1d9","date":"2013-04-01T18:02:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add syscall numbers for the new kcmp and finit_module syscalls\nand remove syscall todos from microblaze\n"},{"hash":"a6752eb940b154c9884c7522ef67ffc1a76770b5","date":"2013-04-02T02:43:53.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"__time_to_tm: initialize tm_zone and tm_gmtoff\n"},{"hash":"da144eec54b4618d80eeadb80272b6da9c60650b","date":"2013-04-02T02:43:53.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"make tm_zone etc visible under _GNU_SOURCE\n"},{"hash":"82aad3a31726feb29981846886a17fceee605287","date":"2013-04-02T02:43:53.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add arpa/nameser_compat.h\n\nthe contents of this header are already in arpa/nameser.h\n"},{"hash":"47cf4919fc834a917185ace26dfd1c2ab760676d","date":"2013-04-02T02:58:14.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"re-add useconds_t\n\nthis type was removed back in 5243e5f1606a9c6fcf01414e ,\nbecause it was removed from the XSI specs.\nhowever some apps use it.\nsince it's in the POSIX reserved namespace, we can expose it\nunconditionally.\n"},{"hash":"50d9661d9b231f503b21e9d8787d1411b864d58a","date":"2013-04-04T18:42:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul mbsrtowcs\n\nthese changes fix at least two bugs:\n- misaligned access to the input as uint32_t for vectorized ASCII test\n- incorrect src pointer after stopping on EILSEQ\n\nin addition, the text of the standard makes it unclear whether the\nmbstate_t object is to be modified when the destination pointer is\nnull; previously it was cleared either way; now, it's only cleared\nwhen the destination is non-null. this change may need revisiting, but\nit should not affect most applications, since calling mbsrtowcs with\nnon-zero state can only happen when the head of the string was already\nprocessed with mbrtowc.\n\nfinally, these changes shave about 20% size off the function and seem\nto improve performance by 1-5%.\n"},{"hash":"40b2b5fa94d3ae27293f4d572bdcf1c3a5ef590f","date":"2013-04-04T18:48:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect range checks in wcsrtombs\n\nnegative values of wchar_t need to be treated in the non-ASCII case so\nthat they can properly generate EILSEQ rather than getting truncated\nto 8bit values and stored in the output.\n"},{"hash":"f62b12d051d68aae8bf3c0891f8f809c1fd75e4e","date":"2013-04-04T18:51:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor optimization to mbstowcs\n\nthere is no need to zero-fill an mbstate_t object in the caller;\nmbsrtowcs will automatically treat a null pointer as the initial\nstate.\n"},{"hash":"b5a527f9ff47b0f4b32c606e385a0c27d861a475","date":"2013-04-04T18:53:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup mbstowcs wrapper\n\nremove unneeded headers. this file is utterly trivial now and there's\nno sense in having a comment to state that it's in the public domain.\n"},{"hash":"771c6cead0684487a0699750ff740e3d3894200a","date":"2013-04-04T18:55:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup wcstombs\n\nremove redundant headers and comments; this file is completely trivial\nnow. also, avoid temp var.\n"},{"hash":"ddfb267b0e72499f6022981733264a063ec881f0","date":"2013-04-04T23:23:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add put*ent functions for passwd/group files and similar for shadow\n\nsince shadow does not yet support enumeration (getspent), the\ncorresponding FILE-based get and put versions are also subbed out for\nnow. this is partly out of laziness and partly because it's not clear\nhow they should work in the presence of TCB shadow files. the stubs\nshould make it possible to compile some software that expects them to\nexist, but such software still may not work properly.\n"},{"hash":"201995f382cc698ae19289623cc06a70048ffe7b","date":"2013-04-04T23:50:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate gcc dependency for testing char signedness in limits.h\n"},{"hash":"c7af2710007865861e789b29e803f0f55deba93f","date":"2013-04-04T23:57:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate bits/wchar.h\n\nthe preprocessor can reliably determine the signedness of wchar_t.\nL'\\0' is used for 0 in the expressions so that, if the underlying type\nof wchar_t is long rather than int, the promoted type of the\nexpression will match the type of wchar_t.\n"},{"hash":"f77bab5933071c46edc3da22b8c344533dd5fca3","date":"2013-04-05T00:09:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix type issues in stdint.h so underlying types of 64-bit types match ABI\n"},{"hash":"baec93cb5819058e36d44a427db708260f320bd1","date":"2013-04-05T00:32:51.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add arpa/tftp.h\n"},{"hash":"b6f99412019219eda032823030846bc4c90b7cbc","date":"2013-04-05T02:36:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement dn_skipname (legacy resolver function)\n"},{"hash":"f4ded939bf90cd6baed6b4e723e54a62c9bdb6b9","date":"2013-04-05T02:36:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prototype for dn_skipname\n"},{"hash":"5ffe4940507110f6d0220496cdfc411b8b89aa3d","date":"2013-04-05T17:26:23.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"net/if.h: add some missing IFF_ constants\n"},{"hash":"202db37a6f2cc43c06467473d9970677f6997ce3","date":"2013-04-05T17:36:51.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add getifaddrs\n\nsupports ipv4 and ipv6, but not the \"extended\" usage where\nusage statistics and other info are assigned to ifa_data members\nof duplicate entries with AF_PACKET family.\n"},{"hash":"b3792c8891f4ce4db52129a4f851375a7ab1b2d8","date":"2013-04-05T17:59:40.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"include/ifaddrs.h: add prototypes for get/freeifaddrs\n"},{"hash":"c82f53f67cb256e0096c8649235028b6613b9a22","date":"2013-04-05T20:06:35.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"getifaddrs: less malloc\n"},{"hash":"69a1983872c819b8c63b9cebfa07fe7d1726e91f","date":"2013-04-05T20:08:03.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"getifaddrs: one less indent level\n"},{"hash":"4af3ea789ac466493634a32235c77bb11f078fe6","date":"2013-04-05T20:47:30.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"getifaddrs: use if_nameindex to enumerate interfaces\n"},{"hash":"338cc31c4bb80fb5f703b3c4a2fb4210138592ba","date":"2013-04-05T22:04:52.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"getifaddrs: remove unused label\n"},{"hash":"ced64995c26a28ae40c5ae356b6c6a87a3bdf5ce","date":"2013-04-06T05:15:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix type error in pthread_create, introduced with pthread_getattr_np\n"},{"hash":"14f0272ea1775c35801b2bc17e67ef8bb7e9742d","date":"2013-04-06T06:20:28.000Z","author":{"name":"Isaac Dunham","email":"idunham@lavabit.com"},"message":"Add ABI compatability aliases.\n\nGNU used several extensions that were incompatible with C99 and POSIX,\nso they used alternate names for the standard functions.\n\nThe result is that we need these to run standards-conformant programs\nthat were linked with glibc.\n"},{"hash":"5c5ac810c31a77dd17b95bb93e13487a3c1c1433","date":"2013-04-06T21:15:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix argument omission in ABI-compat weak_alias for fscanf\n"},{"hash":"b4ea63856a6af3d1bcc2db12537785371ac2024c","date":"2013-04-06T21:50:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for program_invocation[_short]_name\n\nthis is a bit ugly, and the motivation for supporting it is\nquestionable. however the main factors were:\n1. it will be useful to have this for certain internal purposes\nanyway -- things like syslog.\n2. applications can just save argv[0] in main, but it's hard to fix\nnon-portable library code that's depending on being able to get the\ninvocation name without the main application's help.\n"},{"hash":"cc11b422864f0eba97f8bc170e2c8275397bdf41","date":"2013-04-06T22:32:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"silence nonsensical warnings in timer_create\n"},{"hash":"bcd9302508e5b89cfdcf2a2acebdf05d88d7479e","date":"2013-04-08T03:19:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signalfd not to ignore flags\n\nalso include fallback code for broken kernels that don't support the\nflags. as usual, the fallback has a race condition that can leak file\ndescriptors.\n"},{"hash":"8f06ab0eb9c22998a47803938588bb0b13092a0b","date":"2013-04-09T02:29:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix out-of-bounds access in UTF-8 decoding\n\nSA and SB are used as the lowest and highest valid starter bytes, but\nthe value of SB was one-past the last valid starter. this caused\naccess past the end of the state table when the illegal byte '\\xf5'\nwas encountered in a starter position. the error did not show up in\nfull-character decoding tests, since the bogus state read from just\npast the table was unlikely to admit any continuation bytes as valid,\nbut would have shown up had we tested feeding '\\xf5' to the\nbyte-at-a-time decoding in mbrtowc: it would cause the funtion to\nwrongly return -2 rather than -1.\n\nI may eventually go back and remove all references to SA and SB,\nreplacing them with the values; this would make the code more\ntransparent, I think. the original motivation for using macros was to\nallow misguided users of the code to redefine them for the purpose of\nenlarging the set of accepted sequences past the end of Unicode...\n"},{"hash":"a49e038bab7b3927b6a9c7d0c52f9e1a9cb82629","date":"2013-04-09T02:49:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize mbrtowc\n\nthis simple change, in my measurements, makes about a 7% performance\nimprovement. at first glance this change would seem like a\ncompiler-specific hack, since the modified code is not even used.\nhowever, I suspect the reason is that I'm eliminating a second path\ninto the main body of the code, allowing the compiler more flexibility\nto optimize the normal (hot) path into the main body. so even if it\nweren't for the measurable (and quite notable) difference in\nperformance, I think the change makes sense.\n"},{"hash":"ea34b1b90ca5ba3b87725662f6a1ff03b7a88a1f","date":"2013-04-09T03:01:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement mbtowc directly, not as a wrapper for mbrtowc\n\nthe interface contract for mbtowc admits a much faster implementation\nthan mbrtowc can achieve; wrapping mbrtowc with an extra call frame\nonly made the situation worse.\n\nsince the regex implementation uses mbtowc already, this change should\nimprove regex performance too. it may be possible to improve\nperformance in other places internally by switching from mbrtowc to\nmbtowc.\n"},{"hash":"23ab8c255543a7e0876c7e1858ef0d4bbd562729","date":"2013-04-09T03:09:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mbrtowc: do not leave mbstate_t in permanent-fail state after EILSEQ\n\nthe standard is clear that the old behavior is conforming: \"In this\ncase, [EILSEQ] shall be stored in errno and the conversion state is\nundefined.\"\n\nhowever, the specification of mbrtowc has one peculiarity when the\nsource argument is a null pointer: in this case, it's required to\nbehave as mbrtowc(NULL, \"\", 1, ps). no motivation is provided for this\nrequirement, but the natural one that comes to mind is that the intent\nis to reset the mbstate_t object. for stateful encodings, such\nbehavior is actually specified: \"If the corresponding wide character\nis the null wide character, the resulting state described shall be the\ninitial conversion state.\" but in the case of UTF-8 where the\nmbstate_t object contains a partially-decoded character rather than a\nshift state, a subsequent '\\0' byte indicates that the previous\npartial character is incomplete and thus an illegal sequence.\n\nnaturally, applications using their own mbstate_t object should clear\nit themselves after an error, but the standard presently provides no\nway to clear the builtin mbstate_t object used when the ps argument is\na null pointer. I suspect this issue may be addressed in the future by\nspecifying that a null source argument resets the state, as this seems\nto have been the intent all along.\n\nfor what it's worth, this change also slightly reduces code size.\n"},{"hash":"9947ed5c2008ca7ec8461dbc0db8a2aacddcea6b","date":"2013-04-09T14:52:13.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"getifaddrs: implement proper ipv6 netmasks\n"},{"hash":"4ba3ebdcfeb7b5aa2dd5079e939514a634395124","date":"2013-04-11T02:38:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make ifaddrs.h expose sys/socket.h\n\nthe getifaddrs interface seems to have been invented by glibc, and\nthey expose socket.h, so for us not to do so is just gratuitous\nincompatibility with the interface we're mimicing.\n"},{"hash":"7bec92e793d4b8a349796848cf43c7329b0f2ed0","date":"2013-04-14T05:51:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.10\n"},{"hash":"8c203eae1e90f646a3c7c40d9700d55de2163df1","date":"2013-04-20T15:51:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker accept : or \\n as path separator\n\nthis allows /etc/ld-musl-$(ARCH).path to contain one path per line,\nwhich is much more convenient for users than the :-delimited format,\nwhich was a source of repeated and unnecessary confusion. for\nsimplicity, \\n is also accepted in environment variables, though it\nshould probably not be used there.\n\nat the same time, issues with overly long paths invoking UB or getting\ntruncated have been fixed. such issues should not have arisen with the\nenvironment (which is size-limited) but could have been generated by a\npath file larger than 2**31 bytes in length.\n"},{"hash":"876464622fedd4dceb25700a04a881827d05d02d","date":"2013-04-20T18:01:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clarify that bits headers are included as public headers\n"},{"hash":"a896e893261544b523cef56d328546fbbaacfc99","date":"2013-04-20T18:02:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update copyright year\n"},{"hash":"5d37b79793b17edcc6fe71b8a7de318276904fd8","date":"2013-04-20T18:03:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mention bits headers in another part of copyright file\n"},{"hash":"71ae0c724dd49d493621b367d17079f8cc70443c","date":"2013-04-20T18:07:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"comment potentially-confusing use of struct crypt_data type\n"},{"hash":"ae0c1de530bc3b27069008b8b247171d08dbe80b","date":"2013-04-22T14:17:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix reversed argument order x86_64 sigsetjmp's call to sigprocmask\n\nthis caused sigsetjmp not to save the signal mask but instead to\nclobber it with whatever happened to be in the sigjmb_buf prior to the\ncall.\n"},{"hash":"43653c1250ad5eb5385d7e08292ad047420f8d25","date":"2013-04-23T00:47:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove __STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS checks in stdint.h\n\nC++11, the first C++ with stdint.h, requires the previously protected\nmacros to be exposed unconditionally by stdint.h. apparently these\nchecks were an early attempt by the C committee to guess what the C++\ncommittee would want, and they guessed wrong.\n"},{"hash":"a0473a0c826016aec1181819fcd4fff5c074f042","date":"2013-04-26T19:09:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove explicit locking to prevent __synccall setuid during posix_spawn\n\nfor the duration of the vm-sharing clone used by posix_spawn, all\nsignals are blocked in the parent process, including\nimplementation-internal signals. since __synccall cannot do anything\nuntil successfully signaling all threads, the fact that signals are\nblocked automatically yields the necessary safety.\n\naside from debloating and general simplification, part of the\nmotivation for removing the explicit lock is to simplify the\nsynchronization logic of __synccall in hopes that it can be made\nasync-signal-safe, which is needed to make setuid and setgid, which\ndepend on __synccall, conform to the standard. whether this will be\npossible remains to be seen.\n"},{"hash":"23f21c304fd6a7592b70927e247129c5a2bc2390","date":"2013-04-26T19:47:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always block signals in pthread_exit before decrementing thread count\n\nthe thread count (1+libc.threads_minus_1) must always be greater than\nor equal to the number of threads which could have application code\nrunning, even in an async-signal-safe sense. there is at least one\ndangerous race condition if this invariant fails to hold: dlopen could\nallocate too little TLS for existing threads, and a signal handler\nrunning in the exiting thread could claim the allocated TLS for itself\n(via __tls_get_addr), leaving too little for the other threads it was\nallocated for and thereby causing out-of-bounds access.\n\nthere may be other situations where it's dangerous for the thread\ncount to be too low, particularly in the case where only one thread\nshould be left, in which case locking may be omitted. however, all\nsuch code paths seem to arise from undefined behavior, since\nasync-signal-unsafe functions are not permitted to be called from a\nsignal handler that interrupts pthread_exit (which is itself\nasync-signal-unsafe).\n\nthis change may also simplify logic in __synccall and improve the\nchances of making __synccall async-signal-safe.\n"},{"hash":"6e531f999a82cf39a951e1e9bba3cb80a6eb1464","date":"2013-04-26T20:04:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add comments on some of the pthread_exit logic\n"},{"hash":"c3a6839ce95c0f93bd73f7fbe5fcaee4054e5b62","date":"2013-04-26T20:05:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use atomic decrement rather than cas in pthread_exit thread count\n\nnow that blocking signals prevents any application code from running\nwhile the last thread is exiting, the cas logic is no longer needed to\nprevent decrementing below zero.\n"},{"hash":"d0ba09837bc033e236e921304b213daea0fe2653","date":"2013-04-26T20:16:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make last thread's pthread_exit give exit(0) a consistent state\n\nthe previous few commits ended up leaving the thread count and signal\nmask wrong for atexit handlers and stdio cleanup.\n"},{"hash":"082fb4e9bfd105fab3443c7b055bd9c22bdffcec","date":"2013-04-26T21:30:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix clobbering of signal mask when creating thread with sched attributes\n\nthis was simply a case of saving the state in the wrong place.\n"},{"hash":"47d2bf5103fe7c65ae8dd18ba28704f143cdc9b4","date":"2013-04-26T21:46:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"synccall signal handler need not handle dead threads anymore\n\nthey have already blocked signals before decrementing the thread\ncount, so the code being removed is unreachable in the case where the\nthread is no longer counted.\n"},{"hash":"d674f8582ae8897715782ab9dfb5a039a9112a86","date":"2013-04-26T21:51:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prevent code from running under a thread id which already gave ESRCH\n"},{"hash":"d53c92c972dab717f8f8e521eb0e9c4404cef4bd","date":"2013-04-26T23:02:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize/debloat raise\n\nuse __syscall rather than syscall when failure is not possible or not\nto be considered.\n"},{"hash":"2c074b0d6cb2b28c5d1c0ccb2809965f4676efeb","date":"2013-04-26T23:48:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"transition to using functions for internal signal blocking/restoring\n\nthere are several reasons for this change. one is getting rid of the\nrepetition of the syscall signature all over the place. another is\nsharing the constant masks without costly GOT accesses in PIC.\n\nthe main motivation, however, is accurately representing whether we\nwant to block signals that might be handled by the application, or all\nsignals.\n"},{"hash":"9293b765c4449c13fe355bcfcac1934fe3426847","date":"2013-05-05T18:19:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"do not interpret errors in return value of times() syscall\n\nall return values are valid, and on 32-bit systems, values that look\nlike errors can and will occur. since the only actual error this\nfunction could return is EFAULT, and it is only returnable when the\napplication has invoked undefined behavior, simply ignore the\npossibility that the return value is actually an error code.\n"},{"hash":"da49b872f5ef56026713855b66783c8e32570c4b","date":"2013-05-05T18:51:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect clock tick scaling in fallback case of clock()\n\nsince CLOCKS_PER_SEC is 1000000 (required by XSI) and the times\nsyscall reports values in 1/100 second units (Linux), the correct\nscaling factor is 10000, not 100. note that only ancient kernels which\nlack clock_gettime are affected.\n"},{"hash":"2897bfdd602f3d6a0724bbfdd543e962926b5bbe","date":"2013-05-06T17:52:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove compound literals from math.h to please c++\n\n__FLOAT_BITS and __DOUBLE_BITS macros used union compound literals,\nnow they are changed into static inline functions. A good C compiler\ngenerates the same code for both and the later is C++ conformant.\n"},{"hash":"2c184264eae3797de028403ed1e86c1f7ae5b813","date":"2013-05-15T20:15:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support full range of dev_t major/minor numbers in makedev, etc. macros\n"},{"hash":"e216951f509b71da193da2fc63e25b998740d58b","date":"2013-05-15T23:08:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use double_t for temporaries to avoid stores on i386\n\nWhen FLT_EVAL_METHOD!=0 (only i386 with x87 fp) the excess\nprecision of an expression must be removed in an assignment.\n(gcc needs -fexcess-precision=standard or -std=c99 for this)\n\nThis is done by extra load/store instructions which adds code\nbloat when lot of temporaries are used and it makes the result\nless precise in many cases.\nUsing double_t and float_t avoids these issues on i386 and\nit makes no difference on other archs.\n\nFor now only a few functions are modified where the excess\nprecision is clearly beneficial (mostly polynomial evaluations\nwith temporaries).\n\nobject size differences on i386, gcc-4.8:\n             old   new\n__cosdf.o    123    95\n__cos.o      199   169\n__sindf.o    131    95\n__sin.o      225   203\n__tandf.o    207   151\n__tan.o      605   499\nerff.o      1470  1416\nerf.o       1703  1649\nj0f.o       1779  1745\nj0.o        2308  2274\nj1f.o       1602  1568\nj1.o        2286  2252\ntgamma.o    1431  1424\nmath/*.o   64164 63635\n"},{"hash":"1a70198b3e5a7866bf4c62d090d8a8e28b12521a","date":"2013-05-16T20:27:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mknod and mknodat to accept large dev_t values\n\nsupport for these was recently added to sysmacros.h. note that the\nsyscall argument is a long, despite dev_t being 64-bit, so on 32-bit\narchs the high bits will be lost. it appears the high bits are just\nglibc silliness and not part of the kernel api, anyway, but it's nice\nthat we have them there for future expansion if needed.\n"},{"hash":"ec9f5353b10eb312af391ec799a3eeea5da145a9","date":"2013-05-17T18:23:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove the __STDC_FORMAT_MACROS nonsense from inttypes.h\n\nsomehow I missed this when removing the corresponding\n__STDC_LIMIT_MACROS and __STDC_CONSTANT_MACROS nonsense from stdint.h.\nthese were all attempts by the C committee to guess what the C++\ncommittee would want, and the guesses turned out to be wrong.\n"},{"hash":"22730d65608db06500cc6e0be4aaec03238f996b","date":"2013-05-17T22:38:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add FLT_TRUE_MIN, etc. macros from C11\n\nthere was some question as to how many decimal places to use, since\none decimal place is always sufficient to identify the smallest\ndenormal uniquely. for now, I'm following the example in the C\nstandard which is consistent with the other min/max macros we already\nhad in place.\n"},{"hash":"1d5ba3bb5a3f55e10db05219638cfcd967d65417","date":"2013-05-18T12:34:00.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: tan cleanups\n\n* use unsigned arithmetics on the representation\n* store arg reduction quotient in unsigned (so n%2 would work like n&1)\n* use different convention to pass the arg reduction bit to __tan\n  (this argument used to be 1 for even and -1 for odd reduction\n  which meant obscure bithacks, the new n&1 is cleaner)\n* raise inexact and underflow flags correctly for small x\n  (tanl(x) may still raise spurious underflow for small but normal x)\n  (this exception raising code increases codesize a bit, similar fixes\n  are needed in many other places, it may worth investigating at some\n  point if the inexact and underflow flags are worth raising correctly\n  as this is not strictly required by the standard)\n* tanf manual reduction optimization is kept for now\n* tanl code path is cleaned up to follow similar logic to tan and tanf\n"},{"hash":"69ee9b2cb169ee843ac9e209f919d088499152f7","date":"2013-05-18T14:20:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make err.h functions print __progname\n\npatch by Strake. previously is was not feasible to duplicate this\nfunctionality of the functions these were modeled on, since argv[0]\nwas not saved at program startup, but now that it's available it's\neasy to use.\n"},{"hash":"bfda37935867f9bf271d6074db0accf05c63ad10","date":"2013-05-18T14:40:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: sin cos cleanup\n\n* use unsigned arithmetics\n* use unsigned to store arg reduction quotient (so n&3 is understood)\n* remove z=0.0 variables, use literal 0\n* raise underflow and inexact exceptions properly when x is small\n* fix spurious underflow in tanl\n"},{"hash":"83af1dd65a11f3da3f99ba861248a841c402ccaa","date":"2013-05-18T16:06:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/review'\n"},{"hash":"ffd8ac2dd50f99c3c83d7d9d845df9874ec3e7d5","date":"2013-05-19T12:13:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix two fma issues (only affects non-nearest rounding mode, x86)\n\n1) in downward rounding fma(1,1,-1) should be -0 but it was 0 with\ngcc, the code was correct but gcc does not support FENV_ACCESS ON\nso it used common subexpression elimination where it shouldn't have.\nnow volatile memory access is used as a barrier after fesetround.\n\n2) in directed rounding modes there is no double rounding issue\nso the complicated adjustments done for nearest rounding mode are\nnot needed. the only exception to this rule is raising the underflow\nflag: assume \"small\" is an exactly representible subnormal value in\ndouble precision and \"verysmall\" is a much smaller value so that\n\t(long double)(small plus verysmall) == small\nthen\n\t(double)(small plus verysmall)\nraises underflow because the result is an inexact subnormal, but\n\t(double)(long double)(small plus verysmall)\ndoes not because small is not a subnormal in long double precision\nand it is exact in double precision.\nnow this problem is fixed by checking inexact using fenv when the\nresult is subnormal\n"},{"hash":"1e5eb73545ca6cfe8b918798835aaf6e07af5beb","date":"2013-05-19T14:43:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add fma TODO comments about the underflow issue\n\nThe underflow exception is not raised correctly in some\ncornercases (see previous fma commit), added comments\nwith examples for fmaf, fmal and non-x86 fma.\n\nIn fmaf store the result before returning so it has the\ncorrect precision when FLT_EVAL_METHOD!=0\n"},{"hash":"05453b37fc0343e53bc7f332047e901b3e1abb84","date":"2013-05-23T18:31:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overflow behavior of clock() function\n\nper Austin Group interpretation for issue #686, which cites the\nrequirements of ISO C, clock() cannot wrap. if the result is not\nrepresentable, it must return (clock_t)-1. in addition, the old code\nwas performing wrapping via signed overflow and thus invoking\nundefined behavior.\n\nsince it seems impossible to accurately check for overflow with the\nold times()-based fallback code, I have simply dropped the fallback\ncode for now, thus always returning -1 on ancient systems. if there's\na demand for making it work and somebody comes up with a way, it could\nbe reinstated, but the clock() function is essentially useless on\n32-bit system anyway (it overflows in less than an hour).\n\nit should be noted that I used LONG_MAX rather than ULONG_MAX, despite\n32-bit archs using an unsigned type for clock_t. this discrepency with\nthe glibc/LSB type definitions will be fixed now; since wrapping of\nclock_t is no longer supported, there's no use in it being unsigned.\n"},{"hash":"5e642b5a2395893873affa2a121a694943b3f4e0","date":"2013-05-24T00:38:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change underlying type of clock_t to be uniform and match ABI\n\npreviously we were using an unsigned type on 32-bit systems so that\nsubtraction would be well-defined when it wrapped, but since wrapping\nis non-conforming anyway (when clock() overflows, it has to return -1)\nthe only use of unsigned would be to buy a little bit more time before\noverflow. this does not seem worth having the type vary per-arch\n(which leads to more arch-specific bugs) or disagree with the ABI musl\n(mostly) follows.\n"},{"hash":"a6367a17d5f77848e8313b1e5e42698aec92908d","date":"2013-05-26T15:43:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"on x86_64 use long instead of long long for 64bit posix types\n\nfollowing glibc use the lowest rank 64bit integer type for ino_t etc.\nthis is eg. useful for printf format compatibility\n"},{"hash":"41c34d188a598b016d62e152735f8466fe9910a4","date":"2013-05-26T15:49:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix ioctl _IOR, _IOW, etc macros to avoid signed overflow (2<<30)\n"},{"hash":"31ff797787d89bc01a69ca672fb2340ff21a827e","date":"2013-05-26T16:01:38.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix the prototype of settimeofday to follow the original BSD declaration\n"},{"hash":"d9265653552a2b667bf3e84407a06edaa7e9f74f","date":"2013-05-26T22:22:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"Merge remote-tracking branch 'nsz/review'\n"},{"hash":"44b4d09fc0626541ca12cf96f65adc21ab1fc413","date":"2013-06-03T20:35:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure that thread dtv pointer is never null to optimize __tls_get_addr\n"},{"hash":"a6d272127bb6a2eb09dc182cc39c49e77310ade4","date":"2013-06-03T21:32:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"align stack properly for calling global ctors/dtors on x86[_64]\n\nfailure to do so was causing crashes on x86_64 when ctors used SSE,\nwhich was first observed when ctors called variadic functions due to\nthe SSE prologue code inserted into every variadic function.\n"},{"hash":"f18846dd3a048598676e10b2a7b9f931bb3d1d6a","date":"2013-06-04T20:09:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor scanf core to use common code path for all string formats\n\nthe concept here is that %s and %c are essentially special-cases of\n%[, with some minimal additional special-casing.\n\naside from simplifying the code and reducing the number of complex\ncode-paths that would need changing to make optimizations later, the\nmain purpose of this change is to simplify addition of the 'm'\nmodifier which causes scanf to allocate storage for the string being\nread.\n"},{"hash":"1ab59de81e94e7802f85d314a709f8350a0e9b65","date":"2013-06-04T20:22:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify some logic in scanf and remove redundant invalid-format check\n"},{"hash":"de80ea9f1c2821cbb4205533b86d5d17f9e8d376","date":"2013-06-05T20:53:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor wide-char scanf string handling\n\nthis brings the wide version of the code into alignment with the\nbyte-based version, in preparation for adding support for the m\n(malloc) modifier.\n"},{"hash":"16a1e0365d83c387d0dddd3c127ac7c8dcdf17fc","date":"2013-06-05T22:18:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement the 'm' (malloc) modifier for scanf\n\nthis commit only covers the byte-based scanf-family functions. the\nwide functions still lack support for the 'm' modifier.\n"},{"hash":"e039db27c2b4298470861c57535eb91a3eb3b1a6","date":"2013-06-06T04:26:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement 'm' modifier for wide scanf variants\n"},{"hash":"f7244d205fc68d9ee8e28f89a8b5a680586a6117","date":"2013-06-07T13:54:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve handling of nonstandard fields in struct tm\n\ndefining tm_gmtoff and tm_zone as macros was breaking some application\ncode that used these names for its own purposes.\n"},{"hash":"c161356002354f238a3333cafab430ada5006269","date":"2013-06-07T14:13:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make gcc-specific headers (intrinsics, etc.) available with wrapper\n\nthey are intentionally listed after the libc include directory so that\nthe gcc float.h, etc. don't get used in place of the libc ones.\n"},{"hash":"fd1d7be35f1b7f083071e246208498aa3b5ced3e","date":"2013-06-07T14:18:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mixup in previous change to gcc wrapper\n"},{"hash":"c79cd27e9e81eb5e223728094f1233ee2fc12dda","date":"2013-06-08T13:31:10.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"prng: fix rand() to give good sequence with small state\n\nsome applications rely on the low bits of rand() to be reasonably good\nquality prng, so now it fixed by using the top bits of a 64 bit LCG,\nthis is simple, has small state and passes statistical tests.\nD.E. Knuth attributes the multiplier to C.E. Haynes in TAOCP Vol2 3.3.4\n"},{"hash":"0996faa3d789dd69e4c1c022757f0623908b0df5","date":"2013-06-08T13:49:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"prng: make rand_r have 2^32 period instead of 2^31\n\nthis is a minor fix to increase the period of the obsolete rand_r a bit.\nan include header in __rand48_step.c is fixed as well.\n"},{"hash":"ea200e38bd79723054c7ad97cbf87911eac5b7f5","date":"2013-06-08T15:36:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support cputime clocks for processes/threads other than self\n\napparently these features have been in Linux for a while now, so it\nmakes sense to support them. the bit twiddling seems utterly illogical\nand wasteful, especially the negation, but that's how the kernel folks\nchose to encode pids/tids into the clock id.\n"},{"hash":"01739902843e93ec6e9bf8e17d32c8ddf73fad81","date":"2013-06-08T15:40:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the type of CLOCKS_PER_SEC to match new clock_t type\n\noriginally it was right on 32-bit archs and wrong on 64-bit, but after\nrecent changes it was wrong everywhere. with this commit, it's now\nright everywhere.\n"},{"hash":"4191d2447673e6b03722198871af0daf9390cb51","date":"2013-06-08T15:42:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add clock id macros for a number of new(ish) Linux-specific clocks\n\narguably CLOCK_MONOTONIC should be redirected to CLOCK_BOOTTIME with a\nfallback for old kernels that don't support it, since Linux's\nCLOCK_BOOTTIME semantics seem to match the spirit of the POSIX\nrequirements for CLOCK_MONOTONIC better than Linux's version of\nCLOCK_MONOTONIC does. however, this is a change that would require\nfurther discussion and research, so for now, I'm simply making them\nall available.\n"},{"hash":"20d01d83b5a13c77805976e7c520f566244ba3ff","date":"2013-06-12T22:20:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve the quality of output from rand_r\n\ndue to the interface requirement of having the full state contained in\na single object of type unsigned int, it is difficult to provide a\nreasonable-quality implementation; most good PRNGs are immediately\nruled out because they need larger state. the old rand_r gave very\npoor output (very short period) in its lower bits; normally, it's\ndesirable to throw away the low bits (as in rand()) when using a LCG,\nbut this is not possible since the state is only 32 bits and we need\n31 bits of output.\n\nglibc's rand_r uses the same LCG as musl's, but runs it for 3\niterations and only takes 10-11 bits from each iteration to construct\nthe output value. this partially fixes the period issue, but\nintroduces bias: not all outputs have the same frequency, and many do\nnot appear at all. with such a low period, the bias is likely to be\nobservable.\n\nI tried many approaches to \"fix\" rand_r, and the simplest I found\nwhich made it pass the \"dieharder\" tests was applying this\ntransformation to the output. the \"temper\" function is taken from\nmersenne twister, where it seems to have been chosen for some rigorous\nproperties; here, the only formal property I'm using is that it's\none-to-one and thus avoids introducing bias.\n\nshould further deficiencies in rand_r be reported, the obvious \"best\"\nsolution is applying a 32-bit cryptographic block cipher in CTR mode.\nI identified several possible ciphers that could be used directly or\nadapted, but as they would be a lot slower and larger, I do not see a\njustification for using them unless the current rand_r proves\ndeficient for some real-world use.\n"},{"hash":"8600849d74ddd1fca8eba467af5c04c18731ba49","date":"2013-06-16T05:40:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized variable in lio (aio) code\n"},{"hash":"a494171a5a2778fc7b4d24d673d950f3e9864063","date":"2013-06-16T14:39:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid access in aio notification\n\nissue found and patch provided by Jens Gustedt. after the atomic store\nto the error code field of the aiocb, the application is permitted to\nfree or reuse the storage, so further access is invalid. instead, use\nthe local copy that was already made.\n"},{"hash":"c20804500deebaabc56f383d48dd1ac77dce8349","date":"2013-06-22T21:11:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix major scanf breakage with unbuffered streams, fmemopen, etc.\n\nthe shgetc api, used internally in scanf and int/float scanning code\nto handle field width limiting and pushback, was designed assuming\nthat pushback could be achieved via a simple decrement on the file\nbuffer pointer. this only worked by chance for regular FILE streams,\ndue to the linux readv bug workaround in __stdio_read which moves the\nlast requested byte through the buffer rather than directly back to\nthe caller. for unbuffered streams and streams not using __stdio_read\nbut some other underlying read function, the first character read\ncould be completely lost, and replaced by whatever junk happened to be\nin the unget buffer.\n\nto fix this, simply have shgetc, when it performs an underlying read\noperation on the stream, store the character read at the -1 offset\nfrom the read buffer pointer. this is valid even for unbuffered\nstreams, as they have an unget buffer located just below the start of\nthe zero-length buffer. the check to avoid storing the character when\nit is already there is to handle the possibility of read-only buffers.\nno application-exposed FILE types are allowed to use read-only\nbuffers, but sscanf and strto* may use them internally when calling\nfunctions which use the shgetc api.\n"},{"hash":"ef5507867b59d19f21437970e87b5d0415c07b2e","date":"2013-06-22T21:23:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix scanf %c conversion wrongly storing a terminating null byte\n\nthis seems to have been a regression from the refactoring which added\nthe 'm' modifier.\n"},{"hash":"83966b369d2fa105a58a35830f75662e18273965","date":"2013-06-26T01:15:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ether_aton[_r] and ether_ntoa[_r] functions\n\nbased on patch by Strake with minor stylistic changes, and combined\ninto a single file. this patch remained open for a long time due to\nsome question as to whether ether_aton would be better implemented in\nterms of sscanf, and it's time something was committed, so here it is.\n"},{"hash":"e40f48a421a9176e3e298b5bac75f0355b219e58","date":"2013-06-26T01:35:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement inet_lnaof, inet_netof, and inet_makeaddr\n\nalso move all legacy inet_* functions into a single file to avoid\nwasting object file and compile time overhead on them.\n\nthe added functions are legacy interfaces for working with classful\nipv4 network addresses. they have no modern usefulness whatsoever, but\nsome programs unconditionally use them anyway, and they're tiny.\n"},{"hash":"8813c956e506d57065b7089a98c8fcef1ef58c47","date":"2013-06-26T01:39:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make newline-delimited dynamic linker path file actually work\n\napparently the original commit was never tested properly, since\ngetline was only ever reading one line. the intent was to read the\nentire file, so use getdelim with the null byte as delimiter as a\ncheap way to read a whole file into memory.\n"},{"hash":"a3e2f3c2b15053a2f9faccc62947b82f2219599f","date":"2013-06-26T02:26:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"respect iso c namespace in stdio.h and wchar.h regarding va_list\n\ndespite declaring functions that take arguments of type va_list, these\nheaders are not permitted by the c standard to expose the definition\nof va_list, so an alias for the type must be used. the name\n__isoc_va_list was chosen to convey that the purpose of this alternate\nname is for iso c conformance, and to avoid the multitude of names\nwhich gcc mangles with its hideous \"fixincludes\" monstrosity, leading\nto serious header breakage if these \"fixes\" are run.\n"},{"hash":"11bc173765a22d460e090f46278ab4b96551a43b","date":"2013-06-26T14:17:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic linker handling of empty path file or error reading path file\n\npreviously, the path string was being used despite being invalid. with\nthis change, empty path file or error reading the path file is treated\nas an empty path. this is preferable to falling back to a default\npath, so that attacks to prevent reading of the path file could not\nresult in loading incorrect and possibly dangerous (outdated or\nmismatching ABI) libraries from.\n\nthe code to strip the final newline has also been removed; now that\nnewline is accepted as a delimiter, it's harmless to leave it in\nplace.\n"},{"hash":"59b481d9702e6e09699ce22710ea150eb97c19d5","date":"2013-06-26T14:51:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless conditional before free from dynamic linker path code\n"},{"hash":"6a4cfbdbe718a115a22629ad0cb2ae21391a0454","date":"2013-06-26T18:27:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix iconv conversion to legacy 8bit codepages\n\nthis seems to have been a simple copy-and-paste error from the code\nfor converting from legacy codepages.\n"},{"hash":"f03db4bdff7b2f02b5cbdda96cf0241efa4e80ef","date":"2013-06-26T23:43:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"document in sysconf and unistd.h that per-thread cpu clocks exist\n"},{"hash":"21088aee2eb6bf12fd3b1db918ee4754989ff7da","date":"2013-06-27T01:34:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of pthread_setschedparam to pass correct param to kernel\n\nthe address of the pointer, rather than the pointer, was being passed.\nthis was probably a copy-and-paste error from corresponding get code.\n"},{"hash":"52d4444f8eec1a4e7e0861859c705c3a558b4e2a","date":"2013-06-27T01:35:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in sem_open, don't leak vm mapping if fstat fails\n\nfstat should not fail under normal circumstances, so this fix is\nmostly theoretical.\n"},{"hash":"a033cd22aa0ecd9f494b74669d358e7e1c7e1335","date":"2013-06-27T01:39:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug whereby sem_open leaked its own internal slots on failure\n"},{"hash":"7c20a11801fd56cbadac5a6e88ddddf8656ac1bc","date":"2013-06-27T01:41:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix temp file leak in sem_open on successful creation of new semaphore\n"},{"hash":"b17c75a4d539d7ec5b81cc7ce7ce6b065a87e7a6","date":"2013-06-27T02:02:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix syscall argument bug in pthread_getschedparam\n\nthe address of the pointer to the sched param, rather than the\npointer, was being passed to the kernel.\n"},{"hash":"3cd6f5229f079f892411e82fce3fe15c78eef4d8","date":"2013-06-27T16:48:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disallow creation of objects larger than PTRDIFF_MAX via mmap\n\ninternally, other parts of the library assume sizes don't overflow\nssize_t and/or ptrdiff_t, and the way this assumption is made valid is\nby preventing creating of such large objects. malloc already does so,\nbut the check was missing from mmap.\n\nthis is also a quality of implementation issue: even if the\nimplementation internally could handle such objects, applications\ncould inadvertently invoke undefined behavior by subtracting pointers\nwithin an object. it is very difficult to guard against this in\napplications, so a good implementation should simply ensure that it\ndoes not happen.\n"},{"hash":"1e2281b8356d1935a129ddb199d71677f19a1619","date":"2013-06-28T00:00:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor compatibility fixes in utmp.h and fixing mismatch with paths.h\n\nthe pathnames prefixed with /dev/null/ are guaranteed never to be\nvalid. the previous use of /dev/null alone was mildly dangerous in\nthat bad software might attempt to unlink the name when it found a\nnon-regular file there and create a new file.\n"},{"hash":"c5faf1bf09c01641e74844c4bfb0f129bc3974a1","date":"2013-06-28T16:03:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement week numbers and half of the week-based-year logic for strftime\n\noutput for plain week numbers (%U and %W) has been sanity-checked, and\noutput for the week-based-year week numbers (%V) has been checked\nextensively against known-good data for the full non-negative range of\n32-bit time_t.\n\nyear numbers for week-based years (%g and %G) are not yet implemented.\n"},{"hash":"062446a85db9b58b4900df82e17cb8c07ec50453","date":"2013-06-28T16:12:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in last commit to strftime due to missing INT_MAX\n\nthat's what I get for changing a hard-coded threshold to a proper\nnon-magic-number without testing.\n"},{"hash":"aea79190326cf81d6c8ec81ab163137591c6dac8","date":"2013-06-28T16:38:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement week-based-year year numbers in strftime\n\nin the process, I refactored the week-number code so it can be used by\nthe week-based-year formats to determine year adjustments at the\nboundary values. this also improves indention/code readability.\n"},{"hash":"553d566c3f7080cf1f339eebf715db7e5d0b0d76","date":"2013-06-29T03:39:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing type shmatt_t in sys/shm.h\n\nthis type is not really intended to be used; it's just there to allow\nimplementations to choose the type for the shm_nattch member of\nstruct shmid_sh, presumably since historical implementations disagreed\non the type. in any case, it needs to be there, so now it is.\n"},{"hash":"062f40ef3e56021f4a9902095867e35cce6d99c4","date":"2013-06-29T03:57:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around wrong kernel type for sem_nsems member of struct semid_ds\n\nrejecting invalid values for n is fine even in the case where a new\nsem will not be created, since the kernel does its range checks on n\neven in this case as well.\n\nby default, the kernel will bound the limit well below USHRT_MAX\nanyway, but it's presumably possible that an administrator could\noverride this limit and break things.\n"},{"hash":"17aef0b41e3d7cb37c476cbe2df26fc444518a64","date":"2013-06-29T04:02:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prevent shmget from allocating objects that overflow ptrdiff_t\n\nrather than returning an error, we have to increase the size argument\nso high that the kernel will have no choice but to fail. this is\nbecause POSIX only permits the EINVAL error for size errors when a new\nshared memory segment would be created; if it already exists, the size\nargument must be ignored. unfortunately Linux is non-conforming in\nthis regard, but I want to keep the code correct in userspace anyway\nso that if/when Linux is fixed, the behavior applications see will be\nconforming.\n"},{"hash":"509b50eda8ea7d4a28f738e4cf8ea98d25959f00","date":"2013-06-29T06:24:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing synchronization in calls from dynamic linker to global ctors\n\nthis change is needed to correctly handle the case where a constructor\ncreates a new thread which calls dlopen. previously, the lock was not\nheld in this case. the reason for the complex logic to avoid locking\nwhenever possible is that, since the mutex is recursive, it will need\nto inspect the thread pointer to get the current thread's tid, and\nthis requires initializing the thread pointer. we do not want\nnon-multi-threaded programs to attempt to access the thread pointer\nunnecessarily; doing so could make them crash on ancient kernels that\ndon't support threads but which may otherwise be capable of running\nthe program.\n"},{"hash":"2b0af609ef3d90fe6433270f2e2f62fc77ec7441","date":"2013-06-29T16:24:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some comments about the mips ksigaction structure weirdness\n"},{"hash":"780cbbe63ad9e60ef30dbcb2d74271e899dae245","date":"2013-06-29T16:46:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement minimal dlinfo function\n"},{"hash":"9b732fe51b814468a08c84d13238b4c83a42451a","date":"2013-06-29T17:57:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix shifts possibly larger than type in major() macro\n\nin theory this should not be an issue, since major() should only be\napplied to type dev_t, which is 64-bit. however, it appears some\napplications are not using dev_t but a smaller integer type (which\nworks on Linux because the kernel's dev_t is really only 32-bit). to\navoid the undefined behavior, do it as two shifts.\n"},{"hash":"4ca442157e381690202c3bcc102627d137fd0466","date":"2013-06-29T20:16:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of mbsrtowcs to record stop position when dest is full\n"},{"hash":"6688a778b0419eab32e715f269319248edee9da5","date":"2013-06-30T02:43:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.11\n"},{"hash":"d66ab4f1409ad1a2093239ef48b7bca596acdf52","date":"2013-07-01T17:43:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix Makefile so \"make install\" works before include/bits symlink exists\n\npreviously, determination of the list of header files for installation\ndepended on the include/bits symlink (to the arch-specific files)\nalready having been created. in other words, running \"make install\"\nimmediately after configure without first running \"make\" caused the\nbits headers not to be installed.\n\nthe solution I have applied is to pull the list of headers directly\nfrom arch/$(ARCH)/bits rather than include/bits, and likewise to\ninstall directly from arch/$(ARCH)/bits rather than via the symlink.\n\nat this point, the only purpose served by keeping the symlink around\nis that it enables use of the in-tree headers and libs directly via -I\nand -L, which can be useful when testing against a new version of the\nlibrary before installing it. on the other hand, removing the bits\nsymlink would be beneficial if we ever want to support building\nmultiple archs in the same source tree.\n"},{"hash":"fbcd82040cb67ee14886c6ac4c200cde3662f986","date":"2013-07-01T17:50:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add stubs for additional legacy ether.h functions\n\nthese would not be expensive to actually implement, but reading\n/etc/ethers does not sound like a particularly useful feature, so for\nnow I'm leaving them as stubs.\n"},{"hash":"f206fec1c8162ea93ece055f09a571acde69974a","date":"2013-07-03T16:07:50.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"paths.h: remove cruft\n\na research in debian codesearch and grepping over the pkgsrc\ndirectory tree have shown that these macros are all either unused,\nor defined by programs in case they need them.\n"},{"hash":"0636d5977aa796d78869ee310c6e69220b919eee","date":"2013-07-03T16:07:50.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add legacy scsi/scsi_ioctl.h header\n"},{"hash":"ab724204393bcc990d519b1358f4ec3ee1f3a570","date":"2013-07-03T16:07:51.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add legacy sys/ttydefaults.h header\n"},{"hash":"651416182dc65d75e91cadfec65dd72f9ff07846","date":"2013-07-05T03:54:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move alignment check from aligned_alloc to posix_memalign\n\nC11 has no requirement that the alignment be a multiple of\nsizeof(void*), and in fact seems to require any \"valid alignment\nsupported by the implementation\" to work. since the alignment of char\nis 1 and thus a valid alignment, an alignment argument of 1 should be\naccepted.\n"},{"hash":"6d861ac87491a207e4599c44b61d142f0a601c2d","date":"2013-07-05T03:58:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move core memalign code from aligned_alloc to __memalign\n\nthere are two motivations for this change. one is to avoid\ngratuitously depending on a C11 symbol for implementing a POSIX\nfunction. the other pertains to the documented semantics. C11 does not\ndefine any behavior for aligned_alloc when the length argument is not\na multiple of the alignment argument. posix_memalign on the other hand\nplaces no requirements on the length argument. using __memalign as the\nimplementation of both, rather than trying to implement one in terms\nof the other when their documented contracts differ, eliminates this\nconfusion.\n"},{"hash":"ca9aff6a1646c7fc106bfbb9399b3a1bcb14f18b","date":"2013-07-06T05:12:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add NFDBITS in sys/select.h with appropriate feature tests\n\nthe main use for this macro seems to be knowing the correct allocation\ngranularity for dynamic-sized fd_set objects. such usage is\nnon-conforming and results in undefined behavior, but it is widespread\nin applications.\n"},{"hash":"0716b10ac8dc167f96969c964974d4094035fed0","date":"2013-07-09T04:40:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing SOCK_CLOEXEC in various functions that use sockets internally\n"},{"hash":"cdf0f53f8ba0e79dedb83c626851597bacec53ca","date":"2013-07-09T04:42:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fd leak on races and cancellation in ctermid\n"},{"hash":"b6218764ebca59ff5dae0e87b696188c8de0119e","date":"2013-07-09T04:50:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bogus lazy allocation in ctermid and missing malloc failure check\n\nalso clean up, optimize, and simplify the code, removing branches by\nsimply pre-setting the result string to an empty string, which will be\npreserved if other operations fail.\n"},{"hash":"8599822ee1d70a1e42e1d4b4962bc1d0bdf7e5ab","date":"2013-07-09T06:11:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one array bound in strsignal\n"},{"hash":"c90fa2ace73851d6af4946c239c90db91cad8abe","date":"2013-07-09T06:23:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add realtime signals to strsignal\n\nthe name format RTnn/RTnnn was chosen to minimized bloat while\nuniquely identifying the signal.\n"},{"hash":"c713d8797804903b54203a645e023e2077c7556d","date":"2013-07-09T06:30:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix a couple misleading/wrong signal descriptions in strsignal\n\nthere are still several more that are misleading, but SIGFPE (integer\ndivision error misdescribed as floating point) and and SIGCHLD\n(possibly non-exit status change events described as exiting) were the\nworst offenders.\n"},{"hash":"30763fd01bef85f30e79baa30173674c007690cc","date":"2013-07-10T18:38:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid library phdr pointers passed to callback from dl_iterate_phdr\n\nmap_library was saving pointers to an automatic-storage buffer rather\nthan pointers into the mapping. this should be a fairly simple fix,\nbut the patch here is slightly complicated by two issues:\n\n1. supporting gratuitously obfuscated ELF files where the program\nheaders are not right at the beginning of the file.\n\n2. cleaning up the map_library function so that data isn't clobbered\nby the time we need it.\n"},{"hash":"3e8806b4f7f25f7c249f61f597d3a113f531a059","date":"2013-07-10T20:11:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some ARM EABI-specific exception handling infrastructure\n\npatch by Timo Teräs\n"},{"hash":"c07da2e9704d2ba95efa34a4fde2747d973b4e4c","date":"2013-07-10T20:58:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add PIE support for ARM\n"},{"hash":"f1292e3d28309bbc81f61671164843cec4319bfa","date":"2013-07-13T18:54:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix omission of dtv setup in static linked programs on TLS variant I archs\n\napparently this was never noticed before because the linker normally\noptimizes dynamic TLS models to non-dynamic ones when static linking,\nthus eliminating the calls to __tls_get_addr which crash when the dtv\nis missing. however, some libsupc++ code on ARM was calling\n__tls_get_addr when static linked and crashing. the reason is unclear\nto me, but with this issue fixed it should work now anyway.\n"},{"hash":"1cc81f5cb0df2b66a795ff0c26d7bbc4d16e13c6","date":"2013-07-17T09:24:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"the big time handling overhaul\n\nthis commit has two major user-visible parts: zoneinfo-format time\nzones are now supported, and overflow handling is intended to be\ncomplete in the sense that all functions return a correct result if\nand only if the result fits in the destination type, and otherwise\nreturn an error. also, some noticable bugs in the way DST detection\nand normalization worked have been fixed, and performance may be\nbetter than before, but it has not been tested.\n"},{"hash":"ac1bf93fc634274c14d234c44b2e846a93a5cc95","date":"2013-07-17T13:29:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fd leak in file mapping code used in new zoneinfo support\n"},{"hash":"ea81c0624f0213430ae8fb959e30373eeaaf391c","date":"2013-07-17T14:39:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix error code on time conversion overflows\n\nPOSIX mandates EOVERFLOW for this condition.\n"},{"hash":"3df0b66ee95c837496ae434ba7a2282d97ca71ef","date":"2013-07-17T14:43:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing argument in variadic syscall macros\n\nfor 0-argument syscalls (1 argument to the macro, the syscall number),\nthe __SYSCALL_NARGS_X macro's ... argument was not satisfied. newer\ncompilers seem to care about this.\n"},{"hash":"b06dc6663989f8b3c141e439fe89036a44eb7552","date":"2013-07-17T17:54:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make posix_spawn (and functions that use it) use CLONE_VFORK flag\n\nthis is both a minor scheduling optimization and a workaround for a\ndifficult-to-fix bug in qemu app-level emulation.\n\nfrom the scheduling standpoint, it makes no sense to schedule the\nparent thread again until the child has exec'd or exited, since the\nparent will immediately block again waiting for it.\n\non the qemu side, as regular application code running on an underlying\nlibc, qemu cannot make arbitrary clone syscalls itself without\nconfusing the underlying implementation. instead, it breaks them down\ninto either fork-like or pthread_create-like cases. it was treating\nthe code in posix_spawn as pthread_create-like, due to CLONE_VM, which\ncaused horribly wrong behavior: CLONE_FILES broke the synchronization\nmechanism, CLONE_SIGHAND broke the parent's signals, and CLONE_THREAD\ncaused the child's exec to end the parent -- if it hadn't already\ncrashed. however, qemu special-cases CLONE_VFORK and emulates that\nwith fork, even when CLONE_VM is also specified. this also gives\nincorrect semantics for code that really needs the memory sharing, but\nposix_spawn does not make use of the vm sharing except to avoid\nmomentary double commit charge.\n\nprograms using posix_spawn (including via popen) should now work\ncorrectly under qemu app-level emulation.\n"},{"hash":"2f5fe458085fe8f9d0448aa1ef4eb9143b8b18ca","date":"2013-07-17T21:46:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make spacing in x86_64 alltypes.h.sh more uniform with other archs\n\npatch by Luka Perkov, who noted that all other archs have a newline.\n"},{"hash":"b823ef2db13a5d86df03bcf6bfd4b92559c0b154","date":"2013-07-18T18:15:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix FILENAME_MAX to match PATH_MAX\n\nPOSIX is not clear on whether it includes the termination, but ISO C\nrequires that it does. the whole concept of this macro is rather\nuseless, but it's better to be correct anyway.\n"},{"hash":"23815f88df6c45247f3755dc7857f4013264c04f","date":"2013-07-18T23:21:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one error in checks for implementation-internal signal numbers\n"},{"hash":"f389c4984a0fee80c5322e4d1ec3aa207e9b5c01","date":"2013-07-18T23:29:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make the dynamic linker find its path file relative to its own location\n\nprior to this change, using a non-default syslibdir was impractical on\nsystems where the ordinary library paths contain musl-incompatible\nlibrary files. the file containing search paths was always taken from\n/etc, which would either correspond to a system-wide musl\ninstallation, or fail to exist at all, resulting in searching of the\ndefault library path.\n\nthe new search strategy is safe even for suid programs because the\npathname used comes from the PT_INTERP header of the program being\nrun, rather than any external input.\n\nas part of this change, I have also begun differentiating the names of\narch variants that differ by endianness or floating point calling\nconvention. the corresponding changes in the build system and and gcc\nwrapper script (to use an alternate dynamic linker name) for these\nconfigurations have not yet been made.\n"},{"hash":"3e7f186ea18d7362e3e117f6e848b5514d8266d1","date":"2013-07-19T00:30:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add build system support for arch endian & float abi variants\n"},{"hash":"df065781ee913681ba86a636a2516cb0162cab19","date":"2013-07-19T00:37:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid C in new trycppif tests in configure script\n\nan empty program is not valid and would be reasonable grounds for the\ncompiler to give an error, which would break these tests.\n"},{"hash":"648c3b4e18b2ce2b6af7d44783e42ca267ea49f5","date":"2013-07-19T05:34:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change uid_t, gid_t, and id_t to unsigned types\n\nthis change is both to fix one of the remaining type (and thus C++\nABI) mismatches with glibc/LSB and to allow use of the full range of\nuid and gid values, if so desired.\n\npasswd/group access functions were not prepared to deal with unsigned\nvalues, so they too have been fixed with this commit.\n"},{"hash":"6567db65f495cf7c11f5c1e60a3e54543d5a69bc","date":"2013-07-19T06:48:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve [f]stat[v]fs functions, and possibly work around old kernels\n\nthe main aim of this patch is to ensure that if not all fields are\nfilled in, they contain zeros, so as not to confuse applications.\nreportedly some older kernels, including commonly used openvz kernels,\nlack the f_flags field, resulting in applications reading random junk\nas the mount flags; the common symptom seems to be wrongly considering\nthe filesystem to be mounted read-only and refusing to operate. glibc\nhas some amazingly ugly fallback code to get the mount flags for old\nkernels, but having them really is not that important anyway; what\nmatters most is not presenting incorrect flags to the application.\n\nI have also aimed to fill in some fields of statvfs that were\npreviously missing, and added code to explicitly zero the reserved\nspace at the end of the structure, which will make things easier in\nthe future if this space someday needs to be used.\n"},{"hash":"41e2fd9d529b00b8532e7170e3cdae0d5d6c6424","date":"2013-07-19T23:57:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add UIO_MAXIOV macro in sys/uio.h\n\nwhile there's no POSIX namespace provision for UIO_* in uio.h, this\nexact macro name is reserved in XBD 2.2.2. apparently some\nglibc-centric software expects it to exist, so let's provide it.\n"},{"hash":"8389520ed5ad6f0033d6426e21ef653fa5ca26a4","date":"2013-07-20T00:00:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"harden realloc/free to detect simple overflows\n\nthe sizes in the header and footer for a chunk should always match. if\nthey don't, the program has definitely invoked undefined behavior, and\nthe most likely cause is a simple overflow, either of a buffer in the\nblock being freed or the one just below it.\n\ncrashing here should not only improve security of buggy programs, but\nalso aid in debugging, since the crash happens in a context where you\nhave a pointer to the likely-overflowed buffer.\n"},{"hash":"1d92cddb1e1ed4b6cc0e55461727561e7a2522e0","date":"2013-07-20T04:21:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized/stale use of alloc (%m modifier) flag in scanf\n\nfor conversion specifiers, alloc is always set when the specifier is\nparsed. however, if scanf stops due to mismatching literal text,\neither an uninitialized (if no conversions have been performed yet) or\nstale (from the previous conversion) of the flag will be used,\npossibly causing an invalid pointer to be passed to free when the\nfunction returns.\n"},{"hash":"ce8a99578254242a89adbde1cbbf0f34daeec79b","date":"2013-07-20T17:19:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix shm_open wrongly being cancellable\n"},{"hash":"e69ae844dcc978f68761e4bc44fc5543717b9684","date":"2013-07-20T22:26:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for init_array/fini_array ctors/dtors to dynamic linker\n"},{"hash":"1b413572b271ebb93af38d73fa57eb85175e8a50","date":"2013-07-21T06:35:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix order of fini_array execution for shared libs\n"},{"hash":"7586360badcae6e73f04eb1b8189ce630281c4b2","date":"2013-07-21T07:00:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for init/fini array in main program, and greatly simplify\n\nmodern (4.7.x and later) gcc uses init/fini arrays, rather than the\nlegacy _init/_fini function pasting and crtbegin/crtend ctors/dtors\nsystem, on most or all archs. some archs had already switched a long\ntime ago. without following this change, global ctors/dtors will cease\nto work under musl when building with new gcc versions.\n\nthe most surprising part of this patch is that it actually reduces the\nsize of the init code, for both static and shared libc. this is\nachieved by (1) unifying the handling main program and shared\nlibraries in the dynamic linker, and (2) eliminating the\nglibc-inspired rube goldberg machine for passing around init and fini\nfunction pointers. to clarify, some background:\n\nthe function signature for __libc_start_main was based on glibc, as\npart of the original goal of being able to run some glibc-linked\nbinaries. it worked by having the crt1 code, which is linked into\nevery application, static or dynamic, obtain and pass pointers to the\ninit and fini functions, which __libc_start_main is then responsible\nfor using and recording for later use, as necessary. however, in\nneither the static-linked nor dynamic-linked case do we actually need\ncrt1.o's help. with dynamic linking, all the pointers are available in\nthe _DYNAMIC block. with static linking, it's safe to simply access\nthe _init/_fini and __init_array_start, etc. symbols directly.\n\nobviously changing the __libc_start_main function signature in an\nincompatible way would break both old musl-linked programs and\nglibc-linked programs, so let's not do that. instead, the function can\njust ignore the information it doesn't need. new archs need not even\nprovide the useless args in their versions of crt1.o. existing archs\nshould continue to provide it as long as there is an interest in\nhaving newly-linked applications be able to run on old versions of\nmusl; at some point in the future, this support can be removed.\n"},{"hash":"3edfd07073dd145124e15c80ea0276cd52c9909a","date":"2013-07-21T07:34:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove __libc_csu_* cruft\n\nthese functions were mistakenly assumed to be needed to match glibc\nABI, but glibc has them as part of the non-shared part of libc that's\nalways statically linked into the main program. moreover, the only\nplace they are referenced from is glibc's crt1.o.\n"},{"hash":"976c0fdcb55fafc55682d86441e5293d8aa5259d","date":"2013-07-21T07:48:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove init/fini array asm from arm crti/crtn files\n\nthis code has been replaced by portable C code that works on all\narchs. the old asm needs to be removed or ctors/dtors will run twice.\n"},{"hash":"9448b0513e2eec020fbca9c10412b83df5027a16","date":"2013-07-22T15:22:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor headers, especially alltypes.h, and improve C++ ABI compat\n\nthe arch-specific bits/alltypes.h.sh has been replaced with a generic\nalltypes.h.in and minimal arch-specific bits/alltypes.h.in.\n\nthis commit is intended to have no functional changes except:\n- exposing additional symbols that POSIX allows but does not require\n- changing the C++ name mangling for some types\n- fixing the signedness of blksize_t on powerpc (POSIX requires signed)\n- fixing the limit macros for sig_atomic_t on x86_64\n- making dev_t an unsigned type (ABI matching goal, and more logical)\n\nin addition, some types that were wrongly defined with long on 32-bit\narchs were changed to int, and vice versa; this change is\nnon-functional except for the possibility of making pointer types\nmismatch, and only affects programs that were using them incorrectly,\nand only at build-time, not runtime.\n\nthe following changes were made in the interest of moving\nnon-arch-specific types out of the alltypes system and into the\nheaders they're associated with, and also will tend to improve\napplication compatibility:\n- netdb.h now includes netinet/in.h (for socklen_t and uint32_t)\n- netinet/in.h now includes sys/socket.h and inttypes.h\n- sys/resource.h now includes sys/time.h (for struct timeval)\n- sys/wait.h now includes signal.h (for siginfo_t)\n- langinfo.h now includes nl_types.h (for nl_item)\n\nfor the types in stdint.h:\n- types which are of no interest to other headers were moved out of\n  the alltypes system.\n- fast types for 8- and 64-bit are hard-coded (at least for now); only\n  the 16- and 32-bit ones have reason to vary by arch.\n\nand the following types have been changed for C++ ABI purposes;\n- mbstate_t now has a struct tag, __mbstate_t\n- FILE's struct tag has been changed to _IO_FILE\n- DIR's struct tag has been changed to __dirstream\n- locale_t's struct tag has been changed to __locale_struct\n- pthread_t is defined as unsigned long in C++ mode only\n- fpos_t now has a struct tag, _G_fpos64_t\n- fsid_t's struct tag has been changed to __fsid_t\n- idtype_t has been made an enum type (also required by POSIX)\n- nl_catd has been changed from long to void *\n- siginfo_t's struct tag has been removed\n- sigset_t's has been given a struct tag, __sigset_t\n- stack_t has been given a struct tag, sigaltstack\n- suseconds_t has been changed to long on 32-bit archs\n- [u]intptr_t have been changed from long to int rank on 32-bit archs\n- dev_t has been made unsigned\n\nsummary of tests that have been performed against these changes:\n- nsz's libc-test (diff -u before and after)\n- C++ ABI check symbol dump (diff -u before, after, glibc)\n- grepped for __NEED, made sure types needed are still in alltypes\n- built gcc 3.4.6\n"},{"hash":"c4dd0c98bae8e3583f68ba5b30db491055ab2322","date":"2013-07-22T17:05:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change wint_t to unsigned\n\naside from the obvious C++ ABI purpose for this change, it also brings\nmusl into alignment with the compiler's idea of the definition of\nwint_t (use in -Wformat), and makes the situation less awkward on ARM,\nwhere wchar_t is unsigned.\n\ninternal code using wint_t and WEOF was checked against this change,\nand while a few cases of storing WEOF into wchar_t were found, they\nall seem to operate properly with the natural conversion from unsigned\nto signed.\n"},{"hash":"0109d950e685f1c5f6cef245a8b1bc47c9b6d94c","date":"2013-07-22T17:57:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pthread attribute types structs, even when they just have one field\n\nthis change is to get the right tags for C++ ABI matching. it should\nhave no other effects.\n"},{"hash":"4e3c6b430382b152e783454a31f9a884223ce77f","date":"2013-07-22T18:03:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pthread_key_t unsigned to match ABI\n"},{"hash":"1da53dad278f98b7712ac002162afaa8815ba580","date":"2013-07-22T18:08:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable legacy init/fini processing on ARM\n\nsince the old, poorly-thought-out musl approach to init/fini arrays on\nARM (when it was the only arch that needed them) was to put the code\nin crti/crtn and have the legacy _init/_fini code run the arrays,\nadding proper init/fini array support caused the arrays to get\nprocessed twice on ARM. I'm not sure skipping legacy init/fini\nprocessing is the best solution to the problem, but it works, and it\nshouldn't break anything since the legacy init/fini system was never\nused for ARM EABI.\n"},{"hash":"8327ae0cb23b799bc55a45e0d4bd95f5a2b1cdf1","date":"2013-07-22T18:39:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make regoff_t and regex_t match C++ ABI\n\nfor regoff_t, it's impossible to match on 64-bit archs because glibc\ndefined the type in a non-conforming way. however this change makes\nthe type match on 32-bit archs.\n"},{"hash":"1c6cace0bf88a5f30886665e2c2d2268e3a3ccc5","date":"2013-07-22T19:45:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in size of nlink_t (broken stat struct) on x86_64\n\nrather than moving nlink_t back to the arch-specific file, I've added\na macro _Reg defined to the canonical type for register-size values on\nthe arch. this is not the same as _Addr for (not-yet-supported)\n32-on-64 pseudo-archs like x32 and mips n32, so a new macro was\nneeded.\n"},{"hash":"009f186810c16a8fef98fad485298bfb96f810ad","date":"2013-07-22T20:40:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move register_t and u_int64_t (back) to alltypes\n\nduring the header refactoring, I had moved u_int64_t out of alltypes\nunder the assumption that we could just use long long everywhere.\nhowever, it seems some broken applications make inconsistent mixed use\nof u_int64_t and uint64_t, resulting in build errors when the\nunderlying type differs.\n"},{"hash":"3f08154ac494f4739afbc7451f317b2ef1bffbd3","date":"2013-07-22T21:02:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove SIG_ATOMIC_MIN/MAX from stdint bits headers\n\ni386 was done with the big commit but I missed the others\n"},{"hash":"9578f0530ae9eebfc9928b76f8ab2972131c2dac","date":"2013-07-23T00:58:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"undefine internal-use type macros at the end of alltypes.h\n\nthis patch is something of a compromise for a compatibility\nregression discovered after the header refactoring: libtiff uses\n_Int64 for its own use. this is absolutely wrong, invalid C, and\nshould not be supported, but it's also frustrating for users when code\nthat used to work suddenly breaks.\n\nrather than leave the breakage in place or change musl internals to\naccommodate broken software, I've found a change that makes the\nproblem go away and improves musl. by undefining these macros at the\nend of alltypes.h, the temptation to use them in other headers is\nremoved. (for example, I almost used _Int64 in sys/types.h to define\nu_int64_t rather than adding it back to alltypes.h.) by confining use\nof these macros to alltypes.h, we keep it easy to go back and change\nthe implementation of alltypes later, if needed.\n"},{"hash":"a80847d86a8865a78fdbebe7f9e2533f7a74e010","date":"2013-07-23T01:22:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"enhance build process to allow selective -O3 optimization\n\nthe motivation for this patch is that the vast majority of libc is\ncode that does not benefit at all from optimizations, but that certain\ncomponents like string/memory operations can be major performance\nbottlenecks.\n\nat the same time, the old -falign-*=1 options are removed, since they\nwere only beneficial for avoiding bloat when global -O3 was used, and\nin that case, they may have prevented some of the performance gains.\n\nto be the most useful, this patch will need further tuning. in\nparticular, research is needed to determine which components should be\nbuilt with -O3 by default, and it may be desirable to remove the\nhard-coded -O3 and instead allow more customization of the\noptimization level used for selected modules.\n"},{"hash":"70a92bc968156155dd578f7fb1d4c4e3fceb32f8","date":"2013-07-24T03:18:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix heap corruption bug in memalign\n\nthis bug was caught by the new footer-corruption check in realloc and\nfree.\n\nif the block returned by malloc was already aligned to the desired\nalignment, memalign's logic to split off the misaligned head was\nincorrect; rather than writing to a point inside the allocated block,\nit was overwriting the footer of the previous block on the heap with\nthe value 1 (length 0 plus an in-use flag).\n\nfortunately, the impact of this bug was fairly low. (this is probably\nwhy it was not caught sooner.) due to the way the heap works, malloc\nwill never return a block whose previous block is free. (doing so would\nbe harmful because it would increase fragmentation with no benefit.)\nthe footer is actually not needed for in-use blocks, except that its\nin-use bit needs to remain set so that it does not get merged with\nfree blocks, so there was no harm in it being set to 1 instead of the\ncorrect value.\n\nhowever, there is one case where this bug could have had an impact: in\nmulti-threaded programs, if another thread freed the previous block\nafter memalign's call to malloc returned, but before memalign\noverwrote the previous block's footer, the resulting block in the free\nlist could be left in a corrupt state. I have not analyzed the impact\nof this bad state and whether it could lead to more serious\nmalfunction.\n"},{"hash":"4a30ba5ca4072e85e42e84547572e958871952a2","date":"2013-07-24T03:40:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove redundant check in memalign\n\nthe case where mem was already aligned is handled earlier in the\nfunction now.\n"},{"hash":"9693501c158d68431962938cb02e7d8d2ef89ca3","date":"2013-07-24T06:17:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change jmp_buf to share an underlying type and struct tag with sigjmp_buf\n\nthis is necessary to meet the C++ ABI target. alternatives were\nconsidered to avoid the size increase for non-sig jmp_buf objects, but\nthey seemed to have worse properties. moreover, the relative size\nincrease is only extreme on x86[_64]; one way of interpreting this is\nthat, if the size increase from this patch makes jmp_buf use too much\nmemory, then the program was already using too much memory when built\nfor non-x86 archs.\n"},{"hash":"17276be31692880e56c93132e5d85fa9dd6c003f","date":"2013-07-24T06:38:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move the dynamic linker's jmp_buf from static to automatic storage\n\nthis more than compensates for the size increase of jmp_buf, and\ngreatly reduces bss/data size on archs with huge jmp_buf.\n"},{"hash":"e152ee9778846c1f233641b2d3562ccdb081c6a9","date":"2013-07-24T15:53:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support STB_GNU_UNIQUE symbol bindings in dynamic linker\n\nthese are needed for some C++ library binaries including most builds\nof libstdc++. I'm not entirely clear on the rationale. this patch does\nnot implement any special semantics for them, but as far as I can\ntell, no special treatment is needed in correctly-linked programs;\nthis binding seems to exist only for catching incorrectly-linked\nprograms.\n"},{"hash":"f5dfb45f78872b2574b911af2e0a372c1dac1590","date":"2013-07-24T20:49:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make getaddrinfo with AF_UNSPEC and null host return both IPv4 and v6\n\nbased on a patch by orc, with indexing and flow control cleaned up a\nlittle bit. this code is all going to be replaced at some point in the\nnear future.\n"},{"hash":"0a37d99547b2a82880cdf8dd849f98ed39d179e1","date":"2013-07-24T21:58:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move strftime_l into strftime.c and add __-prefixed version\n\nthe latter is both for ABI purposes, and to facilitate eventually\nadding LC_TIME support. it's also nice to eliminate an extra source\nfile.\n"},{"hash":"cccf64e281026a06ba03c1d4157237013e763ad2","date":"2013-07-24T22:05:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add __wcsftime_l symbol\n\nunlike the strftime commit, this one is purely an ABI compatibility\nissue. the previous version of the code would have worked just as well\nwith LC_TIME once LC_TIME support is added.\n"},{"hash":"17a60f9d327c6f8b5707a06f9497d846e75c01f2","date":"2013-07-24T22:11:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _l versions of strtod family functions, purely as aliases\n\nthis is a cheat since the _l versions take an extra argument, but\nsince these functions are only here for ABI purposes, it doesn't\nreally matter as long as the ABI matches. if the non-__-prefixed\nversions are eventually made public, they should proabably be real\nfunctions rather than hacks like this.\n"},{"hash":"4b0306c83c8c3614afbaf18a18e22d24f335ea04","date":"2013-07-24T22:17:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prepare strcoll/wcscoll for LC_COLLATE support and add ABI symbols\n"},{"hash":"8f6ec7217f9d5446205b0b0dedb627b79e416363","date":"2013-07-24T22:17:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SO_SELECT_ERR_QUEUE to socket.h\nintroduced in linux-v3.10 commit 7d4c04fc170087119727119074e72445f2bb192b\n"},{"hash":"b5e409df70ff83f45b0e6f460b07e791c8d51c76","date":"2013-07-24T22:17:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove TCP_COOKIE_TRANSACTIONS from tcp.h\nremoved in linux-v3.10 in commit 1a2c6181c4a1922021b4d7df373bba612c3e5f04\n"},{"hash":"d74e462a76d37ce10a048d3794ca89ca7d480ddb","date":"2013-07-24T22:17:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add CLOCK_TAI (and CLOCK_SGI_CYCLE) clock ids to time.h\nadded in linux-v3.10 commit 1ff3c9677bff7e468e0c487d0ffefe4e901d33f4\n"},{"hash":"b5c07e45fc40f4486f9c3441765ea2ae649cf99c","date":"2013-07-24T22:17:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add if_ether.h constants ETH_P_802_3_MIN and ETH_P_BATMAN\nsee linux commits 4f99ad51292078cc47343c17d3870764588cff73 and\ne5c5d22e8dcf7c2d430336cbf8e180bd38e8daf1\n"},{"hash":"a512c7d8496d587281a1da41adc02c7785339429","date":"2013-07-24T22:17:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add PTRACE_PEEKSIGINFO to ptrace.h\nadded in linux-v3.10 commit 84c751bd4aebbaae995fe32279d3dba48327bad4\nusing stdint.h types for the new ptrace_peeksiginfo_args struct\n"},{"hash":"4350935ca4521b647472b8c18053325e07541ba1","date":"2013-07-24T22:40:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ABI compat aliases for a number of locale_t functions\n"},{"hash":"ad4a536769b5d4a736e324a7416571b0c17e47b9","date":"2013-07-24T22:44:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update strxfrm/wcsxfrm for future LC_COLLATE support and ABI compat\n"},{"hash":"87be54a135db6d9ad16fcffe72b05c8d23b0f089","date":"2013-07-24T22:52:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rework langinfo code for ABI compat and for use by time code\n"},{"hash":"b54f169bfd2e1ca39d7e16345195418ec955df4e","date":"2013-07-24T23:56:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update siginfo according to linux headers\n\nlinux commit a0727e8ce513fe6890416da960181ceb10fbfae6 (2012-04-12)\nadded siginfo fields for SIGSYS (seccomp uses it)\n\nlinux commit ad5fa913991e9e0f122b021e882b0d50051fbdbc (2009-09-16)\nadded siginfo field and si_code values for SIGBUS (hwpoison signal)\n"},{"hash":"3d4583c3fba8989a596506619277ecd68768d9ab","date":"2013-07-25T00:22:05.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add protocol families PF_IB and PF_VSOCK to socket.h\n\nlinux commit 8d36eb01da5d371feffa280e501377b5c450f5a5 (2013-05-29)\nadded PF_IB for InfiniBand\n\nlinux commit d021c344051af91f42c5ba9fdedc176740cbd238 (2013-02-06)\nadded PF_VSOCK for VMware sockets\n"},{"hash":"a926fe26c126a8c4a2a4211321459a68675d9dcd","date":"2013-07-25T03:17:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect type for new si_call_addr in siginfo_t\n\napparently the original kernel commit's i386 version of siginfo.h\ndefined this field as unsigned int, but the asm-generic file always\nhad void *. unsigned int is obviously not a suitable type for an\naddress, in a non-arch-specific file, and glibc also has void * here,\nso I think void * is the right type for it.\n\nalso fix redundant type specifiers.\n"},{"hash":"43d2531316270633589c67cf0c4d6d01e520a397","date":"2013-07-25T03:21:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"do not include math modules in the default -O3 optimization set\n\nit's not clear that -O3 helps them, and gcc seems to have floating\npoint optimization bugs that introduce additional failures when -O3 is\nused on some of these files.\n"},{"hash":"1cd417bdf10366d63cc875e285c6418709a58c17","date":"2013-07-25T07:20:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make inet_ntop format v4-mapped ipv6 addresses properly\n\nbased on a patch by orc. POSIX actually fails to specify the format of\nthe ntop conversion; presumably, any output that will correctly\nround-trip back via the (well-specified) pton operation is acceptable.\nthe new behavior is much more convenient than the old, however.\n\nthis patch also affects getnameinfo, which is implemented in terms of\ninet_ntop and which is the preferred interface for performing this\nconversion.\n\nI've also removed some inexplicable cruft (filling the buffer with 'x'\nbefore doing anything) whose origin I was unable to track down.\n"},{"hash":"f9dd79c8d191a8a5356d146c7ccf956677fea4e9","date":"2013-07-25T07:30:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined strcpy call in inet_ntop\n\nsource and dest arguments for strcpy cannot overlap, so memmove must\nbe used here. the length is already known from the above loop.\n"},{"hash":"c5e34dabbb47d8e97a4deccbb421e0cd93c0094b","date":"2013-07-26T05:49:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new mostly-C crt1 implementation\n\nthe only immediate effect of this commit is enabling PIE support on\nsome archs that did not previously have any Scrt1.s, since the\nexisting asm files for crt1 override this C code. so some of the\ncrt_arch.h files committed are only there for the sake of documenting\nwhat their archs \"would do\" if they used the new C-based crt1.\n\nthe expectation is that new archs should use this new system rather\nthan using heavy asm for crt1. aside from being easier and less\nerror-prone, it also ensures that PIE support is available immediately\n(since Scrt1.o is generated from the same C source, using -fPIC)\nrather than having to be added as an afterthought in the porting\nprocess.\n"},{"hash":"16ac00ac46a14a568ce836db09ffc3f21799690d","date":"2013-07-26T07:10:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc build breakage from dynamic linker path search changes\n"},{"hash":"876748ead3de7798623c09af835a4b56dcc28e0f","date":"2013-07-26T18:25:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix computation of entry point and main app phdrs when invoking via ldso\n\nentry point was wrong for PIE. e_entry was being treated as an\nabsolute value, whereas it's actually relative to the load address\n(which is zero for non-PIE).\n\nphdr pointer was wrong for non-PIE. e_phoff was being treated as\nload-address-relative, whereas it's actually a file offset in the ELF\nfile. in any case, map_library was already computing it correctly, and\nthe incorrect code in __dynlink was overwriting it with junk.\n"},{"hash":"a97a050eca5167404667f38ad3b5bbc86f987e69","date":"2013-07-26T18:41:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make ldd report the libc/dynamic linker itself\n"},{"hash":"ce053255218bf1901950ba9e770f495f086f9e87","date":"2013-07-26T18:53:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ABI symbols for strtol family functions\n\nthese odd names are actually generated by mess in glibc's stdlib.h, so\nany glibc-linked program using strtol needs them to run against musl.\n"},{"hash":"77830507bed92a62ab230b499d5b38ae45d208a4","date":"2013-07-26T19:51:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"report that posix_spawn is supported in unistd.h and sysconf\n"},{"hash":"a6d39fdfa46b7d7664e302f11384c88d7a9a1e3b","date":"2013-07-27T03:07:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"report presence of ADV and MSG options in unistd.h and sysconf\n"},{"hash":"bf7b7282f5cd65bcdd80f55eeebc90fab50c9159","date":"2013-07-27T04:02:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"a few more fixes for unistd/sysconf feature reporting\n"},{"hash":"54446d730cfb17c5f7bcf57f139458678f5066cc","date":"2013-07-27T21:11:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add wrapper headers, with warnings, for various incorrect names under sys\n\nalso add a warning to the existing sys/poll.h. the warning is absent\nfrom sys/dir.h because it is actually providing a slightly different\nAPI to the program, and thus just replacing the #include directive is\nnot a valid fix to programs using this one.\n"},{"hash":"d53b1f820c8882906511f16dbdeda0d69ae38c47","date":"2013-07-27T21:47:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorder strftime to eliminate the incorrect indention level\n\nthis change is in preparation for possibly adding support for the\nfield width and padding specifiers added in POSIX 2008.\n"},{"hash":"f44e239f9f36c4be049f98d6a3d33644168e40a7","date":"2013-07-28T01:37:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix indention-with-spaces\n"},{"hash":"1ae4bc42808111d6b3f50c063de102f162051986","date":"2013-07-28T07:41:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix semantically incorrect use of LC_GLOBAL_LOCALE\n\nLC_GLOBAL_LOCALE refers to the global locale, controlled by setlocale,\nnot the thread-local locale in effect which these functions should be\nusing. neither LC_GLOBAL_LOCALE nor 0 has an argument to the *_l\nfunctions has behavior defined by the standard, but 0 is a more\nlogical choice for requesting the callee to lookup the current locale.\nin the future I may move the current locale lookup the the caller (the\nnon-_l-suffixed wrapper).\n\nat this point, all of the locale logic is dummied out, so no harm was\ndone, but it should at least avoid misleading usage.\n"},{"hash":"7efa12a04ac4a14d243c2276519e152ed815b4d2","date":"2013-07-28T15:30:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing erfcl wrapper for archs where long double is plain double\n"},{"hash":"372a948b8139c6583045b2cd91b6b91fcb2e5881","date":"2013-07-29T07:20:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.12\n"},{"hash":"48748143a34fb534e51378ec82816d7bbfb22df7","date":"2013-07-30T13:14:56.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"use separate sigaction buffers for old and new data\n\nin signal() it is needed since __sigaction uses restrict in parameters\nand sharing the buffer is technically an aliasing error. do the same\nfor the syscall, as at least qemu-user does not handle it properly.\n"},{"hash":"9932505b680c3890401c45ac782a61d94aa05071","date":"2013-07-30T17:04:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some prctl macros that were incorrectly copied into this file\n"},{"hash":"9a8d7bee80063118439fd6b368b9bb43d930ea19","date":"2013-07-30T22:15:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add macros for new(ish) prctl commands\n"},{"hash":"d0c6cb05e71e624338571cda28f5c17d3ab0004c","date":"2013-07-31T04:04:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't call null pointer if DT_INIT/DT_FINI are null\n\nit's not clear to me why the linker even outputs these headers if they\nare null, but apparently it does so. with the default startfiles, they\nwill never be null anyway, but this patch allows eliminating crti,\ncrtn, crtbegin, and crtend (leaving only crt1) if the toolchain is\nusing init_array/fini_array (or for a C-only, no-ctor environment).\n"},{"hash":"c4f49a6a726fcd07bb15198ac4556100320934a9","date":"2013-07-31T18:05:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bug where read error was treated as success reading library headers\n"},{"hash":"339516addbde87760f3c0f175a4abcf5d629df54","date":"2013-07-31T18:42:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some sanity checks in dynamic loader code\n\nreject elf files which are not ET_EXEC/ET_DYN type as bad exec format,\nand reject ET_EXEC files when they cannot be loaded at the correct\naddress, since they are not relocatable at runtime. the main practical\nbenefit of this is to make dlopen of the main program fail rather than\nproducing an unsafe-to-use handle.\n"},{"hash":"f8c376da9512c8c8a97781100aa04533740171d4","date":"2013-07-31T18:59:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prevent passing PT_INTERP name to dlopen from double-loading libc\n\nthe dev/inode for the main app and the dynamic linker (\"interpreter\")\nare not available, so the subsequent checks don't work. in general we\ndon't want to make exact string matches to existing libraries prevent\nloading new ones, since this breaks loading upgraded modules in\nmodule-loading systems. so instead, special-case it.\n\nthe motivation for this fix is that calling dlopen on the names\nreturned by dl_iterate_phdr or walking the link map (obtained by\ndlinfo) seem to be the only methods available to an application to\nactually get a list of open dso handles.\n"},{"hash":"27593d3a357073cfd24e6b09e207b8c742cd2dd7","date":"2013-07-31T19:14:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix theoretical out-of-bound access in dynamic linker\n\none of the arguments to memcmp may be shorter than the length l-3, and\nmemcmp is under no obligation not to access past the first byte that\ndiffers. instead use strncmp which conveys the correct semantics. the\nperformance difference is negligible here and since the code is only\nuse for shared libc, both functions are already linked anyway.\n"},{"hash":"5db951ef80cae8b627f95b995811bf916c069757","date":"2013-07-31T19:19:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in pthread_getattr_np, use mremap rather than madvise to measure stack\n\nthe original motivation for this patch was that qemu (and possibly\nother syscall emulators) nop out madvise, resulting in an infinite\nloop. however, there is another benefit to this change: madvise may\nactually undo an explicit madvise the application intended for its\nstack, whereas the mremap operation is a true nop. the logic here is\nthat mremap must fail if it cannot resize the mapping in-place, and\nthe caller knows that it cannot resize in-place because it knows the\nnext page of virtual memory is already occupied.\n"},{"hash":"4a1f55e92fa74ee382909baa96302231f566b5e1","date":"2013-08-01T21:12:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around gcc 4.8's generation of self-referential mem* functions at -O3\n"},{"hash":"926272ddffa293ee68ffeb01422fc8c792acf428","date":"2013-08-02T01:44:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimized memset asm for i386 and x86_64\n\nthe concept of both versions is the same; they differ only in details.\nfor long runs, they use \"rep movsl\" or \"rep movsq\", and for small\nruns, they use a trick, writing from both ends towards the middle,\nthat reduces the number of branches needed. in addition, if memset is\ncalled multiple times with the same length, all branches will be\npredicted; there are no loops.\n\nfor larger runs, there are likely faster approaches than \"rep\", at\nleast on some cpu models. for 32-bit, it's unlikely that there is any\nfaster approach that does not require non-baseline instructions; doing\nanything fancier would require inspecting cpu capabilities. for\n64-bit, there may very well be faster versions that work on all\nmodels; further optimization could be explored in the future.\n\nwith these changes, memset is anywhere between 50% faster and 6 times\nfaster, depending on the cpu model and the length and alignment of the\ndestination buffer.\n"},{"hash":"c4685ae429a0cce4b285859d62a71fe603f0a864","date":"2013-08-02T04:48:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make mkdtemp and mkstemp family leave template unchanged on fail\n\nalso refactor mkdtemp based on new shared temp code, removing\ndependency on the deprecated mktemp, whose behavior made this logic\nmore difficult.\n"},{"hash":"9a97d103fba259f3f789c143d97d7f22d392429b","date":"2013-08-02T04:52:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove (no longer useful) namespace-protected __mktemp symbol\n"},{"hash":"38f44d692310dd669ad9ee13a2993c91e81d2721","date":"2013-08-02T05:06:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix (deprecated) mktemp logic and update it to match other temp functions\n\nthe access function cannot be used to check for existence, because it\noperates using real uid/gid rather than effective to determine\naccessibility; this matters for the non-final path components.\ninstead, use stat. failure of stat is success if only the final\ncomponent is missing (ENOENT) and otherwise is failure.\n"},{"hash":"7443dd271c09e8209a9478388fcd64a633b485e7","date":"2013-08-02T13:25:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized dyn variable in map_library\n\nthis can only happen for invalid library files, but they were not\ndetected reliably because the variable was uninitialized.\n"},{"hash":"d5884a574cf156c8346e84b495b5cb29bbbd2d1a","date":"2013-08-02T13:56:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve error handling in map_library and support long phdrs\n\npreviously, errno could be meaningless when the caller wrote it to the\ndlerror string or stderr. try to make it meaningful. also, fix\nincorrect check for over-long program headers and instead actually\nsupport them by allocating memory if needed.\n"},{"hash":"8d01dfc72aeecb5209e17d7a5049cb6fd326241a","date":"2013-08-02T13:59:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"if map_library has allocated a buffer for phdrs, free it on success too\n\nthis fixes an oversight in the previous commit.\n"},{"hash":"78c6d30fd3bb13f5fc6e1ad42675fe5475a87641","date":"2013-08-02T14:00:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide useless 64-bit fcntl macros with _LARGEFILE64_SOURCE\n\nthis is all useless but part of the API, which is part of the\n_GNU_SOURCE API, so something may need them.\n"},{"hash":"3e3753c1a8e047dc84f9db1dc26bb046cff457a6","date":"2013-08-02T14:02:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move RPATH search after LD_LIBRARY_PATH search\n\nthis is the modern way, and the only way that makes any sense. glibc\nhas this complicated mechanism with RPATH and RUNPATH that controls\nwhether RPATH is processed before or after LD_LIBRARY_PATH, presumably\nto support legacy binaries, but there is no compelling reason to\nsupport this, and better behavior is obtained by just fixing the\nsearch order.\n"},{"hash":"0dc4824479e357a3e23a02d35527e23fca920343","date":"2013-08-02T16:25:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around linux's lack of flags argument to fchmodat syscall\n\npreviously, the AT_SYMLINK_NOFOLLOW flag was ignored, giving\ndangerously incorrect behavior -- the target of the symlink had its\nmodes changed to the modes (usually 0777) intended for the symlink).\nthis issue was amplified by the fact that musl provides lchmod, as a\nwrapper for fchmodat, which some archival programs take as a sign that\nsymlink modes are supported and thus attempt to use.\n\nemulating AT_SYMLINK_NOFOLLOW was a difficult problem, and I\noriginally believed it could not be solved, at least not without\ndepending on kernels newer than 3.5.x or so where O_PATH works halfway\nwell. however, it turns out that accessing O_PATH file descriptors via\ntheir pseudo-symlink entries in /proc/self/fd works much better than\ntrying to use the fd directly, and works even on older kernels.\nmoreover, the kernel has permanently pegged these references to the\ninode obtained by the O_PATH open, so there should not be race\nconditions with the file being moved, deleted, replaced, etc.\n"},{"hash":"c8c0844f7fbcb955848ca84432e5ffcf71f1cef1","date":"2013-08-02T16:59:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"debloat code that depends on /proc/self/fd/%d with shared function\n\nI intend to add more Linux workarounds that depend on using these\npathnames, and some of them will be in \"syscall\" functions that, from\nan anti-bloat standpoint, should not depend on the whole snprintf\nframework.\n"},{"hash":"9ca1f62b0c0d3e50480eb654ac941ff943ce0558","date":"2013-08-02T17:33:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make fchdir, fchmod, fchown, and fstat support O_PATH file descriptors\n\non newer kernels, fchdir and fstat work anyway. this same fix should\nbe applied to any other syscalls that are similarly affected.\n\nwith this change, the current definitions of O_SEARCH and O_EXEC as\nO_PATH are mostly conforming to POSIX requirements. the main remaining\nissue is that O_NOFOLLOW has different semantics.\n"},{"hash":"feff6b43e53cedf6887c9fcd4f3993a6244de5ef","date":"2013-08-02T20:52:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing c++ extern \"C\" wrapping to link.h\n"},{"hash":"0c7294ef30544f825430a3692c717f6f470974fe","date":"2013-08-02T22:05:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add wcsftime_t alias\n\nthis is a nonstandard extension.\n"},{"hash":"2e5dfa515f78f5a67eb0cd7e323ab6f3ed76c15d","date":"2013-08-02T22:14:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix feature test macro logic for _BSD_SOURCE\n\nin several places, _BSD_SOURCE was not even implying POSIX, resulting\nin it being subtractive rather than additive (compared to the default\nfeatures).\n"},{"hash":"2f820f3b1f639fee30f5bfa31aa3191758573f25","date":"2013-08-02T22:34:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add legacy function valloc\n\nit was already declared in stdlib.h, but not defined anywhere.\n"},{"hash":"86cc54b577f445da1582d2cf1ac3eff064ca27ef","date":"2013-08-02T23:34:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"protect against long double type mismatches (mainly powerpc for now)\n\ncheck in configure to be polite (failing early if we're going to fail)\nand in vfprintf.c since that is the point at which a mismatching type\nwould be extremely dangerous.\n"},{"hash":"2d2da648f6aa07cfca3d6065d9126897e42927a1","date":"2013-08-03T01:13:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix aliasing violations in tsearch functions\n\npatch by nsz. the actual object the caller has storing the tree root\nhas type void *, so accessing it as struct node * is not valid.\ninstead, simply access the value, move it to a temporary of the\nappropriate type and work from there, then move the result back.\n"},{"hash":"d3a98ff69a41d96d0a73f1d5b686f73a03a2f9df","date":"2013-08-03T01:20:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make tdestroy allow null function pointer if no destructor is needed\n\nthis change is to align with a change in the glibc interface.\n"},{"hash":"a89aaee110b27f90b7e3b9c3823d6ba7cb9f0d24","date":"2013-08-03T06:15:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add legacy euidaccess function and eaccess alias for it\n\nthis is mainly for ABI compat purposes.\n"},{"hash":"f0ceb5abd972767209a9b3069e56c5f94b00602a","date":"2013-08-03T06:18:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add prototypes for euidaccess/eaccess\n"},{"hash":"89384f78ce79efba22ab3a77e50c3f2a95233f8c","date":"2013-08-03T06:28:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"collapse euidaccess to a call to faccessat\n\nit turns out Linux is buggy for faccessat, just like fchmodat: the\nkernel does not actually take a flags argument. so we're going to have\nto emulate it there.\n"},{"hash":"0a05eace163cee9b08571d2ff9d90f5e82d9c228","date":"2013-08-03T07:16:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix faccessat to support AT_EACCESS flag\n\nthis is another case of the kernel syscall failing to support flags\nwhere it needs to, leading to horrible workarounds in userspace. this\ntime the workaround requires changing uid/gid, and that's not safe to\ndo in the current process. in the worst case, kernel resource limits\nmight prevent recovering the original values, and then there would be\nno way to safely return. so, use the safe but horribly inefficient\nalternative: forking. clone is used instead of fork to suppress\nsignals from the child.\n\nfortunately this worst-case code is only needed when effective and\nreal ids mismatch, which mainly happens in suid programs.\n"},{"hash":"14012b91f2b52f70fd3f3bb807fb880654337da5","date":"2013-08-03T07:20:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some new linux AT_* flags\n"},{"hash":"7356c2554e33cf16768616e8e3ae4a4f5a5aac17","date":"2013-08-03T17:20:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix multiple bugs in SIGEV_THREAD timers\n\n1. the thread result field was reused for storing a kernel timer id,\nbut would be overwritten if the application code exited or cancelled\nthe thread.\n\n2. low pointer values were used as the indicator that the timer id is\na kernel timer id rather than a thread id. this is not portable, as\nmmap may return low pointers on some conditions. instead, use the fact\nthat pointers must be aligned and kernel timer ids must be\nnon-negative to map pointers into the negative integer space.\n\n3. signals were not blocked until after the timer thread started, so a\nrace condition could allow a signal handler to run in the timer thread\nwhen it's not supposed to exist. this is mainly problematic if the\ncalling thread was the only thread where the signal was unblocked and\nthe signal handler assumes it runs in that thread.\n"},{"hash":"7c6c290695cb8726e876ff4fb8413913f661fc0b","date":"2013-08-03T20:27:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add system for resetting TLS to initial values\n\nthis is needed for reused threads in the SIGEV_THREAD timer\nnotification system, and could be reused elsewhere in the future if\nneeded, though it should be refactored for such use.\n\nfor static linking, __init_tls.c is simply modified to export the TLS\ninfo in a structure with external linkage, rather than using statics.\nthis perhaps makes the code more clear, since the statics were poorly\nnamed for statics. the new __reset_tls.c is only linked if it is used.\n\nfor dynamic linking, the code is in dynlink.c. sharing code with\n__copy_tls is not practical since __reset_tls must also re-zero\nthread-local bss.\n"},{"hash":"a7f18a55298ffaa287336fd0c81dcd3fe45e16b6","date":"2013-08-03T21:10:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"have new timer threads unblock their own SIGTIMER\n\nunblocking it in the pthread_once init function is not sufficient,\nsince multiple threads, some of them with the signal blocked, could\nalready exist before this is called; timers started from such threads\nwould be non-functional.\n"},{"hash":"734062b298e129a8f8bdae299f8d2b7b19419867","date":"2013-08-05T17:14:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"iconv support for legacy Korean encodings\n\nlike for other character sets, stateful iso-2022 form is not supported\nyet but everything else should work. all charset aliases are treated\nthe same, as Windows codepage 949, because reportedly the EUC-KR\ncharset name is in widespread (mis?)usage in email and on the web for\ndata which actually uses the extended characters outside the standard\n93x94 grid. this could easily be changed if desired.\n\nthe principle of this converter for handling the giant bulk of rare\nHangul syllables outside of the standard KS X 1001 93x94 grid is the\nsame as the GB18030 converter's treatment of non-explicitly-coded\nUnicode codepoints: sequences in the extension range are mapped to an\ninteger index N, and the converter explicitly computes the Nth Hangul\nsyllable not explicitly encoded in the character map. empirically,\nthis requires at most 7 passes over the grid. this approach reduces\nthe table size required for Korean legacy encodings from roughly 44k\nto 17k and should have minimal performance impact on real-world text\nconversions since the \"slow\" characters are rare. where it does have\nimpact, the cost is merely a large constant time factor.\n"},{"hash":"a0cc022cc79984648e0ea5e7e5e7620686c56b60","date":"2013-08-07T15:14:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ecvt/fcvt decimal point position output\n\nthese functions are obsolete and have no modern standard. the text in\nSUSv2 is highly ambiguous, specifying that \"negative means to the left\nof the returned digits\", which suggested to me that 0 would mean to\nthe right of the first digit. however, this does not agree with\nhistoric practice, and the Linux man pages are more clear, specifying\nthat a negative value means \"that the decimal point is to the left of\nthe start of the string\" (in which case, 0 would mean the start of the\nstring, in accordance with historic practice).\n"},{"hash":"983acebc8a22866f720fbdb60aadc2a9c074d8f1","date":"2013-08-07T15:19:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make fcvt decimal point location for zero make more sense\n\nthe (obsolete) standard allows either 0 or 1 for the decimal point\nlocation in this case, but since the number of zero digits returned in\nthe output string (in this implementation) is one more than the number\nof digits the caller requested, it makes sense for the decimal point\nto be logically \"after\" the first digit. in a sense, this change goes\nwith the previous commit which fixed the value of the decimal point\nlocation for non-zero inputs.\n"},{"hash":"19b4a0a20efc6b9df98b6a43536ecdd628ba4643","date":"2013-08-07T17:16:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add Big5 charset support to iconv\n\nat this point, it is just the common base charset equivalent to\nWindows CP 950, with no further extensions. HKSCS and possibly other\nsupersets will be added later. other aliases may need to be added too.\n"},{"hash":"6a0aa82f5161431bc93e1e83065afc9b8c175fc4","date":"2013-08-08T18:39:54.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"sys/personality.h: add missing macros\n"},{"hash":"e28c2ecae43468e2abf92957d3622dc830d90ada","date":"2013-08-08T18:57:35.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"sys/personality.h: add missing C++ compat\n"},{"hash":"72482f9020e4362b8d35849df6dca49f26d24c54","date":"2013-08-08T20:10:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around libraries with versioned symbols in dynamic linker\n\nthis commit does not add versioning support; it merely fixes incorrect\nlookups of symbols in libraries that contain versioned symbols.\npreviously, the version information was completely ignored, and\nempirically this seems to have resulted in the oldest version being\nchosen, but I am uncertain if that behavior was even reliable.\n\nthe new behavior being introduced is to completely ignore symbols\nwhich are marked \"hidden\" (this seems to be the confusing nomenclature\nfor non-current-version) when versioning is present. this should solve\nall problems related to libraries with symbol versioning as long as\nall binaries involved are up-to-date (compatible with the\nlatest-version symbols), and it's the needed behavior for dlsym under\nall circumstances.\n"},{"hash":"d4d6d6f322cd13cfca2b179345cdcf67997c3529","date":"2013-08-09T03:17:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block signals during fork\n\nthere are several reasons for this. some of them are related to race\nconditions that arise since fork is required to be async-signal-safe:\nif fork or pthread_create is called from a signal handler after the\nfork syscall has returned but before the subsequent userspace code has\nfinished, inconsistent state could result. also, there seem to be\nkernel and/or strace bugs related to arrival of signals during fork,\nat least on some versions, and simply blocking signals eliminates the\npossibility of such bugs.\n"},{"hash":"9848e64819ce31787085a3d44df628bdf1091792","date":"2013-08-09T23:56:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block all signals, even implementation-internal ones, in faccessat child\n\nthe child process's stack may be insufficient size to support a signal\nframe, and there is no reason these signal handlers should run in the\nchild anyway.\n"},{"hash":"65d7aa4dfde9697b93d765f2f736e5f4a38bdfd5","date":"2013-08-10T00:04:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing errno from exec failure in posix_spawn\n\nfailures prior to the exec attempt were reported correctly, but on\nexec failure, the return value contained junk.\n"},{"hash":"3c5c5e6f926feea7b823a96c2872885b100fe31f","date":"2013-08-10T01:03:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize posix_spawn to avoid spurious sigaction syscalls\n\nthe trick here is that sigaction can track for us which signals have\never had a signal handler set for them, and only those signals need to\nbe considered for reset. this tracking mask may have false positives,\nsince it is impossible to remove bits from it without race conditions.\nfalse negatives are not possible since the mask is updated with atomic\noperations prior to making the sigaction syscall.\n\nimplementation-internal signals are set to SIG_IGN rather than SIG_DFL\nso that a signal raised in the parent (e.g. calling pthread_cancel on\nthe thread executing pthread_spawn) does not have any chance make it\nto the child, where it would cause spurious termination by signal.\n\nthis change reduces the minimum/typical number of syscalls in the\nchild from around 70 to 4 (including execve). this should greatly\nimprove the performance of posix_spawn and other interfaces which use\nit (popen and system).\n\nto facilitate these changes, sigismember is also changed to return 0\nrather than -1 for invalid signals, and to return the actual status of\nimplementation-internal signals. POSIX allows but does not require an\nerror on invalid signal numbers, and in fact returning an error tends\nto confuse applications which wrongly assume the return value of\nsigismember is boolean.\n"},{"hash":"76fbf6ad4bb2f697512a1541d296c1f749e3b504","date":"2013-08-10T01:25:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change sigset_t functions to restrict to _NSIG\n\nthe idea here is to avoid advertising signals that don't exist and to\nmake these functions safe to call (e.g. from within other parts of the\nimplementation) on fake sigset_t objects which do not have the HURD\npadding.\n"},{"hash":"eeb0328f203cfb8990b3eee5ee31d931fc539ceb","date":"2013-08-11T01:15:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add cpu affinity interfaces\n\nthis first commit just includes the CPU_* and sched_* interfaces, not\nthe pthread_* interfaces, which may be added later. simple\nsanity-check testing has been done for the basic interfaces, but most\nof the macros have not yet been tested.\n"},{"hash":"7406fdf5a18b37330de108abb0106f44ebdae2c6","date":"2013-08-11T01:41:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add pthread_setaffinity_np and pthread_getaffinity_np functions\n"},{"hash":"41c632824c08ac2c9eea43b30d1b3515dd910df6","date":"2013-08-11T03:33:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix definitions of WIFSTOPPED and WIFSIGNALED to support up to signal 127\n\nmips has signal numbers up to 127 (formerly, up to 128, but the last\none never worked right and caused kernel panic when used), so 127 in\nthe \"signal number\" field of the wait status is insufficient for\ndetermining that the process was stopped. in addition, a nonzero value\nin the upper bits must be present, indicating the signal number which\ncaused the process to be stopped.\n\ndetails on this issue can be seen in the email with message id\nCAAG0J9-d4BfEhbQovFqUAJ3QoOuXScrpsY1y95PrEPxA5DWedQ@mail.gmail.com on\nthe linux-mips mailing list, archived at:\nhttp://www.linux-mips.org/archives/linux-mips/2013-06/msg00552.html\nand in the associated thread about fixing the mips kernel bug.\n\ncommit 4a96b948687166da26a6c327e6c6733ad2336c5c fixed the\ncorresponding issue in uClibc, but introduced a multiple-evaluation\nissue for the WIFSTOPPED macro.\n\nfor the most part, none of these issues affected pure musl systems,\nsince musl has up until now (incorrectly) defined SIGRTMAX as 64 on\nall archs, even mips. however, interpreting status of non-musl\nprograms on mips may have caused problems. with this change, the full\nrange of signal numbers can be made available on mips.\n"},{"hash":"7c440977db9444d7e6b1c3dcb1fdf4ee49ca4158","date":"2013-08-11T03:39:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix _NSIG and SIGRTMAX on mips\n\na mips signal mask contains 128 bits, enough for signals 1 through\n128. however, the exit status obtained from the wait-family functions\nonly has room for values up to 127. reportedly signal 128 was causing\nkernelspace bugs, so it was removed from the kernel recently; even\nwithout that issue, however, it was impossible to support it correctly\nin userspace.\n\nat the same time, the bug was masked on musl by SIGRTMAX incorrectly\nyielding 64 on mips, rather than the \"correct\" value of 128. now that\nthe _NSIG issue is fixed, SIGRTMAX can be fixed at the same time,\nexposing the full range of signals for application use.\n\nnote that the (nonstandardized) libc _NSIG value is actually one\ngreater than the max signal number, and also one greater than the\nkernel headers' idea of _NSIG. this is the reason for the discrepency\nwith the recent kernel changes. since reducing _NSIG by one brought it\ndown from 129 to 128, rather than from 128 to 127, _NSIG/8, used\nwidely in the musl sources, is unchanged.\n"},{"hash":"90d77722511ad5e9b748f69f42c5b2a8467fa049","date":"2013-08-11T07:27:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow subarch-specific asm, including asm specific to the default\n\nthe default subarch is the one whose full name is just the base arch\nname, with no suffixes. normally, either the asm in the default\nsubarch is suitable for all subarch variants, or separate asm is\nmandatory for each variant. however, in the case of asm which is\npurely for optimization purposes, it's possible to have asm that only\nworks (or only performs well) on the default subarch, and not any othe\nthe other variants. thus, I have added a mechanism to give a name to\nthe default variant, for example \"armel\" for the default,\nlittle-endian arm. further such default-subarch names can be added in\nthe future as needed.\n"},{"hash":"7568ee4cbf317f8c21fb9b45e059db2a45c81488","date":"2013-08-11T07:43:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing a_or_l to atomic.h for non-x86 archs\n\nthis is needed for recently committed sigaction code\n"},{"hash":"804e9940049934215d2947c1068016cba852e560","date":"2013-08-11T07:49:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add subarch asm support for PIC objects/shared libc\n\nthis rule was omitted in previous subarch asm commit\n"},{"hash":"35eb1a1a9b97577e113240cd65bf9fc44b8df030","date":"2013-08-13T22:18:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide declarations for strtod_l and family\n\nthese aliases were originally intended to be for ABI compatibility\nonly, but their presence caused regressions in broken gnulib-based\nsoftware whose configure scripts detect the existing of these\nfunctions then use them without declarations, resulting in bogus\nreturn values.\n"},{"hash":"4ce6bd83456981081721b2acd8ef48b282cd88ee","date":"2013-08-14T06:48:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing MSG_EXCEPT in sys/msg.h\n"},{"hash":"fb72a97df9222be61ec582ba7b1e9ce496b65e3e","date":"2013-08-14T06:50:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rework makefile subarch logic to allow shared files\n\ninstead of subarchs getting their own .s files which are used directly\nby the makefile to replace the .c file, they now must provide a .sub\nfile whose contents are a pathname, relative to the location of the\n.sub file, which will substitute for the .c file. essentially these\nfiles are acting as symbolic links, but implemented as text files.\n"},{"hash":"cccc1844be95549e5b6c91ffc1f2c2ba3d3aab16","date":"2013-08-14T07:06:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add arm-optimized memcpy implementation from bionic libc\n\nthe approach of this implementation was heavily investigated prior to\nadopting it. attempts to obtain similar performance with pure C code\nwere capping out at about 75% of the performance of the asm, with\nconsiderably larger code size, and were fragile in that the compiler\nwould sometimes compile part of memcpy into a call to itself.\ntherefore, just using the asm seems to be the best option.\n\nthis commit is the first to make use of the new subarch-specific asm\nframework. the new armel directory is the location for arm asm that\nshould not be used for all arm subarchs, only the default one. armhf\nis the name of the little-endian hardfloat-ABI subarch, which can use\nthe exact same asm. in both cases, the build system finds the asm by\nfollowing a memcpy.sub file.\n\nthe other two subarchs, armeb and armebhf, would need a big-endian\nvariant of this code. it would not be hard to adapt the code to big\nendian, but I will hold off on doing so until there is demand for it.\n"},{"hash":"fcc522c92335783293ac19df318415cd97fbf66b","date":"2013-08-14T21:58:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"de-duplicate dn_expand, fix return value and signature, clean up\n\nthe duplicate code in dn_expand and its incorrect return values are\nboth results of the history of the code: the version in __dns.c was\noriginally written with no awareness of the legacy resolver API, and\nwas later copy-and-paste duplicated to provide the legacy API.\n\nthis commit is the first of a series that will restructure the\ninternal dns code to share as much code as possible with the legacy\nresolver API functions.\n\nI have also removed the loop detection logic, since the output buffer\nlength limit naturally prevents loops. in order to avoid long runtime\nwhen encountering a loop if the caller provided a ridiculously long\nbuffer, the caller-provided length is clamped at the maximum dns name\nlength.\n"},{"hash":"56b57f37a46dab432247bf29d96fcb11fbd02a6d","date":"2013-08-14T22:18:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix length computation in dn_expand\n\nthere are two possible points where the length is evaluated: either\nthe first 'compression' jump, or the null terminator if no jumps have\ntaken place yet. the previous code only measured the length of the\nfirst component.\n"},{"hash":"1b77b9072f374bd26eb0574b83a0d5f18d75ec60","date":"2013-08-15T10:07:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: minor scalbn*.c simplification\n"},{"hash":"f29fea00b5bc72d4b8abccba2bb1e312684d1fce","date":"2013-08-15T10:08:45.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix pow(0,-inf) to raise divbyzero flag\n"},{"hash":"cd18dc8525a275323819ac4c7826cc3404202f7b","date":"2013-08-15T10:13:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix tgamma to raise underflow for large negative values\n"},{"hash":"c599f4f4d705ba215a2672b92baa1c29d9dd0735","date":"2013-08-15T10:14:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix asin, atan, log1p, tanh to raise underflow on subnormal\n\nfor these functions f(x)=x for small inputs, because f(0)=0 and\nf'(0)=1, but for subnormal values they should raise the underflow\nflag (required by annex F), if they are approximated by a polynomial\naround 0 then spurious underflow should be avoided (not required by\nannex F)\n\nall these functions should raise inexact flag for small x if x!=0,\nbut it's not required by the standard and it does not seem a worthy\ngoal, so support for it is removed in some cases.\n\nraising underflow:\n- x*x may not raise underflow for subnormal x if FLT_EVAL_METHOD!=0\n- x*x may raise spurious underflow for normal x if FLT_EVAL_METHOD==0\n- in case of double subnormal x, store x as float\n- in case of float subnormal x, store x*x as float\n"},{"hash":"1b3973fb43fbef80dab1dfc9c788783e78ab5043","date":"2013-08-15T10:54:56.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix x86 expl.s to raise underflow and clean up special case handling\n"},{"hash":"31c5fb80b9eae86f801be4f46025bc6532a554c5","date":"2013-08-15T10:56:57.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix x86 asin, atan, exp, log1p to raise underflow\n\nunderflow is raised by an inexact subnormal float store,\nsince subnormal operations are slow, check the underflow\nflag and skip the store if it's already raised\n"},{"hash":"6d85096f49fa955e7e1473b7deb30ce55b6c8be0","date":"2013-08-15T14:05:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: clean up atan2.c\n\n* remove volatile hacks\n* don't care about inexact flag for now (removed all the +-tiny)\n* fix atanl to raise underflow properly\n* remove signed int arithmetics\n* use pi/2 instead of pi_o_2 (gcc generates the same code, which is not\ncorrect, but it does not matter: we mainly care about nearest rounding)\n"},{"hash":"411efb3bc61298b81456d0fdab39518d983a9681","date":"2013-08-15T14:18:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix i386 atan2.s to raise underflow for subnormal results\n"},{"hash":"c221af951693d526d3ae946f7e708af8e7a9bf85","date":"2013-08-15T15:13:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix pow(x,-1) to raise underflow properly\n\nif FLT_EVAL_METHOD!=0 check if (double)(1/x) is subnormal and not a\npower of 2 (if 1/x is power of 2 then either it is exact or the\nlong double to double rounding already raised inexact and underflow)\n"},{"hash":"badaa04accd6e606c5a5c448c579e4b18b6c1012","date":"2013-08-15T18:52:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add function types to arm crt assembly\n\nwithout these, calls may be resolved incorrectly if the calling code\nhas been compiled to thumb instead of arm. it's not clear to me at\nthis point whether crt_arch.h is even working if crt1.c is built as\nthumb; this needs testing. but the _init and _fini issues were known\nto cause crashes in static-linked apps when libc was built as thumb,\nand this commit should fix that issue.\n"},{"hash":"0a4a4a7a11db93c39960feea96ec9dbed969a44e","date":"2013-08-16T04:29:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build of x86_64 expl assembly\n\napparently this label change was not carried over when adapting the\nchanges from the i386 version.\n"},{"hash":"7318c62e6439fca75ca3d50ddf0bd81a151c2766","date":"2013-08-16T16:30:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support floating point environment (fenv) on armhf (hard float) subarchs\n\npatch by nsz. I've tested it on an armhf machine and it seems to be\nworking correctly.\n"},{"hash":"4918c2bb206bfaaf5a1f7d3448c2f63d5e2b7d56","date":"2013-08-16T21:09:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix detection of arm hardfloat\n\nit turns out that __SOFTFP__ does not indicate the ABI in use but\nrather that fpu instructions are not to be used at all. this is\nspecified in ARM's documentation so I'm unclear on how I previously\ngot the wrong idea. unfortunately, this resulted in the 0.9.12 release\nproducing a dynamic linker with the wrong name. fortunately, there do\nnot yet seem to be any public toolchain builds using the wrong name.\n\nthe __ARM_PCS_VFP macro does not seem to be official from ARM, and in\nfact it was missing from the very earliest gcc versions (around 4.5.x)\nthat added -mfloat-abi=hard. it would be possible on such versions to\nperform some ugly linker-based tests instead in hopes that the linker\nwill reject ABI-mismatching object files, if there is demand for\nsupporting such versions. I would probably prefer to document which\nversions are broken and warn users to manually add -D__ARM_PCS_VFP if\nusing such a version.\n\nthere's definitely an argument to be made that the fenv macros should\nbe exposed even in -mfloat-abi=softfp mode. for now, I have chosen not\nto expose them in this case, since the math library will not\nnecessarily have the capability to raise exceptions (it depends on the\nCFLAGS used to compile it), and since exceptions are officially\nexcluded from the ARM EABI, which the plain \"arm\" arch aims to\nfollow.\n"},{"hash":"63893d3ff1f9383ba3ce63a19b7de74ace319d77","date":"2013-08-16T21:32:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"some initial math asm for armhf (fabs[f] and sqrt[f])\n"},{"hash":"82fa6b43b367d047e89cfa5505ad718253fbb693","date":"2013-08-16T21:51:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix atomicity and other issues installing dynamic linker symlink\n\nln -sf is non-atomic; it unlinks the destination first. instead, make\na temporary link and rename it into place.\n\nthis commit also fixes some of the dependency tracking behavior for\nthe link. depending on the directory it's to be installed in is not\nreasonable; it causes a new link to be attempted if the library\ndirectory has been modified, but does not attempt to make a new link\njust because libc has been updated. instead, depend on the target to\nbe linked to. this will ensure that, if prefix has changed but\nsyslibdir has not, the link will be updated to point to the new\nprefix.\n"},{"hash":"453f462297062f9444ba1517d592cf31c7d7fce5","date":"2013-08-16T22:19:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure store its command line in config.mak for easy re-run\n\nproper shell quoting and pretty-printing (avoiding ugly gratuitous\nquoting and bad quoting style) is included.\n"},{"hash":"109bd65acf5180f0a48ea4c4e5f2bc6884be202d","date":"2013-08-17T20:23:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add hkscs/big5-2003/eten extensions to iconv big5\n\nwith these changes, the character set implemented as \"big5\" in musl is\na pure superset of cp950, the canonical \"big5\", and agrees with the\nnormative parts of Unicode. this means it has minor differences from\nboth hkscs and big5-2003:\n\n- the range A2CC-A2CE maps to CJK ideographs rather than numerals,\n  contrary to changes made in big5-2003.\n\n- C6CD maps to a CJK ideograph rather than its corresponding Kangxi\n  radical character, contrary to changes made in hkscs.\n\n- F9FE maps to U+2593 rather than U+FFED.\n\nof these differences, none but the last are visually distinct, and the\nlast is a character used purely for text-based graphics, not to convey\nlinguistic content.\n\nshould there be future demand for strict conformance to big5-2003 or\nhkscs mappings, the present charset aliases can be replaced with\ndistinct variants.\n\nreportedly there are other non-standard big5 extensions in common use\nin Taiwan and perhaps elsewhere, which could also be added as layers\non top of the existing big5 support.\n\nthere may be additional characters which should be added to the hkscs\ntable: the whatwg standard for big5 defines what appears to be a\nsuperset of hkscs.\n"},{"hash":"e678fc6f32e5e5c013ab4f99c38f5703b15ff6cd","date":"2013-08-18T02:21:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace system's install command with a shell script\n\nthe historical (non-standardized) install command is really\ninappropriate for installing binaries/libraries on a system that\nutilizes memory-mapped executable files. rather than replacing an\nexisting file atomically, it overwrites the existing file. this can\ncause running programs to see a partially-modified version of the\nfile, resulting in unpredictable behavior, or SIGBUS. a MAP_COPY mode\nfor mmap would get around this problem, but Linux lacks MAP_COPY.\n\nthe shell script added with this commit works around the problem by\nwriting temporary files and moving them into place. unlike the\nhistorical install utility, it also support a -l option for installing\na symbolic link atomically, via the same method.\n"},{"hash":"37c25065bec9170fe89453fb79ba6a478b8a5927","date":"2013-08-18T02:28:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove spurious tmp file present since initial git check-in\n"},{"hash":"d6841499109fc397cd3a57a726304fec9b08f510","date":"2013-08-18T16:27:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix i386 fesetenv: FE_DFL_ENV is (fenv_t*)-1 not 0\n"},{"hash":"ebc10fa17634a6ddb87a3aedd71b7d9617d12c19","date":"2013-08-18T16:27:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add sse fenv support on i386 through hwcap\n\nthe sse and x87 rounding modes should be always the same,\nthe visible exception flags are the bitwise or of the two\nfenv states (so it's enough to query the rounding mode or\nraise exceptions on one fenv)\n"},{"hash":"baba2630c9cf778b41e218dfa980fcfdbec808e6","date":"2013-08-18T16:27:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove the __mxcsr member from fenv_t on i386 to follow the glibc abi\n\nin the previous commit sse fenv support was added, but there is no\nneed to save mxcsr (sse fenv register) so fix the abi incompatibility\nwith glibc.\n"},{"hash":"d8764bf84022397ff9d22310f78fcd78d801e2bf","date":"2013-08-18T16:27:21.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"optimize x86 feclearexcept: only use save/restore x87 fenv if needed\n\nthe x87 exception summary (ES) and stack fault (SF) flags may be\nspuriously cleared by feclearexcept using the fnclex instruction,\nbut these flags are not observable through libc hence maintaining\ntheir state is not critical.\n"},{"hash":"a6b0170a7f51fdea9beec57ae794221290af232b","date":"2013-08-18T20:08:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix fenv exception functions to mask their argument\n\nfesetround.c is a wrapper to do the arch independent argument\ncheck (on archs where rounding mode is not stored in 2 bits\n__fesetround still has to check its arguments)\n\non powerpc fe*except functions do not accept the extra invalid\nflags of its fpscr register\n\nthe useless FENV_ACCESS pragma was removed from feupdateenv\n"},{"hash":"4681aae23a283742d17baff6f1a5692fbf9a376f","date":"2013-08-19T00:20:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"re-add logic for ignoring failure of ld.so symlink installation\n\nthis was inadvertently removed when switching to the new install.sh.\n"},{"hash":"e449974dc54562bcb9a8a4c578e92d3f12ca67bb","date":"2013-08-20T17:51:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix two bugs in sed code configure uses to save command line\n\none place where semicolon (non-portable) was still used in place of\nseparate -e options (copied over from an old version of this code),\nand use of a literal slash in the bracket expression for the final\ncommand, despite slash being used as the delimiter for the s command.\n"},{"hash":"580b8d8c52624f17e39b19e8cc9e0cbea1510b45","date":"2013-08-21T04:49:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unbreak vwarn: print \": \" before errno message\n\npatch by Strake. this seems to be a regression caused by fixing the\nbehavior of perror(\"\") to match perror(0) at some point in the past.\n"},{"hash":"ecf4e24d811085804033b76542acfd87d3f14bcb","date":"2013-08-22T01:46:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add SUN_LEN macro to sys/un.h under appropriate feature tests\n\nthis is ugly and useless, but it seems to be the least-ugly way to\nprovide it...\n"},{"hash":"f5e4efc4bd1e11e5bb542d4124ab8ce4d4424c47","date":"2013-08-22T23:02:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"begin refactoring strftime to make adding field widths easier\n"},{"hash":"45849d3dcb886b7dff236c3905fa3e101e85ed71","date":"2013-08-22T23:27:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"more strftime refactoring\n\nmake __strftime_fmt_1 return a string (possibly in the caller-provided\ntemp buffer) rather than writing into the output buffer. this approach\nmakes more sense when padding to a minimum field width might be\nrequired, and it's also closer to what wcsftime wants.\n"},{"hash":"87e133b352c419383116a05cbe251dc396de062f","date":"2013-08-22T23:36:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"strftime cleanup: avoid recomputing strlen when it's known\n"},{"hash":"33413cdd25c58f0e57061e0a3cb7a29d492ba785","date":"2013-08-22T23:44:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify strftime and fix integer overflows\n\nuse a long long value so that even with offsets, values cannot\noverflow. instead of using different format strings for different\nnumeric formats, simply use a per-format width and %0*lld for all of\nthem.\n\nthis width specifier is not for use with strftime field widths; that\nwill be a separate step in the caller.\n"},{"hash":"fc48ceee773e851d8be675f25be4f476646aa99e","date":"2013-08-23T02:36:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add strftime and wcsftime field widths\n\nat present, since POSIX requires %F to behave as %+4Y-%m-%d and ISO C\nrequires %F to behave as %Y-%m-%d, the default behavior for %Y has\nbeen changed to match %+4Y. this seems to be the only way to conform\nto the requirements of both standards, and it does not affect years\nprior to the year 10000. depending on the outcome of interpretations\nfrom the standards bodies, this may be adjusted at some point.\n"},{"hash":"6fdaaf251d355ed5ce79a6998f40e00dab888e3e","date":"2013-08-23T02:40:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some documentation typos\n"},{"hash":"8b491f1499b8636efe8a99d940f0c87b9a3ba9ae","date":"2013-08-23T12:11:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing string.h in strftime.c (needed by new strftime code)\n\nthis bug was masked by local experimental CFLAGS in my config.mak.\n"},{"hash":"709355e1f6dad17234606486400568bc87a37d79","date":"2013-08-23T15:15:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add recursive rpath support to dynamic linker\n\npreviously, rpath was only honored for direct dependencies. in other\nwords, if A depends on B and B depends on C, only B's rpath (if any),\nnot A's rpath, was being searched for C. this limitation made\nrpath-based deployment difficult in the presence of multiple levels of\nlibrary dependency.\n\nat present, $ORIGIN processing in rpath is still unsupported.\n"},{"hash":"a897a20a57b461d388447858b9404fc81f107bcd","date":"2013-08-23T17:56:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add rpath $ORIGIN processing to dynamic linker\n"},{"hash":"cc51505a32930754d2cf281c15caa1829b8436e9","date":"2013-08-23T18:14:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use AT_EXECFN, if available, for dynamic linker to identify main program\n\nfallback to argv[0] as before. unlike argv[0], AT_EXECFN was a valid\n(but possibly relative) pathname for the new program image at the time\nthe execve syscall was made.\n\nas a special case, ignore AT_EXECFN if it begins with \"/proc/\", in\norder not to give bogus (and possibly harmful) results when fexecve\nwas used.\n"},{"hash":"d2c42ed25f0488c40f61479ac7feb729d98e1d38","date":"2013-08-23T19:51:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bugs in $ORIGIN handling\n\n1. an occurrence of ${ORIGIN} before $ORIGIN would be ignored due to\nthe strstr logic. (note that rpath contains multiple :-delimited paths\nto be searched.)\n\n2. data read by readlink was not null-terminated.\n"},{"hash":"7211551e9ff7c8c9d1491856088cf832f2722bd6","date":"2013-08-24T01:25:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in dn_expand/reverse dns\n\noff-by-one error copying the name components was yielding junk at the\nbeginning and truncating one character at the end (of every\ncomponent).\n"},{"hash":"bd5ed22c58c1356f22fb69a8c392f650a0d89443","date":"2013-08-24T03:07:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mishandling of empty or blank TZ environment variable\n\nthe empty TZ string was matching equal to the initial value of the\ncached TZ name, thus causing do_tzset never to run and never to\ninitialize the time zone data.\n"},{"hash":"0f9b1f672b68b7c3570f07b130cc5c8938b22bad","date":"2013-08-24T03:13:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dlopen honor the rpath of the main program\n\nthis seems to match what other systems do, and seems useful for\nprograms that have their libraries and plugins stored relative to the\nexecutable.\n"},{"hash":"d78be392e144c338f58ce6a51d82c859126c137d","date":"2013-08-24T16:59:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix strftime handling of time zone data\n\nthis may need further revision in the future, since POSIX is rather\nunclear on the requirements, and is designed around the assumption of\nPOSIX TZ specifiers which are not sufficiently powerful to represent\nreal-world timezones (this is why zoneinfo support was added).\n\nthe basic issue is that strftime gets the string and numeric offset\nfor the timezone from the extra fields in struct tm, which are\ninitialized when calling localtime/gmtime/etc. however, a conforming\napplication might have created its own struct tm without initializing\nthese fields, in which case using __tm_zone (a pointer) could crash.\nother zoneinfo-based implementations simply check for a null pointer,\nbut otherwise can still crash of the field contains junk.\n\nsimply ignoring __tm_zone and using tzname[] would \"work\" but would\ngive incorrect results in time zones with more complex rules. I feel\nlike this would lower the quality of implementation.\n\ninstead, simply validate __tm_zone: unless it points to one of the\nzone name strings managed by the timezone system, assume it's invalid.\n\nthis commit also fixes several other minor bugs with formatting:\ntm_isdst being negative is required to suppress printing of the zone\nformats, and %z was using the wrong format specifiers since the type\nof val was changed, resulting in bogus output.\n"},{"hash":"32985d4f632f575274bd08fdc55d8d0a7655a8ef","date":"2013-08-24T17:10:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor fix to tz name checking\n\nif a zoneinfo file is not (or is no longer) in use, don't check the\nabbrevs pointers, which may be invalid.\n"},{"hash":"190bbb992344e350925bb9ebc37775ba8cc4c19f","date":"2013-08-24T17:11:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"properly fill in tzname[] for old (pre-64-bit-format) zoneinfo files\n\nin this case, the first standard-time and first daylight-time rules\nshould be taken as the \"default\" ones to expose.\n"},{"hash":"2828a130b1e822414a13961680245d04f2989a4b","date":"2013-08-24T18:35:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix strftime regression in %e format\n\n%e pads with spaces instead of zeros.\n"},{"hash":"242a4bb4406dad53a1983ea1134d5326a0c4afa3","date":"2013-08-25T06:02:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add the %s (seconds since the epoch) format to strftime\n\nthis is a nonstandard extension but will be required in the next\nversion of POSIX, and it's widely used/useful in shell scripts\nutilizing the date utility.\n"},{"hash":"06ceee8ca34999c5c35e5dfb85133d4b35c9689b","date":"2013-08-27T21:33:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add attribute((may_alias)) checking in configure\n\nthis will be needed for upcoming commits to the string/mem functions\nto correct their unannounced use of aliasing violations for\nword-at-a-time search, fill, and copy operations.\n"},{"hash":"a543369e3b06a51eacd392c738fc10c5267a195f","date":"2013-08-27T22:08:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimized C memset\n\nthis version of memset is optimized both for small and large values of\nn, and makes no misaligned writes, so it is usable (and near-optimal)\non all archs. it is capable of filling up to 52 or 56 bytes without\nentering a loop and with at most 7 branches, all of which can be fully\npredicted if memset is called multiple times with the same size.\n\nit also uses the attribute extension to inform the compiler that it is\nviolating the aliasing rules, unlike the previous code which simply\nassumed it was safe to violate the aliasing rules since translation\nunit boundaries hide the violations from the compiler. for non-GNUC\ncompilers, 100% portable fallback code in the form of a naive loop is\nprovided. I intend to eventually apply this approach to all of the\nstring/memory functions which are doing word-at-a-time accesses.\n"},{"hash":"ebc87349fef4f460abc3991c58f38d76c309bc6b","date":"2013-08-27T22:54:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid instruction mnemonics in powerpc fenv asm\n\nthere is no non-dot version of the andis instruction, but there's no\nharm in updating the flags anyway, so just use the dot version.\n"},{"hash":"38e6acbf89afd3dfabb4f4d0506319c339b13663","date":"2013-08-28T04:41:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"stdbool.h should define __bool_true_false_are_defined even for C++\n\nwhile the incorporation of this requirement from C99 into C++11 was\nlikely an accident, some software expects it to be defined, and it\ndoesn't hurt. if the requirement is removed, then presumably\n__bool_true_false_are_defined would just be in the implementation\nnamespace and thus defining it would still be legal.\n"},{"hash":"90edf1cc15cec685c18ec2485ddce5b655963464","date":"2013-08-28T07:34:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimized C memcpy\n\nunlike the old C memcpy, this version handles word-at-a-time reads and\nwrites even for misaligned copies. it does not require that the cpu\nsupport misaligned accesses; instead, it performs bit shifts to\nrealign the bytes for the destination.\n\nessentially, this is the C version of the ARM assembly language\nmemcpy. the ideas are all the same, and it should perform well on any\narch with a decent number of general-purpose registers that has a\nbarrel shift operation. since the barrel shifter is an optional cpu\nfeature on microblaze, it may be desirable to provide an alternate asm\nimplementation on microblaze, but otherwise the C code provides a\ncompetitive implementation for \"generic risc-y\" cpu archs that should\nalleviate the urgent need for arch-specific memcpy asm.\n"},{"hash":"f7bc29ed2253009c9e56c597ef3d9a2bb278a876","date":"2013-08-28T09:08:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove -Wcast-align from --enable-warnings\n\nI originally added this warning option based on a misunderstanding of\nhow it works. it does not warn whenever the destination of the cast\nhas stricter alignment; it only warns in cases where misaligned\ndereference could lead to a fault. thus, it's essentially a no-op for\ni386, which had me wrongly believing the code was clean for this\nwarning level. on other archs, numerous diagnostic messages are\nproduced, and all of them are false-positives, so it's better just not\nto use it.\n"},{"hash":"09b2995bcb663e0a19210311721bf46d49f87212","date":"2013-08-30T20:50:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add struct tcphdr in netinet/tcp.h\n"},{"hash":"da19f88659c12f00939945d4d3fbb1a48bac7e7e","date":"2013-08-30T21:06:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"only expose struct tcphdr under _GNU_SOURCE\n\nthe BSD and GNU versions of this structure differ, so exposing it in\nthe default _BSD_SOURCE profile is possibly problematic. both versions\ncould be simultaneously supported with anonymous unions if needed in\nthe future, but for now, just omitting it except under _GNU_SOURCE\nshould be safe.\n"},{"hash":"57565bee0010a5d6d5557f11a15126867211c4ae","date":"2013-08-30T21:24:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.13\n"},{"hash":"d0f0fa484c5216710936715c176f67b3781e4b71","date":"2013-08-30T21:30:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in release notes\n"},{"hash":"7cc49f98a2b5346259d2209ba14d7c18959f9369","date":"2013-08-31T05:12:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in synccall due to incorrect signal restoration in sigqueue\n\ncommit 07827d1a82fb33262f686eda959857f0d28cd8fa seems to have\nintroduced this issue. sigqueue is called from the synccall core, at\nwhich time, even implementation-internal signals are blocked. however,\npthread_sigmask removes the implementation-internal signals from the\nold mask before returning, so that a process which began life with\nthem blocked will not be able to save a signal mask that has them\nblocked, possibly causing them to become re-blocked later. however,\nthis was causing sigqueue to unblock the implementation-internal\nsignals during synccall, leading to deadlock.\n"},{"hash":"9ff8ed463caa86cb5e81419d8eb3bfb56e90f03c","date":"2013-08-31T15:36:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in creation of ldso symlink\n\nDESTDIR was wrongly included in the symlink contents.\n"},{"hash":"27b4923ba00f0a7511c7ebf5f19313d6313052e9","date":"2013-08-31T19:44:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make realpath use O_PATH when opening the file\n\nthis avoids failure if the file is not readable and avoids odd\nbehavior for device nodes, etc. on old kernels that lack O_PATH, the\nold behavior (O_RDONLY) will naturally happen as the fallback.\n"},{"hash":"dfddd43256f7ad4bad991eeff5cc51772595f327","date":"2013-08-31T19:50:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"debloat realpath's allocation strategy\n\nrather than allocating a PATH_MAX-sized buffer when the caller does\nnot provide an output buffer, work first with a PATH_MAX-sized temp\nbuffer with automatic storage, and either copy it to the caller's\nbuffer or strdup it on success. this not only avoids massive memory\nwaste, but also avoids pulling in free (and thus the full malloc\nimplementation) unnecessarily in static programs.\n"},{"hash":"35e8621a28db1c34685adbbf1c2229270cbf7236","date":"2013-08-31T20:01:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove incorrect cancellation points from realpath\n"},{"hash":"cbb8a6979038f96d3f67c659363cebf0615c42ba","date":"2013-09-01T02:47:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid crash in scanf when invalid %m format is encountered\n\ninvalid format strings invoke undefined behavior, so this is not a\nconformance issue, but it's nicer for scanf to report the error safely\ninstead of calling free on a potentially-uninitialized pointer or a\npointer to memory belonging to the caller.\n"},{"hash":"f0328a565692320784fa8032f176e40d0998aedd","date":"2013-09-01T02:52:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid %m format crash in wide scanf variants\n\nthe wide variant was missed in the previous commit.\n"},{"hash":"316d6741b68b485205d7233c98bd6c795bb80370","date":"2013-09-01T03:15:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing return value warning in faccessat, minor cleanup\n\nclone will pass the return value of the start function to SYS_exit\nanyway; there's no need to call the syscall directly.\n"},{"hash":"c2d3fd3aad854af2875cff412cf52cead0a83a51","date":"2013-09-01T05:01:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add workaround header for wait.h remapping to sys/wait.h\n"},{"hash":"fe80a8eb687f48f08e393522520f69b0c52cb297","date":"2013-09-01T21:02:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix special-case breakage in popen due to reversed argument order\n"},{"hash":"a731e4103b87cb02b763f2e3f73cc43c72bdf65f","date":"2013-09-02T19:06:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid pointer in synccall (multithread setuid, etc.)\n\nthe head pointer was not being reset between calls to synccall, so any\nuse of this interface more than once would build the linked list\nincorrectly, keeping the (now invalid) list nodes from the previous\ncall.\n"},{"hash":"3c0501d28c1491ce9a4f675e9e223a8dfd9e134c","date":"2013-09-02T19:16:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in synccall, ignore the signal before any threads' signal handlers return\n\nthis protects against deadlock from spurious signals (e.g. sent by\nanother process) arriving after the controlling thread releases the\nother threads from the sync operation.\n"},{"hash":"b4b9743c0003b9538cbc90c602f55c0ed3f16d17","date":"2013-09-02T19:19:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips-specific bug in synccall (too little space for signal mask)\n\nswitch to the new __block_all_sigs/__restore_sigs internal API to\nclean up the code too.\n"},{"hash":"ff4d6020d1c8aaab4f05e561789d6dad3d7ef083","date":"2013-09-04T14:23:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in comment in __randname\n"},{"hash":"af5f6d9556441487e5c66a7a4cfeddf4ed354aa7","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"long double cleanup, initial commit\n\nnew ldshape union, ld128 support is kept, code that used the old\nldshape union was rewritten (IEEEl2bits union of freebsd libm is\nnot touched yet)\n\nld80 __fpclassifyl no longer tries to handle invalid representation\n"},{"hash":"4cec31fc23b28271a2ed0b290e65699dffac3fee","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: ilogb cleanup\n\n* consistent code style\n* explicit union instead of typedef for double and float bit access\n* turn FENV_ACCESS ON to make 0/0.0f raise invalid flag\n* (untested) ld128 version of ilogbl (used by logbl which has ld128 support)\n"},{"hash":"98be442ee8a2b8b7e0802b604e384d5a2c43282e","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix logb(-0.0) in downward rounding mode\n\nuse -1/(x*x) instead of -1/(x+0) to return -inf, -0+0 is -0 in\ndownward rounding mode\n"},{"hash":"d1a2ead878c27ac4ec600740320f8b76e1f961e9","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: rewrite rounding functions (ceil, floor, trunc, round, rint)\n\n* faster, smaller, cleaner implementation than the bit hacks of fdlibm\n* use arithmetics like y=(double)(x+0x1p52)-0x1p52, which is an integer\nneighbor of x in all rounding modes (0<=x<0x1p52) and only use bithacks\nwhen that's faster and smaller (for float it usually is)\n* the code assumes standard excess precision handling for casts\n* long double code supports both ld80 and ld128\n* nearbyint is not changed (it is a wrapper around rint)\n"},{"hash":"ee2ee92d62c43f6658d37ddea4c316d2089d0fe9","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: rewrite remainder functions (remainder, remquo, fmod, modf)\n\n* results are exact\n* modfl follows truncl (raises inexact flag spuriously now)\n* modf and modff only had cosmetic cleanup\n* remainder is just a wrapper around remquo now\n* using iterative shift+subtract for remquo and fmod\n* ld80 and ld128 are supported as well\n"},{"hash":"c2a0dfea629617a39af2f59bd400e1a3595d0783","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: rewrite hypot\n\nmethod: if there is a large difference between the scale of x and y\nthen the larger magnitude dominates, otherwise reduce x,y so the\nargument of sqrt (x*x+y*y) does not overflow or underflow and calculate\nthe argument precisely using exact multiplication. If the argument\nhas less error than 1/sqrt(2) ~ 0.7 ulp, then the result has less error\nthan 1 ulp in nearest rounding mode.\n\nthe original fdlibm method was the same, except it used bit hacks\ninstead of dekker-veltkamp algorithm, which is problematic for long\ndouble where different representations are supported. (the new hypot\nand hypotl code should be smaller and faster on 32bit cpu archs with\nfast fpu), the new code behaves differently in non-nearest rounding,\nbut the error should be still less than 2ulps.\n\nld80 and ld128 are supported\n"},{"hash":"bcd797a5ba4631c031919dad832d670e564212e9","date":"2013-09-05T11:30:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: long double inverse trigonometric cleanup (acosl, asinl, atanl, atan2l)\n\n* added ld128 support from freebsd fdlibm (untested)\n* using new ldshape union instead of IEEEl2bits\n* inexact status flag is not supported\n"},{"hash":"ea9bb95a5b36c0a3d2ed8fb03808745b406c2633","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: long double trigonometric cleanup (cosl, sinl, sincosl, tanl)\n\nld128 support was added to internal kernel functions (__cosl, __sinl,\n__tanl, __rem_pio2l) from freebsd (not tested, but should be a good\nstart for when ld128 arch arrives)\n\n__rem_pio2l had some code cleanup, the freebsd ld128 code seems to\ngather the results of a large reduction with precision loss (fixed\nthe bug but a todo comment was added for later investigation)\n\nthe old copyright was removed from the non-kernel wrapper functions\n(cosl, sinl, sincosl, tanl) since these are trivial and the interesting\nparts and comments had been already rewritten.\n"},{"hash":"39c910fb061114e6aa5c3bf2c94b1d7262d62221","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix underflow in exp*.c and long double handling in exp2l\n\n* don't care about inexact flag\n* use double_t and float_t (faster, smaller, more precise on x86)\n* exp: underflow when result is zero or subnormal and not -inf\n* exp2: underflow when result is zero or subnormal and not exact\n* expm1: underflow when result is zero or subnormal\n* expl: don't underflow on -inf\n* exp2: fix incorrect comment\n* expm1: simplify special case handling and overflow properly\n* expm1: cleanup final scaling and fix negative left shift ub (twopk)\n"},{"hash":"535104ab6a2d6f22098f79e7107963e3fc3448a3","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: cbrt cleanup and long double fix\n\n* use float_t and double_t\n* cleanup subnormal handling\n* bithacks according to the new convention (ldshape for long double\nand explicit unions for float and double)\n"},{"hash":"34660d73bd0db29469d2758e1b48d2360edf3a2f","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix remaining old long double code (erfl, fmal, lgammal, scalbnl)\n\nin lgammal don't handle 1 and 2 specially, in fma use the new ldshape\nunion instead of ld80 one.\n"},{"hash":"2eaed464e2080d8321d3903b71086a1ecfc4ee4a","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use float_t and double_t in scalbnf and scalbn\n\nremove STRICT_ASSIGN (c99 semantics is assumed) and use the conventional\nunion to prepare the scaling factor (so libm.h is no longer needed)\n"},{"hash":"aa0c4a204e28cfc90a9ee955691a6cbe014c9fde","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: long double fix (use ldshape union)\n\n* use new ldshape union consistently\n* add ld128 support to frexpl\n* simplify sqrtl comment (ld64 is not just arm)\n"},{"hash":"94a3d13ae69764c0e2b67c6e17dc5126e103d0e3","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove old longdbl.h\n"},{"hash":"63b9cc777323488da3474e8bc53e0ac4d3521382","date":"2013-09-05T11:30:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove *_WORD64 macros from libm.h\n\nonly fma used these macros and the explicit union is clearer\n"},{"hash":"8dba5486288e719ed290cccefcd932ed32756d7c","date":"2013-09-05T11:30:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: cosmetic cleanup (use explicit union instead of fshape and dshape)\n"},{"hash":"07039ed8563b850624146c938ae201a1099d2f75","date":"2013-09-05T11:30:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix exp2l asm on x86 (raise underflow correctly)\n\nthere were two problems:\n* omitted underflow on subnormal results: exp2l(-16383.5) was calculated\nas sqrt(2)*2^-16384, the last bits of sqrt(2) are zero so the down scaling\ndoes not underflow eventhough the result is in subnormal range\n* spurious underflow for subnormal inputs: exp2l(0x1p-16400) was evaluated\nas f2xm1(x)+1 and f2xm1 raised underflow (because inexact subnormal result)\n\nthe first issue is fixed by raising underflow manually if x is in\n(-32768,-16382] and not integer (x-0x1p63+0x1p63 != x)\n\nthe second issue is fixed by treating x in (-0x1p64,0x1p64) specially\n\nfor these fixes the special case handling was completely rewritten\n"},{"hash":"e5937885de3c8d493a9d2978aa46a771740c7458","date":"2013-09-05T12:04:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix lrintl.s on x86_64 (use movslq to signextend the result)\n"},{"hash":"02343946215a7ae03634c6490abcc69da68df589","date":"2013-09-05T12:23:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix expm1l on x86_64 (avoid underflow for large negative x)\n\ncopy the fix from i386: return -1 instead of exp2l(x)-1 when x <= -65\n"},{"hash":"101e6012856918440b5d7474739c3fc22a8d3b85","date":"2013-09-05T12:26:26.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix acoshf on negative values\n\nacosh(x) is invalid for x<1, acoshf tried to be clever using\nsigned comparisions to handle all x<2 the same way, but the\nformula was wrong on large negative values.\n"},{"hash":"afa2aaccea6e9f8c55809abb6471dc9aaa402711","date":"2013-09-05T14:03:10.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove libc.h include from libm.h\n\nlibc.h is only for weak_alias so include it directly where it is used\n"},{"hash":"f4d9bfb3a986f2c25ec023426b4fb222130af75f","date":"2013-09-05T16:57:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix atanh (overflow and underflow issues)\n\nin atanh exception handling was left to the called log functions,\nbut the argument to those functions could underflow or overflow.\n\nuse double_t and float_t to avoid some useless stores on x86\n"},{"hash":"f657fe4b9f734d7fdea515af8dffbf7c28ce4fbc","date":"2013-09-05T18:05:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: support invalid ld80 representations in fpclassify\n\napparently gnulib requires invalid long double representations\nto be handled correctly in printf so we classify them according\nto how the fpu treats them: bad inf is nan, bad nan is nan,\nbad normal is nan and bad subnormal/zero is minimal normal\n"},{"hash":"9b0fcb441a44456c7b071c7cdaf90403f81ec05a","date":"2013-09-06T18:35:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove STRICT_ASSIGN macro\n\ngcc did not always drop excess precision according to c99 at assignments\nbefore version 4.5 even if -std=c99 was requested which caused badly\nbroken mathematical functions on i386 when FLT_EVAL_METHOD!=0\n\nbut STRICT_ASSIGN was not used consistently and it is worked around for\nold compilers with -ffloat-store so it is no longer needed\n\nthe new convention is to get the compiler respect c99 semantics and when\nexcess precision is not harmful use float_t or double_t or to specialize\ncode using FLT_EVAL_METHOD\n"},{"hash":"067aea7c9b688e61f69aed62b9b52e536948b273","date":"2013-09-06T20:05:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove STRICT_ASSIGN from exp2f (see previous commit)\n"},{"hash":"ff4be700d0f316e043de8b3cf03ad64e086f0525","date":"2013-09-09T17:39:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"do not use default when dynamic linker fails to open existing path file\n\nif fopen fails for a reason other than ENOENT, we must assume the\nintent is that the path file be used. failure may be due to\nmisconfiguration or intentional resource-exhaustion attack (against\nsuid programs), in which case falling back to loading libraries from\nan unintended path could be dangerous.\n"},{"hash":"2f1de8051b4b33445ca233868e573ec838c81f65","date":"2013-09-13T05:22:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix x86_64 lrintl asm, again\n\nthe underlying problem was not incorrect sign extension (fixed in the\nprevious commit to this file by nsz) but that code that treats \"long\"\nas 32-bit was copied blindly from i386 to x86_64.\n\nnow lrintl is identical to llrintl on x86_64, as it should be.\n"},{"hash":"9b35ed3fefca6817d7334f15a883d068e0034011","date":"2013-09-14T18:44:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips sysv ipc bits headers\n\nmsg.h was wrong for big-endian (wrong endiannness padding).\nshm.h was just plain wrong (mips is not supposed to have padding).\n\nboth changes were tested using libc-test on qemu-system-mips.\n"},{"hash":"bfba15c9b96c2a42bd02f51ff10596a23a677926","date":"2013-09-14T23:19:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix child stack alignment on mips clone\n\nunlike other archs, the mips version of clone was not doing anything\nto align the stack pointer. this seems to have been the cause for some\nSIGBUS crashes that were observed in posix_spawn.\n"},{"hash":"7a34dd3495d4bcd3dadc8b9fe2c89f819c15e7fd","date":"2013-09-14T23:27:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overflow in sysconf for _SC_MQ_PRIO_MAX\n\nthe value of MQ_PRIO_MAX does not fit, so it needs to use OFLOW.\n"},{"hash":"b20760c02318fa6da228587c401a8b2bb22a1aab","date":"2013-09-15T02:00:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"support configurable page size on mips, powerpc and microblaze\n\nPAGE_SIZE was hardcoded to 4096, which is historically what most\nsystems use, but on several archs it is a kernel config parameter,\nuser space can only know it at execution time from the aux vector.\n\nPAGE_SIZE and PAGESIZE are not defined on archs where page size is\na runtime parameter, applications should use sysconf(_SC_PAGE_SIZE)\nto query it. Internally libc code defines PAGE_SIZE to libc.page_size,\nwhich is set to aux[AT_PAGESZ] in __init_libc and early in __dynlink\nas well. (Note that libc.page_size can be accessed without GOT, ie.\nbefore relocations are done)\n\nSome fpathconf settings are hardcoded to 4096, these should be actually\nqueried from the filesystem using statfs.\n"},{"hash":"0dc630ec95414c6e64429222c9d688d180e2a4bc","date":"2013-09-15T02:41:36.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"netinet/in.h: add missing IP protocol numbers from the linux uapi headers\n"},{"hash":"2607e39a04b50b8072227db1e08542d6659b927f","date":"2013-09-15T02:42:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"net/if_arp.h: add missing ARP hardware identifiers from linux uapi headers\n\nthe removed ARPHRD_IEEE802154_PHY was only present in the kernel api\nin v2.6.31 (by accident), but it got into the glibc headers (in 2009)\nand remained there since this header was not updated since then.\n"},{"hash":"0a7ecf760626aead6b396fec1664a13f57f63413","date":"2013-09-15T02:49:26.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"ptrace.h: add new ptrace requests to get/set sigmask\n\nPTRACE_GETSIGMASK and PTRACE_SETSIGMASK were added in linux v3.11\nand used by checkpoint/restore tools\n"},{"hash":"ae51aa75345e23d8c7bd645b7420060055b65a8b","date":"2013-09-15T04:54:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"sys/socket.h: add new SO_BUSY_POLL socket option\n\nlow latency busy poll sockets are new in linux v3.11\n"},{"hash":"f68a3468d48f85ccf12a03e0b610f6cffbda58fa","date":"2013-09-16T14:54:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use symbolic names for clone flags in pthread_create\n"},{"hash":"271c21194467838d6ca63d83faeebc966e204c03","date":"2013-09-16T14:56:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"omit CLONE_PARENT flag to clone in pthread_create\n\nCLONE_PARENT is not necessary (CLONE_THREAD provides all the useful\nparts of it) and Linux treats CLONE_PARENT as an error in certain\nsituations, without noticing that it would be a no-op due to\nCLONE_THREAD. this error case prevents, for example, use of a\nmulti-threaded init process and certain usages with containers.\n"},{"hash":"268375c1c017c0bdefeed1a330811e433c4dfaef","date":"2013-09-16T15:16:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update include/elf.h following glibc changes\n\nthe changes were verified using various sources:\nlinux: include/uapi/linux/elf.h\nbinutils: include/elf/common.h\nglibc: elf/elf.h\nsysv gabi: http://www.sco.com/developers/gabi/latest/contents.html\nsun linker docs: http://docs.oracle.com/cd/E18752_01/pdf/817-1984.pdf\nand platform specific docs\n\n- fixed:\nEF_MIPS_* E_MIPS_* e_flags: fixed accoding to glibc and binutils\n\n- added:\nELFOSABI_GNU for EI_OSABI entry: glibc, binutils and sysv gabi\nEM_* e_machine values: updated according to linux and glibc\nPN_XNUM e_phnum value: from glibc and linux, see oracle docs\nNT_* note types: updated according to linux and glibc\nDF_1_* flags for DT_FLAGS_1 entry: following glibc and oracle docs\nAT_HWCAP2 auxv entry for more hwcap bits accoding to linux and glibc\nR_386_SIZE32 relocation according to glibc and binutils\nEF_ARM_ABI_FLOAT_* e_flags: added following glibc and binutils\nR_AARCH64_* relocs: added following glibc and aarch64 elf specs\nR_ARM_* relocs: according to glibc, binutils and arm elf specs\nR_X86_64_* relocs: added missing relocs following glibc\n\n- removed:\nHWCAP_SPARC_* flags were moved to arch specific header in glibc\nR_ARM_SWI24 reloc is marked as obsolete in glibc, not present in binutils\n  not specified in arm elf spec, R_ARM_TLS_DESC reused its number\n  see http://www.codesourcery.com/publications/RFC-TLSDESC-ARM.txt\n\n- glibc changes not pulled in:\nELFOSABI_ARM_AEABI (bare-metal system, binutils and glibc disagrees about the name)\nR_68K_* relocs for unsupported platform\nR_SPARC_* ditto\nEF_SH* ditto (e_flags)\nEF_S390* ditto (e_flags)\nR_390* ditto\nR_MN10300* ditto\nR_TILE* ditto\n"},{"hash":"90710df5ccd405743d570dcb255fc28d952ba651","date":"2013-09-16T15:16:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"sys/resource.h: add PRIO_MIN and PRIO_MAX for getpriority and setpriority\n\nThese constants are not specified by POSIX, but they are in the reserved\nnamespace, glibc and bsd systems seem to provide them as well.\n(Note that POSIX specifies -NZERO and NZERO-1 to be the limits, but\nPRIO_MAX equals NZERO)\n"},{"hash":"cffb9e1ee2a5e8925845f0c9b79cb6c80487302c","date":"2013-09-16T15:52:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix clobbering of caller's stack in mips __clone function\n\nthis was resulting in crashes in posix_spawn on mips, and would have\naffected applications calling clone too. since the prototype for\n__clone has it as a variadic function, it may not assume that 16($sp)\nis writable for use in making the syscall. instead, it needs to\nallocate additional stack space, and then adjust the stack pointer\nback in both of the code paths for the parent process/thread.\n"},{"hash":"0753b1faf002249dc35ef09cb4769d66fa3a1a86","date":"2013-09-16T16:58:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sigemptyset and sigfillset for mips\n\nthey were leaving junk in the upper bits.\n"},{"hash":"d8e283df58eb8bff1aa2f8a99347e294c7f67cb9","date":"2013-09-20T05:49:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct the sysconf value for RTSIG_MAX\n\nthis is the number of realtime signals available, not the maximum\nsignal number or total number of signals.\n"},{"hash":"e803829e6b087c0ed91adc11f87185109bc59b31","date":"2013-09-20T06:00:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix potential deadlock bug in libc-internal locking logic\n\nif a multithreaded program became non-multithreaded (i.e. all other\nthreads exited) while one thread held an internal lock, the remaining\nthread would fail to release the lock. the the program then became\nmultithreaded again at a later time, any further attempts to obtain\nthe lock would deadlock permanently.\n\nthe underlying cause is that the value of libc.threads_minus_1 at\nunlock time might not match the value at lock time. one solution would\nbe returning a flag to the caller indicating whether the lock was\ntaken and needs to be unlocked, but there is a simpler solution: using\nthe lock itself as such a flag.\n\nnote that this flag is not needed anyway for correctness; if the lock\nis not held, the unlock code is harmless. however, the memory\nsynchronization properties associated with a_store are costly on some\narchs, so it's best to avoid executing the unlock code when it is\nunnecessary.\n"},{"hash":"35a6801c6cd31b8ace4a7c7fc138170434b6754f","date":"2013-09-22T07:06:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm atomic store and generate simpler/less-bloated/faster code\n\natomic store was lacking a barrier, which was fine for legacy arm with\nno real smp and kernel-emulated cas, but unsuitable for more modern\nsystems. the kernel provides another \"kuser\" function, at 0xffff0fa0,\nwhich could be used for the barrier, but using that would drop support\nfor kernels 2.6.12 through 2.6.14 unless an extra conditional were\nadded to check for barrier availability. just using the barrier in the\nkernel cas is easier, and, based on my reading of the assembly code in\nthe kernel, does not appear to be significantly slower.\n\nat the same time, other atomic operations are adapted to call the\nkernel cas function directly rather than using a_cas; due to small\ndifferences in their interface contracts, this makes the generated\ncode much simpler.\n"},{"hash":"c47e7062ddc1c3aa24db071db0f4d1dca792f325","date":"2013-09-23T21:00:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release notes for 0.9.14\n"},{"hash":"97789d3e5d3f8f0f62177ea77c810a784dca986c","date":"2013-09-26T18:11:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove duplicate lines from mips bits/syscall.h\n"},{"hash":"78178542e73e143bf44b3ba32cf0b58ced53f2d5","date":"2013-09-26T18:17:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing i386 syscall numbers\n\nsomehow the range 335-339 was missed when updating the file.\n"},{"hash":"e1f1df9c743af60c0e6271fcd78b59dbfd72d8ad","date":"2013-09-27T13:55:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix comparision macros (isless etc) when FLT_EVAL_METHOD!=0\n\nThis is a change in ISO C11 annex F (F.10.11p1), comparision macros\ncan't round their arguments to their semantic type when the evaluation\nformat has wider range and precision. (ie. they must be consistent with\nthe builtin relational operators)\n"},{"hash":"211264e46a2f1bc382a84435e904d1548de672b0","date":"2013-09-27T17:09:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buffer overflow in mbsrtowcs\n\nissue reported by Michael Forney:\n\n\"If wn becomes 0 after processing a chunk of 4, mbsrtowcs currently\ncontinues on, wrapping wn around to -1, causing the rest of the string\nto be processed.\n\nThis resulted in buffer overruns if there was only space in ws for wn\nwide characters.\"\n\nthe original patch submitted added an additional check for !wn after\nthe loop; to avoid extra branching, I instead just changed the wn>=4\ncheck to wn>=5 to ensure that at least one slot remains after the\nword-at-a-time loop runs. this should not slow down the tail\nprocessing on real-world usage, since an extra slot that can't be\nprocessed in the word-at-a-time loop is needed for the null\ntermination anyway.\n"},{"hash":"23b8e3bc95620b0bd90a78ce0d926942c12b45da","date":"2013-09-29T06:52:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one error in getgrnam_r and getgrgid_r, clobbering gr_name\n\nbug report and patch by Michael Forney. the terminating null pointer\nat the end of the gr_mem array was overwriting the beginning of the\nstring data, causing the gr_name member to always be a zero-length\nstring.\n"},{"hash":"2b2aff37aced66e4a50a38a14607a9b1dc0ee001","date":"2013-10-03T14:16:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix new environment always being null with execle\n\nthe va_arg call for the argv[]-terminating null pointer was missing,\nso this pointer was being wrongly used as the environment pointer.\n\nissue reported by Timo Teräs. proposed patch slightly modified to\nsimplify the resulting code.\n"},{"hash":"a938b5a12d7a68d45f4549bca670d8941304e750","date":"2013-10-04T04:14:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"removed unused variable in vfwprintf\n"},{"hash":"7886985e1390a64a97c63d9ff182a6483dd107cc","date":"2013-10-04T04:29:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized variable in dladdr\n\nthe affected branch only applies for DSOs that lack standard hash\ntable and only have the GNU hash table present.\n"},{"hash":"38a0a4db2fffbebb5f029550266dbf915a399258","date":"2013-10-04T05:06:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid implicit pointer conversion in pthread_key_create\n"},{"hash":"e71981af77c360d4a2a17030c7cef4f4eedf66f1","date":"2013-10-04T18:08:16.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove a useless assignment in lgammal found by clang analyzer\n\nthe issue was reported by Alexander Monakov\n"},{"hash":"e5100b32d29b4249989f2423063baab3beffea06","date":"2013-10-04T18:10:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove code duplication in erfl found by clang analyzer\n\nerfl had some superflous code left around after the last erf cleanup.\nthe issue was reported by Alexander Monakov\n"},{"hash":"543787039098c121917cb5f3e129d84b61afa61b","date":"2013-10-04T19:49:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure to check malloc result in setenv\n"},{"hash":"a947d317a2769d90bdb19aa11942b7a0680051d5","date":"2013-10-05T15:59:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of malloc to set errno on heap (brk) exhaustion\n\nI wrongly assumed the brk syscall would set errno, but on failure it\nreturns the old value of the brk rather than an error code.\n"},{"hash":"8acbe4f81862147af73c05ebb770e2ab4ef5375b","date":"2013-10-05T16:00:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"slightly optimize __brk for size\n\nthere is no reason to check the return value for setting errno, since\nbrk never returns errors, only the new value of the brk (which may be\nthe same as the old, or otherwise differ from the requested brk, on\nfailure).\n\nit may be beneficial to eventually just eliminate this file and make\nthe syscalls inline in malloc.c.\n"},{"hash":"b9cd1d4d5073eba4c3afbe7666fc2d9c77b42c7c","date":"2013-10-06T02:09:40.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: remove an unused variable from modfl\n"},{"hash":"49b3a0d2cedd3693d77924fdc0a7719a75bd28da","date":"2013-10-07T13:22:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"minor vfprintf and vfwprintf changes to please static code analyzers\n\nadd missing va_end and remove some unnecessary code.\n"},{"hash":"c3a43b35cc52a7fac93a8c1030d94c919c3ab0eb","date":"2013-10-07T13:24:00.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing va_end in execl* for correcness and static code analyzers\n"},{"hash":"1e81fa4524ecfd51e6a6578ff8038b4c05393101","date":"2013-10-07T13:25:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix allocation sizes in regcomp\n\nsizeof had incorrect argument in a few places, the size was always\nlarge enough so the issue was not critical.\n"},{"hash":"4405702a418d0bb28a72a92cf097394770a0f990","date":"2013-10-07T13:26:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove errno setting from setenv, malloc sets it correctly on oom\n"},{"hash":"551da2c1916e3166a0562ac6f2e76fd46781f3d7","date":"2013-10-07T13:28:03.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix clockid macro names in time.h, reported by Paul Schutte\n"},{"hash":"4b539a826b64d846d02a6cde9d6bcff22472af88","date":"2013-10-07T18:41:03.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use sqrtl if FLT_EVAL_METHOD==2 in acosh and acoshf\n\nthis makes acosh slightly more precise around 1.0 on i386\n"},{"hash":"8f438115f2c12b40fa7b1884f87db72857af67f6","date":"2013-10-07T18:46:43.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix rare underflow issue in fma\n\nthe issue is described in commits 1e5eb73545ca6cfe8b918798835aaf6e07af5beb\nand ffd8ac2dd50f99c3c83d7d9d845df9874ec3e7d5\n"},{"hash":"4fb7df12f52982412e60afeaf9c4463f78b396fc","date":"2013-10-08T23:49:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix errno value for getcwd when size argument is zero\n\nbased on patch by Michael Forney. at the same time, I've changed the\nif branch to be more clear, avoiding the comma operator.\n\nthe underlying issue is that Linux always returns ERANGE when size is\ntoo short, even when it's zero, rather than returning EINVAL for the\nspecial case of zero as required by POSIX.\n"},{"hash":"516358561efbc5754d0ad43a52483e0a839d6bd3","date":"2013-10-12T23:50:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uid/gid-setting error in faccessat with AT_EACCESS flag\n\nthis fixes an issue reported by Daniel Thau whereby faccessat with the\nAT_EACCESS flag did not work in cases where the process is running\nsuid or sgid but without root privileges. per POSIX, when the process\ndoes not have \"appropriate privileges\", setuid changes the euid, not\nthe real uid, and the target uid must be equal to the current real or\nsaved uid; if this condition is not met, EPERM results. this caused\nthe faccessat child process to fail.\n\nusing the setreuid syscall rather than setuid works. POSIX leaves it\nunspecified whether setreuid can set the real user id to the effective\nuser id on processes without \"appropriate privileges\", but Linux\nallows this; if it's not allowed, there would be no way for this\nfunction to work.\n"},{"hash":"d5bd7dd5d2780ce715e985e8f66b44f80e64f485","date":"2013-10-18T11:12:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in faccessat slow path, add close-on-exec to pipe fds\n\nas usual, this is needed to avoid fd leaks. as a better solution, the\nuse of fds could possibly be replaced with mmap and a futex.\n"},{"hash":"20a34af862812b4a20784c52e0b501559507a477","date":"2013-10-18T15:19:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix typo in socket.h (wrong macro name)\n"},{"hash":"ebb4cc0fec110edc7caf5ae545bfb816565a060d","date":"2013-10-18T15:21:36.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use consistent include guard name in arpa/ftp.h\n"},{"hash":"38b9c0274974a1b9941adb2e59238b153704151f","date":"2013-10-20T02:36:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix return value for inet_pton in ipv6 failure cases\n\nin the case of input that does not match the expected form, the\ncorrect return value is 0, not -1.\n"},{"hash":"8f0359605a24277e3d67f2b9e3477437a7d38706","date":"2013-10-21T02:01:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix multiple minor namespace issues in headers\n\nfcntl.h: AT_* is not a reserved namespace so extensions cannot be\nexposed by default.\n\nlanginfo.h: YESSTR and NOSTR were removed from the standard.\n\nlimits.h: NL_NMAX was removed from the standard.\n\nsignal.h: the conditional for NSIG was wrongly checking _XOPEN_SOURCE\nrather than _BSD_SOURCE. this was purely a mistake; it doesn't even\nmatch the commit message from the commit that added it.\n"},{"hash":"bb93ac335846424662212eea840859e7f0cc16b5","date":"2013-10-22T02:05:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"split inet_addr and inet_ntoa back into their own files\n\ndespite being practically deprecated, these functions are still part\nof the standard and thus cannot reside in a file that also contains\nnamespace pollution. this reverts some of the changes made in commit\ne40f48a421a9176e3e298b5bac75f0355b219e58.\n"},{"hash":"59b8dc08f712f156dd54e0aba50e4e647524ec8c","date":"2013-10-22T12:23:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix inet_aton to accept the generic \"numbers-and-dots\" IPv4 address format\n"},{"hash":"51c4e451db10317616e557a7aa7922bababa77d5","date":"2013-10-22T12:28:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix __ipparse to parse the generic numbers-and-dots IPv4 format correctly\n\n* allow at most 4 parts\n* bounds check the parts correctly\n* disallow leading whitespace and sign\n* check the address family before falling back to IPv6\n"},{"hash":"78f889153167452de4cbced921f6428b3d4f663a","date":"2013-10-23T01:49:14.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix inet_pton\n\n* parse IPv4 dotted-decimal correctly (without strtoul, no leading zeros)\n* disallow single leading ':' in IPv6 address\n* allow at most 4 hex digits in IPv6 address (according to RFC 2373)\n* have enough hex fields in IPv4 mapped IPv6 address\n* disallow leading zeros in IPv4 mapped IPv6 address\n"},{"hash":"4b15d9f46a2b260661d2e054575e617c76795578","date":"2013-10-25T18:15:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add legacy ftime function and sys/timeb.h\n\ndespite being marked legacy, this was specified by SUSv3 as part of\nthe XSI option; only the most recent version of the standard dropped\nit. reportedly there's actual code using it.\n"},{"hash":"71d23b310383699a3101ea8bf088398796529ddd","date":"2013-10-28T01:16:14.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: extensive log*.c cleanup\n\nThe log, log2 and log10 functions share a lot of code and to a lesser\nextent log1p too. A small part of the code was kept separately in\n__log1p.h, but since it did not capture much of the common code and\nit was inlined anyway, it did not solve the issue properly. Now the\nlog functions have significant code duplication, which may be resolved\nlater, until then they need to be modified together.\n\nlogl, log10l, log2l, log1pl:\n* Fix the sign when the return value should be -inf.\n* Remove the volatile hack from log10l (seems unnecessary)\n\nlog1p, log1pf:\n* Change the handling of small inputs: only |x|<2^-53 is special\n  (then it is enough to return x with the usual subnormal handling)\n  this fixes the sign of log1p(0) in downward rounding.\n* Do not handle the k==0 case specially (other than skipping the\n  elaborate argument reduction)\n* Do not handle 1+x close to power-of-two specially (this code was\n  used rarely, did not give much speed up and the precision wasn't\n  better than the general)\n* Fix the correction term formula (c=1-(u-x) was used incorrectly\n  when x<1 but (double)(x+1)==2, this was not a critical issue)\n* Use the exact same method for calculating log(1+f) as in log\n  (except in log1p the c correction term is added to the result).\n\nlog, logf, log10, log10f, log2, log2f:\n* Use double_t and float_t consistently.\n* Now the first part of log10 and log2 is identical to log (until the\n  return statement, hopefully this makes maintainence easier).\n* Most special case formulas were removed (close to power-of-two and\n  k==0 cases), they increase the code size without providing precision\n  or performance benefits (and obfuscate the code).\n  Only x==1 is handled specially so in downward rounding mode the\n  sign of zero is correct (the general formula happens to give -0).\n* For x==0 instead of -1/0.0 or -two54/0.0, return -1/(x*x) to force\n  raising the exception at runtime.\n* Arg reduction code is changed (slightly simplified)\n* The thresholds for arg reduction to [sqrt(2)/2,sqrt(2)] are now\n  consistently the [0x3fe6a09e00000000,0x3ff6a09dffffffff] and the\n  [0x3f3504f3,0x3fb504f2] intervals for double and float reductions\n  respectively (the exact threshold values are not critical)\n* Remove the obsolete comment for the FLT_EVAL_METHOD!=0 case in log2f\n  (The same code is used for all eval methods now, on i386 slightly\n  simpler code could be used, but we have asm there anyway)\n\nall:\n* Fix signed int arithmetics (using unsigned for bitmanipulation)\n* Fix various comments\n"},{"hash":"7e01b8f09b6d50991472e0198c4959b085884dec","date":"2013-10-28T20:33:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fenv: fix i386 fesetround for sse\n\ni386 fenv code checks __hwcap for sse support, but in fesetround the sse\ncode was unconditionally jumped over after the test so the sse rounding\nmode was never set.\n"},{"hash":"b7d3210196ff3508601a9f57ad18315eb25f7330","date":"2013-10-29T20:25:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"POSIX conformance fix: define struct entry in search.h\n"},{"hash":"4ecf33614bead27801080442d9190e81aff78432","date":"2013-10-30T18:52:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inttypes.h PRI and SCN macros for [u]intptr_t types\n\nwhile using \"l\" unconditionally gave the right behavior due to\nmatching sizes/representations, it was technically UB and produced\ncompiler warnings with format string checking.\n"},{"hash":"984af5c99e2efaf17c0c764d66a275da764f94d2","date":"2013-11-01T21:01:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix faccessat AT_EACCESS path not to leave zombie processes\n\nI mistakenly assumed that clone without a signal produced processes\nthat would not become zombies; however, waitpid with __WCLONE is\nrequired to release their pids.\n"},{"hash":"f9fb20b42da0e755d93de229a5a737d79a0e8f60","date":"2013-11-02T00:34:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify faccessat AT_EACCESS path and eliminate resource dependence\n\nnow that we're waiting for the exit status of the child process, the\nresult can be conveyed in the exit status rather than via a pipe.\nsince the error value might not fit in 7 bits, a table is used to\ntranslate possible meaningful error values to small integers.\n"},{"hash":"7b5beabceb3ae644acf793a249bbf564faf1ebe6","date":"2013-11-02T08:07:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in inet_aton due to misinterpretation of __ipparse return\n\ninet_aton returns a boolean success value, whereas __ipparse returns 0\non success and -1 on failure. also change the conditional in inet_addr\nto be consistent with other uses of __ipparse where only negative\nvalues are treated as failure.\n"},{"hash":"e2ed37bc15fd4cf4ff1a258e1b8a6862077c04c5","date":"2013-11-04T15:13:21.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix timezone parser code crashing on 64bit sys\n\nif sizeof(time_t) == 8, this code path was missing the correct\noffset into the zoneinfo file, using the header magic to do\noffset calculations.\nthe 6 32bit fields to be read start at offset 20.\n"},{"hash":"75be448958f18b230f9eedf8c44dccb9b4012099","date":"2013-11-04T15:59:17.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"timezone parser: fix offset to transition table in 64bit code path\n\nwe need to skip to the second TZif header, which starts at\nskip+44, and then skip another header (20 bytes) plus the following\n6 32bit values.\n"},{"hash":"8db165258117851e7c5b766ed364e800f18bb40e","date":"2013-11-04T17:07:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"timezone parser: fix iteration over search dir paths\n\ntry+l points to \\0, so only one iteration was ever tried.\n"},{"hash":"1d0d2df609b2e47615c7798d1a09e69a2caff24b","date":"2013-11-09T01:50:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of overly-long TZ environment variable values\n\nthe rest of the code is not prepared to handle an empty TZ string, so\nfalling back to __gmt (\"GMT\"), just as if TZ had been blank or unset,\nis the preferable action.\n"},{"hash":"41a9ba25cd810fb86ad0d6943bf2d5556d91b99e","date":"2013-11-09T02:33:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove O_NOFOLLOW from __map_file used for time zone file loading\n\nit's not clear why I originally wrote O_NOFOLLOW into this; I suspect\nthe reason was with an aim of making the function more general for\nmapping partially or fully untrusted files provided by the user.\nhowever, the timezone code already precludes use of absolute or\nrelative pathnames in suid/sgid programs, and disallows .. in\npathnames which are relative to one of the system timezone locations,\nso there is no threat of opening a symlink which is not trusted by\nappropriate user. since some users may wish to put symbolic links in\nthe zoneinfo directories to alias timezones, it seems preferable to\nallow this.\n"},{"hash":"f5980e330a331b83f99a25c522aae00170dff131","date":"2013-11-09T05:04:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust sys/wait.h not to produde errors in strict ISO C feature profile\n\nsiginfo_t is not available from signal.h when the strict ISO C feature\nprofile (e.g. passing -std=c99 to gcc without defining any other\nfeature test macros) is used, but the type is needed to declare\nwaitid. using sys/wait.h (or any POSIX headers) in strict ISO C mode\nis an application bug, but in the interest of compatibility, it's best\nto avoid producing gratuitous errors. the simplest fix I could find is\nsuppressing the declaration of waitid (and also signal.h inclusion,\nsince it's not needed for anything else) in this case, while still\nexposing everything else in sys/wait.h\n"},{"hash":"4571f9f856d8d6c1643b516c27f861dbab66ec00","date":"2013-11-09T05:18:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement semtimedop\n\nthis is a Linux-specific extension to the sysv semaphore api.\n"},{"hash":"35cf8b3e7303ed52638be600a0ab7d0ba35eb594","date":"2013-11-09T22:54:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix harmless inconsistency in semtimedop\n\nthis should not matter since the reality is that either all the sysv\nsem syscalls are individual syscalls, or all of them are multiplexed\non the SYS_ipc syscall (depending on arch). but best to be consistent\nanyway.\n"},{"hash":"d8e8f1464cb02d6a62f01c7153ca4d7b0cd5c5e6","date":"2013-11-11T04:44:47.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"iswspace: fix handling of 0\n"},{"hash":"46db37289f917e23877a0e0df88cbb150805bc97","date":"2013-11-20T22:40:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"write floating point limit constants to 21 significant decimal places\n\nthis is enough to produce the correct value even if the constant is\ninterpreted as 80-bit extended precision, which matters on archs with\nexcess precision (FLT_EVAL_METHOD==2) under at least some\ninterpretations of the C standard. the shorter representations, while\ncorrect if converted to the nominal precision at translation time,\ncould produce an incorrect value at extended precision, yielding\nresults such as (double)DBL_MAX != DBL_MAX.\n"},{"hash":"326e5c2e27224e3323e54f37621d55c40ebae87c","date":"2013-11-20T23:28:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix the nominal type of LDBL_* limits on archs with ld64\n\npreviously these macros wrongly had type double rather than long\ndouble. I see no way an application could detect the error in C99, but\nC11's _Generic can trivially detect it.\n\nat the same time, even though these archs do not have excess\nprecision, the number of decimal places used to represent these\nconstants has been increased to 21 to be consistent with the decimal\nrepresentations used for the DBL_* macros.\n"},{"hash":"ebbaf2180e6e32043837f570982c2ee86cf19eae","date":"2013-11-21T01:01:57.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: lgamma cleanup (simpler sin(pi*x) for the negative case)\n\n* simplify sin_pi(x) (don't care about inexact here, the result is\n  inexact anyway, and x is not so small to underflow)\n* in lgammal add the previously removed special case for x==1 and\n  x==2 (to fix the sign of zero in downward rounding mode)\n* only define lgammal on supported long double platforms\n* change tgamma so the generated code is a bit smaller\n"},{"hash":"5d01ab4ac64b913c537e91f7c01d5c8e910151da","date":"2013-11-21T01:16:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add (obsolete) bsd drem and finite functions\n"},{"hash":"ceb0ed9cf96d90e613a2c55a84ac0c8172fc7f10","date":"2013-11-21T01:34:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fd leak (missing close-on-exec) in getifaddrs\n"},{"hash":"a516077feba96ec24d1ca8a9cbb8490bfdd066f1","date":"2013-11-21T01:59:43.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add legacy getloadavg api\n"},{"hash":"d8f1908b821098f7a2ff03fbf6b152fe13023057","date":"2013-11-22T20:29:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve robustness of wordexp and fix handling of 0-word case\n\navoid using exit status to determine if a shell error occurred, since\nbroken programs may install SIGCHLD handlers which reap all zombies,\nincluding ones that don't belong to them. using clone and __WCLONE\ndoes not seem to work for avoiding this problem since exec resets the\nexit signal to SIGCHLD.\n\ninstead, the new code uses a dummy word at the beginning of the\nshell's output, which is ignored, to determine whether the command was\nexecuted successfully. this also fixes a corner case where a word\nstring containing zero words was interpreted as a single zero-length\nword rather than no words at all. POSIX does not seem to require this\ncase to be supported anyway, though.\n\nin addition, the new code uses the correct retry idiom for waitpid to\nensure that spurious STOP/CONT signals in the child and/or EINTR in\nthe parent do not prevent successful wait for the child, and blocks\nsignals in the child.\n"},{"hash":"8253f59eae7bdb8b5a0f5b87212671564882d1f0","date":"2013-11-22T20:48:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix resource exhaustion and zero-word cases in wordexp\n\nwhen WRDE_NOSPACE is returned, the we_wordv and we_wordc members must\nbe valid, because the interface contract allows them to return partial\nresults.\n\nin the case of zero results (due either to resource exhaustion or a\nzero-word input) the we_wordv array still should contain a terminating\nnull pointer and the initial we_offs null pointers. this is impossible\non resource exhaustion, so a correct application must presumably check\nfor a null pointer in we_wordv; POSIX however seems to ignore the\nissue. the previous code may have crashed under this situation.\n"},{"hash":"caaf7d443d8f502a209cb5489c45ddcccbebdd34","date":"2013-11-22T20:55:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fd leak and case where fd 1 is already closed in wordexp\n"},{"hash":"aeea71dc042d8d0a05f4293a0e98c9cd009ffc16","date":"2013-11-22T21:29:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix and refactor child reaping logic in wordexp\n\nloop condition was incorrect and confusing and caused an infinite loop\nwhen (broken) applications reaped the pid from a signal handler or\nanother thread before wordexp's call to waitpid could do so.\n"},{"hash":"8ff810d779daa29b78d14e477f5a68b51ed232d1","date":"2013-11-23T12:01:53.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"timeradd/timersub: cast result to void to get rid of warnings\n\npreviously:\ntimersub(&now, t, &diff);\n\nwarning: value computed is not used [-Wunused-value]\n"},{"hash":"b300d5b7bd74070982da50d996773a2dd8156a01","date":"2013-11-23T21:17:38.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"strcmp: Remove unnecessary check for *r\n\nIf *l == *r && *l, then by transitivity, *r.\n"},{"hash":"a3b98a11a9b51801109ad46df2a44ee2ee03e37e","date":"2013-11-23T21:20:51.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"putgrent: Stop writing output on first failure\n\nThis way, if an fprintf fails, we get an incomplete group entry rather\nthan a corrupted one.\n"},{"hash":"3fd1acbfeed025ac833b4d6d2bc45dac4d3562c8","date":"2013-11-23T21:20:56.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"putgrent: Add missing newline\n"},{"hash":"4f6658b9698a3c34dee99ae050d7c22191e1f80b","date":"2013-11-23T21:23:09.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"Fix dn_expand pointer following\n"},{"hash":"7c0ca4d361f402dbfe445cd53cf2b91691d44c7e","date":"2013-11-23T21:56:43.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add multicast structures from RFC 3678 to netinet/in.h\n\nand use _GNU_SOURCE || _BSD_SOURCE guards for all of the RFC 3678\nnamespace polluting things like glibc/uclibc does.\n"},{"hash":"4b2c8fee3599c7676a6eca1e6880b8e042794f53","date":"2013-11-23T21:57:53.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add linux tcp state enums\n"},{"hash":"b0e9d5771162401a5328aec7e1e8a6744e531521","date":"2013-11-23T23:04:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add TCP_NOTSENT_LOWAT tcp socket option, new in linux v3.12\n"},{"hash":"f7d348ec39ce31efdc4963eb4a8f16f48e5ef095","date":"2013-11-23T23:47:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add O_TMPFILE flag, new in linux 3.11\n\ndefinition in linux:\n #define O_TMPFILE (__O_TMPFILE | O_DIRECTORY)\nwhere __O_TMPFILE and O_DIRECTORY are arch specific\n"},{"hash":"10c8b7148b918938d8e681c5801b913dd56cb7e4","date":"2013-11-24T00:34:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use 0 instead of NULL in headers where NULL is not defined\n\nsome macros in sys/mtio.h and syslog.h used NULL without defining it\n"},{"hash":"3fdf94ec5101fab63d0e8196d3e557641a0e19e2","date":"2013-11-24T01:06:38.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: clean up __rem_pio2\n\n- remove the HAVE_EFFICIENT_IRINT case: fn is an exact integer, so\n  it can be converted to int32_t a bit more efficiently than with a\n  cast (the rounding mode change can be avoided), but musl does not\n  support this case on any arch.\n- __rem_pio2: use double_t where possible\n- __rem_pio2f: use less assignments to avoid stores on i386\n- use unsigned int bit manipulation (and union instead of macros)\n- use hexfloat literals instead of named constants\n"},{"hash":"22f29bfebe04ac07bc1907406137fcbd373ede36","date":"2013-11-24T14:36:28.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"shadow: Implement putspent\n"},{"hash":"642936d6dd22b99534cab4099deea8d6ceefeea0","date":"2013-11-24T14:39:30.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"Fix dn_comp prototype and add stub\n\nThis function is used by ping6 from iputils.\n"},{"hash":"b3646b30d670ac5a38674ecc492c38f7d4e92682","date":"2013-11-25T01:57:10.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"shadow: Move spent parsing to internal function\n"},{"hash":"7e771e62e78944b9d1fe7e78ef71422b9d51f275","date":"2013-11-25T02:04:53.000Z","author":{"name":"Michael Forney","email":"mforney@mforney.org"},"message":"shadow: Implement fgetspent\n"},{"hash":"c8a9c22173f485c8c053709e1dfa0a617cb6be1a","date":"2013-11-25T02:42:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"restore type of NULL to void * except when used in C++ programs\n\nunfortunately this eliminates the ability of the compiler to diagnose\nsome dangerous/incorrect usage, but POSIX requires (as an extension to\nthe C language, i.e. CX shaded) that NULL have type void *. plain C\nallows it to be defined as any null pointer constant.\n\nthe definition 0L is preserved for C++ rather than reverting to plain\n0 to avoid dangerous behavior in non-conforming programs which use\nNULL as a variadic sentinel. (it's impossible to use (void *)0 for C++\nsince C++ lacks the proper implicit pointer conversions, and other\npopular alternatives like the GCC __null extension seem non-conforming\nto the standard's requirements.)\n"},{"hash":"2b1f2f146d87fa20099c4d7080a07527dd19b165","date":"2013-11-25T23:34:10.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove duplicate includes from dynlink.c, strfmon.c and getaddrinfo.c\n"},{"hash":"f63b8c8c455929f0f46cc017b4c675faeef901c4","date":"2013-11-27T01:01:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one length failure in strftime/wcsftime and improve error behavior\n\nthese functions were spuriously failing in the case where the buffer\nsize was exactly the number of bytes/characters to be written,\nincluding null termination. since these functions do not have defined\nerror conditions other than buffer size, a reasonable application may\nfail to check the return value when the format string and buffer size\nare known to be valid; such an application could then attempt to use a\nnon-terminated buffer.\n\nin addition to fixing the bug, I have changed the error handling\nbehavior so that these functions always null-terminate the output\nexcept in the case where the buffer size is zero, and so that they\nalways write as many characters as possible before failing, rather\nthan dropping whole fields that do not fit. this actually simplifies\nthe logic somewhat anyway.\n"},{"hash":"a663c930196b50194921e7ee685d0704ac32f6f4","date":"2013-11-27T04:26:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust fallback INFINITY definition for FLT_EVAL_METHOD==2 case\n\non archs with excess precision, the floating point constant 1e40f may\nbe evaluated such that it does not actually produce an infinity.\n1e5000f is sufficiently large to produce an infinity for all supported\nfloating point formats. note that this definition of INFINITY is only\nused for old or non-GNUC compilers anyway; despite being a portable,\nconforming definition, it leads to erroneous warnings on many\ncompilers and thus using the builtin is preferred.\n"},{"hash":"cabe9aa974aca34c0fda91028c770dee96ba51dc","date":"2013-11-27T05:54:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reject invalid address families in getaddrinfo\n\nsubsequent code assumes the address family requested is either\nunspecified or one of IPv4/IPv6, and could malfunction if this\nconstraint is not met, so other address families should be explicitly\nrejected.\n"},{"hash":"8c8cf4bbd269d0535cad48f4088083b5a466803f","date":"2013-11-29T17:45:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"increase TTY_NAME_MAX limit to 32\n\nthe old value of 20 was reported by Laurent Bercot as being\ninsufficient for a reasonable real-world usage case. actual problem\nwas the internal buffer used by ttyname(), but the implementation of\nttyname uses TTY_NAME_MAX, and for consistency it's best to increase\nboth. the new value is aligned with glibc.\n"},{"hash":"7603c5f127316e5ee4c5b161d87742d2ac824567","date":"2013-11-30T18:33:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support mix of IPv4 and v6 nameservers in resolv.conf\n\na v6 socket will only be used if there is at least one v6 nameserver\naddress. if the kernel lacks v6 support, the code will fall back to\nusing a v4 socket and requests to v6 servers will silently fail. when\nusing a v6 socket, v4 addresses are converted to v4-mapped form and\nsetsockopt is used to ensure that the v6 socket can accept both v4 and\nv6 traffic (this is on-by-default on Linux but the default is\nconfigurable in /proc and so it needs to be set explicitly on the\nsocket level). this scheme avoids increasing resource usage during\nlookups and allows the existing network io loop to be used without\nmodification.\n\npreviously, nameservers whose address family did not match the address\nfamily of the first-listed nameserver were simply ignored. prior to\nrecent __ipparse fixes, they were not ignored but erroneously parsed.\n"},{"hash":"da0fcdb8e913ca7cdf8931328f2b37e93309b2c5","date":"2013-12-01T17:32:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix the end of string matching in fnmatch with FNM_PATHNAME\n\na '/' in the pattern could be incorrectly matched against the\nterminating null byte in the string causing arbitrarily long\nsequence of out-of-bounds access in fnmatch(\"/\",\"\",FNM_PATHNAME)\n"},{"hash":"6ec82a3b58ee1b873ff0dfad8fa9d41c3d25dcc0","date":"2013-12-01T19:36:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fnmatch corner cases related to escaping\n\nthe FNM_PATHNAME logic for advancing by /-delimited components was\nincorrect when the / character was escaped (i.e. \\/), and a final \\ at\nthe end of pattern was not handled correctly.\n"},{"hash":"179ab5a505c7060e2703015961173ee900eed780","date":"2013-12-01T22:27:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add infrastructure to record and report the version of libc.so\n\nthis is still experimental and subject to change. for git checkouts,\nan attempt is made to record the exact revision to aid in bug reports\nand debugging. no version information is recorded in the static libc.a\nor binaries it's linked into.\n"},{"hash":"9f5053758f6e761c9c09501241b57ec5aeb37329","date":"2013-12-02T04:16:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typos in INSTALL file\n"},{"hash":"bb181ae3b86d801a4f78d7ae94cf5b80aa6a1d97","date":"2013-12-02T07:04:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"expose FNM_* extensions in fnmatch.h without _GNU_SOURCE\n\nat least a couple of these are used on BSD too, and the FNM_*\nnamespace is reserved in fnmatch.h anyway.\n"},{"hash":"a2231757044db66a36b9899a56011ae0cbac8d1e","date":"2013-12-02T07:06:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove now-unnecessary features.h inclusion from fnmatch.h\n"},{"hash":"a4e10e304d54c6ac3c12db08774ef74a978a2073","date":"2013-12-02T07:08:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement FNM_LEADING_DIR extension flag in fnmatch\n\npreviously this flag was defined and accepted as a no-op, possibly\nbreaking some software that uses it. given the choice to remove the\ndefinition and possibly break applications that were already working,\nor simply implement the feature, the latter turned out to be easy\nenough to make the decision easy.\n\nin the case where the FNM_PATHNAME flag is also set, this\nimplementation is clean and essentially optimal. otherwise, it's an\ninefficient \"brute force\" implementation. at some point, when cleaning\nup and refactoring this code, I may add a more direct code path for\nhandling FNM_LEADING_DIR in the non-FNM_PATHNAME case, but at this\npoint my main interest is avoiding introducing new bugs in the code\nthat implements the standard fnmatch features specified by POSIX.\n"},{"hash":"a4b51633cfdecf597c247afe028c08b520816590","date":"2013-12-02T07:45:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"workaround clang deficiency affecting thread pointer access on powerpc\n\nbased on patch by Richard Pennington, who initially reported the\nissue.\n"},{"hash":"ceacb6a4cf926da6c05e104779f8475c709ff5e4","date":"2013-12-04T00:01:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mv usage in install.sh to avoid bogus interactive prompting\n"},{"hash":"83c8fe505817d051ec17ada568645221da80567d","date":"2013-12-04T01:34:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove duplicate definition of _PATH_LASTLOG in paths.h\n"},{"hash":"ccbc365543ff5f0f29654edcb809b2953024c383","date":"2013-12-04T21:31:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix res_mkquery and res_send prototypes in resolv.h\n\nhistorically these functions appeared in BSD 4.3 without prototypes,\nthen in the bind project prototypes were added to resolv.h, but those\nwere incompatible with the definitions of the implementation.\nthe bind resolv.h became the defacto api most systems use now, but the\nold internal definitions found their way into the linux manuals and thus\ninto musl.\n"},{"hash":"2c2418088d07a2ecb0ecafd8c950bfd38ebf916b","date":"2013-12-04T21:38:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix SHUT_WR typo in sys/socket.h and duplicate definitions of SHUT_*\n"},{"hash":"b054137a640c7fd0acb6cc9c4edda055465b15be","date":"2013-12-04T21:39:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"move struct ucred under _GNU_SOURCE in sys/socket.h for clean posix namespace\n"},{"hash":"ae71a43b02b2f672b47d305f4d15a9011756e301","date":"2013-12-04T23:00:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove dependency of version.h on .git/* to avoid errors\n\nthe wildcard function in GNU make includes dangling symlinks; if any\nexist under the .git directory, they would get added as dependencies,\ncausing make to exit with an error due to lacking a rule to build the\nmissing file.\n\nas far as I can tell, git operations which should force version.h to\nbe rebuilt must all touch the mtime of the top-level .git directory.\n"},{"hash":"8708e137d68480f4b996bfec2cd2ca596f1105d7","date":"2013-12-07T02:59:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add posix_close, accepted for inclusion in the next issue of POSIX\n\nthis is purely a wrapper for close since Linux does not support EINTR\nsemantics for the close syscall.\n"},{"hash":"ec411999a0262c8e3e6be53ae11ad761776a2fc1","date":"2013-12-12T03:42:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: define _GNU_SOURCE when implementing non-standard math functions\n\nthis makes the prototypes in math.h are visible so they are checked agaist\nthe function definitions\n"},{"hash":"ac45692a53a1b8d2ede329d91652d43c1fb5dc8d","date":"2013-12-12T04:18:34.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove an unnecessary check in inet_pton\n\nat most 4 hexadecimal digits are processed in one field so the\nvalue cannot overflow. the netdb.h header was not used.\n"},{"hash":"571744447c23f91feb6439948f3a619aca850dfb","date":"2013-12-12T05:09:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"include cleanups: remove unused headers and add feature test macros\n"},{"hash":"a7dbcf5c8ca7edb7a46eb276031ad1df4131135b","date":"2013-12-13T07:20:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use 0 instead of NULL for null pointer constants\n\nand thereby remove otherwise-unnecessary inclusion of stddef.h\n"},{"hash":"2b7cf6dbb9d56c5fac8f673e7c9d06c81d312af5","date":"2013-12-13T07:25:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize get_current_dir_name to reduce stack bloat\n\nour getcwd already (as an extension) supports allocation of a buffer\nwhen the buffer argument is a null pointer, so there's no need to\nduplicate the allocation logic in this wrapper function. duplicating\nit is actually harmful in that it doubles the stack usage from\nPATH_MAX to 2*PATH_MAX.\n"},{"hash":"0311d1dd17ca88da6edd61b6535ec8637642dfe4","date":"2013-12-15T00:51:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic linker entry point for microblaze\n\nthe ABI allows the callee to clobber stack slots that correspond to\narguments passed in registers, so the caller must adjust the stack\npointer to reserve space appropriately. prior to this fix, the argv\narray was possibly clobbered by dynamic linker code before passing\ncontrol to the main program.\n"},{"hash":"f89e29829029c5003450f7b58bd00fe5d1049d09","date":"2013-12-19T10:05:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix hangs in localtime for near-overflowing time_t values on 64-bit archs\n"},{"hash":"65ea604c74f3fecbc61a266a22fdf527764995b6","date":"2013-12-19T19:24:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of fchmod, fstat, fchdir, and fchown to produce EBADF\n\nthe workaround/fallback code for supporting O_PATH file descriptors\nwhen the kernel lacks support for performing these operations on them\ncaused EBADF to get replaced by ENOENT (due to missing entry in\n/proc/self/fd). this is unlikely to affect real-world code (calls that\nmight yield EBADF are generally unsafe, especially in library code)\nbut it was breaking some test cases.\n\nthe fix I've applied is something of a tradeoff: it adds one syscall\nto these operations on kernels where the workaround is needed. the\nalternative would be to catch ENOENT from the /proc lookup and\ntranslate it to EBADF, but I want to avoid doing that in the interest\nof not touching/depending on /proc at all in these functions as long\nas the kernel correctly supports the operations. this is following the\ngeneral principle of isolating hacks to code paths that are taken on\nbroken systems, and keeping the code for correct systems completely\nhack-free.\n"},{"hash":"e2b4525e3bb50acdfe095e6829b040636d37a295","date":"2013-12-20T16:36:26.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add TCP_INFO and TCP_MD5SIG socket option related structures\n"},{"hash":"c91ad4f7167bad8314b06c487ddd1c638981fc24","date":"2013-12-20T16:42:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add netinet/igmp.h and multicast groups to netinet/in.h\n\nbased on patch by Timo Teräs.\n"},{"hash":"e36d8a1d74a00e56990728508635296440ddce1c","date":"2013-12-20T16:52:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sys/quota.h and quotactl syscall wrapper\n\nbased on patch by Timo Teräs.\n"},{"hash":"18144af297e7aa3a0f121262dba569446de6191a","date":"2013-12-20T16:56:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement legacy function herror\n\nbased on patch by Timo Teräs; greatly simplified to use fprintf.\n"},{"hash":"7e10f209fbc26a5179a4c0817c986e7c7bd327c9","date":"2013-12-30T02:55:21.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix struct signalfd_siginfo\n\nssi_ptr is really 64-bit in kernel, so fix that. assuming sizeof(void*)\nfor it also caused incorrect padding for 32-bits, as the following\n64-bits are aligned to 64-bits (and the padding was not taken into\naccount), so fix the padding as well. add addr_lsb field while there.\n"},{"hash":"5c81b8fe453994a74afa7cd355dd707ee2d01a24","date":"2014-01-02T21:10:45.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"add fanotify syscall wrapper and header\n"},{"hash":"7a995fe706e519a4f55399776ef0df9596101f93","date":"2014-01-02T22:03:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable sbrk for all values of increment except 0\n\nuse of sbrk is never safe; it conflicts with malloc, and malloc may be\nused internally by the implementation basically anywhere. prior to\nthis change, applications attempting to use sbrk to do their own heap\nmanagement simply caused untrackable memory corruption; now, they will\nfail with ENOMEM allowing the errors to be fixed.\n\nsbrk(0) is still permitted as a way to get the current brk; some\nmisguided applications use this as a measurement of their memory\nusage or for other related purposes, and such usage is harmless.\n\neventually sbrk may be re-added if/when malloc is changed to avoid\nusing the brk by using mmap for all allocations.\n"},{"hash":"863d628d93ea341b6a32661a1654320ce69f6a07","date":"2014-01-02T22:13:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable the brk function\n\nthe reasons are the same as for sbrk. unlike sbrk, there is no safe\nusage because brk does not return any useful information, so it should\njust fail unconditionally.\n"},{"hash":"9e91398b282f3ca3541da71c51adb9958f3e9cc2","date":"2014-01-03T10:29:57.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fanotify.c: fix typo in header inclusion\n\nthe header is included only as a guard to check that the declaration\nand definition match, so the typo didn't cause any breakage aside\nfrom omitting this check.\n"},{"hash":"b589fb4e2999026494fa4bced90aeca9e613f754","date":"2014-01-03T19:33:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 0.9.15\n"},{"hash":"1e7a581ad6e2b03e91748dd1295288e053f86e04","date":"2014-01-07T02:31:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add some missing LFS64 aliases for fadvise/fallocate functions\n"},{"hash":"839cc4e6da609a0b24f6cc32b0b11558fd77dd83","date":"2014-01-07T03:03:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"const-qualify the address argument to dladdr\n\nthis agrees with implementation practice on glibc and BSD systems, and\nis the const-correct way to do things; it eliminates warnings from\npassing pointers to const. the prototype without const came from\nseemingly erroneous man pages.\n"},{"hash":"eca335fc0453d3680fd9f112574919e13fab31d2","date":"2014-01-07T03:05:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate explicit (long) casts when making syscalls\n\nthis practice came from very early, before internal/syscall.h defined\nmacros that could accept pointer arguments directly and handle them\ncorrectly. aside from being ugly and unnecessary, it looks like it\nwill be problematic when we add support for 32-bit ABIs on archs where\nregisters (and syscall arguments) are 64-bit, e.g. x32 and mips n32.\n"},{"hash":"dbe221ecff2dd8a3d4d005d80b81064e156f8f4a","date":"2014-01-07T03:17:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix argument types for legacy function inet_makeaddr\n\nthe type int was taken from seemingly erroneous man pages. glibc uses\nin_addr_t (uint32_t), and semantically, the arguments should be\nunsigned.\n"},{"hash":"2750337379d1314026d174cd5b49e3f8ea590637","date":"2014-01-07T07:41:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect type for wd argument of inotify_rm_watch\n\nthis was wrong since the original commit adding inotify, and I don't\nsee any explanation for it. not even the man pages have it wrong. it\nwas most likely a copy-and-paste error.\n"},{"hash":"2c5e7560251b25b36ae3785211962e9597dc7e7d","date":"2014-01-07T07:44:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove sys/sysctl.h\n\nthis functionality has essentially always been deprecated in linux,\nand was never supported by musl. the presence of the header was\nreported to cause some software to attempt to use the nonexistant\nfunction, so removing the header is the cleanest solution.\n"},{"hash":"3500555db382e25b13c0832e5af13b6796cfca43","date":"2014-01-07T07:50:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix const-correctness in sigandset/sigorset arguments\n\nthis change is consistent with the corresponding glibc functions and\nis semantically const-correct. the incorrect argument types without\nconst seem to have been taken from erroneous man pages.\n"},{"hash":"74998fbec13cb2d1c6a0952141b90f4216ab89e6","date":"2014-01-07T07:58:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signedness of pgoff argument to remap_file_pages\n\nboth the kernel and glibc agree that this argument is unsigned; the\nincorrect type ssize_t came from erroneous man pages.\n"},{"hash":"1d23b3c9136f606276142ec0037ff78fbb95e26d","date":"2014-01-07T08:02:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix const-correctness of argument to stime\n\nit's unclear what the historical signature for this function was, but\nsemantically, the argument should be a pointer to const, and this is\nwhat glibc uses. correct programs should not be using this function\nanyway, so it's unlikely to matter.\n"},{"hash":"131871a3d846369fd925d3f8edb692edbad77e4d","date":"2014-01-08T07:18:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in fcntl, avoid passing pointer arguments to syscalls as longs\n\nreally, fcntl should be changed to use the correct type corresponding\nto cmd when calling va_arg, and to carry the correct type through\nuntil making the syscall. however, this greatly increases binary size\nand does not seem to offer any benefits except formal correctness, so\nI'm holding off on that change for now.\n\nthe minimal changes made in this patch are in preparation for addition\nof the x32 port, where the syscall macros need to know whether their\narguments are pointers or integers in order to properly pass them to\nthe 64-bit kernel.\n"},{"hash":"289294220f278a291452332da8f45cf756f57fe5","date":"2014-01-08T21:12:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix type of semctl variadic argument\n\nper POSIX, the variadic argument has type union semun, which may\ncontain a pointer or int; the type read depends on the command being\nissued. this allows the userspace part of the implementation to be\ntype-correct without requiring special-casing for different commands.\nthe kernel always expects to receive the argument interpreted as\nunsigned long (or equivalently, a pointer), and does its own handling\nof extracting the int portion from the representation, as needed.\n\nthis change fixes two possible issues: most immediately, reading the\nargument as a (signed) long and passing it to the syscall would\nperform incorrect sign-extension of pointers on the upcoming x32\ntarget. the other possible issue is that some archs may use different\n(user-space) argument-passing convention for unions, preventing va_arg\nfrom correctly obtaining the argument when the type long (or even\nunsigned long or void *) is passed to it.\n"},{"hash":"bcff807dc3c1f07db61dae804086b8183bf5df7b","date":"2014-01-08T21:51:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add drem and dremf weak aliases to i386 remainder asm\n\nweak_alias was only in the c code, so drem was missing on platforms\nwhere remainder is implemented in asm.\n"},{"hash":"5f94205369a8b98ce2ce4ad2f7e2dba2da557846","date":"2014-01-08T21:52:26.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add __isoc99_vfscanf weak alias to vfscanf\n\nthis glibc abi compatibility function was missed when the scanf\naliases were added.\n"},{"hash":"8e776e3ed40a4fb084e3d671d887825049c8f0cf","date":"2014-01-08T22:37:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inadvertent use of struct in place of union for semun\n"},{"hash":"acde013522fc264f0898d300cc9d2ff796c1a006","date":"2014-01-08T23:54:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix remaining known namespace violations for netinet/in.h\n\nthe imr_, imsf_, ip6_, ip6m_, ipi_, ipi6_, SCM_, and SOL_ prefixes are\nnot in the reserved namespace for this header. thus the constants and\nstructures using them need to be protected under appropriate feature\ntest macros.\n\nthis also affects some headers which are permitted to include\nnetinet/in.h, particularly netdb.h and arpa/inet.h.\n\nthe SOL_ macros are moved to sys/socket.h where they are in the\nreserved namespace (SO*). they are still accessible via netinet/in.h\nsince it includes sys/socket.h implicitly (which is permitted).\n\nthe SCM_SRCRT macro is simply removed, since the definition used for\nit, IPV6_RXSRCRT is not defined anywhere. it could be re-added, this\ntime in sys/socket.h, if the appropriate value can be determined;\nhowever, given that the erroneous definition was not caught, it is\nunlikely that any software actually attempts to use SCM_SRCRT.\n"},{"hash":"a627eb35864d5c29a3c3300dfe83745ab1e7a00f","date":"2014-01-09T00:20:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace violations in termios.h, at least mostly\n\nthe fix should be complete on archs that use the generic definitions\n(i386, arm, x86_64, microblaze), but mips and powerpc have not been\nchecked thoroughly and may need more fixes.\n"},{"hash":"d18df33cb11291da96eff76c245b421a8d784f69","date":"2014-01-09T00:27:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add IUTF8 to termios.h on archs that were missing it\n"},{"hash":"a1527a0c3ed72df3c1a22f774c8618a486b87b94","date":"2014-01-09T00:36:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace violations in utmpx.h\n"},{"hash":"513136efa4274c39ed1c071ae4f4f2b10118f9f5","date":"2014-01-09T00:39:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace violation in sys/shm.h\n\nin fixing this, I've changed the logic from ugly #if/#else blocks\ninside the struct shm_info definition to a fixed struct definition and\noptional macros to rename the elements. this will be helpful if we\nneed to move shm_info to a bits header in the future, as it will keep\nthe feature test logic out of bits.\n"},{"hash":"7acbbdfd5d6e264dcf8efa13188f0c8edabee047","date":"2014-01-11T16:20:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make type of st_dev explicitly dev_t in x86_64 stat.h\n\notherwise it's unclear that it's correct. aside from that, it makes\nfor a gratuitous difference between the x86_64 header and the upcoming\nx32 header.\n"},{"hash":"f29e834d985fbca0d8f7e70c056c7dbcfc5c9c9e","date":"2014-01-11T16:23:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove size suffix in x86_64 __pthread_self asm\n\nthe operand size is unnecessary, since the assembler knows it from the\ndestination register size. removing the suffix makes it so the same\ncode should work for x32.\n"},{"hash":"311736516e3a0782a6ec0e338190d08410d942de","date":"2014-01-12T00:37:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove gratuitous temp vars, casts, and suffixes in x86_64 atomic.h\n\naside from general cleanup, this should allow the identical atomic.h\nfile to be used for the upcoming x32 port.\n"},{"hash":"50a50988d512f4e3a0e9c41227d5befa3b92540d","date":"2014-01-16T02:48:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove more unnecessary operand-size suffixes from x86_64 atomic.h\n"},{"hash":"7cbb6f70c8fe711644ec0dbede1973cc6641a283","date":"2014-01-16T03:29:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix system breakage window during make install due to permissions\n\ninstall.sh was wrongly waiting until after atomically replacing the\nold file to set the correct permissions on the new file. in the case\nof the dynamic linker, this would cause a dynamic-linked chmod command\nnot to run (due to missing executable permissions on the dynamic\nlinker) and thus leave the system in an unusable state.\n\neven if chmod is static-linked, the old behavior had a race window\nwhere dynamic-linked programs could fail to run.\n"},{"hash":"1569f396bb76e9d54f6c4492ed6778e37b87bc70","date":"2014-01-21T01:01:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix initstate to make the state buffer usable in setstate\n\nsetstate could use the results of previous initstate or setstate\ncalls (they return the old state buffer), but the documentation\nrequires that an initialized state buffer should be possible to\nuse in setstate immediately, which means that initstate should\nsave the generator parameters in it.\n\nI also removed the copyright notice since it is present in the\ncopyright file.\n"},{"hash":"69003e0590e1fc50391a639b285200403a58ad01","date":"2014-01-21T05:36:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in dynamic linker when certain copy relocations are unsatisfied\n\nSTB_WEAK is only a weak reference for undefined symbols (those with a\nsection of SHN_UNDEF). otherwise, it's a weak definition. normally\nthis distinction would not matter, since a relocation referencing a\nsymbol that also provides a definition (not SHN_UNDEF) will always\nsucceed in finding the referenced symbol itself. however, in the case\nof copy relocations, the referenced symbol itself is ignored in order\nto search for another symbol to copy from, and thus it's possible that\nno definition is found. in this case, if the symbol being resolved\nhappened to be a weak definition, it was misinterpreted as a weak\nreference, suppressing the error path and causing a crash when the\ncopy relocation was performed with a null source pointer passed to\nmemcpy.\n\nthere are almost certainly still situations in which invalid\ncombinations of symbol and relocation types can cause the dynamic\nlinker to crash (this is pretty much inevitable), but the intent is\nthat crashes not be possible for symbol/relocation tables produced by\na valid linker.\n"},{"hash":"59314304a0320fd3dd4caa56e2ebc625ffc46c56","date":"2014-01-21T06:06:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add version.h to .gitignore; it is a generated file\n"},{"hash":"f1471d32166e0881dccc1d551b59238a07351668","date":"2014-01-23T02:24:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix an overflow in wcsxfrm when n==0\n\nposix allows zero length destination\n"},{"hash":"73871ee3f21b13b88f2f20a39a1d9bc751bcc1df","date":"2014-02-01T19:33:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix nftw FTW_MOUNT flag\n\nthe incorrect check for crossing device boundaries was preventing nftw\nfrom traversing anything except the initially provided pathname.\n"},{"hash":"16a3580ef3a27d7f1fb0f76441a973b71a35b527","date":"2014-02-05T16:09:53.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add legacy functions setkey() and encrypt()\n"},{"hash":"a0351ee6a7b795808aa20c4b607bc7a0379422ef","date":"2014-02-05T20:58:11.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add NO_ADDRESS macro to netdb.h as an alias for NO_DATA\n\nsome applications expect it to be defined, despite the standard making\nit impossible for it to ever be returned as a value distinct from\nNO_DATA. since these macros are outside the scope of the current\nstandards, no special effort is made to hide NO_ADDRESS under\nconditions where the others are exposed.\n"},{"hash":"ad87c2eecf70c6f2852a4908b04a6329cbebaf7d","date":"2014-02-05T21:34:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add nonstandard timespec/timeval conversion macros in sys/time.h\n\nthese are poorly designed (illogical argument order) and even poorly\nimplemented (brace issues) on glibc, but unfortunately some software\nis using them. we could consider removing them again in the future at\nsome point if they're documented as deprecated, but for now the\nsimplest thing to do is just to provide them under _GNU_SOURCE.\n"},{"hash":"fdaaa68d827430caa930e4c966fa8d8a9f8f64c4","date":"2014-02-05T21:55:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for BSD struct tcphdr in netinet/tcp.h\n\nthere are two versions of this structure: the BSD version and the GNU\nversion. previously only the GNU version was supported. the only way\nto support both simultaneously is with an anonymous union, which was a\nnonstandard extension prior to C11, so some effort is made to avoid\nbreakage with compilers which do not support anonymous unions.\n\nthis commit is based on a patch by Timo Teräs, but with some changes.\nin particular, the GNU version of the structure is not exposed unless\n_GNU_SOURCE is defined; this both avoids namespace pollution and\ndependency on anonymous unions in the default feature profile.\n"},{"hash":"685b1cd4a0d1a890c55f9481b67e33e51412babb","date":"2014-02-05T22:22:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix use of legacy u_intN_t types in netinet/tcp.h\n\npolicy is to avoid using these types except where they are needed for\nnamespace conformance. C99-style stdint.h types should be used\ninstead.\n"},{"hash":"89511cd943d807b7fe31b61c06d4fe09888b8e9a","date":"2014-02-05T22:25:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reduce namespace pollution in netinet/udp.h\n\nthe affected part of the header is responsible for providing both GNU\nand BSD versions of the udphdr structure. previously, the\nnamespace-polluting GNU names were always used for the actual struct\nmembers, and the BSD names, which are named in a manner resembling a\nsane namespace, were always macros defined to expand to the GNU names.\nnow, unless _GNU_SOURCE is defined, the BSD names are used as the\nactual structure members, and the macros and GNU names only come into\nplay when the application requests them.\n"},{"hash":"3af2edee150484940916eba1984f78c3b965dd05","date":"2014-02-07T05:57:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ftello result for append streams with unflushed output\n\nwhen there is unflushed output, ftello (and ftell) compute the logical\nstream position as the underlying file descriptor's offset plus an\nadjustment for the amount of buffered data. however, this can give the\nwrong result for append-mode streams where the unflushed writes should\nadjust the logical position to be at the end of the file, as if a seek\nto end-of-file takes place before the write.\n\nthe solution turns out to be a simple trick: when ftello (indirectly)\ncalls lseek to determine the current file offset, use SEEK_END instead\nof SEEK_CUR if the stream is append-mode and there's unwritten\nbuffered data.\n\nthe ISO C rules regarding switching between reading and writing for a\nstream opened in an update mode, along with the POSIX rules regarding\nswitching \"active handles\", conveniently leave undefined the\nhypothetical usage cases where this fix might lead to observably\nincorrect offsets.\n\nthe bug being fixed was discovered via the test case for glibc issue\n"},{"hash":"758ab35a167ac17a4e3102cee5d16b75053842a7","date":"2014-02-07T06:16:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in fdopen, avoid setting O_APPEND flag if it's already set\n\nthis saves a syscall in the case where the underlying open already\ntook place with O_APPEND, which is common because fopen with append\nmodes sets O_APPEND at the time of open before passing the file\ndescriptor to __fdopen.\n"},{"hash":"929729d4307e28d7023fbee2b727a56fc34b744c","date":"2014-02-09T17:19:03.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix fesetenv(FE_DFL_ENV) on i386\n\nthe default fenv was not set up properly, in particular the\ntag word that indicates the contents of the x87 registers was\nset to 0 (used) instead of 0xffff (empty)\n\nthis could cause random crashes after setting the default fenv\nbecause it corrupted the fpu stack and then any float computation\ngives NaN result breaking the program logic (usually after a\nfloat to integer conversion).\n"},{"hash":"7ee48f7b69523c68768684551bc37ba05496c27f","date":"2014-02-09T17:39:53.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix fesetenv(FE_DFL_ENV) on x86_64 (see previous commit)\n"},{"hash":"fdf5f1b13123883ac1d5e298e5f32c7ed43578ce","date":"2014-02-10T02:07:43.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"clone: make clone a wrapper around __clone\n\nThe architecture-specific assembly versions of clone did not set errno on\nfailure, which is inconsistent with glibc.  __clone still returns the error\nvia its return value, and clone is now a wrapper that sets errno as needed.\nThe public clone has also been moved to src/linux, as it's not directly\nrelated to the pthreads API.\n\n__clone is called by pthread_create, which does not report errors via\nerrno.  Though not strictly necessary, it's nice to avoid clobbering errno\nhere.\n"},{"hash":"aa6ce3d4e31e6e138a8fa5911d801ebc5ab47473","date":"2014-02-11T09:51:16.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix signed and unsigned comparision in macros in public headers\n\ngcc -Wsign-compare warns about expanded macros that were defined in\nstandard headers (before gcc 4.8) which can make builds fail that\nuse -Werror. changed macros: WIFSIGNALED, __CPU_op_S\n"},{"hash":"e74f3b0234de9a8e0596166bdfa04af3f031249c","date":"2014-02-11T17:02:06.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add parens when bit and arith ops are mixed in macros in public headers\n\nanother commit to silence gcc warnings (-Wparentheses) for standard headers.\nchanged macros: LOG_UPTO, IN6_ARE_ADDR_EQUAL\n"},{"hash":"8011614da008032642aa8292c3fd079bf7a8843d","date":"2014-02-12T06:03:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make posix_spawn accept null pid pointer arguments\n\nthis is a requirement in the specification that was overlooked.\n"},{"hash":"eb375ef795a7e810a24d8b45c680be365a402a91","date":"2014-02-13T17:24:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in table for getprotoent that caused out-of-bound reads\n\nthis was unlikely to lead to any crash or dangerous behavior, but\ncaused adjacent string constants to be treated as part of the\nprotocols table, possibly returning nonsensical results for unknown\nprotocol names/numbers or when getprotoent was called in a loop to\nenumerate all protocols.\n"},{"hash":"3e02ce1b411306fb3cbf0194662bec667fed1008","date":"2014-02-13T17:27:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ipv6 and icmpv6 to getprotoent-family functions\n\nbased on patch by orc.\n"},{"hash":"fdb3efa5ddfa7120de98f8ae78b5f5dc9e8e2e71","date":"2014-02-18T16:04:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add flock64 alias for (struct) flock in fcntl.h\n\nthis was a missing part of the LFS64 API; it's \"needed\" for use with\nfcntl and the corresponding lock commands.\n"},{"hash":"dc01e2cbfb290198c03514fe51ed32c1098b774f","date":"2014-02-22T03:25:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fallback emulation for accept4 on old kernels\n\nthe other atomic FD_CLOEXEC interfaces (dup3, pipe2, socket) already\nhad such emulation in place. the justification for doing the emulation\nhere is the same as for the other functions: it allows applications to\nsimply use accept4 rather than having to have their own fallback code\nfor ENOSYS/EINVAL (which one you get is arch-specific!) and there is\nno reasonable way an application could benefit from knowing the\noperation is emulated/non-atomic since there is no workaround at the\napplication level for non-atomicity (that is the whole reason these\ninterfaces were added).\n"},{"hash":"bf84967cae9a5ef5582f9bbf5a097fb083126e33","date":"2014-02-22T08:50:39.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"internal/syscall.h: use a macro for the syscall args casts\n\nthis allows syscall_arch.h to define the macro __scc if special\ncasting is needed, as is the case for x32, where the actual syscall\narguments are 64bit, but, in case of pointers, would get sign-extended\nand thus become invalid.\n"},{"hash":"5cc1d920ba21e9f7672438e86fa11a0db52e23ea","date":"2014-02-22T11:24:35.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"internal/syscall.h: add syscall_arg_t macro\n\nsome 32-on-64 archs require that the actual syscall args be long long.\nin that case syscall_arch.h can define syscall_arg_t to whatever it needs\nand syscall.h picks it up.\nall other archs just use long as usual.\n"},{"hash":"3b168ce1fbff75e509a9730b27ee22e8bbd9fb8f","date":"2014-02-22T11:25:07.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"use syscall_arg_t type for syscall prototypes in pthread code\n"},{"hash":"1a2e55b95a2cf51616cce7b46f9a30e820679314","date":"2014-02-22T11:25:17.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"sys/sem.h: cheat and make all longs use time_t instead\n\nmost of the members should be time_t anyway, and time_t has the\ncorrect semantics for \"syscall_long\", so it works on all archs, even x32.\n"},{"hash":"0f169cbb79c39a5b15f7a27d9283cdeb6e122b8f","date":"2014-02-23T10:07:18.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"sys/shm.h: move arch specific structs to bits/\n"},{"hash":"323272db175204b951f119dae4bd99ef05e20f13","date":"2014-02-23T10:07:18.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"import vanilla x86_64 code as x32\n"},{"hash":"664cd341921007cea52c8891f27ce35927dca378","date":"2014-02-23T10:09:16.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"x32 port (diff against vanilla x86_64)\n"},{"hash":"3e4b2cdc1b3b881ffdcd8f2119a7bf850f01954d","date":"2014-02-23T10:09:33.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"configure: recognize x86_64-x32 and x32\n\nx32 is the internal arch name, but glibc uses x86_64-x32.\nthere doesn't exist a specific triple for x32 in gcc and binutils.\nyou're supposed to build your compiler for x86_64 and configure\nit with multilib support for \"mx32\".\n\nhowever it turns out that using a triple of x86_64-x32 makes\ngcc and binutils pick up the right arch (they detect it as x86_64)\nand allows us to have a unique triple for cross-compiler toolchains.\n"},{"hash":"adbeefbebdae8ef48b3a46e9bb7700678d42631f","date":"2014-02-23T10:09:33.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"configure: suppress bogus pointer-int cast warnings\n"},{"hash":"d8b587796f7cfa0c3aa780ad19afe2e30ce84a09","date":"2014-02-23T10:43:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mostly-cosmetic fixups to x32 port merge\n"},{"hash":"e002f660b8d96b414f2399248daffb3544dd837d","date":"2014-02-23T15:38:40.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix some issues in x32 syscall_cp_fixup\n\n- the nanosleep fixup \"fixed\" the second timespec* argument erroneusly.\n- the futex fixup was missing the check for FUTEX_WAIT.\n- general cleanup using a macro.\n"},{"hash":"d05aaedaabd4f5472c233dbbd1ff4bb9c9c99794","date":"2014-02-23T19:49:58.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix x32 syscall arch.h timespec fixup code\n\nit's legal to call the __syscall functions with more arguments than\nnecessary, and the __syscall_cp cancel dummy impl. does just that.\n\nthus we must insert the switch for all possible syscalls numbers\ninto all of the syscallN inline functions.\n"},{"hash":"3a3c813e08d808224c12fd0e9104aeff7c45c9a7","date":"2014-02-23T22:15:54.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"superh port\n"},{"hash":"744f11897a509c54ecbac5e8e27facf3c14b2142","date":"2014-02-24T04:20:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make the x32 port use the correct ld-musl-x32.path filename\n\npreviously it was wrongly using the x86_64 one, precluding having both\nx32 and x86_64 libs present on the same system.\n"},{"hash":"dbed392410e333fde86c14ea17a46d1ad9c760f1","date":"2014-02-24T22:06:06.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fixup general __syscall breakage introduced in x32 port\n\nthe reordering of headers caused some risc archs to not see\nthe __syscall declaration anymore.\nthis caused build errors on mips with any compiler,\nand on arm and microblaze with clang.\n\nwe now declare it locally just like the powerpc port does.\n"},{"hash":"e5bb165bed7be4176914672d25ff8e286b6fba49","date":"2014-02-24T22:16:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"mips: add mips-sf subarch support (soft-float)\n\nUserspace emulated floating-point (gcc -msoft-float) is not compatible\nwith the default mips abi (assumes an FPU or in kernel emulation of it).\nSoft vs hard float abi should not be mixed, __mips_soft_float is checked\nin musl's configure script and there is no runtime check. The -sf subarch\ndoes not save/restore floating-point registers in setjmp/longjmp and only\nprovides dummy fenv implementation.\n"},{"hash":"e7837ec79f818415c1f55edd64c759ee6937a64c","date":"2014-02-24T22:31:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing sub files for mipsel-sf to use softfloat code\n\nthe build system has no automatic way to know this code applies to\nboth big (default) and little endian variants, so explicit .sub files\nare needed.\n"},{"hash":"d99c9993228c4dc3766509fab9b70d7513404286","date":"2014-02-24T23:12:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"elf.h: new elf header flag to mark 2008-NaN vs legacy-NaN on mips\n\nsee glibc commit 9c21573c02446b3d5cf6a34b67c8545e5be6a600\n"},{"hash":"a8a4e5c598c23028326f225c4fa27a27fb92b824","date":"2014-02-24T23:17:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"elf.h: add aarch64 relocations\n"},{"hash":"099ce3631c682e353e8090f49f713980d438f94e","date":"2014-02-24T23:22:04.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"sys/socket.h: add the SO_MAX_PACING_RATE SOL_SOCKET option\n\nintroduced in linux v3.13, 62748f32d501f5d3712a7c372bbb92abc7c62bc7\n"},{"hash":"fb5a2ef8dfd9d5b7686865ec6bafe33398ec452f","date":"2014-02-24T23:24:05.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"if_ether.h: new ethernet protocol type\n\nfor High-availability Seamless Redundancy (HSR) specified in IEC 62439-3\nnew in linux v3.13, f421436a591d34fa5279b54a96ac07d70250cc8d\n"},{"hash":"d82db8550a2fc7ec573b28073317532ec7ca873e","date":"2014-02-24T23:28:31.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"in.h: new IP_MTU_DISCOVER mode IP_PMTUDISC_INTERFACE\n\nintroduced in linux v3.13, 482fc6094afad572a4ea1fd722e7b11ca72022a0\nto mitigate dns cache poisoning via fragmentation\n"},{"hash":"b9f7f2e8762922a1a24d41358164ebe9ae437e31","date":"2014-02-25T18:05:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix readdir not to set ENOENT when directory is removed while reading\n\nper POSIX, ENOENT is reserved for invalid stream position; it is an\noptional error and would only happen if the application performs\ninvalid seeks on the underlying file descriptor. however, linux's\ngetdents syscall also returns ENOENT if the directory was removed\nbetween the time it was opened and the time of the read. we need to\ncatch this case and remap it to simple end-of-file condition (null\npointer return value like an error, but no change to errno). this\nissue reportedly affects GNU make in certain corner cases.\n\nrather than backing up and restoring errno, I've just changed the\nsyscall to be made in a way that doesn't affect errno (via an inline\nsyscall rather than a call to the __getdents function). the latter\nstill exists for the purpose of providing the public getdents alias\nwhich sets errno.\n"},{"hash":"aacd348637e38795dd7ae3c7c8c908d8c0cd24fd","date":"2014-02-28T03:03:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename superh port to \"sh\" for consistency\n\nlinux, gcc, etc. all use \"sh\" as the name for the superh arch. there\nwas already some inconsistency internally in musl: the dynamic linker\nwas searching for \"ld-musl-sh.path\" as its path file despite its own\nname being \"ld-musl-superh.so.1\". there was some sentiment in both\ndirections as to how to resolve the inconsistency, but overall \"sh\"\nwas favored.\n"},{"hash":"5c27c4458f11adaba261353f84bcde4f79f0bdbd","date":"2014-02-28T03:20:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix endian subarchs for sh arch\n\ndefault endianness for sh on linux is little, and while conventions\nvary, \"eb\" seems to be the most widely used suffix for big endian.\n"},{"hash":"b1683a1d6a4391ffef6ce12be9aa172d0f4f59bc","date":"2014-02-28T04:18:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add nofpu subarchs to the sh arch, and properly detect compiler's fpu config\n"},{"hash":"946b9fad03ab95ce86f0f285058c0580fa8e7011","date":"2014-02-28T04:55:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix copy-and-paste error in configure's IEEE double check for sh\n"},{"hash":"3d7f5c363e27426a3977bc6fa0436e92653eccf1","date":"2014-02-28T05:09:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing CFLAGS in configure test for float on sh\n"},{"hash":"0b8f0c57c0ff78fc1af9c8f5831eb1c1fdd7d970","date":"2014-02-28T18:12:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve configure's target arch matching\n\nmost notably, it was failing to match sh4-*, etc., but in general the\nexplicit matching of hyphens for some archs was problematic because it\nfailed to accept simply the musl-style arch name (without a gcc-style\ntuple) as an input. the original motivation of matching hyphens was to\nprevent incorrectly identifying a 64-bit arch as the corresponding\n32-bit arch (e.g. mips* matching mips64) but this is easily fixed by\nsimply checking (and for now, rejecting as unsupported) the relevant\n64-bit archs.\n"},{"hash":"abdd2e48df01511603cae570695a7a3d78190e7e","date":"2014-03-05T21:08:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix strerror on mips: one error code is out of the 8-bit table range\n\nif we ever encounter other targets where error codes don't fit in the\n8-bit range, the table should probably just be bumped to 16-bit, but\nfor now I don't want to increase the table size on all archs just\nbecause of a bug in the mips abi.\n"},{"hash":"dae8ca738c37c7ca619f575de7a88823db17976a","date":"2014-03-06T04:35:13.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"x32: fix sysinfo()\n\nthe kernel uses long longs in the struct, but the documentation\nsays they're long. so we need to fixup the mismatch between the\nuserspace and kernelspace structs.\nsince the struct offers a mem_unit member, we can avoid truncation\nby adjusting that value.\n"},{"hash":"1154e7c9db7a85a304c72cf7e0ac6a5f8af0a7c7","date":"2014-03-06T23:59:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update copyright dates to 2014\n"},{"hash":"b576766d51171debc2428a556d2abdc32bbd32e9","date":"2014-03-08T04:56:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in fcntl, use unsigned long instead of long for variadic argument type\n\nneither is correct; different commands take different argument types,\nand some take no arguments at all. I have a much larger overhaul of\nfcntl prepared to address this, but it's not appropriate to commit\nduring freeze.\n\nthe immediate problem being addressed affects forward-compatibility on\nx32: if new commands are added and they take pointers, but the\nlibc-level fcntl function is not aware of them, using long would\nsign-extend the pointer to 64 bits and give the kernel an invalid\npointer. on the kernel side, the argument to fcntl is always treated\nas unsigned long, so no harm is done by treating possibly-signed\ninteger arguments as unsigned. for every command that takes an integer\nargument except for F_SETOWN, large integer arguments and negative\narguments are handled identically anyway. in the case of F_SETOWN, the\nkernel is responsible for converting the argument which it received as\nunsigned long to int, so the sign of negative arguments is recovered.\n\nthe other problem that will be addressed later is that the type passed\nto va_arg does not match the type in the caller of fcntl. an advanced\ncompiler doing cross-translation-unit analysis could potentially see\nthis mismatch and issue warnings or otherwise make trouble.\n\non i386, this patch was confirmed not to alter the code generated by\ngcc 4.7.3. in principle the generated code should not be affected on\nany arch except x32.\n"},{"hash":"e12fda3bffb3558a27834a07a0c936e68eb25741","date":"2014-03-08T05:14:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add bits/user.h for sh port\n\nthis seems to have been overlooked, and resulted in breakage in\nanything including sys/user.h.\n"},{"hash":"73f5b096056e03d8e27965040faee0af778517fc","date":"2014-03-08T05:50:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in sys/procfs.h, avoid using __WORDSIZE macro\n\nthis was problematic because several archs don't define __WORDSIZE. we\ncould add it, but I would rather phase this macro out in the long\nterm. in our version of the headers, UINTPTR_MAX is available here, so\njust use it instead.\n"},{"hash":"ba231cf9e5923b6216081e9a626465c6643ce4d3","date":"2014-03-09T06:38:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix buffer overflow in printf formatting of denormals with low bit set\n\nempirically the overflow was an off-by-one, and it did not seem to be\noverwriting meaningful data. rather than simply increasing the buffer\nsize by one, however, I have attempted to make the size obviously\ncorrect in terms of bounds on the number of iterations for the loops\nthat fill the buffer. this still results in no more than a negligible\nsize increase of the buffer on the stack (6-7 32-bit slots) and is a\n\"safer\" fix unless/until somebody wants to do the proof that a smaller\nbuffer would suffice.\n"},{"hash":"9743a399bf4d6da9a1dbdf7e8df07284c97df16f","date":"2014-03-09T07:09:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect rounding in printf floating point corner cases\n\nthe printf floating point formatting code contains an optimization to\navoid computing digits that will be thrown away by rounding at the\nspecified (or default) precision. while it was correctly retaining all\nplaces up to the last decimal place to be printed, it was not\nretaining enough precision to see the next nonzero decimal place in\nall cases. this could cause incorrect rounding down in round-to-even\n(default) rounding mode, for example, when printing 0.5+DBL_EPSILON\nwith \"%.0f\".\n\nin the fix, LDBL_MANT_DIG/3 is a lazy (non-sharp) upper bound on the\nnumber of zeros between any two nonzero decimal digits.\n"},{"hash":"6739b13a172aad9c01572c04cadacc99c7041811","date":"2014-03-09T18:29:41.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math.h: make __FLOAT_BITS and __DOUBLE_BITS C89\n\nRemove non-constant aggregate initializer. (Still using long long, but\nthat is supported by ancient compilers without __extension__ anyway).\n"},{"hash":"f6e2f7e13f0edb1bb1d94e6ad4bf44abffd048d1","date":"2014-03-11T19:27:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move struct semid_ds to from shared sys/sem.h to bits\n\nthe definition was found to be incorrect at least for powerpc, and\nfixing this cleanly requires making the definition arch-specific. this\nwill allow cleaning up the definition for other archs to make it more\nspecific, and reversing some of the ugliness (time_t hacks) introduced\nwith the x32 port.\n\nthis first commit simply copies the existing definition to each arch\nwithout any changes. this is intentional, to make it easier to review\nchanges made on a per-arch basis.\n"},{"hash":"ad66ae93d083ede90431bacf034f29ebd0815d73","date":"2014-03-11T21:01:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sysvipc structures on powerpc\n\nthese have been wrong for a long time and were never detected or\ncorrected. powerpc needs some gratuitous extra padding/reserved slots\nin ipc_perm, big-endian ordering for the padding of time_t slots that\nwas intended by the kernel folks to allow a transition to 64-bit\ntime_t, and some minor gratuitous reordering of struct members.\n"},{"hash":"514c2dd24f07a81c6038d74c72f8996ad62b108f","date":"2014-03-11T21:21:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix socket.h struct msghdr member types on powerpc\n\nthese were incorrectly copied from the kernel, whose ABI matches the\nPOSIX requirements but with the wrong underlying types and wrong\nsignedness.\n"},{"hash":"3ceb89ed3fb5a43fc267ce818f90f38f55bf4e71","date":"2014-03-12T10:46:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix semid_ds structure on mips\n\nThis used to be broken when all archs had the same semid_ds definition:\nthere is no padding around the time_t members on mips.\n"},{"hash":"7673acd31503016f2af93e187aac98da07af42b4","date":"2014-03-12T17:08:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix statfs struct on mips\n\nThe mips statfs struct layout is different than on other archs, so the\nstatfs, fstatfs, statvfs and fstatvfs APIs were broken on mips.\nNow the ordering is fixed, the types are kept consistent with other archs.\n"},{"hash":"2b47a7aff24bbfbe7ba89fc6d542acc9f5493ae2","date":"2014-03-13T19:52:34.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"semctl: fix UB causing crashes on powerpc\n\nit's UB to fetch variadic args when none are passed, and this caused\nreal crashes on ppc due to its calling convention, which defines that\nfor variadic functions aggregate types be passed as pointers.\nthe assignment caused that pointer to get dereferenced, resulting in\na crash.\n"},{"hash":"611eabd489ce4eab3a70c410f363774bbcbbd3e9","date":"2014-03-16T21:17:28.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"superh: fix dynamic linking of __fpscr_values\n\nApplications ended up with copy relocations for this array, which\nresulted in libc's references to this array pointing to the\napplication's copy.  The dynamic linker, however, can require this array\nbefore the application is relocated, and therefore before the\napplication's copy of this array is initialized.  This resulted in\ngarbage being loaded into FPSCR before executing main, which violated\nthe ABI.\n\nWe fix this by putting the array in crt1 and making the libc copy\nprivate.  This prevents libc's reference to the array from pointing to\nan uninitialized copy in the application.\n"},{"hash":"66193171648ea34ad5acf08fcca48c8f0a850030","date":"2014-03-17T04:25:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix negated error codes from ptsname_r\n\nthe incorrect error codes also made their way into errno when\n__ptsname_r was called by plain ptsname, which reports errors via\nerrno rather than a return value.\n"},{"hash":"797f9a32a444fc1d4a7189a65d340c1e6588b0db","date":"2014-03-17T21:34:55.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"x32: fix struct statfs\n\nthe omission of the padding was uncovered by the latest regression\nstatvfs regression test added to libc-test.\n"},{"hash":"f162c064ab71dc3631abd8db9e53099a1c80b9cf","date":"2014-03-17T21:38:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure accept alternate gcc tuples for x32\n\nthe previous pattern required \"x32\" to be used as the second field of\nthe gcc tuple, which is usually reserved for vendor use and not\nappropriate as an ABI specifier. with this change, putting \"x32\" at\nthe end of the tuple, the way ABI specifiers are normally done, is\nalso permitted.\n"},{"hash":"5f95f965e933c5b155db75520ac27c92ddbcf400","date":"2014-03-18T21:08:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use syscall_arg_t for arguments in public syscall() function\n\non x32, this change allows programs which use syscall() with pointers\nor 64-bit values as arguments to work correctly, i.e. without\ntruncation or incorrect sign extension. on all other supported archs,\nsyscall_arg_t is defined as long, so this change is a no-op.\n"},{"hash":"d444064d5a1fad60033378a3dd58b3371981e5c5","date":"2014-03-19T01:37:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless and incorrect uc_regspace member from mips ucontext_t\n\nthis seems to have been copied erroneously from the arm version of the\nfile. it's fairly harmless but it's a mistake and better to fix now\nthan later.\n"},{"hash":"cee45f9cb22ce53f4c3fa72ddce091d260c1a6d1","date":"2014-03-19T01:52:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix size of mips jmp_buf\n\nthe excess space was unused and unintentional. this change does not\naffect the ABI between applications and libc. while it does\ntheoretically affect linkage between third-party translation units\nusing jmp_buf as part of a structure, we've already changed jmp_buf at\nleast once on all archs, and problems were never observed, likely\nbecause such usage would be very unusual. in any case it's best to get\nthings right now rather than making changes sometime during the 1.0.x\nseries or later.\n"},{"hash":"40d58b44d0c1c15940860dbe16b48f1c8ac81107","date":"2014-03-19T02:11:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in filename used in sh port\n"},{"hash":"25faa2034de38f7d8cc919e61e55e7067584077d","date":"2014-03-19T02:48:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips sigsetjmp asm to match fixed jmp_buf size\n\nthis was missed in the previous commit.\n"},{"hash":"bd5f221eaa16fcc13f050201883428afa3a9d0c0","date":"2014-03-19T03:12:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move signal.h definition of stack_t to arch-specific bits\n\nit's different at least on mips. mips version will be fixed in a\nseparate commit to show the change.\n"},{"hash":"12f37cdee521da18bbc666917f70cefeb29d3db6","date":"2014-03-19T03:13:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips stack_t\n\nlike almost everything on mips, this is gratuitously different.\n"},{"hash":"9505bfbc40fec217820abad7142663eda60cd6be","date":"2014-03-19T03:27:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signal.h breakage from moving stack_t to arch-specific bits\n\nin the previous changes, I missed the fact that both the prototype of\nthe sigaltstack function and the definition of ucontext_t depend on\nstack_t.\n"},{"hash":"8c820231edc91da57abff4b9a92187ada7fb1928","date":"2014-03-19T21:31:02.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"configure: check for __ILP32__ if arch is x86_64\n\notherwise a multilib compiler used with -mx32 will not be detected\nproperly.\n"},{"hash":"4ed1d0a9080576835151d48b32dafea4a02e248c","date":"2014-03-20T04:34:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update COPYRIGHT file with additional contributor information\n"},{"hash":"cec05e0429cae43ef5d9e8b743994feacc6ca264","date":"2014-03-20T04:55:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update INSTALL file with new information and better advice\n\nthe text covering an ill-advised procedure for 'bootstrapping' a new\nmusl-based system in-place is removed. new information on targets and\ncompilers is added. formatting improved. the remaining text is\nadjusted to cover both usage with musl-gcc on a non-musl-based system\nand upgrading a musl-based system or toolchain.\n"},{"hash":"4b0f39cb5333ada4761595d5faaf4248d849fabd","date":"2014-03-20T06:24:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update README in preparation for release\n\nreduces the amount of news-like content on progress and development\ndirection and focuses on the present.\n"},{"hash":"b427d847f4cf0232d330da93ee9ff60877804213","date":"2014-03-20T08:15:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove claim of XSI coverage from README\n\nin addition to the dbm functions (which we don't intent to implement\nanyway), fmtmsg is still missing too. rather than adding exceptions I\nthink it's best just to avoid making the claim.\n"},{"hash":"8afa7cf5d00eac6dbfca3da9d8678f32f650a00d","date":"2014-03-20T08:41:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.0.0\n"},{"hash":"30c1205acd73c8481ca34f0a41de1d41884d07b5","date":"2014-03-24T00:42:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"include header that declares __syscall_ret where it's defined\n\nin general, we aim to always include the header that's declaring a\nfunction before defining it so that the compiler can check that\nprototypes match.\n\nadditionally, the internal syscall.h declares __syscall_ret with a\nvisibility attribute to improve code generation for shared libc (to\nprevent gratuitous GOT-register loads). this declaration should be\nvisible at the point where __syscall_ret is defined, too, or the\ninconsistency could theoretically lead to problems at link-time.\n"},{"hash":"98221c36119d2abfc55fe1d919705f625709fe3b","date":"2014-03-24T03:19:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reduce static linking overhead from TLS support by inlining mmap syscall\n\nthe external mmap function is heavy because it has to handle error\nreporting that the kernel cannot do, and has to do some locking for\narcane race-condition-avoidance purposes. for allocating initial TLS,\nwe do not need any of that; the raw syscall suffices.\n\non i386, this change shaves off 13% of the size of .text for the empty\nprogram.\n"},{"hash":"dab441aea240f3b7c18a26d2ef51979ea36c301c","date":"2014-03-24T20:57:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always initialize thread pointer at program start\n\nthis is the first step in an overhaul aimed at greatly simplifying and\noptimizing everything dealing with thread-local state.\n\npreviously, the thread pointer was initialized lazily on first access,\nor at program startup if stack protector was in use, or at certain\nrandom places where inconsistent state could be reached if it were not\ninitialized early. while believed to be fully correct, the logic was\nfragile and non-obvious.\n\nin the first phase of the thread pointer overhaul, support is retained\n(and in some cases improved) for systems/situation where loading the\nthread pointer fails, e.g. old kernels.\n\nsome notes on specific changes:\n\n- the confusing use of libc.main_thread as an indicator that the\n  thread pointer is initialized is eliminated in favor of an explicit\n  has_thread_pointer predicate.\n\n- sigaction no longer needs to ensure that the thread pointer is\n  initialized before installing a signal handler (this was needed to\n  prevent a situation where the signal handler caused the thread\n  pointer to be initialized and the subsequent sigreturn cleared it\n  again) but it still needs to ensure that implementation-internal\n  thread-related signals are not blocked.\n\n- pthread tsd initialization for the main thread is deferred in a new\n  manner to minimize bloat in the static-linked __init_tp code.\n\n- pthread_setcancelstate no longer needs special handling for the\n  situation before the thread pointer is initialized. it simply fails\n  on systems that cannot support a thread pointer, which are\n  non-conforming anyway.\n\n- pthread_cleanup_push/pop now check for missing thread pointer and\n  nop themselves out in this case, so stdio no longer needs to avoid\n  the cancellable path when the thread pointer is not available.\n\na number of cases remain where certain interfaces may crash if the\nsystem does not support a thread pointer. at this point, these should\nbe limited to pthread interfaces, and the number of such cases should\nbe fewer than before.\n"},{"hash":"0a8d98285f46f721dabf38485df916c02d6a4675","date":"2014-03-24T21:33:54.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix confstr return value\n\nper the specification, the terminating null byte is counted.\n"},{"hash":"689e0e6bf7ccf136ad870f103e4ef3a8554ff1bc","date":"2014-03-24T21:39:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pointer type mismatch and misplacement of const\n"},{"hash":"e13a2b8953efabd38edfb7637fda08638454c001","date":"2014-03-25T19:58:23.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"implement PT_GNU_RELRO support\n"},{"hash":"8769196ffb20569fb97fce9716b3a21fada3f02a","date":"2014-03-25T20:03:53.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"clean up internal dynamic linker functions enumerating phdrs\n\nrecord phentsize in struct dso, so the phdrs can be easily\nenumerated via it. simplify all functions enumerating phdrs\nto require only struct dso. also merge find_map_range and\nfind_dso to kernel_mapped_dso function that does both tasks\nduring single phdr enumeration.\n"},{"hash":"fa7248c971b04ae76c21f1c48684530290a85d12","date":"2014-03-25T20:21:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cosmetic improvements in dynamic linker cleanup\n\nconsistent use of braces in if/else structure, line length.\n"},{"hash":"436d3723afcb1ee40eb849d56fd0472d83dd598c","date":"2014-03-25T20:23:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"if dynamic linker's relro mprotect call fails, include reason in message\n"},{"hash":"2b74315d8a31ad8fbcd369116c82e055e0ec3fb7","date":"2014-03-25T23:12:45.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"remove lazy ssp initialization\n\nnow that thread pointer is initialized always, ssp canary\ninitialization can be done unconditionally. this simplifies\nthe ldso as it does not try to detect ssp usage, and the\ninit function itself as it is always called exactly once.\nthis also merges ssp init path for shared and static linking.\n"},{"hash":"91d5aa06572d2660122f9a06ed242fef0383f292","date":"2014-04-02T18:13:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix microblaze syscall register clobbers\n\nthe kernel entry point for syscalls on microblaze nominally saves and\nrestores all registers, and testing on qemu always worked since qemu\nbehaves this way too. however, the real kernel treats r3:r4 as a\npotential 64-bit return value from the syscall function, and copies\nboth over top of the saved registers before returning to userspace.\nthus, we need to treat r4 as always-clobbered.\n"},{"hash":"5446303328adf4b4e36d9fba21848e6feb55fab4","date":"2014-04-02T21:57:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid malloc failure for small requests when brk can't be extended\n\nthis issue mainly affects PIE binaries and execution of programs via\ndirect invocation of the dynamic linker binary: depending on kernel\nbehavior, in these cases the initial brk may be placed at at location\nwhere it cannot be extended, due to conflicting adjacent maps.\n\nwhen brk fails, mmap is used instead to expand the heap. in order to\navoid expensive bookkeeping for managing fragmentation by merging\nthese new heap regions, the minimum size for new heap regions\nincreases exponentially in the number of regions. this limits the\nnumber of regions, and thereby the number of fixed fragmentation\npoints, to a quantity which is logarithmic with respect to the size of\nvirtual address space and thus negligible. the exponential growth is\ntuned so as to avoid expanding the heap by more than approximately 50%\nof its current total size.\n"},{"hash":"fe1ba7dbf187e34985896b40d469d84a7a4a98d0","date":"2014-04-02T22:37:45.000Z","author":{"name":"sin","email":"sin@2f30.org"},"message":"implement hcreate_r, hdestroy_r and hsearch_r\n\nthe size and alignment of struct hsearch_data are matched to the glibc\ndefinition for binary compatibility. the members of the structure do\nnot match, which should not be a problem as long as applications\ncorrectly treat the structure as opaque.\n\nunlike the glibc implementation, this version of hcreate_r does not\nrequire the caller to zero-fill the structure before use.\n"},{"hash":"141d3b5c2a93dd48096a13ce051d09eaf3ec0b4a","date":"2014-04-02T22:49:24.000Z","author":{"name":"sin","email":"sin@2f30.org"},"message":"remove struct elem entirely from hsearch.c\n\nThere are two changes here, both of which make sense to be done in a\nsingle patch:\n\n- Remove hash from struct elem and compute it at runtime wherever\n  necessary.\n- Eliminate struct elem and use ENTRY directly.\n\nAs a result we cut down on the memory usage as each element in the\nhash table now contains only an ENTRY not an ENTRY + size_t for the\nhash. The downside is that the hash needs to be computed at runtime.\n"},{"hash":"b9b2db2f374bce907fa5015c9cf63205054f2356","date":"2014-04-02T23:32:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add __sigsetjmp ABI-compat alias for sigsetjmp\n"},{"hash":"561e0a0968f13b6d6c2b092501e210728e236fd7","date":"2014-04-05T01:43:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cruft left behind when lazy thread pointer init was removed\n\nthe function itself was static, but the weak alias provided an\nexternally visible reference and thus prevented the dead code from\nbeing omitted from the output. so this change actually reduces bloat\nin mandatory static-linked code.\n"},{"hash":"7e8b0761e57266f40b8d51105b84c50e504e89c5","date":"2014-04-07T05:12:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some cruft from libc/tls init code\n"},{"hash":"109048e031f39fbb370211fde44ababf6c04c8fb","date":"2014-04-07T05:36:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix carry into uninitialized slots during printf floating point rounding\n\nin cases where rounding caused a carry, the slot into which the carry\nwas taking place was unconditionally treated as valid, despite the\npossibility that it could be a new slot prior to the beginning of the\nexisting non-rounded number. in theory this could lead to unbounded\nrunaway carry, but in order for that to happen, the whole\nuninitialized buffer would need to have been pre-filled with 32-bit\ninteger values greater than or equal to 999999999.\n\npatch based on proposed fix by Morten Welinder, who also discovered\nand reported the bug.\n"},{"hash":"89740868c9f1c84b8ee528468d12df1fa72cd392","date":"2014-04-07T06:05:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of printf %g to strip trailing zeros in some cases\n\nthe code to strip trailing zeros was only looking in the last slot for\nup to 9 zeros, assuming that the rounding code had already removed\nfully-zero slots from the end. however, this ignored cases where the\nrounding code did not run at all, which occur when the value being\nprinted is exactly representable in the requested precision.\n\nthe simplest solution is to move the code that strips trailing zero\nslots to run unconditionally, immediately after rounding, rather than\nas the last step of rounding.\n"},{"hash":"21ada94c4b8c01589367cea300916d7db8461ae7","date":"2014-04-07T06:46:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add getauxval function\n\nin a sense this implementation is incomplete since it doesn't provide\nthe HWCAP_* macros for use with AT_HWCAP, which is perhaps the most\nimportant intended usage case for getauxval. they will be added at a\nlater time.\n"},{"hash":"1974bffa2db151b4a05a2387ae765ab81ac83ba8","date":"2014-04-07T08:03:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use inline atomics and thread pointer on arm models supporting them\n\nthis is perhaps not the optimal implementation; a_cas still compiles\nto nested loops due to the different interface contracts of the kuser\nhelper cas function (whose contract this patch implements) and the\na_cas function (whose contract mimics the x86 cmpxchg). fixing this\nmay be possible, but it's more complicated and thus deferred until a\nlater time.\n\naside from improving performance and code size, this patch also\nprovides a means of producing binaries which can run on hardened\nkernels where the kuser helpers have been disabled. however, at\npresent this requires producing binaries for armv6k or later, which\nwill not run on older cpus. a real solution to the problem of kernels\nthat omit the kuser helpers would be runtime detection, so that\nuniversal binaries which run on all arm cpu models can also be\ncompatible with all kernel hardening profiles. robust detection\nhowever is a much harder problem, and will be addressed at a later\ntime.\n"},{"hash":"efe07b0f8914eccf5eabce0dbd6ea5da7d7db38c","date":"2014-04-07T08:28:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm atomic asm register constraint\n\nthe \"m\" constraint could give a memory reference with an offset that's\nnot compatible with ldrex/strex, so the arm-specific \"Q\" constraint is\nneeded instead.\n"},{"hash":"e94d0692864ecf9522fd6a97610a47a2f718d3de","date":"2014-04-07T17:50:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix printf rounding with %g for some corner case midpoints\n\nthe subsequent rounding code assumes the end pointer (z) accurately\nreflects the end of significance in the decimal expansion, but for\ncertain large integers, spurious trailing zero slots were left behind\nwhen applying the binary exponent.\n\nissue reported by Morten Welinder; the analysis of the cause was\nperformed by nsz, who also proposed this change.\n"},{"hash":"6fbdeff0e51f6afc38fbb1476a4db81322779da4","date":"2014-04-10T01:06:17.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix search past the end of haystack in memmem\n\nto optimize the search, memchr is used to find the first occurrence of\nthe first character of the needle in the haystack before switching to\na search for the full needle. however, the number of characters\nskipped by this first step were not subtracted from the haystack\nlength, causing memmem to search past the end of the haystack.\n"},{"hash":"73c870ed3209b68b5c8c350534508cc9d95a6bcb","date":"2014-04-11T16:07:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix aliasing violation in long double wrappers\n\nmodfl and sincosl were passing long double* instead of double*\nto the wrapped double precision functions (on archs where long\ndouble and double have the same size).\nThis is fixed now by using temporaries (this is not optimized\nto a single branch so the generated code is a bit bigger).\nFound by Morten Welinder.\n"},{"hash":"83c98aac4c43f9571e8f92a1c795afe02c237d4b","date":"2014-04-12T04:16:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use hidden visibility rather than protected for syscall internals\n\nthe use of visibility at all is purely an optimization to avoid the\nneed for the caller to load the GOT register or similar to prepare for\na call via the PLT. there is no reason for these symbols to be\nexternally visible, so hidden works just as well as protected, and\nusing protected visibility is undesirable due to toolchain bugs and\nthe lack of testing it receives.\n\nin particular, GCC's microblaze target is known to generate symbolic\nrelocations in the GOT for functions with protected visibility. this\nin turn results in a dynamic linker which crashes under any nontrivial\nusage that requires making a syscall before symbolic relocations are\nprocessed.\n"},{"hash":"3933fdd5001cc72cb1ea8bb92bbe536b8b601504","date":"2014-04-15T03:41:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use dmb barrier instruction for atomics on arm v7\n\naside from potentially offering better performance, this change is\nneeded since the old coprocessor-based approach to barriers is\ndeprecated in arm v7, and some compilers/assemblers issue errors when\nusing the deprecated instruction for v7 targets.\n"},{"hash":"805698401dbac7ce3079fa97eaad5ba0508377f4","date":"2014-04-15T03:48:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fallback code for old kernels in clock_gettime\n"},{"hash":"233767b48a083f526557ee39aa1c773efa345972","date":"2014-04-15T17:30:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid linear-time if/else special cases in sysconf\n\nthe previous handling of cases that could not fit in the 16-bit table\nor which required non-constant results was extremely ugly and could\nnot scale. the new code remaps these keys into a contiguous range\nthat's efficient for a switch statement.\n"},{"hash":"6cf7d17f5349df9ee4a2d8c8c7c5d01c18385e08","date":"2014-04-15T22:05:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in sysconf, use getrlimit function rather than raw syscall for rlimits\n\nthe syscall is deprecated (replaced by prlimit64) and does not work\ncorrectly on x32. this change mildly increases size, but is likely\nneeded anyway for newer archs that might omit deprecated syscalls.\n"},{"hash":"de20a8ffc5cf89134f035193ce1cdc2d76c88ee0","date":"2014-04-15T22:16:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add namespace-protected name for sysinfo function\n\nit will be needed to implement some things in sysconf, and the syscall\ncan't easily be used directly because the x32 syscall uses the wrong\nstructure layout. the l (uncreative, for \"linux\") prefix is used since\nthe symbol name __sysinfo is already taken for AT_SYSINFO from the aux\nvector.\n\nthe way the x32 override of this function works is also changed to be\nsimpler and avoid the useless jump instruction.\n"},{"hash":"96315d27b0e5000d53e09fb915c5066b3d47d3d2","date":"2014-04-15T22:45:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _SC_PHYS_PAGES and _SC_AVPHYS_PAGES extentions to sysconf\n"},{"hash":"fcea534e579077e10456f6ed06c033dfaa013a24","date":"2014-04-15T23:17:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix RLIMIT_ constants for mips\n\nThe mips arch is special in that it uses different RLIMIT_\nnumbers than other archs, so allow bits/resource.h to override\nthe default RLIMIT_ numbers (empty on all archs except mips).\nReported by orc.\n"},{"hash":"0d0c2f40344640a2a6942dda156509593f51db5d","date":"2014-04-16T00:42:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix deadlock race in pthread_once\n\nat the end of successful pthread_once, there was a race window during\nwhich another thread calling pthread_once would momentarily change the\nstate back from 2 (finished) to 1 (in-progress). in this case, the\nstatus was immediately changed back, but with no wake call, meaning\nthat waiters which arrived during this short window could block\nforever. there are two possible fixes. one would be adding the wake to\nthe code path where it was missing. but it's better just to avoid\nreverting the status at all, by using compare-and-swap instead of\nswap.\n"},{"hash":"58e75db47160bc7bcac2ae98a7a8660b8fce35c9","date":"2014-04-16T06:33:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add working vdso clock_gettime support, including static linking\n\nthe vdso symbol lookup code is based on the original 2011 patch by\nNicholas J. Kain, with some streamlining, pointer arithmetic fixes,\nand one symbol version matching fix.\n\non the consumer side (clock_gettime), per-arch macros for the\nparticular symbol name and version to lookup are added in\nsyscall_arch.h, and no vdso code is pulled in on archs which do not\ndefine these macros. at this time, vdso is enabled only on x86_64.\n\nthe vdso support at the dynamic linker level is no longer useful to\nlibc, but is left in place for the sake of debuggers (which may need\nthe vdso in the link map to find its functions) and possibly use with\ndlsym.\n"},{"hash":"b1ef8067863c52c6af03f623dbecda47204101b1","date":"2014-04-16T08:30:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.0\n"},{"hash":"de45164effdddf500756e10e8c6f56b79301d82b","date":"2014-04-16T16:45:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add options when explicitly invoking dynamic loader\n\nso far the options are --library-path and --preload which override the\ncorresponding environment variables, and --list which forces the\nbehavior of ldd even if the invocation name is not ldd. both the\ntwo-arg form and the one-arg form using an equals sign are supported.\n\nbased loosely on a patch proposed by Rune.\n"},{"hash":"fbeadd150feaa7993250d2d6739df670d4539e54","date":"2014-04-17T18:53:27.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"make socketcall types common as they are same for all architectures\n"},{"hash":"476cd1d96560aaf7f210319597556e7fbcd60469","date":"2014-04-18T21:38:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix false negatives with periodic needles in strstr, wcsstr, and memmem\n\nin cases where the memorized match range from the right factor\nexceeded the length of the left factor, it was wrongly treated as a\nmismatch rather than a match.\n\nissue reported by Yves Bastide.\n"},{"hash":"164c5c7a32eefa1800a42e07a47b4cc2d64cc802","date":"2014-04-20T04:26:55.000Z","author":{"name":"M Farkas-Dyck","email":"strake888@gmail.com"},"message":"expose public execvpe interface\n"},{"hash":"5c4f11d995cf178b3146cde0734d6988c145f243","date":"2014-04-21T22:11:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow zoneinfo-path-relative filenames with no slashes in TZ variable\n\nsince the form TZ=name is reserved for POSIX-form time zone strings,\nTZ=:name needs to be used when the zoneinfo filename is in the\ntop-level zoneinfo directory and therefore does not contain a slash.\npreviously the leading colon was merely dropped, making it impossible\nto access such zones without a full absolute pathname.\n\nchanges based on patch by Timo Teräs.\n"},{"hash":"9b52ab1c9a44b62236089ab0272801d049bc5b1e","date":"2014-04-21T23:31:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"micro-optimize some startup code for size\n\nmoving the call to __init_ssp from __init_security to __init_libc\nmakes __init_security a leaf function, which allows the compiler to\nmake it smaller. __init_libc is already non-leaf, and the additional\ncall makes no difference to the amount of register spillage.\n\nin addition, it really made no sense for the call to __init_ssp to be\nburied inside __init_security rather than parallel with other init\nfunctions.\n"},{"hash":"fbcfed7c2d27496063d79e4d2a2a694d0fe67209","date":"2014-04-21T23:52:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further micro-optimize startup code for size\n\nthere is no reason (and seemingly there never was any) for\n__init_security to be its own function. it's linked unconditionally\nso it can just be placed inline in __init_libc.\n"},{"hash":"3176b57e528f335139f37ada07063f3619158f56","date":"2014-04-22T00:10:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make __init_libc static for non-shared libc\n\nbeing static allows it to be inlined in __libc_start_main; inlining\nshould take place at all levels since the function is called exactly\nonce. this further reduces mandatory startup code size for static\nbinaries.\n"},{"hash":"0f2315b4af1c58cbfb7c7f9da69b495cd146cc18","date":"2014-04-22T20:45:58.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"do not try to interpret implementation specific strings as tz definition\n"},{"hash":"c3d9d172b1fcd56c4d356798f4e3b4653076bcc3","date":"2014-04-23T00:09:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"perform minimal sanity checks on zoneinfo files loaded via TZ variable\n\npreviously, setting TZ to the pathname of a file which was not a valid\nzoneinfo file would usually cause programs using local time zone based\noperations to crash. the new code checks the file size and magic at\nthe beginning of the file, which seems sufficient to prevent\naccidental misconfiguration from causing crashes. attempting to make\nfully-robust validation would be futile unless we wanted to drop use\nof mmap (shared zoneinfo) and instead read it into a local buffer,\nsince such validation would be subject to race conditions with\nmodification of the file.\n"},{"hash":"23d64182d8328c300b368446aad20da9cec91aa3","date":"2014-04-28T02:13:59.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"fix superh nofpu check on old gcc versions\n\nAs far as gcc3 knows, sh4 is the only processor version that can have an\nFPU, so it indicates the FPU's presence by defining __SH4__.  This is not\ndefined if there is no FPU, even if the processor really is an SH4.\n\nStarting with gcc4, there is support for the sh2a processor, which has an\nFPU but is not an SH4.  gcc4 therefore additionally defines __SH_FPU_ANY__\nwhen there is an FPU, but still doesn't define __SH4__ for an FPU-less sh4.\n\nTherefore, to support all gcc versions, we must look at both preprocessor\nsymbols.\n"},{"hash":"468bc11ed059c475f974920ac3d499e6071a6b2c","date":"2014-04-30T18:47:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing SO_RCVBUFFORCE and SO_SNDBUFFORCE in mips socket.h\n"},{"hash":"e783efa6eff5e0b8c91891f778598a95e1f7ad87","date":"2014-04-30T19:32:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm thread-pointer/atomic asm when compiling to thumb code\n\narmv7/thumb2 provides a way to do atomics in thumb mode, but for armv6\nwe need a call to arm mode.\n\nthis commit is based on a patch by Stephen Thomas which fixed the\narmv7 cases but not the armv6 ones.\n\nall of this should be revisited if/when runtime selection of thread\npointer access and atomics are added.\n"},{"hash":"adbf0258be4eea5f012e173de7e55a87f3093669","date":"2014-05-04T17:15:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless __yield alias for sched_yield\n\nthis is no longer used for anything, and reportedly clashed with a\nbuiltin on certain compilers.\n"},{"hash":"ac0acd569e01735fc6052d43fdf57f3a07c93f3d","date":"2014-05-08T17:04:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix strftime %s not to zero pad with default width=2\n"},{"hash":"8945667fadc2eb71b7924bb4c5a69507fd362f4a","date":"2014-05-12T18:22:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add configure check for working compiler\n\nwithout this, broken choices of CC/CPPFLAGS/CFLAGS don't show up until\nlate in the configure process where they are confusingly reported as a\ndifferent failure such as incorrect long double type.\n"},{"hash":"8a2d8719873a46d5cc5c54e688d47ea134c67c84","date":"2014-05-13T23:24:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add cp437 and cp850 to available iconv conversions\n\nperhaps some additional legacy DOS-era codepages would also be useful\nto have, but these are the ones for which there has been demand. the\nsize of the diff is due to the fact that legacychars.h is updated in\nsuch a way that new characters are inserted into the table in unicode\ncodepoint order; thus other mappings in codepages.h have changed to\nreflect the new table indices of their characters.\n"},{"hash":"9ca4dae5d895cf816eb1815511aba77a90f6acd7","date":"2014-05-19T14:33:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add configure check for broken gcc 4.9.0 and possibly other versions\n\nthis is gcc bug #61144. the broken compiler is detected, but the user\nmust manually work around it. this is partly to avoid complex logic\nfor adding workaround CFLAGS and attempting to recheck with them, and\npartly for the sake of letting the user know the compiler is broken\n(since the workaround will result in less-efficient code production).\n\nsome refactoring was also needed to move the check for gcc outside of\nthe check for whether to build the compiler wrapper.\n"},{"hash":"ff78355bc11257744759b5005d330e4a7583a4e4","date":"2014-05-19T15:19:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rework sysconf table to treat zero entries as invalid\n\nbased on patch by Timo Teräs. previously, the value zero was used as a\nliteral zero, meaning that all invalid sysconf \"names\", which should\nresult in sysconf returning -1, had to be explicitly listed. (in\naddition, it was not possible for sysconf to set errno to EINVAL, as\nthere was no distinction between -1 as an error and -1 as a valid\nresult.)\n\nnow, the value 0 is used for invalid/undefined slots in the table and\na new switch table entry is used for returning literal zeros.\n\nin addition, an off-by-one error in checking against the table size is\nfixed.\n"},{"hash":"93be56ba88e1e31f4ba9f16a00b28cc9d15634ca","date":"2014-05-19T16:18:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unsupported nonstandard sysconf macros and their table entries\n\nsome of these may have been from ancient (pre-SUSv2) POSIX versions;\nmore likely, they were from POSIX drafts or glibc interpretations of\nwhat ancient versions of POSIX should have added (instead they made\nthey described functionality mandatory and/or dropped it completely).\nothers are purely glibc-isms, many of them ill-thought-out, like\nproviding ways to lookup the min/max values of types at runtime\n(despite the impossibility of them changing at runtime and the\nimpossibility of representing ULONG_MAX in a return value of type\nlong).\n\nsince our sysconf implementation does not support or return meaningful\nvalues for any of these, it's harmful to have the macros around;\napplications' build scripts may detect and attempt to use them, only\nto get -1/EINVAL as a result.\n\nif removing them does break some applications, and it's determined\nthat the usage was reasonable, some of these could be added back on an\nas-needed basis, but they should return actual meaningful values, not\njunk like they were returning before.\n"},{"hash":"dec66750b8ed4493d5bb40042f7a473e60fe934e","date":"2014-05-20T02:14:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix unhandled cases in strptime\n\n%C, %U, %W, and %y handling were completely missing; %C wrongly\nfell-through to unrelated cases, and the rest returned failure. for\nnow, they all parse numbers in the proper forms and range-check the\nvalues, but they do not store the value anywhere.\n\nit's not clear to me whether, as \"derived\" fields, %U and %W should\nproduce any result. they certainly cannot produce a result unless the\nyear and weekday are also converted, but in this case it might be\ndesirable for them to do so. clarification is needed on the intended\nbehavior of strptime in cases like this.\n\n%C and %y have well-defined behavior as long as they are used together\n(and %y is defined by itself but may change in the future).\nimplementing them (including their correct interaction) is left as a\nlater change to be made.\n\nfinally, strptime now rejects unknown/invalid format characters\ninstead of ignoring them.\n"},{"hash":"7c6db373a55a348b3ecc7b124dd4ea541eff63cd","date":"2014-05-20T19:49:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"trivial formatting fix for the config.mak generated by configure\n"},{"hash":"0b4e0732db5e6ed0cca78d787cbd764248fcbaac","date":"2014-05-20T22:19:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.1\n"},{"hash":"44d28e55121f9a7d736df59c09b963e17c8c4cfa","date":"2014-05-25T00:39:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul siginfo_t definition in signal.h\n\nthe main motivation for this change is that, with the previous\ndefinition, it was arguably illegal, in standard C, to initialize both\nsi_value and si_pid/si_uid with designated initializers, due to the\nrule that only one member of a union can have an initializer. whether\nor not this affected real-world application code, it affected some\ninternal code, and clang was producing warnings (and possibly\ngenerating incorrect code).\n\nthe new definition uses a more complex hierarchy of structs and unions\nto avoid the need to initialize more than one member of a single union\nin usage cases that make sense. further work would be needed to\neliminate even the ones with no practical applications.\n\nat the same time, some fixes are made to the exposed names for\nnonstandard fields, to match what software using them expects.\n"},{"hash":"594c827a22124ae550b9a877b8188e0898dff8db","date":"2014-05-25T02:54:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support kernels with no SYS_open syscall, only SYS_openat\n\nopen is handled specially because it is used from so many places, in\nso many variants (2 or 3 arguments, setting errno or not, and\ncancellable or not). trying to do it as a function would not only\nincrease bloat, but would also risk subtle breakage.\n\nthis is the first step towards supporting \"new\" archs where linux\nlacks \"old\" syscalls.\n"},{"hash":"4ef04a27c7cf81db13316ceb6e840527977a7787","date":"2014-05-27T01:26:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix type of extended argument array to pselect6 syscall\n\nthis only matters on x32 (and perhaps future 32-on-64 abis for other\narchs); otherwise the type is long anyway. the cast through uintptr_t\nprevents nonsensical \"sign extension\" of pointers, and follows the\nprinciple that uintptr_t is the canonical integer type to which\npointer conversion is safe.\n"},{"hash":"92899314462192f763ca8cd1582882bd55ce5470","date":"2014-05-27T04:09:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix placement of multiple inclusion guard endif in internal syscall.h\n\nthis was messed up during a recent commit when the socketcall macros\nwere moved to the common internal/syscall.h, and the following commit\nexpanded the problem by adding more new content outside the guard.\n"},{"hash":"9b880a6b4112b0b3c0bd07949f7836daeea4e712","date":"2014-05-27T04:11:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sys_open macro for archs without the plain open syscall\n"},{"hash":"2fe6579125fe042f2255afbf00fc8e4b80d6a6be","date":"2014-05-27T04:44:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul tmpfile, tmpnam, and tempnam functions\n\nthese all now use the shared __randname function internally, rather\nthan duplicating logic for producing a random name. incorrect usage of\nthe access syscall (which works with real uid/gid, not effective) has\nbeen removed, along with unnecessary heavy dependencies like snprintf.\n"},{"hash":"d677d3fe830899926072af6dfffefb16ab6b50bd","date":"2014-05-27T18:21:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing declaration of strcpy in implementation of tmpnam\n"},{"hash":"2e55da911896a91e95b24ab5dc8a9d9b0718f4de","date":"2014-05-29T20:35:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless synchronization in exit and quick_exit\n\ncalling exit more than once invokes undefined behavior. in some cases\nit's desirable to detect undefined behavior and diagnose it via a\npredictable crash, but the code here was silently covering up an\nuncommon case (exit from more than one thread) and turning a much more\ncommon case (recursive calls to exit) into a permanent hang.\n"},{"hash":"dd5f50da6f6c3df5647e922e47f8568a8896a752","date":"2014-05-30T01:01:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support linux kernel apis (new archs) with old syscalls removed\n\nsuch archs are expected to omit definitions of the SYS_* macros for\nsyscalls their kernels lack from arch/$ARCH/bits/syscall.h. the\npreprocessor is then able to select the an appropriate implementation\nfor affected functions. two basic strategies are used on a\ncase-by-case basis:\n\nwhere the old syscalls correspond to deprecated library-level\nfunctions, the deprecated functions have been converted to wrappers\nfor the modern function, and the modern function has fallback code\n(omitted at the preprocessor level on new archs) to make use of the\nold syscalls if the new syscall fails with ENOSYS. this also improves\nfunctionality on older kernels and eliminates the incentive to program\nwith deprecated library-level functions for the sake of compatibility\nwith older kernels.\n\nin other situations where the old syscalls correspond to library-level\nfunctions which are not deprecated but merely lack some new features,\nsuch as the *at functions, the old syscalls are still used on archs\nwhich support them. this may change at some point in the future if or\nwhen fallback code is added to the new functions to make them usable\n(possibly with reduced functionality) on old kernels.\n"},{"hash":"55f45bc7222ec50b72aa8411c61e30184d0ade23","date":"2014-05-30T05:12:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sendfile syscall to use 64-bit off_t\n\nsomehow the remapping of this syscall to the 64-bit version was\noverlooked. the issue was found, and patch provided, by Stefan\nKristiansson. presumably the reason this bug was not caught earlier is\nthat the syscall takes a pointer to off_t rather than a value, so on\nlittle-endian systems, everything appears to work as long as the\noffset value fits in the low 31 bits. on big-endian systems, though,\nsendfile was presumably completely non-functional.\n"},{"hash":"5cf9e8f860dcfe63b36e050dd7dfbc5e53745fce","date":"2014-05-30T05:51:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"additional fixes for linux kernel apis with old syscalls removed\n"},{"hash":"106e65d6f6ba4d027e1fde1b1d2fabb92714da94","date":"2014-05-30T06:05:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"break down coarse-grained 64-bit-off_t syscall remappings\n\nusing the existence of SYS_stat64 as the condition for remapping other\nrelated syscalls is no longer valid, since new archs that omit the old\nsyscalls will not have SYS_stat or SYS_stat64, but still potentially\nneed SYS_fstat and others remapped. it would probably be possible to\nget by with just one or two extra conditionals, but just breaking them\nall down into separate conditions is robust and not significantly\nheavier for the preprocessor.\n"},{"hash":"8258014fd1e34e942a549c88c7e022a00445c352","date":"2014-05-30T07:09:26.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix for broken kernel side RLIM_INFINITY on mips\n\nOn 32 bit mips the kernel uses -1UL/2 to mark RLIM_INFINITY (and\nthis is the definition in the userspace api), but since it is in\nthe middle of the valid range of limits and limits are often\ncompared with relational operators, various kernel side logic is\nbroken if larger than -1UL/2 limits are used. So we truncate the\nlimits to -1UL/2 in get/setrlimit and prlimit.\n\nEven if the kernel side logic consistently treated -1UL/2 as greater\nthan any other limit value, there wouldn't be any clean workaround\nthat allowed using large limits:\n* using -1UL/2 as RLIM_INFINITY in userspace would mean different\ninfinity value for get/setrlimt and prlimit (where infinity is always\n-1ULL) and userspace logic could break easily (just like the kernel\nis broken now) and more special case code would be needed for mips.\n* translating -1UL/2 kernel side value to -1ULL in userspace would\nmean that -1UL/2 limit cannot be set (eg. -1UL/2+1 had to be passed\nto the kernel instead).\n"},{"hash":"24df8b09cfc85f4283283f7543c1be5d496faf09","date":"2014-05-30T16:59:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage from recent syscall commits due to missing errno macros\n"},{"hash":"fd9571e20a63996f5c0d396a21fdf7077f45d4cb","date":"2014-05-30T17:06:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add sched_{get,set}attr syscall numbers and SCHED_DEADLINE macro\n\nlinux 3.14 introduced sched_getattr and sched_setattr syscalls in\ncommit d50dde5a10f305253cbc3855307f608f8a3c5f73\n\nand the related SCHED_DEADLINE scheduling policy in\ncommit aab03e05e8f7e26f51dee792beddcb5cca9215a5\n\nbut struct sched_attr \"extended scheduling parameters data structure\"\nis not yet exported to userspace (necessary for using the syscalls)\nso related uapi definitions are not added yet.\n"},{"hash":"c8ea212668425c860c8af3d85aec223dec1f1395","date":"2014-05-30T17:06:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SO_BPF_EXTENSIONS socket option\n\nthis was introduced to query BPF extension support with getsockopt\nin linux 3.14, commit ea02f9411d9faa3553ed09ce0ec9f00ceae9885e\n"},{"hash":"c3504686580bd93c3937e3b6d6cfa223c4cd7b74","date":"2014-05-30T17:06:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update netinet/in.h to match the current kernel uapi\n\nfrom linux/in.h and linux/in6.h uapi headers the following\nmissing socket options were added:\n\nIP_NODEFRAG - used with customized ipv4 headers\nIPV6_RECVPATHMTU - for ipv6 path mtu\nIPV6_PATHMTU - for ipv6 path mtu\nIPV6_DONTFRAG - for ipv6 path mtu\nIPV6_ADDR_PREFERENCES - RFC5014 Source Address Selection\nIPV6_MINHOPCOUNT - RFC5082 Generalized TTL Security Mechanism\nIPV6_ORIGDSTADDR - used by tproxy\nIPV6_RECVORIGDSTADDR - used by tproxy\nIPV6_TRANSPARENT - used by tproxy\nIPV6_UNICAST_IF - ipv6 version of IP_UNICAST_IF\n\nand socket option values:\n\nIP_PMTUDISC_OMIT - value for IP_MTU_DISCOVER option, new in linux 3.14\nIPV6_PMTUDISC_OMIT - same for IPV6_MTU_DISCOVER\nIPV6_PMTUDISC_INTERFACE - ipv6 version of IP_PMTUDISC_INTERFACE\nIPV6_PREFER_* - flags for IPV6_ADDR_PREFERENCES\n\nnot added: ipv6 flow info and flow label related definitions.\n(it's unclear if libc should define these and namespace polluting\ntype name is involved so they are not provided for now)\n"},{"hash":"bff6095d915f3e41206e47ea2a570ecb937ef926","date":"2014-05-30T17:06:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use cleaner code for handling float rounding in vfprintf\n\nCONCAT(0x1p,LDBL_MANT_DIG) is not safe outside of libc,\nuse 2/LDBL_EPSILON instead.\n\nfix was proposed by Morten Welinder.\n"},{"hash":"5f4c4966934b913e9f8a54d60312f874a9d14088","date":"2014-05-30T17:06:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix POSIX namespace pollution in sys/types.h\n\nint8_t, u_int8_t, etc types are moved under _BSD_SOURCE\n"},{"hash":"6f409bff008a83fa6bc640c10366765874de35e2","date":"2014-06-01T00:57:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor getaddrinfo and add support for most remaining features\n\nthis is the first phase of the \"resolver overhaul\" project.\n\nconceptually, the results of getaddrinfo are a direct product of a\nlist of address results and a list of service results. the new code\nmakes this explicit by computing these lists separately and combining\nthe results. this adds support for services that have both tcp and udp\nversions, where the caller has not specified which it wants, and\neliminates a number of duplicate code paths which were all producing\nthe final output addrinfo structures, but in subtly different ways,\nmaking it difficult to implement any of the features which were\nmissing.\n\nin addition to the above benefits, the refactoring allows for legacy\nfunctions like gethostbyname to be implemented without using the\ngetaddrinfo function itself. such changes to the legacy functions have\nnot yet been made, however.\n\nfurther improvements include matching of service alias names from\n/etc/services (previously only the primary name was supported),\nreturning multiple results from /etc/hosts (previously only the first\nmatching line was honored), and support for the AI_V4MAPPED and AI_ALL\nflags.\n\nfeatures which remain unimplemented are IDN translations (encoding\nnon-ASCII hostnames for DNS lookup) and the AI_ADDRCONFIG flag.\n\nat this point, the DNS-based name resolving code is still based on the\nold interfaces in __dns.c, albeit somewhat simpler in its use of them.\nthere may be some dead code which could already be removed, but\nchanges to this layer will be a later phase of the resolver overhaul.\n"},{"hash":"e8f39ca4898237cf71657500f0b11534c47a0521","date":"2014-06-01T04:09:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve gethostbyname2_r using new resolver backend\n\nthese changes reduce the size of the function somewhat and remove many\nof its dependencies, including free. in principle it should now be\nasync-signal-safe, but this has not been verified in detail.\n\nminor changes to error handling are also made.\n"},{"hash":"af7c308ee66c4127700dd7843f885f7f2d030a0c","date":"2014-06-01T04:45:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve getservbyname_r using new resolver backend\n\nnow that host and service lookup have been separated in the backend,\nthere's no need for service lookup functions to pull in the host\nlookup code. moreover, dynamic allocation is no longer needed, so this\nfunction should now be async-signal-safe. it's also significantly\nsmaller.\n\none change in getservbyname is also made: knowing that getservbyname_r\nneeds only two character pointers in the caller-provided buffer, some\nwasted bss can be avoided.\n"},{"hash":"bb9af59bba5b72b90c38d28809c30b31933c64d5","date":"2014-06-02T05:31:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one in checking hostname length in new resolver backend\n\nthis bug was introduced in the recent resolver overhaul commits. it\nlikely had visible symptoms. these were probably limited to wrongly\naccepting truncated versions of over-long names (vs rejecting them),\nas opposed to stack-based overflows or anything more severe, but no\nextensive checks were made. there have been no releases where this bug\nwas present.\n"},{"hash":"1871f583f419f58bbcd921cda41c991994672c8a","date":"2014-06-02T05:44:47.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add ipsec and tunneling protocols to getprotoent-family functions\n\niptables and ipsec-tools among others require these to function\nproperly.\n"},{"hash":"8312f7f60f9dfe88118163d38b8282abf04aac2f","date":"2014-06-02T06:13:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement new dns backend, res_send and other legacy resolver functions\n\nthis is the second phase of the \"resolver overhaul\" project.\n\nthe key additions in this commit are the __res_msend and __res_mkquery\nfunctions, which have been factored so as to provide a backend for\nboth the legacy res_* functions and the standard getaddrinfo and\ngetnameinfo functions. the latter however are still using the old\nbackend code; there is code duplication which still needs to be\nremoved, and this will be the next phase of the resolver overhaul.\n\n__res_msend is derived from the old __dns_doqueries function, but\ngeneralized to send arbitrary caller-provided packets in parallel\nrather than producing the parallel queries itself. this allows it to\nbe used (completely trivially) as a backend for res_send. the\nfactored-out query generation code, with slightly more generality, is\nnow part of __res_mkquery.\n"},{"hash":"a2a328bd896fa909542b492601e3689119b95de0","date":"2014-06-02T08:27:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized variable in new __res_msend dns function\n"},{"hash":"3330198060c7b3165a2fba530ffde5fc6706ecf2","date":"2014-06-02T08:47:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"switch standard resolver functions to use the new dns backend\n\nthis is the third phase of the \"resolver overhaul\" project.\n\nthis commit removes all of the old dns code, and switches the\n__lookup_name backend (used by getaddrinfo, etc.) and the getnameinfo\nfunction to use the newly implemented __res_mkquery and __res_msend\ninterfaces. for parsing the results, a new callback-based __dns_parse\nfunction, based on __dns_get_rr from the old dns code, is used.\n"},{"hash":"76f440cff73878a7359e944618a7722dfd23bdec","date":"2014-06-02T09:00:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cruft from old resolver and numeric ip parsing\n\nthe old resolver code used a function __ipparse which contained the\nlogic for inet_addr and inet_aton, which is needed in getaddrinfo.\nthis was phased out in the resolver overhaul in favor of directly\nusing inet_aton and inet_pton as appropriate.\n\nthis commit cleans up some stuff that was left behind.\n"},{"hash":"8fba4458afb7304b32ca887e4a3990c6029131f9","date":"2014-06-02T20:21:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect end pointer in some cases when wcsrtombs stops early\n\nwhen wcsrtombs stopped due to hitting zero remaining space in the\noutput buffer, it was wrongly clearing the position pointer as if it\nhad completed the conversion successfully.\n\nthis commit rearranges the code somewhat to make a clear separation\nbetween the cases of ending due to running out of output buffer space,\nand ending due to reaching the end of input or an illegal sequence in\nthe input. the new branches have been arranged with the hope of\noptimizing more common cases, too.\n"},{"hash":"ac2a7893427b6c94f05609d214178f8d5a18b333","date":"2014-06-03T05:43:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix some validation checks in dns response parsing code\n\nsince the buffer passed always has an actual size of 512 bytes, the\nmaximum possible response packet size, no out-of-bounds access was\npossible; however, reading past the end of the valid portion of the\npacket could cause the parser to attempt to process junk as answer\ncontent.\n"},{"hash":"d85d261ee601f7ccf0bb19c38c69e406a664fe8e","date":"2014-06-03T05:46:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix negative response and non-response handling for dns queries\n\npreviously, all failures to obtain at least one address were treated\nas nonexistant names (EAI_NONAME). this failed to account for the\npossibility of transient failures (no response at all, or a response\nwith rcode of 2, server failure) or permanent failures that do not\nindicate the nonexistence of the requested name. only an rcode of 3\nshould be treated as an indication of nonexistence.\n"},{"hash":"8041af59881219c32267c3491bee43591d3c3fe6","date":"2014-06-03T21:53:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix if_nametoindex return value when interface does not exist\n\nthe return value is unsigned, so negative results for \"errors\" do not\nmake sense; 0 is the value reserved for when the interface name does\nnot exist.\n"},{"hash":"bdad2fefb206d9727d4a3254f7883b8455452d89","date":"2014-06-04T06:24:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for ipv6 scope_id to getaddrinfo and getnameinfo\n\nfor all address types, a scope_id specified as a decimal value is\naccepted. for addresses with link-local scope, a string containing the\ninterface name is also accepted.\n\nsome changes are made to error handling to avoid unwanted fallbacks in\nthe case where the scope_id is invalid: if an earlier name lookup\nbackend fails with an error rather than simply \"0 results\", this\nfailure now suppresses any later attempts with other backends.\n\nin getnameinfo, a light \"itoa\" type function is added for generating\ndecimal scope_id results, and decimal port strings for services are\nalso generated using this function now so as not to pull in the\ndependency on snprintf.\n\nin netdb.h, a definition for the NI_NUMERICSCOPE flag is added. this\nis required by POSIX (it was previously missing) and needed to allow\ncallers to suppress interface-name lookups.\n"},{"hash":"6a25313c1122629b43b990ada70af1c209f03a54","date":"2014-06-04T07:39:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify vasprintf implementation\n\nthe old implementation preallocated a buffer in order to try to avoid\ncalling vsnprintf more than once. not only did this potentially lead\nto memory fragmentation from trimming with realloc; it also pulled in\nrealloc/free, which otherwise might not be needed in a static linked\nprogram.\n"},{"hash":"934aa1350b96461f205ad69c95e8f6f035f6b62c","date":"2014-06-04T08:39:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some dummy \"ent\" function aliases that duplicated real ones\n\nthe service and protocol functions are defined also in other files,\nand the protocol ones are actually non-nops elsewhere, so the weak\ndefinitions in ent.c could have prevented the strong definitions from\ngetting pulled in and used in some static programs.\n"},{"hash":"01dc3f4fea73e4df31cc3e3bb1cd5580fc0d7938","date":"2014-06-04T20:53:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for reverse name lookups from hosts file to getnameinfo\n\nthis also affects the legacy gethostbyaddr family, which uses\ngetnameinfo as its backend.\n\nsome other minor changes associated with the refactoring of source\nfiles are also made; in particular, the resolv.conf parser now uses\nthe same code that's used elsewhere to handle ip literals, so as a\nside effect it can now accept a scope id for nameserver addressed with\nlink-local scope.\n"},{"hash":"fde3c29de461253c1d814e462a2b8ae5f694583a","date":"2014-06-04T23:33:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for reverse port lookups from services file to getnameinfo\n\nthis also affects the legacy getservbyport family, which uses\ngetnameinfo as its backend.\n"},{"hash":"7e222f46a832cc7c148c376084c69d7493b11d6c","date":"2014-06-05T19:55:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing function declarations in refactored ip literal parsing code\n"},{"hash":"b3d9e0b94ea73c68ef4169ec82c898ce59a4e30a","date":"2014-06-05T21:01:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix multiple validation issues in dns response label parsing\n\nDue to an error introduced in commit fcc522c92335783293ac19df318415cd97fbf66b,\nchecking of the remaining output buffer space was not performed correctly,\nallowing malformed input to write past the end of the buffer.\n\nIn addition, the loop detection logic failed to account for the possibility\nof infinite loops with no output, which would hang the function.\n\nThe output size is now limited more strictly so only names with valid length\nare accepted.\n"},{"hash":"2abb70c302efe46dfd8fd9e1d64fa00f1376f428","date":"2014-06-05T21:06:37.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix the domain name length limit checks\n\nA domain name is at most 255 bytes long (RFC 1035), but the string\nrepresentation is two bytes smaller so the strlen maximum is 253.\n"},{"hash":"60158bff74e478a8031f618ea5e0546bf41a3523","date":"2014-06-06T07:17:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fd leak in tmpfile when the fdopen operation fails\n\nthis condition could only happen due to malloc failure.\n\nthe fdopen operation is also moved to take place after the unlink to\nminimize the window during which a link to the file exists in the\ndirectory table.\n"},{"hash":"9ce2860fa34ede8f84b8ca5ac1746a58b171a023","date":"2014-06-06T07:29:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add vdso clock_gettime acceleration support to i386\n"},{"hash":"07355f503a9b0a3ab7a051e2931499a4c5898b15","date":"2014-06-06T18:41:15.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"accept trailing . and empty domain names\n\ntrailing . should be accepted in domain name strings by convention\n(RFC 1034), host name lookup accepts \".\" but rejects empty \"\", res_*\ninterfaces also accept empty name following existing practice.\n"},{"hash":"abce3156399f30d9b16e198af62af7f7c33fcbe0","date":"2014-06-06T18:44:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"implement dn_comp RFC 1035 domain name compression\n\nthe input name is validated, the other parameters are assumed to be\nvalid (the list of already compressed names are not checked for\ninfinite reference loops or out-of-bound offsets).\n\nnames are handled case-sensitively for now.\n"},{"hash":"1d348566e6ab446d9c452b1b93aede74368b6618","date":"2014-06-06T19:29:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add SOCK_CLOEXEC fallback for socketpair on old kernels\n\nas usual, this is non-atomic, but better than producing an error or\nfailing to set the close-on-exec flag at all.\n"},{"hash":"1cacc01dc0623ac6443e19580222331812bddbbc","date":"2014-06-06T19:30:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize SOCK_CLOEXEC fallback for socket function\n\nthe fcntl function is heavy, so make the syscall directly instead.\nalso, avoid the code size and runtime overhead of querying the old\nflags, since it's reasonable to assume nothing will be set on a\nnewly-created socket. this code is only used on old kernels which lack\nproper atomic close-on-exec support, so future changes that might\ninvalidate such an assumption do not need to be considered.\n"},{"hash":"7765706c0584ed4a30e0b7a3ada742e490ef02b0","date":"2014-06-06T19:42:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add O_CLOEXEC fallback for open and related functions\n\nsince there is no easy way to detect whether open honored or ignored\nthe O_CLOEXEC flag, the optimal solution to providing a fallback is\nsimply to make the fcntl syscall to set the close-on-exec flag\nimmediately after open returns.\n"},{"hash":"9c2d437cb343a9a9e1c2d5dea4e0ae6a7d4fa0be","date":"2014-06-06T19:43:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid invalid use of va_arg in open\n\nreading the variadic mode argument is only valid when the O_CREAT flag\nis present. this probably does not matter, but is needed for formal\ncorrectness, and could affect LTO or other full-program analysis.\n"},{"hash":"348fc5561c816d56ae1c3d744e4c22b70e861d4e","date":"2014-06-06T21:41:12.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"implement %y and %C specifiers in strptime\n"},{"hash":"3ff3a1d541241699f84b52e5ef4bacce2105568f","date":"2014-06-06T22:36:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.2\n"},{"hash":"f616294914e7c289791d856dca636bbccad5fef7","date":"2014-06-07T00:46:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use default timezone from /etc/localtime if $TZ is unset/blank\n\nthe way this is implemented, it also allows explicit setting of\nTZ=/etc/localtime even for suid programs. this is not a problem\nbecause /etc/localtime is a trusted path, much like the trusted\nzoneinfo search path.\n"},{"hash":"246e752d9e7c472735444815163f0a22e5bc4161","date":"2014-06-07T08:09:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid spurious lookup failures from badly-behaved nameservers\n\nthe results of a dns query, whether it's performed as part of one of\nthe standard name-resolving functions or directly by res_send, should\nbe a function of the query, not of the particular nameserver that\nresponds to it. thus, all responses which indicate a failure or\nrefusal by the nameserver, as opposed to a positive or negative result\nfor the query, should be ignored.\n\nthe strategy used is to re-issue the query immediately (but with a\nlimit on the number of retries, in case the server is really broken)\nwhen a response code of 2 (server failure, typically transient) is\nseen, and otherwise take no action on bad responses (which generally\nindicate a misconfigured nameserver or one which the client does not\nhave permission to use), allowing the normal retry interval to apply\nand of course accepting responses from other nameservers queried in\nparallel.\n\nempirically this matches the traditional resolver behavior for\nnameservers that respond with a code of 2 in the case where there is\njust a single nameserver configured. the behavior diverges when\nmultiple nameservers are available, since musl is querying them in\nparallel. in this case we are mildly more aggressive at retrying.\n"},{"hash":"64e32287f9d8a84217834bcc3387e9431cad9e4c","date":"2014-06-10T07:36:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add thread-pointer support for pre-2.6 kernels on i386\n\nsuch kernels cannot support threads, but the thread pointer is also\nimportant for other purposes, most notably stack protector. without a\nvalid thread pointer, all code compiled with stack protector will\ncrash. the same applies to any use of thread-local storage by\napplications or libraries.\n\nthe concept of this patch is to fall back to using the modify_ldt\nsyscall, which has been around since linux 1.0, to setup the gs\nsegment register. since the kernel does not have a way to\nautomatically assign ldt entries, use of slot zero is hard-coded. if\nthis fallback path is used, __set_thread_area returns a positive value\n(rather than the usual zero for success, or negative for error)\nindicating to the caller that the thread pointer was successfully set,\nbut only for the main thread, and that thread creation will not work\nproperly. the code in __init_tp has been changed accordingly to record\nthis result for later use by pthread_create.\n"},{"hash":"df15168cf8baf34fb9c94e19eaa1a5c79c853970","date":"2014-06-10T08:02:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace all remaining internal uses of pthread_self with __pthread_self\n\nprior to version 1.1.0, the difference between pthread_self (the\npublic function) and __pthread_self (the internal macro or inline\nfunction) was that the former would lazily initialize the thread\npointer if it was not already initialized, whereas the latter would\ncrash in this case. since lazy initialization is no longer supported,\nuse of pthread_self no longer makes sense; it simply generates larger,\nslower code.\n"},{"hash":"ac31bf278d9ed855e6765bb71d64ed19d2b7c0f8","date":"2014-06-10T08:49:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify errno implementation\n\nthe motivation for the errno_ptr field in the thread structure, which\nthis commit removes, was to allow the main thread's errno to keep its\naddress when lazy thread pointer initialization was used. &errno was\nevaluated prior to setting up the thread pointer and stored in\nerrno_ptr for the main thread; subsequently created threads would have\nerrno_ptr pointing to their own errno_val in the thread structure.\n\nsince lazy initialization was removed, there is no need for this extra\nlevel of indirection; __errno_location can simply return the address\nof the thread's errno_val directly. this does cause &errno to change,\nbut the change happens before entry to application code, and thus is\nnot observable.\n"},{"hash":"d79b27785fb2476017225b13d24e4b8d408f61c6","date":"2014-06-10T16:11:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fail configure on --enable-shared if -Bsymbolic-functions doesn't work\n\npreviously, a warning was issued in this case no matter what, even if\n--disable-shared was used. now, the default for --enable-shared is\nchanged from \"yes\" to \"auto\", and the warning is issued by default,\nbut becomes an error if --enable-shared is used, and the test is\nsuppressed completely if --disable-shared is used.\n"},{"hash":"66fcde4ae4a52ae3edb1cf237ce2c22d08d7a062","date":"2014-06-12T03:38:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support optional-argument extension to getopt via double-colon\n\nthis extension is not incompatible with the standard behavior of the\nfunction, not expensive, and avoids requiring a replacement getopt\nwith full GNU extensions for a few important apps including busybox's\nsed with the -i option.\n"},{"hash":"4e5c7a2176773c9a1564c6603240337b3ad6b496","date":"2014-06-14T04:10:16.000Z","author":{"name":"Clément Vasseur","email":"clement.vasseur@gmail.com"},"message":"fix missing argument to syscall in fanotify_mark\n"},{"hash":"bfa09700b927c99cff5263483c1d7a4d1fe766e5","date":"2014-06-16T07:09:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linker: permit error returns from arch-specific reloc function\n\nthe immediate motivation is supporting TLSDESC relocations which\nrequire allocation and thus may fail (unless we pre-allocate), but\nthis mechanism should also be used for throwing an error on\nunsupported or invalid relocation types, and perhaps in certain cases,\nfor reporting when a relocation is not satisfiable.\n"},{"hash":"f4cc27601817f6decd773c24496bfbe892bcd244","date":"2014-06-17T17:56:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"multiple fixes to sh (superh) dynamic linker relocations\n\nthe following issues are fixed:\n\n- R_SH_REL32 was adding the load address of the module being relocated\n  to the result. this seems to have been a mistake in the original\n  port, since it does not match other dynamic linker implementations\n  and since adding a difference between two addresses (the symbol\n  value and the relocation address) to a load address does not make\n  sense.\n\n- R_SH_TLS_DTPMOD32 was wrongly accepting an inline addend (i.e. using\n  += rather than = on *reloc_addr) which makes no sense; addition is\n  not an operation that's defined on module ids.\n\n- R_SH_TLS_DTPOFF32 and R_SH_TLS_TPOFF32 were wrongly using inline\n  addends rather than the RELA-provided addends.\n\nin addition, handling of R_SH_GLOB_DAT, R_SH_JMP_SLOT, and R_SH_DIR32\nare merged to all honor the addend. the first two should not need it\nfor correct usage generated by toolchains, but other dynamic linkers\nallow addends here, and it simplifies the code anyway.\n\nthese issues were spotted while reviewing the code for the purpose of\nrefactoring this part of the dynamic linker. no testing was performed.\n"},{"hash":"94cf991bf4b18bb87a15a96e7b5e7d92fab787ba","date":"2014-06-17T18:32:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix powerpc dynamic linker thread-pointer-relative relocations\n\nprocessing of R_PPC_TPREL32 was ignoring the addend provided by the\nRELA-style relocation and instead using the inline value as the\naddend. this presumably broke dynamic-linked access to initial TLS in\ncases where the addend was nonzero.\n"},{"hash":"adf94c19666e687a728bbf398f9a88ea4ea19996","date":"2014-06-18T06:44:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor to remove arch-specific relocation code from dynamic linker\n\nthis was one of the main instances of ugly code duplication: all archs\nuse basically the same types of relocations, but roughly equivalent\nlogic was duplicated for each arch to account for the different naming\nand numbering of relocation types and variation in whether REL or RELA\nrecords are used.\n\nas an added bonus, both REL and RELA are now supported on all archs,\nregardless of which is used by the standard toolchain.\n"},{"hash":"7c73cacd09a51a87484db5689864743e4984a84d","date":"2014-06-18T07:05:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reduce code duplication in dynamic linker error paths\n\neventually this should help making dlerror thread-safe too.\n"},{"hash":"cef0f289f666b6c963bfd11537a6d80916ff889e","date":"2014-06-19T04:42:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect comparison loop condition in memmem\n\nthe logic for this loop was copied from null-terminated-string logic\nin strstr without properly adapting it to work with explicit lengths.\n\npresumably this error could result in false negatives (wrongly\ncomparing past the end of the needle/haystack), false positives\n(stopping comparison early when the needle contains null bytes), and\ncrashes (from runaway reads past the end of mapped memory).\n"},{"hash":"9d15d5e7533738f3e80f1aeecb4e30f8c9db1670","date":"2014-06-19T06:01:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add arch-generic support for tlsdesc relocations to dynamic linker\n\nthis code is non-functional without further changes to link up the\narch-specific reloc types for tlsdesc and add asm implementations of\n__tlsdesc_static and __tlsdesc_dynamic.\n"},{"hash":"e75b16cf93ebbc1ce758d3ea6b2923e8b2457c68","date":"2014-06-19T06:16:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"change dynamic TLS installation strategy to optimize access\n\npreviously, accesses to dynamic TLS had to check two conditions before\nbeing able to use a dtv slot: (1) that the module index was within the\nbounds of the current dtv size, and (2) that the dynamic tls for the\nrequested module index was already installed in the dtv.\n\nthis commit changes the installation strategy so that, whenever an\nattempt is made to access dynamic TLS that's not yet installed in the\ndtv, the dynamic TLS for all lower-index modules is also installed.\nthus it provides a new invariant: if a given module index is within\nthe bounds of the current dtv size, we automatically know that its TLS\nis installed and directly available. the requirement that the second\ncondition (above) be checked is eliminated.\n"},{"hash":"880c479f0e3a798d826c1c91b38d33e2b3e36580","date":"2014-06-19T06:48:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize i386 ___tls_get_addr asm\n"},{"hash":"4e0b4a5de735ecb241fadb1e15381c947e16e71f","date":"2014-06-19T06:50:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add tlsdesc support for i386\n"},{"hash":"5ba238e1e48d2fe4107e09903b26b2b36aa9e9ff","date":"2014-06-19T06:59:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"separate __tls_get_addr implementation from dynamic linker/init_tls\n\nsuch separation serves multiple purposes:\n\n- by having the common path for __tls_get_addr alone in its own\n  function with a tail call to the slow case, code generation is\n  greatly improved.\n\n- by having __tls_get_addr in it own file, it can be replaced on a\n  per-arch basis as needed, for optimization or ABI-specific purposes.\n\n- by removing __tls_get_addr from __init_tls.c, a few bytes of code\n  are shaved off of static binaries (which are unlikely to use this\n  function unless the linker messed up).\n"},{"hash":"39201d07e41ca4cf5f8c35d4663767aa3f75208f","date":"2014-06-19T19:26:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add tlsdesc support for x86_64\n"},{"hash":"acb7e049b8c70b9e6ad57e8601373f9c991a0da4","date":"2014-06-20T03:01:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement sendmmsg and recvmmsg\n\nthese are not pure syscall wrappers because they have to work around\nkernel API bugs on 64-bit archs. the workarounds could probably be\nmade somewhat more efficient, but at the cost of more complexity. this\nmay be revisited later.\n"},{"hash":"3fa2eb2aba8d6b54dec53e7ad4c37e17392b166f","date":"2014-06-20T04:25:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename dynamic linker entry point from _start to _dlstart\n\nthe main motivation for this change is to aid in debugging. since the\nmain program's entry point is also named _start, it was difficult to\nset breakpoints or quickly identify which _start execution stopped in.\n"},{"hash":"2e5d256984adb6864ece82fb689ddb2b20e10e4d","date":"2014-06-20T06:13:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sendmmsg emulation return value for zero-length vector\n\nthis case is not even documented, but the kernel returns 0 here and it\nmakes sense to be consistent.\n"},{"hash":"fe82bb9b921be34370e6b71a1c6f062c20999ae0","date":"2014-06-20T13:17:57.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix gethostby*_r result pointer value on error\n\naccording to the documentation in the man pages, the GNU extension\nfunctions gethostbyaddr_r, gethostbyname_r and gethostbyname2_r are\nguaranteed to set the result pointer to NULL in case of error or no\nresult.\n"},{"hash":"4ad3588c0eedba8165e377da0ff8d331aa901b94","date":"2014-06-20T20:10:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove optimization-inhibiting behavior from configure's --enable-debug\n\nthis behavior turned out to be counter-intuitive to users and in any\ncase it's unnecessary. optimization can be disabled explicitly using\nthe --disable-optimize option, or both can be achieved without any\nenable/disable options by passing CFLAGS=\"-O0 -g\".\n"},{"hash":"70d9c303b3115ab0fe6060ba0f7b0e4c0a2320b7","date":"2014-06-21T11:44:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove hack in syslog.h that resulted in aliasing violations\n\nthis issue affected the prioritynames and facilitynames arrays which\nare only provided when requested (usually by syslogd implementations)\nand which are presently defined as compound literals. the aliasing\nviolation seems to have been introduced as a workaround for bad\nbehavior by gcc's -Wwrite-strings option, but it caused compilers to\ncompletely optimize out the contents of prioritynames and\nfacilitynames since, under many usage cases, the aliasing rules prove\nthat the contents are never accessed.\n"},{"hash":"3c42605a603485df60ed42792c3d3113a4c47a90","date":"2014-06-21T23:21:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement result address sorting in the resolver (getaddrinfo, etc.)\n"},{"hash":"5474a346691c2c7483b40bc4595017c3df5a7aa1","date":"2014-06-21T23:24:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement fmtmsg function\n\ncontributed by Isaac Dunham. this seems to be the last interface that\nwas missing for complete POSIX 2008 base + XSI coverage.\n"},{"hash":"76f2bcc7d673d0a1b06ea4b2545b4096979ad518","date":"2014-06-22T04:29:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consolidate __xstat abi-compat functions into a single source file\n\nthese are mostly intended for use with dynamic linking (although they\ncan also be used statically with object files compiled against glibc\nheaders), so having them broken down into separate source files to\noptimize for static linking is unlikely to be worth the cost having\nmore files in the source tree (which contributes to libc.a overhead,\ncompile time, link time, ar/linker command line size exhaustion, and\nso on).\n"},{"hash":"1fd0f6e31f157cc9be115c29f0c537d8a225cc86","date":"2014-06-22T04:37:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add __xmknod and __xmknodat abi-compat functions\n\nthese are put alongside the similar functions for __xstat, etc. in\n__xstat.c to avoid bloating the number of source files.\n"},{"hash":"6ce1fade494c98414523568989fc7adea87f3402","date":"2014-06-22T04:39:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add __sysv_signal abi-compat alias for the signal function\n\nit should be noted that the \"real\" __sysv_signal, which we do not\nimplement, is semantically different from signal. references to\n__sysv_signal arise in code built against glibc under certain\ncombinations of feature test macros, and are almost surely\nunintentional since the legacy sysv signal behavior has fundamental\nrace conditions that cannot be worked around and which make it\nimpossible to use safely.\n"},{"hash":"607ce882dbe3ce717ed707000f86a1c42eb77bb9","date":"2014-06-23T21:20:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename dynamic linker _start to _dlstart in the stub version\n\nthe renaming was previously applied to all real versions of the\nfunction in commit 3fa2eb2aba8d6b54dec53e7ad4c37e17392b166f.\n"},{"hash":"5abfd55d6e4845413eced358099488273adbcb9f","date":"2014-06-24T21:39:31.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add routing protocols to getprotoent-family functions\n\niptables and quagga need them to work.\n"},{"hash":"1cc69faa5c2f0a189c35cf980ff4fa526ce866f4","date":"2014-06-25T18:16:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add note to INSTALL file about gcc 4.9.0 not being supported\n"},{"hash":"8facd5638c8fce5eb6b6c11e4bdc34755d03344d","date":"2014-06-25T18:16:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update version reference in the README file\n"},{"hash":"f80710718026d8ad4767ed36651da7b5b5d63530","date":"2014-06-25T20:14:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add tarball-producing targets to Makefile for ease of release\n\nmy old, out-of-tree release script that performed a clone rather than\nusing git archive checked the VERSION file to make sure that it\nmatched before doing a release. I believe there should be a way to do\nthe same with git commands (without resorting to checking out the\ndesired tag) but I have not yet found a way, so care should be taken\nwhen using these targets that the correctness of the VERSION file is\nnot overlooked.\n"},{"hash":"de337c9314e4dede7b26e03f29cf768e7b0615b5","date":"2014-06-25T20:18:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.3\n"},{"hash":"9a4ad02214a859e93d2c980e4535378a6a74e3a6","date":"2014-06-30T01:52:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in dynamic linker error reporting\n\ndue to a mistake when refactoring the error printing for the dynamic\nlinker (commit 7c73cacd09a51a87484db5689864743e4984a84d), all messages\nwere suppressed and replaced by blank lines.\n"},{"hash":"2d8cc92a7cb4a3256ed07d86843388ffd8a882b1","date":"2014-06-30T05:18:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in mips dynamic linker\n\nthis issue caused the address of functions in shared libraries to\nresolve to their PLT thunks in the main program rather than their\ncorrect addresses. it was observed causing crashes, though the\nmechanism of the crash was not thoroughly investigated. since the\nissue is very subtle, it calls for some explanation:\n\non all well-behaved archs, GOT entries that belong to the PLT use a\nspecial relocation type, typically called JMP_SLOT, so that the\ndynamic linker can avoid having the jump destinations for the PLT\nresolve to PLT thunks themselves (they also provide a definition for\nthe symbol, which must be used whenever the address of the function is\ntaken so that all DSOs see the same address).\n\nhowever, the traditional mips PIC ABI lacked such a JMP_SLOT\nrelocation type, presumably because, due to the way PIC works, the\naddress of the PLT thunk was never needed and could always be ignored.\n\nprior to commit adf94c19666e687a728bbf398f9a88ea4ea19996, the mips\nversion of reloc.h contained a hack that caused all symbol lookups to\nbe treated like JMP_SLOT, inhibiting undefined symbols from ever being\nused to resolve symbolic relocations. this hack goes all the way back\nto commit babf820180368f00742ec65b2050a82380d7c542, when the mips\ndynamic linker was first made usable.\n\nduring the recent refactoring to eliminate arch-specific relocation\nprocessing (commit adf94c19666e687a728bbf398f9a88ea4ea19996), this\nhack was overlooked and no equivalent functionality was provided in\nthe new code.\n\nfixing the problem is not as simple as adding back an equivalent hack,\nsince there is now also a \"non-PIC ABI\" that can be used for the main\nexecutable, which actually does use a PLT. the closest thing to\nofficial documentation I could find for this ABI is nonpic.txt,\nattached to Message-ID: 20080701202236.GA1534@caradoc.them.org, which\ncan be found in the gcc mailing list archives and elsewhere. per this\ndocument, undefined symbols corresponding to PLT thunks have the\nSTO_MIPS_PLT bit set in the symbol's st_other field. thus, I have\nadded an arch-specific rule for mips, applied at the find_sym level\nrather than the relocation level, to reject undefined symbols with the\nSTO_MIPS_PLT bit clear.\n\nthe previous hack of treating all mips relocations as JMP_SLOT-like,\nrather than rejecting the unwanted symbols in find_sym, probably also\ncaused dlsym to wrongly return PLT thunks in place of the correct\naddress of a function under at least some conditions. this should now\nbe fixed, at least for global-scope symbol lookups.\n"},{"hash":"e89cfe51d2001af08fc2a13e5133ba8157f90beb","date":"2014-07-01T22:27:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix aliasing violations in mbtowc and mbrtowc\n\nthese functions were setting wc to point to wchar_t aliasing itself as\na \"cheap\" way to support null wc arguments. doing so was anything but\ncheap, since even without the aliasing violation, it would limit the\ncompiler's ability to optimize.\n\nmaking wc point to a dummy object is equally easy and does not suffer\nfrom the above problems.\n"},{"hash":"0b3d33d4d27731f0d80f726fd114c8b9cb3322be","date":"2014-07-01T22:32:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ungrammatical comment in posix_spawn code\n"},{"hash":"ebd8142a6ae19db1a5440d11c01afc7529eae0cd","date":"2014-07-01T22:49:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect return value for fwide function\n\nwhen the orientation of the stream was already set, fwide was\nincorrectly returning its argument (the requested orientation) rather\nthan the actual orientation of the stream.\n"},{"hash":"285f969db6a41a547ba5192a7363d41d4a8b5e3b","date":"2014-07-01T23:06:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in a comment in __libc_start_main\n"},{"hash":"984c25b74da085c6ae6b44a87bbd5f8afc9be331","date":"2014-07-02T16:09:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of wide printf/scanf functions to set wide orientation\n\nin some cases, these functions internally call a byte-based input or\noutput function before calling getwc/putwc, so they cannot rely on the\nlatter to set the orientation.\n"},{"hash":"0bc03091bb674ebb9fa6fe69e4aec1da3ac484f2","date":"2014-07-02T23:33:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add locale framework\n\nthis commit adds non-stub implementations of setlocale, duplocale,\nnewlocale, and uselocale, along with the data structures and minimal\ncode needed for representing the active locale on a per-thread basis\nand optimizing the common case where thread-local locale settings are\nnot in use.\n\nat this point, the data structures only contain what is necessary to\nrepresent LC_CTYPE (a single flag) and LC_MESSAGES (a name for use in\nfinding message translation files). representation for the other\ncategories will be added later; the expectation is that a single\npointer will suffice for each.\n\nfor LC_CTYPE, the strings \"C\" and \"POSIX\" are treated as special; any\nother string is accepted and treated as \"C.UTF-8\". for other\ncategories, any string is accepted after being truncated to a maximum\nsupported length (currently 15 bytes). for LC_MESSAGES, the name is\nkept regardless of whether libc itself can use such a message\ntranslation locale, since applications using catgets or gettext should\nbe able to use message locales libc is not aware of. for other\ncategories, names which are not successfully loaded as locales (which,\nat present, means all names) are treated as aliases for \"C\". setlocale\nnever fails.\n\nlocale settings are not yet used anywhere, so this commit should have\nno visible effects except for the contents of the string returned by\nsetlocale.\n"},{"hash":"d89fdec51b5849ebdf8000ff1c2fb49878004f39","date":"2014-07-03T01:16:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consolidate *_l ctype/wctype functions into their non-_l source files\n\nthe main practical purposes of this commit are to remove a huge amount\nof clutter from the src/locale directory, to cut down on the length of\nthe $(AR) and $(LD) command lines, and to reduce the amount of space\nwasted by object file headers in the static libc.a. build time may\nalso be reduced, though this has not been measured.\n\nas an additional justification, if there ever were a need for the\nbehavior of these functions to vary by locale, it would be necessary\nfor the non-_l versions to call the _l versions, so that linking the\nformer without the latter would not be possible anyway.\n"},{"hash":"7424ac58b1f47adb03de55de5998c530aee91551","date":"2014-07-03T01:38:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consolidate str[n]casecmp_l into str[n]casecmp source files\n\nthis is mainly done for consistency with the ctype functions and to\ndeclutter the src/locale directory.\n"},{"hash":"4c48501ee2a022a0dd207a2db4d346a00f9927a1","date":"2014-07-03T01:46:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"properly pass current locale to *_l functions when used internally\n\nthis change is presently non-functional since the callees do not yet\nuse their locale argument for anything.\n"},{"hash":"83dc6eb087633abcf5608ad651d3b525ca2ec35e","date":"2014-07-06T03:29:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate use of cached pid from thread structure\n\nthe main motivation for this change is to remove the assumption that\nthe tid of the main thread is also the pid of the process. (the value\nreturned by the set_tid_address syscall was used to fill both fields\ndespite it semantically being the tid.) this is historically and\npresently true on linux and unlikely to change, but it conceivably\ncould be false on other systems that otherwise reproduce the linux\nsyscall api/abi.\n\nonly a few parts of the code were actually still using the cached pid.\nin a couple places (aio and synccall) it was a minor optimization to\navoid a syscall. caching could be reintroduced, but lazily as part of\nthe public getpid function rather than at program startup, if it's\ndeemed important for performance later. in other places (cancellation\nand pthread_kill) the pid was completely unnecessary; the tkill\nsyscall can be used instead of tgkill. this is actually a rather\nsubtle issue, since tgkill is supposedly a solution to race conditions\nthat can affect use of tkill. however, as documented in the commit\nmessage for commit 7779dbd2663269b465951189b4f43e70839bc073, tgkill\ndoes not actually solve this race; it just limits it to happening\nwithin one process rather than between processes. we use a lock that\navoids the race in pthread_kill, and the use in the cancellation\nsignal handler is self-targeted and thus not subject to tid reuse\nraces, so both are safe regardless of which syscall (tgkill or tkill)\nis used.\n"},{"hash":"ea496d6c63ecbb5ea475111808e5c0f799354450","date":"2014-07-06T05:34:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix multiple issues in legacy function getpass\n\n1. failure to output a newline after the password is read\n2. fd leaks via missing FD_CLOEXEC\n3. fd leaks via failure-to-close when any of the standard streams are\n   closed at the time of the call\n4. wrongful fallback to use of stdin when opening /dev/tty fails\n5. wrongful use of stderr rather than /dev/tty for prompt\n6. failure to report error reading password\n"},{"hash":"d96b12b755483208673fb05e2e60a15d3822752d","date":"2014-07-07T02:56:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rework cancellation weak alias logic not to depend on archive order\n\nif the order of object files in the static archive libc.a was not\nrespected by the linker, the old logic could wrongly cause POSIX\nsymbols outside of the ISO C namespace to be pulled into pure C\nprograms. this should not happen with well-behaved linkers, but\nrelying on the link order was a bad idea anyway.\n\nfiles are renamed to better reflect their contents now that they don't\nneed names to control their order as members in the archive file.\n"},{"hash":"4b48b00a9019fc108b73a04704c3657a4b29b58f","date":"2014-07-07T03:10:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename file containing pthread_cleanup_push and pop for consistency\n"},{"hash":"729673689c3e78803ddfdac2ca6be5a5b80e124a","date":"2014-07-08T23:40:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix typo in microblaze setjmp asm\n\nr24 was wrongly being saved at a misaligned offset of 30 rather than\nthe correct offset of 40 in the jmp_buf. the exact effects of this\nerror have not been studied, but it's clear that the value of r24 was\nlost across setjmp/longjmp and the saved values of r21 and/or r22 may\nalso have been corrupted.\n"},{"hash":"349381aa8c0fc385e54e1068dd5f2b27af55cd12","date":"2014-07-11T04:26:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker accept colon as a separator for LD_PRELOAD\n"},{"hash":"59549313d85fa9a0168ff8164cfe734255585f46","date":"2014-07-11T04:29:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"explicitly reject empty names in dynamic linker load_library function\n\npreviously passing an empty string for name resulted in failure, as\nexpected, but only after spurious syscalls, and it produced confusing\nerrno values (and thus dlerror strings).\n\nin addition to dlopen calls, this issue affected use of LD_PRELOAD\nwith trailing whitespace or colon characters.\n"},{"hash":"da27118157c2942d7652138b8d8b0056fc8f872f","date":"2014-07-12T00:03:21.000Z","author":{"name":"Clément Vasseur","email":"clement.vasseur@gmail.com"},"message":"fix the %m specifier in syslog\n\nerrno must be saved upon vsyslog entry, otherwise its value could be\nchanged by some libc function before reaching the %m handler in\nvsnprintf.\n"},{"hash":"b8c4cf61cbe83317d1df67dfe7877872faf0dec5","date":"2014-07-12T01:20:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement the LOG_PERROR option in syslog\n\nthis is a nonstandard feature, but easy and inexpensive to add. since\nthe corresponding macro has always been defined in our syslog.h, it\nmakes sense to actually support it. applications may reasonably be\nusing the presence of the macro to assume that the feature is\nsupported.\n\nthe behavior of omitting the 'header' part of the log message does not\nseem to be well-documented, but matches other implementations (at\nleast glibc) which have this option.\n\nbased on a patch by Clément Vasseur, but simplified using %n.\n"},{"hash":"a64a045d1dbff2a5776f411eaf58c4a40c067e67","date":"2014-07-12T01:56:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress early syslog return when log socket cannot be opened\n\nthis behavior is no longer valid in general, and was never necessary.\nif the LOG_PERROR option is set, output to stderr could still succeed.\nalso, when the LOG_CONS option is added, it will need syslog to\nproceed even if opening the log socket fails.\n"},{"hash":"781f26bc92b0710ac025fae3be42f5575468f1a5","date":"2014-07-12T01:59:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement the LOG_CONS option in syslog\n\nthis was previously a no-op, somewhat intentionally, because I failed\nto understand that it only has an effect when sending to the logging\nfacility fails and thus is not the nuisance that it would be if always\nsent output to the console.\n"},{"hash":"c463e11eda8326aacee2ac1d516954a9574a2dcd","date":"2014-07-17T00:44:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify __stdio_exit static linking logic\n\nthe purpose of this logic is to avoid linking __stdio_exit unless any\nstdio reads (which might require repositioning the file offset at exit\ntime) or writes (which might require flushing at exit time) could have\nbeen performed.\n\npreviously, exit called two wrapper functions for __stdio_exit named\n__flush_on_exit and __seek_on_exit. both of these functions actually\nperformed both tasks (seek and flushing) by calling the underlying\n__stdio_exit. in order to avoid doing this twice, an overridable data\nobject __towrite_used was used to cause __seek_on_exit to act as a nop\nwhen __towrite was linked.\n\nnow, exit only makes one call, directly to __stdio_exit. this is\nsatisfiable by a weak dummy definition in exit.c, but the real\ndefinition is pulled in by either __toread.c or __towrite.c through\ntheir referencing a symbol which is defined only in __stdio_exit.c.\n"},{"hash":"a6adb2bcd8145353943377d6119c1d7a4242bae1","date":"2014-07-17T01:32:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around constant folding bug 61144 in gcc 4.9.0 and 4.9.1\n\npreviously we detected this bug in configure and issued advice for a\nworkaround, but this turned out not to work. since then gcc 4.9.0 has\nappeared in several distributions, and now 4.9.1 has been released\nwithout a fix despite this being a wrong code generation bug which is\nsupposed to be a release-blocker, per gcc policy.\n\nsince the scope of the bug seems to affect only data objects (rather\nthan functions) whose definitions are overridable, and there are only\na very small number of these in musl, I am just changing them from\nconst to volatile for the time being. simply removing the const would\nbe sufficient to make gcc 4.9.1 work (the non-const case was\ninadvertently fixed as part of another change in gcc), and this would\nalso be sufficient with 4.9.0 if we forced -O0 on the affected files\nor on the whole build. however it's cleaner to just remove all the\nbroken compiler detection and use volatile, which will ensure that\nthey are never constant-folded. the quality of a non-broken compiler's\noutput should not be affected except for the fact that these objects\nare no longer const and thus possibly add a few bytes to data/bss.\n\nthis change can be reconsidered and possibly reverted at some point in\nthe future when the broken gcc versions are no longer relevant.\n"},{"hash":"72ed3d47e567b1635a35d3c1d174c8a8b2787e30","date":"2014-07-17T23:56:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in regexec for nonzero nmatch argument with REG_NOSUB\n\nper POSIX, the nmatch and pmatch arguments are ignored when the regex\nwas compiled with REG_NOSUB.\n"},{"hash":"5cc187215681c2fc1563ad5136c389249aa3f70e","date":"2014-07-18T01:37:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless infinite loop from end of exit function\n\nthis was originally added as a cheap but portable way to quell\nwarnings about reaching the end of a function that does not return,\nbut since _Exit is marked _Noreturn, it's not needed. removing it\nmakes the call to _Exit into a tail call and shaves off a few bytes of\ncode from minimal static programs.\n"},{"hash":"7bece9c2095ee81f14b1088f6b0ba2f37fecb283","date":"2014-07-18T02:01:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide getauxval(AT_SECURE) even if it is missing from the aux vector\n\nthis could happen on 2.4-series linux kernels that predate AT_SECURE\nand possibly on other kernels that are emulating the linux syscall API\nbut not providing AT_SECURE in the aux vector at startup.\n\nin principle applications should be checking errno anyway, but this\ndoes not really work. to be secure, the caller would have to treat\nENOENT (indeterminate result) as possibly-suid and thereby disable\nfunctionality in the typical non-suid usage case. and since glibc only\nruns on kernels that provide AT_SECURE, applications written to the\nglibc getauxval API might simply assume it succeeds.\n"},{"hash":"200d15479c0bc48471ee7b8e538ce33af990f82e","date":"2014-07-18T18:10:23.000Z","author":{"name":"Stefan Kristiansson","email":"stefan.kristiansson@saunalahti.fi"},"message":"add or1k (OpenRISC 1000) architecture port\n\nWith the exception of a fenv implementation, the port is fully featured.\nThe port has been tested in or1ksim, the golden reference functional\nsimulator for OpenRISC 1000.\nIt passes all libc-test tests (except the math tests that\nrequires a fenv implementation).\n\nThe port assumes an or1k implementation that has support for\natomic instructions (l.lwa/l.swa).\n\nAlthough it passes all the libc-test tests, the port is still\nin an experimental state, and has yet experienced very little\n'real-world' use.\n"},{"hash":"d69ab5b3686acf75fdf5db6fad19c2c6a510bb4f","date":"2014-07-18T18:55:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix microblaze definition of struct stat\n\nthe erroneous definition was missed because with works with qemu\nuser-level emulation, which also has the wrong definition. the actual\nkernel uses the asm-generic generic definition.\n"},{"hash":"dc9c40a609de6a79ec30013b0963a57393daa22e","date":"2014-07-18T19:24:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing flags arg to fstatat syscall in fstat fallback path\n\nthis code path is used only on archs without the plain, non-at\nsyscalls, and only when the fstat syscall fails with EBADF on a valid\nfile descriptor. this in turn can happen only for O_PATH file\ndescriptors, and may not happen at all on the newer kernels needed for\nsupporting such archs.\n\nwith the flags argument omitted, spurious fstat failures may happen\nwhen the argument register happens to have the AT_SYMLINK_NOFOLLOW bit\nset.\n"},{"hash":"7fdae458bd421046a300a69dcb32953ac9450136","date":"2014-07-19T16:19:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken constraints for powerpc atomic cas asm\n\nthe register constraint for the address to be accessed did not convey\nthat the asm can access the pointed-to object. as far as the compiler\ncould tell, the result of the asm was just a pure function of the\naddress and the values passed in, and thus the asm could be hoisted\nout of loops or omitted entirely if the result was not used.\n"},{"hash":"94252dd341a7c72b31db2614abdc74142ad80562","date":"2014-07-19T17:03:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cruft from microblaze atomic.h\n"},{"hash":"bb3a3befeaa01531c273ef9130f3fbcaaf8a25e2","date":"2014-07-19T17:43:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build breakage from ppc asm constraints change\n\ndue to a mistake in my testing procedure, the changes in the previous\ncommit were not correctly tested and wrongly assumed to be valid. the\nlwarx and stwcx. instructions do not accept general ppc memory address\nexpressions and thus the argument associated with the memory\nconstraint cannot be used directly.\n\ninstead, the memory constraint can be left as an argument that the asm\ndoes not actually use, and the address can be provided in a separate\nregister constraint.\n"},{"hash":"a294f539c78c6ba0a2786ef3c5b2a1210a33864e","date":"2014-07-19T17:51:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use memory constraints for mips atomic asm\n\ndespite lacking the semantic content that the asm accesses the\npointed-to object rather than just using its address as a value, the\nmips asm was not actually broken. the asm blocks were declared\nvolatile, meaning that the compiler must treat them as having unknown\nside effects.\n\nhowever changing the asm to use memory constraints is desirable not\njust from a semantic correctness and consistency standpoint, but also\nproduces better code. the compiler is able to use base/offset\naddressing expressions for the atomic object's address rather than\nhaving to load the address into a single register. this improves\naccess to global locks in static libc, and access to non-zero-offset\natomic fields in synchronization primitives, etc.\n"},{"hash":"bcad48439494820989f5867c3f8ccfa6aae2909f","date":"2014-07-19T19:51:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing barrier instructions in mips atomic asm\n\npreviously I had wrongly assumed the ll/sc instructions also provided\nmemory synchronization; apparently they do not. this commit adds sync\ninstructions before and after each atomic operation and changes the\natomic store to simply use sync before and after a plain store, rather\nthan a useless compare-and-swap.\n"},{"hash":"1456b7ae6b72a4f2c446243acdde7c951268d4ab","date":"2014-07-19T19:57:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing barrier instructions in powerpc atomic asm\n"},{"hash":"884cc0c7e253601b96902120ed689f34d12f8aa0","date":"2014-07-19T22:23:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix microblaze atomic store\n\nas far as I can tell, microblaze is strongly ordered, but this does\nnot seem to be well-documented and the assumption may need revisiting.\neven with strong ordering, however, a volatile C assignment is not\nsufficient to implement atomic store, since it does not preclude\nreordering by the compiler with respect to non-volatile stores and\nloads.\n\nsimply flanking a C store with empty volatile asm blocks with memory\nclobbers would achieve the desired result, but is likely to result in\nworse code generation, since the address and value for the store may\nneed to be spilled. actually writing the store in asm, so that there's\nonly one asm block, should give optimal code generation while\nsatisfying the requirement for having a compiler barrier.\n"},{"hash":"522a0de2101abd12b19a4d2ba5c09abbb7c5fc79","date":"2014-07-19T22:34:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing barriers in powerpc atomic store\n"},{"hash":"cec33b2c6079195c687331beda5409f449125b06","date":"2014-07-20T00:42:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix or1k atomic store\n\nat the very least, a compiler barrier is required no matter what, and\nthat was missing. current or1k implementations have strong ordering,\nbut this is not guaranteed as part of the ISA, so some sort of\nsynchronizing operation is necessary.\n\nin principle we should use l.msync, but due to misinterpretation of\nthe spec, it was wrongly treated as an optional instruction and is not\nsupported by some implementations. if future kernels trap it and treat\nit as a nop (rather than illegal instruction) when the\nhardware/emulator does not support it, we could consider using it.\n\nin the absence of l.msync support, the l.lwa/l.swa instructions, which\nare specified to have a built-in l.msync, need to be used. the easiest\nway to use them to implement atomic store is to perform an atomic swap\nand throw away the result. using compare-and-swap would be lighter,\nand would probably be sufficient for all actual usage cases, but\nchecking this is difficult and error-prone:\n\nwith store implemented in terms of swap, it's guaranteed that, when\nanother atomic operation is performed at the same time as the store,\neither the result of the store followed by the other operation, or\njust the store (clobbering the other operation's result) is seen. if\nstore were implemented in terms of cas, there are cases where this\ninvariant would fail to hold, and we would need detailed rules for the\nsituations in which the store operation is well-defined.\n"},{"hash":"ddddec106fd17c3aca3287005d21e92f742aa9d4","date":"2014-07-20T01:39:18.000Z","author":{"name":"Brent Cook","email":"busterb@gmail.com"},"message":"add issetugid function to check for elevated privilege\n\nthis function provides a way for third-party library code to use the\nsame logic that's used internally in libc for suppressing untrusted\ninput/state (e.g. the environment) when the application is running\nwith privleges elevated by the setuid or setgid bit or some other\nmechanism. its semantics are intended to match the openbsd function by\nthe same name.\n\nthere was some question as to whether this function is necessary:\ngetauxval(AT_SECURE) was proposed as an alternative. however, this has\nseveral drawbacks. the most obvious is that it asks programmers to be\naware of an implementation detail of ELF-based systems (the aux\nvector) rather than simply the semantic predicate to be checked. and\ntrying to write a safe, reliable version of issetugid in terms of\ngetauxval is difficult. for example, early versions of the glibc\ngetauxval did not report ENOENT, which could lead to false negatives\nif AT_SECURE was not present in the aux vector (this could probably\nonly happen when running on non-linux kernels under linux emulation,\nsince glibc does not support linux versions old enough to lack\nAT_SECURE). as for musl, getauxval has always properly reported\nerrors, but prior to commit 7bece9c2095ee81f14b1088f6b0ba2f37fecb283,\nthe musl implementation did not emulate AT_SECURE if missing, which\nwould result in a false positive. since musl actually does partially\nsupport kernels that lack AT_SECURE, this was problematic.\n\nthe intent is that library authors will use issetugid if its\navailability is detected at build time, and only fall back to the\nunreliable alternatives on systems that lack it.\n\npatch by Brent Cook. commit message/rationale by Rich Felker.\n"},{"hash":"f61be1f875a2758509d6e9e2cf6f1d9603b28b65","date":"2014-07-20T03:37:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips struct stat dev_t members for big endian\n\nthe mips version of this structure on the kernel side wrongly has\n32-bit type rather than 64-bit type. fortunately there is adjacent\npadding to bring it up to 64 bits, and on little-endian, this allows\nus to treat the adjacent kernel st_dev and st_pad0[0] as as single\n64-bit dev_t. however, on big endian, such treatment results in the\nupper and lower 32-bit parts of the dev_t value being swapped. for the\npurpose of just comparing st_dev values this did not break anything,\nbut it precluded actually processing the device numbers as major/minor\nvalues.\n\nsince the broken kernel behavior that needs to be worked around is\nisolated to one arch, I put the workarounds in syscall_arch.h rather\nthan adding a stat fixup path in the common code. on little endian\nmips, the added code optimizes out completely.\n\nthe changes necessary were incompatible with the way the __asm_syscall\nmacro was factored so I just removed it and flattened the individual\n__syscallN functions. this arguably makes the code easier to read and\nunderstand, anyway.\n"},{"hash":"1312930f9bdea47006a8a8c8509c0bed5cf69e85","date":"2014-07-20T16:38:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression that negated some mips syscall error returns\n\ndue to what was essentially a copy and paste error, the changes made\nin commit f61be1f875a2758509d6e9e2cf6f1d9603b28b65 caused syscalls\nwith 5 or 6 arguments (and syscalls with 2, 3, or 4 arguments when\ncompiled with clang compatibility) to negate the returned error code a\nsecond time, breaking errno reporting.\n"},{"hash":"002e8d84c5fec47636606aef5d2f16914c6097f3","date":"2014-07-20T16:42:21.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add syscall numbers for the new renameat2 syscall\n\nit's like rename but with flags eg. to allow atomic exchange of two files,\nintroduced in linux 3.15 commit 520c8b16505236fc82daa352e6c5e73cd9870cff\n"},{"hash":"4a142db74f128011e7afafd19607234243f908ff","date":"2014-07-20T16:42:21.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new ethernet packet types ETH_P_80221, ETH_P_LOOPBACK\n\nETH_P_80221 is ethertype for IEEE Std 802.21 - Media Independent Handover Protocol\nintroduced in linux 3.15 commit b62faf3cdc875a1ac5a10696cf6ea0b12bab1596\n\nETH_P_LOOPBACK is the correct packet type for loopback in IEEE 802.3*\nintroduced in linux 3.15 commit 61ccbb684421d374fdcd7cf5d6b024b06f03ce4e\n\nsome defines were shuffled to be in ascending order and match the kernel header\n"},{"hash":"6119fa32698b6e1f79564c2a30d81b179f48c156","date":"2014-07-20T16:45:43.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add pacing rate information to the tcp_info struct in tcp.h\n\nused by monitoring applications such as ss from iproute2\nintroduced in linux 3.15 commit 977cb0ecf82eb6d15562573c31edebf90db35163\n"},{"hash":"871a09c86ff3466196c3bfded84c5bbeb0b07f81","date":"2014-07-20T16:49:16.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new PR_SET_THP_DISABLE and PR_GET_THP_DISABLE prctl flags\n\nthey can be used to set or query if transparent huge pages are disabled.\nintroduced in linux 3.15 commit a0715cc22601e8830ace98366c0c2bd8da52af52\n"},{"hash":"674e28af2deaa3ef2b71af18f7a18af22467d5ef","date":"2014-07-24T07:02:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix locale environment variable logic for empty strings\n\nper POSIX (XBD 8.2) LC_*/LANG environment variables set to to the\nempty string are supposed to be treated as if they were not set at\nall.\n"},{"hash":"6cb4f91db7a5dc3bca63037ddc5f998a08dc3fb0","date":"2014-07-24T07:23:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement locale file loading and state for remaining locale categories\n\nthere is still no code which actually uses the loaded locale files, so\nthe main observable effect of this commit is that calls to setlocale\nstore and give back the names of the selected locales for the\nremaining categories (LC_TIME, LC_COLLATE, LC_MONETARY) if a locale\nfile by the requested name could be loaded.\n"},{"hash":"41421d6beb3f17aa8838f7cdaad9cd16b4c451f6","date":"2014-07-26T06:34:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement mo file string lookup for translations\n\nthe core is based on a binary search; hash table is not used. both\nnative and reverse-endian mo files are supported. all offsets read\nfrom the mapped mo file are checked against the mapping size to\nprevent the possibility of reads outside the mapping.\n\nthis commit has no observable effects since there are not yet any\ncallers to the message translation code.\n"},{"hash":"a19cd2b64aabee4ae3c80bcf4ba8da26fba560e4","date":"2014-07-26T06:42:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix nl_langinfo table for LC_TIME era-related items\n\ndue to a skipped slot and missing null terminator, the last few\nstrings were off by one or two slots from their item codes.\n"},{"hash":"0206f596d5156af560e8af10e950d3cb2f29b73d","date":"2014-07-26T08:43:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing yes/no strings to nl_langinfo\n\nthese were removed from the standard but still offered as an extension\nin langinfo.h, so nl_langinfo should support them.\n"},{"hash":"c5b8f1930512d206a7c1cf1093a4a47e1722a414","date":"2014-07-26T09:36:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for LC_TIME and LC_MESSAGES translations\n\nfor LC_MESSAGES, translation of strerror and similar literal message\nfunctions is supported. for messages in other places (particularly the\ndynamic linker) that use format strings, translation is not yet\nsupported. in order to make it possible and safe, such messages will\nneed to be refactored to separate the textual content from the format.\n\nfor LC_TIME, the day and month names and strftime-style format strings\nprovided by nl_langinfo are supported for translation. however there\nmay be limitations, as some of the original C-locale nl_langinfo\nstrings are non-unique and thus perhaps non-suitable as keys.\n\noverall, the locale support activated by this commit should not be\nseen as complete and polished but as a basis for beginning to test\nlocale functionality and implement locales.\n"},{"hash":"2068b4e8911a3a49cded44b4568f6c943a8c98f8","date":"2014-07-27T08:29:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement gettext message translation functions\n\nthis commit replaces the stub implementations with working message\ntranslation functions. translation units are factored so as to prevent\npulling in the legacy, non-library-safe functions which use a global\ntextdomain in modern code which is using the versions with an explicit\ndomain argument. bind_textdomain_codeset is also placed in its own\nfile since it should not be needed by most programs.\n\nthis implementation is still missing some features: the LANGUAGE\nenvironment variable (for multiple fallback languages) is not honored,\nand non-default plural-form rules are not supported. these issues will\nbe addressed in a later commit.\n\none notable difference from the GNU implementation is that there is no\ndefault path for loading translation files. in principle one could be\nadded, but since the documented correct usage is to call the\nbindtextdomain function, a default path is probably unnecessary.\n"},{"hash":"c394763d350f92ff1dbfb79fcd7124da47bc7043","date":"2014-07-28T01:13:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix insufficient synchronization in sh atomic asm\n\nwhile other usage I've seen only has the synco instruction after the\natomic operation, I cannot find any documentation indicating that this\nis correct. certainly all stores before the atomic need to have been\nsynchronized before the atomic operation takes place.\n"},{"hash":"90e51e45f57eb0e1564b3610b9bbd768215e5d6d","date":"2014-07-28T01:50:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up unused and inconsistent atomics in arch dirs\n\nthe a_cas_l, a_swap_l, a_swap_p, and a_store_l operations were\nprobably used a long time ago when only i386 and x86_64 were\nsupported. as other archs were added, support for them was\ninconsistent, and they are obviously not in use at present. having\nthem around potentially confuses readers working on new ports, and the\ntype-punning hacks and inconsistent use of types in their definitions\nis not a style I wish to perpetuate in the source tree, so removing\nthem seems appropriate.\n"},{"hash":"c0284b372ca26fe8ea15bb76395c8bff2c444ba9","date":"2014-07-28T01:59:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unused a_cas_l from or1k atomic.h\n\nthis follows the same logic as in the previous commit for other archs.\n"},{"hash":"73d2a3bfda462eebe8291eb788ef8be567a9add8","date":"2014-07-28T22:04:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement non-default plural rules for ngettext translations\n\nthe new code in dcngettext was written by me, and the expression\nevaluator by Szabolcs Nagy (nsz).\n"},{"hash":"6e89210669dfc93302a181a80ed440132e41f0dd","date":"2014-07-29T15:48:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"harden mo file processing for locale/translations\n\nrather than just checking that the start of the string lies within the\nmapping, also check that the nominal length remains within the\nmapping, and that the null terminator is present at the nominal\nlength. this ensures that the caller, using the result as a C string,\nwill not read past the end of the mapping.\n\nthe nominal length is never exposed to the caller, but it's useful\ninternally to find where the null terminator should be without having\nto restort to linear search via strnlen/memchr.\n"},{"hash":"e4dd0ab83cc191ba4e7d6e10328c30280d267ed9","date":"2014-07-29T16:25:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"harden dcngettext plural processing\n\nwhile the __mo_lookup backend can verify that the translated message\nends with a null terminator, is has no way to know nplurals and thus\nno way to verify that sufficiently many null terminators are present\nin the string to satisfy all plural forms. the code in dcngettext was\nalready attempting to avoid reading past the end of the mo file\nmapping, but failed to do so because the strlen call itself could\nover-read. using strnlen instead allows us to avoid the problem.\n"},{"hash":"a126188f864f439e5243d75601f179ea72a7b4e7","date":"2014-07-29T17:39:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"tweaks to plural rules evaluator\n\nconst parsing, depth accounting and failure handling was changed\na bit so the generated code is slightly smaller.\n"},{"hash":"cbb609b3db500e6aebe15762abebc4cb23563b8a","date":"2014-07-29T20:40:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix terminal control ioctl constants for sh\n\nthis commit changes the names to match the kernel names, exposing\nunder the normal names the \"old\" versions which work with a smaller\ntermios structure compatible with the userspace structure, and\nrenaming the \"new\" versions with \"2\" on the end like the kernel has.\n\nthis fixes spurious warnings \"Unsupported ioctl: cmd=0x802c542a\" from\nqemu-sh4 and should be more correct anyway, since our userspace\ntermios structure does not have meaningful information in the part\nwhich the kernel would be interpreting as speeds with the new ioctl.\n"},{"hash":"08e4052c43692a9306c5c638d70fba7f7ba08c52","date":"2014-07-30T00:57:31.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"reimplement if_nameindex and getifaddrs using netlink\n\nthe previous implementations had several deficiencies, the most severe\nof which was the inability to report unconfigured interfaces or\ninterfaces without ipv4 addresses. among the options discussed for\nfixing this, using netlink turned out to be the one with the least\ncost and most additional advantages. other improvements include:\n\nif_nameindex now avoids duplicates in the list it produces, but still\nincludes legacy-style interface aliases if any are in use.\n\ngetifaddrs now reports hardware addresses and includes the scope_id\nfor link-local ipv6 addresses in the resulting address.\n"},{"hash":"6527b03dcc029cf9edb7bf7dbaeab420092e04c9","date":"2014-07-30T19:57:30.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"plural rule evaluator rewrite for dcngettext\n\nusing an operator precedence parser the code size\nbecame smaller and it is only slower by about %10\n\nsize of old vs new pleval.o on different archs:\n(with inlined isspace added to pleval.c for now)\n\nold:\n   text    data     bss     dec     hex filename\n    828       0       0     828     33c pl.i386.o\n   1152       0       0    1152     480 pl.arm.o\n   1704       0       0    1704     6a8 pl.mips.o\n   1328       0       0    1328     530 pl.ppc.o\n    992       0       0     992     3e0 pl.x64.o\nnew:\n   text    data     bss     dec     hex filename\n    693       0       0     693     2b5 pl.i386.o\n    972       0       0     972     3cc pl.arm.o\n   1276       0       0    1276     4fc pl.mips.o\n   1087       0       0    1087     43f pl.ppc.o\n    846       0       0     846     34e pl.x64.o\n"},{"hash":"cc54f0aebad529c1abfa49d2d9e319267d57cb9f","date":"2014-07-31T03:19:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide PAGE_SIZE as a constant value of 8192 on or1k\n\naccording to Stefan Kristiansson, or1k page size is not actually\nvariable and the value of 8192 is part of the ABI.\n"},{"hash":"b5bbe797493ea732d4cac15619753c545ed392af","date":"2014-07-31T03:24:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add framework for mmap2 syscall unit to vary by arch\n"},{"hash":"4f449374320ef487191611ddaa40c0a89c475a8a","date":"2014-07-31T03:25:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken offset argument to the mmap2 syscall on or1k\n\nfor or1k, the kernel expects the offset passed to mmap2 in units of\nthe 8k page size, not the standard unit of 4k used on most other\narchs.\n"},{"hash":"38db09374a1cf4c2712c980b07b22a67a5f6bbc3","date":"2014-07-31T06:33:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"limit visibility of ffs function declaration to _XOPEN_SOURCE\n\nper the standard, ffs is XSI shaded, whereas the other functions in\nthis header are in the base.\n"},{"hash":"ecc082c61b6da9a8b2ae0c07aa3331673834d94a","date":"2014-07-31T06:38:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement ffsl and ffsll functions\n\nper the resolution of Austin Group issue #617, these are accepted for\nXSI option in POSIX future and thus I'm treating them as standard\nfunctions.\n"},{"hash":"5059deb1a5bf33632390461f3137ebd3dc902e6e","date":"2014-07-31T16:05:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"harden locale name handling and prevent slashes in LC_MESSAGES\n\nthe code which loads locale files was already rejecting locale names\ncontaining slashes. however, LC_MESSAGES records a locale name even if\nlibc does not have a matching locale file, so that gettext or\napplication code can use the recorded locale name for message\ntranslations to languages that libc does not support. this recorded\nname was not being checked for slashes, meaning that such code could\npotentially be tricked into directory traversal.\n\nin addition, since the value of a locale category is sometimes used as\na pathname component by callers, the improved code rejects any value\nbeginning with a dot. this prevents traversal to the parent directory\nvia \"..\", use of the top-level locale directory via \".\", and also\navoids \"hidden\" directories as a side effect.\n\nfinally, overly long locale names are now rejected (treated as an\nunrecognized name and thus as an alias for C.UTF-8) rather than being\ntruncated.\n"},{"hash":"4272602ad1c7069e06f410a28b1fe6e841f32a8e","date":"2014-07-31T20:06:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update COPYRIGHT file to reflect new contributors\n"},{"hash":"60276b995e6916bab7d8803b37260500a691c7ec","date":"2014-07-31T23:02:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update notice on broken gcc versions in INSTALL file\n"},{"hash":"00733dd1cf791d13ff6155509cf139a5f7b2eecb","date":"2014-07-31T23:10:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.4\n"},{"hash":"0a24be213addfb32a8fdfc880fc2649f27d0b9ce","date":"2014-08-08T04:45:10.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"make endmntent function handle null argument\n\nThe function originates from SunOS 4.x in which the null argument\nis allowed. glibc also handles this case.\n"},{"hash":"b1ae7b78bd57c60451e56c4abf738c69245b2b0e","date":"2014-08-08T04:45:42.000Z","author":{"name":"Clément Vasseur","email":"clement.vasseur@gmail.com"},"message":"make clearenv available with _BSD_SOURCE\n\nglibc declares clearenv under _BSD_SOURCE, some applications might\ndepend on it being available this way.\n"},{"hash":"dc65fddd4c793cdabcdf77b8e4b857b62026c2c8","date":"2014-08-08T04:47:59.000Z","author":{"name":"Clément Vasseur","email":"clement.vasseur@gmail.com"},"message":"fix dlerror when using dlopen with a static libc\n\nwhen the dynamic loader is disabled, dlopen fails correctly but dlerror\ndid not return a human readable error string like it should have.\n"},{"hash":"4fe57cad709fdfb377060ab2bac4b7b187956282","date":"2014-08-08T04:53:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add dlerror message for static-linked dlsym failure\n"},{"hash":"b04971d91a46d34b5e643ee2e8164171b6247216","date":"2014-08-13T14:47:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add inline isspace in ctype.h as an optimization\n\nisspace can be a bottleneck in a simple parser, inlining it\ngives slightly smaller and faster code\n\nsrc/locale/pleval.o already had this optimization, the size\nchange for other libc functions for i386 is\n\nsrc/internal/intscan.o     2134    2118   -16\nsrc/locale/dcngettext.o    1562    1552   -10\nsrc/network/res_msend.o    1961    1940   -21\nsrc/network/lookup_name.o  2627    2608   -19\nsrc/network/getnameinfo.o  1814    1811    -3\nsrc/network/lookup_serv.o   643     624   -19\nsrc/stdio/vfscanf.o        2675    2663   -12\nsrc/stdlib/atoll.o          117     107   -10\nsrc/stdlib/atoi.o            95      91    -4\nsrc/stdlib/atol.o            95      91    -4\nsrc/time/strptime.o        1515    1503   -12\n(TOTALS)                 432451  432321  -130\n"},{"hash":"d146d4dc1104aa3472daf81d2581aca65df54d13","date":"2014-08-13T14:55:56.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix CPU_EQUAL macro in sched.h\n"},{"hash":"d86af2a0803cace7b0f616f2a696fb3e25e9b628","date":"2014-08-13T15:07:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix #ifdef inside a macro argument list in __init_tls.c\n\nC99 6.10.3p11 disallows such constructs\nso use an #ifdef outside of the argument list of __syscall\n"},{"hash":"bc09d58c0432a4eca5f6a1e536679a527f971116","date":"2014-08-16T03:54:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make futex operations use private-futex mode when possible\n\nprivate-futex uses the virtual address of the futex int directly as\nthe hash key rather than requiring the kernel to resolve the address\nto an underlying backing for the mapping in which it lies. for certain\nusage patterns it improves performance significantly.\n\nin many places, the code using futex __wake and __wait operations was\nalready passing a correct fixed zero or nonzero flag for the priv\nargument, so no change was needed at the site of the call, only in the\n__wake and __wait functions themselves. in other places, especially\nwhere the process-shared attribute for a synchronization object was\nnot previously tracked, additional new code is needed. for mutexes,\nthe only place to store the flag is in the type field, so additional\nbit masking logic is needed for accessing the type.\n\nfor non-process-shared condition variable broadcasts, the futex\nrequeue operation is unable to requeue from a private futex to a\nprocess-shared one in the mutex structure, so requeue is simply\ndisabled in this case by waking all waiters.\n\nfor robust mutexes, the kernel always performs a non-private wake when\nthe owner dies. in order not to introduce a behavioral regression in\nnon-process-shared robust mutexes (when the owning thread dies), they\nare simply forced to be treated as process-shared for now, giving\ncorrect behavior at the expense of performance. this can be fixed by\nadding explicit code to pthread_exit to do the right thing for\nnon-shared robust mutexes in userspace rather than relying on the\nkernel to do it, and will be fixed in this way later.\n\nsince not all supported kernels have private futex support, the new\ncode detects EINVAL from the futex syscall and falls back to making\nthe call without the private flag. no attempt to cache the result is\nmade; caching it and using the cached value efficiently is somewhat\ndifficult, and not worth the complexity when the benefits would be\nseen only on ancient kernels which have numerous other limitations and\nbugs anyway.\n"},{"hash":"b092f1c5fa9c048e12d002c7b972df5ecbe96d1d","date":"2014-08-16T06:28:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"enable private futex for process-local robust mutexes\n\nthe kernel always uses non-private wake when walking the robust list\nwhen a thread or process exits, so it's not able to wake waiters\nlistening with the private futex flag. this problem is solved by doing\nthe equivalent in userspace as the last step of pthread_exit.\n\ncare is taken to remove mutexes from the robust list before unlocking\nthem so that the kernel will not attempt to access them again,\npossibly after another thread locks them. this removal code can treat\nthe list as singly-linked, since no further code which would add or\nremove items is able to run at this point. moreover, the pending\npointer is not needed since the mutexes being unlocked are all\nprocess-local; in the case of asynchronous process termination, they\nall cease to exist.\n\nsince a process-local robust mutex cannot come into existence without\na call to pthread_mutexattr_setrobust in the same process, the code\nfor userspace robust list processing is put in that source file, and\na weak alias to a dummy function is used to avoid pulling in this\nbloat as part of pthread_exit in static-linked programs.\n"},{"hash":"25d12fc0fc51f1fae0f85b4649a6463eb805aa8f","date":"2014-08-16T06:41:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize locking against vm changes for mmap/munmap\n\nthe whole point of this locking is to prevent munmap, or mmap with\nMAP_FIXED, from deallocating virtual addresses, or changing the\nbacking a given virtual address refers to, during certain race windows\ninvolving self-synchronized unmapping or destruction of pthread\nsynchronization objects. there is no need for exclusion in the other\ndirection, so it suffices to take the lock momentarily and release it\nbefore making the syscall, rather than holding it across the syscall.\n"},{"hash":"fffc5cda10e0c5c910b40f7be0d4fa4e15bb3f48","date":"2014-08-16T23:15:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix false ownership of mutexes due to tid reuse, using robust list\n\nper the resolution of Austin Group issue 755, the POSIX requirement\nthat ownership be enforced for recursive and error-checking mutexes\ndoes not allow a random new thread to acquire ownership of an orphaned\nmutex just because it happened to be assigned the same tid as the\noriginal owner that exited with the mutex locked.\n\none possible fix for this issue would be to disallow the kernel thread\nto terminate when it exited with mutexes held, permanently reserving\nthe tid against reuse. however, this does not solve the problem for\nprocess-shared mutexes where lifetime cannot be controlled, so it was\nnot used.\n\nthe alternate approach I've taken is to reuse the robust mutex system\nfor non-robust recursive and error-checking mutexes. when a thread\nexits, the kernel (or the new userspace robust-list code added in\ncommit b092f1c5fa9c048e12d002c7b972df5ecbe96d1d) will set the\nowner-died bit for these orphaned mutexes, but since the mutex-type is\nnot robust, pthread_mutex_trylock will not allow a new owner to\nacquire them. instead, they remain in a state of being permanently\nlocked, as desired.\n"},{"hash":"d338b506e39b1e2c68366b12be90704c635602ce","date":"2014-08-16T23:52:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix robust mutex unrecoverable status, and related clean-up\n\na robust mutex should not enter the unrecoverable status until it's\nunlocked without marking it consistent. previously, flag 8 in the type\nwas used as an indication of unrecoverable, but only honored after\nsuccessful locking; this resulted in a race window where the\nunrecoverable mutex could appear to a second thread as locked/busy\nagain while the first thread was in the process of observing it as\nunrecoverable.\n\nnow, flag 8 is used to mean that the mutex is in the process of being\nrecovered, but not yet marked consistent. the flag only takes effect\nin pthread_mutex_unlock, where it causes the value 0x40000000 (owner\ndead flag, with old owner tid 0, an otherwise impossible state) to be\nstored in the lock. subsequent lock attempts will interpret this state\nas unrecoverable.\n"},{"hash":"de7e99c58508ca70f0b1b8ef259a823a3766c434","date":"2014-08-17T04:46:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pointers used in robust list volatile\n\nwhen manipulating the robust list, the order of stores matters,\nbecause the code may be asynchronously interrupted by a fatal signal\nand the kernel will then access the robust list in what is essentially\nan async-signal context.\n\npreviously, aliasing considerations made it seem unlikely that a\ncompiler could reorder the stores, but proving that they could not be\nreordered incorrectly would have been extremely difficult. instead\nI've opted to make all the pointers used as part of the robust list,\nincluding those in the robust list head and in the individual mutexes,\nvolatile.\n\nin addition, the format of the robust list has been changed to point\nback to the head at the end, rather than ending with a null pointer.\nthis is to match the documented kernel robust list ABI. the null\npointer, which was previously used, only worked because faults during\naccess terminate the robust list processing.\n"},{"hash":"4220d298ef7a2226b14fe4b481f7f7699eab6e3f","date":"2014-08-17T06:05:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix possible failure-to-wake deadlock with robust mutexes\n\nwhen the kernel is responsible for waking waiters on a robust mutex\nwhose owner died, it does not have a waiters count available and must\nrely entirely on the waiter bit of the lock value.\n\nnormally, this bit is only set by newly arriving waiters, so it will\nbe clear if no new waiters arrived after the current owner obtained\nthe lock, even if there are other waiters present. leaving it clear is\ndesirable because it allows timed-lock operations to remove themselves\nas waiters and avoid causing unnecessary futex wake syscalls. however,\nfor process-shared robust mutexes, we need to set the bit whenever\nthere are existing waiters so that the kernel will know to wake them.\n\nfor non-process-shared robust mutexes, the wake happens in userspace\nand can look at the waiters count, so the bit does not need to be set\nin the non-process-shared case.\n"},{"hash":"37195db8ec31300a87bc7ec09d2adcf299e9203d","date":"2014-08-18T02:09:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"redesign cond var implementation to fix multiple issues\n\nthe immediate issue that was reported by Jens Gustedt and needed to be\nfixed was corruption of the cv/mutex waiter states when switching to\nusing a new mutex with the cv after all waiters were unblocked but\nbefore they finished returning from the wait function.\n\nself-synchronized destruction was also handled poorly and may have had\nrace conditions. and the use of sequence numbers for waking waiters\nadmitted a theoretical missed-wakeup if the sequence number wrapped\nthrough the full 32-bit space.\n\nthe new implementation is largely documented in the comments in the\nsource. the basic principle is to use linked lists initially attached\nto the cv object, but detachable on signal/broadcast, made up of nodes\nresiding in automatic storage (stack) on the threads that are waiting.\nthis eliminates the need for waiters to access the cv object after\nthey are signaled, and allows us to limit wakeup to one waiter at a\ntime during broadcasts even when futex requeue cannot be used.\n\nperformance is also greatly improved, roughly double some tests.\n\nbasically nothing is changed in the process-shared cond var case,\nwhere this implementation does not work, since processes do not have\naccess to one another's local storage.\n"},{"hash":"2c4b510bae1b2841e6983a5639dd600255898442","date":"2014-08-18T05:26:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify and improve new cond var implementation\n\npreviously, wake order could be unpredictable: if a waiter happened to\nleave its futex wait on the state early, e.g. due to EAGAIN while\nrestarting after a signal handler, it could acquire the mutex out of\nturn. handling this required ugly O(n) list walking in the unwait\nfunction and accounting to remove waiters that already woke from the\nlist.\n\nwith the new changes, the \"barrier\" locks in each waiter node are only\nunlocked in turn. in addition to simplifying the code, this seems to\nimprove performance slightly, probably by reducing the number of\naccesses threads make to each other's stacks.\n\nas an additional benefit, unrecoverable mutex re-locking errors\n(mainly ENOTRECOVERABLE for robust mutexes) no longer need to be\nhandled with deadlock; they can be reported to the caller, since the\nunlocking sequence makes it unnecessary to rely on the mutex to\nsynchronize access to the waiter list.\n"},{"hash":"4992ace94232a116bdca25481ccc3d6841b83432","date":"2014-08-18T18:36:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further simplify and optimize new cond var\n\nthe main idea of the changes made is to have waiters wait directly on\nthe \"barrier\" lock that was used to prevent them from making forward\nprogress too early rather than first waiting on the atomic state value\nand then attempting to lock the barrier.\n\nin addition, adjustments to the mutex waiter count are optimized.\npreviously, each waking waiter decremented the count (unless it was\nthe first) then immediately incremented it again for the next waiter\n(unless it was the last). this was a roundabout was of achieving the\nequivalent of incrementing it once for the first waiter and\ndecrementing it once for the last.\n"},{"hash":"321f4fa9067185aa6bb47403dfba46e8cfe917d3","date":"2014-08-20T21:20:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add max_align_t definition for C11 and C++11\n\nunfortunately this needs to be able to vary by arch, because of a huge\nmess GCC made: the GCC definition, which became the ABI, depends on\nquirks in GCC's definition of __alignof__, which does not match the\nformal alignment of the type.\n\nGCC's __alignof__ unexpectedly exposes the an implementation detail,\nits \"preferred alignment\" for the type, rather than the formal/ABI\nalignment of the type, which it only actually uses in structures. on\nmost archs the two values are the same, but on some (at least i386)\nthe preferred alignment is greater than the ABI alignment.\n\nI considered using _Alignas(8) unconditionally, but on at least one\narch (or1k), the alignment of max_align_t with GCC's definition is\nonly 4 (even the \"preferred alignment\" for these types is only 4).\n"},{"hash":"a6293285e930dbdb0eff47e29b513ca22537b1a2","date":"2014-08-22T18:05:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix use of uninitialized memory with application-provided thread stacks\n\nthe subsequent code in pthread_create and the code which copies TLS\ninitialization images to the new thread's TLS space assume that the\nmemory provided to them is zero-initialized, which is true when it's\nobtained by pthread_create using mmap. however, when the caller\nprovides a stack using pthread_attr_setstack, pthread_create cannot\nmake any assumptions about the contents. simply zero-filling the\nrelevant memory in this case is the simplest and safest fix.\n"},{"hash":"b8ca9eb5301580dcf101753451eee196edceefbd","date":"2014-08-23T03:49:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fallback checks for kernels without private futex support\n\nfor unknown syscall commands, the kernel produces ENOSYS, not EINVAL.\n"},{"hash":"5345c9b884e7c4e73eb2c8bb83b8d0df20f95afb","date":"2014-08-24T03:35:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix false ownership of stdio FILEs due to tid reuse\n\nthis is analogous commit fffc5cda10e0c5c910b40f7be0d4fa4e15bb3f48\nwhich fixed the corresponding issue for mutexes.\n\nthe robust list can't be used here because the locks do not share a\ncommon layout with mutexes. at some point it may make sense to simply\nincorporate a mutex object into the FILE structure and use it, but\nthat would be a much more invasive change, and it doesn't mesh well\nwith the current design that uses a simpler code path for internal\nlocking and pulls in the recursive-mutex-like code when the flockfile\nAPI is used explicitly.\n"},{"hash":"ea818ea8340c13742a4f41e6077f732291aea4bc","date":"2014-08-25T19:43:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add working a_spin() atomic for non-x86 targets\n\nconceptually, a_spin needs to be at least a compiler barrier, so the\ncompiler will not optimize out loops (and the load on each iteration)\nwhile spinning. it should also be a memory barrier, or the spinning\nthread might keep spinning without noticing stores from other threads,\nthus delaying for longer than it should.\n\nideally, an optimal a_spin implementation that avoids unnecessary\ncache/memory contention should be chosen for each arch, but for now,\nthe easiest thing is to perform a useless a_cas on the calling\nthread's stack.\n"},{"hash":"b8a9c90e4fe29821f2ef40796c07c48bd8fac8cc","date":"2014-08-25T19:58:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"sanitize number of spins in userspace before futex wait\n\nthe previous spin limit of 10000 was utterly unreasonable.\nempirically, it could consume up to 200000 cycles, whereas a failed\nfutex wait (EAGAIN) typically takes 1000 cycles or less, and even a\ntrue wait/wake round seems much less expensive.\n\nthe new counts (100 for general wait, 200 in barrier) were simply\nchosen to be in the range of what's reasonable without having adverse\neffects on casual micro-benchmark tests I have been running. they may\nstill be too high, from a standpoint of not wasting cpu cycles, but at\nleast they're a lot better than before. rigorous testing across\ndifferent archs and cpu models should be performed at some point to\ndetermine whether further adjustments should be made.\n"},{"hash":"8b3d7d0d35f97051bc994800c928a7db53316dd2","date":"2014-08-25T20:37:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build error on arm due to new a_spin code\n\nthis was broken by commit ea818ea8340c13742a4f41e6077f732291aea4bc.\n"},{"hash":"2ff714c6138da8abb50fd532503fd8d68a18811a","date":"2014-08-25T20:38:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"spin in sem_[timed]wait before performing futex wait\n\nempirically, this increases the maximum rate of wait/post operations\nbetween two threads by 20-150 times on machines I tested, including\nx86 and arm. conceptually, it makes sense to do some spinning because\nsemaphores are intended to be usable as a notification mechanism\nbetween threads, not just as locks, and low-latency notification is a\nvaluable property to have.\n"},{"hash":"97a7512b6819014d15c679c8998caa0006d13c29","date":"2014-08-26T00:16:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"spin before waiting on futex in mutex and rwlock lock operations\n"},{"hash":"f5fb20b0e934770c37093105524ea644dcaba5e2","date":"2014-08-26T00:24:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refrain from spinning on locks when there is already a waiter\n\nif there is already a waiter for a lock, spinning on the lock is\nessentially an attempt to steal it from whichever waiter would obtain\nit via any priority rules in place, and is therefore undesirable. in\nthe current implementation, there is always an inherent race window at\nunlock during which a newly-arriving thread may steal the lock from\nthe existing waiters, but we should aim to keep this window minimal\nrather than enlarging it.\n"},{"hash":"8d998a7b3b741304df860b5dc843826257633237","date":"2014-08-26T02:47:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add malloc_usable_size function and non-stub malloc.h\n\nthis function is needed for some important practical applications of\nABI compatibility, and may be useful for supporting some non-portable\nsoftware at the source level too.\n\nI was hesitant to add a function which imposes any constraints on\nmalloc internals; however, it turns out that any malloc implementation\nwhich has realloc must already have an efficient way to determine the\nsize of existing allocations, so no additional constraint is imposed.\n\nfor now, some internal malloc definitions are duplicated in the new\nsource file. if/when malloc is refactored to put them in a shared\ninternal header file, these could be removed.\n\nsince malloc_usable_size is conventionally declared in malloc.h, the\nempty stub version of this file was no longer suitable. it's updated\nto provide the standard allocator functions, nonstandard ones (even if\nstdlib.h would not expose them based on the feature test macros in\neffect), and any malloc-extension functions provided (currently, only\nmalloc_usable_size).\n"},{"hash":"18dde0071334e2e7f71972b80df7779280c801cf","date":"2014-08-27T06:54:01.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add C11 floating-point characteristic macros to float.h\n\nC11 introduced *_DECIMAL_DIG and *_HAS_SUBNORM macros.\n"},{"hash":"70729de075bfe3138b05af91ecefcd5786bed5ac","date":"2014-08-27T06:55:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add static_assert and hide noreturn, alignas, alignof from C++\n\nadd static_assert and protect the other new C11 keyword macros\nwith #ifndef __cplusplus so they don't conflict with C++ keywords.\n"},{"hash":"49d2c8c6bcf8c926e52c7f510033b6adc31355f5","date":"2014-09-05T00:13:10.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix dn_expand empty name handling and offsets to 0\n\nEmpty name was rejected in dn_expand since commit\n56b57f37a46dab432247bf29d96fcb11fbd02a6d\nwhich is a regression as reported by Natanael Copa.\n\nFurthermore if an offset pointer in a compressed name\npointed to a terminating 0 byte (instead of a label)\nthe returned name was not null terminated.\n"},{"hash":"402611c3ba3be5b3b0486835d98e22ac7ced2722","date":"2014-09-05T01:37:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress null termination when fgets reads EOF with no data\n\nthe C standard requires that \"the contents of the array remain\nunchanged\" in this case.\n\nthis patch also changes the behavior on read errors, but in that case\n\"the array contents are indeterminate\", so the application cannot\ninspect them anyway.\n"},{"hash":"6e2bb7acf42589fb7130b039d0623e2ca42503dd","date":"2014-09-05T02:21:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix multiple stdio functions' behavior on zero-length operations\n\npreviously, fgets, fputs, fread, and fwrite completely omitted locking\nand access to the FILE object when their arguments yielded a zero\nlength read or write operation independent of the FILE state. this\noptimization was invalid; it wrongly skipped marking the stream as\nbyte-oriented (a C conformance bug) and exposed observably missing\nsynchronization (a POSIX conformance bug) where one of these functions\ncould wrongly complete despite another thread provably holding the\nlock.\n"},{"hash":"80e6485455a9c75c029d0e976d2dd9c8e441dd72","date":"2014-09-05T06:50:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove an extra layer of buffer copying in getnameinfo reverse dns\n\nthe outer getnameinfo function already has a properly-sized temporary\nbuffer for storing the reverse dns (ptr) result. there is no reason\nfor the callback to use a secondary buffer and copy it on success, and\ndoing so potentially expanded the impact of the dn_expand bug that was\nfixed in commit 49d2c8c6bcf8c926e52c7f510033b6adc31355f5.\n\nthis change reduces the code size by a small amount, and also reduces\nthe run-time stack space requirements by about 256 bytes.\n"},{"hash":"fff546930347d99729f1c0a9d911e7f24a094531","date":"2014-09-05T07:22:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make non-waiting paths of sem_[timed]wait and pthread_join cancelable\n\nper POSIX these functions are both cancellation points, so they must\nact on any cancellation request which is pending prior to the call.\npreviously, only the code path where actual waiting took place could\nact on cancellation.\n"},{"hash":"4674809bdf7a46041ac0152eea0a6363ceeca548","date":"2014-09-05T07:28:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix case mapping for U+00DF (ß)\n\nU+00DF ('ß') has had an uppercase form (U+1E9E) available since\nUnicode 5.1, but Unicode lacks the case mappings for it due to\nstability policy. when I added support for the new character in commit\n1a63a9fc30e7a1f1239e3cedcb5041e5ec1c5351, I omitted the mapping in the\nlowercase-to-uppercase direction. this choice was not based on any\nactual information, only assumptions.\n\nthis commit adds bidirectional case mappings between U+00DF and\nU+1E9E, and removes the special-case hack that allowed U+00DF to be\nidentified as lowecase despite lacking a mapping. aside from strong\nevidence that this is the \"right\" behavior for real-world usage of\nthese characters, several factors informed this decision:\n\n- the other \"potentially correct\" mapping, to \"SS\", is not\n  representable in the C case-mapping system anyway.\n\n- leaving one letter in lowercase form when transforming a string to\n  uppercase is obviously wrong.\n\n- having a character which is nominally lowercase but which is fixed\n  under case mapping violates reasonable invariants.\n"},{"hash":"4ec2d25a6aba30781640b84160002ed3e7fee051","date":"2014-09-05T17:49:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove incorrect and useless check in network service name lookup code\n\nthe condition was probably intended to be !*p rather than !p, but\nneither is needed here. the subsequent code naturally handles the case\nwhere it's already at end of string.\n"},{"hash":"633183b5d1c298e4335da841926efe96252057b3","date":"2014-09-05T17:52:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix potential read past end of buffer in getnameinfo service name lookup\n\nif the loop stopped due to reaching the end of the string, the\nsubsequent increment could possibly move the position one past the end\nof the buffer. no further writes happen, the reads cannot fault anyway\nunless the stack completely lacks any zero bytes, and reading junk\nshould not yield an incorrect result from the function either.\nnonetheless the code was wrong and needs to be fixed.\n"},{"hash":"3bed89aa7456d9fe30e550cb5e21f8911036695b","date":"2014-09-05T18:01:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix off-by-one in bounds check in fpathconf\n\nthis error resulted in an out-of-bounds read, as opposed to a reported\nerror, when calling the function with an argument one greater than the\nmax valid index.\n"},{"hash":"546f6b322bcafa2452925c19f9607d9689c75f95","date":"2014-09-05T19:12:34.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix memory leak in regexec when input contains illegal sequence\n"},{"hash":"36c30c4ddd92ec3a058d54aac31a5734be6380f8","date":"2014-09-05T20:02:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing legacy LFS *64 symbol aliases\n\nversionsort64, aio*64 and lio*64 symbols were missing, they are\nonly needed for glibc ABI compatibility, on the source level\ndirent.h and aio.h already redirect them.\n"},{"hash":"7ff804269bb0594431308ad328239aeeb5ceb057","date":"2014-09-05T20:03:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix macros for LFS *64_t types in sys/stat.h, sys/types.h, glob.h\n\nthere is no blksize64_t (blksize_t is always long) but there are\nfsblkcnt64_t and fsfilcnt64_t types in sys/stat.h and sys/types.h.\nand glob.h missed glob64_t.\n"},{"hash":"86876dbec55d9416859bbbbc9850b1ec81b6dbea","date":"2014-09-06T12:40:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix non-static dummy function that slipped in with locale implementation\n"},{"hash":"6eb19505bc10eb7964c4863e53ef1028944044f2","date":"2014-09-06T16:58:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add C11 timespec_get function, with associated time.h changes for C11\n\nbased on patch by Jens Gustedt for inclusion with C11 threads\nimplementation, but committed separately since it's independent of\nthreads.\n"},{"hash":"df7d0dfb9c686df31149d09008ba92834bed9803","date":"2014-09-06T22:11:24.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"use weak symbols for the POSIX functions that will be used by C threads\n\nThe intent of this is to avoid name space pollution of the C threads\nimplementation.\n\nThis has two sides to it. First we have to provide symbols that wouldn't\npollute the name space for the C threads implementation. Second we have\nto clean up some internal uses of POSIX functions such that they don't\nimplicitly drag in such symbols.\n"},{"hash":"b7cf71a190813590860af25b32532b6c360ac502","date":"2014-09-07T00:44:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add threads.h and needed per-arch types for mtx_t and cnd_t\n\nbased on patch by Jens Gustedt.\n\nmtx_t and cnd_t are defined in such a way that they are formally\n\"compatible types\" with pthread_mutex_t and pthread_cond_t,\nrespectively, when accessed from a different translation unit. this\nmakes it possible to implement the C11 functions using the pthread\nfunctions (which will dereference them with the pthread types) without\nhaving to use the same types, which would necessitate either namespace\nviolations (exposing pthread type names in threads.h) or incompatible\nchanges to the C++ name mangling ABI for the pthread types.\n\nfor the rest of the types, things are much simpler; using identical\ntypes is possible without any namespace considerations.\n"},{"hash":"e16f70f45210294321a88f23c85ac45046577adc","date":"2014-09-07T01:38:04.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"add C11 thread functions operating on tss_t and once_flag\n\nThese all have POSIX equivalents, but aside from tss_get, they all\nhave minor changes to the signature or return value and thus need to\nexist as separate functions.\n"},{"hash":"8b0472932c1cb8cb2cc46322b21c0c4e21848522","date":"2014-09-07T02:07:22.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"add C11 mutex functions\n"},{"hash":"14397cec2c8429b504b17aaf92509b48da3681b9","date":"2014-09-07T02:27:45.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"add C11 condition variable functions\n\nBecause of the clear separation for private pthread_cond_t these\ninterfaces are quite simple and direct.\n"},{"hash":"23614b0fcb4cd4d7b2e4148d3b1887b642169765","date":"2014-09-07T14:28:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add C11 thread creation and related thread functions\n\nbased on patch by Jens Gustedt.\n\nthe main difficulty here is handling the difference between start\nfunction signatures and thread return types for C11 threads versus\nPOSIX threads. pointers to void are assumed to be able to represent\nfaithfully all values of int. the function pointer for the thread\nstart function is cast to an incorrect type for passing through\npthread_create, but is cast back to its correct type before calling so\nthat the behavior of the call is well-defined.\n\nchanges to the existing threads implementation were kept minimal to\nreduce the risk of regressions, and duplication of code that carries\nimplementation-specific assumptions was avoided for ease and safety of\nfuture maintenance.\n"},{"hash":"976bb28fa0f5b6d82055502c27444ac5c9bf34ed","date":"2014-09-08T13:35:26.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new F_OFD_* macros to fcntl.h (open file description locks)\n\nopen file description locks are inherited across fork and only auto\ndropped after the last fd of the file description is closed, they can be\nused to synchronize between threads that open separate file descriptions\nfor the same file.\n\nnew in linux 3.15 commit 0d3f7a2dd2f5cf9642982515e020c1aee2cf7af6\n"},{"hash":"0c32c2635eedfcd6af3606735ac38197f8705734","date":"2014-09-08T13:51:42.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"prune math code on archs with binary64 long double\n\n__polevll, __p1evll and exp10l were provided on archs when long double\nis the same as double. The first two were completely unused and exp10l\ncan be a wrapper around exp10.\n"},{"hash":"e6403887ccf172974d2da5304c3e4043ebad41d2","date":"2014-09-08T14:24:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix exp10l.c to include float.h\n\nthe previous commit was a no op in exp10l because LDBL_* macros\nwere implicitly 0 (the preprocessor does not warn about undefined\nsymbols).\n"},{"hash":"ab8f6a6e42ff893041f7545a23e6d6a0edde07fb","date":"2014-09-10T16:27:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix places where _BSD_SOURCE failed to yield a superset of _XOPEN_SOURCE\n\nthe vast majority of these failures seem to have been oversights at\nthe time _BSD_SOURCE was added, or perhaps shortly afterward. the one\nwhich may have had some reason behind it is omission of setpgrp from\nthe _BSD_SOURCE feature profile, since the standard setpgrp interface\nconflicts with a legacy (pre-POSIX) BSD interface by the same name.\nhowever, such omission is not aligned with our general policy in this\narea (for example, handling of similar _GNU_SOURCE cases) and should\nnot be preserved.\n"},{"hash":"f929493c49bbb304832b27e1e2b919aa19ddf470","date":"2014-09-10T16:40:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix _ALL_SOURCE logic to avoid possible redefinition of _GNU_SOURCE\n\nthis could be an error if _GNU_SOURCE was already defined differently\nby the application.\n"},{"hash":"5edbc6fe13e1e0f27e3d3a20f2582da476f74c4b","date":"2014-09-10T16:47:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _DEFAULT_SOURCE feature profile as an alias for _BSD_SOURCE\n\nas a result of commit ab8f6a6e42ff893041f7545a23e6d6a0edde07fb, this\ndefinition is now equivalent to the actual \"default profile\" which\nappears immediately below in features.h, and which defines both\n_BSD_SOURCE and _XOPEN_SOURCE.\n\nthe intent of providing a _DEFAULT_SOURCE, which glibc also now\nprovides, is to give applications a way to \"get back\" the default\nfeature profile when it was lost either by compiler flags that inhibit\nit (such as -std=c99) or by library-provided predefined macros (such\nas -D_POSIX_C_SOURCE=200809L) which may inhibit exposure of features\nthat were otherwise visible by default and which the application may\nneed. without _DEFAULT_SOURCE, the application had encode knowledge of\na particular libc's defaults, and such knowledge was fragile and\nsubject to bitrot.\n\neventually the names _GNU_SOURCE and _BSD_SOURCE should be phased out\nin favor of the more-descriptive and more-accurate _ALL_SOURCE and\n_DEFAULT_SOURCE, leaving the old names as aliases but using the new\nones internally. however this is a more invasive change that would\nrequire extensive regression testing, so it is deferred.\n"},{"hash":"bd082916b110c0c49e71bc83ff68dfd88bb8313a","date":"2014-09-11T14:16:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix C++ incompatibility in i386 definition of max_align_t\n\nthe C11 _Alignas keyword is not present in C++, and despite it being\nin the reserved namespace and thus reasonable to support even in\nnon-C11 modes, compilers seem to fail to support it.\n"},{"hash":"ec1aed0a144b3e00e16eeb142c9d13362d6048e7","date":"2014-09-12T22:20:55.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"rewrite the regex pattern parser in regcomp\n\nThe new code is a bit simpler and the generated code is about 1KB\nsmaller (on i386). The basic design was kept including internal\ninterfaces, TNFA generation was not touched.\n\nThe old tre parser had various issues:\n\n[^aa-z]\nnegated overlapping ranges in a bracket expression were handled\nincorrectly (eg [^aa-z] was handled as [^a] instead of [^a-z])\n\na{,2}\nmissing lower bound in a counted repetition should be an error,\nbut it was accepted with broken semantics: a{,2} was treated as\na{0,3}, the new parser rejects it\n\na{999,}\nlarge min count was not rejected (a{5000,} failed with REG_ESPACE\ndue to reaching a stack limit), the new parser enforces the\nRE_DUP_MAX limit\n\n\\xff\nregcomp used to accept a pattern with illegal sequences in it\n(treated them as empty expression so p\\xffq matched pq) the new\nparser rejects such patterns with REG_BADPAT or REG_ERANGE\n\n[^b-fD-H] with REG_ICASE\nold parser turned this into [^b-fB-F] because of the negated\noverlapping range issue (see above), the new parser treats it\nas [^b-hB-H], POSIX seems to require [^d-fD-F], but practical\nimplementations do case-folding first and negate the character\nset later instead of the other way around. (Supporting the posix\nway efficiently would require significant changes so it was left\nas is, it is unclear if any application actually expects the\nposix behaviour, this issue is raised on the austingroup tracker:\nhttp://austingroupbugs.net/view.php?id=872 ).\n\nanother case-insensitive matching issue is that unicode case\nfolding rules can group more than two characters together while\ntowupper and towlower can only work for a pair of upper and\nlower case characters, this is a limitation of POSIX so it is\nnot fixed.\n\ninvalid bracket and brace expressions may return different error\ncodes now (REG_ERANGE instead of REG_EBRACK or REG_BADBR instead\nof REG_EBRACE) otherwise the new parser should be compatible with\nthe old one.\n\nregcomp should be able to handle arbitrary pattern input if the\npattern length is limited, the only exception is the use of large\nrepetition counts (eg. (a{255}){255}) which require exp amount\nof memory and there is no easy workaround.\n"},{"hash":"e2e1bb81485a37321d928a8d8b63f40b9d8fa228","date":"2014-09-16T20:08:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overflow corner case in strtoul-family functions\n\nincorrect behavior occurred only in cases where the input overflows\nunsigned long long, not just the (possibly lower) range limit for the\nresult type. in this case, processing of the '-' sign character was\nnot suppressed, and the function returned a value of 1 despite setting\nerrno to ERANGE.\n"},{"hash":"18daae313531ed597d0f6227d15af00b04b104c8","date":"2014-09-18T15:52:50.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix exp10 not to raise invalid exception on NaN\n\nThis was not caught earlier because gcc incorrectly generates quiet\nrelational operators that never raise exceptions.\n"},{"hash":"3e936ce81bbbcc968f576aedbd5203621839f152","date":"2014-09-19T16:28:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix linked list corruption in flockfile lists\n\ncommit 5345c9b884e7c4e73eb2c8bb83b8d0df20f95afb added a linked list to\ntrack the FILE streams currently locked (via flockfile) by a thread.\ndue to a failure to fully link newly added members, removal from the\nlist could leave behind references which could later result in writes\nto already-freed memory and possibly other memory corruption.\n\nimplicit stdio locking was unaffected; the list is only used in\nconjunction with explicit flockfile locking.\n\nthis bug was not present in any releases; it was introduced and fixed\nduring the same release cycle.\n\npatch by Timo Teräs, who discovered and tracked down the bug.\n"},{"hash":"05cef96d9e63a00b319f88343cf9869c8e612843","date":"2014-09-22T21:55:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect sequence generation in *rand48 prng functions\n\npatch by Jens Gustedt. this fixes a bug reported by Nadav Har'El. the\nunderlying issue was that a left-shift by 16 bits after promotion of\nunsigned short to int caused integer overflow. while some compilers\ndefine this overflow case as \"shifting into the sign bit\", doing so\ndoesn't help; the sign bit then gets extended through the upper bits\nin subsequent arithmetic as unsigned long long. this patch imposes a\npromotion to unsigned prior to the shift, so that the result is\nwell-defined and matches the specified behavior.\n"},{"hash":"dccbf4c809efc311aa37da71de70d04dfd8b0db3","date":"2014-10-04T15:14:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of odd lengths in swab function\n\nthis function is specified to leave the last byte with \"unspecified\ndisposition\" when the length is odd, so for the most part correct\nprograms should not be calling swab with odd lengths. however, doing\nso is permitted, and should not write past the end of the destination\nbuffer.\n"},{"hash":"6f1c1fe90c5b23ddf1ee8cce0ee7d77d392301a7","date":"2014-10-07T03:13:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ignore access mode bits of flags in mkostemps and functions that use it\n\nper the text accepted for inclusion in POSIX, behavior is unspecified\nwhen any of the access mode bits are set. since it's impossible to\nconsistently report this usage error (O_RDONLY could not be detected\nsince its value happens to be zero), the most consistent way to handle\nthem is just to ignore them.\n\npreviously, if a caller erroneously passed O_WRONLY, the resulting\naccess mode would be O_WRONLY|O_RDWR, which has the value 3, and this\nresulted in a file descriptor which rejects both read and write\nattempts when it is subsequently used.\n"},{"hash":"0539e6dad39c1b3b204a14c403da68b587b1b3da","date":"2014-10-08T14:17:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always provide __fpclassifyl and __signbitl definitions\n\npreviously the external definitions of these functions were omitted on\narchs where long double is the same as double, since the code paths in\nthe math.h macros which would call them are unreachable. however, even\nif they are unreachable, the definitions are still mandatory. omitting\nthem is invalid C, and in the case of a non-optimizing compiler, will\nresult in a link error.\n"},{"hash":"4ffc39c65448b04685946dffa68745cf0f6bf9f7","date":"2014-10-08T14:25:04.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new syscall numbers for seccomp, getrandom, memfd_create\n\nthese syscalls are new in linux v3.17 and present on all supported\narchs except sh.\n\nseccomp was added in commit 48dc92b9fc3926844257316e75ba11eb5c742b2c\nit has operation, flags and pointer arguments (if flags==0 then it is\nthe same as prctl(PR_SET_SECCOMP,...)), the uapi header for flag\ndefinitions is linux/seccomp.h\n\ngetrandom was added in commit c6e9d6f38894798696f23c8084ca7edbf16ee895\nit provides an entropy source when open(\"/dev/urandom\",..) would fail,\nthe uapi header for flags is linux/random.h\n\nmemfd_create was added in commit 9183df25fe7b194563db3fec6dc3202a5855839c\nit allows anon mmap to have an fd, that can be shared, sealed and needs no\nmount point, the uapi header for flags is linux/memfd.h\n"},{"hash":"a0c90b9773bd9b5b6faa7a657e22794c1e643989","date":"2014-10-08T15:38:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new IPV6_AUTOFLOWLABEL socket option in netinet/in.h\n\nadded in linux v3.17 commit 753a2ad54ef45e3417a9d49537c2b42b04a2e1be\nenables automatic flow label generation on transmit\n"},{"hash":"a3763d64e0d65ed1902b36c521c57cd252b9c3be","date":"2014-10-08T15:39:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new linux file sealing api to fcntl.h\n\nnew in linux v3.17 commit 40e041a2c858b3caefc757e26cb85bfceae5062b\nsealing allows some operations to be blocked on a file which makes\nfile access safer when fds are shared between processes (only\nsupported for shared mem fds currently)\n\nflags:\nF_SEAL_SEAL prevents further sealing\nF_SEAL_SHRINK prevents file from shrinking\nF_SEAL_GROW prevents file from growing\nF_SEAL_WRITE prevents writes\n\nfcntl commands:\nF_GET_SEALS get the current seal flags\nF_ADD_SEALS add new seal flags\n"},{"hash":"08b996d180323775d5457944eefbb8a51ea72539","date":"2014-10-10T03:44:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of negative offsets in timezone spec strings\n\npreviously, the hours were considered as a signed quantity while\nminutes and seconds were always treated as positive offsets. however,\nsemantically the '-' sign should negate the whole hh:mm:ss offset.\nthis bug only affected timezones east of GMT with non-whole-hours\noffsets, such as those used in India and Nepal.\n"},{"hash":"867b1822f30a76cb9c8342da29eb28ed75908fa9","date":"2014-10-10T22:17:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add explicit barrier operation to internal atomic.h API\n"},{"hash":"df37d3960abec482e17fad2274a99b790f6cc08b","date":"2014-10-10T22:21:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing barrier in pthread_once/call_once shortcut path\n\nthese functions need to be fast when the init routine has already run,\nsince they may be called very often from code which depends on global\ninitialization having taken place. as such, a fast path bypassing\natomic cas on the once control object was used to avoid heavy memory\ncontention. however, on archs with weakly ordered memory, the fast\npath failed to ensure that the caller actually observes the side\neffects of the init routine.\n\npreliminary performance testing showed that simply removing the fast\npath was not practical; a performance drop of roughly 85x was observed\nwith 20 threads hammering the same once control on a 24-core machine.\nso the new explicit barrier operation from atomic.h is used to retain\nthe fast path while ensuring memory visibility.\n\nperformance may be reduced on some archs where the barrier actually\nmakes a difference, but the previous behavior was unsafe and incorrect\non these archs. future improvements to the implementation of a_barrier\nshould reduce the impact.\n"},{"hash":"00548408398ced546c540dab773ea66cea4fe1c2","date":"2014-10-13T22:26:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate global waiters count in pthread_once\n"},{"hash":"ab9672ae73248f51e30f4553c4b8878525e46383","date":"2014-10-14T00:59:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement uchar.h (C11 UTF-16/32 conversion) interfaces\n"},{"hash":"a60457c84a4b59ab564d7f4abb660a70283ba98d","date":"2014-10-14T16:30:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress macro definitions of ctype functions under C++\n\nbased on patch by Sergey Dmitrouk.\n"},{"hash":"60a4783ed4bd0496f7eb31f9b7eb2ad10df46677","date":"2014-10-14T17:32:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.5\n"},{"hash":"dc95322e18615392eea69de355edd735a15a8f36","date":"2014-10-20T04:22:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"manually \"shrink wrap\" fast path in pthread_once\n\nthis change is a workaround for the inability of current compilers to\nperform \"shrink wrapping\" optimizations. in casual testing, it roughly\ndoubled the performance of pthread_once when called on an\nalready-finished once control object.\n"},{"hash":"9d836ea7a69a6441fcdca815328d274e4ed6b707","date":"2014-10-31T00:03:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of open to read variadic mode argument for O_TMPFILE\n"},{"hash":"2da3ab1382ca8e39eb1e4428103764a81fba73d3","date":"2014-10-31T00:11:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix invalid access by openat to possibly-missing variadic mode argument\n\nthe mode argument is only required to be present when the O_CREAT or\nO_TMPFILE flag is used.\n"},{"hash":"79ca86094d70f43252b683c3a3ccb572d462cf28","date":"2014-10-31T15:35:40.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix rint.c and rintf.c when FLT_EVAL_METHOD!=0\n\nThe old code used the rounding idiom incorrectly:\n\n  y = (double)(x + 0x1p52) - 0x1p52;\n\nthe cast is useless if FLT_EVAL_METHOD==0 and causes a second rounding\nif FLT_EVAL_METHOD==2 which can give incorrect result in nearest rounding\nmode, so the correct idiom is to add/sub a power-of-2 according to the\ncharacteristics of double_t.\n\nThis did not cause actual bug because only i386 is affected where rint\nis implemented in asm.\n\nOther rounding functions use a similar idiom, but they give correct\nresults because they only rely on getting a neighboring integer result\nand the rounding direction is fixed up separately independently of the\ncurrent rounding mode. However they should be fixed to use the idiom\ncorrectly too.\n"},{"hash":"0ce946cf808274c2d6e5419b139e130c8ad4bd30","date":"2014-10-31T15:35:40.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use the rounding idiom consistently\n\nthe idiomatic rounding of x is\n\n  n = x + toint - toint;\n\nwhere toint is either 1/EPSILON (x is non-negative) or 1.5/EPSILON\n(x may be negative and nearest rounding mode is assumed) and EPSILON is\naccording to the evaluation precision (the type of toint is not very\nimportant, because single precision float can represent the 1/EPSILON of\nieee binary128).\n\nin case of FLT_EVAL_METHOD!=0 this avoids a useless store to double or\nfloat precision, and the long double code became cleaner with\n1/LDBL_EPSILON instead of ifdefs for toint.\n\n__rem_pio2f and __rem_pio2 functions slightly changed semantics:\non i386 a double-rounding is avoided so close to half-way cases may\nget evaluated differently eg. as sin(pi/4-eps) instead of cos(pi/4+eps)\n"},{"hash":"e146e6035fecea080fb17450db3c8bb44d36e07d","date":"2014-10-31T19:35:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized mode variable in openat function\n\nthis was introduced in commit 2da3ab1382ca8e39eb1e4428103764a81fba73d3\nas an oversight while making the variadic argument access conditional.\n"},{"hash":"de2b9c21d94e0b76b629fec0060d043f535eef01","date":"2014-11-05T05:38:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix 64-bit syscall argument passing on or1k\n\nthe kernel syscall interface for or1k does not expect 64-bit arguments\nto be aligned to \"even\" register boundaries. this incorrect alignment\nbroke truncate/ftruncate and as well as a few less-common syscalls.\n"},{"hash":"a732e80d33b4fd6f510f7cec4f5573ef5d89bc4e","date":"2014-11-05T20:40:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix x86_64 and x32 asm not to use sahf instruction\n\nSome early x86_64 cpus (released before 2006) did not support sahf/lahf\ninstructions so they should be avoided (intel manual says they are only\nsupported if CPUID.80000001H:ECX.LAHF-SAHF[bit 0] = 1).\n\nThe workaround simplifies exp2l and expm1l because fucomip can be\nused instead of the fucomp;fnstsw;sahf sequence copied from i386.\n\nIn fmodl and remainderl sahf is replaced by a simple bit test.\n"},{"hash":"ec4318943a26d4bd4050481d11709853184f2794","date":"2014-11-05T21:13:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: use fnstsw consistently instead of fstsw in x87 asm\n\nfnstsw does not wait for pending unmasked x87 floating-point exceptions\nand it is the same as fstsw when all exceptions are masked which is the\nonly environment libc supports.\n"},{"hash":"b91cdbe2bc8b626aa04dc6e3e84345accf34e4b1","date":"2014-11-15T17:16:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix behavior of printf with alt-form octal, zero precision, zero value\n\nin this case there are two conflicting rules in play: that an explicit\nprecision of zero with the value zero produces no output, and that the\n'#' modifier for octal increases the precision sufficiently to yield a\nleading zero. ISO C (7.19.6.1 paragraph 6 in C99+TC3) includes a\nparenthetical remark to clarify that the precision-increasing behavior\ntakes precedence, but the corresponding text in POSIX off of which I\nbased the implementation is missing this remark.\n\nthis issue was covered in WG14 DR#151.\n"},{"hash":"941644e98c3d05761b4639a8ae5afacd8586d1b9","date":"2014-11-15T20:08:03.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"implement a private state for the uchar.h functions\n\nThe C standard is imperative on that:\n\n  7.28.1 ... If ps is a null pointer, each function uses its own internal\n  mbstate_t object instead, which is initialized at program startup to\n  the initial conversion state;\n\nand these functions are also not supposed to implicitly use the state of\nthe wchar.h functions:\n\n  7.29.6.3 ... The implementation behaves as if no library function calls\n  these functions with a null pointer for ps.\n\nPreviously this resulted in two bugs.\n\n - The functions c16rtomb and mbrtoc16 would crash when called with ps\n   set to null.\n\n - The function mbrtoc32 used the private state of mbrtowc, which it\n   is not allowed to do.\n"},{"hash":"acccc93e084641861ca553317edb7da7791833b5","date":"2014-11-16T04:44:53.000Z","author":{"name":"Felix Fietkau","email":"nbd@openwrt.org"},"message":"getopt: fix optional argument processing\n\nProcessing an option character with optional argument fails if the\noption is last on the command line. This happens because the\nif (optind >= argc) check runs first before testing for optional\nargument.\n"},{"hash":"d8bdc97d148088bdaa672f56d4b8e0a15b03e70e","date":"2014-11-19T05:34:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"save auxv pointer into libc struct early in dynamic linker startup\n\nthis allows most code to assume it has already been saved, and is a\nprerequisite for upcoming changes for arm atomic/tls operations.\n"},{"hash":"4a241f14a6bea81b9b50edda09f8184e35a75860","date":"2014-11-19T06:02:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul ARM atomics/tls for performance and compatibility\n\npreviously, builds for pre-armv6 targets hard-coded use of the \"kuser\nhelper\" system for atomics and thread-pointer access, resulting in\nbinaries that fail to run (crash) on systems where this functionality\nhas been disabled (as a security/hardening measure) in the kernel.\nadditionally, builds for armv6 hard-coded an outdated/deprecated\nmemory barrier instruction which may require emulation (extremely\nslow) on future models.\n\nthis overhaul replaces the behavior for all pre-armv7 builds (both of\nthe above cases) to perform runtime detection of the appropriate\nmechanisms for barrier, atomic compare-and-swap, and thread pointer\naccess. detection is based on information provided by the kernel in\nauxv: presence of the HWCAP_TLS bit for AT_HWCAP and the architecture\nversion encoded in AT_PLATFORM. direct use of the instructions is\npreferred when possible, since probing for the existence of the kuser\nhelper page would be difficult and would incur runtime cost.\n\nfor builds targeting armv7 or later, the runtime detection code is not\ncompiled at all, and much more efficient versions of the non-cas\natomic operations are provided by using ldrex/strex directly rather\nthan wrapping cas.\n"},{"hash":"8cd0b11eafeaaec3df5113cb39094e5456ca6b22","date":"2014-11-22T17:26:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix __aeabi_read_tp oversight in arm atomics/tls overhaul\n\ncalls to __aeabi_read_tp may be generated by the compiler to access\nTLS on pre-v6 targets. previously, this function was hard-coded to\ncall the kuser helper, which would crash on kernels with kuser helper\nremoved.\n\nto fix the problem most efficiently, the definition of __aeabi_read_tp\nis moved so that it's an alias for the new __a_gettp. however, on v7+\ntargets, code to initialize the runtime choice of thread-pointer\nloading code is not even compiled, meaning that defining\n__aeabi_read_tp would have caused an immediate crash due to using the\ndefault implementation of __a_gettp with a HCF instruction.\n\nfortunately there is an elegant solution which reduces overall code\nsize: putting the native thread-pointer loading instruction in the\ndefault code path for __a_gettp, so that separate default/native code\npaths are not needed. this function should never be called before\n__set_thread_area anyway, and if it is called early on pre-v6\nhardware, the old behavior (crashing) is maintained.\n\nideally __aeabi_read_tp would not be called at all on v7+ targets\nanyway -- in fact, prior to the overhaul, the same problem existed,\nbut it was never caught by users building for v7+ with kuser disabled.\nhowever, it's possible for calls to __aeabi_read_tp to end up in a v7+\nbinary if some of the object files were built for pre-v7 targets, e.g.\nin the case of static libraries that were built separately, so this\ncase needs to be handled.\n"},{"hash":"7d310ed1d086d9874b7ca40933ff870a8adc75d9","date":"2014-11-23T01:50:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove old clang workarounds from arm syscall implementation\n\nthe register constraints in the non-clang case were tested to work on\nclang back to 3.2, and earlier versions of clang have known bugs that\npreclude building musl.\n\nthere may be other reasons to prefer not to use inline syscalls, but\nif so the function-call-based implementations should be added back in\na unified way for all archs.\n"},{"hash":"0e971b0e3f4b9c99a7ce67b10d851fc885c188d5","date":"2014-11-23T02:06:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"inline 5- and 6-argument syscalls on arm\n"},{"hash":"4134c68dd4dc23ed358c8301da56225d21d655d9","date":"2014-11-23T02:50:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unify non-inline version of syscall code across archs\n\nexcept powerpc, which still lacks inline syscalls simply because\nnobody has written the code, these are all fallbacks used to work\naround a clang bug that probably does not exist in versions of clang\nthat can compile musl. however, it's useful to have the generic\nnon-inline code anyway, as it eases the task of porting to new archs:\nwriting inline syscall code is now optional. this approach could also\nhelp support compilers which don't understand inline asm or lack\nsupport for the needed register constraints.\n\nmips could not be unified because it has special fixup code for broken\nlayout of the kernel's struct stat.\n"},{"hash":"27828f7e9adb6b4f93ca56f6f98ef4c44bb5ed4e","date":"2014-11-23T17:03:34.000Z","author":{"name":"Joakim Sindholt","email":"opensource@zhasha.com"},"message":"arm assembly changes for clang compatibility\n"},{"hash":"9367fe926196f407705bb07cd29c6e40eb1774dd","date":"2014-11-23T19:12:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression in arm asm for memcpy\n\ncommit 27828f7e9adb6b4f93ca56f6f98ef4c44bb5ed4e fixed compatibility\nwith clang's internal assembler, but broke compatibility with gas and\nthe traditional arm asm syntax by switching to the arm \"unified\nassembler language\" (UAL). recent versions of gas also support UAL,\nbut require the .syntax directive to be used to switch to it. clang on\nthe other hand defaults to UAL. and old versions of gas (still\nrelevant) don't support UAL at all.\n\nfor the conditional ldm/stm instructions, \"ia\" is default and can just\nbe omitted, resulting in a mnemonic that's compatible with both\ntraditional and UAL syntax. but for byte/halfword loads and stores,\nthere seems to be no mnemonic compatible with both, and thus .word is\nused to produce the desired opcode explicitly. the .inst directive is\nnot used because it is not compatible with older assemblers.\n"},{"hash":"921c26e0e7058502e317fe0c93f6d59f982a21f1","date":"2014-11-23T19:27:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression in arm asm for setjmp/longjmp with old assemblers\n"},{"hash":"9911754b198aaf1e2b0e98951766a9d83c277c67","date":"2014-11-23T19:33:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix tabs/spaces in memcpy.s\n\nthis file had been a mess that went unnoticed ever since it was\nimported. some lines used spaces for indention while others used tabs,\nand tabs were used for alignment.\n"},{"hash":"d8dc2b7c0289b12eeef4feff65e3c918111b0f55","date":"2014-11-23T21:17:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adapt dynamic linker for new binutils versions that omit DT_RPATH\n\nthe new DT_RUNPATH semantics for search order are always used, and\nsince binutils had always set both DT_RPATH and DT_RUNPATH when the\nlatter was used, processing only DT_RPATH worked fine. however, recent\nbinutils has stopped generating DT_RPATH when DT_RUNPATH is used,\nwhich broke support for this feature completely.\n"},{"hash":"b72cd07f176b876aa51864d93aa8101477b1d732","date":"2014-12-03T00:03:04.000Z","author":{"name":"Gianluca Anzolin","email":"gianluca@sottospazio.it"},"message":"add support for non-option arguments extension to getopt\n\nthis is a GNU extension, activated by including '-' as the first\ncharacter of the options string, whereby non-option arguments are\nprocessed as if they were arguments to an option character '\\1' rather\nthan ending option processing.\n"},{"hash":"a56e339419c1a90f8a85f86621f3c73945e07b23","date":"2014-12-03T02:54:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized output from sched_getaffinity\n\nthe sched_getaffinity syscall only fills a cpu set up to the set size\nused/supported by the kernel. the rest is left untouched and userspace\nis responsible for zero-filling it based on the return value of the\nsyscall.\n"},{"hash":"66140b0c926ed097f2cb7474863523e4af351f5b","date":"2014-12-03T03:17:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix return value of pthread_getaffinity_np and pthread_setaffinity_np\n\nthese functions are expected to return an error code rather than\nsetting errno and returning -1.\n"},{"hash":"be1f67ab6fde1989af7b2e2946804e9009931a8a","date":"2014-12-03T14:50:35.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add arm private syscall numbers\n\nit is part of kernel uapi, and some programs (e.g. nodejs) do use them\n"},{"hash":"014275b547e3059db5c45986408757c250e8198d","date":"2014-12-04T15:23:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getopt handling of ':' modifier for multibyte option characters\n\nthe previous hard-coded offsets of +1 and +2 contained a hidden\nassumption that the option character matched was single-byte, despite\nthis implementation of getopt attempting to support multibyte option\ncharacters. this patch reworks the matching logic to leave the final\nindex pointing just past the matched character so that fixed offsets\ncan be used to check for ':'.\n"},{"hash":"1c12c24364d1058ffdbb28fca72a51de85082778","date":"2014-12-06T02:15:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't fail posix_spawn on failed close\n\nthe resolution of austin group issue #370 removes the requirement that\nposix_spawn fail when the close file action is performed on an\nalready-closed fd. since there are no other meaningful errors for\nclose, just ignoring the return value completely is the simplest fix.\n"},{"hash":"8f7bc690f07e90177b176b6e19736ad7c1d49840","date":"2014-12-06T02:19:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use direct syscall rather than write function in posix_spawn child\n\nthe write function is a cancellation point and accesses thread-local\nstate belonging to the calling thread in the parent process. since\ncancellation is blocked for the duration of posix_spawn, this is\nprobably safe, but it's fragile and unnecessary. making the syscall\ndirectly is just as easy and clearly safe.\n"},{"hash":"f164875a84c35d0e0d132f99330d3fcda76ee7aa","date":"2014-12-10T03:34:56.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"don't shadow functions with macros in C++\n\nC++ programmers typically expect something like \"::function(x,y)\" to work\nand may be surprised to find that \"(::function)(x,y)\" is actually required\ndue to the headers declaring a macro version of some standard functions.\n\nWe already omit function-like macros for C++ in most cases where there is\na real function available. This commit extends this to the remaining\nfunction-like macros which have a real function version.\n"},{"hash":"59f6232f85240f448da0d1fc77b3e09fe36eeed9","date":"2014-12-11T01:25:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support options after non-option arguments in getopt_long (argv permutation)\n"},{"hash":"cfd7b4acd55420deedd41e0614c9b614c73c743e","date":"2014-12-11T02:26:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support abbreviated options in getopt_long\n"},{"hash":"d4f7d9c46f0e8f19d70871efb66b0f482935642d","date":"2014-12-11T02:29:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getopt handling of initial '+' in optstring\n\nin the case where an initial '+' was passed in optstring (a\ngetopt_long feature to suppress argv permutation), getopt would fail\nto see a possible subsequent ':', resulting in incorrect handling of\nmissing arguments.\n"},{"hash":"b4ef1830b7863bfba1da4bdad56a20ef398672a8","date":"2014-12-11T06:07:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"accept null longopts pointer in getopt_long\n\nthis is an undocumented feature of GNU getopt_long that the BSD\nversion also mimics, and is reportedly needed by some programs.\n"},{"hash":"567cc81c7e3f38c3ca9b223f5d771205711b1f5c","date":"2014-12-13T06:04:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of \"--\" with getopt_long argv permutation\n\nif argv permutation is used, the option terminator \"--\" should be\nmoved before any skipped non-option arguments rather than being left\nin the argv tail where the caller will see and interpret it.\n"},{"hash":"da16224fc5fea45b307d9f0565c2adc92f9e1da0","date":"2014-12-13T19:22:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify getopt_long argv permutation loop logic\n"},{"hash":"d42269d7c85308abdbf8cee38b1a1097249eb38b","date":"2014-12-17T08:08:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correctly handle write errors encountered by printf-family functions\n\npreviously, write errors neither stopped further output attempts nor\ncaused the function to return an error to the caller. this could\nresult in silent loss of output, possibly in the middle of output in\nthe event of a non-permanent error.\n\nthe simplest solution is temporarily clearing the error flag for the\ntarget stream, then suppressing further output when the error flag is\nset and checking/restoring it at the end of the operation to determine\nthe correct return value.\n\nsince the wide version of the code internally calls the narrow fprintf\nto perform some of its underlying operations, initial clearing of the\nerror flag is suppressed when performing a narrow vfprintf on a\nwide-oriented stream. this is not a problem since the behavior of\nnarrow operations on wide-oriented streams is undefined.\n"},{"hash":"aac59c116456f8ce617d5b218e7ee4f044f56e6c","date":"2014-12-17T19:40:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add basic dns record parsing functions\n\nbased on patch by Timo Teräs, with some corrections to bounds checking\ncode and other minor changes.\n\nwhile they are borderline scope creep, the functions added are fairly\nsmall and are roughly the minimum code needed to use the results of\nthe res_query API without re-implementing error-prone DNS packet\nparsing, and they are used in practice by some kerberos related\nsoftware and possibly other things. at this time there is no intent to\nimplement further nameser.h API functions.\n"},{"hash":"efa9d396f9d3af6c6f85ec86302b48206c574a38","date":"2014-12-17T19:54:37.000Z","author":{"name":"Nagy Szabolcs","email":"nsz@port70.net"},"message":"implement FNM_CASEFOLD extension to fnmatch function\n"},{"hash":"a414e8374dfe32f5efd35a49592698f89878de1f","date":"2014-12-17T21:08:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide CMPLX macros in implementation-internal libm.h\n\nthis avoids assuming the presence of C11 macro definitions in the\npublic complex.h, which need changes potentially incompatible with the\nway these macros are being used internally.\n"},{"hash":"5ff2a118c64224789b7286830912425e58831b2b","date":"2014-12-17T21:43:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix definition of CMPLX macros in complex.h to work in constant expressions\n\nbased on patches by Jens Gustedt. these macros need to be usable in\nstatic initializers, and the old definitions were not.\n\nthere is no portable way to provide correct definitions for these\nmacros unless the compiler supports pure imaginary types. a portable\ndefinition is provided for this case even though there are presently\nno compilers that can use it. gcc and compatible compilers provide a\nbuiltin function that can be used, but clang fails to support this and\ninstead requires a construct which is a constraint violation and which\nis only a constant expression as a clang-specific extension.\n\nsince these macros are a namespace violation in pre-C11 profiles, and\nsince no known pre-C11 compilers provide any way to define them\ncorrectly anyway, the definitions have been made conditional on C11.\n"},{"hash":"4075af4318676ebbe5949eb9cee3fec7008de4d7","date":"2014-12-17T21:45:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make the result of the cimag macro a non-lvalue\n\nthis change is not necessary but helps diagnose invalid code. based on\npatch by Jens Gustedt.\n"},{"hash":"a9c2294eef0b4d7e7bcf6155ecb46b25703a80eb","date":"2014-12-17T21:47:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make the definition of _Complex_I explicitly complex\n\nit's unclear whether compilers which provide pure imaginary types\nmight produce a pure imaginary expression for 1.0fi. using 0.0f+1.0fi\nensures that the result is explicitly complex and makes this obvious\nto human readers too.\n"},{"hash":"aee9b1526247f74e9b755b50e102b3b4ce2aac1d","date":"2014-12-17T21:52:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signedness of WINT_MIN expression\n\nsince wint_t is unsigned, WINT_MIN needs to expand to an unsigned zero.\n"},{"hash":"2e1ae3b6b9331383ba5eaa7cb47373a8bea073d1","date":"2014-12-18T21:42:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix return value computation in one code path of wcsnrtombs\n\nthe affected code was wrongly counting characters instead of bytes.\n"},{"hash":"0f859fc99325bbb25d506b28565e4a7385ffe0e6","date":"2014-12-18T22:41:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't suppress sign output for NANs in printf\n\nformally, it seems a sign is only required when the '+' modifier\nappears in the format specifier, in which case either '+' or '-' must\nbe present in the output. but the specification is written such that\nan optional negative sign is part of the output format anyway, and the\nsimplest approach to fixing the problem is removing the code that was\nsuppressing the sign.\n"},{"hash":"7d3512126db7044525cf402255e0a85ac68dc2e9","date":"2014-12-19T01:44:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use tkill instead of tgkill in implementing raise\n\nthis shaves off a useless syscall for getting the caller's pid and\nbrings raise into alignment with other functions which were adapted to\nuse tkill rather than tgkill.\n\ncommit 83dc6eb087633abcf5608ad651d3b525ca2ec35e documents the\nrationale for this change, and in particular why the tgkill syscall is\nuseless for its designed purpose of avoiding races.\n"},{"hash":"1d8d86aeb54c0c5439eb07a4bc1b03983fb9d6e8","date":"2014-12-20T04:59:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stderr locking and ferror semantics in getopt message printing\n\nif writing the error message fails, POSIX requires that ferror(stderr)\nbe set. and as a function that operates on a stdio stream, getopt is\nrequired to lock the stream it uses, stderr.\n\nfwrite calls are used instead of fprintf since there is a demand from\nsome users not to pull in heavy stdio machinery via getopt. this\nmimics the original code using write.\n"},{"hash":"d3357268791f5279b64665a9a5b5629c962c8a15","date":"2014-12-20T05:05:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support translation for getopt error messages\n"},{"hash":"91184c4f16b143107fa9935edebe5d2b20bd70d8","date":"2014-12-21T00:44:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add error message printing to getopt_long and make related improvements\n\nsome related changes are also made to getopt, and the return value of\ngetopt_long in the case of missing arguments is fixed.\n"},{"hash":"0217ed72f986d78b177f1a014e93f2150105bb44","date":"2014-12-21T00:49:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"set optopt in getopt_long\n\nthis is undocumented but possibly expected behavior of GNU\ngetopt_long, and useful when error message printing has been\nsuppressed.\n"},{"hash":"4b2cb37770e56835b261660535cea77474154ba0","date":"2014-12-21T01:13:27.000Z","author":{"name":"Felix Janda","email":"felix.janda@posteo.de"},"message":"add login_tty function\n"},{"hash":"3b26a32df42092af6d0cdac655e52635b91d36b2","date":"2014-12-21T04:22:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't write openpty results until success is determined\n\nnot only is this semantically more correct; it also reduces code size\nslightly by eliminating the need for the compiler to assume the\npossibility of aliasing.\n"},{"hash":"1227e418eafbbe55e74eee5d2b1e6e53a60102cd","date":"2014-12-21T04:38:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block pthread cancellation in openpty function\n\nbeing a nonstandard function, this isn't strictly necessary, but it's\ninexpensive and avoids unpleasant surprises. eventually I would like\nall functions in libc to be safe against cancellation, either ignoring\nit or acting on it cleanly.\n"},{"hash":"814aae20093879dec36df0302febbafae2a66778","date":"2014-12-21T07:10:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul forkpty function using new login_tty\n\nbased on discussion with and patches by Felix Janda. these changes\nstarted as an effort to factor forkpty in terms of login_tty, which\nreturns an error and skips fd reassignment and closing if setting the\ncontrolling terminal failed. the previous forkpty code was unable to\nhandle errors in the child, and did not attempt to; it just silently\nignored them. but this would have been unacceptable when switching to\nusing login_tty, since the child would start with the wrong stdin,\nstdout, and stderr and thereby clobber the parent's files.\n\nthe new code uses the same technique as the posix_spawn implementation\nto convey any possible error in the child to the parent so that the\nparent can report failure to the caller. it is also safe against\nthread cancellation and against signal delivery in the child prior to\nthe determination of success.\n"},{"hash":"dac4fc49ae3ccb40bae4ef00fb2d93027f4ee9e1","date":"2014-12-21T07:30:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signedness of UINT32_MAX and UINT64_MAX at the preprocessor level\n\nper the rules for hexadecimal integer constants, the previous\ndefinitions were correctly treated as having unsigned type except\npossibly when used in preprocessor conditionals, where all artithmetic\ntakes place as intmax_t or uintmax_t. the explicit 'u' suffix ensures\nthat they are treated as unsigned in all contexts.\n"},{"hash":"91f15e2d0d7621a3ce7b4ff8f3dbc61119b44cc7","date":"2014-12-21T07:43:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move wint_t definition to the shared part of alltypes.h.in\n"},{"hash":"f90fafea3c5f1acd7b9bc8e720b417e2dba1d92d","date":"2014-12-23T06:44:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new syscall numbers for bpf and kexec_file_load\n\nthese syscalls are new in linux v3.18, bpf is present on all\nsupported archs except sh, kexec_file_load is only allocted for\nx86_64 and x32 yet.\n\nbpf was added in linux commit 99c55f7d47c0dc6fc64729f37bf435abf43f4c60\n\nkexec_file_load syscall number was allocated in commit\nf0895685c7fd8c938c91a9d8a6f7c11f22df58d2\n"},{"hash":"11ac2a6e811ff0860c7d3b3daf035dc6748fb4d4","date":"2014-12-23T06:46:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new prctl command PR_SET_MM_MAP to sys/prctl.h\n\nPR_SET_MM_MAP was introduced as a subcommand for PR_SET_MM in\nlinux v3.18 commit f606b77f1a9e362451aca8f81d8f36a3a112139e\n\nthe associated struct type is replicated in sys/prctl.h using\nlibc types.\n\nexample usage:\n\n struct prctl_mm_map *p;\n ...\n prctl(PR_SET_MM, PR_SET_MM_MAP, p, sizeof *p);\n\nthe kernel side supported struct size may be queried with\nthe PR_SET_MM_MAP_SIZE subcommand.\n"},{"hash":"c574321d75f035ff6d2c18dfb7e3f70db60ba7bd","date":"2015-01-09T05:09:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"check for connect failure in syslog log opening\n\nbased on patch by Dima Krasner, with minor improvements for code size.\nconnect can fail if there is no listening syslogd, in which case a\nuseless socket was kept open, preventing subsequent syslog call from\nattempting to connect again.\n"},{"hash":"699d4532f6a8f792271c7f46608e2505ca3afc21","date":"2015-01-11T21:32:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in getopt_long support for non-option arguments\n\ncommit b72cd07f176b876aa51864d93aa8101477b1d732 added support for a\nthis feature in getopt, but it was later broken in the case where\ngetopt_long is used as a side effect of the changes made in commit\n91184c4f16b143107fa9935edebe5d2b20bd70d8, which prevented the\nunderlying getopt call from seeing the leading '-' or '+' character in\noptstring.\n\nthis commit changes the logic in the getopt_long core to check for a\nleading colon, possibly after the leading '-' or '+', without\ndepending on the latter having been skipped by the caller. a minor\nincorrectness in the return value for one error condition in\ngetopt_long is also fixed when opterr has been set to zero but\noptstring has no leading ':'.\n"},{"hash":"9772eadba8f8b32a1744c4df5048d70c567f6082","date":"2015-01-12T05:59:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify ctermid\n\nopening /dev/tty then using ttyname_r on it does not produce a\ncanonical terminal name; it simply yields \"/dev/tty\".\n\nit would be possible to make ctermid determine the actual controlling\nterminal device via field 7 of /proc/self/stat, but doing so would\nintroduce a buffer overflow into applications built with L_ctermid==9,\nwhich glibc defines, adversely affecting the quality of ABI compat.\n"},{"hash":"84b5c5479e8eae48c81295b55f4fa8dd342c97a9","date":"2015-01-12T23:16:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove rlimit hacks from multi-threaded set*id() code\n\nthe code being removed was introduced to work around \"partial failure\"\nof multi-threaded set*id() operations, where some threads would\nsucceed in changing their ids but an RLIMIT_NPROC setting would\nprevent the rest from succeeding, leaving the process in an\ninconsistent and dangerous state. however, the workaround code did not\nhandle important usage cases like swapping real and effective uids\nthen restoring their original values, and the wrongful kernel\nenforcement of RLIMIT_NPROC at setuid time was removed in Linux 3.1,\nmaking the workaround obsolete.\n\nsince the partial failure still is dangerous on old kernels, and could\nin principle happen on post-fix kernels as well if set*id() syscalls\nfail for another spurious reason such as resource-related failures,\nnew code is added to detect and forcibly kill the process if/when such\na situation arises. future documentation releases should be updated to\nreflect that setting RLIMIT_NPROC to RLIM_INFINITY is necessary to\navoid this forced-kill on old kernels. ideally, at some point the\nkernel will get proper multi-threaded set*id() syscalls capable of\nperforming their actions atomically, and all of the userspace code to\nemulate them can be treated as a fallback for outdated kernels.\n"},{"hash":"3f65494a4cb2544eb16af3fa64a161bd8142f487","date":"2015-01-13T17:04:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"increase syslog message limit from 256 to 1024\n\nthis addresses alpine linux issue #3692 and brings the syslog message\nlength limit in alignment with uclibc's implementation.\n"},{"hash":"996d148bf14b477b07fa3691bffeb930c67b2b62","date":"2015-01-14T04:35:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.6\n"},{"hash":"472e8b71f7a90ab23f1499fd721b872541f52de9","date":"2015-01-15T12:09:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"for multithreaded set*id/setrlimit, handle case where callback does not run\n\nin the current version of __synccall, the callback is always run, so\nfailure to handle this case did not matter. however, the upcoming\noverhaul of __synccall will have failure cases, in which case the\ncallback does not run and errno is already set. the changes being\ncommitted now are in preparation for that.\n"},{"hash":"c0ed5a201b2bdb6d1896064bec0020c9973db0a1","date":"2015-01-15T12:21:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress EINTR in sem_wait and sem_timedwait\n\nper POSIX, the EINTR condition is an optional error for these\nfunctions, not a mandatory one. since old kernels (pre-2.6.22) failed\nto honor SA_RESTART for the futex syscall, it's dangerous to trust\nEINTR from the kernel. thankfully POSIX offers an easy way out.\n"},{"hash":"7152a61a3ab16eacd8ecb94b81641d76c78958b0","date":"2015-01-16T03:51:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add FUTEX_PRIVATE macro to internal futex.h\n"},{"hash":"78a8ef47c4d92b7680c52a85f80a81e29da86bb9","date":"2015-01-16T04:17:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul __synccall and fix AS-safety and other issues in set*id\n\nmulti-threaded set*id and setrlimit use the internal __synccall\nfunction to work around the kernel's wrongful treatment of these\nprocess properties as thread-local. the old implementation of\n__synccall failed to be AS-safe, despite POSIX requiring setuid and\nsetgid to be AS-safe, and was not rigorous in assuring that all\nthreads were caught. in a worst case, threads late in the process of\nexiting could retain permissions after setuid reported success, in\nwhich case attacks to regain dropped permissions may have been\npossible under the right conditions.\n\nthe new implementation of __synccall depends on the presence of\n/proc/self/task and will fail if it can't be opened, but is able to\ndetermine that it has caught all threads, and does not use any locks\nexcept its own. it thereby achieves AS-safety simply by blocking\nsignals to preclude re-entry in the same thread.\n\nwith this commit, all known conformance and safety issues in set*id\nfunctions should be fixed.\n"},{"hash":"e8e4e56a8ce1f3d7e4a027ff5478f2f8ea70c46b","date":"2015-01-21T18:16:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"always set optarg in getopt_long\n\nthe standard getopt does not touch optarg unless processing an option\nwith an argument. however, programs using the GNU getopt API, which we\nattempt to provide in getopt_long, expect optarg to be a null pointer\nafter processing an option without an argument.\n\nbefore argument permutation support was added, such programs typically\ndetected its absence and used their own replacement getopt_long,\nmasking the discrepency in behavior.\n"},{"hash":"63cac4e29a61487423f63bed9150aa9aec906823","date":"2015-01-21T18:28:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify part of getopt_long\n\nas a result of commit e8e4e56a8ce1f3d7e4a027ff5478f2f8ea70c46b,\nthe later code path for setting optarg to a null pointer is no longer\nnecessary, and removing it eliminates an indention level and arguably\nmakes the code more readable.\n"},{"hash":"ecb608192a48d3688e1a0a21027bfd968d3301a1","date":"2015-01-21T19:26:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix erroneous return of partial username matches by getspnam[_r]\n\nwhen using /etc/shadow (rather than tcb) as its backend, getspnam_r\nmatched any username starting with the caller-provided string rather\nthan requiring an exact match. in practice this seems to have affected\nonly systems where one valid username is a prefix for another valid\nusername, and where the longer username appears first in the shadow\nfile.\n"},{"hash":"b553dc4fe68c02bb1ddbb4db906d43124b6be70a","date":"2015-01-31T02:54:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of configure to detect gcc due to message translations\n\nbased on patch by Vadim Ushakov. in general overriding LC_ALL rather\nthan specific categories (here, LC_MESSAGES) is undesirable, but\nLC_ALL is easier and in this case there is nothing else that depends\non the locale in this invocation of the compiler.\n"},{"hash":"02d8770dcfe47c3bea143cb725f93f3b74b6d667","date":"2015-01-31T02:58:11.000Z","author":{"name":"Trutz Behn","email":"me@trutz.be"},"message":"remove mips-only EINIT and EREMDEV errnos\n\nthe errno values are unused by the kernel and the macro definitions were\nnever exposed by glibc.\n"},{"hash":"c7b05bc81732e9471e8f61e2dc48ff590572724e","date":"2015-01-31T02:58:28.000Z","author":{"name":"Trutz Behn","email":"me@trutz.be"},"message":"fix missing comma in sh setjmp asm\n\nthis typo did not result in an erroneous setjmp with at least binutils\n2.22 but fix it for clarity and compatibility with potentially stricter\nsh assemblers.\n"},{"hash":"2d67ae923d11d766d9a6cea714fa487b52579f6a","date":"2015-01-31T03:02:23.000Z","author":{"name":"Trutz Behn","email":"me@trutz.be"},"message":"move MREMAP_MAYMOVE and MREMAP_FIXED out of bits\n\nthe definitions are generic for all kernel archs. exposure of these\nmacros now only occurs on the same feature test as for the function\naccepting them, which is believed to be more correct.\n"},{"hash":"0b21a07c783d18051d86b1d6ddc04a8ea716a12f","date":"2015-01-31T03:05:40.000Z","author":{"name":"Trutz Behn","email":"me@trutz.be"},"message":"make fsync, fdatasync, and msync cancellation points\n\nthese are mandatory cancellation points per POSIX, so their omission\nwas a conformance bug.\n"},{"hash":"4758f0565df83beb8f9b24857ec40ca3a40d2281","date":"2015-02-01T18:49:15.000Z","author":{"name":"Felix Janda","email":"felix.janda@posteo.de"},"message":"fix typo in x86_64/x32 user_fpregs_struct\n\nmxcs_mask should be mxcr_mask\n"},{"hash":"3559f0b894e4369955f8467b94cb8fda537d2f36","date":"2015-02-03T05:16:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing memory barrier in cancellation signal handler\n\nin practice this was probably a non-issue, because the necessary\nbarrier almost certainly exists in kernel space -- implementing signal\ndelivery without such a barrier seems impossible -- but for the sake\nof correctness, it should be done here too.\n\nin principle, without a barrier, it is possible that the thread to be\ncancelled does not see the store of its cancellation flag performed by\nanother thread. this affects both the case where the signal arrives\nbefore entering the critical program counter range from __cp_begin to\n__cp_end (in which case both the signal handler and the inline check\nfail to see the value which was already stored) and the case where the\nsignal arrives during the critical range (in which case the signal\nhandler should be responsible for cancellation, but when it does not\nsee the cancellation flag, it assumes the signal is spurious and\nrefuses to act on it).\n\nin the fix, the barrier is placed only in the signal handler, not in\nthe inline check at the beginning of the critical program counter\nrange. if the signal handler runs before the critical range is\nentered, it will of course take no action, but its barrier will ensure\nthat the inline check subsequently sees the store. if on the other\nhand the inline check runs first, it may miss seeing the store, but\nthe subsequent signal handler in the critical range will act upon the\ncancellation request. this strategy avoids adding a memory barrier in\nthe common, non-cancellation code path.\n"},{"hash":"14a0117117beed9d54d17819d9a9c3d4200c46ed","date":"2015-02-03T05:31:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make execvp continue PATH search on EACCES rather than issuing an errror\n\nthe specification for execvp itself is unclear as to whether\nencountering a file that cannot be executed due to EACCES during the\nPATH search is a mandatory error condition; however, XBD 8.3's\nspecification of the PATH environment variable clarifies that the\nsearch continues until a file with \"appropriate execution permissions\"\nis found.\n\nsince it seems undesirable/erroneous to report ENOENT rather than\nEACCES when an early path element has a non-executable file and all\nlater path elements lack any file by the requested name, the new code\nstores a flag indicating that EACCES was seen and sets errno back to\nEACCES in this case.\n"},{"hash":"2736eb6caa70bb6e909d7d8ebbe145c2071435e0","date":"2015-02-05T03:50:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fd leak race (missing O_CLOEXEC) in fchmodat\n"},{"hash":"61b1d102129990f6e903c6ddcf46c7d79d1a1e99","date":"2015-02-06T04:34:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of fchmodat to report EOPNOTSUPP in the race path\n\nin the case where a non-symlink file was replaced by a symlink during\nthe fchmodat operation with AT_SYMLINK_NOFOLLOW, mode change on the\nnew symlink target was successfully suppressed, but the error was not\nreported. instead, fchmodat simply returned 0.\n"},{"hash":"e63833cd43a778f639e4fdf5d86cd5c526cc5db2","date":"2015-02-07T16:55:00.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove cruft from x86_64 syscall.h\n\nx86_64 syscall.h defined some musl internal syscall names and made\nthem public. These defines were already moved to src/internal/syscall.h\n(except for SYS_fadvise which is added now) so the cruft in x86_64\nsyscall.h is not needed.\n"},{"hash":"c63c98a6067030a25a42703db1209ccbcc74803a","date":"2015-02-07T19:01:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make getaddrinfo support SOCK_RAW and other socket types\n\nall socket types are accepted at this point, but that may be changed\nat a later time if the behavior is not meaningful for other types. as\nbefore, omitting type (a value of 0) gives both UDP and TCP results,\nand SOCK_DGRAM or SOCK_STREAM restricts to UDP or TCP, respectively.\nfor other socket types, the service name argument is required to be a\nnull pointer, and the protocol number provided by the caller is used.\n"},{"hash":"6e76e1540fc58a418494bf5eb832b556f9c5763e","date":"2015-02-08T16:40:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add parenthesis in fma.c to clarify intent and silence warnings\n"},{"hash":"3f92f92cb9c448ba82da5ff2cbbea692c7701c0c","date":"2015-02-08T16:41:56.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix __fpclassifyl(-0.0) for IEEE binary128\n\nThe sign bit was not cleared before checking for 0 so -0.0\nwas misclassified as FP_SUBNORMAL instead of FP_ZERO.\n"},{"hash":"5fc1487832e16aa2119e735a388d5f36c8c139e2","date":"2015-02-08T17:56:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix fesetenv(FE_DFL_ENV) on mips\n\nmips fesetenv did not handle FE_DFL_ENV, now fcsr is cleared in that\ncase.\n"},{"hash":"04d522cba6f54dc8c4df9dd963d254de257bf74c","date":"2015-02-08T18:13:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"simplify armhf fesetenv\n\narmhf fesetenv implementation did a useless read of the fpscr.\n"},{"hash":"018f9df4440e1d5640f9d50dc08bee9bbc40b3b6","date":"2015-02-09T00:16:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix fmodl for IEEE binary128\n\nThis trivial copy-paste bug went unnoticed due to lack of testing.\nNo currently supported target archs are affected.\n"},{"hash":"f3f29795da461905a5e9f0314dc0d7840bd75c3f","date":"2015-02-09T20:38:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add IEEE binary128 long double support to floatscan\n\njust defining the necessary constants:\n\n LD_B1B_MAX is 2^113 - 1 in base 10^9\n KMAX is 2048 so the x array can hold up to 18432 decimal digits\n\n(the worst case is converting 2^-16495 = 5^16495 * 10^-16495 to\nbinary, it requires the processing of int(log10(5)*16495)+1 = 11530\ndecimal digits after discarding the leading zeros, the conversion\nrequires some headroom in x, but KMAX is more than enough for that)\n\nHowever this code is not optimal on archs with IEEE binary128\nlong double because the arithmetics is software emulated (on\nall such platforms as far as i know) which means big and slow\nstrtod.\n"},{"hash":"339cc250f6dda06e7a26fcbcc66e3a1bbec2b494","date":"2015-02-09T21:11:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use the internal macro name FUTEX_PRIVATE in __wait\n\nthe name was recently added for the setxid/synccall rework,\nso use the name now that we have it.\n"},{"hash":"70572dce07a631e2f818b34f5679c57eeebc9779","date":"2015-02-09T21:22:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new socket options SO_INCOMING_CPU, SO_ATTACH_BPF, SO_DETACH_BPF\n\nthese socket options are new in linux v3.19, introduced in commit\n2c8c56e15df3d4c2af3d656e44feb18789f75837 and commit\n89aa075832b0da4402acebd698d0411dcc82d03e\n\nwith SO_INCOMING_CPU the cpu can be queried on which a socket is\nmanaged inside the kernel and optimize polling of large number of\nsockets accordingly.\n\nSO_ATTACH_BPF lets eBPF programs (created by the bpf syscall) to\nbe attached to sockets.\n"},{"hash":"f54c28cba2707c280f8285c247550358c44b5984","date":"2015-02-09T22:00:56.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add syscall numbers for the new execveat syscall\n\nthis syscall allows fexecve to be implemented without /proc, it is new\nin linux v3.19, added in commit 51f39a1f0cea1cacf8c787f652f26dfee9611874\n(sh and microblaze do not have allocated syscall numbers yet)\n\nadded a x32 fix as well: the io_setup and io_submit syscalls are no\nlonger common with x86_64, so use the x32 specific numbers.\n"},{"hash":"6a5242e4cb2f9c695f613dc312ed5e1bb8008912","date":"2015-02-10T21:54:33.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"make protocol table zero byte separated and add ipv6 protocols\n"},{"hash":"bf2071eda32528ee8b0bb89544152646684a2cf3","date":"2015-02-10T23:53:31.000Z","author":{"name":"Denys Vlasenko","email":"vda.linux@googlemail.com"},"message":"x86_64/memset: simple optimizations\n\n\"and $0xff,%esi\" is a six-byte insn (81 e6 ff 00 00 00), can use\n4-byte \"movzbl %sil,%esi\" (40 0f b6 f6) instead.\n\n64-bit imul is slow, move it as far up as possible so that the result\n(rax) has more time to be ready by the time we start using it\nin mem stores.\n\nThere is no need to shuffle registers in preparation to \"rep movs\"\nif we are not going to take that code path. Thus, patch moves\n\"jump if len < 16\" instructions up, and changes alternate code path\nto use rdx and rdi instead of rcx and r8.\n\nSigned-off-by: Denys Vlasenko <vda.linux@googlemail.com>\n"},{"hash":"74e334dcd177b585c64ddafa732a3dc9e3f6b5ec","date":"2015-02-10T23:54:27.000Z","author":{"name":"Denys Vlasenko","email":"vda.linux@googlemail.com"},"message":"x86_64/memset: avoid performing final store twice\n\nThe code does a potentially misaligned 8-byte store to fill the tail\nof the buffer. Then it fills the initial part of the buffer\nwhich is a multiple of 8 bytes.\nTherefore, if size is divisible by 8, we were storing last word twice.\n\nThis patch decrements byte count before dividing it by 8,\nmaking one less store in \"size is divisible by 8\" case,\nand not changing anything in all other cases.\nAll at the cost of replacing one MOV insn with LEA insn.\n\nSigned-off-by: Denys Vlasenko <vda.linux@googlemail.com>\n"},{"hash":"700e08993c3f6a808773d56424aa7e633da13e2e","date":"2015-02-11T03:57:02.000Z","author":{"name":"Josiah Worcester","email":"josiahw@gmail.com"},"message":"refactor passwd file access code\n\nthis allows getpwnam and getpwuid to share code with the _r versions\nin preparation for alternate backend support.\n"},{"hash":"594ffed82f4e6ee7da85e9c5da35e32946ae32c9","date":"2015-02-11T06:37:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bad character checking in wordexp\n\nthe character sequence '$((' was incorrectly interpreted as the\nopening of arithmetic even within single-quoted contexts, thereby\nsuppressing the checks for bad characters after the closing quote.\n\npresently bad character checking is only performed when the WRDE_NOCMD\nis used; this patch only corrects checking in that case.\n"},{"hash":"4e8a3561652ebcda6a126b3162fc545573889dc4","date":"2015-02-13T06:10:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul aio implementation for correctness\n\npreviously, aio operations were not tracked by file descriptor; each\noperation was completely independent. this resulted in non-conforming\nbehavior for non-seekable/append-mode writes (which are required to be\nordered) and made it impossible to implement aio_cancel, which in turn\nmade closing file descriptors with outstanding aio operations unsafe.\n\nthe new implementation is significantly heavier (roughly twice the\nsize, and seems to be slightly slower) and presently aims mainly at\ncorrectness, not performance.\n\nmost of the public interfaces have been moved into a single file,\naio.c, because there is little benefit to be had from splitting them.\nwhenever any aio functions are used, aio_cancel and the internal\nqueue lifetime management and fd-to-queue mapping code must be linked,\nand these functions make up the bulk of the code size.\n\nthe close function's interaction with aio is implemented with weak\nalias magic, to avoid pulling in heavy aio cancellation code in\nprograms that don't use aio, and the expensive cancellation path\n(which includes signal blocking) is optimized out when there are no\nactive aio queues.\n"},{"hash":"7c5f0a5212127b70486159af80e24fd96262ec88","date":"2015-02-13T06:46:51.000Z","author":{"name":"Josiah Worcester","email":"josiahw@gmail.com"},"message":"refactor group file access code\n\nthis allows getgrnam and getgrgid to share code with the _r versions\nin preparation for alternate backend support.\n"},{"hash":"fd850de7524d8b62cd1d340417b665ed9427adae","date":"2015-02-14T19:05:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix type error (arch-dependent) in new aio code\n\na_store is only valid for int, but ssize_t may be defined as long or\nanother type. since there is no valid way for another thread to acess\nthe return value without first checking the error/completion status of\nthe aiocb anyway, an atomic store is not necessary.\n"},{"hash":"36d8e972231c397194e513691d09f7d489de0a62","date":"2015-02-17T03:25:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make pthread_exit responsible for disabling cancellation\n\nthis requirement is tucked away in XSH 2.9.5 Thread Cancellation under\nthe heading Thread Cancellation Cleanup Handlers.\n"},{"hash":"6bea5dc69892cd9ff0c222474e7dd468c29dfa75","date":"2015-02-20T23:35:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"map interruption of close by signal to success rather than EINPROGRESS\n\ncommit 82dc1e2e783815e00a90cd3f681436a80d54a314 addressed the\nresolution of Austin Group issue 529, which requires close to leave\nthe fd open when failing with EINTR, by returning the newly defined\nerror code EINPROGRESS. this turns out to be a bad idea, though, since\nlegacy applications not aware of the new specification are likely to\ninterpret any error from close except EINTR as a hard failure.\n"},{"hash":"f409338a9e808a09001669377c608fd2803d808d","date":"2015-02-21T01:25:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prepare cancellation syscall asm for possibility of __cancel returning\n"},{"hash":"102f6a01e249ce4495f1119ae6d963a2a4a53ce5","date":"2015-02-22T03:05:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add new masked cancellation mode\n\nthis is a new extension which is presently intended only for\nexperimental and internal libc use. interface and behavior details may\nchange subject to feedback and experience from using it internally.\n\nthe basic concept for the new PTHREAD_CANCEL_MASKED state is that the\nfirst cancellation point to observe the cancellation request fails\nwith an errno value of ECANCELED rather than acting on cancellation,\nallowing the caller to process the status and choose whether/how to\nact upon it.\n"},{"hash":"8741ffe625363a553e8f509dc3ca7b071bdbab47","date":"2015-02-23T03:07:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_cond_wait cancellation race\n\nit's possible that signaling a waiter races with cancellation of that\nsame waiter. previously, cancellation was acted upon, causing the\nsignal to be consumed with no waiter returning. by using the new\nmasked cancellation state, it's possible to refuse to act on the\ncancellation request and instead leave it pending.\n\nto ease review and understanding of the changes made, this commit\nleaves the unwait function, which was previously the cancellation\ncleanup handler, in place. additional simplifications could be made by\nremoving it.\n"},{"hash":"d9da1fb8c592469431c764732d09f7756340190e","date":"2015-02-23T03:55:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify cond var code now that cleanup handler is not needed\n"},{"hash":"fc5a96c9c8aa186effad7520d5df6b616bbfd29d","date":"2015-02-23T05:35:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crashes in refactored passwd/group code\n\nthe wrong condition was used in determining the presence of a result\nthat needs space/copying for the _r functions. a zero return value\ndoes not necessarily mean success; it can also be a non-error negative\nresult: no such user/group.\n"},{"hash":"0afef1aa24b784c86ae6121ca39e999824086c7c","date":"2015-02-23T05:42:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix spurious errors in refactored passwd/group code\n\nerrno was treated as the error status when the return value of getline\nwas negative, but this condition can simply indicate EOF and is not\nnecessarily an error.\n\nthe spurious errors caused by this bug masked the bug which was fixed\nin commit fc5a96c9c8aa186effad7520d5df6b616bbfd29d.\n"},{"hash":"34b423d2077a4c799d2089068d3bec91fb800256","date":"2015-02-23T06:02:14.000Z","author":{"name":"Josiah Worcester","email":"josiahw@gmail.com"},"message":"support alternate backends for the passwd and group dbs\n\nwhen we fail to find the entry in the commonly accepted files,  we\nquery a server over a Unix domain socket on /var/run/nscd/socket.\nthe protocol used here is compatible with glibc's nscd protocol on\nmost systems (all that use 32-bit numbers for all the protocol fields,\nwhich appears to be everything but Alpha).\n"},{"hash":"e487c203db36750388228a2db75f96040cbfae58","date":"2015-02-23T17:41:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in pthread_cond_wait due to typo\n\ndue to accidental use of = instead of ==, the error code was always\nset to zero in the signaled wake case for non-shared cv waits.\nsuppressing ETIMEDOUT (the only possible wait error) is harmless and\nactually permitted in this case, but suppressing mutex errors could\ngive the caller false information about the state of the mutex.\n\ncommit 8741ffe625363a553e8f509dc3ca7b071bdbab47 introduced this\nregression and commit d9da1fb8c592469431c764732d09f7756340190e\npreserved it when reorganizing the code.\n"},{"hash":"2de85a985654d2c944931267645d9a0686242dfe","date":"2015-02-23T23:53:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix possible isatty false positives and unwanted device state changes\n\nthe equivalent checks for newly opened stdio output streams, used to\ndetermine buffering mode, are also fixed.\n\non most archs, the TCGETS ioctl command shares a value with\nSNDCTL_TMR_TIMEBASE, part of the OSS sound API which was apparently\nused with certain MIDI and timer devices. for file descriptors\nreferring to such a device, TCGETS will not fail with ENOTTY as\nexpected; it may produce a different error, or may succeed, and if it\nsucceeds it changes the mode of the device. while it's unlikely that\nsuch devices are in use, this is in principle very harmful behavior\nfor an operation which is supposed to do nothing but query whether the\nfd refers to a tty.\n\nTIOCGWINSZ, used to query logical window size for a terminal, was\nchosen as an alternate ioctl to perform the isatty check. it does not\nshare a value with any other ioctl commands, and it succeeds on any\ntty device.\n\nthis change also cleans up strace output to be less ugly and\nmisleading.\n"},{"hash":"20cbd607759038dca57f84ef7e7b5d44a3088574","date":"2015-02-25T20:37:55.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"getloadavg: use sysinfo() instead of /proc/loadavg\n\nBased on a patch by Szabolcs Nagy.\n"},{"hash":"69858fa93107aa7485b143c54137e745a7b7ad72","date":"2015-02-26T06:51:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul optimized i386 memset asm\n\non most cpu models, \"rep stosl\" has high overhead that makes it\nundesirable for small memset sizes. the new code extends the\nminimal-branch fast path for short memsets from size 15 up to size 62,\nand shrink-wraps this code path. in addition, \"rep stosl\" is very\nsensitive to misalignment. the cost varies with size and with cpu\nmodel, but it has been observed performing 1.5 to 4 times slower when\nthe destination address is not aligned mod 16. the new code thus\nensures alignment mod 16, but also preserves any existing additional\nalignment, in case there are cpu models where it is beneficial.\n\nthis version is based in part on changes to the x86_64 memset asm\nproposed by Denys Vlasenko.\n"},{"hash":"e346ff86c8faee901a7c2d502b5beb983b99f972","date":"2015-02-26T07:07:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul optimized x86_64 memset asm\n\non most cpu models, \"rep stosq\" has high overhead that makes it\nundesirable for small memset sizes. the new code extends the\nminimal-branch fast path for short memsets from size 15 up to size\n126, and shrink-wraps this code path. in addition, \"rep stosq\" is\nsensitive to misalignment. the cost varies with size and with cpu\nmodel, but it has been observed performing 1.5 times slower when the\ndestination address is not aligned mod 16. the new code thus ensures\nalignment mod 16, but also preserves any existing additional\nalignment, in case there are cpu models where it is beneficial.\n\nthis version is based in part on changes proposed by Denys Vlasenko.\n"},{"hash":"76ca7a5446a8aec2b671a401d5e1878c4704754e","date":"2015-02-28T04:25:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of internal futex __timedwait to report ECANCELED\n\nas part of abstracting the futex wait, this function suppresses all\nfutex error values which callers should not see using a whitelist\napproach. when the masked cancellation mode was added, the new\nECANCELED error was not whitelisted. this omission caused the new\npthread_cond_wait code using masked cancellation to exhibit a spurious\nwake (rather than acting on cancellation) when the request arrived\nafter blocking on the cond var.\n"},{"hash":"0fc317d83c1167393bf276a8bfbdd9a4e02e8258","date":"2015-03-02T22:46:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"factor cancellation cleanup push/pop out of futex __timedwait function\n\npreviously, the __timedwait function was optionally a cancellation\npoint depending on whether it was passed a pointer to a cleaup\nfunction and context to register. as of now, only one caller actually\nused such a cleanup function (and it may face removal soon); most\ncallers either passed a null pointer to disable cancellation or a\ndummy cleanup function.\n\nnow, __timedwait is never a cancellation point, and __timedwait_cp is\nthe cancellable version. this makes the intent of the calling code\nmore obvious and avoids ugly dummy functions and long argument lists.\n"},{"hash":"5451d95715e3b4b37a32b54695fd1efa2cf3d9da","date":"2015-03-02T23:13:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make aio_suspend a cancellation point and properly handle cancellation\n"},{"hash":"a3de8f7fbc5a2cc838b96e8702363ef7682da5ae","date":"2015-03-02T23:48:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix namespace issue in pthread_join affecting thrd_join\n\npthread_testcancel is not in the ISO C reserved namespace and thus\ncannot be used here. use the namespace-protected version of the\nfunction instead.\n"},{"hash":"eb4bd8d8bb5c9f535ee8250edd4efbd3d4f84c5a","date":"2015-03-02T23:52:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress masked cancellation in pthread_join\n\nlike close, pthread_join is a resource-deallocation function which is\nalso a cancellation point. the intent of masked cancellation mode is\nto exempt such functions from failure with ECANCELED.\n"},{"hash":"56fbaa3bbe73f12af2bfbbcf2adb196e6f9fe264","date":"2015-03-04T03:50:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make all objects used with atomic operations volatile\n\nthe memory model we use internally for atomics permits plain loads of\nvalues which may be subject to concurrent modification without\nrequiring that a special load function be used. since a compiler is\nfree to make transformations that alter the number of loads or the way\nin which loads are performed, the compiler is theoretically free to\nbreak this usage. the most obvious concern is with atomic cas\nconstructs: something of the form tmp=*p;a_cas(p,tmp,f(tmp)); could be\ntransformed to a_cas(p,*p,f(*p)); where the latter is intended to show\nmultiple loads of *p whose resulting values might fail to be equal;\nthis would break the atomicity of the whole operation. but even more\nfundamental breakage is possible.\n\nwith the changes being made now, objects that may be modified by\natomics are modeled as volatile, and the atomic operations performed\non them by other threads are modeled as asynchronous stores by\nhardware which happens to be acting on the request of another thread.\nsuch modeling of course does not itself address memory synchronization\nbetween cores/cpus, but that aspect was already handled. this all\nseems less than ideal, but it's the best we can do without mandating a\nC11 compiler and using the C11 model for atomics.\n\nin the case of pthread_once_t, the ABI type of the underlying object\nis not volatile-qualified. so we are assuming that accessing the\nobject through a volatile-qualified lvalue via casts yields volatile\naccess semantics. the language of the C standard is somewhat unclear\non this matter, but this is an assumption the linux kernel also makes,\nand seems to be the correct interpretation of the standard.\n"},{"hash":"7a81fe3710be0128d29071e76c5acbea3d84277b","date":"2015-03-04T14:29:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix init race that could lead to deadlock in malloc init code\n\nthe malloc init code provided its own version of pthread_once type\nlogic, including the exact same bug that was fixed in pthread_once in\ncommit 0d0c2f40344640a2a6942dda156509593f51db5d.\n\nsince this code is called adjacent to expand_heap, which takes a lock,\nthere is no reason to have pthread_once-type initialization. simply\nmoving the init code into the interval where expand_heap already holds\nits lock on the brk achieves the same result with much less\nsynchronization logic, and allows the buggy code to be eliminated\nrather than just fixed.\n"},{"hash":"6de071a0be00ec2ff08af3c89c7caaa20f1044d7","date":"2015-03-04T14:44:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate atomics in syslog setlogmask function\n"},{"hash":"064898cfe2233526e7639c21e780695be5ece257","date":"2015-03-04T15:48:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless check of bin match in malloc\n\nthis re-check idiom seems to have been copied from the alloc_fwd and\nalloc_rev functions, which guess a bin based on non-synchronized\nmemory access to adjacent chunk headers then need to confirm, after\nlocking the bin, that the chunk is actually in the bin they locked.\n\nthe check being removed, however, was being performed on a chunk\nobtained from the already-locked bin. there is no race to account for\nhere; the check could only fail in the event of corrupt free lists,\nand even then it would not catch them but simply continue running.\n\nsince the bin_index function is mildly expensive, it seems preferable\nto remove the check rather than trying to convert it into a useful\nconsistency check. casual testing shows a 1-5% reduction in run time.\n"},{"hash":"e7b9887e8b65253087ab0b209dc8dd85c9f09614","date":"2015-03-04T16:33:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix x32 pthread type definitions\n\nthe previous definitions were copied from x86_64. not only did they\nfail to match the ABI sizes; they also wrongly encoded an assumption\nthat long/pointer types are twice as large as int.\n"},{"hash":"f5011c62c3329f15652a60b6b2300d7e3f570977","date":"2015-03-04T17:09:37.000Z","author":{"name":"Trutz Behn","email":"me@trutz.be"},"message":"fix POLLWRNORM and POLLWRBAND on mips\n\nthese macros have the same distinct definition on blackfin, frv, m68k,\nmips, sparc and xtensa kernels. POLLMSG and POLLRDHUP additionally\ndiffer on sparc.\n"},{"hash":"91a3bd743e91604bde83e9ce1ad3a2e2d4ff0f0f","date":"2015-03-04T19:15:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix preprocessor error introduced in poll.h in last commit\n"},{"hash":"9c3da8968d5c811452c575b3918fceaf561e5089","date":"2015-03-04T19:38:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"declare incomplete type struct itimerspec in timerfd.h\n\nnormally time.h would provide a definition for this struct, but\ndepending on the feature test macros in use, it may not be exposed,\nleading to warnings when it's used in the function prototypes.\n"},{"hash":"ad85fcb568c7374901f0122ad695b37a9167c55e","date":"2015-03-04T19:50:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new si_lower and si_upper siginfo_t members\n\nnew in linux v3.19 commit ee1b58d36aa1b5a79eaba11f5c3633c88231da83\nused to report intel mpx bound violation information.\n"},{"hash":"380857bf21bcffbbee2fe8ab52feadf39366d7ec","date":"2015-03-05T02:46:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signed left-shift overflow in pthread_condattr_setpshared\n"},{"hash":"2b42c8cb37a3ef115bd04de8637078e43cd72f37","date":"2015-03-05T03:10:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add legacy functions from sysinfo.h duplicating sysconf functionality\n"},{"hash":"bd67959f3ad5049c35af0a0e2f8f1a1e60577a49","date":"2015-03-06T18:27:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix over-alignment of TLS, insufficient builtin TLS on 64-bit archs\n\na conservative estimate of 4*sizeof(size_t) was used as the minimum\nalignment for thread-local storage, despite the only requirements\nbeing alignment suitable for struct pthread and void* (which struct\npthread already contains). additional alignment required by the\napplication or libraries is encoded in their headers and is already\napplied.\n\nover-alignment prevented the builtin_tls array from ever being used in\ndynamic-linked programs on 64-bit archs, thereby requiring allocation\nat startup even in programs with no TLS of their own.\n"},{"hash":"559de8f5f06da9022cbba70e22e14a710eb74513","date":"2015-03-07T17:05:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix FLT_ROUNDS to reflect the current rounding mode\n\nImplemented as a wrapper around fegetround introducing a new function\nto the ABI: __flt_rounds. (fegetround cannot be used directly from float.h)\n"},{"hash":"a46677af1863f3d050f216a43dfdf4818210c266","date":"2015-03-07T19:11:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in pthread_cond_wait with cancellation disabled\n\ndue to a logic error in the use of masked cancellation mode,\npthread_cond_wait did not honor PTHREAD_CANCEL_DISABLE but instead\nfailed with ECANCELED when cancellation was pending.\n"},{"hash":"204a69d2d917f413eacb086020b63d6dc6da0672","date":"2015-03-11T22:53:48.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"copy the dtv pointer to the end of the pthread struct for TLS_ABOVE_TP archs\n\nThere are two main abi variants for thread local storage layout:\n\n (1) TLS is above the thread pointer at a fixed offset and the pthread\n struct is below that. So the end of the struct is at known offset.\n\n (2) the thread pointer points to the pthread struct and TLS starts\n below it. So the start of the struct is at known (zero) offset.\n\nAssembly code for the dynamic TLSDESC callback needs to access the\ndynamic thread vector (dtv) pointer which is currently at the front\nof the pthread struct. So in case of (1) the asm code needs to hard\ncode the offset from the end of the struct which can easily break if\nthe struct changes.\n\nThis commit adds a copy of the dtv at the end of the struct. New members\nmust not be added after dtv_copy, only before it. The size of the struct\nis increased a bit, but there is opportunity for size optimizations.\n"},{"hash":"53cfe0c61a136c12376a8f32d616de1d68227181","date":"2015-03-11T22:54:50.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add ld128 exp2l based on the freebsd implementation\n\nChanged the special case handling and bit manipulation to better\nmatch the double version.\n"},{"hash":"f4e4632abfa8297db1485e132bb15b9ef6c32a1b","date":"2015-03-11T22:54:53.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: add dummy implementations of 128 bit long double functions\n\nThis is in preparation for the aarch64 port only to have the long\ndouble math symbols available on ld128 platforms. The implementations\nshould be fixed up later once we have proper tests for these functions.\n\nAdded bigendian handling for ld128 bit manipulations too.\n"},{"hash":"01ef3dd9c5fa7a56aa370f244dd08e05c73010f5","date":"2015-03-12T00:12:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add aarch64 port\n\nThis adds complete aarch64 target support including bigendian subarch.\n\nSome of the long double math functions are known to be broken otherwise\ninterfaces should be fully functional, but at this point consider this\nport experimental.\n\nInitial work on this port was done by Sireesh Tripurari and Kevin Bortis.\n"},{"hash":"673cab5c56f6b6a8afb01c4b5341963ff259e996","date":"2015-03-12T18:43:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"align x32 pthread type sizes to be common with 32-bit archs\n\npreviously, commit e7b9887e8b65253087ab0b209dc8dd85c9f09614 aligned\nthe sizes with the glibc ABI. subsequent discussion during the merge\nof the aarch64 port reached a conclusion that we should reject larger\narch-specific sizes, which have significant cost and no benefit, and\nstick with the existing common 32-bit sizes for all 32-bit/ILP32 archs\nand the x86_64 sizes for 64-bit archs.\n\none peculiarity of this change is that x32 pthread_attr_t is now\nlarger in musl than in the glibc x32 ABI, making it unsafe to call\npthread_attr_init from x32 code that was compiled against glibc. with\nall the ABI issues of x32, it's not clear that ABI compatibility will\never work, but if it's needed, pthread_attr_init and related functions\ncould be modified not to write to the last slot of the object.\n\nthis is not a regression versus previous releases, since on previous\nreleases the x32 pthread type sizes were all severely oversized\nalready (due to incorrectly using the x86_64 LP64 definitions).\nmoreover, x32 is still considered experimental and not ABI-stable.\n"},{"hash":"38bf2d7cc3e5eb47d63882a64c8471699c1e7eeb","date":"2015-03-14T17:55:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: add struct _aarch64_ctx to signal.h\n\nThe unwind code in libgcc uses this type for unwinding across signal\nhandlers. On aarch64 the kernel may place a sequence of structs on the\nsignal stack on top of the ucontext to provide additional information.\nThe unwinder only needs the header, but added all the types the kernel\ncurrently defines for this mechanism because they are part of the uapi.\n"},{"hash":"962cbfbf864a50aaf88bc59e5c7cf0b664ff599a","date":"2015-03-14T19:49:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: fix typo in bits/ioctl.h\n"},{"hash":"2894a44b40e460fc4112988407818439f2e9672d","date":"2015-03-16T02:32:22.000Z","author":{"name":"Josiah Worcester","email":"josiahw@gmail.com"},"message":"add alternate backend support for getgrouplist\n\nThis completes the alternate backend support that was previously added\nto the getpw* and getgr* functions. Unlike those, though, it\nunconditionally queries nscd. Any groups from nscd that aren't in the\n/etc/groups file are added to the returned list, and any that are\npresent in the file are ignored. The purpose of this behavior is to\nprovide a view of the group database consistent with what is observed\nby the getgr* functions. If group memberships reported by nscd were\nhonored when the corresponding group already has a definition in the\n/etc/groups file, the user's getgrouplist-based membership in the\ngroup would conflict with their non-membership in the reported\ngr_mem[] for the group.\n\nThe changes made also make getgrouplist thread-safe and eliminate its\nclobbering of the global getgrent state.\n"},{"hash":"49d1e7f93129cdcc2ab0cc91832b8a29ccd1570d","date":"2015-03-16T03:33:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify nscd lookup code for alt passwd/group backends\n\npreviously, a sentinel value of (FILE *)-1 was used to inform the\ncaller of __nscd_query that nscd is not in use. aside from being an\nugly hack, this resulted in duplicate code paths for two logically\nequivalent cases: no nscd, and \"not found\" result from nscd.\n\nnow, __nscd_query simply skips closing the socket and returns a valid\nFILE pointer when nscd is not in use, and produces a fake \"not found\"\nresponse header. the caller is then responsible for closing the socket\njust like it would do if it had gotten a real \"not found\" response.\n"},{"hash":"4b5ca13fb170314e0e0c37b304ca56171625afd1","date":"2015-03-16T03:46:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid sending huge names as nscd passwd/group queries\n\noverly long user/group names are potentially a DoS vector and source\nof other problems like partial writes by sendmsg, and not useful.\n"},{"hash":"eceaf1d29f32656e5befb5e37b1f7db632f2e1dc","date":"2015-03-16T22:43:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update authors/contributors list\n\nthese additions were made based on scanning commit authors since the\nlast update, at the time of the 1.1.4 release.\n"},{"hash":"76fd01177a32d602bc5ee7bd7ba65316adbae611","date":"2015-03-17T00:12:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"block all signals (even internal ones) in cancellation signal handler\n\npreviously the implementation-internal signal used for multithreaded\nset*id operations was left unblocked during handling of the\ncancellation signal. however, on some archs, signal contexts are huge\n(up to 5k) and the possibility of nested signal handlers drastically\nincreases the minimum stack requirement. since the cancellation signal\nhandler will do its job and return in bounded time before possibly\npassing execution to application code, there is no need to allow other\nsignals to interrupt it.\n"},{"hash":"d5a5045382315e36588ca225889baa36ed0ed38f","date":"2015-03-18T04:31:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix MINSIGSTKSZ values for archs with large signal contexts\n\nthe previous values (2k min and 8k default) were too small for some\narchs. aarch64 reserves 4k in the signal context for future extensions\nand requires about 4.5k total, and powerpc reportedly uses over 2k.\nthe new minimums are chosen to fit the saved context and also allow a\nminimal signal handler to run.\n\nsince the default (SIGSTKSZ) has always been 6k larger than the\nminimum, it is also increased to maintain the 6k usable by the signal\nhandler. this happens to be able to store one pathname buffer and\nshould be sufficient for calling any function in libc that doesn't\ninvolve conversion between floating point and decimal representations.\n\nx86 (both 32-bit and 64-bit variants) may also need a larger minimum\n(around 2.5k) in the future to support avx-512, but the values on\nthese archs are left alone for now pending further analysis.\n\nthe value for PTHREAD_STACK_MIN is not increased to match MINSIGSTKSZ\nat this time. this is so as not to preclude applications from using\nextremely small thread stacks when they know they will not be handling\nsignals. unfortunately cancellation and multi-threaded set*id() use\nsignals as an implementation detail and therefore require a stack\nlarge enough for a signal context, so applications which use extremely\nsmall thread stacks may still need to avoid using these features.\n"},{"hash":"8c1c57a64b664340b0ede1c1f0eff8212b475ef5","date":"2015-03-19T00:38:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.7\n"},{"hash":"e626deeec8b85713eea364d6504dc4282c773693","date":"2015-03-20T05:21:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing max_align_t definition on aarch64\n"},{"hash":"39dfd58417ef642307d90306e1c7e50aaec5a35c","date":"2015-03-20T22:06:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix memory-corruption in regcomp with backslash followed by high byte\n\nthe regex parser handles the (undefined) case of an unexpected byte\nfollowing a backslash as a literal. however, instead of correctly\ndecoding a character, it was treating the byte value itself as a\ncharacter. this was not only semantically unjustified, but turned out\nto be dangerous on archs where plain char is signed: bytes in the\nrange 252-255 alias the internal codes -4 through -1 used for special\ntypes of literal nodes in the AST.\n"},{"hash":"7c8c86f6308c7e0816b9638465a5917b12159e8f","date":"2015-03-20T22:28:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress backref processing in ERE regcomp\n\none of the features of ERE is that it's actually a regular language\nand does not admit expressions which cannot be matched in linear time.\nintroduction of \\n backref support into regcomp's ERE parsing was\nunintentional.\n"},{"hash":"fc13acc3dcb5b1f215c007f583a63551f6a71363","date":"2015-03-23T13:44:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix internal buffer overrun in inet_pton\n\none stop condition for parsing abbreviated ipv6 addressed was missed,\nallowing the internal ip[] buffer to overflow. this patch adds the\nmissing stop condition and masks the array index so that, in case\nthere are any remaining stop conditions missing, overflowing the\nbuffer is not possible.\n"},{"hash":"11d1e2e2ded07673411ba872c1e3d0096dc79439","date":"2015-03-23T15:26:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix FLT_ROUNDS regression in C++ applications\n\ncommit 559de8f5f06da9022cbba70e22e14a710eb74513 redefined FLT_ROUNDS\nto use an external function that can report the actual current\nrounding mode, rather than always reporting round-to-nearest. however,\nfloat.h did not include 'extern \"C\"' wrapping for C++, so C++ programs\nusing FLT_ROUNDS ended up with an unresolved reference to a\nname-mangled C++ function __flt_rounds.\n"},{"hash":"32dee9b9b1e557a73cc4427455cd00cb2571436c","date":"2015-03-23T16:28:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"do not treat \\0 as a backref in BRE\n\nThe valid BRE backref tokens are \\1 .. \\9, and 0 is not a special\ncharacter either so \\0 is undefined by the standard.\n\nSuch undefined escaped characters are treated as literal characters\ncurrently, following existing practice, so \\0 is the same as 0.\n"},{"hash":"c498efe117539a9d40d90b588c033316701c4b3e","date":"2015-03-28T00:24:30.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: fix character class repetitions\n\nInternally regcomp needs to copy some iteration nodes before\ntranslating the AST into TNFA representation.\n\nLiteral nodes were not copied correctly: the class type and list\nof negated class types were not copied so classes were ignored\n(in the non-negated case an ignored char class caused the literal\nto match everything).\n\nThis affects iterations when the upper bound is finite, larger\nthan one or the lower bound is larger than one. So eg. the EREs\n\n [[:digit:]]{2}\n [^[:space:]ab]{1,4}\n\nwere treated as\n\n .{2}\n [^ab]{1,4}\n\nThe fix is done with minimal source modification to copy the\nnecessary fields, but the AST preparation and node handling\ncode of tre will need to be cleaned up for clarity.\n"},{"hash":"115af23942e024f78779ab29832fed3938c799e7","date":"2015-03-30T03:48:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.8\n"},{"hash":"b24d813d24c412a2e78bab8ef224a1d4c7c25de8","date":"2015-04-01T23:05:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: fix namespace pollution in bits/shm.h\n\nThe shm_info struct is a gnu extension and some of its members do\nnot have shm* prefix. This is worked around in sys/shm.h by macros,\nbut aarch64 didn't use those.\n"},{"hash":"dfc1a37c441fe271dfb19c7de62acadc73e255aa","date":"2015-04-01T23:12:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"aarch64: fix definition of sem_nsems in semid_ds structure\n\nPOSIX requires the sem_nsems member to have type unsigned short. we\nhave to work around the incorrect kernel type using matching\nendian-specific padding.\n"},{"hash":"abfe1f65417a75b39fdcb2bf673c1d75bbee1204","date":"2015-04-01T23:25:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"aarch64: remove duplicate macro definitions in bits/fcntl.h\n"},{"hash":"fd427c4eaeed4d1099acc7b6188e41c6cfa5bca5","date":"2015-04-01T23:31:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move O_PATH definition back to arch bits\n\nwhile it's the same for all presently supported archs, it differs at\nleast on sparc, and conceptually it's no less arch-specific than the\nother O_* macros. O_SEARCH and O_EXEC are still defined in terms of\nO_PATH in the main fcntl.h.\n"},{"hash":"5d1c8c995647914c8682498f613672b6b935ca15","date":"2015-04-02T00:27:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"harden dynamic linker library path search\n\ntransient errors during the path search should not allow the search to\ncontinue and possibly open the wrong file. this patch eliminates most\nconditions where that could happen, but there is still a possibility\nthat $ORIGIN-based rpath processing will have an allocation failure,\ncausing the search to skip such a path. fixing this is left as a\nseparate task.\n\na small bug where overly-long path components caused an infinite loop\nrather than being skipped/ignored is also fixed.\n"},{"hash":"5e25d87b09d1dafc527833d9b4e9a6de99b79aab","date":"2015-04-02T00:35:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove macro definition of longjmp from setjmp.h\n\nthe C standard specifies that setjmp is a macro, but longjmp is a\nnormal function. a macro version of it would be permitted (albeit\nuseless) for C (not C++), but would have to be a function-like macro,\nnot an object-like one.\n"},{"hash":"2963a9f79406c829d5fd710a2e8fe510ee83c006","date":"2015-04-03T20:35:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"halt dynamic linker library search on errors resolving $ORIGIN in rpath\n\nthis change hardens the dynamic linker against the possibility of\nloading the wrong library due to inability to expand $ORIGIN in rpath.\nhard failures such as excessively long paths or absence of /proc (when\nresolving /proc/self/exe for the main executable's origin) do not stop\nthe path search, but memory allocation failures and any other\npotentially transient failures do.\n\nto implement this change, the meaning of the return value of\nfixup_rpath function is changed. returning zero no longer indicates\nthat the dso's rpath string pointer is non-null; instead, the caller\nneeds to check. a return value of -1 indicates a failure that should\nstop further path search.\n"},{"hash":"077096259dafe6703d40f2265bad0819c24bfb12","date":"2015-04-04T04:15:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix rpath string memory leak on failed dlopen\n\nwhen dlopen fails, all partially-loaded libraries need to be unmapped\nand freed. any of these libraries using an rpath with $ORIGIN\nexpansion may have an allocated string for the expanded rpath;\npreviously, this string was not freed when freeing the library data\nstructures.\n"},{"hash":"05e0e301e3efbeb399b9f3d96fab63aac18e601a","date":"2015-04-04T14:53:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix getdelim to set the error indicator on all failures\n"},{"hash":"25748db301c242d36718c6708ffd2b67a456483a","date":"2015-04-07T16:47:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix possible clobbering of syscall return values on mips\n\ndepending on the compiler's interpretation of __asm__ register names\nfor register class objects, it may be possible for the return value in\nr2 to be clobbered by the function call to __stat_fix. I have not\nobserved any such breakage in normal builds and suspect it only\nhappens with -O0 or other unusual build options, but since there's an\nambiguity as to the semantics of this feature, it's best to use an\nexplicit temporary to avoid the issue.\n\nbased on reporting and patch by Eugene.\n"},{"hash":"12e1e324683a1d381b7f15dd36c99b37dd44d940","date":"2015-04-10T04:26:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"process robust list in pthread_exit to fix detached thread use-after-unmap\n\nthe robust list head lies in the thread structure, which is unmapped\nbefore exit for detached threads. this leaves the kernel unable to\nprocess the exiting thread's robust list, and with a dangling pointer\nwhich may happen to point to new unrelated data at the time the kernel\nprocesses it.\n\nuserspace processing of the robust list was already needed for\nnon-pshared robust mutexes in order to perform private futex wakes\nrather than the shared ones the kernel would do, but it was\nconditional on linking pthread_mutexattr_setrobust and did not bother\nprocessing the pshared mutexes in the list, which requires additional\nlogic for the robust list pending slot in case pthread_exit is\ninterrupted by asynchronous process termination.\n\nthe new robust list processing code is linked unconditionally (inlined\nin pthread_exit), handles both private and shared mutexes, and also\nremoves the kernel's reference to the robust list before unmapping and\nexit if the exiting thread is detached.\n"},{"hash":"4e98cce1c529a304d7b55b5455078b9532f93e9b","date":"2015-04-10T04:54:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize out setting up robust list with kernel when not needed\n\nas a result of commit 12e1e324683a1d381b7f15dd36c99b37dd44d940, kernel\nprocessing of the robust list is only needed for process-shared\nmutexes. previously the first attempt to lock any owner-tracked mutex\nresulted in robust list initialization and a set_robust_list syscall.\nthis is no longer necessary, and since the kernel's record of the\nrobust list must now be cleared at thread exit time for detached\nthreads, optimizing it out is more worthwhile than before too.\n"},{"hash":"f08ab9e61a147630497198fe3239149275c0a3f4","date":"2015-04-10T06:27:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"redesign and simplify vmlock system\n\nthis global lock allows certain unlock-type primitives to exclude\nmmap/munmap operations which could change the identity of virtual\naddresses while references to them still exist.\n\nthe original design mistakenly assumed mmap/munmap would conversely\nneed to exclude the same operations which exclude mmap/munmap, so the\nvmlock was implemented as a sort of 'symmetric recursive rwlock'. this\nturned out to be unnecessary.\n\ncommit 25d12fc0fc51f1fae0f85b4649a6463eb805aa8f already shortened the\ninterval during which mmap/munmap held their side of the lock, but\nleft the inappropriate lock design and some inefficiency.\n\nthe new design uses a separate function, __vm_wait, which does not\nhold any lock itself and only waits for lock users which were already\npresent when it was called to release the lock. this is sufficient\nbecause of the way operations that need to be excluded are sequenced:\nthe \"unlock-type\" operations using the vmlock need only block\nmmap/munmap operations that are precipitated by (and thus sequenced\nafter) the atomic-unlock they perform while holding the vmlock.\n\nthis allows for a spectacular lack of synchronization in the __vm_wait\nfunction itself.\n"},{"hash":"a2d3053354432f3e3b5a787c1527d4b414e9acb0","date":"2015-04-10T07:47:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"apply vmlock wait to __unmapself in pthread_exit\n"},{"hash":"385c01112c083eb383d972da45836d497cc0556d","date":"2015-04-11T14:38:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove mismatched arguments from vmlock function definitions\n\ncommit f08ab9e61a147630497198fe3239149275c0a3f4 introduced these\naccidentally as remnants of some work I tried that did not work out.\n"},{"hash":"f3ddd173806fd5c60b3f034528ca24542aecc5b9","date":"2015-04-13T07:04:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"dynamic linker bootstrap overhaul\n\nthis overhaul further reduces the amount of arch-specific code needed\nby the dynamic linker and removes a number of assumptions, including:\n\n- that symbolic function references inside libc are bound at link time\n  via the linker option -Bsymbolic-functions.\n\n- that libc functions used by the dynamic linker do not require\n  access to data symbols.\n\n- that static/internal function calls and data accesses can be made\n  without performing any relocations, or that arch-specific startup\n  code handled any such relocations needed.\n\nremoving these assumptions paves the way for allowing libc.so itself\nto be built with stack protector (among other things), and is achieved\nby a three-stage bootstrap process:\n\n1. relative relocations are processed with a flat function.\n2. symbolic relocations are processed with no external calls/data.\n3. main program and dependency libs are processed with a\n   fully-functional libc/ldso.\n\nreduction in arch-specific code is achived through the following:\n\n- crt_arch.h, used for generating crt1.o, now provides the entry point\n  for the dynamic linker too.\n\n- asm is no longer responsible for skipping the beginning of argv[]\n  when ldso is invoked as a command.\n\n- the functionality previously provided by __reloc_self for heavily\n  GOT-dependent RISC archs is now the arch-agnostic stage-1.\n\n- arch-specific relocation type codes are mapped directly as macros\n  rather than via an inline translation function/switch statement.\n"},{"hash":"f630df09b1fd954eda16e2f779da0b5ecc9d80d3","date":"2015-04-13T21:26:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow i386 __set_thread_area to be called more than once\n\npreviously a new GDT slot was requested, even if one had already been\nobtained by a previous call. instead extract the old slot number from\nGS and reuse it if it was already set. the formula (GS-3)/8 for the\nslot number automatically yields -1 (request for new slot) if GS is\nzero (unset).\n"},{"hash":"0f66fcec2584706116df70cf1db7f2f8815f4444","date":"2015-04-13T22:07:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"stabilize dynamic linker's layout of static TLS\n\npreviously, the layout of the static TLS block was perturbed by the\nsize of the dtv; dtv size increasing from 0 to 1 perturbed both TLS\narch types, and the TLS-above-TP type's layout was perturbed by the\nspecific number of dtv slots (libraries with TLS). this behavior made\nit virtually impossible to setup a tentative thread pointer address\nbefore loading libraries and keep it unchanged as long as the\nlibraries' TLS size/alignment requirements fit.\n\nthe new code fixes the location of the dtv and pthread structure at\nopposite ends of the static TLS block so that they will not move\nunless size or alignment changes.\n"},{"hash":"71f099cb7db821c51d8f39dfac622c61e54d794c","date":"2015-04-13T22:47:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move thread pointer setup to beginning of dynamic linker stage 3\n\nthis allows the dynamic linker itself to run with a valid thread\npointer, which is a prerequisite for stack protector on archs where\nthe ssp canary is stored in TLS. it will also allow us to remove some\nremaining runtime checks for whether the thread pointer is valid.\n\nas long as the application and its libraries do not require additional\nsize or alignment, this early thread pointer will be kept and reused\nat runtime. otherwise, a new static TLS block is allocated after\nlibrary loading has finished and the thread pointer is switched over.\n"},{"hash":"19a1fe670acb3ab9ead0fe31859ca7d4fe40dd54","date":"2015-04-13T23:24:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove remnants of support for running in no-thread-pointer mode\n\nsince 1.1.0, musl has nominally required a thread pointer to be setup.\nmost of the remaining code that was checking for its availability was\ndoing so for the sake of being usable by the dynamic linker. as of\ncommit 71f099cb7db821c51d8f39dfac622c61e54d794c, this is no longer\nnecessary; the thread pointer is now valid before any libc code\n(outside of dynamic linker bootstrap functions) runs.\n\nthis commit essentially concludes \"phase 3\" of the \"transition path\nfor removing lazy init of thread pointer\" project that began during\nthe 1.1.0 release cycle.\n"},{"hash":"1ef849c6ec6a4e30badc844371cdf1b9eedfba57","date":"2015-04-14T00:19:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow libc itself to be built with stack protector enabled\n\nthis was already essentially possible as a result of the previous\ncommits changing the dynamic linker/thread pointer bootstrap process.\nthis commit mainly adds build system infrastructure:\n\nconfigure no longer attempts to disable stack protector. instead it\nsimply determines how so the makefile can disable stack protector for\na few translation units used during early startup.\n\nstack protector is also disabled for memcpy and memset since compilers\n(incorrectly) generate calls to them on some archs to implement\nstruct initialization and assignment, and such calls may creep into\nearly initialization.\n\nno explicit attempt to enable stack protector is made by configure at\nthis time; any stack protector option supported by the compiler can be\npassed to configure in CFLAGS, and if the compiler uses stack\nprotector by default, this default is respected.\n"},{"hash":"f4f9562cc963181ca0ea04fbe6d31f4ca14a5d8c","date":"2015-04-14T02:38:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove initializers for decoded aux/dyn arrays in dynamic linker\n\nthe zero initialization is redundant since decode_vec does its own\nclearing, and it increases the risk that buggy compilers will generate\ncalls to memset. as long as symbols are bound at ld time, such a call\nwill not break anything, but it may be desirable to turn off ld-time\nbinding in the future.\n"},{"hash":"f1faa0e12fd68379420b07ebf2eba43a5be1f2d3","date":"2015-04-14T04:28:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make _dlstart_c function use hidden visibility\n\notherwise the call/jump from the crt_arch.h asm may not resolve\ncorrectly without -Bsymbolic-functions.\n"},{"hash":"da7ccf822c2a7f0413868b8d99029907f1d61a41","date":"2015-04-14T14:22:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use hidden visibility for i386 asm-internal __vsyscall symbol\n\notherwise the call instruction in the inline syscall asm results in\ntextrels without ld-time binding.\n"},{"hash":"bc081f628b51337b525ca2d53aeff1b971f092f5","date":"2015-04-14T14:42:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inconsistent visibility for internal __tls_get_new function\n\nat the point of call it was declared hidden, but the definition was\nnot hidden. for some toolchains this inconsistency produced textrels\nwithout ld-time binding.\n"},{"hash":"cbc02ba23cec16d7a821648ea8424546bc7f02dc","date":"2015-04-14T15:18:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"consistently use hidden visibility for cancellable syscall internals\n\nin a few places, non-hidden symbols were referenced from asm in ways\nthat assumed ld-time binding. while these is no semantic reason these\nsymbols need to be hidden, fixing the references without making them\nhidden was going to be ugly, and hidden reduces some bloat anyway.\n\nin the asm files, .global/.hidden directives have been moved to the\ntop to unclutter the actual code.\n"},{"hash":"72b25ddb77ca0974b6f448a4290d21154a221474","date":"2015-04-14T15:39:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use hidden visibility for call from dlsym to internal __dlsym\n"},{"hash":"7405cd1e2bafc046b4311005b94092d74a7a9c66","date":"2015-04-14T17:48:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inconsistent visibility for internal syscall symbols\n"},{"hash":"9c738dc183f44de40d263e4ff8dc540915a41aed","date":"2015-04-14T17:49:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"cleanup use of visibility attributes in pthread_cancel.c\n\napplying the attribute to a weak_alias macro was a hack. instead use a\nseparate declaration to apply the visibility, and consolidate\ndeclarations together to avoid having visibility mess all over the\nfile.\n"},{"hash":"81e18eb3cd61f7b68a8f99b3e6c728f2a4d79221","date":"2015-04-15T03:45:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use hidden __tls_get_new for tls/tlsdesc lookup fallback cases\n\npreviously, the dynamic tlsdesc lookup functions and the i386\nspecial-ABI ___tls_get_addr (3 underscores) function called\n__tls_get_addr when the slot they wanted was not already setup;\n__tls_get_addr would then in turn also see that it's not setup and\ncall __tls_get_new.\n\ncalling __tls_get_new directly is both more efficient and avoids the\nissue of calling a non-hidden (public API/ABI) function from asm.\n\nfor the special i386 function, a weak reference to __tls_get_new is\nused since this function is not defined when static linking (the code\npath that needs it is unreachable in static-linked programs).\n"},{"hash":"583e55122e767b1586286a0d9c35e2a4027998ab","date":"2015-04-18T01:54:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"redesign sigsetjmp so that signal mask is restored after longjmp\n\nthe conventional way to implement sigsetjmp is to save the signal mask\nthen tail-call to setjmp; siglongjmp then restores the signal mask and\ncalls longjmp. the problem with this approach is that a signal already\npending, or arriving between unmasking of signals and restoration of\nthe saved stack pointer, will have its signal handler run on the stack\nthat was active before siglongjmp was called. this can lead to\nunbounded stack usage when siglongjmp is used to leave a signal\nhandler.\n\nin the new design, sigsetjmp saves its own return address inside the\nextended part of the sigjmp_buf (outside the __jmp_buf part used by\nsetjmp) then calls setjmp to save a jmp_buf inside its own execution.\nit then tail-calls to __sigsetjmp_tail, which uses the return value of\nsetjmp to determine whether to save the current signal mask or restore\na previously-saved mask.\n\nas an added bonus, this design makes it so that siglongjmp and longjmp\nare identical. this is useful because the __longjmp_chk function we\nneed to add for ABI-compatibility assumes siglongjmp and longjmp are\nthe same, but for different reasons -- it was designed assuming either\ncan access a flag just past the __jmp_buf indicating whether the\nsignal masked was saved, and act on that flag. however, early versions\nof musl did not have space past the __jmp_buf for the non-sigjmp_buf\nversion of jmp_buf, so our setjmp cannot store such a flag without\nrisking clobbering memory on (very) old binaries.\n"},{"hash":"64fbd15fc5274d4e87d27496ddfb5d064c056585","date":"2015-04-18T02:14:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sh __set_thread_area uninitialized return value\n\nthis caused the dynamic linker/startup code to abort when r0 happened\nto contain a negative value.\n"},{"hash":"33615cd5ca4d40286d3000a941f96c5bebdf39fb","date":"2015-04-18T02:18:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sh build regressions in asm\n\neven hidden functions need @PLT symbol references; otherwise an\nabsolute address is produced instead of a PC-relative one.\n"},{"hash":"aecdbb3042704075b303b626da424aa0665e4f97","date":"2015-04-18T02:19:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix PLT call offset in sh dlsym asm\n\nthe braf instruction's destination register is an offset from the\naddress of the braf instruction plus 4 (or equivalently, the address\nof the next instruction after the delay slot). the code for dlsym was\nincorrectly computing the offset to pass using the address of the\ndelay slot itself. in other places, a label was placed after the delay\nslot, but I find this confusing. putting the label on the branch\ninstruction itself, and manually adding 4, makes it more clear which\nbranch the offset in the constant pool goes with.\n"},{"hash":"8b0d66d21cc6934de16d909050c97962edb33788","date":"2015-04-18T02:19:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips fesetenv(FE_DFL_ENV) again\n\ncommit 5fc1487832e16aa2119e735a388d5f36c8c139e2 attempted to fix it,\nbut neglected the fact that mips has branch delay slots.\n"},{"hash":"19bcdeeb1ebef6d209dfa938011c856bc3444a92","date":"2015-04-18T02:21:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing quotation mark in mips crt_arch.h that broke build\n"},{"hash":"2ca55a93f2a11185d72dcb69006fd2c30b5c3144","date":"2015-04-18T02:24:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve ctype.h macros to diagnose errors\n\nthe casts of the argument to unsigned int suppressed diagnosis of\nerrors like passing a pointer instead of a character. putting the\nactual function call in an unreachable branch restores any diagnostics\nthat would be present if the macros didn't exist and functions were\nused.\n"},{"hash":"87c62d06e4398954760a43253d374df99e5e036f","date":"2015-04-18T02:31:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add execveat syscall number to microblaze\n\nsyscall number was reserved in linux v4.0, kernel commit\nadd4b1b02da7e7ec35c34dd04d351ac53f3f0dd8\n"},{"hash":"1bfeb1dcd00247b3976a7a5d74b09653573e6af3","date":"2015-04-18T02:31:27.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add IP_CHECKSUM socket option to netinet/in.h\n\nnew in linux v4.0, commit ad6f939ab193750cc94a265f58e007fb598c97b7\n"},{"hash":"658aefdf336b9465a50b779d9b7f1d23363c0027","date":"2015-04-18T02:31:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add PR_MPX_*_MANAGEMENT prctl options\n\nnew in linux v3.19, commit fe3d197f84319d3bce379a9c0dc17b1f48ad358c\nused for on-demand kernel allocation of bounds tables for mpx on x86\n"},{"hash":"02e5d564217cf2c92418f1cb5304754cfc9d57ff","date":"2015-04-18T02:31:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add PR_*_FP_MODE prctl options\n\nnew in linux v4.0, commit 9791554b45a2acc28247f66a5fd5bbc212a6b8c8\nused to work around a floating-point abi issue on mips\n"},{"hash":"326e126faf91e2c18a8a656fbb0daab54b1818d6","date":"2015-04-18T03:23:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ensure debugger hook for dynamic linker does not point to a PLT slot\n\nthis change is made in preparation to support linking without\n-Bsymbolic-functions.\n"},{"hash":"ca7977b56fc126e933ced21321a24db5477e085b","date":"2015-04-18T03:27:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"comment fixes in aarch64 tlsdesc asm\n"},{"hash":"1b1cafa50c11d4c772a4f938b2feb7cbcc5f992a","date":"2015-04-18T03:29:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"apply hidden visibility to tlsdesc accessor functions\n\nthese functions are never called directly; only their addresses are\nused, so PLT indirections should never happen unless a broken\napplication tries to redefine them, but it's still best to make them\nhidden.\n"},{"hash":"cb5c057c87240a9534f8e0d9b7ff2560082f6218","date":"2015-04-18T04:18:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix pow(+-0,-inf) not to raise divbyzero flag\n\nthis reverts the commit f29fea00b5bc72d4b8abccba2bb1e312684d1fce\nwhich was based on a bug in C99 and POSIX and did not match IEEE-754\nhttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n1515.pdf\n"},{"hash":"fa80787698536ecd8b9028703a3bc2e3f59e3d65","date":"2015-04-18T20:59:00.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"add missing 'void' in prototypes of internal pthread functions\n"},{"hash":"01d42747118522b7a486ece1736b93c6d5751344","date":"2015-04-18T22:00:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dlerror state and message thread-local and dynamically-allocated\n\nthis fixes truncation of error messages containing long pathnames or\nsymbol names.\n\nthe dlerror state was previously required by POSIX to be global. the\nresolution of bug 97 relaxed the requirements to allow thread-safe\nimplementations of dlerror with thread-local state and message buffer.\n"},{"hash":"8ed66ecbcba1dd0f899f22b534aac92a282f42d5","date":"2015-04-19T00:45:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove the last of possible-textrels from i386 asm\n\nnone of these are actual textrels because of ld-time binding performed\nby -Bsymbolic-functions, but I'm changing them with the goal of making\nld-time binding purely an optimization rather than relying on it for\nsemantic purposes.\n\nin the case of memmove's call to memcpy, making it explicit that the\nmemmove asm is assuming the forward-copying behavior of the memcpy asm\nis desirable anyway; in case memcpy is ever changed, the semantic\nmismatch would be apparent while editing memmcpy.s.\n"},{"hash":"b35c4c475bea3c8f938d8e9696d1138eabb54a89","date":"2015-04-19T01:18:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove potentially PIC-incompatible relocations from x86_64 and x32 asm\n\nanalogous to commit 8ed66ecbcba1dd0f899f22b534aac92a282f42d5 for i386.\n"},{"hash":"646cb9a4a04e5ed78e2dd928bf9dc6e79202f609","date":"2015-04-20T00:50:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove invalid PLT calls from sh asm\n\nthese are perfectly fine with ld-time symbol binding, but if the calls\ngo through a PLT thunk, they are invalid because the caller does not\nsetup a GOT register. use a hidden alias to bypass the issue.\n"},{"hash":"a880e6ceb9c2e6f38a6b50f8aafab90256c04be1","date":"2015-04-20T00:56:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove invalid PLT calls from microblaze asm\n\nanalogous to commit 646cb9a4a04e5ed78e2dd928bf9dc6e79202f609 for sh.\n"},{"hash":"cf1a9d9d16a79322df15b344a2617b79ebb12705","date":"2015-04-20T01:20:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove possible-textrels from powerpc asm\n\nthese are perfectly fine with ld-time symbol binding, but otherwise\nresult in textrels. they cannot be replaced with @PLT jump targets\nbecause the PLT thunks require a GOT register to be setup, so use a\nhidden alias instead.\n"},{"hash":"51fc77c7c03fa0b300e9a609b18f11f0e4db065a","date":"2015-04-20T01:49:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove invalid PLT calls from or1k asm\n\nanalogous to commit 646cb9a4a04e5ed78e2dd928bf9dc6e79202f609 for sh.\n"},{"hash":"de2b67f8d41e08caa56bf6540277f6561edb647f","date":"2015-04-20T02:05:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add optional global visibility override\n\nthis is implemented via the build system and does not affect source\nfiles. the idea is to use protected or hidden visibility to prevent\nthe compiler from pessimizing function calls within a shared (or\nposition-independent static) libc in the form of overhead setting up\nfor a call through the PLT. the ld-time symbol binding via the\n-Bsymbolic-functions option already optimized out the PLT itself, but\nnot the code in the caller needed to support a call through the PLT.\non some archs this overhead can be substantial; on others it's\ntrivial.\n"},{"hash":"60ed988fd6c67b489d7cc186ecaa9db4e5c25b8c","date":"2015-04-20T22:14:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in configure script with new visibility option\n\ncommit de2b67f8d41e08caa56bf6540277f6561edb647f introduced a\nregression by adding a -include option to CFLAGS_AUTO which did not\nwork without additional -I options. this broke subsequent trycppif\ntests and caused x86_64 to be misdetected as x32, among other issues.\nsimply using the full relative pathname to vis.h rather than -I is the\ncleanest way to fix the problem.\n"},{"hash":"4bf10ebf66e0c675c549032fc72915beb92d1312","date":"2015-04-20T22:17:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in x32 dynamic linker due to mismatching register size\n\nthe jmp instruction requires a 64-bit register, so cast the desired PC\naddress up to uint64_t, going through uintptr_t to ensure that it's\nzero-extended rather than possibly sign-extended.\n"},{"hash":"97b72d22ad53e8f1306bf8e943571b698058f49d","date":"2015-04-21T17:07:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove redundant code in do_dlsym function\n\ncommit 637dd2d383cc1f63bf02a732f03786857b22c7bd introduced the checks\nfor RTLD_DEFAULT and RTLD_NEXT here, claiming they fixed a regression,\nbut the above conditional block clearly already covered these cases,\nand removing the checks produces no difference in the generated code.\n"},{"hash":"c5ab5bd3be15eb9d49222df132a51ae8e8f78cbc","date":"2015-04-21T17:22:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove always-true conditional in dynamic linker TLSDESC processing\n\nthe allocating path which can fail is for dynamic TLS, which can only\noccur at runtime, and the check for runtime was already made in the\nouter conditional.\n"},{"hash":"086793ad99dc625fd1c47f96fc31ea8aa316b438","date":"2015-04-21T17:24:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mmap leak in sem_open failure path for link call\n\nthe leak was found by static analysis (reported by Alexander Monakov),\nnot tested/observed, but seems to have occured both when failing due\nto O_EXCL, and in a race condition with O_CREAT but not O_EXCL where a\nsemaphore by the same name was created concurrently.\n"},{"hash":"ea1b6bb6123d2177508ddca438669ec96cfa0021","date":"2015-04-21T17:34:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove dead case for F_SETLKW in fcntl\n\nthe first switch already returns in the F_SETLKW code path so it need\nnot be handled in the second switch. moreover the code in the second\nswitch is wrong for the F_SETLKW command: it's not cancellable.\n"},{"hash":"a6274a1971b7aa1d12fdce3d040f847539a71049","date":"2015-04-21T17:38:48.000Z","author":{"name":"Andre McCurdy","email":"armccurdy@gmail.com"},"message":"configure: check for -march and -mtune passed via CC\n\nSome build environments pass -march and -mtune as part of CC, therefore\nupdate configure to check both CC and CFLAGS before making the decision\nto fall back to generic -march and -mtune options for x86.\n\nSigned-off-by: Andre McCurdy <armccurdy@gmail.com>\n"},{"hash":"873e0ec7fc4d466cfcdec16a7648cc18609ba702","date":"2015-04-21T17:54:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix duplocale clobbering of new locale struct with memcpy of old\n\nwhen the non-stub duplocale code was added as part of the locale\nframework in commit 0bc03091bb674ebb9fa6fe69e4aec1da3ac484f2, the old\ncode to memcpy the old locale object to the new one was left behind.\nthe conditional for the memcpy no longer makes sense, because the\nconditions are now always-true when it's reached, and the memcpy is\nwrong because it clobbers the new->messages_name pointer setup just\nabove.\n\nsince the messages_name and ctype_utf8 members have already been\ncopied, all that remains is the cat[] array. these pointers are\nvolatile, so using memcpy to copy them is formally wrong; use a for\nloop instead.\n"},{"hash":"428462a4c355f32e09fa5e578043c15ea91e29f7","date":"2015-04-22T05:47:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure check for visibility preinclude compatible with pcc\n\npcc does not search for -include relative to the working directory\nunless -I. is used. rather than adding -I., which could be problematic\nif there's extra junk in the top-level directory, switch back to the\nold method (reverting commit 60ed988fd6c67b489d7cc186ecaa9db4e5c25b8c)\nof using -include vis.h and relying on -I./src/internal being present\non the command line (which the Makefile guarantees). to fix the\nbreakage that was present in trycppif checks with the old method,\n$CFLAGS_AUTO is removed from the command line passed to trycppif; this\nis valid since $CFLAGS_AUTO should not contain options that alter\ncompiler semantics or ABI, only optimizations, warnings, etc.\n"},{"hash":"f9cccfc16e58b39ee381fbdfb8688db3bb8e3555","date":"2015-04-22T06:21:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cruft for libc struct accessor function and broken visibility\n\nthese were hacks to work around toolchains that could not properly\noptimize PIC accesses based on visibility and would generate GOT\nlookups even for hidden data, which broke the old dynamic linker.\nsince commit f3ddd173806fd5c60b3f034528ca24542aecc5b9 it no longer\nmatters; the dynamic linker does not assume accessibility of this data\nuntil stage 3.\n"},{"hash":"9d836f444fbbf9e56155e5f2589d2bb8698c033c","date":"2015-04-22T06:34:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove libc.h dependency from otherwise-independent multibyte code\n"},{"hash":"c267fb849fdddfa236adf9c3b8b9cecc55ebb185","date":"2015-04-22T06:36:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove useless visibility application from static-linking-only code\n\npart of the goal here is to eliminate use of the ATTR_LIBC_VISIBILITY\nmacro outside of libc.h, since it was never intended to be 'public'.\n"},{"hash":"3e827b7e68eda9813055a544d240c20d025c77c9","date":"2015-04-22T06:39:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove additional libc struct accessor cruft\n\ncommit f9cccfc16e58b39ee381fbdfb8688db3bb8e3555 left behind the part\nin libc.c; remove it too.\n"},{"hash":"f203b3511f4715695ee932049944c4922d5d3025","date":"2015-04-22T06:53:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inconsistent visibility for __hwcap and __sysinfo symbols\n\nthese are used as hidden by asm files (and such use is the whole\nreason they exist), but their actual definitions were not hidden.\n"},{"hash":"b8dda24fe1caa901a99580f7a52defb95aedb67c","date":"2015-04-22T07:07:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in visibility preinclude, remove overrides for stdin/stdout/stderr\n\nthe motivation for this change is that the extra declaration (with or\nwithout visibility) using \"struct _IO_FILE\" instead of \"FILE\" seems to\ntrigger a bug in gcc 3.x where it considers the types mismatched.\nhowever, this change also results in slightly better code and it is\nvalid because (1) these three objects are constant, and (2) applying\nthe & operator to any of them is invalid C, since they are not even\nspecified to be objects. thus it does not matter if the application\nand libc see different addresses for them, as long as the (initial,\nunchanging) value is seen the same by both.\n"},{"hash":"7b1fb0c526936873a260e860ce3bca82113c3d4c","date":"2015-04-22T07:16:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"optimize spin lock not to dirty cache line while spinning\n"},{"hash":"afbcac6826988d12d9a874359cab735049c17500","date":"2015-04-22T07:24:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"minor optimization to pthread_spin_trylock\n\nuse CAS instead of swap since it's lighter for most archs, and keep\nEBUSY in the lock value so that the old value obtained by CAS can be\nused directly as the return value for pthread_spin_trylock.\n"},{"hash":"3aacb54ead6ef83c3da1216687a34e97b494f5ca","date":"2015-04-23T02:11:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix syntax errors in configure script\n"},{"hash":"18938c299c0923e7034e8bfc5b250ded3b0ef78a","date":"2015-04-23T10:21:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in x86_64 math asm with old binutils\n\nthe implicit-operand form of fucomip is rejected by binutils 2.19 and\nperhaps other versions still in use. writing both operands explicitly\nfixes the issue. there is no change to the resulting output.\n\ncommit a732e80d33b4fd6f510f7cec4f5573ef5d89bc4e was the source of this\nregression.\n"},{"hash":"f109781c16b0cf82cf6bf523ff77ab98a023a999","date":"2015-04-23T20:49:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add dependency of dlstart.lo on crt_arch.h to Makefile\n"},{"hash":"5f51d529155429e607c5c51d5d461b0b98e6be52","date":"2015-04-23T21:04:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make __init_tp function static when static linking\n\nthis slightly reduces the code size cost of TLS/thread-pointer for\nstatic linking since __init_tp can be inlined into its only caller and\nremoved. this is analogous to the handling of __init_libc in\n__libc_start_main, where the function only has external linkage when\nit needs to be called from the dynamic linker.\n"},{"hash":"23129ab8d5f86927aad4f67c1820362acce09c45","date":"2015-04-23T21:37:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove dead store from static __init_tls\n\ncommit dab441aea240f3b7c18a26d2ef51979ea36c301c, which made thread\npointer init mandatory for all programs, rendered this store obsolete\nby removing the early-return path for static programs with no TLS.\n"},{"hash":"abead1be6d4a303037ee65a4009c59e5b5fe0a82","date":"2015-04-23T22:51:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misalignment of dtv in static-linked programs with odd-sized TLS\n\nboth static and dynamic linked versions of the __copy_tls function\nhave a hidden assumption that the alignment of the beginning or end of\nthe memory passed is suitable for storing an array of pointers for the\ndtv. pthread_create satisfies this requirement except when\nlibc.tls_size is misaligned, which cannot happen with dynamic linking\ndue to way update_tls_size computes the total size, but could happen\nwith static linking and odd-sized TLS.\n"},{"hash":"7faee5fa0d09a1d3a64141ee597ed9a853fd5892","date":"2015-04-24T15:06:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of sh reloc.h to properly detect endianness for ldso name\n\nversions of reloc.h that rely on endian macros much include endian.h\nto ensure they are available.\n"},{"hash":"a658afbf94a41108d2e01bbc4113011b792b3bad","date":"2015-04-24T15:45:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression in sh-nofpu subarch due to missing symbol\n\ncommit 646cb9a4a04e5ed78e2dd928bf9dc6e79202f609 switched sigsetjmp to\nuse the new hidden ___setjmp symbol for setjmp, but the nofpu variant\nof setjmp.s was not updated to match.\n"},{"hash":"1fb0878ebc037ee2ad9e31e5873b6c7f95b22c1c","date":"2015-04-24T17:05:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ldso name for sh-nofpu subarch\n\npreviously it was using the same name as the default ABI with hard\nfloat (floating point args and return value in registers).\n\nthe test __SH_FPU_ANY__ || __SH4__ matches what's used in the\nconfigure script already, and seems correct under casual review\nagainst gcc's config/sh.h, but may need tweaks. the logic for\npredefined macros for sh, and what they all mean, is very complex.\neventually this should be documented in comments here.\n\nconfigure already rejects \"half-hard\" configurations on sh where\ndouble=float since these do not conform to Annex F and are not\nsuitable for musl, so these do not need to be considered here.\n"},{"hash":"94f4c8237a58eba21ae24e19ea2d5b7321c0c1f6","date":"2015-04-25T02:08:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression in aarch64 sigsetjmp\n\nat least some assembler versions do not accept the register name lr.\nuse the name x30 instead.\n"},{"hash":"82acacceaa1bdcb9fb5ec8cece8a73bbf7a561b9","date":"2015-04-27T17:20:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix name of sh crt asm directory\n"},{"hash":"85d12e02858545f8942a9c5c9f0eddc2da75edce","date":"2015-04-28T00:03:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix sh jmp_buf size to match ABI\n\nwhile the sh port is still experimental and subject to ABI\ninstability, this is not actually an application/libc boundary ABI\nchange. it only affects third-party APIs where jmp_buf is used in a\nshared structure at the ABI boundary, because nothing anywhere near\nthe end of the jmp_buf object (which includes the oversized sigset_t)\nis accessed by libc.\n\nboth glibc and uclibc have 15-slot jmp_buf for sh. presumably the\nsmaller version was used in musl because the slots for fpu status\nregister and thread pointer register (gbr) were incorrect and must not\nbe restored by longjmp, but the size should have been preserved, as\nit's generally treated as a libc-agnostic ABI property for the arch,\nand having extra slots free in case we ever need them for something is\nuseful anyway.\n"},{"hash":"4e50b2e4b5c32b804324eb6967a9ca72c9a2b654","date":"2015-04-30T20:21:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: fix CRTJMP in reloc.h\n\ncommit f3ddd173806fd5c60b3f034528ca24542aecc5b9 broke the build by\nusing \"bx\" instead of \"br\".\n"},{"hash":"18f75b80fd67fd7348fcfb807216f654597b592f","date":"2015-04-30T20:22:57.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix __syscall declaration with wrong visibility in syscall_arch.h\n\nremove __syscall declaration where it is not needed (aarch64, arm,\nmicroblaze, or1k) and add the hidden attribute where it is (mips).\n"},{"hash":"58fa856960d3073bcf84adac8e8bd6c555674271","date":"2015-05-01T16:25:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mishandling of ENOMEM return case in internal getgrent_a function\n\ndue to an incorrect return statement in this error case, the\npreviously blocked cancellation state was not restored and no result\nwas stored. this could lead to invalid (read) accesses in the caller\nresulting in crashes or nonsensical result data in the event of memory\nexhaustion.\n"},{"hash":"e98a54643ee95032baab883673628314e520012e","date":"2015-05-01T17:35:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix integer overflow in elf.h macro SHF_EXCLUDE\n"},{"hash":"b02eed9c4841913d690a2d0029737d72615384fe","date":"2015-05-01T17:37:42.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"complex: fix ctanh(+-0+i*nan) and ctanh(+-0+-i*inf)\n\nThese cases were incorrect in C11 as described by\nhttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n1886.htm\n"},{"hash":"7561ac45ed94743c259c636cd15c048f492ffec1","date":"2015-05-01T17:38:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add IPTOS_CLASS_* macros to netinet/ip.h\n\nThese macros were introduced in glibc 2.12 to follow RFC 2474 which\ndeprecates \"IP Precedence\" in favor of \"Class Selector Codepoints\".\n"},{"hash":"4f69594689992d76088f2b0af79cd91c40579f64","date":"2015-05-02T01:22:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dangling pointers in x32 syscall timespec fixup code\n\nthe lifetime of compound literals is the block in which they appear.\nthe temporary struct __timespec_kernel objects created as compound\nliterals no longer existed at the time their addresses were passed to\nthe kernel.\n"},{"hash":"2d5c74c21e0483128624c43d4399ef49e057e264","date":"2015-05-02T15:53:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix x32 __set_thread_area failure due to junk in upper bits\n\nthe kernel does not properly clear the upper bits of the syscall\nargument, so we have to do it before the syscall.\n"},{"hash":"551c1d7a5718667da2ee56434c18f0a9b9612ed2","date":"2015-05-02T15:57:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash in x32 sigsetjmp\n\nthe 64-bit push reads not only the 32-bit return address but also the\nfirst 32 signal mask bits. if any were nonzero, the return address\nobtained will be invalid.\n\nat some point storage of the return address should probably be moved\nto follow the saved mask so that there's plenty room and the same code\ncan be used on x32 and regular x86_64, but for now I want a fix that\ndoes not risk breaking x86_64, and this simple re-zeroing works.\n"},{"hash":"7fe273b2c163e4594221375120c6ce209a783262","date":"2015-05-02T16:16:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix broken cancellation on x32 due to incorrect saved-PC offset\n"},{"hash":"d0040e239e8d3048a7fb38f0bacaad4838fac605","date":"2015-05-03T01:19:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve iswdigit macro to diagnose errors\n\nthis is analogous to commit 2ca55a93f2a11185d72dcb69006fd2c30b5c3144\nfor the macros in ctype.h.\n"},{"hash":"484194dbf41758eec0ef62fef5fe9350c21b9241","date":"2015-05-06T22:37:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stack protector crashes on x32 & powerpc due to misplaced TLS canary\n\ni386, x86_64, x32, and powerpc all use TLS for stack protector canary\nvalues in the default stack protector ABI, but the location only\nmatched the ABI on i386 and x86_64. on x32, the expected location for\nthe canary contained the tid, thus producing spurious mismatches\n(resulting in process termination) upon fork. on powerpc, the expected\nlocation contained the stdio_locks list head, so returning from a\nfunction after calling flockfile produced spurious mismatches. in both\ncases, the random canary was not present, and a predictable value was\nused instead, making the stack protector hardening much less effective\nthan it should be.\n\nin the current fix, the thread structure has been expanded to have\ncanary fields at all three possible locations, and archs that use a\nnon-default location must define a macro in pthread_arch.h to choose\nwhich location is used. for most archs (which lack TLS canary ABI) the\nchoice does not matter.\n"},{"hash":"ece0c48a603a58b26672ee2eeea7554991fcafa1","date":"2015-05-06T22:53:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix futimes legacy function with null tv pointer\n\na null pointer is valid here and indicates that the current time\nshould be used. based on patch by Felix Janda, simplified.\n"},{"hash":"20de36cc89a4d5d44ff12511eae36eb15df982fb","date":"2015-05-08T12:35:16.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix netinet/ether.h for c++\n"},{"hash":"dbf74a98be1e5c7564566c2ad30ce85dcf768df6","date":"2015-05-12T23:19:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.9\n"},{"hash":"83340c7a580e91b22f58321b7cf6d976af61084c","date":"2015-05-14T22:26:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make arm crt_arch.h compatible with thumb code generation\n\ncompilers targeting armv7 may be configured to produce thumb2 code\ninstead of arm code by default, and in the future we may wish to\nsupport targets where only the thumb instruction set is available.\n\nthe changes made here avoid operating directly on the sp register,\nwhich is not possible in thumb code, and address an issue with the way\nthe address of _DYNAMIC is computed.\n\npreviously, the relative address of _DYNAMIC was stored with an\nadditional offset of -8 versus the pc-relative add instruction, since\non arm the pc register evaluates to \".+8\". in thumb code, it instead\nevaluates to \".+4\". both are two (normal-size) instructions beyond \".\"\nin the current execution mode, so the numbered label 2 used in the\nrelative address expression is simply moved two instructions ahead to\nbe compatible with both instruction sets.\n"},{"hash":"c0f10cf06725bd0de37f3ced7954a653bf9f1049","date":"2015-05-14T22:51:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make arm reloc.h CRTJMP macro compatible with thumb\n\ncompilers targeting armv7 may be configured to produce thumb2 code\ninstead of arm code by default, and in the future we may wish to\nsupport targets where only the thumb instruction set is available.\n\nthe instructions this patch omits in thumb mode are needed only for\nnon-thumb versions of armv4 or earlier, which are not supported by any\ncurrent compilers/toolchains and thus rather pointless to have. at\nsome point these compatibility return sequences may be removed from\nall asm source files, and in that case it would make sense to remove\nthem here too and remove the ifdef.\n"},{"hash":"707d7c30f3379441de9b320536ddfd354f4c2143","date":"2015-05-16T05:15:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in i386 __set_thread_area, don't assume %gs register is initially zero\n\ncommit f630df09b1fd954eda16e2f779da0b5ecc9d80d3 added logic to handle\nthe case where __set_thread_area is called more than once by reusing\nthe GDT slot already in the %gs register, and only setting up a new\nGDT slot when %gs is zero. this created a hidden assumption that %gs\nis zero when a new process image starts, which is true in practice on\nLinux, but does not seem to be documented ABI, and fails to hold under\nqemu app-level emulation.\n\nwhile it would in theory be possible to zero %gs in the entry point\ncode, this code is shared between static and dynamic binaries, and\ndynamic binaries must not clobber the value of %gs already setup by\nthe dynamic linker.\n\nthe alternative solution implemented in this commit simply uses global\ndata to store the GDT index that's selected. __set_thread_area should\nonly be called in the initial thread anyway (subsequent threads get\ntheir thread pointer setup by __clone), but even if it were called by\nanother thread, it would simply read and write back the same GDT index\nthat was already assigned to the initial thread, and thus (in the x86\nmemory model) there is no data race.\n"},{"hash":"68630b55c0c7219fe9df70dc28ffbf9efc8021d8","date":"2015-05-16T05:53:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate costly tricks to avoid TLS access for current locale state\n\nthe code being removed used atomics to track whether any threads might\nbe using a locale other than the current global locale, and whether\nany threads might have abstract 8-bit (non-UTF-8) LC_CTYPE active, a\nfeature which was never committed (still pending). the motivations\nwere to support early execution prior to setup of the thread pointer,\nto partially support systems (ancient kernels) where thread pointer\nsetup is not possible, and to avoid high performance cost on archs\nwhere accessing the thread pointer may be very slow.\n\nsince commit 19a1fe670acb3ab9ead0fe31859ca7d4fe40dd54, the thread\npointer is always available, so these hacks are no longer needed.\nremoving them greatly simplifies the affected code.\n"},{"hash":"43e9f652bf4b2195b04fc14c93db591b30a7b790","date":"2015-05-18T16:11:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix null pointer dereference in dcngettext under specific conditions\n\nif setlocale has not been called, the current locale's messages_name\nmay be a null pointer. the code path where it's assumed to be non-null\nwas only reachable if bindtextdomain had already been called, which is\nnormally not done in programs which do not call setlocale, so the\nomitted check went unnoticed.\n\npatch from Void Linux, with description rewritten.\n"},{"hash":"c093e2e8201524db0d638920e76bcb6b1d925f3a","date":"2015-05-18T20:51:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reprocess libc/ldso RELA relocations in stage 3 of dynamic linking\n\nthis fixes a regression on powerpc that was introduced in commit\nf3ddd173806fd5c60b3f034528ca24542aecc5b9. global data accesses on\npowerpc seem to be using a translation-unit-local GOT filled via\nR_PPC_ADDR32 relocations rather than R_PPC_GLOB_DAT. being a non-GOT\nrelocation type, these were not reprocessed after adding the main\napplication and its libraries to the chain, causing libc code not to\nsee copy relocations in the main program, and therefore to use the\npre-copy-relocation addresses for global data objects (like environ).\n\nthe motivation for the dynamic linker only reprocessing GOT/PLT\nrelocation types in stage 3 is that these types always have a zero\naddend, making them safe to process again even if the storage for the\naddend has been clobbered. other relocation types which can be used\nfor address constants in initialized data objects may have non-zero\naddends which will be clobbered during the first pass of relocation\nprocessing if they're stored inline (REL form) rather than out-of-line\n(RELA form).\n\npowerpc generally uses only RELA, so this patch is sufficient to fix\nthe regression in practice, but is not fully general, and would not\nsuffice if an alternate toolchain generated REL for powerpc.\n"},{"hash":"390f93ef69153bf2087fcf3baa1776ad9a6765ab","date":"2015-05-19T04:42:07.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"inline llsc atomics when building for sh4a\n\nIf we're building for sh4a, the compiler is already free to use\ninstructions only available on sh4a, so we can do the same and inline the\nllsc atomics. If we're building for an older processor, we still do the\nsame runtime atomics selection as before.\n"},{"hash":"c648cefb27984db60474ec1747cbfde83c2856d0","date":"2015-05-20T04:17:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix inconsistency in a_and and a_or argument types on x86[_64]\n\nconceptually, and on other archs, these functions take a pointer to\nint, but in the i386, x86_64, and x32 versions of atomic.h, they took\na pointer to void instead.\n"},{"hash":"39b8ce66f2ed9c17427ec3a48be9bda29b93b9d7","date":"2015-05-21T21:01:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in iconv_open, accept \"CHAR\" and \"\" as aliases for \"UTF-8\"\n\nwhile not a requirement, it's common convention in other iconv\nimplementations to accept \"CHAR\" as an alias for nl_langinfo(CODESET),\nmeaning the encoding used for char[] strings in the current locale,\nand also \"\" as an alternate form. supporting this is not costly and\nimproves compatibility.\n"},{"hash":"3b0e83264d156f9e496ab32badd89e4447b807aa","date":"2015-05-21T21:06:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove outdated and misleading comment in iconv.c\n\nthe comment claimed that EUC/GBK/Big5 are not implemented, which has\nbeen incorrect since commit 19b4a0a20efc6b9df98b6a43536ecdd628ba4643.\n"},{"hash":"63caf1d207d143fe405bbe0cda9aac8deca1171a","date":"2015-05-22T05:50:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add .text section directive to all crt_arch.h files missing it\n\ni386 and x86_64 versions already had the .text directive; other archs\ndid not. normally, top-level (file scope) __asm__ starts in the .text\nsection anyway, but problems were reported with some versions of\nclang, and it seems preferable to set it explicitly anyway, at least\nfor the sake of consistency between archs.\n"},{"hash":"9f26ebded188ed78c3571a4ca1477dd6351bc647","date":"2015-05-25T03:03:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix stack alignment code in mips crt_arch.h\n\nthe instruction used to align the stack, \"and $sp, $sp, -8\", does not\nactually exist; it's expanded to 2 instructions using the 'at'\n(assembler temporary) register, and thus cannot be used in a branch\ndelay slot. since alignment mod 16 commutes with subtracting 8, simply\nswapping these two operations fixes the problem.\n\ncrt1.o was not affected because it's still being generated from a\ndedicated asm source file. dlstart.lo was not affected because the\nstack pointer it receives is already aligned by the kernel. but\nScrt1.o was affected in cases where the dynamic linker gave it a\nmisaligned stack pointer.\n"},{"hash":"09db855b35709aa627d7055c57a98e1e471920ab","date":"2015-05-25T04:25:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove processing of DT_JMPREL from dynamic linker stage 1 bootstrap\n\nthe DT_JMPREL relocation table necessarily consists entirely of\nJMP_SLOT (REL_PLT in internal nomenclature) relocations, which are\nsymbolic; they cannot be resolved in stage 1, so there is no point in\nprocessing them.\n"},{"hash":"0e0e49421f08cfd670975ecd3604f7f9015e1833","date":"2015-05-25T04:46:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify/shrink relocation processing in dynamic linker stage 1\n\nthe outer-loop approach made sense when we were also processing\nDT_JMPREL, which might be in REL or RELA form, to avoid major code\nduplication. commit 09db855b35709aa627d7055c57a98e1e471920ab removed\nprocessing of DT_JMPREL, and in the remaining two tables, the format\n(REL or RELA) is known by the name of the table. simply writing two\nversions of the loop results in smaller and simpler code.\n"},{"hash":"7b75c4877ddf22f219f944c61d939df1dee4f6d3","date":"2015-05-25T19:56:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mark mips cancellable syscall code as code\n\notherwise disassemblers treat it as data.\n"},{"hash":"967bcbf67c3ffac587de4d79abc1e5e072d83e3e","date":"2015-05-25T20:02:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mark mips crt code as code\n\notherwise disassemblers treat it as data.\n"},{"hash":"768b82c6de24e480267c4c251c440edfc71800e3","date":"2015-05-25T23:15:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move call to dynamic linker stage-3 into stage-2 function\n\nthis move eliminates a duplicate \"by-hand\" symbol lookup loop from the\nstage-1 code and replaces it with a call to find_sym, which can be\nused once we're in stage 2. it reduces the size of the stage 1 code,\nwhich is helpful because stage 1 will become the crt start file for\nstatic-PIE executables, and it will allow stage 3 to access stage 2's\nautomatic storage, which will be important in an upcoming commit.\n"},{"hash":"9bbddf730f7837cf87f4c789fbb41a312e295d6c","date":"2015-05-26T03:33:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reprocess all libc/ldso symbolic relocations in dynamic linking stage 3\n\ncommit f3ddd173806fd5c60b3f034528ca24542aecc5b9 introduced early\nrelocations and subsequent reprocessing as part of the dynamic linker\nbootstrap overhaul, to allow use of arbitrary libc functions before\nthe main application and libraries are loaded, but only reprocessed\nGOT/PLT relocation types.\n\ncommit c093e2e8201524db0d638920e76bcb6b1d925f3a added reprocessing of\nnon-GOT/PLT relocations to fix an actual regression that was observed\non powerpc, but only for RELA format tables with out-of-line addends.\nREL table (inline addends at the relocation address) reprocessing is\ntrickier because the first relocation pass clobbers the addends.\n\nthis patch extends symbolic relocation reprocessing for libc/ldso to\nsupport all relocation types, whether REL or RELA format tables are\nused. it is believed not to alter behavior on any existing archs for\nthe current dynamic linker and libc code. the motivations for this\nchange are consistency and future-proofing. it ensures that behavior\ndoes not differ depending on whether REL or RELA tables are used,\nwhich could lead to undetected arch-specific bugs. it also ensures\nthat, if in the future code depending on additional relocation types\nis added to libc.so, either at the source level or as part of the\ncompiler runtime that gets pulled in (for example, soft-float with TLS\nfor fenv), the new code will work properly.\n\nthe implementation concept is simple: stage 2 of the dynamic linker\ncounts the number of symbolic relocations in the libc/ldso REL table\nand allocates a VLA to save their addends into; stage 3 then uses the\nsaved addends in place of the inline ones which were clobbered. for\nstack safety, a hard limit (currently 4k) is imposed on the number of\nsuch addends; this should be a couple orders of magnitude larger than\nthe actual need. this number is not a runtime variable that could\nbreak fail-safety; it is constant for a given libc.so build.\n"},{"hash":"ed0c8249825161036356a3616e8c5247c15d0927","date":"2015-05-26T06:31:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect application of visibility to Scrt1.o\n\ncommit de2b67f8d41e08caa56bf6540277f6561edb647f attempted to avoid\nhaving vis.h affect crt files, but the Makefile variable used,\nCRT_LIBS, refers to the final output copies in the lib directory, not\nthe copies in the crt build directory, and thus the -DCRT was not\napplied.\n\nwhile unlikely to be noticed, this regression probably broke\nproduction of PIE executables whose main functions are not in the\nexecutable but rather a shared library.\n"},{"hash":"dc031ee0b1ba11baa00cd7f0769e461a5f396c71","date":"2015-05-26T07:37:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add rcrt1 start file for fully static-linked PIE\n\nstatic-linked PIE files need startup code to relocate themselves, much\nlike the dynamic linker does. rcrt1.c reuses the code in dlstart.c,\nstage 1 of the dynamic linker, which in turn reuses crt_arch.h, to\nachieve static PIE with no new code. only relative relocations are\nsupported.\n\nexisting toolchains that don't yet support static PIE directly can be\nrepurposed by passing \"-shared -Wl,-Bstatic -Wl,-Bsymbolic\" instead of\n\"-static -pie\" and substituting rcrt1.o in place of crt1.o.\n\nall libraries being linked must be built as PIC/PIE; TEXTRELs are not\nsupported at this time.\n"},{"hash":"63c188ec42e76ff768e81f6b65b11c68fc43351e","date":"2015-05-27T04:28:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace atomics with locks in locale-setting code\n\nthis is part of a general program of removing direct use of atomics\nwhere they are not necessary to meet correctness or performance needs,\nbut in this case it's also an optimization. only the global locale\nneeds synchronization; allocated locales referenced with locale_t\nhandles are immutable during their lifetimes, and using atomics to\ninitialize them increases their cost of setup.\n"},{"hash":"61a3364d246e72b903da8b76c2e27a225a51351e","date":"2015-05-27T07:27:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul locale internals to treat categories roughly uniformly\n\npreviously, LC_MESSAGES was treated specially as the only category\nwhich could be set to a locale name without a definition file, in\norder to facilitate gettext message translations when no libc locale\nwas available. LC_NUMERIC was completely un-settable, and LC_CTYPE\nstored a flag intended to be used for a possible future byte-based C\nlocale, instead of storing a __locale_map pointer like the other\ncategories use.\n\nthis patch changes all categories to be represented by pointers to\n__locale_map structures, and allows locale names without definition\nfiles to be treated as valid locales with trivial definition when used\nin any category. outwardly visible functional changes should be minor,\nlimited mainly to the strings read back from setlocale and the way\ngettext handles translations in categories other than LC_MESSAGES.\n\nvarious internal refactoring has also been performed, and improvements\nin const correctness have been made.\n"},{"hash":"11858d31aa020df3e7e7dedf49f9870ce12f31cc","date":"2015-05-27T07:32:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rename internal locale file handling locale maps\n\nsince the __setlocalecat function was removed, the filename\n__setlocalecat.c no longer made sense.\n"},{"hash":"aeeac9ca5490d7d90fe061ab72da446c01ddf746","date":"2015-05-27T19:54:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement fail-safe static locales for newlocale\n\nthis frees applications which need to make temporary use of the C\nlocale (via uselocale) from the possibility that newlocale might fail.\n\nthe C.UTF-8 locale is also provided as a static locale. presently they\nbehave the same, but this may change in the future.\n"},{"hash":"fc431d3f76bb9bde34a89e4a3e4d0c27de959855","date":"2015-05-28T04:08:13.000Z","author":{"name":"Shiz","email":"hi@shiz.me"},"message":"configure: work around compilers that merely warn for unknown options\n\nsome compilers (such as clang) accept unknown options without error,\nbut then print warnings on each invocation, cluttering the build\noutput and burying meaningful warnings. this patch makes configure's\ntryflag and tryldflag functions use additional options to turn the\nunknown-option warnings into errors, if available, but only at check\ntime. these options are not output in config.mak to avoid the risk of\nspurious build breakage; if they work, they will have already done\ntheir job at configure time.\n"},{"hash":"b6e7c664677ab7c77f183b8c41105f2be519800c","date":"2015-05-28T19:37:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add missing legacy LFS64 macros in sys/resource.h\n\nbased on patch by Felix Janda, with RLIM64_SAVED_CUR and\nRLIM64_SAVED_MAX added for completeness.\n"},{"hash":"2b4fcfdacf93c3dfd6ac15e31790a9e154374679","date":"2015-05-29T04:04:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of ungetc and ungetwc to work on files in eof status\n\nthese functions were written to handle clearing eof status, but failed\nto account for the __toread function's handling of eof. with this\npatch applied, __toread still returns EOF when the file is in eof\nstatus, so that read operations will fail, but it also sets up valid\nbuffer pointers for read mode, which are set to the end of the buffer\nrather than the beginning in order to make the whole buffer available\nto ungetc/ungetwc.\n\nminor changes to __uflow were needed since it's now possible to have\nnon-zero buffer pointers while in eof status. as made, these changes\nremove a 'fast path' bypassing the function call to __toread, which\ncould be reintroduced with slightly different logic, but since\nordinary files have a syscall in f->read, optimizing the code path\ndoes not seem worthwhile.\n\nthe __stdio_read function is also updated not to zero the read buffer\npointers on eof/error. while not necessary for correctness, this\nchange avoids the overhead of calling __toread in ungetc after\nreaching eof, and it also reduces code size and increases consistency\nwith the fmemopen read operation which does not zero the pointers.\n"},{"hash":"585ba14df4799d50ec9682ce75825d2eafec2a6a","date":"2015-06-03T06:02:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add additional Makefile dependency rules for rcrt1.o PIE start file\n"},{"hash":"b6a6cd703ffefa6352249fb01f4da28d85d17306","date":"2015-06-04T15:45:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic linker regression processing R_*_NONE type relocations\n\ncommit f3ddd173806fd5c60b3f034528ca24542aecc5b9 inadvertently removed\nthe early check for \"none\" type relocations, causing the address\ndso->base+0 to be dereferenced to obtain an addend. shared libraries,\n(including libc.so) and PIE executables were unaffected, since their\nbase addresses are the actual address of their mappings and are\nreadable. non-PIE main executables, however, have a base address of 0\nbecause their load addresses are absolute and not offset at load time.\n\nin practice none-type relocations do not arise with toolchains that\nare in use except on mips, and on mips it's moderately rare for a\nnon-PIE executable to have a relocation table, since the mips-specific\ngot processing serves in its place for most purposes.\n"},{"hash":"e6f09004af4d3ffc4e4ad5b5d33cf45891c25f25","date":"2015-06-04T20:08:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.10\n"},{"hash":"63f4b9f18f3674124d8bcb119739fec85e6da005","date":"2015-06-05T15:21:40.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix uselocale((locale_t)0) not to modify locale\n\ncommit 68630b55c0c7219fe9df70dc28ffbf9efc8021d8 made the new locale to\nbe assigned unconditonally resulting in crashes later on.\n"},{"hash":"7e816a6487932cbb3cb71d94b609e50e81f4e5bf","date":"2015-06-06T18:11:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove invalid skip of locking in ungetwc\n\naside from being invalid, the early check only optimized the error\ncase, and likely pessimized the common case by separating the\ntwo branches on isascii(c) at opposite ends of the function.\n"},{"hash":"3d7e32d28dc9962e9efc1c317c5b44b5b2df3008","date":"2015-06-06T18:16:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add macro version of ctype.h isascii function\n\npresumably internal code (ungetwc and fputwc) was written assuming a\nmacro implementation existed; otherwise use of isascii is just a\npessimization.\n"},{"hash":"312eea2ea4f4363fb01b73660c08bfcf43dd3bb4","date":"2015-06-06T18:20:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove another invalid skip of locking in ungetwc\n"},{"hash":"16bf466532d7328e971012b0731ad493b017ad29","date":"2015-06-06T18:53:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make static C and C.UTF-8 locales available outside of newlocale\n"},{"hash":"04b8360adbb6487f61aa0c00e53ec3a90a5a0d29","date":"2015-06-07T02:59:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove redefinition of MB_CUR_MAX in locale_impl.h\n\nunless/until the byte-based C locale is implemented, defining\nMB_CUR_MAX to 1 in the C locale is wrong. no internal code currently\nuses the MB_CUR_MAX macro, but having it defined inconsistently is\nerror-prone. applications get the value from stdlib.h and were\nunaffected.\n"},{"hash":"32f3c4f70633488550c29a2444f819aafdf345ff","date":"2015-06-07T03:09:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add multiple inclusion guard to locale_impl.h\n"},{"hash":"75ce4503950621b11fcc7f1fd1187dbcf3cde312","date":"2015-06-07T21:23:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in pre-v7 arm on kernels with kuser helper removed\n\nthe arm atomics/TLS runtime selection code is called from\n__set_thread_area and depends on having libc.auxv and __hwcap\navailable. commit 71f099cb7db821c51d8f39dfac622c61e54d794c moved the\nfirst call to __set_thread_area to the top of dynamic linking stage 3,\nbefore this data is made available, causing the runtime detection code\nto always see __hwcap as zero and thereby select the atomics/TLS\nimplementations based on kuser helper.\n\nupcoming work on superh will use similar runtime detection.\n\nideally this early-init code should be cleanly refactored and shared\nbetween the dynamic linker and static-linked startup.\n"},{"hash":"bd1eaceaa3975bd2a2a34e211cff896affaecadf","date":"2015-06-09T20:15:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix spurious errors from pwd/grp functions when nscd backend is absent\n\nfor several pwd/grp functions, the only way the caller can distinguish\nbetween a successful negative result (\"no such user/group\") and an\ninternal error is by clearing errno before the call and checking errno\nafterwards. the nscd backend support code correctly simulated a\nnot-found response on systems where such a backend is not running, but\nfailed to restore errno.\n\nthis commit also fixed an outdated/incorrect comment.\n"},{"hash":"276904c2f6bde3a31a24ebfa201482601d18b4f9","date":"2015-06-09T21:31:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in malloc, refuse to use brk if it grows into stack\n\nthe linux/nommu fdpic ELF loader sets up the brk range to overlap\nentirely with the main thread's stack (but growing from opposite\nends), so that the resulting failure mode for malloc is not to return\na null pointer but to start returning pointers to memory that overlaps\nwith the caller's stack. needless to say this extremely dangerous and\nmakes brk unusable.\n\nsince it's non-trivial to detect execution environments that might be\naffected by this kernel bug, and since the severity of the bug makes\nany sort of detection that might yield false-negatives unsafe, we\ninstead check the proximity of the brk to the stack pointer each time\nthe brk is to be expanded. both the main thread's stack (where the\nreal known risk lies) and the calling thread's stack are checked. an\narbitrary gap distance of 8 MB is imposed, chosen to be larger than\nlinux default main-thread stack reservation sizes and larger than any\nreasonable stack configuration on nommu.\n\nthe effeciveness of this patch relies on an assumption that the amount\nby which the brk is being grown is smaller than the gap limit, which\nis always true for malloc's use of brk. reliance on this assumption is\nwhy the check is being done in malloc-specific code and not in __brk.\n"},{"hash":"c30cbcb0a646b1f13a22c645616dce624465b883","date":"2015-06-10T02:27:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement arch-generic version of __unmapself\n\nthis can be used to put off writing an asm version of __unmapself for\nnew archs, or as a permanent solution on archs where it's not\npractical or even possible to run momentarily with no stack.\n\nthe concept here is simple: the caller takes a lock on a global shared\nstack and uses it to make the munmap and exit syscalls. the only trick\nis unlocking, which must be done after the thread exits, and this is\nachieved by using the set_tid_address syscall to have the kernel zero\nand futex-wake the lock word as part of the exit syscall.\n"},{"hash":"ec634aad91f57479ef17525e33ed446c780a61f4","date":"2015-06-11T05:01:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sh asm for vfork\n"},{"hash":"f9e25d813860d53cd1e9b6145cc63375d2fe2529","date":"2015-06-13T04:37:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add %m support to wide printf\n"},{"hash":"f8f565df467c13248104223f99abf7f37cef7584","date":"2015-06-13T04:42:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add printing of null %s arguments as \"(null)\" in wide printf\n\nthis is undefined, but supported in our implementation of the normal\nprintf, so for consistency the wide variant should support it too.\n"},{"hash":"536c6d5a4205e2a3f161f2983ce1e0ac3082187d","date":"2015-06-13T05:17:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix idiom for setting stdio stream orientation to wide\n\nthe old idiom, f->mode |= f->mode+1, was adapted from the idiom for\nsetting byte orientation, f->mode |= f->mode-1, but the adaptation was\nincorrect. unless the stream was alreasdy set byte-oriented, this code\nincremented f->mode each time it was executed, which would eventually\nlead to overflow. it could be fixed by changing it to f->mode |= 1,\nbut upcoming changes will require slightly more work at the time of\nwide orientation, so it makes sense to just call fwide. as an\noptimization in the single-character functions, fwide is only called\nif the stream is not already wide-oriented.\n"},{"hash":"4ef9b828c1f39553a69e0635ac91f0fcadd6e8c6","date":"2015-06-13T20:53:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove cancellation points in stdio\n\ncommit 58165923890865a6ac042fafce13f440ee986fd9 added these optional\ncancellation points on the basis that cancellable stdio could be\nuseful, to unblock threads stuck on stdio operations that will never\ncomplete. however, the only way to ensure that cancellation can\nachieve this is to violate the rules for side effects when\ncancellation is acted upon, discarding knowledge of any partial data\ntransfer already completed. our implementation exhibited this behavior\nand was thus non-conforming.\n\nin addition to improving correctness, removing these cancellation\npoints moderately reduces code size, and should significantly improve\nperformance on i386, where sysenter/syscall instructions can be used\ninstead of \"int $128\" for non-cancellable syscalls.\n"},{"hash":"e3bc22f1eff87b8f029a6ab31f1a269d69e4b053","date":"2015-06-14T01:59:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor malloc's expand_heap to share with __simple_malloc\n\nthis extends the brk/stack collision protection added to full malloc\nin commit 276904c2f6bde3a31a24ebfa201482601d18b4f9 to also protect the\n__simple_malloc function used in static-linked programs that don't\nreference the free function.\n\nit also extends support for using mmap when brk fails, which full\nmalloc got in commit 5446303328adf4b4e36d9fba21848e6feb55fab4, to\n__simple_malloc.\n\nsince __simple_malloc may expand the heap by arbitrarily large\nincrements, the stack collision detection is enhanced to detect\ninterval overlap rather than just proximity of a single address to the\nstack. code size is increased a bit, but this is partly offset by the\nsharing of code between the two malloc implementations, which due to\nlinking semantics, both get linked in a program that needs the full\nmalloc with realloc/free support.\n"},{"hash":"ee59c296d56bf26f49f354d6eb32b4b6d4190188","date":"2015-06-14T04:23:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"arm: add vdso support\n\nvdso will be available on arm in linux v4.2, the user-space code\nfor it is in kernel commit 8512287a8165592466cb9cb347ba94892e9c56a5\n"},{"hash":"38e2f727237230300fea6aff68802db04625fd23","date":"2015-06-16T04:21:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix btowc corner case\n\nbtowc is required to interpret its argument by conversion to unsigned\nchar, unless the argument is equal to EOF. since the conversion to\nproduces a non-character value anyway, we can just unconditionally\nconvert, for now.\n"},{"hash":"1507ebf837334e9e07cfab1ca1c2e88449069a80","date":"2015-06-16T05:28:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"byte-based C locale, phase 1: multibyte character handling functions\n\nthis patch makes the functions which work directly on multibyte\ncharacters treat the high bytes as individual abstract code units\nrather than as multibyte sequences when MB_CUR_MAX is 1. since\nMB_CUR_MAX is presently defined as a constant 4, all of the new code\nadded is dead code, and optimizing compilers' code generation should\nnot be affected at all. a future commit will activate the new code.\n\nas abstract code units, bytes 0x80 to 0xff are represented by wchar_t\nvalues 0xdf80 to 0xdfff, at the end of the surrogates range. this\nensures that they will never be misinterpreted as Unicode characters,\nand that all wctype functions return false for these \"characters\"\nwithout needing locale-specific logic. a high range outside of Unicode\nsuch as 0x7fffff80 to 0x7fffffff was also considered, but since C11's\nchar16_t also needs to be able to represent conversions of these\nbytes, the surrogate range was the natural choice.\n"},{"hash":"16f18d036d9a7bf590ee6eb86785c0a9658220b6","date":"2015-06-16T06:10:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"byte-based C locale, phase 2: stdio and iconv (multibyte callers)\n\nthis patch adjusts libc components which use the multibyte functions\ninternally, and which depend on them operating in a particular\nencoding, to make the appropriate locale changes before calling them\nand restore the calling thread's locale afterwards. activating the\nbyte-based C locale without these changes would cause regressions in\nstdio and iconv.\n\nin the case of iconv, the current implementation was simply using the\nmultibyte functions as UTF-8 conversions. setting a multibyte UTF-8\nlocale for the duration of the iconv operation allows the code to\ncontinue working.\n\nin the case of stdio, POSIX requires that FILE streams have an\nencoding rule bound at the time of setting wide orientation. as long\nas all locales, including the C locale, used the same encoding,\ntreating high bytes as UTF-8, there was no need to store an encoding\nrule as part of the stream's state.\n\na new locale field in the FILE structure points to the locale that\nshould be made active during fgetwc/fputwc/ungetwc on the stream. it\ncannot point to the locale active at the time the stream becomes\noriented, because this locale could be mutable (the global locale) or\ncould be destroyed (locale_t objects produced by newlocale) before the\nstream is closed. instead, a pointer to the static C or C.UTF-8 locale\nobject added in commit commit aeeac9ca5490d7d90fe061ab72da446c01ddf746\nis used. this is valid since categories other than LC_CTYPE will not\naffect these functions.\n"},{"hash":"f22a9edaf8a6f2ca1d314d18b3785558279a5c03","date":"2015-06-16T06:18:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"byte-based C locale, phase 3: make MB_CUR_MAX variable to activate code\n\nthis patch activates the new byte-based C locale (high bytes treated\nas abstract code unit \"characters\" rather than decoded as multibyte\ncharacters) by making the value of MB_CUR_MAX depend on the active\nlocale. for the C locale, the LC_CTYPE category pointer is null,\nyielding a value of 1. all other locales yield a value of 4.\n"},{"hash":"1b0cdc8700d29ef018bf226d74b2b58b23bce91c","date":"2015-06-16T07:11:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor stdio open file list handling, move it out of global libc struct\n\nfunctions which open in-memory FILE stream variants all shared a tail\nwith __fdopen, adding the FILE structure to stdio's open file list.\nreplacing this common tail with a function call reduces code size and\nduplication of logic. the list is also partially encapsulated now.\n\nfunction signatures were chosen to facilitate tail call optimization\nand reduce the need for additional accessor functions.\n\nwith these changes, static linked programs that do not use stdio no\nlonger have an open file list at all.\n"},{"hash":"f9d84554bae0fa17c9a1d724549c4408022228a5","date":"2015-06-16T14:38:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for sh2 interrupt-masking-based atomics to sh port\n\nthe sh2 target is being considered an ISA subset of sh3/sh4, in the\nsense that binaries built for sh2 are intended to be usable on later\ncpu models/kernels with mmu support. so rather than hard-coding\nsh2-specific atomics, the runtime atomic selection mechanisms that was\nalready in place has been extended to add sh2 atomics.\n\nat this time, the sh2 atomics are not SMP-compatible; since the ISA\nlacks actual atomic operations, the new code instead masks interrupts\nfor the duration of the atomic operation, producing an atomic result\non single-core. this is only possible because the kernel/hardware does\nnot impose protections against userspace doing so. additional changes\nwill be needed to support future SMP systems.\n\ncare has been taken to avoid producing significant additional code\nsize in the case where it's known at compile-time that the target is\nnot sh2 and does not need sh2-specific code.\n"},{"hash":"3366a99b17847b58f2d8cc52cbb5d65deb824f8a","date":"2015-06-16T14:55:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"switch sh port's __unmapself to generic version when running on sh2/nommu\n\ndue to the way the interrupt and syscall trap mechanism works,\nuserspace on sh2 must never set the stack pointer to an invalid value.\nthus, the approach used on most archs, where __unmapself executes with\nno stack for the interval between SYS_munmap and SYS_exit, is not\nviable on sh2.\n\nin order not to pessimize sh3/sh4, the sh asm version of __unmapself\nis not removed. instead it's renamed and redirected through code that\ncalls either the generic (safe) __unmapself or the sh3/sh4 asm,\ndepending on compile-time and run-time conditions.\n"},{"hash":"10d0268ccfab9152250eeeed3952ce3fed44131a","date":"2015-06-16T15:25:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"switch to using trap number 31 for syscalls on sh\n\nnominally the low bits of the trap number on sh are the number of\nsyscall arguments, but they have never been used by the kernel, and\nsome code making syscalls does not even know the number of arguments\nand needs to pass an arbitrary high number anyway.\n\nsh3/sh4 traditionally used the trap range 16-31 for syscalls, but part\nof this range overlapped with hardware exceptions/interrupts on sh2\nhardware, so an incompatible range 32-47 was chosen for sh2.\n\nusing trap number 31 everywhere, since it's in the existing sh3/sh4\nrange and does not conflict with sh2 hardware, is a proposed\nunification of the kernel syscall convention that will allow binaries\nto be shared between sh2 and sh3/sh4. if this is not accepted into the\nkernel, we can refit the sh2 target with runtime selection mechanisms\nfor the trap number, but doing so would be invasive and would entail\nnon-trivial overhead.\n"},{"hash":"75eceb3ae824d54e865686c0c538551aeebf3372","date":"2015-06-17T17:21:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ignore ENOSYS error from mprotect in pthread_create and dynamic linker\n\nthis error simply indicated a system without memory protection (NOMMU)\nand should not cause failure in the caller.\n"},{"hash":"ce3688eca920aa77549323f84e21f33522397115","date":"2015-06-20T02:54:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around mips detached thread exit breakage due to kernel regression\n\nlinux kernel commit 46e12c07b3b9603c60fc1d421ff18618241cb081 caused\nthe mips syscall mechanism to fail with EFAULT when the userspace\nstack pointer is invalid, breaking __unmapself used for detached\nthread exit. the workaround is to set $sp to a known-valid, readable\naddress, and the simplest one to obtain is the address of the current\nfunction, which is available (per o32 calling convention) in $25.\n"},{"hash":"55d061f031085f24d138664c897791aebe9a2fab","date":"2015-06-20T03:01:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide __stack_chk_fail_local in libc.a\n\nthis symbol is needed only on archs where the PLT call ABI is klunky,\nand only for position-independent code compiled with stack protector.\nthus references usually only appear in shared libraries or PIE\nexecutables, but they can also appear when linking statically if some\nof the object files being linked were built as PIC/PIE.\n\nnormally libssp_nonshared.a from the compiler toolchain should provide\n__stack_chk_fail_local, but reportedly it appears prior to -lc in the\nlink order, thus failing to satisfy references from libc itself (which\narise only if libc.a was built as PIC/PIE with stack protector\nenabled).\n"},{"hash":"ba819787ee93ceae94efd274f7849e317c1bff58","date":"2015-06-22T18:50:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix calloc when __simple_malloc implementation is used\n\npreviously, calloc's implementation encoded assumptions about the\nimplementation of malloc, accessing a size_t word just prior to the\nallocated memory to determine if it was obtained by mmap to optimize\nout the zero-filling. when __simple_malloc is used (static linking a\nprogram with no realloc/free), it doesn't matter if the result of this\ncheck is wrong, since all allocations are zero-initialized anyway. but\nthe access could be invalid if it crosses a page boundary or if the\npointer is not sufficiently aligned, which can happen for very small\nallocations.\n\nthis patch fixes the issue by moving the zero-fill logic into malloc.c\nwith the full malloc, as a new function named __malloc0, which is\nprovided by a weak alias to __simple_malloc (which always gives\nzero-filled memory) when the full malloc is not in use.\n"},{"hash":"153e952e1a688859d7095345b17e6c1df74a295c","date":"2015-06-22T20:33:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression/typo that disabled __simple_malloc when calloc is used\n\ncommit ba819787ee93ceae94efd274f7849e317c1bff58 introduced this\nregression. since the __malloc0 weak alias was not properly provided\nby __simple_malloc, use of calloc forced the full malloc to be linked.\n"},{"hash":"a59341420fdedb288d9ff80e73609ae44e9cf258","date":"2015-06-23T00:29:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reimplement strverscmp to fix corner cases\n\nthis interface is non-standardized and is a GNU invention, and as\nsuch, our implementation should match the behavior of the GNU\nfunction. one peculiarity the old implementation got wrong was the\nhandling of all-zero digit sequences: they are supposed to compare\ngreater than digit sequences of which they are a proper prefix, as in\n009 < 00.\n\nin addition, high bytes were treated with char signedness rather than\nas unsigned. this was wrong regardless of what the GNU function does\nsince the resulting order relation varied by arch.\n\nthe new strverscmp implementation makes explicit the cases where the\norder differs from what strcmp would produce, of which there are only\ntwo.\n"},{"hash":"ce337daa00e42d4f2d9a4d9ae0ed51b20249d924","date":"2015-06-23T04:05:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make dynamic linker work around MAP_FAILED mmap failure on nommu kernels\n\npreviously, loading of additional libraries beyond libc/ldso did not\nwork on nommu kernels, nor did loading programs via invocation of the\ndynamic linker as a command.\n"},{"hash":"6ba5517a460c6c438f64d69464fdfc3269a4c91a","date":"2015-06-25T22:22:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix local-dynamic model TLS on mips and powerpc\n\nthe TLS ABI spec for mips, powerpc, and some other (presently\nunsupported) RISC archs has the return value of __tls_get_addr offset\nby +0x8000 and the result of DTPOFF relocations offset by -0x8000. I\nhad previously assumed this part of the ABI was actually just an\nimplementation detail, since the adjustments cancel out. however, when\nthe local dynamic model is used for accessing TLS that's known to be\nin the same DSO, either of the following may happen:\n\n1. the -0x8000 offset may already be applied to the argument structure\npassed to __tls_get_addr at ld time, without any opportunity for\nruntime relocations.\n\n2. __tls_get_addr may be used with a zero offset argument to obtain a\nbase address for the module's TLS, to which the caller then applies\nimmediate offsets for individual objects accessed using the local\ndynamic model. since the immediate offsets have the -0x8000 adjustment\napplied to them, the base address they use needs to include the\n+0x8000 offset.\n\nit would be possible, but more complex, to store the pointers in the\ndtv[] array with the +0x8000 offset pre-applied, to avoid the runtime\ncost of adding 0x8000 on each call to __tls_get_addr. this change\ncould be made later if measurements show that it would help.\n"},{"hash":"66d45787c865a1807ae397a89a14699394ed4fa4","date":"2015-06-28T01:48:19.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"dynlink.c: use a faster expression in gnu_hash\n\nWith -Os, GCC uses a multiply rather than a shift and addition for 'h*33'.\nUse a more efficient expression explicitely.\n"},{"hash":"84389c64562e2b2ba43225b5b7a9df7d974479b1","date":"2015-06-28T01:49:53.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"dynlink.c: use bloom filter in gnu hash lookup\n\nIntroduce gnu_lookup_filtered and use it to speed up symbol lookups in\nfind_sym (do_dlsym is left as is, based on an expectation that\nfrequently dlsym queries will use a dlopen handle rather than\nRTLD_NEXT or RTLD_DEFAULT, and will not need to look at more than one\nDSO).\n"},{"hash":"5b4286e12cd6baac343b10a41dc17ac578832089","date":"2015-06-28T01:51:15.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"dynlink.c: slim down gnu_lookup\n\nDo not reference dso->syms and dso->strings until point of use.\nCheck 'h1 == (h2|1)', the simplest condition, before the others.\n"},{"hash":"8f08a58c635bea5cdfae6bc0e323c80aa9ff82a7","date":"2015-06-28T02:30:12.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"dynlink.c: pass gnu-hash table pointer to gnu_lookup\n\nThe callers need to check the value of the pointer anyway, so make\nthem pass the pointer to gnu_lookup instead of reloading it there.\n\nReorder gnu_lookup arguments so that always-used ones are listed\nfirst. GCC can choose a calling convention with arguments in registers\n(e.g. up to 3 arguments in eax, ecx, edx on x86), but cannot reorder\nthe arguments for static functions.\n"},{"hash":"2a780aa3050b86d888489361f04220bfb58890a1","date":"2015-07-06T22:13:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"treat empty TZ environment variable as GMT rather than default\n\nthis improves compatibility with the behavior of other systems and\nwith some applications which set an empty TZ var to disable use of\nlocal time by mktime, etc.\n"},{"hash":"b3cd7d13fe630ba1847326242525298e361018c1","date":"2015-07-06T23:34:14.000Z","author":{"name":"Shiz","email":"hi@shiz.me"},"message":"build: overhaul wrapper script system for multiple wrapper support\n\nthis overhauls part of the build system in order to support multiple\ntoolchain wrapper scripts, as opposed to solely the musl-gcc wrapper as\nbefore. it thereby replaces --enable-gcc-wrapper with --enable-wrapper=...,\nwhich has the options 'auto' (the default, detect whether to use wrappers),\n'all' (build and install all wrappers), 'no' (don't build any) and finally\nthe options named after the individual compiler scripts (currently only\n'gcc' is available) to build and install only that wrapper.\nthe old --enable-gcc-wrapper is removed from --help, but still available.\n\nit also modifies the wrappers to use the C compiler specified to the build\nsystem as 'inner' compiler, when applicable. as wrapper detection works by\nprobing this compiler, it may not work with any other.\n"},{"hash":"f8db6f74b2c74a50c4dec7e30be5215f0e2c37a6","date":"2015-07-06T23:37:06.000Z","author":{"name":"Shiz","email":"hi@shiz.me"},"message":"build: fix musl-targeting toolchain test\n\nthe old test was broken in that it would never fail on a toolchains built\nwithout dynamic linking support, leading to the wrapper script possibly being\ninstalled on compilers that do not support it. in addition, the new test is\nportable across compilers: the old test only worked on GCC.\n\nthe new test works by testing whether the toolchain libc defines __GLIBC__:\nmost non-musl Linux libc's do define this for compatibility even when they\nare not glibc, so this is a safe bet to check for musl. in addition, the\ncompiler runtime would need to have a somewhat glibc-compatible ABI in the\nfirst place, so any non-glibc compatible libc's compiler runtime might not\nwork. it is safer to disable these cases by default and have the user enable\nthe wrappers manually there using --enable-wrapper if they certain it works.\n"},{"hash":"fb58545f8d1c5fa32122244caeaf3625c12ddc01","date":"2015-07-06T23:52:16.000Z","author":{"name":"Shiz","email":"hi@shiz.me"},"message":"add musl-clang, a wrapper for system clang installs\n\nmusl-clang allows the user to compile musl-powered programs using their\nalready existent clang install, without the need of a special cross compiler.\nit achieves this by wrapping around both the system clang install and the\nlinker and passing them special flags to re-target musl at runtime.\nit does only affect invocations done through the special musl-clang wrapper\nscript, so that the user setup remains fully intact otherwise.\n\nthe clang wrapper consists of the compiler frontend wrapper script,\nmusl-clang, and the linker wrapper script, ld.musl-clang.\nmusl-clang makes sure clang invokes ld.musl-clang to link objects; neither\nscript needs to be in PATH for the wrapper to work.\n"},{"hash":"e8cbe0bad4284906230a53af4c91ad2b9713d03b","date":"2015-07-08T02:46:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix negated return value of ns_skiprr, breakage in related functions\n\ndue to a reversed pointer difference computation, ns_skiprr always\nreturned a negative value, which functions using it would interpret as\nan error.\n\npatch by Yu Lu.\n"},{"hash":"11894f6d3a80be950a490dc7dfab349f057a545f","date":"2015-07-09T17:07:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect void return type for syncfs function\n\nbeing nonstandard, the closest thing to a specification for this\nfunction is its man page, which documents it as returning int. it can\nfail with EBADF if the file descriptor passed is invalid.\n"},{"hash":"0f9c2666aca95eb98eb0ef4f4d8d1473c8ce3fa0","date":"2015-07-09T18:47:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle loss of syslog socket connection\n\nwhen traditional syslogd implementations are restarted, the old server\nsocket ceases to exist and a new unix socket with the same pathname is\ncreated. when this happens, the default destination address associated\nwith the client socket via connect is no longer valid, and attempts to\nsend produce errors. this happens despite the socket being datagram\ntype, and is in contrast to the behavior that would be seen with an IP\ndatagram (UDP) socket.\n\nin order to avoid a situation where the application is unable to send\nfurther syslog messages without calling closelog, this patch makes\nsyslog attempt to reconnect the socket when send returns an error\nindicating a lost connection.\n\nadditionally, initial failure to connect the socket no longer results\nin the socket being closed. this ensures that an application which\ncalls openlog to reserve the socket file descriptor will not run into\na situation where transient connection failure (e.g. due to syslogd\nrestart) prevents fd reservation. however, applications which may be\nunable to connect the socket later (e.g. due to chroot, restricted\npermissions, seccomp, etc.) will still fail to log if the syslog\nsocket cannot be connected at openlog time or if it has to be\nreconnected later.\n"},{"hash":"3fffa7a658aa925b8f95d36aef7531c1827dbf28","date":"2015-07-21T23:02:31.000Z","author":{"name":"Felix Fietkau","email":"nbd@openwrt.org"},"message":"mips: fix mcontext_t register array field name\n\nglibc and uclibc use gregs instead of regs\n\nSigned-off-by: Felix Fietkau <nbd@openwrt.org>\n"},{"hash":"29ec7677a73a5227badbb1064205be09e707e466","date":"2015-07-21T23:14:26.000Z","author":{"name":"Roman Yeryomin","email":"roman@ubnt.com"},"message":"socket.h: fix SO_* for mips\n\nSigned-off-by: Roman Yeryomin <roman@ubnt.com>\n"},{"hash":"3975577922aedab7d60788dd320a2c8e4e94bc6e","date":"2015-07-21T23:14:58.000Z","author":{"name":"Roman Yeryomin","email":"roman@ubnt.com"},"message":"socket.h: cleanup/reorder mips and powerpc bits/socket.h\n\n....to be somewhat consistent and easily comparable with asm/socket.h\n\nSigned-off-by: Roman Yeryomin <roman@ubnt.com>\n"},{"hash":"57243b30214656e7dd9fff509a1b6370b712f863","date":"2015-07-24T21:22:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix atexit when it is called from an atexit handler\n\nThe old code accepted atexit handlers after exit, but did not run them\nreliably. C11 seems to explicitly allow atexit to fail (and report\nsuch failure) in this case, but this situation can easily come up in\nC++ if a destructor has a local static object with a destructor so it\nshould be handled.\n\nNote that the memory usage can grow linearly with the overall number\nof registered atexit handlers instead of with the worst case list\nlength. (This only matters if atexit handlers keep registering atexit\nhandlers which should not happen in practice).\n\nCommit message/rationale based on text by Szabolcs Nagy.\n"},{"hash":"fe7582f4f92152ab60e9523bf146fe28ceae51f6","date":"2015-07-25T03:15:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined left-shift of negative values in utf-8 state table\n"},{"hash":"3c43c0761e1725fd5f89a9c028cbf43250abb913","date":"2015-07-28T18:40:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing synchronization in atomic store on i386 and x86_64\n\ndespite being strongly ordered, the x86 memory model does not preclude\nreordering of loads across earlier stores. while a plain store\nsuffices as a release barrier, we actually need a full barrier, since\nusers of a_store subsequently load a waiter count to determine whether\nto issue a futex wait, and using a stale count will result in soft\n(fail-to-wake) deadlocks. these deadlocks were observed in malloc and\npossible with stdio locks and other libc-internal locking.\n\non i386, an atomic operation on the caller's stack is used as the\nbarrier rather than performing the store itself using xchg; this\navoids the need to read the cache line on which the store is being\nperformed. mfence is used on x86_64 where it's always available, and\ncould be used on i386 with the appropriate cpu model checks if it's\nshown to perform better.\n"},{"hash":"c3761622e8168b0c6453637ac82e70b09af3e8e9","date":"2015-08-07T19:19:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mitigate blow-up of heap size under malloc/free contention\n\nduring calls to free, any free chunks adjacent to the chunk being\nfreed are momentarily held in allocated state for the purpose of\nmerging, possibly leaving little or no available free memory for other\nthreads to allocate. under this condition, other threads will attempt\nto expand the heap rather than waiting to use memory that will soon be\navailable. the race window where this happens is normally very small,\nbut became huge when free chooses to use madvise to release unused\nphysical memory, causing unbounded heap size growth.\n\nthis patch drastically shrinks the race window for unwanted heap\nexpansion by performing madvise with the bin lock held and marking the\nbin non-empty in the binmask before making the expensive madvise\nsyscall. testing by Timo Teräs has shown this approach to be a\nsuitable mitigation.\n\nmore invasive changes to the synchronization between malloc and free\nwould be needed to completely eliminate the problem. it's not clear\nwhether such changes would improve or worsen typical-case performance,\nor whether this would be a worthwhile direction to take malloc\ndevelopment.\n"},{"hash":"062bb737de06c3906b4b4a07c7fc0fb286287efe","date":"2015-08-09T22:51:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure of tempnam to null-terminate result\n\ntempnam uses an uninitialized buffer which is filled using memcpy and\n__randname. It is therefore necessary to explicitly null-terminate it.\n\nbased on patch by Felix Janda.\n"},{"hash":"e5b086e1d5fe52bf1553357ee790de86eda27bf1","date":"2015-08-11T23:11:57.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: fix 64-bit syscall argument passing\n\nOn 32bit systems long long arguments are passed in a special way\nto some syscalls; this accidentally got copied to the AArch64 port.\n\nThe following interfaces were broken: fallocate, fanotify, ftruncate,\nposix_fadvise, posix_fallocate, pread, pwrite, readahead,\nsync_file_range, truncate.\n"},{"hash":"c13f2af1fe1856e36dd1b2773cac05d5d72641dc","date":"2015-08-14T00:47:46.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"match historical behavior for tm_gmtoff member of struct tm\n\ntm_gmtoff is a nonstandard field, but on historical systems which have\nthis field, it stores the offset of the local time zone from GMT or\nUTC. this is the opposite of the POSIX extern long timezone object and\nthe offsets used in POSIX-form TZ strings, which represent the offset\nfrom local time to UTC. previously we were storing these negated\noffsets in tm_gmtoff too.\n\nprograms which only used this field indirectly via strftime were not\naffected since strftime performed the negation for presentation.\nhowever, some programs and libraries accesse tm_gmtoff directly and\nwere obtaining negated time zone offsets.\n"},{"hash":"5a9c8c05a5a0cdced4122589184fd795b761bb4a","date":"2015-08-16T18:15:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mitigate performance regression in libc-internal locks on x86_64\n\ncommit 3c43c0761e1725fd5f89a9c028cbf43250abb913 fixed missing\nsynchronization in the atomic store operation for i386 and x86_64, but\nopted to use mfence for the barrier on x86_64 where it's always\navailable. however, in practice mfence is significantly slower than\nthe barrier approach used on i386 (a nop-like lock orl operation).\nthis commit changes x86_64 (and x32) to use the faster barrier.\n"},{"hash":"aa71ec3db8a3ca564cb37ec90c639020dfe30b6b","date":"2015-08-21T05:29:10.000Z","author":{"name":"Steven Barth","email":"cyrus@openwrt.org"},"message":"getsubopt: don't include leading = in value string\n\ngetsubopt incorrectly returns the delimiting = in the value string,\nthis patch fixes it by increasing the pointer position by one.\n\nSigned-off-by: Steven Barth <cyrus@openwrt.org>\n"},{"hash":"35b3312b6fcf3f72dcd5abf0dc4ba64da537f5a1","date":"2015-08-26T14:55:13.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"Build process uses script to add CFI directives to x86 asm\n\nSome functions implemented in asm need to use EBP for purposes other\nthan acting as a frame pointer. (Notably, it is used for the 6th\nargument to syscalls with 6 arguments.) Without frame pointers, GDB\ncan only show backtraces if it gets CFI information from a\n.debug_frame or .eh_frame ELF section.\n\nRather than littering our asm with ugly .cfi directives, use an awk\nscript to insert them in the right places during the build process, so\nGDB can keep track of where the current stack frame is relative to the\nstack pointer. This means GDB can produce beautiful stack traces at\nany given point when single-stepping through asm functions.\n\nAdditionally, when registers are saved on the stack and later\noverwritten, emit ..cfi directives so GDB will know where they were\nsaved relative to the stack pointer. This way, when you look back up\nthe stack from within an asm function, you can still reliably print\nthe values of local variables in the caller.\n\nIf this awk script were to understand every possible wild and crazy\ncontortion that an asm programmer can do with the stack and registers,\nand always emit the exact ..cfi directives needed for GDB to know what\nthe register values were in the preceding stack frame, it would\nnecessarily be as complex as a full x86 emulator. That way lies\nmadness.\n\nHence, we assume that the stack pointer will _only_ ever be adjusted\nusing push/pop or else add/sub with a constant. We do not attempt to\ndetect every possible way that a register value could be saved for\nlater use, just the simple and common ways.\n\nThanks to Szabolcs Nagy for suggesting numerous improvements to this\ncode.\n"},{"hash":"a91ebdcfac6804714a1fe39f4375e2b4ebab085b","date":"2015-08-27T19:58:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix makefile suppression of intermediate file removal\n\nat one point, GNU make was removing crt/*.o after producing the copies\nin lib/ due to an arcane misfeature for handling \"intermediate\" files.\nthe circumstances that caused this are no longer present in our\nmakefile, but the previous workaround using .PRECIOUS was wrong and\ncould result in corrupt/partial files being left behind during an\ninterrupted build. using .SECONDARY is the correct, documented fix\nthat will prevent deletion of \"intermediate\" files from ever\nresurfacing.\n"},{"hash":"650b04f8cc66d4153fa7e47505dae6d8f0a24704","date":"2015-08-30T04:15:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.11\n"},{"hash":"d18cf76d73df8f9cc751d4b4ba5a635c70c0c645","date":"2015-08-30T18:44:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove use of buggy .SECONDARY special target in makefile\n\nthis functionality is affected by GNU make bug #30653, \"intermediate\nfiles incorrectly pruned in parallel builds\". on affected versions of\nmake, parallel builds attempt to compile source files before\nalltypes.h is generated.\n\nas noted with commit a91ebdcfac6804714a1fe39f4375e2b4ebab085b, which\nadded the use of .SECONDARY, suppression of removal of \"intermediate\"\nfiles does not seem to be needed at present. if it is needed in the\nfuture, it should be achievable by explicitly mentioning their names\nas targets or prerequisites.\n"},{"hash":"d8be1bc0193f45d3900f8466f26d1411b7f919c3","date":"2015-08-31T06:35:01.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"implement arm eabi mem* functions\n\nthese functions are part of the ARM EABI, meaning compilers may\ngenerate references to them. known versions of gcc do not use them,\nbut llvm does. they are not provided by libgcc, and the de facto\nstandard seems to be that libc provides them.\n"},{"hash":"426a0e2912c07f0e86feee2ed12f24a808eac2f4","date":"2015-09-09T04:31:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fclose of permanent (stdin/out/err) streams\n\nthis fixes a bug reported by Nuno Gonçalves. previously, calling\nfclose on stdin or stdout resulted in deadlock at exit time, since\n__stdio_exit attempts to lock these streams to flush/seek them, and\nhas no easy way of knowing that they were closed.\n\nconceptually, leaving a FILE stream locked on fclose is valid since,\nin the abstract machine, it ceases to exist. but to satisfy the\nimplementation-internal assumption in __stdio_exit that it can access\nthese streams unconditionally, we need to unlock them.\n\nit's also necessary that fclose leaves permanent streams in a state\nwhere __stdio_exit will not attempt any further operations on them.\nfortunately, the call to fflush already yields this property.\n"},{"hash":"844212d94f582c4e3c5055e0a1524931e89ebe76","date":"2015-09-09T05:13:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make nl_langinfo(CODESET) always return \"UTF-8\"\n\nthis restores the original behavior prior to the addition of the\nbyte-based C locale and fixes what is effectively a regression in\nmusl's property of always providing working UTF-8 support.\n\ncommit 1507ebf837334e9e07cfab1ca1c2e88449069a80 introduced the codeset\nname \"UTF-8-CODE-UNITS\" for the byte-based C locale to represent that\nthe semantic content is UTF-8 but that it is being processed as code\nunits (bytes) rather than whole multibyte characters. however, many\nprograms assume that the codeset name is usable with iconv and/or\ncomes from a set of standard/widely-used names known to the\napplication. such programs are likely to produce warnings or errors,\nrun with reduced functionality, or mangle character data when run\nexplicitly in the C locale.\n\nthe standard places basically no requirements for the string returned\nby nl_langinfo(CODESET) and how it interacts with other interfaces, so\nreturning \"UTF-8\" is permissible. moreover, it seems like the right\nthing to do, since the identity of the character encoding as \"UTF-8\"\nis independent of whether it is being processed as bytes of characters\nby the standard library functions.\n"},{"hash":"58f6259dff804faa416df4f9b1ca2fc61d178585","date":"2015-09-09T06:04:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in nl_langinfo from previous commit\n"},{"hash":"deb85ab44dbe784ba6174b8cf376d35aeacbe309","date":"2015-09-09T06:59:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unused (and invalid) C version of sigsetjmp\n\noriginally, the comment in this code was correct and it would likely\nwork if the compiler generated a tail call to setjmp. however, commit\n583e55122e767b1586286a0d9c35e2a4027998ab redesigned sigsetjmp and\nsiglongjmp such that the old C implementation (which was not intended\nto be used) is not even conceptually correct. remove it in the\ninterest of avoiding confusion when porting to new archs.\n"},{"hash":"878887c50cccd45b5cabe6ed2ac743941f3417ea","date":"2015-09-09T07:18:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing earlyclobber flag in i386 a_ctz_64 asm\n\nthis error was only found by reading the code, but it seems to have\nbeen causing gcc to produce wrong code in malloc: the same register\nwas used for the output and the high word of the input. in principle\nthis could have caused an infinite loop searching for an available\nbin, but in practice most x86 models seem to implement the \"undefined\"\nresult of the bsf instruction as \"unchanged\".\n"},{"hash":"cb1c88d42b0ee5e950d85e933c6eb6ecb8175e1d","date":"2015-09-11T06:15:06.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix uninitialized scopeid in lookups from hosts file and ip literals\n"},{"hash":"17cdbc4e427fd4f9cfdecb455294245732cbb36f","date":"2015-09-12T02:49:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sh relocation types needed for fdpic to elf.h\n"},{"hash":"ad5d8a2bf3526bce4317055612709ac076b5c4c3","date":"2015-09-12T02:50:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sh crti/crtn init/fini fragments setup proper stack frame\n\nfor fdpic support is is essential that the got pointer be saved at a\nknown, ABI-dictated offset from the frame pointer, since there is no\nway to recover it once it's lost.\n"},{"hash":"234c58467c3709bafdd3ffa6ac73655e1dfd9ddb","date":"2015-09-12T02:55:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make sh clone asm fdpic-compatible\n\nclone calls back to a function pointer provided by the caller, which\nwill actually be a pointer to a function descriptor on fdpic. the\nobvious solution is to have a separate version of clone for fdpic, but\nI have taken a simpler approach to go around the problem. instead of\ncalling the pointed-to function from asm, a direct call is made to an\ninternal C function which then calls the pointed-to function. this\nlets the C compiler generate the appropriate calling convention for an\nindirect call with no need for ABI-specific assembly.\n"},{"hash":"6d03c4ee586576bf199cf8d6dc86ba4cd54e4186","date":"2015-09-12T03:10:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"provide arch-generic fdpic self-relocation code for crt1 to use\n\nthis file is intended to be included by crt_arch.h on fdpic-based\ntargets and needs to be called from the entry point asm.\n"},{"hash":"4ccc1a01e037251a0ddc3dd07dd1a1fb91a8aa16","date":"2015-09-12T03:18:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fdpic version of entry point code for sh\n\nthis version of the entry point is only suitable for static linking in\nET_EXEC form. neither dynamic linking nor pie is supported yet. at\nsome point in the future the fdpic and non-fdpic versions of this code\nmay be unified but for now it's easiest to work with them separately.\n"},{"hash":"d4c82d05b8d0ee97f6356d60986799a95ed5bd74","date":"2015-09-12T03:23:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add sh fdpic subarch variants\n\nwith this commit it should be possible to produce a working\nstatic-linked fdpic libc and application binaries for sh.\n\nthe changes in reloc.h are largely unused at this point since dynamic\nlinking is not supported, but the CRTJMP macro is used one place\noutside of dynamic linking, in __unmapself.\n"},{"hash":"b291e7ca9bf231da3dbb54f598e39e0785afc423","date":"2015-09-15T18:28:07.000Z","author":{"name":"Felix Janda","email":"felix.janda@posteo.de"},"message":"fix namespace violations in aarch64/bits/termios.h\n\nin analogy with commit a627eb35864d5c29a3c3300dfe83745ab1e7a00f\n"},{"hash":"64b6684ddd95ef17349a6e640806bfee9f873715","date":"2015-09-15T18:30:08.000Z","author":{"name":"Felix Janda","email":"felix.janda@posteo.de"},"message":"reindent powerpc's bits/termios.h to be consistent with other archs\n"},{"hash":"ccc71e0ea881b7f6594ed95afd706442829c39fc","date":"2015-09-15T20:30:36.000Z","author":{"name":"Khem Raj","email":"raj.khem@gmail.com"},"message":"add format argument attributes to gettext function prototypes\n\ntheir absence completely breaks format string warnings in programs\nwith gettext message translations: -Wformat gives no results, and\n-Wformat-nonliteral produces spurious warnings.\n\nwith gcc, the problem manifests only in standards-conforming profiles;\notherwise gcc sets these attributes by default for the gettext family.\nwith clang, the problem always manifests; clang has no such defaults.\n"},{"hash":"a603a75a72bb469c6be4963ed1b55fabe675fe15","date":"2015-09-17T04:45:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove attribute((const)) from pthread_self and errno location decls\n\nthis attribute was applied to pthread_self and the functions providing\nthe locations for errno and h_errno as an optimization; however, it is\nsubtly incorrect. as specified, it means the return value will always\nbe the same, which is not true; it varies per-thread.\n\nthis attribute also implies that the function does not depend on any\nstate, and that calls to it can safely be reordered across any other\ncode. however such reordering is unsafe for these functions: they\nbreak when reordered before initialization of the thread pointer. such\nbreakage was actually observed when compiled by libfirm/cparser.\n\nto some extent the reordering problem could be solved with strong\ncompiler barriers between the stages of early startup code, but the\nspecified meaning of of attribute((const)) is sufficiently strong that\na compiler would theoretically be justified inserting gratuitous calls\nto attribute((const)) const functions at random locations (e.g. to\nsave the value in static storage for later use).\n\nthis reverts commit cbf35978a9870fb1f5c73a852c986d4fcca6c2d4.\n"},{"hash":"2907afb8dbd4c1d34825c3c9bd2b41564baca210","date":"2015-09-17T06:30:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"introduce new symbol-lookup-free rcrt1/dlstart stage chaining\n\npreviously, the call into stage 2 was made by looking up the symbol\nname \"__dls2\" (which was chosen short to be easy to look up) from the\ndynamic symbol table. this was no problem for the dynamic linker,\nsince it always exports all its symbols. in the case of the static pie\nentry point, however, the dynamic symbol table does not contain the\nnecessary symbol unless -rdynamic/-E was used when linking. this\nlinking requirement is a major obstacle both to practical use of\nstatic-pie as a nommu binary format (since it greatly enlarges the\nfile) and to upstream toolchain support for static-pie (adding -E to\ndefault linking specs is not reasonable).\n\nthis patch replaces the runtime symbolic lookup with a link-time\nlookup via an inline asm fragment, which reloc.h is responsible for\nproviding. in this initial commit, the asm is provided only for i386,\nand the old lookup code is left in place as a fallback for archs that\nhave not yet transitioned.\n\nmodifying crt_arch.h to pass the stage-2 function pointer as an\nargument was considered as an alternative, but such an approach would\nnot be compatible with fdpic, where it's impossible to compute\nfunction pointers without already having performed relocations. it was\nalso deemed desirable to keep crt_arch.h as simple/minimal as\npossible.\n\nin principle, archs with pc-relative or got-relative addressing of\nstatic variables could instead load the stage-2 function pointer from\na static volatile object. that does not work for fdpic, and is not\nsafe against reordering on mips-like archs that use got slots even for\nstatic functions, but it's a valid on i386 and many others, and could\nprovide a reasonable default implementation in the future.\n"},{"hash":"57e2dce7e46f8f94318f1d4dec590c9f1c3025dc","date":"2015-09-17T07:20:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new dlstart stage-2 chaining for microblaze\n"},{"hash":"cd7159e7be73451befedce2e9dfd9f6a4c3b21f0","date":"2015-09-17T07:20:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new dlstart stage-2 chaining for mips\n"},{"hash":"4761e63bc4d1ae2e3298fcee1fddced94281d9e7","date":"2015-09-17T07:20:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new dlstart stage-2 chaining for or1k\n"},{"hash":"c16182680c9ac8ad65f8ff38f6ae170feb0d33c7","date":"2015-09-17T07:20:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new dlstart stage-2 chaining for powerpc\n"},{"hash":"12b0b7d8eab5ec428b779d83bd3c6edad2f31993","date":"2015-09-17T07:28:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"new dlstart stage-2 chaining for x86_64 and x32\n"},{"hash":"6fc30c2493fcfedec89e45088bea87766a1e3286","date":"2015-09-17T08:16:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove old dlstart stage-2 symbolic lookup code; add new generic\n\nthis new generic version of the stage-2 function lookup should work\nfor any arch where static data is accessible via got-relative or\npc-relative addressing, using approximately the technique described in\nthe log message for commit 2907afb8dbd4c1d34825c3c9bd2b41564baca210.\n\nsince all the mips-like archs that need got slots fo access static\ndata have already transitioned to the new stage chaining scheme, the\nold dynamic symbol lookup code is now removed.\n\naarch64, arm, and sh have not yet transitioned; with this commit, they\nare now using the new generic code.\n"},{"hash":"301335a80b85f12c018e4acf1a2c28615e119f8d","date":"2015-09-17T17:18:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"begin refactoring load address computations in dynamic linker\n\nfor ordinary ELF with fixed segment displacements, load address\ncomputation is simply adding the base load address. but for FDPIC,\neach segment has its own load address, and virtual addresses need to\nbe adjusted according to the segment they fall in. abstracting this\ncomputation is the first step to making the dynamic linker ready for\nFDPIC.\n\nfor this first commit, a macro is used rather than a function in order\nto facilitate correctness checking. I have verified that the generated\ncode does not change on my i386 build.\n"},{"hash":"a735f53e6ab094bce9b992dd3d3127fdb4ffdcc2","date":"2015-09-17T17:50:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"further refactoring of dynamic linker load address computations\n\nthese are in do_relocs. the first one was omitted in commit\n301335a80b85f12c018e4acf1a2c28615e119f8d because it slightly changes\ncode (using dso->base rather than cached local var base) and would\nhave prevented easy verification. the other was an oversight.\n"},{"hash":"eb567c12cd4cafa66fd1ed3fdb97af7e70222118","date":"2015-09-17T18:51:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add fdpic structs and reloc types for dynamic linking\n"},{"hash":"e6076c99dd7b6caf859f2ea33e70afd14aa78306","date":"2015-09-17T19:21:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove some useless casts in dynamic linker\n"},{"hash":"2a5473382014aa49c6ff236db3a60c8050b9e327","date":"2015-09-17T19:45:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor some more dynamic linker load address computations\n\nthese were just missed in the previous commits.\n"},{"hash":"d874064579f4dd8150b0d6ff6d98942af6fcd1c3","date":"2015-09-21T20:42:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify dlstart code by using integer type for base address\n"},{"hash":"3958144ede01a7e64a56c0430f053bfd80ff02eb","date":"2015-09-21T21:47:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"factor symbol counting out of dladdr as its own function\n\nthe fdpic code will need to count symbols, and it may be useful\nelsewhere in the future too. counting is trivial as long as sysv hash\nis present, but for gnu-hash-only libraries it's complex.\n\nthe behavior of the count is changed slightly: we now include symbols\nthat are not accessible by the gnu hash table in the count. this may\nmake dladdr slightly slower. if this is a problem, dladdr can subtract\nout the part that should not be accessible. unlike in the old code,\nsubtracting this out is easy even in the fast path where sysv hash is\navailable too.\n"},{"hash":"7a9669e977e5f750cf72ccbd2614f8b72ce02c4c","date":"2015-09-22T03:54:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add general fdpic support in dynamic linker and arch support for sh\n\nat this point not all functionality is complete. the dynamic linker\nitself, and main app if it is also loaded by the kernel, take\nadvantage of fdpic and do not need constant displacement between\nsegments, but additional libraries loaded by the dynamic linker follow\nnormal ELF semantics for mapping still. this fully works, but does not\nadmit shared text on nommu.\n\nin terms of actual functional correctness, dlsym's results are\npresently incorrect for function symbols, RTLD_NEXT fails to identify\nthe caller correctly, and dladdr fails almost entirely.\n\nwith the dynamic linker entry point working, support for static pie is\nautomatically included, but linking the main application as ET_DYN\n(pie) probably does not make sense for fdpic anyway. ET_EXEC is\nequally relocatable but more efficient at representing relocations.\n"},{"hash":"cab2b1f9d71db31d6dc4ae9dcab6989182b7b533","date":"2015-09-22T04:10:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around breakage in sh/fdpic __unmapself function\n\nthe C implementation of __unmapself used for potentially-nommu sh\nassumed CRTJMP takes a function descriptor rather than a code address;\nhowever, the actual dynamic linker needs a code address, and so commit\n7a9669e977e5f750cf72ccbd2614f8b72ce02c4c changed the definition of the\nmacro in reloc.h. this commit puts the old macro back in a place where\nit only affects __unmapself.\n\nthis is an ugly workaround and should be cleaned up at some point, but\nat least it's well isolated.\n"},{"hash":"7f9086df95b707b4518d22d4d1dbd747085e115d","date":"2015-09-22T04:14:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"size-optimize sh/fdpic dynamic entry point\n\nthe __fdpic_fixup code is not needed for ET_DYN executables, which\ninstead use reloctions, so we can omit it from the dynamic linker and\nstatic-pie entry point and save some code size.\n"},{"hash":"c42650abb0d7040cdc427fc083fa38be6ee4a4cf","date":"2015-09-22T04:35:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove configure's suppression of enable sh/fdpic shared library build\n"},{"hash":"2462370b4fad6f7a05abc65407369d4f621bf85e","date":"2015-09-22T15:45:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"try to suppress linking libc.so if there are undefined symbols\n\nthis is always an error and usually results from failure to find/link\nthe compiler runtime library, but it could also result from\nimplementation errors in libc, using functions that don't (yet) exist.\neither way the resulting libc.so will crash mysteriously at runtime.\nthe crash happens too early to produce a meaningful error, so these\ncrashes are very confusing to users and waste a lot of debugging time.\nthis commit should ensure that they do not happen.\n"},{"hash":"eaf7ab6e24914bae8092edf05919e43f10092533","date":"2015-09-22T19:12:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add real fdpic loading of shared libraries\n\npreviously, the normal ELF library loading code was used even for\nfdpic, so only the kernel-loaded dynamic linker and main app could\nbenefit from separate placement of segments and shared text.\n"},{"hash":"30fdc06bbaeaff871780f9816e312e3820fb214a","date":"2015-09-22T19:21:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix resolving interp string address on fdpic ldd command\n"},{"hash":"78f430295c92ae15510082c04e537da4256aa7a7","date":"2015-09-22T20:20:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage in non-fdpic dynamic linker init/fini processing\n\na mistaken #ifdef instead of #if caused conversion of code addresses\nto function descriptors to be performed even on non-fdpic.\n"},{"hash":"c87a52103399135d2f57a91a8bcc749d8cb2ca83","date":"2015-09-22T20:24:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move calls to application init functions after crt1 entry point\n\nthis change is needed to be compatible with fdpic, where some of the\nmain application's relocations may be performed as part of the crt1\nentry point. if we call init functions before passing control, these\nrelocations will not yet have been performed, and the init code will\npotentially make use of invalid pointers.\n\nconceptually, no code provided by the application or third-party\nlibraries should run before the application entry point. the\ndifference is not observable to programs using the crt1 we provide,\nbut it could come into play if custom entry point code is used, so\nit's better to be doing this right anyway.\n"},{"hash":"e9e770dfd6224a5ff7932b6115a35005dce7be29","date":"2015-09-22T20:51:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"have sh/fdpic entry point set fdpic personality if needed\n\nthe entry point code supports being loaded by a loader which is not\nfdpic-aware (in practice, either kernel with mmu or qemu without fdpic\nsupport). this mostly just works, but signal handling will wrongly use\na function descriptor address as a code address if the personality is\nnot adjusted to fdpic.\n\nideally this code could be placed with sigaction so that it's not\nneeded except if/when a signal handler is installed. however,\npersonality is incorrectly maintained per-thread by the kernel, rather\nthan per-process, so it's necessary to correct the personality before\nany threads are started. also, in order to skip the personality\nsyscall when an fdpic-aware loader is used, we need to be able to\ndetect how the program was loaded, and this information is only\nreadily available at the entry point.\n"},{"hash":"d47d9a50f2568927af51e21b2f2120409db1ab44","date":"2015-09-22T23:11:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dlsym lookup of function symbols on fdpic\n\npreviously these resolved to the code address rather than the address\nof the function descriptor.\n\nthe conditions for accepting or rejecting symbols are quite\ninconsistent between the different points in the dynamic linker code\nwhere such decisions are made. this commit attempts to be at least as\ncorrect as anything already there, but does not improve consistency.\nit has been tested to correctly avoid symbols that are merely\nreferences to functions defined in other modules, at least in simple\nusage, but at some point all symbol lookup logic should be reviewed\nand refactored/unified.\n"},{"hash":"6c5cad2aa56745302c1d42d2c8baf6424d29c0f3","date":"2015-09-22T23:41:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dlsym RTLD_NEXT behavior for fdpic\n\nlookup the dso an address falls in based on the loadmap and not just a\nbase/length. fix the main app's fake loadmap used when loaded by a\nnon-fdpic-aware loader so that it does not cover the whole memory\nspace.\n\nfunction descriptor addresses are also matched for future use by\ndladdr, but reverse lookups of function descriptors via dladdr have\nnot been implemented yet. some revisions may be needed in the future\nonce reclaim_gaps supports fdpic, so that function descriptors\nallocated in reclaimed heap space do not get detected as belonging to\nthe module whose gaps they were allocated in.\n"},{"hash":"b61df2294f662540786f2558f691eba7447ff5ba","date":"2015-09-23T18:33:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signal return for sh/fdpic\n\nthe restorer function pointer provided in the kernel sigaction\nstructure is interpreted by the kernel as a raw code address, not a\nfunction descriptor.\n\nthis commit moves the declarations of the __restore and __restore_rt\nsymbols to ksigaction.h so that arch versions of the file can override\nthem, and introduces a version for sh which declares them as objects\nrather than functions.\n\nan alternate solution would have been defining SA_RESTORER to 0 so\nthat the functions are not used, but this both requires executable\nstack (since the sh kernel does not have a vdso page with permanent\nrestorer functions) and crashes on qemu user-level emulation.\n"},{"hash":"4260dfe1ecc43d92d1e6d30daa0f22bd746d1740","date":"2015-09-24T06:33:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regcomp: propagate allocation failures\n\nThe error code of an allocating function was not checked in tre_add_tag.\n"},{"hash":"bd275378d35b3535bc8b8321780b00e486c36d96","date":"2015-09-24T06:33:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"avoid reading uninitialized memory in __map_file\n\nThe value of *size is not relevant in case of failure, but it's\nbetter not to copy garbage from the stack into it.\n(The compiler cannot see through the syscall, so optimization\nwas not affected by the unspecified value).\n"},{"hash":"b4d94ba40dda0fa0c3f499beed51b55ad31d5305","date":"2015-09-24T06:40:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix localeconv field value for unavailable values\n\nper ISO C, CHAR_MAX, not -1, is the value used to indicate that a char\nfield in struct lconv is unavailable.\n\npatch by Julien Ramseier.\n"},{"hash":"06bcf9bc941a2f3bf34ac4468644d9693802495b","date":"2015-09-25T01:03:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make getaddrinfo return error if both host and service name are null\n\nthis case is specified as a mandatory (\"shall fail\") error.\n\nbased on patch by Julien Ramseier.\n"},{"hash":"2a6e1f0f5a8811d08101df0fd72b9baa27ed430c","date":"2015-09-25T01:18:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid attempting to lookup IP literals as hostnames\n\npreviously, __lookup_ipliteral only checked its argument against the\nrequested address family, so IPv4 literals passed through to\n__lookup_name if the caller asked for only IPv6 results, and likewise\nfor IPv6 literals when the caller asked for only IPv4. this resulted\nin spurious DNS lookups that reportedly even succeeded with some\nnameservers.\n\nnow, __lookup_ipliteral attempts to parse its argument as both IPv4\nand IPv6, and returns an error (to stop further search) rather than 0\n(no results yet) if the form of the argument mismatches the requested\naddress family.\n\nbased on patch by Julien Ramseier.\n"},{"hash":"f3a53f095cd8ba108f8ac780da27a5ebbf4b224f","date":"2015-09-29T02:44:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate protected-visibility data in libc.so with vis.h preinclude\n\nsome newer binutils versions print scary warnings about protected data\nbecause most gcc versions fail to produce the right address\nreferences/relocations for such data that might be subject to copy\nrelocations. originally vis.h explicitly assigned default visibility\nto all public data symbols to avoid this issue, but commit\nb8dda24fe1caa901a99580f7a52defb95aedb67c removed this treatment for\nstdin/out/err to work around a gcc 3.x bug, and since they don't\nactually need it (because taking their addresses is not valid C).\n\ninstead, a check for the gcc 3.x bug is added to the configure check\nfor vis.h preinclude support; this feature will simply be disabled\nwhen using a buggy version of gcc.\n"},{"hash":"fd2add5ba01145593d71362c40a0a39b0b3dd7d2","date":"2015-10-01T05:10:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mips fesetround failure to write back resulting mode\n\npatch by Anand Takale.\n"},{"hash":"2d51c4ad57d5cbb083b5bce94ff692490c10ee2d","date":"2015-10-01T22:59:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make nl_langinfo(CODESET) always return \"ASCII\" in byte-based C locale\n\ncommit 844212d94f582c4e3c5055e0a1524931e89ebe76, which did not make it\ninto any releases, changed nl_langinfo(CODESET) to always return\n\"UTF-8\", even in the byte-based C locale. this was problematic because\napplication software was found to use the string match for \"UTF-8\" to\nactivate its own UTF-8 processing. this both undermines the byte-based\nfunctionality of the C locale, and if mixed with with calls to the\nstandard multibyte functions, which happened in practice, could result\nin severe mis-handling of input.\n\nthe motive for the previous change was that, to avoid widespread\ncompatibility problems, the string returned by nl_langinfo(CODESET)\nneeds to be accepted by iconv and by third-party character conversion\ncode. thus, the only remaining choice is \"ASCII\". this choice\naccurately represents the intent that high bytes do not have\nindividual meaning in the C locale, but it does mean that iconv, when\npassed nl_langinfo(CODESET) in the C locale, will produce errors in\ncases where mbrtowc would have succeeded. for reference, glibc behaves\nsimilarly in this regard, so I don't think it will be a problem.\n"},{"hash":"0650a05947c9f67cedff693d2e1c2f61a8e6c0d3","date":"2015-10-08T21:03:10.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"factor common awk functions for CFI generation scripts into new file\n\nThere is a lot which could be common between i386 and x86_64, but none\nof it will be useful for any other arch. These should be useful for\nall archs, however.\n"},{"hash":"dc97951402b499023ce877dd2438bce0840b2c26","date":"2015-10-08T21:04:41.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"fix instruction matching errors in i386 CFI generation\n\nfdiv and fmul instructions were wrongly matched by the rules for\ninteger div and mul instructions, leading to incorrect conclusions\nabout register values being clobbered.\n"},{"hash":"7b9f57f207b51132f188f750161953b7baf32154","date":"2015-10-08T22:10:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix open_[w]memstream behavior when no writes take place\n\nthe specification for these functions requires that the buffer/size\nexposed to the caller be valid after any successful call to fflush or\nfclose on the stream. the implementation's approach is to update them\nonly at flush time, but that misses the case where fflush or fclose is\ncalled without any writes having taken place, in which case the write\nflushing callback will not be called.\n\nto fix both the observable bug and the desired invariant, setup empty\nbuffers at open time and fail the open operation if no memory is\navailable.\n"},{"hash":"c82d3bada30cb27e14abda7859da5d2e784830ff","date":"2015-10-08T23:30:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix integer overflows in time_t/struct tm conversion code\n\nas found and reported by Brian Mastenbrook, the expressions\n400*qc_cycles and years+100 in __secs_to_tm were both subject to\ninteger overflow for extreme values of the input t.\n\nthis patch by Szabolcs Nagy fixes the code by switching to larger\ntypes, and matches the original intent I had in mind when writing this\ncode.\n"},{"hash":"fef9c801feeccbb40623f0c2a6e4f2b19f58a34b","date":"2015-10-13T21:21:05.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"fix misinterpretation of operand order in i386 CFI generation\n\nbinary ops like ADD, AND, etc. modify the 2nd operand, not 1st.\n"},{"hash":"8cfdfa9c8fd84d4090bba54eb616a2c9361a076f","date":"2015-10-13T21:58:43.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"fix misinterpretation of indexed memory operand in i386 CFI generation\n\na register used as an index in the memory destination of a mov\ninstruction was wrongly interpreted as the destination of the mov.\n"},{"hash":"1b0c9cd099e80a7557eb4ae36efb1897f7202a02","date":"2015-10-13T22:02:36.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"recognize partial register operands in i386 CFI generation\n"},{"hash":"4e6b8eee7755a5aa7f866d0d0cd290653fd87a31","date":"2015-10-13T22:09:46.000Z","author":{"name":"Alex Dowad","email":"alexinbeijing@gmail.com"},"message":"add CFI generation script for x86_64\n"},{"hash":"6fef8cafbd0f6f185897bc87feb1ff66e2e204e1","date":"2015-10-14T21:08:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove hand-written crt1.s and Scrt1.s files for all archs\n\nsince commit c5e34dabbb47d8e97a4deccbb421e0cd93c0094b, crt1.c has\nprovided a \"mostly-C\" implementation of the crt1 start file that\navoids the need for arch-specific symbol referencing, PIC/PIE-specific\ncode variants, etc. but for archs that had existing hand-written\nversions, the new code was initially unused, and later only used as\nthe dynamic linker entry point. this commit switches all archs to\nusing the new code.\n\nthe code being removed was a recurring source of subtle errors, and\nwas still broken at least on arm, where it failed to properly align\nthe stack pointer before calling into C code.\n"},{"hash":"8d93cb57754f1f81f8e15bb74afd1725cead45c2","date":"2015-10-14T22:58:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix strftime handling of out-of-range struct tm fields\n\nstrftime results are unspecified in this case, but should not invoke\nundefined behaviour.\n\ntm_wday, tm_yday, tm_mon and tm_year fields were used in signed int\narithmetic that could overflow.\n\nbased on patch by Szabolcs Nagy.\n"},{"hash":"0ba35d69c0e77b225ec640d2bd112ff6d9d3b2af","date":"2015-10-15T04:20:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove attribute((const)) from arm __pthread_self inline function\n\ncommit a603a75a72bb469c6be4963ed1b55fabe675fe15 did this for the\npublic pthread_self function but not the internal inline one.\n"},{"hash":"11da520c7af5b190e69c0906c6e95000c4e59f33","date":"2015-10-15T04:55:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add comment documenting hard-coded opcode for reading mips thread pointer\n"},{"hash":"74483c5955a632af5d9a4783cc2b541764450551","date":"2015-10-15T16:04:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"mark arm thread-pointer-loading inline asm as volatile\n\nthis builds on commits a603a75a72bb469c6be4963ed1b55fabe675fe15 and\n0ba35d69c0e77b225ec640d2bd112ff6d9d3b2af to ensure that a compiler\ncannot conclude that it's valid to reorder the asm to a point before\nthe thread pointer is set up, or to treat the inline function as if it\nwere declared with attribute((const)).\n\nother archs already use volatile asm for thread pointer loading.\n"},{"hash":"92637bb0d8f13940aebd2a8116cc935c3e7d8266","date":"2015-10-15T16:08:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prevent reordering of or1k and powerpc thread pointer loads\n\nother archs use asm for the thread pointer load, so making that asm\nvolatile is sufficient to inform the compiler that it has a \"side\neffect\" (crashing or giving the wrong result if the thread pointer was\nnot yet initialized) that prevents reordering. however, powerpc and\nor1k have dedicated general purpose registers for the thread pointer\nand did not need to use any asm to access it; instead, \"local register\nvariables with a specified register\" were used. however, there is no\nspecification for ordering constraints on this type of usage, and\npresumably use of the thread pointer could be reordered across its\ninitialization.\n\nto impose an ordering, I have added empty volatile asm blocks that\nproduce the \"local register variable with a specified register\" as\nan output constraint.\n"},{"hash":"797899802d5623a6ec05663c997a30e03dc27421","date":"2015-10-15T21:21:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"suppress sh assembler rejection of instructions based on isa level\n\nwe need access to all instructions in order for runtime selection of\natomic model to work correctly. without this patch, some versions of\ngcc instruct gas to reject instructions outside the target isa level.\n"},{"hash":"bc9b6ea0df6a820878d9ac538b2b852fec367d41","date":"2015-10-15T21:38:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix visibility mismatch in dynamic linker stage 2 function definition\n\nsince commits 2907afb8dbd4c1d34825c3c9bd2b41564baca210 and\n6fc30c2493fcfedec89e45088bea87766a1e3286, __dls2 is no longer called\nvia symbol lookup, but instead uses relative addressing that needs to\nbe resolved at link time. on some linker versions, and/or if\n-Bsymbolic-functions is not used, the linker may leave behind a\ndynamic relocation, which is not suitable for bootstrapping the\ndynamic linker, if the reference to __dls2 is marked hidden but the\ndefinition is not actually hidden. correcting the definition to use\nhidden visibility fixes the problem.\n\nthe static-PIE entry point rcrt1 was likewise affected and is also\nfixed by this patch.\n"},{"hash":"bde0b4b92e2c3f8d26d28e8478f196233ce51618","date":"2015-10-16T02:51:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dladdr treatment of function descriptors for fdpic\n\nwhen determining which module an address belongs to, all function\ndescriptor ranges must be checked first, in case the allocated memory\nfalls inside another module's memory range.\n\ndladdr itself must also check addresses against function descriptors\nbefore doing a best-match search against the symbol table. even when\ndoing the latter (e.g. for code addresses obtained from mcontext_t),\nalso check whether the best-match was a function, and if so, replace\nthe result with a function descriptor address. which is the nominal\n\"base address\" of the function and which the caller needs if it\nintends to subsequently call the matching function.\n"},{"hash":"53cd8c5a29b57ef3776ce152e00544752f3ce790","date":"2015-10-16T02:58:59.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"add missing memory barrier to pthread_join\n\nPOSIX requires pthread_join to synchronize memory on success.  The\nfutex wait inside __timedwait_cp cannot handle this because it's not\ncalled in all cases.  Also, in the case of a spurious wake, tid can\nbecome zero between the wake and when the joining thread checks it.\n"},{"hash":"7557a8462e3c973466ce082211520182f243dc2a","date":"2015-10-19T06:05:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"declare fpu usage to the assembler in arm hard-float asm files\n\nSome armhf gcc toolchains (built with --with-float=hard but without\n--with-fpu=vfp*) do not pass -mfpu=vfp to the assembler and then\nbinutils rejects the UAL mnemonics for VFP unless there is an .fpu vfp\ndirective in the asm source.\n"},{"hash":"615629bd6fcd6ddb69ad762e679f088c7bd878e2","date":"2015-10-19T23:12:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.12\n"},{"hash":"be76cdcf81bdf60d2b7981d9f7d09593f88ef4e6","date":"2015-10-23T03:41:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix breakage when user overrides CFLAGS on the make command line\n\nthese per-target CFLAGS adjustments are mandatory additions to the\ncommand line for building the affected targets, not part of the\nuser-provided CFLAGS for tuning. my intent was always that the\nvariable append operations would take place after user settings, but\nwhen a variable is set on the command line, it overrides all\ndefinitions in the makefile, including target-specific ones.\n\nbased on patch by Szabolcs Nagy.\n"},{"hash":"bc0c48414eaba9e974e54aa8ef611b78037fd387","date":"2015-10-23T04:01:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"prevent user CFLAGS overrides from exposing executable stack\n\nthe option to suppress executable stack tagging was placed in CFLAGS,\nwhich is treated as optional and overridable by the build system. if a\nuser replaces CFLAGS after configure has run, it could get lost,\nresulting in a libc.so that's flagged as needing executable stack,\nwhich would cause the kernel to map the initial stack as executable.\n\nmove -Wa,--noexecstack to CFLAGS_C99FSE, the make variable used for\nmandatory compiler options.\n"},{"hash":"b114190b29417fff6f701eea3a3b3b6030338280","date":"2015-10-25T02:42:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix single-byte overflow of malloc'd buffer in getdelim\n\nthe buffer enlargement logic here accounted for the terminating null\nbyte, but not for the possibility of hitting the delimiter in the\nbuffer-refill code path that uses getc_unlocked, in which case two\nadditional bytes (the delimiter and the null termination) are written\nwithout another chance to enlarge the buffer.\n\nthis patch and the corresponding bug report are by Felix Janda.\n"},{"hash":"2683e267fa6c20d2e7a498a85f79a1dfc4301f23","date":"2015-10-26T22:42:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"safely handle failure to open hosts, services, resolv.conf files\n\npreviously, transient failures like fd exhaustion or other\nresource-related errors were treated the same as non-existence of\nthese files, leading to fallbacks or false-negative results. in\nparticular:\n\n- failure to open hosts resulted in fallback to dns, possibly yielding\n  EAI_NONAME for a hostname that should be defined locally, or an\n  unwanted result from dns that the hosts file was intended to\n  replace.\n\n- failure to open services resulted in EAI_SERVICE.\n\n- failure to open resolv.conf resulted in querying localhost rather\n  than the configured nameservers.\n\nnow, only permanent errors trigger the fallback behaviors above; all\nother errors are reportable to the caller as EAI_SYSTEM.\n"},{"hash":"6eada2edb302ff061be8546b23c9cb836621d122","date":"2015-10-27T00:00:03.000Z","author":{"name":"Hauke Mehrtens","email":"hauke@hauke-m.de"},"message":"getnameinfo: make size check not fail for bigger sizes\n\ngetnameinfo() compares the size of the given struct sockaddr with\nsizeof(struct sockaddr_in) and sizeof(struct sockaddr_in6) depending on\nthe net family. When you add a sockaddr of size sizeof(struct\nsockaddr_storage) this function will fail because the size of the\nsockaddr is too big. Change the check that it only fails if the size is\ntoo small, but make it work when it is too big for example when someone\ncalls this function with a struct sockaddr_storage and its size.\nThis fixes a problem with IoTivity 1.0.0 and musl.\n\nglibc and bionic are only failing if it is smaller, net/freebsd\nimplemented the != check.\n\nSigned-off-by: Hauke Mehrtens <hauke@hauke-m.de>\n"},{"hash":"fead7e3fc04729b4cc8a5feec4a172b389395212","date":"2015-10-29T01:45:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing bss handling in FDPIC ELF loader\n\nwhen a library being loaded has bss (i.e. data segment with\np_memsz>p_filesz), this region needs to be zeroed with a combination\nof memset and/or mmap. the regular ELF loader always did this but the\nFDPIC code path omitted it, leading to objects in bss having\nuninitialized/junk contents.\n"},{"hash":"cb1bf2f321b45a06447133b3db00621b7300c456","date":"2015-11-02T17:41:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"properly access mcontext_t program counter in cancellation handler\n\nusing the actual mcontext_t definition rather than an overlaid pointer\narray both improves correctness/readability and eliminates some ugly\nhacks for archs with 64-bit registers bit 32-bit program counter.\n\nalso fix UB due to comparison of pointers not in a common array\nobject.\n"},{"hash":"36e8b6a28be5d4ffad966386b1e1c0d0dc6ca11a","date":"2015-11-02T21:16:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use explicit __cp_cancel label in cancellable syscall asm for all archs\n\npreviously, only archs that needed to do stack cleanup defined a\n__cp_cancel label for acting on cancellation in their syscall asm, and\na default definition was provided by a weak alias to __cancel, the C\nfunction. this resulted in wrong codegen for arm on gcc versions\naffected by pr 68178 and possibly similar issues (like pr 66609) on\nother archs, and also created an inconsistency where the __cp_begin\nand __cp_end labels were treated as const data but __cp_cancel was\ntreated as a function. this in turn caused incorrect code generation\non archs where function pointers point to function descriptors rather\nthan code (for now, only sh/fdpic).\n"},{"hash":"f9ecb6bfa1dc9f93a10dad97a158e6b8334c586c","date":"2015-11-02T21:30:25.000Z","author":{"name":"Daniel Micay","email":"danielmicay@gmail.com"},"message":"prevent allocs than PTRDIFF_MAX via mremap\n\nIt's quite feasible for this to happen via MREMAP_MAYMOVE.\n"},{"hash":"fda365a53074f97f3213caefe70ea13297acecb2","date":"2015-11-02T21:37:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mremap memory synchronization and use of variadic argument\n\nsince mremap with the MREMAP_FIXED flag is an operation that unmaps\nexisting mappings, it needs to use the vm lock mechanism to ensure\nthat any in-progress synchronization operations using vm identities\nfrom before the call have finished.\n\nalso, the variadic argument was erroneously being read even if the\nMREMAP_FIXED flag was not passed. in practice this didn't break\nanything, but it's UB and in theory LTO could turn it into a hard\nerror.\n"},{"hash":"4cd8b4725907651f329e2f96d428c4e3521643f8","date":"2015-11-02T21:58:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"keep user-provided CFLAGS/LDFLAGS separate from those added by configure\n\nthis way, overriding these variables on the make command line (or just\nre-passing the originally-passed values when invoking make) won't\nsuppress use of the flags added by configure.\n"},{"hash":"4fcb48275adbe1959852d298425e2da610708975","date":"2015-11-02T23:11:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"generalize sh entry point asm not to assume call dests fit in 12 bits\n\nthis assumption is borderline-unsafe to begin with, and fails badly\nwith -ffunction-sections since the linker can move the callee\narbitrarily far away when it lies in a different section.\n"},{"hash":"2f1d1f1ec538c4fa9b62358cf0d3dba5e646a572","date":"2015-11-03T02:44:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mismatched parens in CMPLX def for annex-g-conforming compilers\n\nthis conditional path was never tested because there are no compilers\nthat conform to annex g (none with _Imaginary_I).\n"},{"hash":"27c1eccf33ce5cb7508ef5e541daa9b6441b4a51","date":"2015-11-04T18:24:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"have configure check/add -ffunction-sections and -fdata-sections\n\nbased on patch by Denys Vlasenko. the original intent for using these\noptions was to enable linking optimizations. these are immediately\navailable for static linking applications to libc.a, and will also be\nused for linking libc.so in a subsequent commit.\n\nin addition to the original motives, this change works around a whole\nclass of toolchain bugs where the compiler generates relative address\nexpressions using a weak symbol and the assembler \"optimizes out\" the\nrelocation which should result by using the weak definition. (see gas\npr 18561 and gcc pr 66609, 68178, etc. for examples.) by having\ndifferent functions and data objects in their own sections, all\nrelative address expressions are cross-section and thus cannot be\nresolved to constants until link time. this allows us to retain\nsupport for affected compiler/assembler versions without invasive\nand fragile source-level workarounds.\n"},{"hash":"2efd38e8c70f00ca6bbc1eb5199aa507d45436cf","date":"2015-11-05T02:39:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"have configure check/add linker options to reduce size lost to padding\n\nbased on patch by Denys Vlasenko. sorting sections and common data\nsymbols by alignment acts as an approximation for optimal packing,\nwhich the linker does not actually support.\n"},{"hash":"6a851e3ab8a1ae524b2aa6218615ec1c86528e9c","date":"2015-11-05T02:40:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"have configure check/add --gc-sections linker option\n\nthis allowing the linker to drop certain weak definitions that are\nonly used as dummies for static linking. they could be eliminated for\nshared library builds using the preprocessor instead, but we are\ntrying to transition to using the same object files for shared and\nstatic libc, so a link-time solution is preferable.\n"},{"hash":"918b1c1d177b5e3cf22a8aae4a01776495fdc3bc","date":"2015-11-05T02:41:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove external linkage from __simple_malloc definition\n\nthis function is used only as a weak definition for malloc, for static\nlinking in programs which do not call realloc or free. since it had\nexternal linkage and was thereby exported in libc.so's dynamic symbol\ntable, --gc-sections was unable to drop it. this was merely an\noversight; there's no reason for it to be external, so make it static.\n"},{"hash":"8984b5837a10dcdc654ef5b7948c1377ddd80a02","date":"2015-11-05T22:21:33.000Z","author":{"name":"Rich Felker","email":"dalias@libc.org"},"message":"convert arm memcpy asm to UAL, remove .word hacks\n\ncontrary to commit 9367fe926196f407705bb07cd29c6e40eb1774dd, all\nrelevant gas versions actually do support .syntax unified.\n"},{"hash":"31d73a560b2e14a2030f92f238064e1e98215e50","date":"2015-11-05T23:14:39.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use vfp mnemonics instead of p10 coprocessor ones in armhf fenv asm\n\nmrc/mcr p10 coprocessor mnemonics are deprecated by some\ntoolchains.\n"},{"hash":"ea1e2c5e18dd0790fb9b2af2bd947f4981736dc2","date":"2015-11-08T01:23:49.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around toolchains with broken visibility in libgcc/libpcc\n"},{"hash":"cf40375e8fd14fc02a850af90b145d324d0381b5","date":"2015-11-10T02:14:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use vfp mnemonics rather than hard-coded opcodes in arm setjmp/longjmp\n\nthe code to save/restore vfp registers needs to build even when the\nconfigured target does not have fpu; this is because code using vfp\nfpu (but with the standard soft-float EABI) may call a libc built for\na soft-float only, and the EABI considers these registers call-saved\nwhen they exist. thus, extra directives are used to force the\nassembler to allow vfp instructions and to avoid marking the resulting\nobject files as requiring vfp.\n\nmoving away from using hard-coded opcode words is necessary in order\nto eventually support producing thumb2-only output for cortex-m.\n\nconditional execution of these instructions based on hwcap flags was\nalready implemented. when building for arm (non-thumb) output, the\nonly currently-supported configuration, this commit does not change\nthe code emitted.\n"},{"hash":"9f290a49bf9ee247d540d3c83875288a7991699c","date":"2015-11-10T03:36:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove non-working pre-armv4t support from arm asm\n\nthe idea of the three-instruction sequence being removed was to be\nable to return to thumb code when used on armv4t+ from a thumb caller,\nbut also to be able to run on armv4 without the bx instruction\navailable (in which case the low bit of lr would always be 0).\nhowever, without compiler support for generating such a sequence from\nC code, which does not exist and which there is unlikely to be\ninterest in implementing, there is little point in having it in the\nasm, and it would likely be easier to add pre-armv4t support via\nenhanced linker handling of R_ARM_V4BX than at the compiler level.\n\nremoving this code simplifies adding support for building libc in\nthumb2-only form (for cortex-m).\n"},{"hash":"4e73d12117e362ad4b82946dc084b4a38f76e54b","date":"2015-11-10T05:01:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"explicitly assemble all arm asm sources as UAL\n\nthese files are all accepted as legacy arm syntax when producing arm\ncode, but legacy syntax cannot be used for producing thumb2 with\naccess to the full ISA. even after switching to UAL, some asm source\nfiles contain instructions which are not valid in thumb mode, so these\nwill need to be addressed separately.\n"},{"hash":"a946e8117ed51dd771bd8cac3575fc28a0399a32","date":"2015-11-11T04:07:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix return value of nl_langinfo for invalid item arguments\n\nit was wrongly returning a null pointer instead of an empty string.\n"},{"hash":"9439ebd7668182a1c6213ad1a5011bdc71585b5f","date":"2015-11-11T22:40:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic loader library mapping for nommu systems\n\non linux/nommu, non-writable private mappings of files may actually\nuse memory shared with other processes or the fs cache. the old nommu\nloader code (used when mmap with MAP_FIXED fails) simply wrote over\ntop of the original file mapping, possibly clobbering this shared\nmemory. no such breakage was observed in practice, but it should have\nbeen possible.\n\nthe new code starts by mapping anonymous writable memory on archs that\nmight support nommu, then maps load segments over top of it, falling\nback to read if MAP_FIXED fails. we use an anonymous map rather than a\nwritable file map to avoid reading more data from disk than needed.\nsince pages cannot be loaded lazily on fault, in case of large\ndata/bss, mapping the full file may read a lot of data that will\nsubsequently be thrown away when processing additional LOAD segments.\nas a result, we cannot skip the first LOAD segment when operating in\nthis mode.\n\nthese changes affect only non-FDPIC nommu support.\n"},{"hash":"dc5bd27ac4eb68e7ec84dff0fd26f2ac55360989","date":"2015-11-11T23:27:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use correct nofpu versions of setjmp/longjmp used on sh-nofpu-fdpic\n\nwhen adding the fdpic subarchs, the need for these sub files was\noverlooked. thus setjmp and longjmp performed illegal instructions.\n"},{"hash":"8a8fdf6398b85c99dffb237e47fa577e2ddc9e77","date":"2015-11-12T00:29:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate use of SHARED macro to suppress visibility attributes\n\nthis is the first and simplest stage of removal of the SHARED macro,\nwhich will eventually allow libc.a and libc.so to be produced from the\nsame object files.\n\nthe original motivation for these #ifdefs which are now being removed\nwas to allow building a static-only libc using a compiler that does\nnot support visibility. however, SHARED was the wrong condition to\ntest for this anyway; various assembly-language sources refer to\nhidden symbols and declare them with the .hidden directive, making it\nwrong to define the referenced symbols as non-hidden. if there is a\nneed in the future to build libc using compilers that lack visibility,\nsupport could be moved to the build system or perhaps the __PIC__\nmacro could be checked instead of SHARED.\n"},{"hash":"4aaf879eb08a22c501b43d8604e67614f7dbc55f","date":"2015-11-12T00:43:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate use of SHARED macro in __tls_get_addr\n\nthis was only a tiny optimization, and static-linked binaries should\nnot be calling __tls_get_addr anyway since the linker is supposed to\nperform relaxation, resulting in use of the local-exec TLS model.\n"},{"hash":"ad1cd43a86645ba2d4f7c8747240452a349d6bc1","date":"2015-11-12T03:08:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unify static and dynamic libc init/fini code paths\n\nuse weak definitions that the dynamic linker can override instead of\npreprocessor conditionals on SHARED so that the same libc start and\nexit code can be used for both static and dynamic linking.\n"},{"hash":"d56460c939c94a6c547abe8238f442b8de10bfbd","date":"2015-11-12T21:07:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"unify static and dynamic linked implementations of thread-local storage\n\nthis both allows removal of some of the main remaining uses of the\nSHARED macro and clears one obstacle to static-linked dlopen support,\nwhich may be added at some point in the future.\n\nspecialized single-TLS-module versions of __copy_tls and __reset_tls\nare removed and replaced with code adapted from their dynamic-linked\nversions, capable of operating on a whole chain of TLS modules, and\nuse of the dynamic linker's DSO chain (which contains large struct dso\nobjects) by these functions is replaced with a new chain of struct\ntls_module objects containing only the information needed for\nimplementing TLS. this may also yield some performance benefit\ninitializing TLS for a new thread when a large number of modules\nwithout TLS have been loaded, since since there is no need to walk\nstructures for modules without TLS.\n"},{"hash":"9e0a317d8c699278c9c8e2a829744ea098548416","date":"2015-11-12T21:13:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove use of SHARED macro in dynamic linker version reporting\n\nalso fix visibility of the glue function used.\n"},{"hash":"5fe38516f7ba0318ab792127bb16621920df3319","date":"2015-11-16T02:28:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use private maps even for read-only segments of FDPIC libraries\n\nthe nommu kernel shares memory when it can anyway for private\nread-only maps, but semantically the map should be private. this can\nmake a difference when debugging breakpoints are to be used, in which\ncase the kernel may need to ensure that the mapping is not shared.\n\nthe new behavior matches how the kernel FDPIC loader maps the main\nprogram and/or program interpreter (dynamic linker) binary.\n"},{"hash":"4f3a92881aa1fd9a3ebebe2c9940d70c95a7b0e6","date":"2015-11-19T00:00:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression from removal of #ifdef SHARED\n"},{"hash":"19caa25d0a8e587bb89b79c3f629085548709dd4","date":"2015-11-20T03:10:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove undef weak refs to init/fini array symbols in libc.so\n\ncommit ad1cd43a86645ba2d4f7c8747240452a349d6bc1 eliminated\npreprocessor-level omission of references to the init/fini array\nsymbols from object files going into libc.so. the references are weak,\nand the intent was that the linker would resolve them to zero in\nlibc.so, but instead it leaves undefined references that could be\nsatisfied at runtime. normally these references would be harmless,\nsince the code using them does not even get executed, but some older\nbinutils versions produce a linking error: when linking a program\nagainst libc.so, ld first tries to use the hidden init/fini array\nsymbols produced by the linker script to satisfy the references in\nlibc.so, then produces an error because the definitions are hidden.\n\nideally ld would have already provided definitions of these symbols\nwhen linking libc.so, but the linker script for -shared omits them.\n\nto avoid this situation, the dynamic linker now provides its own dummy\ndefinitions of the init/fini array symbols for libc.so. since they are\nhidden, everything binds at ld time and no references remain in the\ndynamic symbol table. with modern binutils and --gc-sections, both\nthe dummy empty array objects and the code referencing them get\ndropped at link time, anyway.\n\nthe _init and _fini symbols are also switched back to using weak\ndefinitions rather than weak references since the latter behave\nsomewhat problematically in general, and the weak definition approach\nwas known to work well.\n"},{"hash":"8eead3ef18ea71a64ef3cbff8c09bac3b82f1242","date":"2015-11-22T02:41:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"math: explicitly promote expressions to excess-precision types\n\na conforming compiler for an arch with excess precision floating point\n(FLT_EVAL_METHOD!=0; presently i386 is the only such arch supported)\ncomputes all intermediate results in the types float_t and double_t\nrather than the nominal type of the expression. some incorrect\ncompilers, however, only keep excess precision in registers, and\nconvert down to the nominal type when spilling intermediate results to\nmemory, yielding unpredictable results that depend on the compiler's\nchoices of what/when to spill. in particular, this happens on old gcc\nversions with -ffloat-store, which we need in order to work around\nbugs where the compiler wrongly keeps explicitly-dropped excess\nprecision.\n\nby explicitly converting to double_t where expressions are expected be\nbe evaluated in double_t precision, we can avoid depending on the\ncompiler to get types correct when spilling; the nominal and\nintermediate precision now match. this commit should not change the\ncode generated by correct compilers, or by old ones on non-i386 archs\nwhere double_t is defined as double.\n\nthis fixes a serious bug in argument reduction observed on i386 with\ngcc 4.2: for values of x outside the unit circle, sin(x) was producing\nresults outside the interval [-1,1]. changes made in commit\n0ce946cf808274c2d6e5419b139e130c8ad4bd30 were likely responsible for\nbreaking compatibility with this and other old gcc versions.\n\npatch by Szabolcs Nagy.\n"},{"hash":"12978acb3066db738c8c15121e81adbb63739876","date":"2015-11-28T18:34:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"ldso: fix the dtv update logic in __tls_get_new\n\nif two or more threads accessed tls in a dso that was loaded after\nthe threads were created, then __tls_get_new could do out-of-bound\nmemory access (leading to segfault).\n\naccidentally byte count was used instead of element count when\nthe new dtv pointer was computed. (dso->new_dtv is (void**).)\n\nit is rare that the same dso provides dtv for several threads,\nthe crash was not observed in practice, but possible to trigger.\n"},{"hash":"7b712844e38bdfc1ef728e257fb8616c16ec4cc8","date":"2015-11-30T19:57:25.000Z","author":{"name":"Jo-Philipp Wich","email":"jow@openwrt.org"},"message":"properly handle point-to-point interfaces in getifaddrs()\n\nWith point-to-point interfaces, the IFA_ADDRESS netlink attribute\ncontains the peer address while an extra attribute IFA_LOCAL carries\nthe actual local interface address.\n\nBoth the glibc and uclibc implementations of getifaddrs() handle this\ncase by moving the ifa_addr contents to the broadcast/remote address\nunion and overwriting ifa_addr upon receipt of an IFA_LOCAL attribute.\n\nThis patch adds the same special treatment logic of IFA_LOCAL to\nmusl's implementation of getifaddrs() in order to align its behaviour\nwith that of uclibc and glibc.\n\nSigned-off-by: Jo-Philipp Wich <jow@openwrt.org>\n"},{"hash":"e4f9d811684011d8a67e363827de39d5f2d3ae5a","date":"2015-12-08T23:52:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix tdelete to properly balance the tree\n\nthe tsearch data structure is an avl tree, but it did not implement\nthe deletion operation correctly so the tree could become unbalanced.\n\nreported by Ed Schouten.\n"},{"hash":"bc9744763afe72d626e7b9f461001d425582fe9c","date":"2015-12-08T23:52:38.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix tsearch to avoid crash on oom\n\nmalloc failure was not properly propagated in the insertion method\nwhich led to null pointer dereference.\n"},{"hash":"8994908b199a57097f420707b1fca75fc30236fa","date":"2015-12-08T23:53:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"tsearch code cleanup\n\nchanged the insertion method to simplify the recursion logic and\nreduce code size a bit.\n"},{"hash":"3abb094d19ca4c7c4adcf373d971fb5aa05c5252","date":"2015-12-08T23:53:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix tsearch, tfind, tdelete to handle null pointer input\n\nPOSIX specifies the behaviour for null rootp input, but it\nwas not implemented correctly.\n"},{"hash":"0d58bf2d6078dd486951cdeb24790043eb171081","date":"2015-12-16T04:18:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove visibility suppression by SHARED macro in mips and x32 arch files\n\ncommit 8a8fdf6398b85c99dffb237e47fa577e2ddc9e77 was intended to remove\nall such usage, but these arch-specific files were overlooked, leading\nto inconsistent declarations and definitions.\n"},{"hash":"42216742cd69e52e70aeb1d14498a8145872de52","date":"2015-12-16T04:20:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash when signal number 0 is passed to sigaction\n\nthis error case was overlooked in the old range checking logic. new\ncheck is moved out of __libc_sigaction to the public wrapper in order\nto unify the error path and reduce code size.\n"},{"hash":"d87f0a9a95f0a1228ee5579e5822a8c93bc96823","date":"2015-12-20T04:43:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid updating caller's size when getdelim fails to realloc\n\ngetdelim was updating *n, the caller's stored buffer size, before\ncalling realloc. if getdelim then failed due to realloc failure, the\ncaller would see in *n a value larger than the actual size of the\nallocated block, and use of that value is unsafe. in particular,\npassing it again to getdelim is unsafe.\n\nnow, temporary storage is used for the desired new size, and *n is not\nwritten until realloc succeeds.\n"},{"hash":"c673158d91ad995ed59dd910777cd6464f61fe8e","date":"2015-12-20T05:39:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix overly pessimistic realloc strategy in getdelim\n\npreviously, getdelim was allocating twice the space needed every time\nit expanded its buffer to implement exponential buffer growth (in\norder to avoid quadratic run time). however, this doubling was\nperformed even when the final buffer length needed was already known,\nwhich is the common case that occurs whenever the delimiter is in the\nFILE's buffer.\n\nthis patch makes two changes to remedy the situation:\n\n1. over-allocation is no longer performed if the delimiter has already\nbeen found when realloc is needed.\n\n2. growth factor is reduced from 2x to 1.5x to reduce the relative\nexcess allocation in cases where the delimiter is not initially in the\nbuffer, including unbuffered streams.\n\nin theory these changes could lead to quadratic time if the same\nbuffer is reused to process a sequence of lines successively\nincreasing in length, but once this length exceeds the stdio buffer\nsize, the delimiter will not be found in the buffer right away and\nexponential growth will still kick in.\n"},{"hash":"71991a803c8a8fe10a6ed49bc4f0a1f4890d6c46","date":"2015-12-29T17:46:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust i386 max_align_t definition to work around some broken compilers\n\nat least gcc 4.7 claims c++11 support but does not accept the alignas\nkeyword, causing breakage when stddef.h is included in c++11 mode.\ninstead, prefer using __attribute__((__aligned__)) on any compiler\nwith GNU extensions, and only use the alignas keyword as a fallback\nfor other C++ compilers.\n\nC code should not be affected by this patch.\n"},{"hash":"5e396fb996a80b035d0f6ecf7fed50f68aa3ebb7","date":"2015-12-29T18:01:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust mips crt_arch entry point asm to avoid assembler bugs\n\napparently the .gpword directive does not work reliably with local\ntext labels; values produced were offset by 64k from the correct\nvalue, resulting in incorrect computation of the got pointer at\nruntime. instead, use an external label so that the assembler does not\nmunge the relocation; the linker will then get it right.\n\ncommit 6fef8cafbd0f6f185897bc87feb1ff66e2e204e1 exposed this issue by\nremoving the old, non-PIE-compatible handwritten crt1.s, which was not\naffected. presumably mips PIE executables (using Scrt1.o produced from\ncrt_arch.h) were already affected at the time.\n"},{"hash":"d5f8394f6ea9549607567bd92de12a2446c15614","date":"2016-01-06T19:31:32.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"add missing protocols to protoent lookup functions\n"},{"hash":"2f853dd6b9a95d5b13ee8f9df762125e0588df5d","date":"2016-01-17T21:34:43.000Z","author":{"name":"Petr Hosek","email":"phosek@chromium.org"},"message":"support out-of-tree build\n\nthis change adds support for building musl outside of the source\ntree. the implementation is similar to autotools where running\nconfigure in a different directory creates config.mak in the current\nworking directory and symlinks the makefile, which contains the\nlogic for creating all necessary directories and resolving paths\nrelative to the source directory.\n\nto support both in-tree and out-of-tree builds with implicit make\nrules, all object files are now placed into a separate directory.\n"},{"hash":"3cdbfb99c3beda1e04efcc94f0af2abc8dc5d4ad","date":"2016-01-17T22:33:49.000Z","author":{"name":"Ron Yorston","email":"rmy@frippery.org"},"message":"fix if_nametoindex return value when socket open fails\n\nThe return value of if_nametoindex is unsigned; it should return 0\non error.\n"},{"hash":"53f41fb568ae43034c9876cc9bd3961fd6d13671","date":"2016-01-17T22:37:36.000Z","author":{"name":"Kylie McClain","email":"somasis@exherbo.org"},"message":"netinet/tcp: Add TCPOPT, TCPOLEN constants\n\nPrograms such as iptables depend on these constants, which can also\nbe found defined in other libcs.\n\nSince only TCP_* is reserved as part of tcp.h's namespace, we hide\nthem behind _BSD_SOURCE (and therefore _DEFAULT_SOURCE) to expose\nthem by default, but keep it standard conforming.\n"},{"hash":"9f5eb77992b42d484d69e879d24ef86466f20f21","date":"2016-01-19T23:19:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for arch-provided replacement files as .c or .S\n\npreviously, replacement files provided in $(ARCH) dirs under src/ had\nto be .s files. in order to replace a file with C source, an empty .s\nfile was needed there to suppress the original file, and a separate .c\nfile was needed in arch/$(ARCH)/src/.\n\nsupport for .S is new and is aimed at short-term use eliminating .sub\nfiles. asm source files are still expected not to make any heavy\npreprocessor use, just simple conditionals on subarch. eventually most\naffected files may be replaced with C source files with minimal inline\nasm instead of asm source files.\n"},{"hash":"9514e70c60649ea13c25e1ac1e944cee7c82c9a7","date":"2016-01-20T00:08:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"eliminate separate static/shared CFLAGS vars in makefile\n\nthis allows the rules for .o and .lo files to be identical, with -fPIC\nand -DSHARED added for .lo files via target-specific variable append.\nthis is arguably cleaner now and will allow more cleanup and removal\nof redundant rule bodies after other prerequisite changes are made.\n"},{"hash":"cb1875eb4ff755fe6c5d1909f64fc4be1ee396ab","date":"2016-01-20T00:35:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adapt build of arm memcpy asm not to use .sub files\n\nthis depends on commit 9f5eb77992b42d484d69e879d24ef86466f20f21, which\nmade it possible to use a .c file for arch-specific replacements, and on\ncommit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d, the out-of-tree build\nsupport, which made it so that src/*/$(ARCH)/* 'replacement' files get\nused even if they don't match the base name of a .c file in the parent\ndirectory.\n"},{"hash":"e4355bd6bec89688e8c739cd7b4c76e675643dca","date":"2016-01-20T01:09:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"replace armhf math asm source files with inline asm\n\nthis makes it possible to inline them with LTO, and is the simplest\napproach to eliminating the use of .sub files.\n\nthis also makes VFP sqrt available for use with the standard EABI\n(plain arm rather than armhf subarch) when libc is built with\n-mfloat-abi=softfp. the same could have been done for fabs, but when\nthe argument and return value are in integer registers, moving to VFP\nregisters and back is almost certainly more costly than a simple\ninteger operation.\n"},{"hash":"56764601af17aa6fb8b70b714c6bd8bb1d9f4229","date":"2016-01-20T01:16:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dynamic linker path file selection for arm vs armhf\n\nthe __SOFTFP__ macro which was wrongly being used does not reflect the\nABI (arm vs armhf) but just the availability of floating point\ninstructions/registers, so -mfloat-abi=softfp was wrongly being\ntreated as armhf. __ARM_PCS_VFP is the correct predefined macro to\ncheck for the armhf EABI variant. this macro usage was corrected for\nthe build process in commit 4918c2bb206bfaaf5a1f7d3448c2f63d5e2b7d56\nbut reloc.h was apparently overlooked at the time.\n"},{"hash":"4b9a08f29303661e9680fc1ee1569daa25df7d50","date":"2016-01-20T01:45:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"switch sh and mips setjmp asm from .sub system to .S files\n"},{"hash":"af21a82ccc8687aa16e85def7db95efeae4cf72e","date":"2016-01-20T02:07:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"switch arm, sh, and mips fenv asm from .sub system to .S files\n"},{"hash":"b6363bb70aad402be7c548a7ec053b124db076d9","date":"2016-01-20T02:31:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression for arm pre-v7 from out-of-tree build patch\n\ncommit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d failed to replicate\nthe old makefile logic that caused arch/arm/src/arm/atomics.s to be\nbuilt. since this was the only .s file under arch/*/src, rather than\ntrying to reproduce the old logic, I'm just moving it up a level and\nadjusting the glob pattern in the makefile to catch it. eventually\narch/*/src will probably be removed in favor of moving all these files\nto appropriate src/*/$(ARCH) locations.\n"},{"hash":"0f814a4e57e80d2512934820b878211e9d71c93e","date":"2016-01-20T02:49:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove support for subarch .sub files from the makefile\n\nas of commit af21a82ccc8687aa16e85def7db95efeae4cf72e, .sub files are\nno longer in use. removing the makefile machinery to handle them not\nonly cleans up and simplifies the makefile, but also significantly\nreduces make's startup time.\n"},{"hash":"80de11bc6b08ae537a014ecf5a9e7386c89b17bd","date":"2016-01-20T02:52:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove outdated/incorrect comment about AS_CMD from makefile\n"},{"hash":"ada4798df0863226ec057a0e07285fe6820b73bd","date":"2016-01-20T02:58:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"deduplicate compiler invocation command line in makefile\n\nalso clean up duplication of CFLAGS passing to assembler.\n"},{"hash":"4fcc7eb51c79090ef14a22bf3ab9631d9b3c5bf5","date":"2016-01-20T04:01:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify \"make clean\" and remove unneeded lib dir from tree\n\nthe lib dir is automatically created if needed by the out-of-tree\nbuild logic, and now that all generated files are in obj and lib,\ndeleting them is much simpler. using \"rm -rf\" is also more thorough,\nas it picks up object files that were left around from source files\nthat no longer exist or which are no longer to be used because an\narch-specific replacement file was added or removed.\n"},{"hash":"d1b29c2a54588401494c1a3ac7103c1e91c61fa1","date":"2016-01-20T19:42:21.000Z","author":{"name":"Khem Raj","email":"raj.khem@gmail.com"},"message":"exclude vis.h when compiling assembly files\n\notherwise C declarations are included into preprocessed (.S) asm\nsource files, producing errors from the assembler.\n"},{"hash":"ce3e24eaae91e7a90f87eb7f1edea8df5942de11","date":"2016-01-20T19:43:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix global visibility (vis.h) support for out-of-tree builds\n\ncommit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d failed to change the\ntest for -include vis.h support to use $srcdir, so vis.h was always\ndisabled by configure for out-of-tree builds.\n"},{"hash":"1315596b510189b5159e742110b504177bdd4932","date":"2016-01-21T19:08:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor internal atomic.h\n\nrather than having each arch provide its own atomic.h, there is a new\nshared atomic.h in src/internal which pulls arch-specific definitions\nfrom arc/$(ARCH)/atomic_arch.h. the latter can be extremely minimal,\ndefining only a_cas or new ll/sc type primitives which the shared\natomic.h will use to construct everything else.\n\nthis commit avoids making heavy changes to the individual archs'\natomic implementations. definitions which are identical or\nnear-identical to what the new shared atomic.h would produce have been\nremoved, but otherwise the changes made are just hooking up the\narch-specific files to the new infrastructure. major changes to take\nadvantage of the new system will come in subsequent commits.\n"},{"hash":"61b1e75f7d8004461f2e18f171c26c2f545eed32","date":"2016-01-21T19:43:04.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul sh atomics for new atomics framework, add j-core cas.l backend\n\nsh needs runtime-selected atomic backends since there are a number of\nsupported models that use non-forwards-compatible (non-smp-compatible)\natomic mechanisms. previously, the code paths for this were highly\ninefficient since they involved C function calls with multiple\nbranches in the callee and heavy spills in the caller. the new code\nperforms calls the runtime-selected asm fragment from inline asm with\nextremely minimal clobbers, rather than using a function call.\n\nfor the sh4a case where the atomic mechanism is known and there is no\nforward-compatibility issue, the movli.l and movco.l instructions are\nprovided as a_ll and a_sc, allowing the new shared atomic.h to\ngenerate efficient inline versions of all the basic atomic operations\nwithout needing a cas loop.\n"},{"hash":"aa0db4b5d08ff6ac180a93678d8fd1799569a530","date":"2016-01-21T19:50:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul aarch64 atomics for new atomics framework\n"},{"hash":"397f0a6a7d798b0e3f636fe053cad9c483e011fb","date":"2016-01-21T23:30:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul arm atomics for new atomics framework\n\nswitch to ll/sc model so that new atomic.h can provide optimized\nversions of all the atomic primitives without needing an ll/sc loop\nwritten in asm for each one.\n\nall isa levels which use ldrex/strex now use the inline ll/sc model\neven if the type of barrier to use is not known until runtime (v6).\nthe cas model is only used for arm v5 and earlier, and it has been\noptimized to make the call via inline asm with custom constraints\nrather than as a C function call.\n"},{"hash":"e617b9eea9d45b170eabadf5ca96ca0536c538be","date":"2016-01-22T00:02:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move arm-specific translation units out of arch/arm/src, to src/*/arm\n\nthis is possible with the new build system that allows src/*/$(ARCH)/*\nfiles which do not shadow a file in the parent directory, and yields a\nmore logical organization. eventually it will be possible to remove\narch/*/src from the build system.\n"},{"hash":"369b22f9c4aebba2b8fe905db8469b2667572ee1","date":"2016-01-22T00:10:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul mips atomics for new atomics framework\n"},{"hash":"e24984efd5c6ac5ea8e6cb6cd914fa8435d458bc","date":"2016-01-22T00:16:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up i386 atomics for new atomics framework\n\nthis commit mostly makes consistent things like spacing, function\nordering in atomic_arch.h, argument names, use of volatile, etc. the\nfake 64-bit and/or atomics are also removed because the shared\natomic.h does a better job of implementing them; it avoids making two\natomic memory accesses when only one 32-bit half needs to be touched.\n\nno major overhaul is needed or possible because x86 actually has\nnative versions of all the usual atomic operations, rather than using\nll/sc or needing cas loops.\n"},{"hash":"16b55298dc4b6a54d287d7494e04542667ef8861","date":"2016-01-22T00:53:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"clean up x86_64 (and x32) atomics for new atomics framework\n\nthis commit mostly makes consistent things like spacing, function\nordering in atomic_arch.h, argument names, use of volatile, etc.\na_ctz_l was also removed from x86_64 since atomic.h provides it\nautomatically using a_ctz_64.\n"},{"hash":"513c043694f500a01bd8d899ff73441aa7457a1f","date":"2016-01-22T02:58:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"overhaul powerpc atomics for new atomics framework\n\npreviously powerpc had a_cas defined in terms of its native ll/sc\nstyle operations, but all other atomics were defined in terms of\na_cas. instead define a_ll and a_sc so the compiler can generate\noptimized versions of all the atomic ops and perform better inlining\nof a_cas.\n\nextracting the result of the sc (stwcx.) instruction is rather awkward\nbecause it's natively stored in a condition flag, which is not\nrepresentable in inline asm. but even with this limitation the new\ncode still seems significantly better.\n"},{"hash":"66215afc2e09f0153a63d58d3baec25cf0122b7b","date":"2016-01-22T03:39:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move x32 sysinfo impl and syscall fixup code out of arch/x32/src\n\nall such arch-specific translation units are being moved to\nappropriate arch dirs under the main src tree.\n"},{"hash":"230bfe1a7d46c85601e5e67497cc607e15d08990","date":"2016-01-22T03:46:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move sh __unmapself code from arch/sh/src to main src tree\n"},{"hash":"007907a93c4d26b579da25c81b43d74115a29016","date":"2016-01-22T03:50:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move sh port's __shcall internal function from arch/sh/src to src tree\n"},{"hash":"4de1bc1164ef40655caa148eeb50365112210561","date":"2016-01-22T03:50:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove sh port's __fpscr_values source file\n\ncommit f3ddd173806fd5c60b3f034528ca24542aecc5b9, the dynamic linker\nbootstrap overhaul, silently disabled the definition of __fpscr_values\nin this file since libc.so's copy of __fpscr_values now comes from\ncrt_arch.h, the same place the public definition in the main program's\ncrt1.o ultimately comes from. remove this file which is no longer in\nuse.\n"},{"hash":"5a2e88257a1082aa2780729451833f5dc98ea4ca","date":"2016-01-22T03:58:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove arch/$(ARCH)/src from the build system\n\nthe files that used to come from extra src dirs under the arch dir\nhave all been removed or moved to appropriate places under the main\nsrc tree.\n"},{"hash":"0f5eb3de2955e2eaf5ee4b9637d9216f82a97fbd","date":"2016-01-22T04:04:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add arch/abi info to dynamic linker's id/version output\n"},{"hash":"b17fbd3520640745051d2fd9f1fd334ceb8b8783","date":"2016-01-23T19:03:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve aarch64 atomics\n\naarch64 provides ll/sc variants with acquire/release memory order,\nfreeing us from the need to have full barriers both before and after\nthe ll/sc operation. previously they were not used because the a_cas\ncan fail without performing a_sc, in which case half of the barrier\nwould be omitted. instead, define a custom version of a_cas for\naarch64 which uses a_barrier explicitly when aborting the cas\noperation. aside from cas, other operations built on top of ll/sc are\nnot affected since they never abort but rather loop until they\nsucceed.\n\na split ll/sc version of the pointer-sized a_cas_p is also introduced\nusing the same technique.\n\npatch by Szabolcs Nagy.\n"},{"hash":"2d14fa39b0e3c957ad4f7def033e40ea431ffcfb","date":"2016-01-25T00:07:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix aarch64 atomics to load/store 32bit only\n\na_ll/a_sc inline asm used 64bit register operands (%0) instead of 32bit\nones (%w0), this at least broke a_and_64 (which always cleared the top\n32bit, leaking memory in malloc).\n"},{"hash":"2f6f3dccb447ef68057e6a29cf6290367b00391e","date":"2016-01-25T00:08:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix powerpc MCL_* mlockall flags in bits/mman.h\n\nthe definitions didn't match the linux uapi headers.\n"},{"hash":"f9c3a2e048ef1ef43bd592588d7e11c7b2f4651f","date":"2016-01-25T00:08:40.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing powerpc specific PROT_SAO memory protection flag\n\nthis flag for strong access ordering was added in linux v2.6.27\ncommit aba46c5027cb59d98052231b36efcbbde9c77a1d\n"},{"hash":"bc443c3fe3bf6aceaa6278c4516f4654bdcd97b4","date":"2016-01-25T00:08:57.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"clean powerpc syscall.h\n\nremove ifdefs for powerpc64.\n"},{"hash":"ea4fc27d28d878e50b3ca609681bbececd1f9622","date":"2016-01-25T00:18:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add MSG_FASTOPEN sendmsg/sendto flag to socket.h\n\nThis was new in linux 3.5 in commit cf60af03ca4e71134206809ea892e49b92a88896,\nneeded for tcp fastopen feature (sending data in TCP SYN packet).\n"},{"hash":"9f52c17eb20dafc8f7e93b3cd276a09a919b1384","date":"2016-01-25T00:18:21.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add AF_MPLS (PF_MPLS) address family to socket.h\n\nnew in linux 4.0 commit 0189197f441602acdca3f97750d392a895b778fd.\n"},{"hash":"ecf02f4e8a2766d47cb7d637e7f8cb255ba7065b","date":"2016-01-25T00:18:41.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add MS_LAZYTIME mount option to sys/mount.h\n\nnew in linux 4.0 commit 0ae45f63d4ef8d8eeec49c7d8b44a1775fff13e8,\nused to update atime/mtime/ctime only in memory when possible.\n"},{"hash":"4da2d96591cfe0e088c366bf2bdf4ef0e47a3220","date":"2016-01-25T00:18:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update netinet/tcp.h for linux v4.2\n\nTCP_CC_INFO is a new socket option to get congestion control info without\nnetlink (union tcp_cc_info is in linux/inet_diag.h kernel header).\nlinux commit 6e9250f59ef9efb932c84850cd221f22c2a03c4a\n\nTCP_SAVE_SYN, TCP_SAVED_SYN socket options are for saving and getting the\nSYN headers of passive connections in a server application.\nlinux commit cd8ae85299d54155702a56811b2e035e63064d3d\n\nAdd new tcpi_* fields to struct tcp_info implementing RFC4898 counters.\nlinux commit 2efd055c53c06b7e89c167c98069bab9afce7e59\n"},{"hash":"2c9acc51cdf40871625405a7e4a766cccb77ab6f","date":"2016-01-25T00:19:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new IP_BIND_ADDRESS_NO_PORT and IPPROTO_MPLS to netinet/in.h\n\nIP_BIND_ADDRESS_NO_PORT is a SOL_IP socket option to delay src port\nallocation until connect in case src ip is set with bind(port=0).\nnew in linux v4.2, commit 90c337da1524863838658078ec34241f45d8394d\n\nIPPROTO_MPLS protocol number for mpls over ip.\nnew in linux v4.2, commit 730fc4371333636a00fed32c587fc1e85c5367e2\n"},{"hash":"89e149d275a7699a4a5e4c98bab267648f64cbba","date":"2016-01-25T02:44:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add native a_crash primitive for arm\n\nthe .byte directive encodes a guaranteed-undefined instruction, the\nsame one Linux fills the kuser helper page with when it's disabled.\nthe udf mnemonic and and .insn directives are not supported by old\nbinutils versions, and larger-than-byte integer directives would\nproduce the wrong output on big-endian.\n"},{"hash":"e7a1118984d071fdd65c486c52271ad4f1561fb8","date":"2016-01-25T21:59:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix arm a_crash for big endian\n\ncontrary to commit 89e149d275a7699a4a5e4c98bab267648f64cbba, big\nendian arm does need the instruction bytes in big endian order. rather\nthan trying to use a special encoding that works as arm or thumb,\nsimply encode the simplest/canonical undefined instructions dependent\non whether __thumb__ is defined.\n"},{"hash":"a4fbc82c8e2a311baa0c6b5a4a4cdbb6c8f66edb","date":"2016-01-25T23:44:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"factor dlerror and error-setting code out of dynlink.c\n\nthe ultimate goal of this change is to get all code used in libc.a out\nof dynlink.c, so that the dynamic linker code can be moved to its own\ntree and object files in the src tree can all be shared between libc.a\nand libc.so.\n"},{"hash":"4f8f038060739eca4c5cb97bb067529be96658d2","date":"2016-01-25T23:44:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move static/stub version of dladdr out of dynlink.c\n"},{"hash":"891e6547b4fdec10fe4ffa3b1ef5ddb524bcde39","date":"2016-01-25T23:51:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move static-linked stub invalid dso handle checking out of dynlink.c\n"},{"hash":"da1fe7f5008e7068f17147ee7c47e4c71a61d057","date":"2016-01-25T23:53:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move dlclose out of dynlink.c to its own source file\n"},{"hash":"b98414732d230c236b9a79c709c2b035ca67be12","date":"2016-01-25T23:55:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move dlinfo out of dynlink.c\n"},{"hash":"14469371cd1efd2be44f0825fec9ad8bb3216da9","date":"2016-01-25T23:58:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move static-linked stub dlopen out of dynlink.c\n"},{"hash":"4058795d4938ea72a27fb3231ce52c69c7e39637","date":"2016-01-26T00:04:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move static-linked stub dlsym out of dynlink.c\n\nthe function name is still __-prefixed because it requires an asm\nwrapper to pass the caller's address in order for RTLD_NEXT to work.\n\nsince this was the last function in dynlink.c still used for static\nlinking, now the whole file is conditional on SHARED being defined.\n"},{"hash":"16f70388d4a876c216cbf1d829782ace41a07634","date":"2016-01-26T00:12:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adapt static dl_iterate_phdr not to depend on !defined(SHARED)\n\nlike elsewhere, use a weak alias that the dynamic linker will override\nwith a more complete version capable of handling shared libraries.\n"},{"hash":"5552ce52000855906a5cb4f08f2e456573cca51f","date":"2016-01-26T00:29:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move dynamic linker to its own top-level directory, ldso\n\nthis eliminates the last need for the SHARED macro to control how\nfiles in the src tree are compiled. the same code is used for both\nlibc.a and libc.so, with additional code for the dynamic linker (from\nthe new ldso tree) being added to libc.so but not libc.a. separate .o\nand .lo object files still exist for the src tree, but the only\ndifference is that the .lo files are built as PIC.\n\nin the future, if/when we add dlopen support for static-linked\nprograms, much of the code in dynlink.c may be moved back into the src\ntree, but properly factored into separate source files. in that case,\nthe code in the ldso tree will be reduced to just the dynamic linker\nentry point, self-relocation, and loading of libraries needed by the\nmain application.\n"},{"hash":"1619127c11a5ab5d499d4b8a9b76af74f3132400","date":"2016-01-26T00:57:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use same object files for libc.a and libc.so if compiler produces PIC\n\nnow that .lo and .o files differ only by whether -fPIC is passed (and\nno longer at the source level based on the SHARED macro), it's\npossible to use the same object files for both static and shared libc\nwhen the compiler would produce PIC for the static files anyway. this\nhappens if the user has included -fPIC in their CFLAGS or if the\ncompiler has been configured to produce PIE by default.\n\nwe use the .lo files for both, and still append -fPIC to the CFLAGS,\nrather than using the .o files so that libc.so does not break\ncatastrophically if the user later removes -fPIC from CFLAGS in\nconfig.mak or on the make command line. this also ensures that we get\nfull -fPIC in case -fpic, -fPIE, or some other lesser-PIC option was\npassed in CFLAGS.\n"},{"hash":"f9b8df464da02005a1f3296ad5c16582065befbf","date":"2016-01-26T01:06:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ssp suppression to some arch-override files that may need it\n\nthese were not covered by the parent-level rules with the new build\nsystem. in the old build system, the equivalent files were often in\narch/$(ARCH)/src and likewise lacked the suppression. this could lead\nto early crashing (before thread pointer init) when libc itself was\nbuilt with stack protector enabled.\n"},{"hash":"a5e133bf29d42101ba90012b3b03b670bbb949b2","date":"2016-01-26T23:27:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"change the internal socketcall selection logic\n\nonly use SYS_socketcall if SYSCALL_USE_SOCKETCALL is defined\ninternally, otherwise use direct syscalls.\n\nthis commit does not change the current behaviour, it is\npreparation for adding direct syscall numbers for i386.\n"},{"hash":"37bfb68f688772e7ce339ab72b9ddcf86ac1e8a8","date":"2016-01-26T23:28:04.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new i386 socket syscall numbers\n\nnew in linux v4.3 commit 9dea5dc921b5f4045a18c63eb92e84dc274d17eb\ndirect calls instead of socketcall allow better seccomp filtering.\n\nmusl continues to use socketcalls internally on i386. (older kernels\nwould need a fallback mechanism if the direct calls were used.)\n"},{"hash":"09001a8f97ac779573976b5838e3d293f1713c5c","date":"2016-01-26T23:28:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new membarrier, userfaultfd and switch_endian syscalls\n\nnew in linux v4.3 added for aarch64, arm, i386, mips, or1k, powerpc,\nx32 and x86_64.\n\nmembarrier is a system wide memory barrier, moves most of the\nsynchronization cost to one side, new in kernel commit\n5b25b13ab08f616efd566347d809b4ece54570d1\n\nuserfaultfd is useful for qemu and is new in kernel commit\n8d2afd96c20316d112e04d935d9e09150e988397\n\nswitch_endian is powerpc only for switching endianness, new in commit\n529d235a0e190ded1d21ccc80a73e625ebcad09b\n"},{"hash":"3934f49c01d35565a9b74b3f9b29a913efa7c973","date":"2016-01-26T23:29:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update netpacket/packet.h to linux v4.3\n"},{"hash":"8afd2a1d03de74f9e801bfbd2f15c6aab0fa1278","date":"2016-01-26T23:30:14.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new PR_CAP_AMBIENT and related defines to sys/prctl.h\n\nambient capability mask is new in linux v4.3, commit\n58319057b7847667f0c9585b9de0e8932b0fdb08\n"},{"hash":"aaa604052dce98cfb4cc39f561bbb739c69bd802","date":"2016-01-26T23:30:30.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new PTRACE_O_SUSPEND_SECCOMP ptrace option\n\nallows a ptracer process to disable/enable seccomp filters of the\ntraced process, useful for checkpoint/restore, new in v4.3 commit\n13c4a90119d28cfcb6b5bdd820c233b86c2b0237\n"},{"hash":"51d5f139ca9e79d621a396542dde5b8cd76c5c3f","date":"2016-01-26T23:30:50.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add mlock2 syscall number from linux v4.4\n\nthis is mlock with a flags argument, new in linux commit\na8ca5d0ecbdde5cc3d7accacbd69968b0c98764e\n\nas usual microblaze and sh don't have allocated syscall number yet.\n"},{"hash":"789ff6a9f8ec91729cde7fdcb0568d5d928eeba5","date":"2016-01-26T23:31:05.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add MCL_ONFAULT and MLOCK_ONFAULT mlockall and mlock2 flags\n\nthey lock faulted pages into memory (useful when a small part of a\nlarge mapped file needs efficient access), new in linux v4.4, commit\nb0f205c2a3082dd9081f9a94e50658c5fa906ff1\n\nMLOCK_* is not in the POSIX reserved namespace for sys/mman.h\n"},{"hash":"c243d6f09570010a448789dd296b14b7a61cb2ea","date":"2016-01-26T23:31:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new PTRACE_SECCOMP_GET_FILTER ptrace command\n\nallows the tracer to dump the bpf seccomp filters of the tracee,\nnew in linux v4.4, commit f8e529ed941ba2bbcbf310b575d968159ce7e895\n"},{"hash":"22f84829afa06bba9d220bd0f7b1bce912987297","date":"2016-01-27T03:26:47.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"move bits/signal.h include close to the top of signal.h\n\nonly have code above the bits/signal.h include that is necessary.\n(some types are used for the ucontext struct and mips has to\noverride a few macro definitions)\n\nthis way mips bits/signal.h will be able to affect siginfo_t.\n"},{"hash":"9a3b8f97a160ce292dcf0ef2a9358fa0e11e9ee3","date":"2016-01-27T03:31:21.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix siginfo_t for mips\n\nsi_errno and si_code are swapped in mips siginfo_t compared to other\narchs and some si_code values are different.  This fix is required\nfor POSIX timers to work.\n\nbased on patch by Dmitry Ivanov.\n"},{"hash":"a5ba2d7507eb6b4388c47f7893e025185496ff90","date":"2016-01-27T17:23:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve clock_gettime and adapt it to support slightly-broken vdso\n\nthese changes are motivated by a functionally similar patch by Hauke\nMehrtens to address the needs of the new mips vdso clock_gettime,\nwhich wrongly fails with ENOSYS rather than falling back to making a\nsyscall for clock ids it cannot handle from userspace. in the process\nof preparing to handle that case, it was noticed that the old\nclock_gettime use of the vdso was actually wrong with respect to error\nhandling -- the tail call to the vdso function failed to set errno and\ninstead returned an error code.\n\nsince tail calls to vdso are no longer possible and since the plain\nsyscall code is now needed as a fallback path anyway, it does not make\nsense to use a function pointer to call the plain syscall code path.\ninstead, it's inlined at the end of the main clock_gettime function.\n\nthe new code also avoids the need to test for initialization of the\nvdso function pointer by statically initializing it to a self-init\nfunction, and eliminates redundant loads from the volatile pointer\nobject.\n\nfinally, the use of a_cas_p on an object of type other than void *,\nwhich is not permitted aliasing, is replaced by using an object with\nthe correct type and casting the value.\n"},{"hash":"b0bf52f3e9fd246762958821fdc2851add05d423","date":"2016-01-27T17:40:24.000Z","author":{"name":"Hauke Mehrtens","email":"hauke@hauke-m.de"},"message":"mips: add vdso support\n\nvdso support is available on mips starting with kernel 4.4, see kernel\ncommit a7f4df4e21 \"MIPS: VDSO: Add implementations of gettimeofday()\nand clock_gettime()\" for details.\n\nIn Linux kernel 4.4.0 the mips code returns -ENOSYS in case it can not\nhandle the vdso call and assumes the libc will call the original\nsyscall in this case. Handle this case in musl. Currently Linux kernel\n4.4.0 handles the following types: CLOCK_REALTIME_COARSE,\nCLOCK_MONOTONIC_COARSE, CLOCK_REALTIME and CLOCK_MONOTONIC.\n"},{"hash":"e1d99894b6ce23055a2e29f72763e7fd9585a87f","date":"2016-01-28T00:01:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unneeded -I options from configure test for may_alias attribute\n\nthis test does not include anything, so the -I options are not useful\nand are just a maintenance burden if paths change.\n"},{"hash":"efdf04cf877574b4e3905802e0039f844077f58f","date":"2016-01-28T00:31:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add arch/generic include fallback to build rules\n\nthis sets the stage for the first phase of the bits deduplication.\nbits headers which are identical for \"most\" archs will be moved to\narch/generic/bits.\n"},{"hash":"4dfac11538cb20c848c30d754863800061ee8c81","date":"2016-01-28T02:52:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"deduplicate the bulk of the arch bits headers\n\nall bits headers that were identical for a number of 'clean' archs are\nmoved to the new arch/generic tree. in addition, a few headers that\ndiffered only cosmetically from the new generic version are removed.\n\nadditional deduplication may be possible in mman.h and in several\nheaders (limits.h, posix.h, stdint.h) that mostly depend on whether\nthe arch is 32- or 64-bit, but they are left alone for now because\ngreater gains are likely possible with more invasive changes to header\nlogic, which is beyond the scope of this commit.\n"},{"hash":"378f8cb5222b63e4f8532c757ce54e4074567e1f","date":"2016-01-28T05:19:14.000Z","author":{"name":"Kylie McClain","email":"somasis@exherbo.org"},"message":"legacy/utmpx: Add utmp{,x}name stubs\n"},{"hash":"19df86cbb39f2429f7c7e20c99c606c38a5fd4e9","date":"2016-01-28T05:38:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add errno setting to stub utmpxname function\n"},{"hash":"d6cb08bcaca4ff1f921375510ca72bccea969c75","date":"2016-01-28T23:39:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"factor resolv.conf parsing out of res_msend to its own file\n\nthis change is made in preparation for adding search domains, for\nwhich higher-level code will need to parse resolv.conf. simply parsing\nit twice for each lookup would be one reasonable option, but the\nexisting parser code was buggy anyway, which suggested to me that it's\na bad idea to have two variants of this code in two different places.\n\nthe old code in res_msend potentially misinterpreted overly long lines\nin resolv.conf, and stopped parsing after it found 3 nameservers, even\nif there were relevant options left to be parsed later in the file.\n"},{"hash":"fe8453d2ee128cfcf8777a19659f1c1f19e052ac","date":"2016-01-29T00:20:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix logic for matching search/domain keywords in resolv.conf\n"},{"hash":"0fef7ffac114befc94ab5fa794a1754442dcd531","date":"2016-01-29T00:37:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix handling of dns response codes\n\nrcode of 3 (NxDomain) was treated as a hard EAI_NONAME failure, but it\nshould instead return 0 (no results) so the caller can continue\nsearching. this will be important for adding search domain support.\nthe top-level caller will automatically return EAI_NONAME if there are\nzero results at the end.\n\nalso, the case where rcode is 0 (success) but there are no results was\nnot handled. this happens when the domain exists but there are no A or\nAAAA records for it. in this case a hard EAI_NONAME should be imposed\nto inhibit further search, since the name was defined and just does\nnot have any address associated with it. previously a misleading hard\nfailure of EAI_FAIL was reported.\n"},{"hash":"3d6e2e477ced37fd328870f018950b283cb7293c","date":"2016-01-29T01:29:55.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for search domains to dns resolver\n\nsearch is only performed if the search or domain keyword is used in\nresolv.conf and the queried name has fewer than ndots dots. there is\nno default domain and names with >=ndots dots are never subjected to\nsearch; failure in the root scope is final.\n\nthe (non-POSIX) res_search API presently does not honor search. this\nmay be added at some point in the future if needed.\n\nresolv.conf is now parsed twice, at two different layers of the code\ninvolved. this will be fixed in a subsequent patch.\n"},{"hash":"dcad020c9cb450c61ece604d11941ef6e7945330","date":"2016-01-29T01:50:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix uninitialized variable in new resolv.conf parser\n"},{"hash":"1563587b45a39512df9b5810dcc5961d4d21a910","date":"2016-01-29T01:51:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reuse parsed resolv.conf in dns core to avoid re-reading/re-parsing\n"},{"hash":"140ad50cbf9244eecc21a0126c743396a34e8106","date":"2016-01-30T19:34:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in dynamic-linked tls when both main app & libs have tls\n\ncommit d56460c939c94a6c547abe8238f442b8de10bfbd introduced this bug by\nsetting up the tls module chain incorrectly when the main app has tls.\nthe singly-linked list head pointer was setup correctly, but the tail\npointer was not, so the first attempt to append to the list (for a\nshared library with tls) would treat the list as empty and effectively\nremoved the main app from the list. this left all tls module id\nnumbers off-by-one.\n\nthis bug did not appear in any released versions.\n"},{"hash":"9ee57db8834ee0d9adb1e6a84a75b0818dbfca69","date":"2016-01-31T00:42:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misaligned pointer-like objects in arm atomics asm source file\n\nthis file's .data section was not aligned, and just happened to get\nthe correct alignment with past builds. it's likely that the move of\natomic.s from arch/arm/src to src/thread/arm caused the change in\nalignment, which broke the atomic and thread-pointer access fragments\non actual armv5 hardware.\n"},{"hash":"a8cc2253843e30dfbdf0bb2954439d9f2b2e8704","date":"2016-01-31T01:51:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: clean up position accounting for literal nodes\n\nThis should not change the meaning of the code, just make the intent\nclearer: advancing position is tied to adding a new literal.\n"},{"hash":"7eaa76fc2e7993582989d3838b1ac32dd8abac09","date":"2016-01-31T01:53:04.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: reject repetitions in some cases with REG_BADRPT\n\nPreviously repetitions were accepted after empty expressions like\nin (*|?)|{2}, but in BRE the handling of * and \\{\\} were not\nconsistent: they were accepted as literals in some cases and\nrepetitions in others.\n\nIt is better to treat repetitions after an empty expression as an\nerror (this is allowed by the standard, and glibc mostly does the\nsame). This is hard to do consistently with the current logic so\nthe new rule is:\n\nReject repetitions after empty expressions, except after assertions\n^*, $? and empty groups ()+ and never treat them as literals.\n\nEmpty alternation (|a) is undefined by the standard, but it can be\nuseful so that should be accepted.\n"},{"hash":"da4cc13b9705e7d3a02216959b9711b3b30828c1","date":"2016-01-31T01:53:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: treat \\| in BRE as alternation\n\nThe standard does not define semantics for \\| in BRE, but some code\ndepends on it meaning alternation. Empty alternative expression is\nallowed to be consistent with ERE.\n\nBased on a patch by Rob Landley.\n"},{"hash":"03498ec22a4804ddbd8203d9ac94b6f7b6574b3c","date":"2016-01-31T01:53:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: rewrite the repetition parsing code\n\nThe goto logic was hard to follow and modify. This is\nin preparation for the BRE \\+ and \\? support.\n"},{"hash":"25160f1c08235cf5b6a9617c5640380618a0f6ff","date":"2016-01-31T01:53:42.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: treat \\+, \\? as repetitions in BRE\n\nThese are undefined escape sequences by the standard, but often\nused in sed scripts.\n"},{"hash":"831e9d9efa61566a25c1dcdbd28f55daeea4dd32","date":"2016-01-31T01:53:52.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: simplify the {,} repetition parsing logic\n"},{"hash":"c18d05f0e8909ec54252b251c441b5dd903268f8","date":"2016-01-31T01:55:22.000Z","author":{"name":"Felix Fietkau","email":"nbd@openwrt.org"},"message":"ldso: fix GDB dynamic linker info on MIPS\n\nGDB is looking for a pointer to the ldso debug info in the data of the\n..rld_map section.\n\nSigned-off-by: Felix Fietkau <nbd@openwrt.org>\n"},{"hash":"65498f289bded83afb809b24d850647e7c91cd58","date":"2016-01-31T05:40:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't suppress shared libc when linker lacks -Bsymbolic-functions\n\nprevious work overhauling the dynamic linker made it so that linking\nlibc with -Bsymbolic-functions was no longer mandatory, but the\nconfigure logic that forced --disable-shared when ld failed to accept\nthe option was left in place.\n\nthis commit removes the hard-coded -Bsymbolic-functions from the\nMakefile and changes the configure test to one that simply adds it to\nthe auto-detected LDFLAGS on success.\n"},{"hash":"3b27725385614d44add9351191765181edc3f4c1","date":"2016-01-31T22:32:56.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"better a_sc inline asm constraint on aarch64 and arm\n\n\"Q\" input constraint was used for the written object, instead of \"=Q\"\noutput constraint.  this should not cause problems because \"memory\"\nis on the clobber list, but \"=Q\" better documents the intent and more\nconsistent with the actual asm code.\n\nthis changes the generated code, because different registers are used,\nbut other than the register names nothing should change.\n"},{"hash":"2810b30fc3c515e38d6acabe87de7b48bb8bfc7b","date":"2016-01-31T22:33:54.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"regex: increase the stack tre uses for tnfa creation\n\n10k elements stack is increased to 1000k, otherwise tnfa creation fails\nfor reasonable sized patterns: a single literal char can add 7 elements\nto this stack, so regcomp of an 1500 char long pattern (with only litral\nchars) fails with REG_ESPACE. (the new limit allows about < 150k chars,\nthis arbitrary limit allows most command line regex usage.)\n\nideally there would be no upper bound: regcomp dynamically reallocates\nthis buffer, every reallocation checks for allocation failure and at\nthe end this stack is freed so there is no reason for special bound.\nhowever that may have unwanted effect on regcomp and regexec runtime\nso this is a conservative change.\n"},{"hash":"d1507646975cbf6c3e511ba07b193f27f032d108","date":"2016-01-31T22:34:45.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix malloc_usable_size for NULL input\n\nthe linux man page specifies malloc_usable_size(0) to return 0 and\nthis is the semantics other implementations follow (jemalloc).\nreported by Alexander Monakov.\n"},{"hash":"40891ae6dbc1c6113c4a826656a28143648df159","date":"2016-02-02T22:47:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update INSTALL file with new archs, compiler info\n\nadd aarch64 and or1k archs, upgrade sh from experimental, and note\nthat sh now supports the FDPIC ABI.\n\nthe old advice on compiler versions was outdated and more specific\nthan made sense. presence of compiler bugs varies a lot by arch, so\nit's hard to make any good recommendations beyond \"recent\". if we want\nto document specific known-good/bad compiler versions, a much larger\nsection in the documentation than what's appropriate for the INSTALL\nfile would be needed.\n"},{"hash":"47314f1e6780bd561151c3241d4bcf7b861ed3ee","date":"2016-02-03T02:14:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure accept -h as an alias for --help\n"},{"hash":"aecda35373511c5bf02c0f708bd262adb1a09287","date":"2016-02-04T22:59:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid using signals when a thread attempts to cancel itself\n\nnot only is pthread_kill expensive in this case; it also breaks\ntesting under qemu app-level emulation.\n"},{"hash":"756c8af8589265e99e454fe3adcda1d0bc5e1963","date":"2016-02-04T23:01:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in mips cancellable syscall asm, don't assume gp register is valid\n\nthe old __cp_cancel code path loaded the address of __cancel from the\nGOT using the $gp register, which happened to be set to point to the\ncorrect GOT by the calling C function, but there is no ABI requirement\nthat this happen. instead, go the roundabout way and compute the\naddress of __cancel via pc-relative and gp-relative addressing\nstarting with a fake return address generated by a bal instruction,\nwhich is the same trick crt1 uses to bootstrap.\n"},{"hash":"869a9df5b5f7da57ebd86d146e25f78450678eeb","date":"2016-02-08T21:07:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove workaround for broken mips assemblers\n\nthe workaround was for a bug that botched .gpword references to local\nlabels, applying a nonsensical random offset of -0x4000 to them.\n\nthis reverses commit 5e396fb996a80b035d0f6ecf7fed50f68aa3ebb7 and a\nremoves a similar hack that was added to syscall_cp.s in the later\ncommit 756c8af8589265e99e454fe3adcda1d0bc5e1963. it turns out one\nadditional instance of the same idiom, the GETFUNCSYM macro in\narch/mips/reloc.h, was still affected by the assembler bug and does\nnot admit an easy workaround without making assumptions about how the\nmacro is used. the previous workarounds made static linking work but\nleft the early-stage dynamic linker broken and thus had limited\nusefulness.\n\ninstead, affected users (using binutils versions older than 2.20) will\nneed to fix the bug on the binutils side; the trivial patch is commit\n453f5985b13e35161984bf1bf657bbab11515aa4 in the binutils-gdb\nrepository.\n"},{"hash":"5a6e8d098abfef67028e6c3edbac39e0bbaf8bd8","date":"2016-02-10T18:51:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failed write reporting by fwrite in line-buffered mode\n\nwhen a write error occurred while flushing output due to a newline,\nfwrite falsely reported all bytes up to and including the newline as\nsuccessfully written. in general, due to buffering such \"spurious\nsuccess\" returns are acceptable for stdio; however for line-buffered\nmode it was subtly wrong. errors were still visible via ferror() or as\na short-write return if there was more data past the newline that\nshould have been written, but since the contract for line-buffered\nmode is that everything up through the newline be written out\nimmediately, a discrepency was observable in the actual file contents.\n"},{"hash":"416d1c7a711807384cc21a18163475cf757bbcb5","date":"2016-02-11T00:10:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix line-buffered flush omission for odd usage of putc-family functions\n\nas specified, the int argument providing the character to write is\nconverted to type unsigned char. for the actual write to buffer,\nconversion happened implicitly via the assignment operator; however,\nthe logic to check whether the argument was a newline used the\noriginal int value. thus usage such as putchar('\\n'+0x100) failed to\nproduce a flush.\n"},{"hash":"500c6886c654fd45e4926990fee2c61d816be197","date":"2016-02-11T00:44:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix return value for fread/fwrite when size argument is 0\n\nwhen the size argument was zero but nmemb was nonzero, these functions\nwere returning nmemb, despite no data having been written.\nconceptually this is not wrong, but the standard requires a return\nvalue of zero in this case.\n"},{"hash":"692b16d14b913676567be82a56211adc250793c7","date":"2016-02-12T14:58:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add declarations for utmpname/utmpxname to appropriate headers\n\ncommit 378f8cb5222b63e4f8532c757ce54e4074567e1f added these functions\n(as stubs) but left them without declarations. this broke some\nautoconf based software that detected linkability of the symbols but\ndidn't check for a declaration.\n"},{"hash":"0ed932f34f11663e6b3ddfa866b1798a5938a3dc","date":"2016-02-12T15:11:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"do not define static_assert macro for pre-C11 compilers\n\nsome software simply uses static_assert if the macro is defined, and\nthis breaks if the compiler does not recognize the _Static_assert\nkeyword used to define it.\n"},{"hash":"9c102700a7b9e743da692d3cb6bfa580fcdd4379","date":"2016-02-16T04:12:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.13\n"},{"hash":"10a17dfbad2c267d885817abc9c7589fc7ff630b","date":"2016-02-16T18:26:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix assumption in fputs that fwrite returning 0 implies an error\n\ninternally, the idiom of passing nmemb=1 to fwrite and interpreting\nthe return value of fwrite (which is necessarily 0 or 1) as\nfailure/success is fairly widely used. this is not correct, however,\nwhen the size argument is unknown and may be zero, since C requires\nfwrite to return 0 in that special case. previously fwrite always\nreturned nmemb on success, but this was changed for conformance with\nISO C by commit 500c6886c654fd45e4926990fee2c61d816be197.\n"},{"hash":"ef2b5e9f13a7f216d6d64aeccc6b33c1262faece","date":"2016-02-16T18:27:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix unlikely corner cases in getopt's message printing\n\nlike fputs (see commit 10a17dfbad2c267d885817abc9c7589fc7ff630b), the\nmessage printing code for getopt assumed that fwrite only returns 0 on\nfailure, but it can also happen on success if the total length to be\nwritten is zero. programs with zero-length argv[0] were affected.\n\ncommit 500c6886c654fd45e4926990fee2c61d816be197 introduced this\nproblem in getopt by fixing the fwrite behavior to conform to the\nrequirements of ISO C. previously the wrong expectations of the getopt\ncode were met by the fwrite implementation.\n"},{"hash":"cf115059ba0ecd611008c89c78c37b62f8e6d6af","date":"2016-02-16T22:38:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in crypt-sha*, reject excessive rounds as error rather than clamping\n\nthe reference implementation clamps rounds to [1000,999999999]. we\nfurther limited rounds to at most 9999999 as a defense against extreme\nrun times, but wrongly clamped instead of treating out-of-bounds\nvalues as an error, thereby producing implementation-specific hash\nresults. fixing this should not break anything since values of rounds\nthis high are not useful anyway.\n"},{"hash":"80fbaac4cd1930e9545a5d36bf46ae49011d2ce8","date":"2016-02-17T18:53:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure attempt to catch broken floating point CFLAGS/defaults\n"},{"hash":"63bcda4d8f4074e9d92ae156afd0dced6e64eb65","date":"2016-02-17T18:56:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust makefile to make crt/ and ldso/ sources arch-replaceable\n\nprior to commit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d which\noverhauled the makefile for out-of-tree builds, crt/*.c files were\nreplaceable by crt/$(ARCH)/*.s, and top-level ldso/ did not exist (its\nfiles were under src/ldso). since then, crti.o and crtn.o have been\nhard-coded as arch-specific, but none of the other files in crt/ or\nldso/ were replaceable at all.\n\nin preparation for easy integration with midipix, which has a port of\nmusl to windows, it needs to be possible to override the ELF-specific\ncode in these files. making the same arch-replacements system work\nthroughout the whole source tree also improves consistency and removes\nthe need for some file-specific rules (crti.o and crtn.o) in the\nmakefile.\n"},{"hash":"157e28492a287907fb6f3d39894c2c1b84122b51","date":"2016-02-17T21:11:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"support clean/distclean make targets in unconfigured tree\n\ncommit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d moved the error\nhandling for $(ARCH) not being set such that it applied to all\ntargets, including clean and distclean. previously these targets\nworked even in an unconfigured tree. to restore the old behavior, make\nmost of the makefile body conditional on $(ARCH) being set/non-empty\nand produce the error via a fake \"all\" target in the conditional\nbranch for the case where $(ARCH) is empty.\n"},{"hash":"5030e4a0605707c3f84c04c70ac689ca6ee54ffd","date":"2016-02-18T04:09:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"partly revert detection of broken float in configure\n\ncommit 80fbaac4cd1930e9545a5d36bf46ae49011d2ce8 broke all soft-float\narchs, where gcc defines __GCC_IEC_559==0 because rounding modes and\nexception flags are not supported. for now, just check for\n__FAST_MATH__ as an indication of broken float. this won't detect all\npossible misconfigurations but it probably catches the most common\none.\n"},{"hash":"2d0290debf28d9fddd3f1807fe12b1c64f96ab23","date":"2016-02-18T04:13:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in SH/FDPIC dynamic linker\n\nthe dynamic linker was found to hang when used as the PT_INTERP, but\nnot when invoked as a command. the mechanism of this failure was not\ndetermined, but the cause is clear:\n\ncommit 5552ce52000855906a5cb4f08f2e456573cca51f removed the SHARED\nmacro, but arch/sh/crt_arch.h is still using it to choose the right\nform of the crt/ldso entry point code. moving the forced definition\nfrom rcrt1.c to dlstart.c restores the old behavior. eventually the\nlogic should be changed to fully remove the SHARED macro or at least\nrename it to something more reasonable.\n"},{"hash":"790580b2fc47bc20e613336cb937a120422a770c","date":"2016-02-18T20:14:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update authors/contributors list\n\nthese additions were made based on scanning commit authors since the\nlast update, at the time of the 1.1.7 release, and adding everyone\nwith either substantial code contributions or a pattern of ongoing\nsimple patch submission.\n"},{"hash":"ed97dfd979c054b8c598875410529077dad84c02","date":"2016-02-18T23:53:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve macro logic for enabling arm math asm\n\nin order to take advantage of the fpu in -mfloat-abi=softfp mode, the\n__VFP_FP__ (presence of vfp fpu) was checked instead of checking for\n__ARM_PCS_VFP (hardfloat EABI variant). however, the latter macro is\nthe one that's actually specified by the ABI documents rather than\nbeing compiler-specific, and should also be checked in case __VFP_FP__\nis not defined on some compilers or some configurations.\n"},{"hash":"71c334f951d9ffa4d8bdc71bdd49628e5ae4512b","date":"2016-02-19T01:20:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around regression building for armhf with clang (compiler bug)\n\ncommit e4355bd6bec89688e8c739cd7b4c76e675643dca moved the math asm\nfrom external source files to inline asm, but unfortunately, all\ncurrent releases of clang use the wrong inline asm constraint codes\nfor float and double (\"w\" and \"P\" instead of \"t\" and \"w\",\nrespectively). this patch adds detection for the bug in configure,\nand, for now, just disables the affected asm on broken clang versions.\n"},{"hash":"4c101e158a59eafb8adbfeabab13a8747e4a97cb","date":"2016-02-19T05:10:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add arch tuple matching for nt32 and nt64 in configure\n\nthe nt32 and nt64 archs will be provided by the midipix project for\nbuilding musl on top of its posix-like syscall layer for windows. at\npresent the needed arch files are in a separate repository, but having\nthe tuple matching in the upstream configure script should make it\npossible to overlay the arch files without needing any further\npatching.\n"},{"hash":"8b084f06d0e17a8814147c386042f19829aff961","date":"2016-02-19T19:16:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"generate list of crt files to install instead of hard-coding in makefile\n\nthis follows the principle of having the source tree layout define\nbuild semantics. it also makes it possible for crt/$(ARCH) to define\nadditional installable files, which may be needed for midipix and\nother future targets.\n"},{"hash":"074e6b3fe3f2ad89b991f3d8ab0932035b312a62","date":"2016-02-22T05:07:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.14\n"},{"hash":"225f6a6b5b7173b6655e4f5d49b5b9fea70bf3bb","date":"2016-02-23T18:04:08.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"allow implementing a_cas_p with pointer-sized ll/sc\n\nNo current ports do this, but it will be useful for porting to 64-bit ll/sc\narchitectures, such as mips64 and powerpc64.\n"},{"hash":"fd224a800b68843c4d8d1002b07dd91041a7fa32","date":"2016-02-23T18:04:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make aarch64 atomic_arch.h report that it defines pointer-sized ll/sc\n\nat present this is done only for consistency, since this file defines\nits own a_cas_p rather than using the new generic one from atomic.h\nadded in commit 225f6a6b5b7173b6655e4f5d49b5b9fea70bf3bb. these\ndefinitions may however be useful if we ever need to add other\npointer-sized atomic operations.\n"},{"hash":"6d70c08a2c37745df637b231711f6dec79dbc6e1","date":"2016-03-02T05:34:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle non-matching address family entries in hosts file\n\nname_from_hosts failed to account for the possibility of an address\nfamily error from name_from_numeric, wrongly counting such a return as\nsuccess and using the uninitialized address data as part of the\nresults passed up to the caller.\n\nnon-matching address family entries cannot simply be ignored or\nresults would be inconsistent with respect to whether AF_UNSPEC or a\nspecific address family is queried. instead, record that a\nnon-matching entry was seen, and fail the lookup with EAI_NONAME of no\nmatching-family entries are found.\n"},{"hash":"6e694d6960d9d50a119e8660c95bf9308e609053","date":"2016-03-02T05:44:56.000Z","author":{"name":"Michael Meeuwisse","email":"mickeymeeuw@gmail.com"},"message":"explicitly include stdio.h to get EOF definition needed by wctob\n"},{"hash":"39ea71fb8afddda879a1999f2a203dfdaf57a639","date":"2016-03-02T05:47:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix * at the start of a BRE subexpression\n\ncommit 7eaa76fc2e7993582989d3838b1ac32dd8abac09 made * invalid at\nthe start of a BRE subexpression, but it should be accepted as\nliteral * there according to the standard.\n\nThis patch does not fix subexpressions starting with ^*.\n"},{"hash":"29b13575376509bb21539711f30c1deaf0823033","date":"2016-03-02T05:47:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix ^* at the start of a complete BRE\n\nThis is a workaround to treat * as literal * at the start of a BRE.\n\nIdeally ^ would be treated as an anchor at the start of any BRE\nsubexpression and similarly $ would be an anchor at the end of any\nsubexpression.  This is not required by the standard and hard to do\nwith the current code, but it's the existing practice.  If it is\nchanged, * should be treated as literal after such anchor as well.\n"},{"hash":"98d335735d64ee34a34cb9c08ea2cb51a076d2a1","date":"2016-03-03T02:32:36.000Z","author":{"name":"Nathan Zadoks","email":"nathan@nathan7.eu"},"message":"add sched_getcpu\n\nThis is a GNU extension, but a fairly minor one, for a system call that\notherwise has no libc wrapper.\n"},{"hash":"db66ef1f7db7c5b672591a97a97bc789c9efe2f3","date":"2016-03-03T02:35:40.000Z","author":{"name":"Nathan Zadoks","email":"nathan@nathan7.eu"},"message":"add sched_getcpu vDSO support\n\nThis brings the call to an actually usable speed.\nQuick unscientific benchmark: 14ns : 102ns :: vDSO : syscall\n"},{"hash":"b023c03b574acdfd73418314a5dcaa83e5cea5a0","date":"2016-03-04T22:58:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix expf(-NAN) and exp2f(-NAN) to return -NAN instead of 0\n\nexpf(-NAN) was treated as expf(-large) which unconditionally\nreturns +0, so special case +-NAN.\nreported by Petr Hosek.\n"},{"hash":"71392a91c333d47b6b3c8f99c897e3b5a7eb6d58","date":"2016-03-06T17:25:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"generalize mips-specific reloc code not to hard-code sym/type encoding\n\nthis change is made in preparation for adding the mips64 port, which\nneeds a 64-bit (and mips64-specific) form of the R_INFO macro, but\nit's a better abstraction anyway.\n\nbased on part of the mips64 port patch by Mahesh Bodapati and Jaydeep\nPatil of Imagination Technologies.\n"},{"hash":"83933573aff71a5d178ab71912f177d2d844e63e","date":"2016-03-06T17:41:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add mips64 port\n\npatch by Mahesh Bodapati and Jaydeep Patil of Imagination\nTechnologies.\n"},{"hash":"589aefa5b061647e8b9ad9bca3aaa8dc6222460a","date":"2016-03-06T17:48:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update documentation files for mips64 port\n"},{"hash":"9543656cc32fda48fc463f332ee20e91eed2b768","date":"2016-03-06T18:33:52.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"env: avoid leaving dangling pointers in __env_map\n\nThis is the minimal fix for __putenv leaving a pointer to freed heap\nstorage in __env_map array, which could later on lead to errors such\nas double-free.\n"},{"hash":"5a92dd95c77cee81755f1a441ae0b71e3ae2bcdb","date":"2016-03-06T22:03:01.000Z","author":{"name":"Felix Fietkau","email":"nbd@openwrt.org"},"message":"add powerpc soft-float support\n\nSome PowerPC CPUs (e.g. Freescale MPC85xx) have a completely different\ninstruction set for floating point operations (SPE).\nExecuting regular PowerPC floating point instructions results in\n\"Illegal instruction\" errors.\n\nMake it possible to run these devices in soft-float mode.\n"},{"hash":"636a4799dd5bf11a1fcd209906c088ed948b821c","date":"2016-03-06T22:11:29.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make configure check for unsupported (SPE) powerpc hard-float models\n\nthe SPE ABI may be compatible with soft-float, but actually making it\nwork requires some additional work, so for now it's best to make sure\nbroken builds don't happen.\n"},{"hash":"27bf42cd9d85e242f1ffac8d99330da120c8dfdb","date":"2016-03-11T05:02:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make mips64 a_sc_p atomic primitive's asm constraints work with clang\n\napparently clang does not accept matching-register input and output\nconstraints that differ in size (32-bit vs 64-bit).\n\nbased on patch by Jaydeep Patil.\n"},{"hash":"de400b6609becbc6a5ae87fa8b155f02a860e257","date":"2016-03-11T05:12:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"correct pointer types for a_ll_p and a_sc_p primitives on mips64\n\nthese changes should not affect generated code, but they reflect that\nthe underlying objects operated on by a_cas_p are supposed to have\ntype volatile void *, not volatile long. in theory a compiler could\ntreat the effective type mismatch in the \"m\" memory operands as\nundefined behavior.\n"},{"hash":"4aac019a0efd59011a48d031ad046c934c7e8365","date":"2016-03-16T20:35:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix padding string formats to width in wide printf variants\n\nthe idiom fprintf(f, \"%.*s\", n, \"\") was wrongly used in vfwprintf as a\nmeans of producing n spaces; instead it produces no output. the\ncorrect form is fprintf(f, \"%*s\", n, \"\"), using width instead of\nprecision, since for %s the later is a maximum rather than a minimum.\n"},{"hash":"e9f1c7981ae00ad25d59018c1df26897e2effdad","date":"2016-03-19T02:40:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"deduplicate bits/mman.h\n\ncurrently five targets use the same mman.h constants and the rest\nshare most constants too, so move them to sys/mman.h before the\nbits/mman.h include where the differences can be corrected by\nredefinition of the macros.\n\nthis fixes two minor bugs: POSIX_MADV_DONTNEED was wrong on most\ntargets (it should be the same as MADV_DONTNEED), and sh defined\nthe x86-only MAP_32BIT mmap flag.\n"},{"hash":"dc4520d9c0b79bc5944f509e4e9061e5081e38ca","date":"2016-03-19T03:46:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix outdated pathnames in COPYRIGHT file\n"},{"hash":"2de52704ca644f129cc87ac1b28a06198d7dd829","date":"2016-03-19T15:30:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"mips64: add recent linux syscall numbers\n\nadd userfaultfd, membarrier and mlock2 system call numbers.\n"},{"hash":"84d4f5eee5a291dcb25a2a8f781a9a48f70f4731","date":"2016-03-19T15:30:49.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add copy_file_range syscall numbers from linux v4.5\n\nit was introduced for offloading copying between regular files\nin linux commit 29732938a6289a15e907da234d6692a2ead71855\n\n(microblaze and sh does not yet have the syscall number.)\n"},{"hash":"8ffa0375f2008818f443b4fdc7d481715cd6a5a0","date":"2016-03-19T15:31:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add IPV6_HDRINCL socket option from linux v4.5\n\nnew in linux commit 715f504b118998c41a2079a17e16bf5a8a114885\nsame as IP_HDRINCL but for SOL_IPV6 sockets.\n"},{"hash":"c1aabc6cacc15feef8e5db4cbfee14ee8be2ff26","date":"2016-03-19T15:31:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SO_ATTACH_REUSEPORT_[CE]BPF socket options from linux v4.5\n\nnew socket options for setting classic or extended BPF program\nfor sockets in a SO_REUSEPORT group.  added in linux commit\n538950a1b7527a0a52ccd9337e3fcd304f027f13\n"},{"hash":"b10ca0f560491ed9e353ead6e35f8992e9800c7a","date":"2016-03-19T15:31:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add EPOLLEXCLUSIVE epoll flag from linux v4.5\n\nnew flag for exclusive wakeup mode when an event source fd is attached\nto multiple epoll fds but they should not all receive the events.\nnew in linux commit df0108c5da561c66c333bb46bfe3c1fc65905898\n"},{"hash":"d578c74e677c9c29bfa0b5eec1f21506b9c05558","date":"2016-03-19T15:31:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add MADV_FREE madvise command from linux v4.5\n\nallows the os to free the marked pages lazily on memory pressure.\nexpected to increase malloc performance.\nnew in linux commit 854e9ed09dedf0c19ac8640e91bcc74bc3f9e5c9\n"},{"hash":"5978eb703ce0e64dd778a88c1ffffb76fe5e2202","date":"2016-03-24T17:48:47.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"fix gethostbyaddr_r to fill struct hostent.h_length as appropriate\n"},{"hash":"6d1a3dfeaf2caac4033a3c65822fb4e7e14866c7","date":"2016-03-29T03:41:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined pointer comparison in stdio-internal __toread\n\nthe comparison f->wpos > f->buf has undefined behavior when f->wpos is\na null pointer, despite the intuition (and actual compiler behavior,\nfor all known compilers) being that NULL > ptr is false for all valid\npointers ptr.\n\nthe purpose of the comparison is to determine if the write buffer is\nnon-empty, and the idiom used elsewhere for that is comparison against\nf->wbase, which is either a null pointer when not writing, or equal to\nf->buf when writing. in the former case, both f->wpos and f->wbase are\nnull; in the latter they are both non-null and point into the same\narray.\n"},{"hash":"5c3412d22555d03a1c00578ba8faaa8dc9206420","date":"2016-03-30T01:27:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression disabling use of pause instruction for x86 a_spin\n\ncommits e24984efd5c6ac5ea8e6cb6cd914fa8435d458bc and\n16b55298dc4b6a54d287d7494e04542667ef8861 inadvertently disabled the\na_spin implementations for i386, x86_64, and x32 by defining a macro\nnamed a_pause instead of a_spin. this should not have caused any\nfunctional regression, but it inhibited cpu relaxation while spinning\nfor locks.\n\nbug reported by George Kulakowski.\n"},{"hash":"c718f9fc1b4bd913eff10d0c12763f90b2bc487c","date":"2016-04-01T17:36:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix read past end of haystack buffer for short needles in memmem\n\nthe two/three/four byte memmem specializations are not prepared to\nhandle haystacks shorter than the needle; they unconditionally read at\nleast up to the needle length and subtract from the haystack length.\nif the haystack is shorter, the remaining haystack length underflows\nand produces an unbounded search which will eventually either crash or\nfind a spurious match.\n\nthe top-level memmem function attempted to avoid this case already by\nchecking for haystack shorter than needle, but it failed to re-check\nafter using memchr to remove the maximal prefix not containing the\nfirst byte of the needle.\n"},{"hash":"6d99ad91e869aab35a4d76d34c3c9eaf29482bad","date":"2016-04-03T10:42:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for mips and mips64 r6 isa\n\nmips32r6 and mips64r6 are actually new isas at both the asm source and\nopcode levels (pre-r6 code cannot run on r6) and thus need to be\ntreated as a new subarch. the following changes are made, some of\nwhich yield code generation improvements for non-r6 targets too:\n\n- add subarch logic in configure script and reloc.h files for dynamic\n  linker name.\n\n- suppress use of .set mips2 asm directives (used to allow mips2\n  atomic instructions on baseline mips1 builds; the kernel has to\n  emulate them on mips1) except when actually needed. they cause wrong\n  instruction encodings on r6, and pessimize inlining on at least some\n  compilers.\n\n- only hard-code sync instruction encoding on mips1.\n\n- use \"ZC\" constraint instead of \"m\" constraint for llsc memory\n  operands on r6, where the ll/sc instructions no longer accept full\n  16-bit offsets.\n\n- only hard-code rdhwr instruction encoding with .word on targets\n  (pre-r2) where it may need trap-and-emulate by the kernel.\n  otherwise, just use the instruction mnemonic, and allow an arbitrary\n  destination register to be used.\n"},{"hash":"5972c4a4113e2a4de5edf519faf15296ae1eb3ed","date":"2016-04-18T05:19:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add mips n32 port (ILP32 ABI for mips64)\n\nbased on patch submitted by Jaydeep Patil, with minor changes.\n"},{"hash":"e7d05c7894aa15ea6decdeca481ffed3f14cb521","date":"2016-04-18T05:31:17.000Z","author":{"name":"Petr Vaněk","email":"pv@excello.cz"},"message":"remove dead store in res_msend\n\nThe variable nss is set to zero in following line.\n"},{"hash":"be999f7a54e81656ea0409030205177327a7450c","date":"2016-04-25T23:37:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix thread structure/dtv-pointer corruption on powerpc\n\nper the powerpc psabi, offset 4 of the stack at call time belongs to\nthe callee and is used for spilling lr (return address). in addition,\noffset 0 on the stack must contain a pointer to the previous stack\nframe, or a null pointer for the initial stack frame of a thread.\n__clone failed to setup any stack frame on the new thread's stack,\nthereby allowing the start function it called to clobber offset 4 of\nthe new thread's struct __pthread, which contains the dtv pointer.\n\nadd code to setup a proper stack frame and align the stack pointer to\na multiple of 16 (also an abi requirement) if it was not already\naligned.\n"},{"hash":"6ed791e768d83b40ed56c99dbb1ed72c1e49aae7","date":"2016-04-26T19:26:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix FILE buffer underflow in ungetwc\n\ncommit 7e816a6487932cbb3cb71d94b609e50e81f4e5bf (version 1.1.11\nrelease cycle) moved the code that performs wchar_t to multibyte\nconversion across code that used the resulting length in bytes,\nthereby breaking the unget buffer space check in ungetwc and\nclobbering up to three bytes below the start of the buffer.\n\nfor allocated FILEs (all read-enabled FILEs except stdin), the\nunderflow clobbers at most the FILE-specific locale pointer. no stores\nare performed through this pointer, but subsequent loads may result in\na crash or mismatching encoding rule (UTF-8 multibyte vs byte-based).\n\nfor stdin, the buffer lies in .bss and the underflow may clobber\nanother object. in practice, for libc.so the adjacent object seems to\nbe stderr's buffer, which is completely unused, but this could vary\nwith linking options, or when static linking.\n\napplications which do not attempt to use more than one character of\nungetwc pushback, or which do not use ungetwc, are not affected.\n"},{"hash":"f0a61399330bae42beeb27d6ecd05570b3382a60","date":"2016-04-29T00:41:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update COPYRIGHT file to clarify that permissions apply for all files\n\nthese changes are the outcome of a long mailing list thread that took\nplace March 2016, \"musl licensing\". among minor other issues,\nprospective users were not confident that the whole-project MIT\nlicense would grant permission for files to which the COPYRIGHT file\nexpressed a belief that copyright not apply, if it turned out that\nthese files were actually subject to copyright.\n\nin accordance with the original intent of applying a permissive\nlicense to the project, which was that license issues not be an\nobstacle to use, the text which was causing confusion is removed. no\nnew claims of copyright are made, but new text is added to clarify\nthat the grant of permissions applies to all files, and an explicit\ngrant of permission to use public headers and crt files without\nattribution has been made.\n\nthis patch was reviewed and approved by all substantial contributors\nto the affected files: Bobby Bingham, John Spencer (rofl0r), Nicholas\nJ. Kain, Rich Felker, Richard Pennington, Stefan Kristiansson, and\nSzabolcs Nagy.\n"},{"hash":"2d49c2243fbe3322961e6f0a052cc3a28acd1fe2","date":"2016-04-29T23:50:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"follow standard configure behavior for cross compile prefix\n\nthe standard configure interface, which our configure script tries to\nimplement, identifies cross compiling (build != host) and searches for\nthe properly-prefixed cross tools. our script was not doing that,\nforcing users to explicitly provide either CC or a CROSS_COMPILE tool\nprefix, and the more common choice, just providing CC, was incomplete\nbecause the Makefile would still invoke the native ar and ranlib\nprograms. this happened to work when building on ELF-based systems\nwith GNU binutils, but could easily fail when cross-compiling from\ndissimilar systems.\n\nlike before, and like the standard configure behavior, an explicit CC\nor CROSS_COMPILE variable on the command line or in the environment\noverrides the automatic prefixing.\n"},{"hash":"4b619e5c61d7d4cf344b355be8b1acb0f0795ea9","date":"2016-05-04T21:24:28.000Z","author":{"name":"Andrew Kelley","email":"superjoe30@gmail.com"},"message":"fix incorrect protocol name and number for egp\n\npreviously if you called getprotobyname(\"egp\") you would get\nNULL because \\008 is invalid octal and so the protocol id was\ninterpreted as 0 and name as \"8egp\".\n"},{"hash":"6bc7d9c411c3a32cfa9d239b73fffb2ba66dd9ff","date":"2016-05-04T21:31:28.000Z","author":{"name":"LeMay, Michael","email":"michael.lemay@intel.com"},"message":"fix redundant processing of --build flag in configure script\n\nThe --build flag is listed in two case statement entries in configure,\nwhich causes the second entry to be ignored. This patch removes it\nfrom the first entry.\n\nSigned-off-by: Michael LeMay <michael.lemay@intel.com>\n"},{"hash":"c0ede9e4046a0882d83ae4b45c7dfac86fb7c15d","date":"2016-05-09T02:57:40.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"add powerpc64 port\n"},{"hash":"49631b7b6c8b8c055aae5b6948930c219b95fdef","date":"2016-05-09T03:16:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix spurious trailing whitespace in powerpc & powerpc64 bits/errno.h\n"},{"hash":"622fe8b5cf15858b6cbb8346fb3d7c388f635849","date":"2016-05-12T05:30:51.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"x32: remove arch-specific syscall remapping\n\nThese system calls are already all remapped in an arch-agnostic manner in\nsrc/internal/syscall.h\n"},{"hash":"8ef6170b43e36d4daedc61f0f8177a8cbe18ceda","date":"2016-05-12T05:32:45.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"x32: eliminate __X32_SYSCALL_BIT constant\n"},{"hash":"63e3a1661f1fa5552e2023683617ce09fac3248b","date":"2016-05-12T05:34:05.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"deduplicate __NR_* and SYS_* syscall number definitions\n"},{"hash":"51eeb6ebc94d965768143c45e9f39b0a7998bdbd","date":"2016-05-22T21:52:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix the use of uninitialized value in regcomp\n\nthe num_submatches field of some ast nodes was not initialized in\ntre_add_tag_{left,right}, but was accessed later.\n\nthis was a benign bug since the uninitialized values were never used\n(these values are created during tre_add_tags and copied around during\ntre_expand_ast where they are also used in computations, but nothing\nin the final tnfa depends on them).\n"},{"hash":"81fb75a1d75c20d97292cbbe4cde6a1e65871abe","date":"2016-05-22T22:49:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined pointer arithmetic in CMSG_NXTHDR macro\n\npreviously, the only way the stopping condition could be met with\ncorrect lengths in the headers invoked undefined behavior, adding\nsizeof(struct cmsghdr) beyond the end of the cmsg buffer.\n\ninstead, compute and compare sizes rather than pointers.\n"},{"hash":"77baaa47e107f176fb2dc150dd6a9ad87f6cbe24","date":"2016-05-23T22:19:11.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix a64l undefined behavior on ILP32 archs, wrong results on LP64 archs\n\nthe difference of pointers is a signed type ptrdiff_t; if it is only\n32-bit, left-shifting it by 30 bits produces undefined behavior. cast\nthe difference to an appropriate unsigned type, uint32_t, before\nshifting to avoid this.\n\nthe a64l function is specified to return a signed 32-bit result in\ntype long. as noted in the bug report by Ed Schouten, converting\nimplicitly from uint32_t only produces the desired result when long is\na 32-bit type. since the computation has to be done in unsigned\narithmetic to avoid overflow, simply cast the result to int32_t.\n\nfurther, POSIX leaves the behavior on invalid input unspecified but\nnot undefined, so we should not take the difference between the\npotentially-null result of strchr and the base pointer without first\nchecking the result. the simplest behavior is just returning the\npartial conversion already performed in this case, so do that.\n"},{"hash":"78b1f3cb1406b475ad8800a64197f2e0bf04d5ef","date":"2016-06-09T17:38:41.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add preadv2 and pwritev2 syscall numbers for linux v4.6\n\nthe syscalls take an additional flag argument, they were added in commit\nf17d8b35452cab31a70d224964cd583fb2845449 and a RWF_HIPRI priority hint\nflag was added to linux/fs.h in 97be7ebe53915af504fb491fb99f064c7cf3cb09.\n\nthe syscall is not allocated for microblaze and sh yet.\n"},{"hash":"f6f4aa5ddb8b28f31d35131af78b7254c11445d4","date":"2016-06-09T17:40:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SO_CNX_ADVICE to sys/socket.h, new in linux v4.6\n\nnew socket option so application can give advice about routing\npath quality of connected udp sockets, added in linux commit\na87cb3e48ee86d29868d3f59cfb9ce1a8fa63314\n"},{"hash":"7ea37c7aa40ba4d3d46a4427402dfef09ef0253b","date":"2016-06-09T17:40:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add ETH_P_MACSEC netinet/if_ether.h, new in linux v4.6\n\nethertype for macsec added in linux commit\ndece8d2b78d19df7fe5e4e965f1f0d1a3e188d1b\n"},{"hash":"19f87240d5e1d198b4e1115ed8210ae29519f837","date":"2016-06-09T17:40:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update siginfo struct for linux v4.6\n\nx86 protection key faults are reported in the si_pkey field,\nadded in linux commit cd0ea35ff5511cde299a61c21a95889b4a71464e\n"},{"hash":"1d561c2fa4eaf321022330eca0f6598feda62888","date":"2016-06-09T17:40:17.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add CLONE_NEWCGROUP clone flag, new in linux v4.6\n\nflag for new cgroup namespace, added in linux commit\n5e2bec7c2248ae27c5b16cd97215ae05c1d39179\n"},{"hash":"349877755d283533c19c86244d17801574a60b51","date":"2016-06-09T17:40:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new tcp_info fields from linux v4.6\n\nnew fields and associated linux commit:\ntcpi_notsent_bytes, tcpi_min_rtt cd9b266095f422267bddbec88f9098b48ea548fc\ntcpi_data_segs_in, tcpi_data_segs_out a44d6eacdaf56f74fad699af7f4925a5f5ac0e7f\n"},{"hash":"a0bb50a14216e7be7453abee2e7b5830e2a7c4c1","date":"2016-06-09T17:40:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update sys/socket.h to linux v4.6\n\nkernel connection multiplexor macros AF_KCM, PF_KCM, SOL_KCM were\nadded in linux commit ab7ac4eb9832e32a09f4e8042705484d2fb0aad3\n\nMSG_BATCH sendmsg flag for performance optimization was added\nin linux commit f092276d85b82504e8a07498f4e9e0c51f06745c\n\nSOL_* macros are now synced with linux socket.h which is not a uapi\nheader and glibc did not have the macros either, but that has changed\nhttp://sourceware.org/ml/libc-alpha/2016-05/msg00322.html\n"},{"hash":"1e6fc0b690191005a49468c296ad49d0caacacf1","date":"2016-06-09T17:42:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid padding gaps in struct sockaddr_storage\n\ncompilers are free not to copy, or in some cases to clobber, padding\nbytes in a structure. while it's an aliasing violation, and thus\nundefined behavior, to copy or manipulate other sockaddr types using\nsockaddr_storage, it seems likely that traditional code attempts to do\nso, and the original intent of the sockaddr_storage structure was\nprobably to allow such usage.\n\nin the interest of avoiding silent and potentially dangerous breakage,\nensure that there are no actual padding bytes in sockaddr_storage by\nmoving and adjusting the size of the __ss_padding member so that it\nfits exactly.\n\nthis change also removes a silent assumption that the alignment of\nlong is equal to its size.\n"},{"hash":"6cec7bc57f599f43f4041cec2093e3c9231dbaab","date":"2016-06-21T20:33:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove comments on copyright status from UTF-8 implementation files\n\ndespite clarifications made to the COPYRIGHT file in commit\nf0a61399330bae42beeb27d6ecd05570b3382a60, there continues to be\nconfusion about whether the permissions granted actually apply to all\nfiles. I am the sole author of these files and clearly intend, and\nhave always intended, for the grant of permission to apply to them.\n"},{"hash":"384d103d94dba0472a587861f67d7ed6e8955f86","date":"2016-06-27T19:18:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix failure to obtain EOWNERDEAD status for process-shared robust mutexes\n\nLinux's documentation (robust-futex-ABI.txt) claims that, when a\nprocess dies with a futex on the robust list, bit 30 (0x40000000) is\nset to indicate the status. however, what actually happens is that\nbits 0-30 are replaced with the value 0x40000000, i.e. bits 0-29\n(containing the old owner tid) are cleared at the same time bit 30 is\nset.\n\nour userspace-side code for robust mutexes was written based on that\ndocumentation, assuming that kernel would never produce a futex value\nof 0x40000000, since the low (owner) bits would always be non-zero.\ncommit d338b506e39b1e2c68366b12be90704c635602ce introduced this\nassumption explicitly while fixing another bug in how non-recoverable\nstatus for robust mutexes was tracked. presumably the tests conducted\nat that time only checked non-process-shared robust mutexes, which are\nhandled in pthread_exit (which implemented the documented kernel\nprotocol, not the actual one) rather than by the kernel.\n\nchange pthread_exit robust list processing to match the kernel\nbehavior, clearing bits 0-29 while setting bit 30, and use the value\n0x7fffffff instead of 0x40000000 to encode non-recoverable status. the\nchoice of value here is arbitrary; any value with at least one of bits\n0-29 set should work just as well,\n"},{"hash":"4da0bc5ef8e0fdea65335599d947d74b7b321daa","date":"2016-06-27T21:11:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misaligned address buffers in gethostbyname[2][_r] results\n\nmistakenly ordering strings before addresses in the result buffer\nbroke the alignment that the preceding code had set up.\n"},{"hash":"b3bbc7b16067c82e528d3de580f807b8316f096e","date":"2016-06-29T15:54:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect definition of RUSAGE_CHILDREN in sys/resource.h\n\nthe kernel ABI value for RUSAGE_CHILDREN is -1, not 1. the latter is\nactually interpreted as RUSAGE_THREAD, to obtain values for just the\ncalling thread and not the whole process.\n"},{"hash":"5c43e1dbc8716536551d392f834c6752a3e82cec","date":"2016-06-29T15:55:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add RUSAGE_THREAD (Linux extension) definition to sys/resource.h\n"},{"hash":"04bced403dead13d20a46a1bd00ab1eb2c50b882","date":"2016-06-29T15:57:53.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"in performing dns lookups, check result from res_mkquery\n\ndon't send a query that may be malformed.\n"},{"hash":"4adc6c33e769e647b6fe73752f727c58d09e4e53","date":"2016-06-29T15:59:25.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"refactor name_from_dns in hostname lookup backend\n\nloop over an address family / resource record mapping to avoid\nrepetitive code.\n"},{"hash":"804debee2b1550d10b5ea7290240860dca40ea72","date":"2016-06-29T21:45:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in posix_fadvise, don't bypass __syscall macro infrastructure\n\nwhen commit 0b6eb2dfb2e84a8a51906e7634f3d5edc230b058 added the\nparentheses around __syscall to invoke the function directly, there\nwas no __syscall7 in the syscall macro infrastructure, so this hack\nwas needed. commit 9a3bbce447403d735282586786dc436ec1ffbad4 fixed that\nbut failed to remove the hack.\n"},{"hash":"6d38c9cf80f47623e5e48190046673bbd0dc410b","date":"2016-06-29T22:21:36.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misordered syscall arguments for posix_fadvise on arm\n\nthe arm version of the syscall has a custom argument ordering to avoid\nneeding a 7-argument syscall due to 64-bit argument alignment.\n"},{"hash":"3d98146146dbe138b380ea7d7f9b93139d768828","date":"2016-07-01T01:47:24.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"pthread: implement try/timed join variants\n"},{"hash":"3dd27f3aabf03b109c30648c3f7a209302deee7f","date":"2016-07-01T17:32:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix posix_fadvise syscall args on powerpc, unify with arm fix\n\ncommit 6d38c9cf80f47623e5e48190046673bbd0dc410b provided an\narm-specific version of posix_fadvise to address the alternate\nargument order the kernel expects on arm, but neglected to address\nthat powerpc (32-bit) has the same issue. instead of having arch\nvariant files in duplicate, simply put the alternate version in the\ntop-level file under the control of a macro defined in syscall_arch.h.\n"},{"hash":"7158481d51960d4ff8fe2f113bcbfa7d5b862648","date":"2016-07-03T14:49:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add consistent reserved fields in mips64/n32 termios structures\n\nthe (unused) speed fields were omitted when these ports were first\nadded (within this release cycle, so not present in any release yet)\nin accordance with how glibc defines the structure on mips archs.\nhowever their omission does not match existing musl practice/intent.\n\nglibc provides its own, mostly-unified termios structure definition\nand performs translation in userspace to match the kernel structure\nfor the arch, but has gratuitous differences on a few archs like mips,\npresumably as a result of historical mistakes. some other libcs use\nthe kernel definitions directly. musl essentially does that, by\nmatching the kernel layout in the part of the structure the kernel\nwill read/write, but leaves additional space at the end for\nextensibility. these are nominally the (nonstandard) speed fields and\n(on most archs) extra c_cc elements, but since they are not used they\ncould be repurposed if there's ever a need.\n"},{"hash":"76d7cfb7e677eb0fcacdabf67514b51e777269dd","date":"2016-07-03T16:49:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use the generic ioctl.h for x86_64, x32 and aarch64\n\nthey were slightly different in musl, but should be the same:\nthe linux uapi and glibc headers are not different.\n"},{"hash":"2df9ae916120212442201bbf30271a1170e508cf","date":"2016-07-03T18:54:33.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove ioctl macros that were removed from linux uapi\n\nTIOCTTYGSTRUCT, TIOCGHAYESESP, TIOCSHAYESESP and TIOCM_MODEM_BITS\nwere removed from the linux uapi and not present in glibc ioctl.h\n"},{"hash":"8735a921d0242be0d7e6dbe0f76f79e09d4f06dd","date":"2016-07-03T18:54:33.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing SIOCSIFNAME from linux/sockios.h to ioctl.h\n\nglibc ioctl.h has it too.\n"},{"hash":"5ce901279ec8b51fd80fb33bdebbbe54553a6057","date":"2016-07-03T18:54:34.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing TIOC* macros to ioctl.h\n\nthese are defined in linux asm/ioctls.h.\n(powerpc64 and powerpc bits/ioctl.h are now identical)\n"},{"hash":"058c0b2d700b1092ad5967c742c790b9c807e6ae","date":"2016-07-03T18:54:34.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove mips and powerpc ioctls that are missing from linux uapi\n\nmips and powerpc use their own asm/ioctls.h, not the asm-generic/ioctls.h\nand they lack termiox macros that are available on other targets.\nsee kernel commit 1d65b4a088de407e99714fdc27862449db04fb5c\n"},{"hash":"b76d4e06f1686337713a31a9e7274e1321ae41b6","date":"2016-07-03T18:54:34.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix mips, mips64, mipsn32 TIOCM_* macros in ioctl.h\n\nTIOCM_ macros were wrongly using the asm-generic/termios.h definitions\ninstead of the mips specific ones from asm/termios.h\n"},{"hash":"809495f7b77abba57cd6da600d9dbcf6d2d8f73b","date":"2016-07-03T18:54:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix TIOCMSET in mips ioctl.h\n\nit seems it was a typo.\n"},{"hash":"6fce6ca129c34d8975f777216d32cf92e77c18f2","date":"2016-07-03T18:54:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"remove termios2 related ioctls from sh ioctl.h\n\nmusl does not define these on other targets either.\n"},{"hash":"cd208b0037c60da625fdd1f6a1459bc37115aacd","date":"2016-07-03T18:54:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix FIOQSIZE in arm ioctl.h\n\narm ioctl.h is the same as the generic one except this macro,\nso a workaround solution is used to avoid another ioctl.h copy.\n"},{"hash":"126f58b2f44a0ba730831a6a4fef8daf85d9a601","date":"2016-07-03T19:02:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"define appropriate feature test macros to get CBAUD from termios.h\n"},{"hash":"2e128574c9c46b240a15c07058b772fb7e47a75e","date":"2016-07-03T19:02:23.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix generic termios.h macro exposure/namespace issues\n\nadd EXTA, EXTB, CIBAUD, CMSPAR, XCASE macros and hide them as well as\nCBAUD, ECHOCTL, ECHOPRT, ECHOKE, FLUSHO, PENDIN in standard mode.\n\nthe new macros are both in glibc termios.h and in linux asm/termbits.h,\nthe later also contains IBSHIFT and BOTHER, those were not added.\n\nthese are not standard macros, but some of them are in the reserved\nnamespace so could be exposed, the ones which are not reserved are\nCIBAUD, CMSPAR and XCASE (which was removed in issue 6), the rest\ngot hidden to be consistent with glibc.\n"},{"hash":"3bda42ac4bddc600bdae0f57c5b65c4482fbfefc","date":"2016-07-03T19:02:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix powerpc termios.h macro exposure/namespace issues\n\nsame changes as in the generic header.\n\nand BOTHER and IBSHIFT were removed (present in linux uapi but not\nin glibc) and TIOCSER_TEMT was added (present in glibc).\n"},{"hash":"ee9b5900fb098edd3e8d3df375cac8b2cfe8551f","date":"2016-07-03T19:02:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix mips termios.h macro exposure/namespace issues\n\nsame changes to the defined macros as in powerpc and generic bits.\n"},{"hash":"8c316e9e49d37ad92c2e7493e16166a2afca419f","date":"2016-07-03T19:02:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix TCS* definitions in mips termios.h\n\nthese were incorrectly using the generic definitions.\n"},{"hash":"cae8ac485fdcf0227f7dcc5b5af93df72fb01a9e","date":"2016-07-03T19:02:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix CBAUDEX in powerpc termios.h\n\nit seems it was a typo.\n"},{"hash":"45ba07fded06005cddbf36b1a8f0c29c63724893","date":"2016-07-03T19:02:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"format mips bits/termios.h consistently mips64 and n32 versions\n\nwith this change, all three files are identical.\n"},{"hash":"093288dcb37a30c634b0a00eb7e2a0dbe72ebf95","date":"2016-07-03T19:02:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misplaced indention in sys/procfs.h\n"},{"hash":"befa5866ee30d09c0c96e88af2eabff5911342ea","date":"2016-07-03T19:02:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make brace placement in public header struct definitions consistent\n\nplacing the opening brace on the same line as the struct keyword/tag\nis the style I prefer and seems to be the prevailing practice in more\nrecent additions.\n\nthese changes were generated by the command:\n\nfind include/ arch/*/bits -name '*.h' \\\n-exec sed -i '/^struct [^;{]*$/{N;s/\\n/ /;}' {} +\n\nand subsequently checked by hand to ensure that the regex did not pick\nup any false positives.\n"},{"hash":"308e4bc61883c82aeda70e20367b656cd35899f1","date":"2016-07-03T20:11:05.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add EM_OPENRISC again to elf.h\n\nit was changed to EM_OR1K in 200d15479c0bc48471ee7b8e538ce33af990f82e\nas that was meant to be the official name, but glibc and the latest\ngabi spec still uses the EM_OPENRISC name:\nhttp://www.sco.com/developers/gabi/latest/ch4.eheader.html\nbinutils defines both macros so we should do the same for backward\ncompatibility.\n"},{"hash":"35b58194dc065dd7daec815ba74372a71f9654a4","date":"2016-07-03T20:11:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new powerpc64 relocations to elf.h\n\nfollowing the corresponding binutils and glibc changes\nhttps://sourceware.org/ml/binutils/2013-10/msg00372.html\n"},{"hash":"b921e0fd1fc9840fdfc6dde27dc7453047437f0f","date":"2016-07-03T20:12:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update elf.h with powerpc64 elfv2 abi related macros\n\nsee\nhttps://sourceware.org/ml/libc-alpha/2013-11/msg00315.html\nhttps://sourceware.org/ml/libc-alpha/2013-11/msg00314.html\n"},{"hash":"49eb322425bb990ec4cf57578a730fc0d2b8afee","date":"2016-07-03T20:15:10.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update elf.h with new aarch64 relocs\n\nadd ilp32 related relocs and alternative names for a few macros following\nhttps://sourceware.org/ml/libc-alpha/2014-11/msg00455.html\n"},{"hash":"abbdf0f51d975a1120483a7bdaf92d65663a4f37","date":"2016-07-03T20:15:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update elf.h with mips abi flags support\n\nfollowing\nhttps://sourceware.org/ml/libc-alpha/2014-05/msg00332.html\n"},{"hash":"347d0617d11c0ae4c5e501d4232d2b4a5cfc207a","date":"2016-07-03T20:15:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add nios2 definitions to elf.h\n"},{"hash":"29a96c1980db9c6eee70e8935a9a4cb3a0ac954d","date":"2016-07-03T20:15:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add powerpc tls optimization related definitions to elf.h\n\nsee\nhttps://sourceware.org/ml/libc-alpha/2015-03/msg00580.html\n"},{"hash":"af17dc40dd91fbfc5a0ca487c52f6c419567f967","date":"2016-07-03T20:15:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SHF_COMPRESSED section flag to elf.h\n\nfollowing\nhttp://www.sco.com/developers/gabi/latest/ch4.sheader.html\n"},{"hash":"7c3b67234c859f98a6365d215c5362c73eed5765","date":"2016-07-03T20:15:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add DT_MIPS_RLD_MAP_REL to elf.h\n\nmarks different RLD_MAP for debugging PIE binaries.\n"},{"hash":"c3be411df7387a8c516b169baf91cf1cccef99b3","date":"2016-07-03T20:15:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add missing x86 relocs to elf.h\n\nsee\nhttps://sourceware.org/ml/libc-alpha/2016-01/msg00822.html\n"},{"hash":"84fd4e4ffdefeec296a56b1f307413a5171eb9e1","date":"2016-07-03T20:15:12.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add NT_ARM_SYSTEM_CALL to elf.h\n\nnew regset in linux v3.18 for ptrace.\n"},{"hash":"3c3b09980d792ea8393f0a3865735b2ff5ecc765","date":"2016-07-03T20:15:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add EF_SH_ sh specific macros to elf.h\n\nlast time elf.h was thoroughly updated sh was not yet supported\nso these processor specific e_flags were missing.\n"},{"hash":"ee3f0c551669ca1c61abac0888f93a27b0b17856","date":"2016-07-03T20:19:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make brace placement in public header typedef'd structs consistent\n\ncommit befa5866ee30d09c0c96e88af2eabff5911342ea performed this change\nfor struct definitions that did not also involve typedef, but omitted\nthe latter.\n"},{"hash":"0c8bc102f287d3993751d80ba2dffb01e0c8bc7f","date":"2016-07-03T22:01:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"improve abort fallback behavior when raising SIGABRT fails to terminate\n\nthese changes still do not yield a fully-conforming abort, but they\nfix two known issues:\n\n- per POSIX, termination via SIGKILL is not \"abnormal\", but both ISO C\n  and POSIX require abort to yield abnormal termination.\n\n- raising SIGKILL fails to do anything to pid 1 in some containers.\n\nnow, the trapping instruction produced by a_crash() is expected to\nproduce abnormal termination, without the risk of invoking a signal\nhandler since SIGILL and SIGSEGV are blocked, and _Exit, which\ncontains an infinite loop analogous to the one being removed from\nabort itself, is used as a last resort.\n\nthis implementation still fails to produce an exit status as if the\nprocess terminated via SIGABRT in cases where SIGABRT is blocked or\nignored, but fixing that is not easy; the obvious pseudo-solutions all\nhave subtle race conditions where a concurrent fork or exec can expose\nincorrect signal state.\n"},{"hash":"0f47367751a4baca80ef4f5ab11dbb9b6d7e8bdd","date":"2016-07-04T00:03:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add stdc-predef.h for library-level predefined macros\n\nmodern compilers (for gcc, versions 4.8 and later) automatically\npre-include <stdc-predef.h> to obtain the values of certain predefined\nmacros specified by ISO C but which reflect properties of the library\nimplementation, not just the compiler. provide values indicating that\nwchar_t is Unicode-encoded and that Annex F (IEEE floating point) is\nsupported unless the compiler indicates otherwise.\n\nbased on patch by Masanori Ogino.\n"},{"hash":"faf69b9a73d09fafcbe4fd3007b8d8724293d8e1","date":"2016-07-05T21:58:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.15\n"},{"hash":"e1679ef1a1b7658dc7f8c9c97aeac7c7597c66a0","date":"2016-07-06T04:21:19.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"remove or1k version of sem.h\n\nIt's identical to the generic version, after evaluating the endian\npreprocessor checks in the generic version.\n"},{"hash":"5ab0b20ea6fc5a5609825a874bf7d79c4f987792","date":"2016-07-06T04:21:25.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"remove obsolete gitignore rules\n\nSince commit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d, all generated\nheaders are generated under the obj directory, which is already ignored.\n"},{"hash":"7c82870d4543f0eeb0e3a2638b083ff97b41a0fb","date":"2016-07-07T01:15:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove obsolete and unused gethostbyaddr implementation\n\nthis code was already under #if 0, but could be confusing if a reader\ndidn't notice that, and it's almost surely full of bugs and/or\ninconsistencies with the current code that uses the gethostbyname2_r\nbackend.\n"},{"hash":"6399fa9d29ea83de4735680b77d457bd59606532","date":"2016-07-07T20:51:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix asctime day/month names not to vary by locale\n\nthe FIXME comment here was overlooked at the time locale support was\nadded.\n"},{"hash":"cff5747c74c41b22f1ce1340978b1c226a8cdf32","date":"2016-07-13T19:04:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in tcsetattr on all mips archs\n\nrevert commit 8c316e9e49d37ad92c2e7493e16166a2afca419f. it was wrong\nand does not match how the kernel API works.\n"},{"hash":"39494a273eaa6b714e0fa0c59ce7a1f5fbc80a1e","date":"2016-07-13T19:23:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"revert unrelated change that slipped into last commit\n"},{"hash":"7cc3a28eed7e3b72a1ce4568fb55154bb0540726","date":"2016-08-11T22:36:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pread/pwrite syscall calling convention on sh\n\ndespite sh not generally using register-pair alignment for 64-bit\nsyscall arguments, there are arch-specific versions of the syscall\nentry points for pread and pwrite which include a dummy argument for\nalignment before the 64-bit offset argument.\n"},{"hash":"0f8ad40be0586907f12a72be1985df68e411b093","date":"2016-08-30T19:58:20.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add PF_QIPCRTR, AF_QIPCRTR from linux v4.7 to sys/socket.h\n\nmacros for qualcom ip router protocol, new in linux commit\nbdabad3e363d825ddf9679dd431cca0b2c30f881\n"},{"hash":"c6519d4a71a7579fec4b8a72635c2cf3732f8d5d","date":"2016-08-30T19:58:23.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add UDP_ENCAP_GTP0, UDP_ENCAP_GTP1U from linux v4.7 to netinet/udp.h\n\nfor GPRS tunneling protocol, new in linux commit\n459aa660eb1d8ce67080da1983bb81d716aa5a69\n"},{"hash":"9680e1d03a794b0e0d5815c749478228ed40a36d","date":"2016-08-30T19:58:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SS_AUTODISARM sigaltstack ss_flags from linux v4.7 to signal.h\n\nonly matters if swapcontext is used in a signal handler running on an\naltstack, new in linux commit 2a74213838104a41588d86fd5e8d344972891ace\n"},{"hash":"2b41959b59e3dfd70cb4b592ffb2d97b47584aaa","date":"2016-08-30T19:58:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"microblaze: add syscall numbers from linux v4.7\n\nuserfaultfd, membarrier and mlock2 syscalls got wired up in linux\ncommit fbce3befd60d40639bf3c6b60f7477b2f988f92d\n"},{"hash":"0a950dcf15bb9f7274c804dca490e9e20e475f3e","date":"2016-08-30T19:59:50.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"verify that ttyname refers to the same file as the fd\n\nlinux containers use separate mount namespace so the /proc\nsymlink might not point to the right device if the fd was\nopened in the parent namespace, in this case return ENOENT.\n"},{"hash":"5b5db97f7e80bde2678aed72336a28375e800354","date":"2016-08-30T20:00:38.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix 128bit long double inverse trigonometric functions\n\nthere was a copy paste error that could cause large ulp errors\nin atan2l, atanl, asinl and acosl on aarch64, mips64 and mipsn32.\n\n(the implementation is from freebsd fdlibm, but the tail end\nof the polynomial was wrong. 128 bit long double functions\nare not yet tested so this went undetected.)\n"},{"hash":"fff880185bb3624acfbd2c6a75a1655bcd782c51","date":"2016-08-30T20:00:47.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"configure: handle mipsisa64* triplet as a mips64 target\n\nthe gnu config.sub script recognizes several mipsisa64* cpu types\nthat musl supports as mips64 targets.\n"},{"hash":"c1f4ed150137d793c9d07356305a89e8785e7e02","date":"2016-08-30T20:01:47.000Z","author":{"name":"Duncan Overbruck","email":"duncaen@voidlinux.eu"},"message":"fix FFSYNC by changing it to O_SYNC\n\nO_FSYNC was never defined and is legacy/wrong, nothing seems to use it.\n"},{"hash":"397586625e71d166f493f16bfe04f3005ae464c3","date":"2016-08-30T20:15:22.000Z","author":{"name":"Olivier Brunel","email":"jjk@jjacky.com"},"message":"getdtablesize: fix returning hard instead of soft rlimit\n\nThis makes the result consistent with sysconf(_SC_OPEN_MAX).\n"},{"hash":"e738b8cbe64b6dd3ed9f47b6d4cd7eb2c422b38d","date":"2016-08-30T20:39:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"restore _Noreturn to __assert_fail\n\nthis reverts commit 2c1f8fd5da3306fd7c8a2267467e44eb61f12dd4. without\nthe _Noreturn attribute, the compiler cannot use asserts to perform\nreachability/range analysis. this leads to missed optimizations and\nspurious warnings.\n\nthe original backtrace problem that prompted the removal of _Noreturn\nwas not clearly documented at the time, but it seems to happen only\nwhen libc was built without -g, which also breaks many other\nbacktracing cases.\n"},{"hash":"78897b0dc00b7cd5c29af5e0b7eebf2396d8dce0","date":"2016-09-16T21:40:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix printf regression with alt-form octal, zero flag, and field width\n\ncommit b91cdbe2bc8b626aa04dc6e3e84345accf34e4b1, in fixing another\nissue, changed the logic for how alt-form octal adds the leading zero\nto adjust the precision rather than using a prefix character. this\nwrongly suppressed the zero flag by mimicing an explicit precision\ngiven by the format string. switch back to using a prefix character.\n\nbased on bug report and patch by Dmitry V. Levin, but simplified.\n"},{"hash":"3848a99f65952a77c03bbd905cae988f37f13ea6","date":"2016-09-16T21:59:54.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"fix ifru_data and ifcu_buf types in net/if.h\n\nglibc, freebsd, and openbsd use character pointers (caddr_t) for\nthese fields. only linux uses void pointer for the ifru_data type.\n"},{"hash":"32055d52ca43d867d6dbb763dc5213a8d3536a23","date":"2016-09-16T22:03:06.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"fix if_indextoname error case\n\nposix requires errno to be set to ENXIO if the interface does not exist.\nlinux returns ENODEV instead so we handle this.\n"},{"hash":"5505f6afae9acf37ef565c68a07ca3df7b1ae2cb","date":"2016-09-16T22:18:34.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"add missing *_unlocked and wcsftime_l prototypes to wchar.h\n\nthese functions had been implemented, but prototypes were not made available\n"},{"hash":"c002668eb0352e619ea7064e4940b397b4a6e68d","date":"2016-09-19T01:45:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify/refactor fflush and make fflush_unlocked an alias for fflush\n\npreviously, fflush_unlocked was an alias for an internal backend that\nwas called by fflush, either for its argument or in a loop for each\nfile if a null pointer was passed. since the logic for the latter was\nin the main fflush function, fflush_unlocked crashed when passed a\nnull pointer, rather than flushing all open files. since\nfflush_unlocked is not a standard function and has no specification,\nit's not clear whether it should be expected to accept null pointers\nlike fflush does, but a reasonable argument could be made that it\nshould.\n\nthis patch eliminates the helper function, simplifying fflush, and\nmakes fflush_unlocked an alias for fflush, which is valid because the\ntwo functions agree in their behavior in all cases where their\nbehavior is defined (the unlocked version has undefined behavior if\nanother thread could hold locks).\n"},{"hash":"66570ec9c465e3c6c5d6dbd7dd42e45041a39288","date":"2016-09-19T15:15:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined behavior in sched.h cpu_set_t usage\n\nsince cpu sets can be dynamically allocated and have variable size,\naccessing their contents via ->__bits is not valid; performing pointer\narithmetic outside the range of the size of the declared __bits array\nresults in undefined beahavior. instead, only use cpu_set_t for\nfixed-size cpu set objects (instantiated by the caller) and as an\nabstract pointer type for dynamically allocated ones. perform all\naccesses simply by casting the abstract pointer type cpuset_t * back\nto unsigned long *.\n"},{"hash":"d917ef0b8468f77634df59a1a6650aff5adb6b6a","date":"2016-09-24T05:09:31.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"remove dead case in gethostbyname2_r\n\nthis case statement was accidently left behind when this function\nwas refactored in commit e8f39ca4898237cf71657500f0b11534c47a0521.\n"},{"hash":"8d7a3f40c8de414122eb8eb2131291782ee8ed15","date":"2016-09-24T05:10:23.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"fix getservby*_r result pointer value on error\n\nthis is a clone of the fix to the gethostby*_r functions in\ncommit fe82bb9b921be34370e6b71a1c6f062c20999ae0. the man pages\ndocument that the getservby*_r functions set this pointer to\nNULL if there was an error or if no record was found.\n"},{"hash":"583ea83541dcc6481c7a1bd1a9b485526bad84a1","date":"2016-10-06T22:41:45.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix strftime %y for negative tm_year\n"},{"hash":"c3edc06d1e1360f3570db9155d6b318ae0d0f0f7","date":"2016-10-06T22:47:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix missing integer overflow checks in regexec buffer size computations\n\nmost of the possible overflows were already ruled out in practice by\nregcomp having already succeeded performing larger allocations.\nhowever at least the num_states*num_tags multiplication can clearly\noverflow in practice. for safety, check them all, and use the proper\ntype, size_t, rather than int.\n\nalso improve comments, use calloc in place of malloc+memset, and\nremove bogus casts.\n"},{"hash":"aee6abb2400b9a955c2b41166db1c22f63ad42ef","date":"2016-10-06T22:47:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regexec with haystack strings longer than INT_MAX\n\nwe inherited from TRE regexec code that's utterly wrong with respect\nto the integer types it's using. while it doesn't appear that\ncompilers are producing unsafe output, signed integer overflows seem\nto happen, and regexec fails to find matches past offset INT_MAX.\n\nthis patch fixes the type of all variables/fields used to store\noffsets in the string from int to regoff_t. after the changes, basic\ntesting showed that regexec can now find matches past 2GB (INT_MAX)\nand past 4GB on x86_64, and code generation is unchanged on i386.\n"},{"hash":"70d2687d85c314963cf280759b23fd4573ff0d82","date":"2016-10-20T00:17:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix integer overflow in float printf needed-precision computation\n\nif the requested precision is close to INT_MAX, adding\nLDBL_MANT_DIG/3+8 overflows. in practice the resulting undefined\nbehavior manifests as a large negative result, which is then used to\ncompute the new end pointer (z) with a wildly out-of-bounds value\n(more overflow, more undefined behavior). the end result is at least\nincorrect output and character count (return value); worse things do\nnot seem to happen, but detailed analysis has not been done.\n\nthis patch fixes the overflow by performing the intermediate\ncomputation as unsigned; after division by 9, the final result\nnecessarily fits in int.\n"},{"hash":"167dfe9672c116b315e72e57a55c7769f180dffa","date":"2016-10-20T04:22:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix integer overflows and uncaught EOVERFLOW in printf core\n\nthis patch fixes a large number of missed internal signed-overflow\nchecks and errors in determining when the return value (output length)\nwould exceed INT_MAX, which should result in EOVERFLOW. some of the\nissues fixed were reported by Alexander Cherepanov; others were found\nin subsequent review of the code.\n\naside from the signed overflows being undefined behavior, the\nfollowing specific bugs were found to exist in practice:\n\n- overflows computing length of floating point formats with huge\n  explicit precisions, integer formats with prefix characters and huge\n  explicit precisions, or string arguments or format strings longer\n  than INT_MAX, resulted in wrong return value and wrong %n results.\n\n- literal width and precision values outside the range of int were\n  misinterpreted, yielding wrong behavior in at least one well-defined\n  case: string formats with precision greater than INT_MAX were\n  sometimes truncated.\n\n- in cases where EOVERFLOW is produced, incorrect values could be\n  written for %n specifiers past the point of exceeding INT_MAX.\n\nin addition to fixing these bugs, we now stop producing output\nimmediately when output length would exceed INT_MAX, rather than\ncontinuing and returning an error only at the end.\n"},{"hash":"05973dc3bbc1aca9b3c8347de6879ed72147ab3b","date":"2016-10-20T05:20:27.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"use dynamic buffer for getmntent\n\noverlayfs may have fairly long lines so we use getline to allocate a\nbuffer dynamically. The buffer will be allocated on first use, expand as\nneeded, but will never be free'ed.\n\nDownstream bug: http://bugs.alpinelinux.org/issues/5703\n\nSigned-off-by: Natanael Copa <ncopa@alpinelinux.org>\n"},{"hash":"2ed811a38a92e3710e0eba98b85ccd880ceb703d","date":"2016-10-20T05:27:07.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix preadv2 and pwritev2 syscall numbers on x32 for linux v4.8\n\nthe numbers were wrong in musl, but they were also wrong in the kernel\nand got fixed in v4.8 commit 3ebfd81f7fb3e81a754e37283b7f38c62244641a\n"},{"hash":"189acc705ef8d9a0ae06152898fbb16fd6a2491a","date":"2016-10-20T05:27:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add sh syscall numbers from linux v4.8\n\nsh was updated in linux commit 74bdaa611fa69368fb4032ad437af073d31116bd\nto have numbers for new syscalls.\n"},{"hash":"9487cc5f2253b2fc82a3e19f3aaa0ade2a630de5","date":"2016-10-20T05:27:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add ETH_P_NCSI to netinet/if_ether.h from linux v4.8\n\nsee linux commit 6389eaa7fa9c3ee6c7d39f6087b86660d17236ac\n"},{"hash":"5a05f67599ff06f9255aa4119cfecb85575d6e20","date":"2016-10-20T05:27:46.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"elf.h: update EM_ elf machine defines and add R_BPF_ defines\n\nsync with gabi: http://www.sco.com/developers/gabi/latest/ch4.eheader.html\n\nEM_BPF is new in linux v4.8 and officially assigned:\nhttps://lists.iovisor.org/pipermail/iovisor-dev/2016-June/000266.html\nadded related relocs too.\n"},{"hash":"fe39aaae0eafdab3340ea9a4c4b275c3528b4d75","date":"2016-10-20T05:28:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add bits/hwcap.h and include it in sys/auxv.h\n\naarch64, arm, mips, mips64, mipsn32, powerpc, powerpc64 and sh have\ncpu feature bits defined in linux for AT_HWCAP auxv entry, so expose\nthose in sys/auxv.h\n\nit seems the mips hwcaps were never exposed to userspace neither\nby linux nor by glibc, but that's most likely an oversight.\n"},{"hash":"cc7c95e98e4822f165835aa956adad33d3c1fbd0","date":"2016-10-20T05:28:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add TCP_REPAIR_WINDOW to netinet/tcp.h from linux v4.8\n\nanother kernel internal state exposure for checkpoint-restore.\nsee linux commit b1ed4c4fa9a5ccf325184fd90edc50978ef6e33a\n"},{"hash":"87643335ac699b14527bbf807956cf8911b86bfa","date":"2016-10-20T05:29:06.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update icmphdr struct following linux v4.8\n\nadd union field that is used in the kernel for SIT/GRE tunneling ICMPv4\nmessages. see linux commit 20e1954fe238dbe5f8d3a979e593fe352bd703cf\n"},{"hash":"688d3da0f1730daddbc954bbc2d27cc96ceee04c","date":"2016-10-20T05:32:27.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: fix pow signed shift ub\n\nj is int32_t and thus j<<31 is undefined if j==1, so j is changed to\nuint32_t locally as a quick fix, the generated code is not affected.\n\n(this is a strict conformance fix, future c standard may allow 1<<31,\nsee DR 463.  the bug was inherited from freebsd fdlibm, the proper fix\nis to use uint32_t for all bit hacks, but that requires more intrusive\nchanges.)\n\nreported by Daniel Sabogal\n"},{"hash":"3ca2d2d4aef910663785fe232d7d2127a22d8a84","date":"2016-10-20T05:36:08.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"fix clock_nanosleep error case\n\nposix requires that EINVAL be returned if the first parameter specifies\nthe cpu-time clock of the calling thread (CLOCK_THREAD_CPUTIME_ID).\nlinux returns ENOTSUP instead so we handle this.\n"},{"hash":"8fb28b0b3e7a5e958fb844722a4b2ef9bc244af1","date":"2016-10-20T05:48:27.000Z","author":{"name":"Felix Janda","email":"felix.janda@posteo.de"},"message":"add pthread_setname_np\n\nthe thread name is displayed by gdb's \"info threads\".\n"},{"hash":"51ab6db4ed115d079d7131975e4adb074ba9ef9d","date":"2016-10-20T05:54:15.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix float formatting of some exact halfway cases\n\nin nearest rounding mode exact halfway cases were not following the\nround to even rule if the rounding happened at a base 1000000000 digit\nboundary of the internal representation and the previous digit was odd.\n\ne.g. printf(\"%.0f\", 1.5) printed 1 instead of 2.\n"},{"hash":"b24f1d2520c87077cef21e085893e5f3c565a6df","date":"2016-10-20T16:13:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getopt_long_only misinterpreting \"--\" as an option\n"},{"hash":"f33b17585058381491e6fda08f491b8e48c7980c","date":"2016-10-20T17:22:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix gratuitous undefined behavior in strptime\n\naccessing an object of type const char *restrict as if it had type\nchar * is not defined.\n"},{"hash":"d184a09e0529f33d8ddddb8825039133483a2c41","date":"2016-10-20T17:29:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix strtod and strtof rounding with many trailing zeros\n\nin certain cases excessive trailing zeros could cause incorrect\nrounding from long double to double or float in decfloat.\n\ne.g. in strtof(\"9444733528689243848704.000000\", 0) the argument\nis 0x1.000001p+73, exactly halfway between two representible floats,\nthis incorrectly got rounded to 0x1.000002p+73 instead of 0x1p+73,\nbut with less trailing 0 the rounding was fine.\n\nthe fix makes sure that the z index always points one past the last\nnon-zero digit in the base 10^9 representation, this way trailing\nzeros don't affect the rounding logic.\n"},{"hash":"6ffdc4579ffb34f4aab69ab4c081badabc7c0a9a","date":"2016-10-20T17:29:34.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix strtod int optimization in non-nearest rounding mode\n\nthe mid-sized integer optimization relies on lnz set up properly\nto mark the last non-zero decimal digit, but this was not done\nif the non-zero digit lied outside the KMAX digits of the base\n10^9 number representation.\n\nso if the fractional part was a very long list of zeros (>2048*9 on\nx86) followed by non-zero digits then the integer optimization could\nkick in discarding the tiny non-zero fraction which can mean wrong\nresult on non-nearest rounding mode.\n\nstrtof, strtod and strtold were all affected.\n"},{"hash":"e314258e2fe75b7443db84d2927315dea0f337c8","date":"2016-10-20T18:40:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix minor problem in previous strtod non-nearest rounding bug fix\n\ncommit 6ffdc4579ffb34f4aab69ab4c081badabc7c0a9a set lnz in the code\npath for non-zero digits after a huge string of zeros, but the\nassignment of dc to lnz truncates if the value of dc does not fit in\nint; this is possible for some pathologically long inputs, either via\nstrings on 64-bit systems or via scanf-family functions.\n\ninstead, simply set lnz to match the point at which we add the\nartificial trailing 1 bit to simulate nonzero digits after a huge\nrun of zeros.\n"},{"hash":"104e8a0e3b30f6dda6ce9c1b901a6bb8ee046616","date":"2016-10-20T20:55:05.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"add missing confstr constants\n\nthe _CS_V6_ENV and _CS_V7_ENV constants are required to be available for use\nwith confstr. glibc defines these constants with values 1148 and 1149,\nrespectively.\n\nthe only missing (and required) confstr constants are\n_CS_POSIX_V7_THREADS_CFLAGS and _CS_POSIX_V7_THREADS_LDFLAGS which remain\nunavailable in glibc.\n"},{"hash":"1fa2a32d1e2d25f493058812008face73d411b2b","date":"2016-10-20T20:55:32.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"fix typo in utmpx.h\n"},{"hash":"79c7ded0edaa0b3ab3fc95bf3b76a9e67683454a","date":"2016-10-20T20:55:51.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"add missing if_arp.h constant\n\nARPHRD_6LOWPAN (IPv6 over LoWPAN) added in\nlinux 3.14 commit 0abc652c796dab74d34d60473ec5594cd21620be\n"},{"hash":"71e83927654d1df0afa0d8f4f69391659321ddb0","date":"2016-10-20T20:55:57.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"add missing if_ether.h constants\n\nETH_P_HSR (IEC 62439-3 HSRv1) added in\nlinux 4.7 commit ee1c27977284907d40f7f72c2d078d709f15811f\n\nETH_P_TSN (IEEE 1722) added in\nlinux 4.3 commit 1ab1e895492d8084dfc1c854efacde219e56b8c1\nthis constant breaks the ascending order to match the kernel header\n\nETH_P_XDSA (Multiplexed DSA protocol) added in\nlinux 3.18 commit 3e8a72d1dae374cf6fc1dba97cec663585845ff9\n"},{"hash":"4b8f94c2501e6fea3db631b73b0c91e34e2134cf","date":"2016-10-20T21:01:56.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix misspelling of a legacy macro name in sys/param.h\n"},{"hash":"2ed4e9d9279117ffa50294095e172804cd1b68e5","date":"2016-10-20T21:04:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove parameter names from public headers\n\ninclusion of these names was unintentional and in most cases is a\nnamespace violation. Daniel Sabogal tracked down and reported these.\n"},{"hash":"7597fc25a2743d49500926a286da71f8e033936c","date":"2016-10-20T21:20:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix various header namespace issues under feature-test-macro control\n\nreported and changes suggested by Daniel Sabogal.\n"},{"hash":"ed8696742504b6182954254e78ec123c8bcd8d3b","date":"2016-10-22T02:15:31.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"redesign snprintf without undefined behavior\n\nthe old snprintf design setup the FILE buffer pointers to point\ndirectly into the destination buffer; if n was actually larger than\nthe buffer size, the pointer arithmetic to compute the buffer end\npointer was undefined. this affected sprintf, which is implemented in\nterms of snprintf, as well as some unusual but valid direct uses of\nsnprintf.\n\ninstead, setup the FILE as unbuffered and have its write function\nmemcpy to the destination. the printf core sets up its own temporary\nbuffer for unbuffered streams.\n"},{"hash":"7352b59d68aa6d931f9f882b2e0f9de6314d733f","date":"2016-11-07T16:49:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove redundant feature test macro checks in sys/time.h\n\nthis header is XSI-shaded itself and thus does not need to limit\nspecific content to _XOPEN_SOURCE.\n"},{"hash":"8ca27ac4bfe73bff785d0c26c1de0da92b55e5c6","date":"2016-11-07T16:54:09.000Z","author":{"name":"Hannu Nyman","email":"hannu.nyman@iki.fi"},"message":"fix parsing of quoted time zone names\n\nFix parsing of the < > quoted time zone names. Compare the correct\ncharacter instead of repeatedly comparing the first character.\n"},{"hash":"c8fdcfe550997243daba0814a95f42890dc60e45","date":"2016-11-07T16:55:53.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't claim support for resolv.h APIs that aren't supported\n\nthe value 19991006 for __RES implies availability of res_ninit and\nrelated functions that take a resolver state argument; these are not\nsupported since our resolver is stateless. instead claim support for\njust the older API by defining __RES to 19960801.\n\nbased on patch by Dmitrij D. Czarkoff.\n"},{"hash":"86e8cc0fd46f5789e80a16d68ae86f7358f64705","date":"2016-11-07T16:59:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix accidental global static pointer in ldso\n\nthis was harmless as load_library is not called concurrently,\nbut it used one word of bss.\n"},{"hash":"5ffe515ca485c8e6e57cd5acda6bc6008f85660c","date":"2016-11-07T17:00:32.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix ldso reserved library name handling\n\nIf a DT_NEEDED entry was the prefix of a reserved library name\n(up to the first dot) then it was incorrectly treated as a libc\nreserved name.\n\ne.g. libp.so dependency was not loaded as it matched libpthread\nreserved name.\n"},{"hash":"bc1e7731cee963e422575f81048792f4d5db9641","date":"2016-11-07T18:00:54.000Z","author":{"name":"Daniel Sabogal","email":"dsabogal@ufl.edu"},"message":"fix integer overflow of tm_year in __secs_to_tm\n\nthe overflow check for years+100 did not account for the extra\nyear computed from the remaining months. instead, perform this\ncheck after obtaining the final number of years.\n"},{"hash":"7442442ccc665641a8827177e8e7ed45bbbd6584","date":"2016-11-08T01:39:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix swprintf internal buffer state and error handling\n\nthe swprintf write callback never reset its buffer pointers, so after\nits 256-byte buffer filled up, it would keep repeating those bytes\nover and over in the output until the destination buffer filled up. it\nalso failed to set the error indicator for the stream on EILSEQ,\npotentially allowing output to continue after the error.\n"},{"hash":"33ce920857405d4f4b342c85b74588a15e2702e5","date":"2016-11-08T01:47:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify pthread_attr_t stack/guard size representation\n\npreviously, the pthread_attr_t object was always initialized all-zero,\nand stack/guard size were represented as differences versus their\ndefaults. this required lots of confusing offset arithmetic everywhere\nthey were used. instead, have pthread_attr_init fill in the default\nvalues, and work with absolute sizes everywhere.\n"},{"hash":"04983f2272382af92eb8f8838964ff944fbb8258","date":"2016-11-08T04:19:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make netinet/in.h suppress clashing definitions from kernel headers\n\nthe linux kernel uapi headers provide their own definitions of the\nstructures from netinet/in.h, resulting in errors when a program\nincludes both the standard libc header and one or more of the\nnetworking-related kernel headers that pull in the kernel definitions.\n\nas before, we do not attempt to support the case where kernel headers\nare included before the libc ones, since the kernel definitions may\nhave subtly incorrect types, namespace violations, etc. however, we\ncan easily support the inclusion of the kernel headers after the libc\nones, since the kernel headers provide a public interface for\nsuppressing their definitions. this patch adds the necessary macro\ndefinitions for such suppression.\n"},{"hash":"ea7891a651dc4abc1305438470f1e4cc3b64ece2","date":"2016-11-08T16:51:57.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix pthread_create regression from stack/guard size simplification\n\ncommit 33ce920857405d4f4b342c85b74588a15e2702e5 broke pthread_create\nin the case where a null attribute pointer is passed; rather than\nusing the default sizes, sizes of 0 (plus the remainder of one page\nafter TLS/TCB use) were used.\n"},{"hash":"31fb174dd295e50f7c5cf18d31fcfd5fe5a063b7","date":"2016-11-08T17:45:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add limited pthread_setattr_default_np API to set stack size defaults\n\nbased on patch by Timo Teräs:\n\nWhile generally this is a bad API, it is the only existing API to\naffect c++ (std::thread) and c11 (thrd_create) thread stack size.\nThis patch allows applications only to increate stack and guard\npage sizes.\n"},{"hash":"4078a5c31fa67987051c2180db7a07702534032f","date":"2016-11-08T23:03:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression on archs with variable page size\n\ncommit 31fb174dd295e50f7c5cf18d31fcfd5fe5a063b7 used\nDEFAULT_GUARD_SIZE from pthread_impl.h in a static initializer,\nbreaking build on archs where its definition, PAGE_SIZE, is not a\nconstant. instead, just define DEFAULT_GUARD_SIZE as 4096, the minimal\npage size on any arch we support. pthread_create rounds up to whole\npages anyway, so defining it to 1 would also work, but a moderately\nmeaningful value is nicer to programs that use\npthread_attr_getguardsize on default-initialized attribute objects.\n"},{"hash":"b418ea1b66d0d5a08640d4edf3b65d4619c6ef7f","date":"2016-11-11T17:46:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"generalize ELF hash table types not to assume 32-bit entries\n\nalpha and s390x gratuitously use 64-bit entries (wasting 2x space and\ncache utilization) despite the values always being 32-bit.\n\nbased on patch by Bobby Bingham, with changes suggested by Alexander\nMonakov to use the public Elf_Symndx type from link.h (and make it\nproperly variable by arch) rather than adding new internal\ninfrastructure for handling the type.\n"},{"hash":"54482898abe8d6d937ee67ea5974cd8eae859c37","date":"2016-11-11T17:58:27.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"treat null vdso base same as missing\n\nOn s390x, the kernel provides AT_SYSINFO_EHDR, but sets it to zero, if the\nprogram being run does not have a program interpreter.  This causes\nproblems when running the dynamic linker directly.\n"},{"hash":"15094943050eb9a564f409323070e50b40f78816","date":"2016-11-12T04:06:21.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"add s390x port\n"},{"hash":"54991729fd1e3d3a0cb71884d758d86afe6da9e0","date":"2016-11-13T00:54:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around gdb issues recognizing sigreturn trampoline on x86_64\n\ngdb can only backtrace/unwind across signal handlers if it recognizes\nthe sa_restorer trampoline. for x86_64, gdb first attempts to\ndetermine the symbol name for the function in which the program\ncounter resides and match it against \"__restore_rt\". if no name can be\nfound (e.g. in the case of a stripped binary), the exact instruction\nsequence is matched instead.\n\nwhen matching the function name, however, gdb's unwind code wrongly\nconsiders the interval [sym,sym+size] rather than [sym,sym+size).\nthus, if __restore_rt begins immediately after another function, gdb\nwrongly identifies pc as lying within the previous adjacent function.\nthis patch adds a nop before __restore_rt to preclude that\npossibility. it also removes the symbol name __restore and replaces it\nwith a macro since the stability of whether gdb identifies the\nfunction as __restore_rt or __restore is not clear.\n\nfor the no-symbols case, the instruction sequence is changed to use\n%rax rather than %eax to match what gdb expects.\n\nbased on patch by Szabolcs Nagy, with extended description and\ncorresponding x32 changes added.\n"},{"hash":"6f1866768a86239672ed811777dfe89994d64a65","date":"2016-12-07T03:57:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove largish unused field from pthread structure\n"},{"hash":"ffaaa6d230512f3a7f3d040b943517728f3dc3cf","date":"2016-12-15T17:18:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove legacy i386 fallback stdarg implementation and framework\n\nthis has been slated for removal for a long time. there is\nfundamentally no way to implement stdarg without compiler assistance;\nany attempt to do so has serious undefined behavior; its working\ndepends not just (as a common misconception goes) on ABI, but also on\nassumptions about compiler code generation internal to a translation\nunit, which is not subject to external ABI constraints.\n"},{"hash":"afefce19fd7d1dd6aa8789f598a60b1d974f45fb","date":"2016-12-17T03:34:36.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"fix typo in s390x user.h\n"},{"hash":"3f79eaa870a87c7f7d19c0e340791fac80a16d06","date":"2016-12-17T03:36:22.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"fix use of incomplete struct type in s390x user.h\n"},{"hash":"c1020cf21e7c09cf313c98b69d5c5af8f3895502","date":"2016-12-17T03:39:19.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"fix crashing sigsetjmp on s390x\n\nthe bz instruction that was wrongly used only admits a small immediate\ndisplacement and cannot be used with external symbols; apparently the\nlinker fails to diagnose the overflow.\n"},{"hash":"bfcf5735d08b4e57e0865006392822f8b526771a","date":"2016-12-17T04:12:32.000Z","author":{"name":"Quentin Rameau","email":"quinq@fifth.space"},"message":"in public headers, don't assume pre-C99 compilers have __inline keyword\n"},{"hash":"adfe682eb0d77c6afc751f5e407d9da39623c24e","date":"2016-12-17T04:23:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mrand48/jrand48 return value on 64-bit archs\n\nPOSIX specifies the result to have signed 32-bit range. on 32-bit\narchs, the implicit conversion to long achieved the desired range\nalready, but when long is 64-bit, a cast is needed.\n\npatch by Ed Schouten.\n"},{"hash":"7a4c25d78030b3a43ed5c8dd1a456f73cb990f44","date":"2016-12-17T04:26:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"handle ^ and $ in BRE subexpression start and end as anchors\n\nIn BRE, ^ is an anchor at the beginning of an expression, optionally\nit may be an anchor at the beginning of a subexpression and must be\ntreated as a literal otherwise.\n\nPreviously musl treated ^ in subexpressions as literal, but at least\nglibc and gnu sed treats it as an anchor and that's the more useful\nbehaviour: it can always be escaped to get back the literal meaning.\n\nSame for $ at the end of a subexpression.\n\nPortable BRE should not rely on this, but there are sed commands in\nbuild scripts which do.\n\nThis changes the meaning of the BREs:\n\n\t\\(^a\\)\n\t\\(a\\|^b\\)\n\t\\(a$\\)\n\t\\(a$\\|b\\)\n"},{"hash":"61ff1af76f4887bb7c555e4d0b8a7eeb73b05086","date":"2016-12-17T23:16:43.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"use lookup table for malloc bin index instead of float conversion\n\nfloat conversion is slow and big on soft-float targets.\n\nThe lookup table increases code size a bit on most hard float targets\n(and adds 60byte rodata), performance can be a bit slower because of\nposition independent data access and cpu internal state dependence\n(cache, extra branches), but the overall effect should be minimal\n(common, small size allocations should be unaffected).\n"},{"hash":"fbbeda172d6f146067f9f57ab1498cf99c8d1007","date":"2016-12-18T00:30:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make arm setjmp/longjmp asm thumb2-compatible\n\nsp cannot be used in the ldm/stm register set in thumb mode.\n"},{"hash":"9067a3006ea2f84395ab23a1dd30191387312e0c","date":"2016-12-18T00:39:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable use of arm memcpy asm if building as thumb code\n\nthe thumb incompatibilities in the asm are probably only minor and\nshould be fixable, but for now just use the C version.\n"},{"hash":"29237f7f5c09c436825a7a12b68ab4143b0ebd1f","date":"2016-12-20T02:21:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rework arm atomic/tp backends to be thumb-compatible and fdpic-ready\n\nthree problems are addressed:\n\n- use of pc arithmetic, which was difficult if not impossible to make\n  correct in thumb mode on all models, so that relative rather than\n  absolute pointers to the backends could be used. this was designed\n  back when there was no coherent model for the early stages of the\n  dynamic linker before relocations, and is no longer necessary.\n\n- assumption that data (the relative pointers to the backends) can be\n  accessed at a constant displacement from the code. this will not be\n  possible on future fdpic subarchs (for cortex-m), so move\n  responsibility for loading the backend code address to the caller.\n\n- hard-coded arm opcodes using the .word directive. instead, use the\n  .arch directive to work around the assembler's refusal to assemble\n  instructions not available (or in some cases, available but just\n  considered deprecated) in the target isa level. the obscure v6t2\n  arch is used for v6 code so as to (1) allow generation of thumb2\n  output if -mthumb is active, and (2) avoid warnings/errors for mcr\n  barriers that clang would produce if we just set arch to v7-a.\n\nin addition, the __aeabi_read_tp function is moved out of the inner\nworkings and implemented as an asm wrapper around a C function, so\nthat asm code does not need to read global data. the asm wrapper\nserves to satisfy the ABI calling convention requirements for this\nfunction.\n"},{"hash":"088c9674a9c81cf20e9a863df571ba6d48e9ae37","date":"2016-12-20T02:53:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"when building for arm as thumb2 code, also request assembly as thumb\n\nall assembly is now thumb2-compatible. on existing targets this is at\nbest a size optimization, but it will also facilitate porting to\nthumb2-isa-only arm variants.\n"},{"hash":"5bf7eba213cacc4c1220627c91c28deff2ffecda","date":"2016-12-20T19:19:32.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix support for initialized TLS in static PIE binaries\n\nthe static-linked version of __init_tls needs to locate the TLS\ninitialization image via the ELF program headers, which requires\ndetermining the base address at which the program was loaded. the\nexisting code attempted to do this by comparing the actual address of\nthe program headers (obtained via auxv) with the virtual address for\nthe PT_PHDR record in the program headers. however, the linker seems\nto produce a PT_PHDR record only when a program interpreter (dynamic\nlinker) is used. thus the computation failed and used the default base\naddress of 0, leading to a crash when trying to access the TLS image\nat the wrong address.\n\nthe dynamic linker entry point and static-PIE rcrt1.o startup code\ncompute the base address instead by taking the difference between the\nrun-time address of _DYNAMIC and the virtual address in the PT_DYNAMIC\nrecord. this patch copies the approach they use, but with a weak\nsymbolic reference to _DYNAMIC instead of obtaining the address from\nthe crt_arch.h asm. this works because relocations have already been\nperformed at the time __init_tls is called.\n"},{"hash":"62eaf40bf4247751f630faa3c853eacf81874c94","date":"2016-12-30T03:10:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add pkey_{mprotect,alloc,free} syscalls from linux v4.9\n\nsee linux commit e8c24d3a23a469f1f40d4de24d872ca7023ced0a\nand linux Documentation/x86/protection-keys.txt\n"},{"hash":"a8a8fdff968c19a05331b032cf395b5cf0dbbd84","date":"2016-12-30T03:10:44.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add MS_NOREMOTELOCK mount flag from linux v4.9\n\nfor handling file locking on overlayfs.\nsee linux commit c568d68341be7030f5647def68851e469b21ca11\n"},{"hash":"60c46db80b0b5def37bd306cf526da0b491a1454","date":"2016-12-30T03:11:01.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update tcp_info struct to linux v4.9\n\nexport tcp data delivery rate in tcp_info struct.\nsee linux commit eb8329e0a04db0061f714f033b4454326ba147f4\n"},{"hash":"8fe1f2d79b275b7f7fb0d41c99e379357df63cd9","date":"2017-01-01T03:27:17.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.16\n"},{"hash":"61fb81e3959ecf0848eef8d2767bb80ae5d1a68e","date":"2017-01-02T22:30:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix strftime %y for negative years\n\ncommit 583ea83541dcc6481c7a1bd1a9b485526bad84a1 fixed the case where\ntm_year is negative but the resulting year (offset by 1900) was still\npositive, which is always the case for time_t values that fit in 32\nbits, but not for arbitrary inputs.\n\nbased on an earlier patch by Julien Ramseier which was overlooked at\nthe time the previous fix was applied.\n"},{"hash":"769f53598e781ffc89191520f3f8a93cb58db91f","date":"2017-01-03T00:47:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make globfree safe after failed glob from over-length argument\n\ncommit 0dc99ac413d8bc054a2e95578475c7122455eee8 added input length\nchecking to avoid unsafe VLA allocation, but put it in the wrong\nplace, before the glob_t structure was zeroed out. while POSIX isn't\nclear on whether it's permitted to call globfree after glob failed\nwith GLOB_NOSPACE, making it safe is clearly better than letting\nuninitialized pointers get passed to free in non-conforming callers.\n\nwhile we're fixing this, change strlen check to the idiomatic strnlen\nversion to avoid unbounded input scanning before returning an error.\n"},{"hash":"150747b41e1ecefe82aa45d68c84b9e957b03e29","date":"2017-01-04T22:08:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reduce impact of REG_* namespace pollution in x86[_64] signal.h\n\nwhen _GNU_SOURCE is defined, which is always the case when compiling\nc++ with gcc, these macros for the the indices in gregset_t are\nexposed and likely to clash with applications. by using enum constants\nrather than macros defined with integer literals, we can make the\nclash slightly less likely to break software. the macros are still\ndefined in case anything checks for them with #ifdef, but they're\ndefined to expand to themselves so that non-file-scope (e.g.\nnamespaced) identifiers by the same names still work.\n\nfor the sake of avoiding mistakes, the changes were generated with sed\nvia the command:\n\nsed -i -e 's/#define  *\\(REG_[A-Z_0-9]\\{1,\\}\\)  *\\([0-9]\\{1,\\}\\)'\\\n'/enum { \\1 = \\2 };\\n#define \\1 \\1/' \\\narch/i386/bits/signal.h arch/x86_64/bits/signal.h arch/x32/bits/signal.h\n"},{"hash":"786fda875a901dc1807289c940338487854cd3ba","date":"2017-01-05T00:43:59.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix getopt[_long] clobbering of optopt on success\n\ngetopt is only specified to modify optopt on error, and some software\napparently infers an error from optopt!=0.\n\ngetopt_long is changed analogously. the resulting behavior differs\nslightly from the behavior of the GNU implementation of getopt_long,\nwhich keeps an internal shadow copy of optopt and copies it to the\npublic one on return, but since the GNU implementation also exhibits\nthis shadow-copy behavior for plain getopt where is is non-conforming,\nI think this can reasonably be considered a bug rather than an\nintentional behavior that merits mimicing.\n"},{"hash":"809ff8cf90254921ea38eb6fa1ce326d9008513b","date":"2017-01-05T00:52:24.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"treat base 1 as an error in strtol-family functions\n\nISO C and POSIX only specify behavior for base arguments of 0 and\n2-36; POSIX mandates an EINVAL error for unsupported bases. it's not\nclear that there's a requirement for implementations not to \"support\"\nadditional bases as an extension, but \"base 1\" did not work in any\nmeaningful way anyway, so it should be considered unsupported and thus\nan error.\n"},{"hash":"27b3fd68f67b674440d21ea7ca5cf918d2e1559f","date":"2017-01-05T03:54:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix crash from corrupted tls module list after failed dlopen\n\ncommit d56460c939c94a6c547abe8238f442b8de10bfbd introduced this\nregression as part of splitting the tls module list out of the dso\nlist. the new code added to dlopen's failure path to undo the changes\nadding the partially-loaded libraries reset the tls_tail pointer\ncorrectly, but did not clear its link to the next list entry. thus, at\nleast until the next successful dlopen, the list was not terminated\nbut ended with an invalid next pointer, which __copy_tls attempted to\nfollow when a new thread was created.\n\npatch by Mikael Vidstedt.\n"},{"hash":"1f53e7d00c375efb32e2e468f91a42668653d5f0","date":"2017-01-13T10:47:08.000Z","author":{"name":"rofl0r","email":"retnyg@gmx.net"},"message":"fix crashes in x32 __tls_get_addr\n\nx32 has another gratuitous difference to all other archs:\nit passes an array of 64bit values to __tls_get_addr().\nusually it is an array of size_t.\n"},{"hash":"6894f8472614e22c76820b6469d2551d17e024ed","date":"2017-01-19T16:45:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix spurious EINTR errors from multithreaded set*id, etc.\n\ncommit 78a8ef47c4d92b7680c52a85f80a81e29da86bb9 inadvertently removed\nthe SA_RESTART flag from the sigaction for the internal signal handler\nused by __synccall for broadcasting. as a result, programs which did\nnot use interrupting signals but which used set*id() in a\nmultithreaded context could wrongly observe EINTR errors they're not\nprepared to handle.\n"},{"hash":"01e6bbece2bdcac243cdb8dff6916f2bb80a19e1","date":"2017-01-29T05:11:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix bindtextdomain logic error deactivating other domains\n\nthis loop was only supposed to deactivate other bindings for the same\ntext domain name, but due to copy-and-paste error, deactivated all\nother bindings.\n\npatch by He X.\n"},{"hash":"dbbb3734d8c0176feabd6c46e2e85bbc3b8a60af","date":"2017-01-29T16:14:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix use of uninitialized pointer in gettext core\n\nthe plural_rule field of allocated msgcat structures was assumed to be\ninitially-null but was never initialized. for future-proofing, the\nnplurals field which was left uninitialized should also be cleared.\n\nlikewise, in the binding structure, the active field could be used\nuninitialized by a technicality: the a_store which stores the initial\nvalue of 0 may be implemented as a cas operation, which reads the old\nvalue.\n\nrather than fixing these issues individually, just use calloc for both\nallocations. this does result in wasteful clearing of name buffers (up\nto NAME_MAX+PATH_MAX) before filling them, but since the size if\nbounded and the time is dominated by filesystem operations, it really\ndoesn't matter; simplicity and future-proofing have more value here.\n\nmodified from patch submitted by He X.\n"},{"hash":"d6601f0af0452b218d247cb47513fc9cd6bbf2e2","date":"2017-01-29T16:24:20.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid unbounded strlen in gettext functions\n\nuse the standard strnlen idiom for cases where lengths greater than an\nimposed limit are going to be rejected immediately anyway.\n"},{"hash":"9201c3afce0ff53a9b1c5da5285ff84c11dee9d4","date":"2017-02-15T21:54:51.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"s390x: implement dlsym\n\nThis was missed when writing the port initially.\n"},{"hash":"b261a24256792177a5f0531dbb25cc6267220ca5","date":"2017-02-15T22:50:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression in arm atomics asm with new binutils\n\nbinutils commit bada43421274615d0d5f629a61a60b7daa71bc15 tightened\nimmediate fixup handling in gas in such a way that the final .arch of\nan object file must be compatible with the fixups used when the\ninstruction was assembled; this in turn broke assembling of atomics.s,\nat least in thumb mode.\n\nit's not clear whether this should be considered a bug in gas, but\n.object_arch is preferable anyway for our purpose here of controlling\nthe ISA level tag on the object file being produced, and it's the\nintended directive for use in object files with runtime code\nselection. research by Szabolcs Nagy confirmed that .object_arch is\nsupported in all relevant versions of binutils and clang's integrated\nassembler.\n\npatch by Reiner Herrmann.\n"},{"hash":"0a4a16d11cc263c3f32325f985b9ed94b04af79f","date":"2017-02-23T00:25:13.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow page size to vary on arm\n\nthe ABI for arm was silently changed at some point to allow page sizes\nother than 4k; traditional binaries built with only 4k-aligned offsets\nbetween load segments cannot run on such systems, but newer binutils\nversions use 64k offset alignment.\n\nwhile larger page size is undesirable for various reasons, users have\nencountered hardware and/or kernels that lock the page size to a\nlarger value, so follow the new ABI and allow it to vary.\n"},{"hash":"827c4e6fbe46142049ef3d8bcb8f35951712797d","date":"2017-03-06T01:02:31.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix lsearch and lfind to pass key as first arg to the compar callback\n\nthis is not a conformance issue as posix does not specify the\nargument order, but the order is specified for bsearch and some\nsystems document the order for lsearch consistently (openbsd).\n\nsince there were two indpendent reports of this issue it's better\nto use the more widely expected argument order.\n"},{"hash":"fc85fb38605a8bf341c367b8ab0d36edab2bdbfc","date":"2017-03-08T18:35:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix ld-behavior-dependent crash in ppc64 ldso startup\n\nthe 32-bit pc-relative address for stage 2 of dynamic linker entry was\nwrongly loaded with a zero-extending load instead of sign-extending\nload, resulting in an invalid jump if the offset happened to be\nnegative, which depends on the linker's ordering of text sections.\n"},{"hash":"c9783e4d32e786c4b76bf77c6030111d9e79dbb7","date":"2017-03-12T00:10:57.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"treat STB_WEAK and STB_GNU_UNIQUE like STB_GLOBAL in find_sym\n\nA weak symbol definition is not special during dynamic linking, so\ndon't let a strong definition in a later module override it.\n(glibc dynamic linker allows overriding weak definitions if\nLD_DYNAMIC_WEAK is set, musl does not.)\n\nSTB_GNU_UNIQUE means that the symbol is global, even if it is in a\nmodule that's loaded with RTLD_LOCAL, and all references resolve to\nthe same definition. This semantics is only relevant for c++ plugin\nsystems and even there it's often not what the user wants (so it can\nbe turned off in g++ by -fno-gnu-unique when the c++ shared lib is\ncompiled). In musl just treat it like STB_GLOBAL.\n"},{"hash":"4ff234f6cba96403b5de6d29d48a59fd73252040","date":"2017-03-13T01:03:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"rework ldso handling of global symbol table for consistency\n\nwhen loading libraries with dlopen, the caller can request that the\nlibrary's symbols become part of the global symbol table, or that they\nonly be used for resolving relocations in the loaded library and its\ndependencies. in the latter case, a subsequent dlopen of the same\nlibrary can upgrade it to global status.\n\npreviously, if a library was upgraded from local to global mode, its\nsymbols entered the symbol lookup search order at the point where the\nlibrary was originally loaded. this means that a new call to dlopen\ncould change the value of a symbol that already had a visible\ndefinition, an inconsistency which applications could observe.\n\nPOSIX is unclear whether this should happen or whether it's permitted\nto happen, but the resolution of Austin Group issue #982 made it\nformally unspecified.\n\nwith this patch, a library whose mode is upgraded from local to global\nenters the symbol lookup order at the point where it was made global,\nso that symbol resolution before and after the upgrade are consistent.\n\nin order to implement this change, the per-dso global flag is replaced\nwith a separate set of linked-list pointers for participation in the\nglobal symbol table. this permits the order of dso objects for symbol\nresolution to differ from the order used for iteration of all loaded\nlibraries. it also improves performance of find_sym, by avoiding a\nbranch per iteration and skipping, and especially in the case where\nmany non-global libraries have been loaded, by allowing the loop to\nskip over them entirely. logic for temporarily adding non-global\nlibraries to the symbol table for relocation purposes is also mildly\nsimplified.\n"},{"hash":"4823b13a75b40c4408c1101b363ab00fd118fb27","date":"2017-03-13T04:32:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reorder addend handling before symbol lookup in relocation code\n\nthese two tasks are independent now, but in order to support lazy\nrelocations, the failure path for symbol lookup may want the addend to\nbe available.\n"},{"hash":"6476b8135760659b25c93ff9308425ca98a9e777","date":"2017-03-14T18:12:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"emulate lazy relocation as deferrable relocation\n\ntraditional lazy relocation with call-time plt resolver is\nintentionally not implemented, as it is a huge bug surface and demands\nsignificant amounts of arch-specific code and requires ongoing\nmaintenance to ensure compatibility with applications which make use\nof new additions to the arch's register file in passing function\narguments.\n\nsome applications, however, depend on the ability to dlopen modules\nwhich have unsatisfied symbol references at the time they are loaded,\neither avoiding use of the affected interfaces or manually loading\nanother module to provide the missing definition via their own module\ndependency tracking outside the ELF data structures. while such usage\nis non-conforming, failure to support it has been a significant\nobstacle for users/distributions trying to support affected software,\nparticularly the X.org server.\n\ninstead of resolving lazy relocations at call time, this patch saves\nunresolved GOT/PLT relocations for deferral and retries them after\neach subsequent dlopen until they are resolved. since dlopen is the\nonly time at which the effective global symbol table can change, this\nbehavior is not observably different from traditional lazy binding,\nand the required code is minimal.\n"},{"hash":"6582baa752a8facb2c8a7b5b3dcf67331429cdc1","date":"2017-03-14T18:18:07.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix free of uninitialized buffer pointer on error in regexec\n\nthe fix in commit c3edc06d1e1360f3570db9155d6b318ae0d0f0f7 for\nCVE-2016-8859 used gotos to exit on overflow conditions, but the code\nin that error path assumed the buffer pointer was valid or null. thus,\nthe conditions which previously led to under-allocation and buffer\noverflow could instead lead to an invalid pointer being passed to\nfree.\n"},{"hash":"500f5bee6c03981961f1586fca2a1dee6fdce7c7","date":"2017-03-14T18:29:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in static dl_iterate_phdr, fix use of possibly-uninitialized aux data\n\nthis could only happen if an incomplete auxv was passed into the\nprogram, but it's better to just initialize the data anyway.\n"},{"hash":"6a209f14ff7273d9429e5153c5b6b1990cb508e3","date":"2017-03-14T18:31:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix possible fd leak, unrestored cancellation state on dns socket fail\n"},{"hash":"733d1ea759119bcd0554f25034d1b4113b910900","date":"2017-03-14T19:06:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix wide scanf's use of a compound literal past its lifetime\n"},{"hash":"3ec8b3aeb88cef8574a7b0f677ebc1801f03821d","date":"2017-03-14T19:13:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix one-byte overflow in legacy getpass function\n\nif the length of the input was equal to the buffer size (128), a fixed\nvalue of zero was written one byte past the end of the static buffer.\n"},{"hash":"c49d3c8adadfa24235fcf4779bb722b1aa6f480b","date":"2017-03-14T22:51:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"avoid loading of multiple libc versions via explicit pathname\n\nsuch loading is unsafe, and can happen when programs use their own\nlogic to locate a .so file then pass the absolute pathname to dlopen,\nor if an absolute pathname ends up in DT_NEEDED headers. multiple\nloads with only the base name were already precluded, provided libc\nwas named appropriately, by special-casing standard library names.\n\none function symbol (in the reserved namespace, but public, since it's\npart of the crt1 entry point ABI) and one data symbol are checked.\nthis way we avoid likely false positives, particularly from libraries\ninterposing and wrapping functions. there is no hard requirement to\navoid breaking such usage, since trying to run a hook before libc is\neven initialized is not a supported usage case, but it's friendlier\nnot to break things.\n"},{"hash":"cb525397bb053ea49cf160965477a17b17286eb3","date":"2017-03-14T23:00:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove unused refcnt field for shared libraries\n"},{"hash":"8cba1dc46c8f29261aa441e70bac798f2c2c0f58","date":"2017-03-15T04:15:28.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix threshold constants in j0f, y0f, j1f, y1f\n\npartly following freebsd rev 279491\nhttps://svnweb.freebsd.org/base?view=revision&revision=279491\n(musl had some of the fixes before freebsd).\n\nthe change should not matter much for j0f, y0f, but it improves\nj1f and y1f in [2.5,~3.75] (that is [0x40200000,~0x40700000]).\nnear roots (e.g. around 3.8317 for j1f) there are still large\nulp errors.\n\ndropped code that tried to raise inexact.\n"},{"hash":"a393d5cc8d22b628fcc1da1b3a2cdae42ca643a9","date":"2017-03-15T20:50:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"precalculate gnu hash rather than doing it lazily in find_sym inner loop\n\nthis change was suggested based on testing done by Timo Teräs almost\ntwo years ago; the branch (and probably call prep overhead) in the\ninner loop was found to contribute noticably to total symbol lookup\ntime. this change will make lookup slightly slower if libraries were\nbuilt with only the traditional \"sysv\" ELF hash table, but based on\nhow much slower lookup tends to be without the gnu hash table, it\nseems reasonable to assume that (1) users building without gnu hash\ndon't care about dynamic linking performance, and (2) the extra time\nspent computing the gnu hash is likely to be dominated by the slowness\nof the sysv hash table lookup anyway.\n"},{"hash":"74bca42e1613c58805d7b048841c2fa8f8502158","date":"2017-03-16T00:25:45.000Z","author":{"name":"Tuan M. Hoang","email":"tmhoang@flatglobe.org"},"message":"s390x: fix fpreg_t and remove unused per_struct\n\nIncluding sys/procfs.h complains unknown type name 'fpreg_t' in\nbits/user.h. fpreg_t in bits/signal.h and elf_fpreg_t in bits/user.h\nare practically the same.\n\nper_struct is never used, even conflicts with kernel header\nasm/ptrace.h\n"},{"hash":"dbff2bb889bc831599b022c49252c69bf48f4e4e","date":"2017-03-16T00:27:38.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix POSIX-format TZ dst transition times for southern hemisphere\n\nthe time of day at which daylight time switches over is specified in\nlocal time in the dst state prior to the transition. the code for\nhandling this wrongly assumed it needed to switch whether dst or\nstandard offset is applied to the transition time when the dst end\ndate is before the dst start date (souther hemisphere summer), but in\nfact the end transition time should always be adjusted for dst, and\nthe start transition time should always be adjusted for standard time.\n"},{"hash":"0c53178ec09478ca5f6ca6b5ad09d50a10c8f19d","date":"2017-03-21T12:39:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dlopen/dlsym regression opening libs already loaded at startup\n\ncommit 4ff234f6cba96403b5de6d29d48a59fd73252040 erroneously changed\nthe condition for running certain code at dlopen time to check whether\nthe library was already relocated rather than whether it already had\nits deps[] table filled. this was out of concern over whether the code\nunder the conditional would be idempotent/safe to call on an\nalready-loaded libraries. however, I missed a consideration in the\nopposite direction: if a library was loaded at program startup rather\nthan dlopen, its deps[] table was not yet allocated/filled, and\nload_deps needs to be called at dlopen time in order for dlsym to be\nable to perform dependency-order symbol lookups.\n\nin order to avoid wasteful allocation of lazy-binding relocation\ntables for libraries which were already loaded and relocated at\nstartup, the check for !p->relocated is not deleted entirely, but\nmoved to apply only to allocation of these dables.\n"},{"hash":"16319a5df9d50cfc642ffc8db76bc36562d4b3dd","date":"2017-03-21T12:54:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make setlocale return a single name for LC_ALL if all categories match\n\nwhen called for LC_ALL, setlocale has to return a string representing\nthe state of all locale categories. the simplest way to do this was to\nalways return a delimited list of values for each category, but that's\nnot friendly in the fairly common case where all categories have the\nsame setting. He X proposed a patch to check for this case and return\na single name; this patch is a simplified approach to do the same.\n"},{"hash":"e4fc9ad780e36c84e1ed6b0fc01b3c53ae65ff9d","date":"2017-03-21T14:56:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"search locale name variants for gettext translations\n\noften translations will be named only by language, whereas locale\nnames may also include a territory code, modifier, and codeset\nportion. previously, only translations exactly matching the locale\nname were loaded. this was a major usability issue, requiring\nworkarounds like symlinks or tweaking of the locale name.\n\nwith these changes, gettext now searches for translations by first\nremoving the codeset portion of the locale name, then trying the\nremainder in full, with modifier (@mod) removed, with territory code\n(_XX) removed, and with both removed.\n\npart of the reason gettext lacked support for searching fallbacks\nbefore is that the candidate pathname for a translation file was\nconstructed on each call and used as the key to lookup an\nalready-mapped translation file. this was very costly/inefficient. we\nnow use the tuple of textdomain binding pointer, locale map pointer,\nand integer category id as the key for looking up a translation file\nmapping.\n\nbased on patch by He X.\n"},{"hash":"e6917eced2cc841fe3dfd9c04deec9202f9e34f3","date":"2017-03-21T16:19:47.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"increase limit on locale name length from 15 to 23 bytes\n\nthe old limit was one byte too short to support locale names of the\nform xx_XX.UTF-8@modifier where modifier is more than 3 bytes, a form\nwhich various real-world locale names take. the problem could be\navoided by omitting the useless \".UTF-8\" part, but users may need to\nhave it present when operating on mixed-libc systems or when it will\nbe carried over (e.g. across ssh) to other systems.\n\nthe new limit is chosen sufficient for existing/reasonable locale\nnames while still keeping the size of setlocale's static buffer small.\n\nalso add locale_impl.h to the Makefile's list of headers which force\nrebuild of source files, to prevent dangerously inconsistent object\nfiles from getting used after this change.\n"},{"hash":"9571c5314a8064eda8a56faa2ae2aeced34497a3","date":"2017-03-21T16:24:23.000Z","author":{"name":"Julien Ramseier","email":"j.ramseier@gmail.com"},"message":"regex: fix newline matching with negated brackets\n\nWith REG_NEWLINE, POSIX says:\n\"A <newline> in string shall not be matched by a period outside\na bracket expression or by any form of a non-matching list\"\n"},{"hash":"85dfab7eaf1624577ec6de8375fd771ef9b4672a","date":"2017-03-21T16:30:03.000Z","author":{"name":"Julien Ramseier","email":"j.ramseier@gmail.com"},"message":"fix off-by-one in strptime %j\n\ntm_yday range is 0-365 while %j is 1-366\n"},{"hash":"834ef7aff5695e79b1feeacfdc15eaba6a42cab9","date":"2017-03-21T16:30:45.000Z","author":{"name":"Julien Ramseier","email":"j.ramseier@gmail.com"},"message":"fix processing of strptime %p format\n\nstring pointer was not advanced after matching.\n"},{"hash":"b6e1fe0d5e78dac647e85d49c2d537bb071ba49e","date":"2017-03-21T16:35:16.000Z","author":{"name":"Julien Ramseier","email":"j.ramseier@gmail.com"},"message":"fix strptime output for %C without %y\n\nin this case, a potentially-uninitialized or unrelated existing value\nin tm_year was being used. instead use 0 if %y was not present.\n"},{"hash":"54807d47acecab778498ced88ce8f62bfa16e379","date":"2017-03-21T16:39:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: add single instruction math functions\n\nthis should increase performance and reduce code size on aarch64.\n\nthe compiled code was checked against using __builtin_* instead\nof inline asm with gcc-6.2.0.\n\nlrint is two instructions.\n\nc with inline asm is used because it is safer than a pure asm\nimplementation, this prevents ll{rint,round} to be an alias\nof l{rint,round} (because the types don't match) and depends\non gcc style inline asm support.\n\nceil, floor, round, trunc can either raise inexact on finite\nnon-integer inputs or not raise any exceptions. the new\nimplementation does not raise exceptions while the generic\nc code does.\n\non aarch64, the underflow exception is signaled before rounding\n(ieee 754 allows both before and after rounding, but it must be\nconsistent), the generic fma c code signals it after rounding\nso using single instruction fixes a slight conformance issue too.\n"},{"hash":"1ca597551bab424a1302938dd3504ddf73904efd","date":"2017-04-12T02:09:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix read past end of buffer in getaddrinfo backend\n\ndue to testing buf[i].family==AF_INET before checking i==cnt, it was\npossible to read past the end of the array, or past the valid part. in\npractice, without active bounds/indeterminate-value checking by the\ncompiler, the worst that happened was failure to return early and\noptimize out the sorting that's unneeded for v4-only results.\n\nreturning on i==cnt-1 rather than i==cnt would be an alternate fix,\nbut the approach this patch takes is more idiomatic and less\nerror-prone.\n\npatch by Timo Teräs.\n"},{"hash":"b3751c3282e3fbae4b97cb4f29031df9bc6e0745","date":"2017-04-12T02:10:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix dl_iterate_phdr in static PIE binaries\n\nanalogous to commit 5bf7eba213cacc4c1220627c91c28deff2ffecda, use of\nAT_PHDR/PT_PHDR does not actually work to find the program base, and\nthe method with _DYNAMIC vs PT_DYNAMIC must be used as an alternative.\n\npatch by Shiz, along with testing to confirm that this fixes unwinding\nin static PIE.\n"},{"hash":"2577b1bc16124d0690b9dd268a9f582f80bdcd67","date":"2017-04-21T21:24:46.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow full-range file offsets to mmap on archs with 64-bit syscall args\n\nnormally 32-bit archs use the mmap2 syscall and are limited to an\noffset of 2^32 pages. however some 32-bit archs (mainly ILP32-on-64\nones like x32) have 64-bit syscall argument slots and thus can accept\nthe full range. don't artifically limit them.\n"},{"hash":"8c44a060243f04283ca68dad199aab90336141db","date":"2017-04-21T21:31:00.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix scalbn when result is in the subnormal range\n\nin nearest rounding mode scalbn could introduce double rounding error\nwhen an intermediate value and the final result were both in the\nsubnormal range e.g.\n\n  scalbn(0x1.7ffffffffffffp-1, -1073)\n\nreturned 0x1p-1073 instead of 0x1p-1074, because the intermediate\ncomputation got rounded to 0x1.8p-1023.\n\nwith the fix an intermediate value can only be in the subnormal range\nif the final result is 0 which is correct even after double rounding.\n(there still can be two roundings so signals may be raised twice, but\nthat's only observable with trapping exceptions which is not supported.)\n"},{"hash":"1a7fa5e5211a67e89861583516ee1566609467a1","date":"2017-04-21T21:34:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in support for resolv.conf attempts option\n\ncommit d6cb08bcaca4ff1f921375510ca72bccea969c75 moved the code and\nintroduced an incorrect string offset for the new parsing, probably\ndue to a copy-and-paste error.\n\npatch by Stefan Sedich.\n"},{"hash":"e1232f5b5185e8f337806841018369407e32e77d","date":"2017-04-21T21:41:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make ttyname[_r] return ENODEV rather than ENOENT\n\ncommit 0a950dcf15bb9f7274c804dca490e9e20e475f3e added checking that\nthe pathname a tty device was opened with actually matches the device,\nwhich can fail to hold when a container inherits a tty from outside\nthe container. the error code added at the time was ENOENT; however,\ndiscussions between affected applications and glibc developers\nresulted in glibc adopting ENODEV as the error for this condition, and\nthis has now been documented in the man pages project as well. adopt\nthe same error code for consistency.\n\npatch by Christian Brauner.\n"},{"hash":"58e2396a9aa23c132faf4198ca4d779c84955b38","date":"2017-04-22T21:48:37.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove va_arg hacks in printf core with undefined behavior\n\nthe code being removed was written to optimize for size assuming the\ncompiler cannot collapse code paths for different types with the same\nunderlying representation. modern compilers sometimes succeed in\nmaking this optimization themselves, but either way it's a small size\ndifference and not worth the source-level complexity or the UB\ninvolved in this hack.\n\nsome incorrect use of va_arg still remains, particularly use of void *\nwhere the actual argument has a different pointer type. fixing this\nrequires some actual code additions, rather than just removing cruft,\nso I'm leaving it to be done later as a separate commit.\n"},{"hash":"bb439bb17108b67f3df9c9af824d3a607b5b059d","date":"2017-04-22T22:39:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"implement new posix_spawn flag POSIX_SPAWN_SETSID\n\nthis functionality has been adopted for inclusion in the next issue of\nPOSIX as the result of Austin Group issue #1044.\n\nbased on patch by Daurnimator.\n"},{"hash":"555504166852a9b9c56ac4e1fb5bb1bf20cbf8ad","date":"2017-04-22T23:26:05.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"s390x: provide sigcontext struct definition\n\nThis structure was missed when creating the s390x port.\n\nThis is based on the report and patch from William Pitcock, but with a\nmodified structure defintion to more closely match the kernel's\ndefinition.\n"},{"hash":"77e895dcfadb156c9f378d26c9d0497ce2baf13f","date":"2017-04-23T00:40:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add no-op POSIX_SPAWN_USEVFORK to spawn.h\n\nthe bit is reserved anyway for ABI-compat reasons; this documents it\nand makes it so we can have posix_spawnattr_setflags check for flag\nvalidity without hard-coding an anonymous bit value.\n"},{"hash":"f9f686b7721e2cc35e20fa5c6df6da2dc4ac3f50","date":"2017-04-23T00:47:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"have posix_spawnattr_setflags check for supported flags\n\nper POSIX, EINVAL is not a mandatory error, only an optional one. but\nreporting unsupported flags allows an application to fallback\ngracefully when a requested feature is not supported. this is not\nhelpful now, but it may be in the future if additional flags are\nadded.\n\nhad this checking been present before, applications would have been\nable to check for the newly-added POSIX_SPAWN_SETSID feature (added in\ncommit bb439bb17108b67f3df9c9af824d3a607b5b059d) at runtime.\n"},{"hash":"97bd6b09dbe7478d5a90a06ecd9e5b59389d8eb9","date":"2017-05-28T01:36:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix iconv conversions to legacy 8bit encodings\n\nthere was missing reverse-conversion logic for the case, handled\nspecially in the character set tables, where a byte represents a\nunicode codepoint with the same value.\n\nthis patch adds code to handle the case, and refactors the two-level\n10-bit table lookup for legacy character sets into a function to avoid\nrepeating it yet another time as part of the fix.\n"},{"hash":"81f4a1200a58a84c83e73da645d4f226a8785bdf","date":"2017-05-28T02:04:12.000Z","author":{"name":"Samuel Holland","email":"samuel@sholland.org"},"message":"fix fchown fallback on arches without chown(2)\n\nThe flags argument was missing, causing uninitalized data to be passed\nto fchownat(2). The correct value of flags should match the fallback for\nchown(3).\n"},{"hash":"4073f03add269be8be9f84d374fe69920b78d53d","date":"2017-06-01T01:46:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix fstatat syscall on mips64\n\nmips64 requires 'struct stat' conversion due to incorrect 32-bit\nfields where time_t should be in the kernel version of the structure.\nsyscall_arch.h already performed the correct translation for stat,\nfstat, and lstat syscalls, but omitted special handling for fstatat.\n"},{"hash":"1c497005ee58fd237646a49231b73fd3ea79e2d5","date":"2017-06-01T01:49:44.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"remove long-obsolete clang workarounds from mips* syscall_arch.h files\n\nat one point, clang reportedly failed to support the asm register\nconstraints needed for inline syscalls. versions of clang that old\nhave much bigger problems that preclude using them to compile musl\nlibc.\n"},{"hash":"179766aa2ef06df854bc1d9616bf6f00ce49b7f9","date":"2017-06-01T01:54:22.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"towupper/towlower: fast path for ascii chars\n\nMake a fast path for ascii chars which is assumed to be the most common\ncase. This has significant performance benefit on xml json and similar\n"},{"hash":"bc313e880c6cde2e512d2f43e84968d1b12bd19d","date":"2017-06-08T23:44:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"use hard-coded sh4a atomic opcodes to avoid linker errors on sh\n\nwhen using the sh4a opcodes, the assembler tags the resulting object\nfile as requiring sh4a. the linker then refuses to (static) link it\nwith object files marked as requiring j2, since there is no isa level\nthat includes both sh4a and j2 instructions.\n"},{"hash":"84eff797e3e38210cc311b000b1586b948b4fc35","date":"2017-06-08T23:50:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix glob failure to match plain \"/\" to root directory\n\nthe check to prevent matching empty string wrongly blocked matching\nof \"/\" due to checking emptiness after stripping leading slashes\nrather than checking the full original argument string.\n\nsimplified from patch by Julien Ramseier.\n"},{"hash":"af0517301677b4206c605caaef25f5d57a31b5b8","date":"2017-06-14T23:46:04.000Z","author":{"name":"A. Wilcox","email":"AWilcox@Wilcox-Tech.com"},"message":"catopen: set errno to EOPNOTSUPP\n\nPer 1003.1-2008 (2016 ed.), catopen must set errno on failure.\n\nWe set errno to EOPNOTSUPP because musl does not currently support\nmessage catalogues.\n"},{"hash":"10800088099ec4c27c1db6c613c8bbf9f76e4057","date":"2017-06-14T23:50:58.000Z","author":{"name":"A. Wilcox","email":"AWilcox@Wilcox-Tech.com"},"message":"getdate: correctly specify error number\n\nPOSIX defines getdate error #5 as:\n\"An I/O error is encountered while reading the template file.\"\n\nPOSIX defines getdate error #7 as:\n\"There is no line in the template that matches the input.\"\n\nThis change correctly disambiguates between the two error conditions.\n"},{"hash":"1c86c7f5c26dd0569df7afc23ee9866fb3f645dc","date":"2017-06-15T16:54:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle mremap failure in realloc of mmap-serviced allocations\n\nmremap seems to always fail on nommu, and on some non-Linux\nimplementations of the Linux syscall API, it at least fails to\nincrease allocation size, and may fail to move (i.e. defragment) the\nexisting mapping when shrinking it too. instead of failing realloc or\nleaving an over-sized allocation that may waste a large amount of\nmemory, fallback to malloc-memcpy-free if mremap fails.\n"},{"hash":"5c10c33d2a35204ee76931625a007fcc8cca3228","date":"2017-06-15T16:58:08.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle localtime errors in ctime\n\nctime passes the result from localtime directly to asctime. But in case\nof error, localtime returns 0. This causes an error (NULL pointer\ndereference) in asctime.\n\nbased on patch by Omer Anson.\n"},{"hash":"2d7d05f031e014068a61d3076c6178513395d2ae","date":"2017-06-15T17:01:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"set errno when getpw*_r, getgr*_r, and getspnam_r fail\n\nthese functions return an error code, and are not explicitly\ndocumented to set errno, but they are nonstandard and the historical\nimplementations do set errno as well, and some applications expect\nthis behavior. do likewise for compatibility.\n\npatch by Rudolph Pereira.\n"},{"hash":"64f855874c32e192382df69f4765a7e32057a005","date":"2017-06-21T00:31:35.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle errors from localtime_r in ctime_r\n\nPOSIX requires ctime_r return a null pointer on failure, which can\noccur if the input time_t value is not representable in broken down\nform.\n\nbased on patch by Alexander Monakov.\n"},{"hash":"b7bfb5c3a8330002250f304cb5deb522fa054eae","date":"2017-06-21T00:41:23.000Z","author":{"name":"Bartosz Brachaczek","email":"b.brachaczek@gmail.com"},"message":"fix iconv conversions for iso88592-iso885916\n\ncommit 97bd6b09dbe7478d5a90a06ecd9e5b59389d8eb9 refactored the table\nlookup into a function and introduced an error in index computation.\nthe error caused garbage to be read from the table if the given charmap\nhad a non-zero number of elided entries.\n"},{"hash":"5948bc1a642e6cead729602c9e1a251d5f60bddb","date":"2017-06-21T16:47:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix omission of microblaze user.h definitions\n"},{"hash":"91d34c4533e6bf6eacad7a9f001f28f9e5ebc656","date":"2017-06-21T23:06:45.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in getspnam[_r] error code for insufficient buffer size\n\ncommit 2d7d05f031e014068a61d3076c6178513395d2ae wrongly changed ERANGE\nto EINVAL, likely as the result of copy-and-paste error.\n"},{"hash":"e6def544358afd5648a428d2e02c147a1f901048","date":"2017-06-22T22:34:06.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix arm run-time abi string functions\n\nin arm rtabi these __aeabi_* functions have special abi (they are\nonly allowed to clobber r0,r1,r2,r3,ip,lr,cpsr), so they cannot\nbe simple wrappers around normal string functions (which may\nclobber other registers), the safest solution is to write them in\nasm, a minimalistic implementation works because these are not\nsupposed to be emitted by compilers or used in general.\n"},{"hash":"ce385fcfb2db74b109067083db4a26ca810eaa14","date":"2017-06-23T19:28:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"s390x: add single-instruction math functions\n\nthese were introduced in z196 and not available in the baseline (z900)\nISA level. use __HTM__ as an alternate indicator for ISA level, since\ngcc did not define __ARCH__ until 7.x.\n\npatch by David Edelsohn.\n"},{"hash":"9d12a6a21fd146f543e8a6b8ec4cce7fd61be606","date":"2017-06-23T19:45:48.000Z","author":{"name":"Dmitry Golovin","email":"dima@golovin.in"},"message":"fix clang CFLAGS checks and silence unused argument warnings\n"},{"hash":"94f744195e17cf787a36c259254d56386b31fe20","date":"2017-06-23T20:01:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"powerpc64: add single-instruction math functions\n\nwhile the official elfv2 abi for \"powerpc64le\" sets power8 as the\nbaseline isa, we use it for both little and big endian powerpc64\ntargets and need to maintain compatibility with pre-power8 models. the\ninstructions for sqrt, fabs, and fma are in the baseline isa; support\nfor the rest is conditional via predefined isa-level macros.\n\npatch by David Edelsohn.\n"},{"hash":"66b53cfa8876342f7e7d7907d30c719c38cd5a1b","date":"2017-07-04T15:05:05.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"ldso: avoid spurious & possible erroneous work for libs with no deps\n\na null pointer for a library's deps list was ambiguous: it could\nindicate either no dependencies or that the dependency list had not\nyet been populated. inability to distinguish could lead to spurious\nwork when dlopen is called multiple times on a library with no deps,\nand due to related bugs, could actually cause other libraries to\nfalsely appear as dependencies, translating into false positives for\ndlsym.\n\navoid the problem by always initializing the deps pointer, pointing to\nan empty list if there are no deps. rather than wasting memory and\nintroducing another failure path by allocating an empty list per\nlibrary, simply share a global dummy list.\n\nfurther fixes will be needed for related bugs, and much of this code\nmay end up being replaced.\n"},{"hash":"43c423af5b8453afde86e4ba81e0fcc663ae7c22","date":"2017-07-04T15:34:39.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in dlopen promotion from RTLD_LOCAL to RTLD_GLOBAL\n\ncommit 4ff234f6cba96403b5de6d29d48a59fd73252040 inadvertently removed\nthe logic to do this when changing the representation of global\nstatus.\n"},{"hash":"f3055e0163aad1cebb0867078643b36643c5d95f","date":"2017-07-04T20:58:28.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"allow specifying argv[0] when invoking a program via ldso command\n\npreviously, the pathname used to load the program was always used as\nargv[0]. the default remains the same, but a new --argv0 option can be\nused to provide a different value.\n"},{"hash":"bd00cc87819875882356298b6c6bdabc1700753f","date":"2017-07-04T21:04:21.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"remove useless declarations in string.h\n\nThe two functions str{,n}casecmp_l are specified to be declared in\n<strings.h> which is already included from <string.h> under _GNU_SOURCE.\n"},{"hash":"f6888840613a510c99915ba7732df8ec54d52637","date":"2017-07-04T21:04:43.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"reapply va_arg hacks removal to wprintf\n\ncommit 58e2396a9aa23c132faf4198ca4d779c84955b38 missed that the same\ncode was duplicated in implementation of vfwprintf.\n"},{"hash":"60ab365cae24063b0f21821860ca16fb63e81f81","date":"2017-07-04T21:11:33.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"fix undefined behavior in free\n"},{"hash":"d906fa3118c888227d858b6d642a09e055eca2b4","date":"2017-07-04T21:12:52.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"unify the use of FUTEX_PRIVATE\n\nThe flag 1<<7 is used in several places for different purposes that are\nnot always easy to distinguish. Mark those usages that correspond to the\nflag that is used by the kernel for futexes.\n"},{"hash":"bc42dcbfd9466c22d8ab0f8235e5091689a95aad","date":"2017-07-04T21:53:58.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"fix undefined behavior in ptrace\n"},{"hash":"2e6e08423b95b1b2bce7568f650c2b69d8d8fb8b","date":"2017-07-04T22:04:52.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"remove ineffective compiler assist from printf\n\nThe switch statement has no 'default:' case and the function ends\nimmediately following the switch, so the extra comparison did not\ncommunicate any extra information to the compiler.\n"},{"hash":"a08910fc2cc739f631b75b2d09b8d72a0d64d285","date":"2017-07-04T22:21:08.000Z","author":{"name":"Jens Gustedt","email":"Jens.Gustedt@inria.fr"},"message":"fix missing volatile qualifier on lock in __get_locale\n"},{"hash":"947d330f68c49680dcc54439f56da2a297228962","date":"2017-08-01T03:08:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add _NL_LOCALE_NAME extension to nl_langinfo\n\nsince setlocale(cat, NULL) is required to return the setting for the\nglobal locale, there is no standard mechanism to obtain the name of\nthe currently active thread-local locale set by uselocale. this makes\nit impossible for application/library software to load appropriate\ntranslations, etc. unless using the gettext implementation provided by\nlibc, which has privileged access to libc internals.\n\nto fill this gap, glibc introduced the _NL_LOCALE_NAME macro which can\nbe used with nl_langinfo to obtain the name. GNU gettext/gnulib code\nalready use this functionality on glibc, and can easily be adapted to\nmake use of it on non-glibc systems if it's available; for other\nsystems they poke at locale implementation internals, which we want to\navoid. this patch provides a compatible interface to the one glibc\nintroduced.\n"},{"hash":"dc2f368e565c37728b0d620380b849c3a1ddd78f","date":"2017-08-11T04:17:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"disable global visibility override hack (vis.h) by default\n\nneither current compilers nor linkers treat protected visibility the\nway I expected, as having fixed source-level semantics rather than\nbeing dependent on target-specific ABI details, and change seems\nunlikely. while the use here does not actually depend on the specific\nsemantics, at least some versions of some linkers, especially lld,\nrefuse to allow linking to a libc.so where the symbols have protected\nvisibility. this cannot be detected at configure-time because linking\nlibc.so itself works fine, and because even if we could test linking\nan application against libc.so successfully, we could not justifiably\nassume that the same linker used to link libc.so would also be used\nlater to link applications.\n\ndisable the vis.h hack by default at the configure level, but add an\nexplicit \"auto\" option to request the old configure-time detection\nrather than just removing it. this leaves it easy to evaluate whether\nit actually resulted in significant size or performance benefits while\nensuring that out-of-the-box builds are not unlinkable for some users.\n\nfortunately, preliminary evaluation suggests that at least x86_64,\narm, and aarch64 don't suffer at all from the change, and impact on\nother archs is low. if low is not low enough, it should not be hard to\nanalyze where the significant PLT call ABI costs are present and\nmitigate them without the hack.\n"},{"hash":"52cf5c18f4ad3a7a59fb7113cf115c6fc05c7494","date":"2017-08-12T00:23:21.000Z","author":{"name":"Leah Neukirchen","email":"leah@vuxu.org"},"message":"qsort: add a short comment about the algorithm\n"},{"hash":"e31c8c2d796e8a9596503f079dc567c45f93c2ae","date":"2017-08-12T00:31:33.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"ppc64: fix setjmp/longjmp handling of TOC pointer\n\nThe TOC pointer is constant within a single dso, but needs to be saved\nand restored around cross-dso calls.  The PLT stub saves it to the\ncaller's stack frame, and the linker adds code to the caller to restore\nit.\n\nWith a local call, as within a single dso or with static linking, this\ndoesn't happen and the TOC pointer is always in r2.  Therefore,\nsetjmp/longjmp need to save/restore the TOC pointer from/to different\nlocations depending on whether the call to setjmp was a local or non-local\ncall.\n\nIt is always safe for longjmp to restore to both r2 and the caller's stack.\nIf the call to setjmp was local, and only r2 matters and the stack location\nwill be ignored, but is required by the ABI to be reserved for the TOC\npointer.  If the call was non-local, then only the stack location matters,\nand whatever is restored into r2 will be clobbered anyway when the caller\nreloads r2 from the stack.\n\nA little extra care is required for sigsetjmp, because it uses setjmp\ninternally.  After the second return from this setjmp call, r2 will contain\nthe caller's TOC pointer instead of libc's TOC pointer.  We need to save\nand restore the correct libc pointer before we can tail call to\n__sigsetjmp_tail.\n"},{"hash":"80bf5952551c002cf12d96deb145629765272db0","date":"2017-08-12T00:42:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"trap UB from attempts to join a detached thread\n\npassing to pthread_join the id of a thread which is not joinable\nresults in undefined behavior.\n\nin principle the check to trap does not necessarily work if\npthread_detach was called after thread creation, since no effort is\nmade here to synchronize access to t->detached, but the check is\nwell-defined and harmless for callers which did not invoke UB, and\nlikely to help catch erroneous code that would otherwise mysteriously\nhang.\n\npatch by William Pitcock.\n"},{"hash":"1698fe6cdcdeaad03aa19a85433d5396ecfc51ef","date":"2017-08-12T01:06:57.000Z","author":{"name":"Thomas Petazzoni","email":"thomas.petazzoni@free-electrons.com"},"message":"fix build failure for sh4a due to missing colon in asm statement\n\nDue to a missing \":\" in an asm() statement, the \"memory\" clobber is\nconsidered by gcc as an input operand and not a clobber, which causes a\nbuild failure.\n"},{"hash":"511b7042b3844b42a940f1c31436fb04ce93ac19","date":"2017-08-12T13:09:27.000Z","author":{"name":"Daniel Sabogal","email":"dsabogalcc@gmail.com"},"message":"fix signed overflow in ftok\n"},{"hash":"670d6d01f53b4e85be6b333bf8a137e2be6d3fc3","date":"2017-08-29T23:39:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix unsynchronized access to FILE structure in fflush(0)\n\ncommit c002668eb0352e619ea7064e4940b397b4a6e68d inadvertently moved\nthe check for unflushed write buffer outside of the scope of the\nexisting lock.\n"},{"hash":"02b50c9d0a749f3e89e352a5760cc55a11977761","date":"2017-08-29T23:48:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix mips ioctl macros to match linux asm/sockios.h\n"},{"hash":"cc086693808c007679f02d5e0ee592446bf1b386","date":"2017-08-29T23:48:37.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SIOCGSTAMPNS socket ioctl macro to ioctl.h\n\nit is defined in linux asm/sockios.h since commit\nae40eb1ef30ab4120bd3c8b7e3da99ee53d27a23 (linux v2.6.22)\nbut was missing from musl by accident.\n\nin musl the sockios macros are exposed in sys/ioctl.h together\nwith other ioctl requests instead of in sys/socket.h because of\nnamespace rules. (glibc has them in sys/socket.h under _GNU_SOURCE.)\n"},{"hash":"c7f56b4d2f58714b7286ef12fa5410213847f2fe","date":"2017-08-29T23:50:48.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"__init_libc: add fallbacks for __progname setup\n\nIt is possible for argv[0] to be a null pointer, but the __progname\nvariable is used to implement functions in src/legacy/err.c that do not\nexpect it to be null. It is also available to the user via the\nprogram_invocation_name alias as a GNU extension, and the implementation\nin Glibc initializes it to a pointer to empty string rather than NULL.\n\nSince argv[0] is usually non-null and it's preferable to keep those\nvariables in BSS, implement the fallbacks in __init_libc, which also\nallows to have an intermediate fallback to AT_EXECFN.\n"},{"hash":"9d4c902c42b3fda368d7ea64bb9575c46228fa7f","date":"2017-08-29T23:53:50.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix undefined behavior in memset due to missing sequence points\n\npatch by Pascal Cuoq.\n"},{"hash":"5f3b652afe423dd2bd6f266535f79f685909cf60","date":"2017-08-30T00:48:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add powerpc64 and s390x to list of supported archs in INSTALL file\n"},{"hash":"5f7efb87a28a311ad377dd26adf53715dedb096d","date":"2017-08-30T00:50:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move IPPORT_RESERVED from netdb.h to netinet/in.h\n\nit's in the reserved namespace for the latter, where it seems it was\nhistorically defined, and some programs expect to find it there.\n"},{"hash":"3356177979bea717451362e746252ed38de77514","date":"2017-08-30T01:40:35.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"s390x: add bits/hwcap.h\n\naligned with linux arch/s390/include/asm/elf.h\n(these macros should be exported into uapi, but they are not)\n"},{"hash":"06fbefd10046a0fae7e588b7c6d25fb51811b931","date":"2017-08-30T01:47:10.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add a_clz_64 helper function\n\ncounts leading zero bits of a 64bit int, undefined on zero input.\n(has nothing to do with atomics, added to atomic.h so target specific\nhelper functions are together.)\n\nthere is a logarithmic generic implementation and another in terms of\na 32bit a_clz_32 on targets where that's available.\n"},{"hash":"8459c6f2647a378eca2c6375210ddf29dd499043","date":"2017-08-30T02:16:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"arm: add HWCAP_ARM_ hwcap macros\n\nGlibc renamed the linux uapi HWCAP_* macros to HWCAP_ARM_*\nso have both variants in case some code depends on it.\n(The HWCAP2_ macros are not defined in glibc currently so those\nonly have the linux uapi variant.)\n"},{"hash":"11ddc314b57196519316103b02acffe10299dad3","date":"2017-08-31T19:48:00.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix erroneous stop before input limit in mbsnrtowcs and wcsnrtombs\n\nthe value computed as an output limit that bounds the amount of input\nconsumed below the input limit was incorrectly being used as the\nactual amount of input consumed. instead, compute the actual amount of\ninput consumed as a difference of pointers before and after the\nconversion.\n\npatch by Mikhail Kremnyov.\n"},{"hash":"39db00afadc9d8d0456c46eab42b8cb8ff9f375c","date":"2017-09-01T21:05:40.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix erroneous acceptance of f4 9x xx xx code sequences by utf-8 decoder\n\nthe DFA table controlling accepted ranges for the f4 prefix used an\nincorrect upper bound of 0xa0 where it should have been 0x90, allowing\nsuch sequences to be accepted and decoded as non-Unicode-scalar values\n0x110000 through 0x11ffff.\n"},{"hash":"8e932792c917d11545c2953b35159149f7411eca","date":"2017-09-04T19:55:05.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"overhaul environment functions\n\nRewrite environment access functions to slim down code, fix bugs and\navoid invoking undefined behavior.\n\n* avoid using int-typed iterators where size_t would be correct;\n* use strncmp instead of memcmp consistently;\n* tighten prologues by invoking __strchrnul;\n* handle NULL environ.\n\nputenv:\n* handle \"=value\" input via unsetenv too (will return -1/EINVAL);\n* rewrite and simplify __putenv; fix the leak caused by failure to\n  deallocate entry added by preceding setenv when called from putenv.\n\nsetenv:\n* move management of libc-allocated entries to this translation unit,\n  and use no-op weak symbols in putenv/unsetenv;\n\nunsetenv:\n* rewrite; this fixes UB caused by testing a free'd pointer against\n  NULL on entry to subsequent loops.\n\nNot changed:\nFailure to extend allocation tracking array (previously __env_map, now\nenv_alloced) is ignored rather than causing to report -1/ENOMEM to the\ncaller; the worst-case consequence is leaking this allocation when it\nis removed or replaced in a subsequent environment access.\n\nInitially UB in unsetenv was reported by Alexander Cherepanov.\nUsing a weak alias to avoid pulling in malloc via unsetenv was\nsuggested by Rich Felker.\n"},{"hash":"cc0dbd5f09337c187156fe8b697245e6ea9263d0","date":"2017-09-04T19:55:21.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"free allocations in clearenv\n\nThis aligns clearenv with the Linux man page by setting 'environ'\nrather than '*environ' to NULL, and stops it from leaking entries\nallocated by the libc.\n"},{"hash":"51bdcdc424bd7169c8cccdc2de7cad17f5ea0f70","date":"2017-09-04T20:38:03.000Z","author":{"name":"Alexander Monakov","email":"amonakov@ispras.ru"},"message":"fix OOB reads in Xbyte_memmem\n\nReported by Leah Neukirchen.\n"},{"hash":"9255dad97e7bfd4165d1aa0f93f2aae321a7a4d8","date":"2017-09-04T20:59:38.000Z","author":{"name":"Bartosz Brachaczek","email":"b.brachaczek@gmail.com"},"message":"handle whitespace before %% in scanf\n\nthis is mandated by C and POSIX standards and is in accordance with\nglibc behavior.\n"},{"hash":"822dddfbf1884553341114663aff56ed87d57663","date":"2017-09-06T23:29:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"make syscall.h consistent with linux\n\nmost of the found naming differences don't matter to musl, because\ninternally it unifies the syscall names that vary across targets,\nbut for external code the names should match the kernel uapi.\n\naarch64:\n\t__NR_fstatat is called __NR_newfstatat in linux.\n\t__NR_or1k_atomic got mistakenly copied from or1k.\narm:\n\t__NR_arm_sync_file_range is an alias for __NR_sync_file_range2\n\t__NR_fadvise64_64 is called __NR_arm_fadvise64_64 in linux,\n\tthe old non-arm name is kept too, it should not cause issues.\n\t(powerpc has similar nonstandard fadvise and it uses the\n\tnormal name.)\ni386:\n\t__NR_madvise1 was removed from linux in commit\n\t303395ac3bf3e2cb488435537d416bc840438fcb 2011-11-11\nmicroblaze:\n\t__NR_fadvise, __NR_fstatat, __NR_pread, __NR_pwrite\n\thad different name in linux.\nmips:\n\t__NR_fadvise, __NR_fstatat, __NR_pread, __NR_pwrite, __NR_select\n\thad different name in linux.\nmipsn32:\n\t__NR_fstatat is called __NR_newfstatat in linux.\nor1k:\n\t__NR__llseek is called __NR_llseek in linux.\n\tthe old name is kept too because that's the name musl uses\n\tinternally.\npowerpc:\n\t__NR_{get,set}res{gid,uid}32 was never present in powerpc linux.\n\t__NR_timerfd was briefly defined in linux but then got renamed.\n"},{"hash":"9e01be6e49b9ae433072207f420ef33c8189eb78","date":"2017-09-07T00:37:19.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix signal masking race in pthread_create with priority attributes\n\nif the parent thread was able to set the new thread's priority before\nit reached the check for 'startlock', the new thread failed to restore\nits signal mask and thus ran with all signals blocked.\n\nconcept for patch by Sergei, who reported the issue; unnecessary\nchanges were removed and comments added since the whole 'startlock'\nthing is non-idiomatic and confusing. eventually it should be replaced\nwith use of idiomatic synchronization primitives.\n"},{"hash":"565dbee24d4bf55728be1c274fca1e7f3196fd73","date":"2017-09-07T01:42:15.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"don't treat numeric port strings as servent records in getservby*()\n\nsome applications use getservbyport to find port numbers that are not\nassigned to a service; if getservbyport always succeeds with a numeric\nstring as the result, they fail to find any available ports.\n\nPOSIX doesn't seem to mandate the behavior one way or another. it\nspecifies an abstract service database, which an implementation could\ndefine to include numeric port strings, but it makes more sense to\nalign behavior with traditional implementations.\n\nbased on patch by A. Wilcox. the original patch only changed\ngetservbyport[_r]. to maintain a consistent view of the \"service\ndatabase\", I have also modified getservbyname[_r] to exclude numeric\nport strings.\n"},{"hash":"8c4be3e2209d2a1d3874b8bc2b474668fcbbbac6","date":"2017-09-07T01:59:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix glob descent into . and .. with GLOB_PERIOD\n\nGLOB_PERIOD is a gnu extension, and GNU glob does not seem to honor it\nexcept in the last path component. it's not clear whether this a bug\nor intentional, but it seems reasonable that it should exclude the\nspecial entries . and .. when walking.\n\nchanges based on report and analysis by Julien Ramseier.\n"},{"hash":"da438ee1fc516c41ba1790cef7be551a9e244397","date":"2017-09-07T02:15:14.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"work around incorrect EPERM from mmap syscall\n\nunder some conditions, the mmap syscall wrongly fails with EPERM\ninstead of ENOMEM when memory is exhausted; this is probably the\nresult of the kernel trying to fit the allocation somewhere that\ncrosses into the kernel range or below mmap_min_addr. in any case it's\na conformance bug, so work around it. for now, only handle the case of\nanonymous mappings with no requested address; in other cases EPERM may\nbe a legitimate error.\n\nthis indirectly fixes the possibility of malloc failing with the wrong\nerrno value.\n"},{"hash":"c10bc61508dc52b8315084e628f36a6c3c2dabb1","date":"2017-09-11T18:06:27.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"powerpc{64}: fix MAP_NORESERVE and MAP_LOCKED in mman.h\n\nMAP_{NORESERVE,LOCKED} have different values on powerpc than in generic.\n"},{"hash":"48be5b6313d7b827acf555769e93b389fa9f6307","date":"2017-09-28T16:57:06.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix use of memset without declaration in sched.h cpu set macros\n\npatch by Jörg Krause.\n"},{"hash":"e364774d7ca0a78db1b8457d5094b747eb2df318","date":"2017-10-13T14:28:52.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix access by setjmp and longjmp to __hwcap on arm built as thumb2\n\nthis is a subtle issue with how the assembler/linker work. for the adr\npseudo-instruction used to find __hwcap, the assembler in thumb mode\ngenerates a 16-bit thumb add instruction which can only represent\nword-aligned addresses, despite not knowing the alignment of the\nlabel. if the setjmp function is assigned a non-multiple-of-4 address\nat link time, the load then loads from the wrong address (the last\ninstruction rather than the data containing the offset) and ends up\nreading nonsense instead of the value of __hwcap. this in turn causes\nthe checks for floating-point/vector register sets (e.g. IWMMX) to\nevaluate incorrectly, crashing when setjmp/longjmp try to save/restore\nthose registers.\n\nfix based on bug report by Felix Hädicke.\n"},{"hash":"b3516058eb9ff9e52a8720f0e5c0f6936cce6047","date":"2017-10-13T14:39:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"for executing init array functions, use function type with prototype\n\nthis is for consistency with the way it's done in in the dynamic\nlinker, avoiding a deprecated C feature (non-prototype function\ntypes), and improving code generation. GCC unnecessarily uses the\nvariadic calling convention (e.g. clearing rax on x86_64) when making\na call where the argument types are not known for compatibility with\nwrong code which calls variadic functions this way. (C on the other\nhand is clear that such calls have undefined behavior.)\n"},{"hash":"907476925fca05f24ebca5fcdc21f1e58ba7b313","date":"2017-10-14T02:30:45.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"math: rewrite fma with mostly int arithmetics\n\nthe freebsd fma code failed to raise underflow exception in some\ncases in nearest rounding mode (affects fmal too) e.g.\n\n  fma(-0x1p-1000, 0x1.000001p-74, 0x1p-1022)\n\nand the inexact exception may be raised spuriously since the fenv\nis not saved/restored around the exact multiplication algorithm\n(affects x86 fma too).\n\nanother issue is that the underflow behaviour when the rounded result\nis the minimal normal number is target dependent, ieee754 allows two\nways to raise underflow for inexact results: raise if the result before\nrounding is in the subnormal range (e.g. aarch64, arm, powerpc) or if\nthe result after rounding with infinite exponent range is in the\nsubnormal range (e.g. x86, mips, sh).\n\nto avoid all these issues the algorithm was rewritten with mostly int\narithmetics and float arithmetics is only used to get correct rounding\nand raise exceptions according to the behaviour of the target without\nany fenv.h dependency. it also unifies x86 and non-x86 fma.\n\nfmaf is not affected, fmal need to be fixed too.\n\nthis algorithm depends on a_clz_64 and it required a few spurious\ninstructions to make sure underflow exception is raised in a particular\ncorner case. (normally FORCE_EVAL(tiny*tiny) would be used for this,\nbut on i386 gcc is broken if the expression is constant\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=57245\nand there is no easy portable fix for the macro.)\n"},{"hash":"c1e27367a9b26b9baac0f37a12349fc36567c8b6","date":"2017-10-14T03:00:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix read-after-free type error in pthread_detach\n\ncalling __unlock on t->exitlock is not valid because __unlock reads\nthe waiters count after making the atomic store that could allow\npthread_exit to continue and unmap the thread's stack and the object t\npoints to. for now, inline the __unlock logic with an unconditional\nfutex wake operation so that the waiters count is not needed.\n\nonce __lock/__unlock have been made safe for self-synchronized\ndestruction, we could switch back to using them.\n"},{"hash":"5b5eb527c5ed5ca2786bf82892a04ca3bdf33d31","date":"2017-10-14T03:08:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix incorrect base name offset from nftw when pathname ends in slash(es)\n\nthe rightmost '/' character is not necessarily the delimiter before\nthe basename; it could be a spurious trailing character on the\ndirectory name.\n\nthis change does not introduce any normalization of pathnames or\nstripping of trailing slashes, contrary to at least glibc and perhaps\nother implementations; it jusst prevents their presence from breaking\nthings. whether further changes should be made is an open question\nthat may depend on conformance and/or application compatibility\nconsiderations.\n\nbased loosely on patch by Joakim Sindholt.\n"},{"hash":"45ca5d3fcb6f874bf5ba55d0e9651cef68515395","date":"2017-10-18T18:50:03.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"in dns parsing callback, enforce MAXADDRS to preclude overflow\n\nMAXADDRS was chosen not to need enforcement, but the logic used to\ncompute it assumes the answers received match the RR types of the\nqueries. specifically, it assumes that only one replu contains A\nrecord answers. if the replies to both the A and the AAAA query have\ntheir answer sections filled with A records, MAXADDRS can be exceeded\nand clobber the stack of the calling function.\n\nthis bug was found and reported by Felix Wilhelm.\n"},{"hash":"2cd663fb2d576d590a08c1e40386c07b378d5ad6","date":"2017-10-19T19:39:01.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.17\n"},{"hash":"004dc9549b8003288e635ba5aa91e3353e1974c4","date":"2017-10-19T23:04:16.000Z","author":{"name":"Will Dietz","email":"w@wdtz.org"},"message":"posix_spawn: use larger stack to cover worst-case in execvpe\n\nexecvpe stack-allocates a buffer used to hold the full path\n(combination of a PATH entry and the program name)\nwhile searching through $PATH, so at least\nNAME_MAX+PATH_MAX is needed.\n\nThe stack size can be made conditionally smaller\n(the current 1024 appears appropriate)\nshould this larger size be burdensome in those situations.\n"},{"hash":"ec04d122f1182aeb91f39b0e80ae40c68e4d9605","date":"2017-10-21T16:32:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix regression in glob with literal . or .. path component\n\ncommit 8c4be3e2209d2a1d3874b8bc2b474668fcbbbac6 was written to\npreclude the GLOB_PERIOD extension from matching these directory\nentries, but also precluded literal matches.\n\nadjust the check that excludes . and .. to check whether the\nGLOB_PERIOD flag is in effect, so that it cannot alter behavior in\ncases governed by the standard, and also don't exclude . or .. in any\ncase where normal glob behavior (fnmatch's FNM_PERIOD flag) would have\nincluded one or both of them (patterns such as \".*\").\n\nit's still not clear whether this is the preferred behavior for\nGLOB_PERIOD, but at least it's clear that it can no longer break\napplications which are not relying on quirks of a nonstandard feature.\n"},{"hash":"1b9406b03c0a94ebe2076a8fc1746a8c45e78a83","date":"2017-10-25T15:54:16.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix build regression on ARM for ISA levels less than v5\n\ncommit 06fbefd10046a0fae7e588b7c6d25fb51811b931 (first included in\nrelease 1.1.17) introduced this regression.\n\npatch by Adrian Bunk. it fixes the regression in all cases, but\nspuriously prevents use of the clz instruction on very old compiler\nversions that don't define __ARM_ARCH. this may be fixed in a more\ngeneral way at some point in the future. it also omits thumb1 logic\nsince building as thumb1 code is currently not supported.\n"},{"hash":"eb03bde2f24582874cb72b56c7811bf51da0c817","date":"2017-10-31T19:13:58.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"release 1.1.18\n"},{"hash":"6fc6ca1a323bc0b6b9e9cdc8fa72221ae18fe206","date":"2017-11-05T22:26:48.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust posix_spawn dup2 action behavior to match future requirements\n\nthe resolution to Austin Group issue #411 defined new semantics for\nthe posix_spawn dup2 file action in the (previously useless) case\nwhere src and dest fd are equal. future issues will require the dup2\nfile action to remove the close-on-exec flag. without this change,\npassing fds to a child with posix_spawn while avoiding fd-leak races\nin a multithreaded parent required a complex dance with temporary fds.\n\nbased on patch by Petr Skocik. changes were made to preserve the\n80-column formatting of the function and to remove code that became\nunreachable as a result of the new functionality.\n"},{"hash":"5c596ed8673836109d5f63a9eaa35d1196b96882","date":"2017-11-05T23:39:25.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SCM_TIMESTAMPING_OPT_STATS and related TCP_ enums from linux v4.10\n\nfor tcp timestamp control messages, new in linux commit\n1c885808e45601b2b6f68b30ac1d999e10b6f606\nand export time measurements via tcp_info, added in linux commit\nefd90174167530c67a54273fd5d8369c87f9bd32\n"},{"hash":"013696918bc9e8b879ddb6f1fa7b3686eef6e702","date":"2017-11-05T23:39:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add IP_RECVFRAGSIZE and IPV6_RECVFRAGSIZE from linux v4.10\n\nadded in linux commit 70ecc24841326396a827deb55c3fefac582a729d\n"},{"hash":"f5638c22e3599a720f80da76f2827e5b0f6383ae","date":"2017-11-05T23:40:53.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add ETH_MIN_MTU and ETH_MAX_MTU from linux v4.10\n\nmin max mtu size definitions mostly for drivers.\nnew in linux commits a52ad514fdf3b8a57ca4322c92d2d8d5c6182485 and\nd894be57ca92c8a8819ab544d550809e8731137b\n"},{"hash":"d800403032b17b266430f0679c71f032de430197","date":"2017-11-05T23:40:58.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add TFD_TIMER_CANCEL_ON_SET that timerfd.h was missing\n\nlinux commit 575b1967e10a1f3038266244d2c7a3ca6b99fed8 moved timerfd\napis to a new uapi header which showed musl was missing this flag.\n"},{"hash":"8f5695571322868d89620fca0dc05ffc37bbc040","date":"2017-11-05T23:41:00.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add microblaze syscall numbers from linux v4.10\n\nmissing syscalls got allocated on microblaze.\n"},{"hash":"cee73f0c10535f87e3e108697a4af5453f5f04c0","date":"2017-11-05T23:41:02.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add kexec_file_load syscall number on powerpc from linux v4.10\n\nadded in linux commit 80f60e509a03ff9ff2bdbf9cd1e935c6360b8bd9\n"},{"hash":"bd1560f6eb5127501ad6b7905479b4135c3d1a02","date":"2017-11-05T23:41:04.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"update aarch64 hwcap.h for linux v4.11\n\nnew hwcap bits were added in kernel commits\n77c97b4ee21290f5f083173d957843b615abbff2\nf92f5ce01ee6a6a86cbfc4e3b0d18529c302b1ea\n"},{"hash":"3eb82f7338e74a5b2f1de6a62a72927452b327a2","date":"2017-11-05T23:41:06.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add ETH_P_IBOE from linux v4.11\n\nnew in linux commit 69ae543969abeba48e04dd93277684c8c0895f3b\n"},{"hash":"ee3ae7827b00c734a3c32839fb1427015900e598","date":"2017-11-05T23:41:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add TCP_FASTOPEN_CONNECT tcp socket option from linux v4.11\n\nnew in linux commit 19f6d3f3c8422d65b5e3d2162e30ef07c6e21ea2\n"},{"hash":"c519658ceaf19e1e080ae337a79b56d37dae271c","date":"2017-11-05T23:41:09.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add TCP_NLA_* enums from linux v4.11\n\ntwo new stats for SCM_TIMESTAMPING_OPT_STATS, added in linux commit\n7e98102f489775d8c000884fca8a0d995ea688a9\n"},{"hash":"9864f60e929100e253fc813bd4105d6dd7652787","date":"2017-11-05T23:41:11.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add statx syscall numbers from linux v4.11\n\nstatx was added in linux commit a528d35e8bfcc521d7cb70aaf03e1bd296c8493f\n(there is no libc wrapper yet and microblaze and sh misses the number).\n"},{"hash":"54f04d9991c000c7f46eed3dd85b741d840e7164","date":"2017-11-05T23:41:13.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new SO_ socket options from linux v4.12\n\nSO_MEMINFO added in linux commit a2d133b1d465016d0d97560b11f54ba0ace56d3e\nSO_INCOMING_NAPI_ID added in 6d4339028b350efbf87c61e6d9e113e5373545c9\nSO_COOKIE added in 5daab9db7b65df87da26fd8cfa695fb9546a1ddb\n"},{"hash":"4c811227110ddeb1ccd03ce295a6e8f6ccb905ea","date":"2017-11-05T23:41:14.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add ARPHDR_VSOCKMON from linux v4.12\n\nnew in linux commit 531b374834c891ae2abf800693074df35a7d1a36\n"},{"hash":"840d45bebd3558cf72ebab6368620a7919641e1d","date":"2017-11-05T23:41:16.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: add new HWCAP_* flags from linux v4.12\n\nhwcap bits for armv8.3 extensions, added in linux commits\nc8c3798d2369e4285da44b244638eafe446a8f8a\ncb567e79fa504575cb97fb2f866d2040ed1c92e7\nc651aae5a7732287c1c9bc974ece4ed798780544\n"},{"hash":"2dc6760f3c1013796e4d05798aff824c85bc5265","date":"2017-11-05T23:41:18.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"i386: add arch_prctl syscall number from linux v4.12\n\nsyscall for i386 compat mode on x86_64 for non-x86_64 prctls.\nnew in linux commit 79170fda313ed5be2394f87aa2a00d597f8ed4a1\n"},{"hash":"5daaed6a0efd8a2b1410ff5395a6b3bb0e1a907e","date":"2017-11-05T23:41:19.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"s390x: add syscall number for s390_guarded_storage from linux v4.12\n\nnew syscall in linux commit 916cda1aa1b412d7cf2991c3af7479544942d121\n"},{"hash":"c35a8bf456ca6ef74e3cc7c4d8f63572bc1e1167","date":"2017-11-05T23:41:21.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add SO_ getsockopt options from linux v4.13\n\nSCM_TIMESTAMPING_PKTINFO is new in aad9c8c470f2a8321a99eb053630ce0e199558d6\nSO_PEERGROUPS is new in 28b5ba2aa0f55d80adb2624564ed2b170c19519e\n"},{"hash":"754f66afb76f59bb4c43f303fb9406a3841a448f","date":"2017-11-05T23:41:22.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"ioctl TIOCGPTPEER from linux v4.13\n\nadded for safe opening of peer end of pty in a mount namespace.\nnew in linux commit c6325179238f1d4683edbec53d8322575d76d7e2\n"},{"hash":"14ced22830ef6cbf8e2526d3131c2b443c3f57dd","date":"2017-11-05T23:41:24.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new fcntl.h macros from linux v4.13\n\nfor getting/setting write lifetime hints fcntl commands were\nadded in linux commit c75b1d9421f80f4143e389d2d50ddfc8a28c8c35\n\nadded under _GNU_SOURCE || _BSD_SOURCE, since RWH_* life time\nhints are not in the POSIX reserved namespace.\n"},{"hash":"6651ef1f060738ee1f50cac1fe6d8ce64c359022","date":"2017-11-05T23:41:26.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"add new tcp.h socket options from linux v4.13\n\nTCP_ULP is new in linux commit 734942cc4ea6478eed125af258da1bdbb4afe578\nTCP_MD5SIG_EXT is new in 8917a777be3ba566377be05117f71b93a5fd909d\n"},{"hash":"ffd048a07b4bc3bd01bef71a77b49aa9cee947cf","date":"2017-11-05T23:41:27.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"aarch64: add extra_context struct from linux v4.13\n\nallows expanding the signal frame beyond the 4k reserved space.\nnew in linux commit 33f082614c3443d937f50fe936f284f62bbb4a1b\n"},{"hash":"4dc44ce8e2948aae55bc7dd6eda517167af7da32","date":"2017-11-05T23:41:29.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"microblaze: add statx syscall from linux v4.13\n\nstatx number is allocated for microblaze in linux commit\nf5ef419630e85e80284cd0256cb5a13a66bbd6c5\n"},{"hash":"13935337f3e9bbf9db9e6403d761bc670ea1a6d5","date":"2017-11-05T23:43:51.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"s390x: use generic ioctl.h\n\ns390 can use the generic ioctls definitions other than FIOQSIZE (like arm).\n\nthis fixes some missing ioctls and two incorrect ones:\nTIOCTTYGSTRUCT and TIOCM_MODEM_BITS seem to be defined on frv\ntarget only in linux.\n"},{"hash":"67b29947893cd5991a8cbab8aef4f3b2ebfa73fe","date":"2017-11-10T00:56:26.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix mismatched type of __pthread_tsd_run_dtors weak definition\n\ncommit a6054e3c94aa0491d7366e4b05ae0d73f661bfe2 changed this function\nnot to take an argument, but the weak definition used by timer_create\nwas not updated to match.\n\nreported by Pascal Cuoq.\n"},{"hash":"30fdda6c998d9fc87601b50c7fea4447d52f8d12","date":"2017-11-10T01:15:02.000Z","author":{"name":"A. Wilcox","email":"AWilcox@Wilcox-Tech.com"},"message":"fix getaddrinfo error code for non-numeric service with AI_NUMERICSERV\n\nIf AI_NUMERICSERV is specified and a numeric service was not provided,\nPOSIX mandates getaddrinfo return EAI_NONAME. EAI_SERVICE is only for\nservices that cannot be used on the specified socket type.\n"},{"hash":"79f49effa0a82d88a9bb0b1992ed2e5fa807f900","date":"2017-11-10T05:15:09.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"refactor iconv conversion descriptor encoding/decoding\n\nthis change is made to avoid having assumptions about the encoding\nspread out across the file, and to facilitate future change to a form\nthat can accommodate allocted, stateful descriptors when needed.\n\nthis commit should not produce any functional changes; with the\ncompiler tested the only change to code generation was minor\nreordering of local variables on stack.\n"},{"hash":"bff59d13a82cd4c02792fd73da0e7c79bda022ff","date":"2017-11-10T05:27:34.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"move iconv_close to its own translation unit\n\nthis is in preparation to support stateful conversion descriptors,\nwhich are necessarily allocated and thus must be freed in iconv_close.\nputting it in a separate TU will avoid pulling in free if iconv_close\nis not referenced.\n"},{"hash":"9eb6dd5165b803715f82b9f5d4b557878f77a580","date":"2017-11-10T18:34:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"handle ascii range individually in each iconv case\n\nshort-circuiting low bytes before the switch precluded support for\ncharacter encodings that don't coincide with ascii in this range. this\nlimitation affected iso-2022 encodings, which use the esc byte to\nintroduce a shift sequence, and things like ebcdic.\n"},{"hash":"0df5b39a1e9c8aaf480e3f8667d7967e08bbef2b","date":"2017-11-10T18:40:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"simplify/optimize iconv utf-8 case\n\nthe special case where mbrtowc returns 0 but consumed 1 byte of input\ndoes not need to be considered, because the short-circuit for low\nbytes already covered that case.\n"},{"hash":"5b546faa67544af395d6407553762b37e9711157","date":"2017-11-10T20:06:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add iconv framework for decoding stateful encodings\n\nassuming pointers obtained from malloc have some nonzero alignment,\nrepurpose the low bit of iconv_t as an indicator that the descriptor\nis a stateless value representing the source and destination character\nencodings.\n"},{"hash":"a39f20bf9f8e59573a479bff23df345b2b4d2345","date":"2017-11-10T22:22:43.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add iso-2022-jp support (decoding only) to iconv\n\nthis implementation aims to match the baseline defined by rfc1468 (the\noriginal mime charset definition) plus the halfwidth katakana\nextension included in the whatwg definition of the charset. rejection\nof si/so controls and newlines in doublebyte state are not currently\nenforced. the jis x 0201 mode is currently interpreted as having the\nyen sign and overline character in place of backslash and tilde; ascii\nmode has the standard ascii characters in those slots.\n"},{"hash":"c21051e90cd27a0b26be0ac66950b7396a156ba1","date":"2017-11-11T00:27:57.000Z","author":{"name":"Bobby Bingham","email":"koorogi@koorogi.info"},"message":"prevent fork's errno from being clobbered by atfork handlers\n\nIf the syscall fails, errno must be set correctly for the caller.\nThere's no guarantee that the handlers registered with pthread_atfork\nwon't clobber errno, so we need to ensure it gets set after they are\ncalled.\n"},{"hash":"d060edf6c569ba9df4b52d6bcd93edde812869c9","date":"2017-11-11T07:04:30.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reformat cjk iconv tables to be diff-friendly, match tool output\n\nthe new version of the code used to generate these tables forces a\nnewline every 256 entries, whereas at the time these files were\noriginally generated and committed, it only wrapped them at 80\ncolumns. the new behavior ensures that localized changes to the\ntables, if they are ever needed, will produce localized diffs. other\ntables including hkscs were already committed in the new format.\n\nbinary comparison of the generated object files was performed to\nconfirm that no spurious changes slipped in.\n"},{"hash":"a71b46cfd289aa0ff829fc9a436c59c398f8326d","date":"2017-11-13T20:27:10.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix malloc state corruption when ldso rejects loading a second libc\n\ncommit c49d3c8adadfa24235fcf4779bb722b1aa6f480b added logic to detect\nattempts to load libc.so via another name and instead redirect to the\nexisting libc, rather than loading two and producing dangerously\ninconsistent state. however, the check for and unmapping of the\nduplicate libc happened after reclaim_gaps was already called,\ndonating the slack space around the writable segment to malloc.\nsubsequent unmapping of the library then invalidated malloc's free\nlists.\n\nfix the issue by moving the call to reclaim_gaps out of map_library\ninto load_library, after the duplicate libc check but before the first\ncall to calloc, so that the gaps can still be used to satisfy the\nallocation of struct dso. this change also eliminates the need for an\nugly hack (temporarily setting runtime=1) to avoid reclaim_gaps when\nloading the main program via map_library, which happens when ldso is\ninvoked as a command.\n\nonly programs/libraries erroneously containing a DT_NEEDED reference\nto libc.so via an absolute pathname or symlink were affected by this\nissue.\n"},{"hash":"105eff9dec51bc4898a74af2854ab71f927a5c3b","date":"2017-11-13T23:34:27.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"generalize iconv framework for 8-bit codepages\n\npreviously, 8-bit codepages could only remap the high 128 bytes; the\nlow range was assumed/forced to agree with ascii. interpretation of\ncodepage table headers has been changed so that it's possible to\nrepresent mappings for up to 256 slots (fewer if the initial portion\nof the map is elided because it coincides with unicode codepoints).\nthis requires consuming a bit more of the 10-bit space of characters\nthat can be represented in 8-bit codepages, but there's still a plenty\nleft. the size of the legacy_chars table is actually reduced now by\neliding the first 256 entries and considering them to map implicitly\nvia the identity map.\n\nbefore these changes, there seem to have been minor bugs/omissions in\ncodepage table generation, so it's likely that some actual bug fixes\nare silently included in this commit. round-trip testing of a few\ncodepages was performed on the new version of the code, but no\ndifferential testing against the old version was done.\n"},{"hash":"a223dbd27ae36fe53f9f67f86caf685b729593fc","date":"2017-11-15T04:54:02.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add reverse iconv mappings for JIS-based encodings\n\nthese encodings are still commonly used in messaging protocols and\nsuch. the reverse mapping is implemented as a binary search of a list\nof the jis 0208 characters in unicode order; the existing forward\ntable is used to perform the comparison in the search.\n"},{"hash":"72656157f54c47277b01ec85a6ba7c4084fea6c8","date":"2017-11-19T01:11:08.000Z","author":{"name":"Szabolcs Nagy","email":"nsz@port70.net"},"message":"fix fgetwc when decoding a character that crosses buffer boundary\n\nUpdate the buffer position according to the bytes consumed into st when\ndecoding an incomplete character at the end of the buffer.\n"},{"hash":"a90d9da1d1b14d81c4f93e1a6d1a686c3312e4ba","date":"2017-11-20T21:21:25.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix treatment by fgetws of encoding errors as eof\n\nfgetwc does not set the stream's error indicator on encoding errors,\nmaking ferror insufficient to distinguish between error and eof\nconditions. feof is also insufficient, since it will return true if\nthe file ended with a partial character encoding error.\n\nwhether fgetwc should be setting the error indicator itself is a\nquestion with conflicting answers. the POSIX text for the function\nstates it as a requirement, but the ISO C text seems to require that\nit not. this may be revisited in the future based on the outcome of\nAustin Group issue #1170.\n"},{"hash":"4000b0107ddd7fe733fa31d4f078c6fcd35851d6","date":"2017-11-20T21:25:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"make fgetwc handling of encoding errors consistent with/without buffer\n\npreviously, fgetwc left all but the first byte of an illegal sequence\nunread (available for subsequent calls) when reading out of the FILE\nbuffer, but dropped all bytes contibuting to the error when falling\nback to reading a byte at a time. neither behavior was ideal. in the\nbuffered case, each malformed character produced one error per byte,\nrather than one per character. in the unbuffered case, consuming the\nlast byte that caused the transition from \"incomplete\" to \"invalid\"\nstate potentially dropped (and produced additional spurious encoding\nerrors for) the next valid character.\n\nto handle both cases uniformly without duplicate code, revise the\nbuffered case to only cover situations where a complete and valid\ncharacter is present in the buffer, and fall back to byte-at-a-time\nfor all other cases. this allows using mbtowc (stateless) instead of\nmbrtowc, which may slightly improve performance too.\n\nwhen an encoding error has been hit in the byte-at-a-time case, leave\nthe final byte that produced the error unread (via ungetc) except in\nthe case of single-byte errors (for UTF-8, bytes c0, c1, f5-ff, and\ncontinuation bytes with no lead byte). single-byte errors are fully\nconsumed so as not to leave the caller in an infinite loop repeating\nthe same error.\n\nnone of these changes are distinguished from a conformance standpoint,\nsince the file position is unspecified after encoding errors. they are\nintended merely as QoI/consistency improvements.\n"},{"hash":"061843340fbf2493bb615e20e66f60c5d1ef0455","date":"2017-12-06T18:11:48.000Z","author":{"name":"William Pitcock","email":"nenolod@dereferenced.org"},"message":"implement the fopencookie extension to stdio\n\nnotes added by maintainer:\n\nthis function is a GNU extension. it was chosen over the similar BSD\nfunction funopen because the latter depends on fpos_t being an\narithmetic type as part of its public API, conflicting with our\ndefinition of fpos_t and with the intent that it be an opaque type. it\nwas accepted for inclusion because, despite not being widely used, it\nis usually very difficult to extricate software using it from the\ndependency on it.\n\ncalling pattern for the read and write callbacks is not likely to\nmatch glibc or other implementations, but should work with any\nreasonable callbacks. in particular the read function is never called\nwithout at least one byte being needed to satisfy its caller, so that\nspurious blocking is not introduced.\n\ncontracts for what callbacks called from inside libc/stdio can do are\nalways complicated, and at some point still need to be specified\nexplicitly. at the very least, the callbacks must return or block\nindefinitely (they cannot perform nonlocal exits) and they should not\nmake calls to stdio using their own FILE as an argument.\n"},{"hash":"2488d31f5a946e63e40058baf29fd2991343ea6f","date":"2017-12-06T18:14:22.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"adjust fopencookie structure tag for ABI-compat\n\nstdio types use the struct tag names from glibc libio to match C++\nABI.\n"},{"hash":"8a6bd7307da3fc4d08dd6a9277b611ccb4971354","date":"2017-12-11T20:51:30.000Z","author":{"name":"Timo Teräs","email":"timo.teras@iki.fi"},"message":"implement strftime padding specifier extensions\n\nnotes added by maintainer:\n\nthe '-' specifier allows default padding to be suppressed, and '_'\nallows padding with spaces instead of the default (zeros).\n\nthese extensions seem to be included in several other implementations\nincluding FreeBSD and derivatives, and Solaris. while portable\nsoftware should not depend on them, time format strings are often\nexposed to the user for configurable time display. reportedly some\npython programs also use and depend on them.\n"},{"hash":"01957bed1e88b77f8271b6157c83c0d7f6be302c","date":"2017-12-12T18:12:12.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add ibm1047 codepage (ebcdic representation of latin1) to iconv\n"},{"hash":"64303156832bc555d11c181168db1e7834ac7069","date":"2017-12-14T23:54:54.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix data race in at_quick_exit\n\naside from theoretical arbitrary results due to UB, this could\npractically cause unbounded overflow of static array if hit, but\nhitting it depends on having more than 32 calls to at_quick_exit and\nhaving them sufficiently often.\n"},{"hash":"131276809fe3b7bed6086772bc5e3e9941dc6c6c","date":"2017-12-15T02:22:51.000Z","author":{"name":"Nicholas Wilson","email":"nicholas.wilson@realvnc.com"},"message":"fix x32 unistd macros to report as ILP32 not LP64\n"},{"hash":"3ec82877e7783f0706ba3c9e3c815cd2aa34059e","date":"2017-12-15T02:25:10.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"fix sysconf for infinite rlimits\n\nsysconf should return -1 for infinity, not LONG_MAX.\n"},{"hash":"eb7f93c4f6fd0b637a9f8d6e112131b88ad2b00f","date":"2017-12-15T02:33:30.000Z","author":{"name":"Natanael Copa","email":"ncopa@alpinelinux.org"},"message":"use the name UTC instead of GMT for UTC timezone\n\nnotes by maintainer:\n\nboth C and POSIX use the term UTC to specify related functionality,\ndespite POSIX defining it as something more like UT1 or historical\n(pre-UTC) GMT without leap seconds. neither specifies the associated\nstring for %Z. old choice of \"GMT\" violated principle of least\nsurprise for users and some applications/tests. use \"UTC\" instead.\n"},{"hash":"2a831786f0be3f54c5a7693eb3ae8fdc4c4ecb85","date":"2017-12-15T04:19:34.000Z","author":{"name":"Nicholas Wilson","email":"nicholas.wilson@realvnc.com"},"message":"remove unused explicit dependency rules for crti/crtn\n\nnotes by maintainer:\n\ncommit 2f853dd6b9a95d5b13ee8f9df762125e0588df5d added these rules\nbecause the new system for handling arch-provided replacement files\nintroduced for out-of-tree builds did not apply to the crt tree.\n\ncommit 63bcda4d8f4074e9d92ae156afd0dced6e64eb65 later adapted the\nmakefile logic so that the crt and ldso trees go through the same\nreplacement logic as everything else, but failed to remove the\nexplicit rules that assumed the arch would always provide asm\nreplacements.\n\nin addition to cleaning things up, removing these spurious rules\nallows crti/crtn asm to be omitted by an arch (thereby using the empty\nC files instead) if they are not needed.\n"},{"hash":"14cec8678e742edad82f065dcfe926e45f84d4ac","date":"2017-12-15T04:36:47.000Z","author":{"name":"Jo-Philipp Wich","email":"jo@mein.io"},"message":"fix endian errors in arpa/nameser.h due to failure to include endian.h\n"},{"hash":"d5029bb88a4ff91b007a19c7d9efb790aab63246","date":"2017-12-15T17:58:33.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix endian errors in netinet/icmp6.h due to failure to include endian.h\n"},{"hash":"d3f23337eecf68d085be212167c167f9cc49dbe5","date":"2017-12-18T23:01:42.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"reformat ctype tables to be diff-friendly, match tool output\n\nthe new version of the code used to generate these tables forces a\nnewline every 256 entries, whereas at the time these files were\noriginally generated and committed, it only wrapped them at 80\ncolumns. the new behavior ensures that localized changes to the\ntables, if they are ever needed, will produce localized diffs.\n\ncommit d060edf6c569ba9df4b52d6bcd93edde812869c9 made the corresponding\nchanges to the iconv tables.\n"},{"hash":"c72c1c52bc08aa0c41654bd0a38f6c951634e088","date":"2017-12-18T23:05:23.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update ctype tables to unicode 10.0\n"},{"hash":"54941eddfd9cf2b40e489258e2fbf4bd1c90311e","date":"2017-12-19T00:34:21.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"update case mappings to unicode 10.0\n\nthe mapping tables and code are not automatically generated; they were\nproduced by comparing the output of towupper/towlower against the\nmappings in the UCD, ignoring characters that were previously excluded\nfrom case mappings or from alphabetic status (micro sign and circled\nletters), and adding table entries or code for everything else\nmissing.\n\nbased very loosely on a patch by Reini Urban.\n"},{"hash":"9d4d0ee41b06acf68dac40332f53be7bfbde7404","date":"2017-12-19T00:58:41.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add cp866 (dos cyrillic) to iconv\n"},{"hash":"95c6044e2ae85846330814c4ac5ebf4102dbe02c","date":"2017-12-19T03:31:18.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"add support for BOM-determined-endian UCS2, UTF-16, and UTF-32 to iconv\n\npreviously, the charset names without endianness specified were always\ninterpreted as big endian. unicode specifies that UTF-16 and UTF-32\nhave BOM-determined endianness if BOM is present, and are otherwise\nbig endian. since commit 5b546faa67544af395d6407553762b37e9711157\nadded support for stateful encodings, it is now possible to implement\nBOM support via the conversion descriptor state.\n\nfor conversions to these charsets, the output is always big endian and\ndoes not have a BOM.\n"},{"hash":"628cf979b249fa76a80962e2eefe05073216a4db","date":"2017-12-19T03:33:51.000Z","author":{"name":"Rich Felker","email":"dalias@aerifal.cx"},"message":"fix iconv output of surrogate pairs in ucs2\n\nin the unified code for handling utf-16 and ucs2 output, the check for\nucs2 wrongly looked at the source charset rather than the destination\ncharset.\n"},{"hash":"29098b1f3044e7a9e2c1152028dba08885ea04f9","date":"2018-02-07T22:41:34.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@blockone.io"},"message":"Removal of files we do not need and modifications to make musl work under EOS\n"},{"hash":"55cc056291782e917abe3329142ad2b6ef3f6909","date":"2018-02-09T19:41:08.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"memcpy/memmove/memset removed (will use intrinsics)\nheaders cleanup - removed functions for which we have no implementations\nremoved time-related functions\nstrftime implementation patched\n"},{"hash":"aba32171d8ba5845fcbd94fcba4d02af2eb7f997","date":"2018-02-10T00:05:50.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"ffs, ffsl, ffsll added, exit() removed, wordexp.h removed, __stdio_write __stdout__write cleanup\n"},{"hash":"3a715b69003e57f6b0ab01cf6007c6c685c1182f","date":"2018-02-12T14:39:57.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"musl regex header removed\n"},{"hash":"b49e67f65760754ac7fca382127b3aa7682a47bd","date":"2018-02-12T15:12:45.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"memalign and posix_memalign function added\n"},{"hash":"794be68d54dcbbba6c0067a0da518d86bee955c8","date":"2018-02-12T16:19:47.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"removed ldso and not needed files from src/internal\n"},{"hash":"ee49ba896db1de3c3e4f4285eb4e285b641a6cd9","date":"2018-02-12T18:32:21.000Z","author":{"name":"wanderingbort","email":"bart.wyatt@block.one"},"message":"Merge pull request #1 from EOSIO/musl-cleanup\n\nMusl cleanup"},{"hash":"0f12403ab39eaf4b7947f0a4a53e3ac709b9a1e5","date":"2018-03-08T21:25:49.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"floating point functions restored\n"},{"hash":"c3607eac7ca8a1420aa4c09919ae762468585c42","date":"2018-03-08T22:13:15.000Z","author":{"name":"Kevin Heifner","email":"heifner_k@ociweb.com"},"message":"Merge pull request #2 from EOSIO/restore-floating-point\n\nfloating point functions restored"},{"hash":"a27579d7776851ae623ca9dae6384016aa8d419d","date":"2018-03-08T22:35:07.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"include <fenv.h> removed\n"},{"hash":"d5cc86cd7815980cf81e64853a69e2ae942732eb","date":"2018-03-08T22:40:00.000Z","author":{"name":"Kevin Heifner","email":"heifner_k@ociweb.com"},"message":"Merge pull request #3 from EOSIO/floating-point-restored-3\n\ninclude <fenv.h> removed"},{"hash":"0de1e686977a294eded0c3ef79fa8cc7519c4219","date":"2018-03-09T20:19:03.000Z","author":{"name":"Anton Perkov","email":"anton.perkov@block.one"},"message":"get rid of complex.h (we never provided functions declared there)\n"},{"hash":"8a34536ac9764c90c86cc0b62d0cda07449fd5d8","date":"2018-03-09T21:35:06.000Z","author":{"name":"Greg Lee","email":"glee@swspec.com"},"message":"Merge pull request #4 from EOSIO/remove-complex\n\nget rid of complex.h (we never provided functions declared there)"}]