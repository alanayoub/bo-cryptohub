"use strict"

//
// App
//   If we havn't scraped in a day
//     Scrape()
//   Loop over projects
//     CloneRepos()
//     UpdateDatabase()
//

//
// Scrape()
//   Get projects
//   Loop over projects and
//   Get github urls
//   UpdateDB
//

//
// CloneRepos()
//   If we don't have the project yet
//     Clone all repos
//   else
//     Clone missing repos
//

//
// UpdateDatabase()
//   Loop over every repo
//     If it's the first commit
//       Loop over every file
//         HashFile()
//     else
//       Loop over the changed files
//         HashFile()
//

//
// HashFile()
//   hash file and add file entry to db
//   check if file is from forked repo etc
//




/**
 *
 * Class Download
 *
 * init()
 * 1. Create a list of all cryptoprojects projects
 * 2. Clone all repositories from all projects
 *
 * update()
 * 1. Update all repos
 *
 *
 * Notes:
 * 1. we also need to checkout the first commit and create a hash of each file
 * 2. then go to every subsequent commit and create new hashes of files
 * 3. we also need to save our progress so we can start back from where we left off
 *
 *
 */

// Node
const fs = require('fs');
const glob = require('glob');
const crypto = require('crypto');
const { promisify } = require('util');

// Libs
const rp = require('request-promise');
const cheerio = require('cheerio');

// CryptoHub
const utils = require('./utils.js');

// Local
const readFileAsync = promisify(fs.readFile);

class CryptoHub {

    constructor() {}

    static get coinsDataUrl() {
      return 'https://files.coinmarketcap.com/generated/search/quick_search.json';
    }

    static getCoinsDataFilePath(date) {
      return `data/coinData/${date}.json`;
    }

    static coinDataUrl(slug) {
      return `https://coinmarketcap.com/currencies/${slug}/`;
    }

    /**
     *
     * Get coin data
     *
     * If data not already saved fetch from source and save
     * TODO: retry if error
     *
     * @param {boolean} overwrite - fetch even if file already exists
     *
     */
    static async getCoinData(overwrite = false) {

      const currentDate = utils.getCurrentDate();
      const path = this.getCoinsDataFilePath(currentDate);

      // Get cached file
      if (!overwrite && fs.existsSync(path)) {
        console.log('File exists');
        try {
          const coinData = await readFileAsync(path, {encoding: 'utf8'});
          return JSON.parse(coinData);
        }
        catch (error) {
          return console.log(`Error fetching file: ${error}`);
        }
      }
      // Fetch file from source
      else {
        console.log('File doesn\'t exist or overwrite');
        const options = {
          uri: this.coinsDataUrl,
          json: true
        };
        const coinData = await rp(options);
        fs.writeFile(path, JSON.stringify(coinData), function writeCoinDataFile(error) {
          if (error) {
            return textconsole.log(error);
          }
          console.log('File saved');
        });
        return coinData;
      }

    }

    /**
     *
     * Get a list of all github URLs from coinbarketcaps coin details page
     *
     */
    static async getGithubUrls(slug) {
      const options = {
        uri: this.coinDataUrl(slug),
        transform: body => {
          return cheerio.load(body);
        }
      };
      const urls = [];
      return await rp(options)
        .then($ => {
          const githubs = $('a[href^="https://github"]').toArray();
          githubs.forEach(a => {
            urls.push(a.attribs.href);
          });
          return urls;
        })
        .catch(error => {
          console.log(error);
        });
    }

    /**
     *
     *
     * @param {Number} limit - For test purposes limit the number of requests
     *
     *
     * TODO: make a test and add some errors
     * promises.push(Promise.reject(new Error(2)));
     *
     */
    static async init(limit) {
      const coinData = await CryptoHub.getCoinData();
      const slugs = coinData.map(v => v.slug);
      const promises = [];
      let results = null;

      slugs.forEach((slug, key) => {
        if (key > limit - 1) return;
        promises.push(CryptoHub.getGithubUrls(slug));
      });

      await Promise.all(
          // make sure all promises don't need to be fulfilled
          promises.map(promise => promise.catch(error => error))
        )
        .then(data => {
          results = data;
          console.log(`data: ${data}`);
        })
        .catch(error => {
          console.log(`error: ${error}`);
        });

      console.log('results', results);

    }

}

new CryptoHub();
CryptoHub.init(5);



// var hashStuff = () => {
//   var results = [];
//   //
//   // log a hash of all files in folder
//   //
//   glob(`projects/**/*.*`, {}, (error, files) => {
//     files.forEach(path => {
//       fs.readFile(path, 'utf8', (error, contents) => {
//         var md5 = crypto.createHash('md5');
//         var item = md5.update(contents).digest('hex');
//         results.push(item);
//         console.log(`${path}\n${item}\n`);
//         // console.log(item);
//       });
//     });
//   });
// }




//
// Example
//
// projects: {
//   bitcoin: {
//     repos: ['url1', 'url2'],                   // repos to scan
//     commits: [],                               // last commit parsed per repo
//     original: {                                // original files (this project wrote this code)
//       active: ['12', '32', '123', '2f', '43'], // hashes of active files
//       old: []                                  // changed or deleted files
//     },
//     copies: {                                  // copied files (this project copied/forked this code)
//       active: [],
//       old: [],
//     },
//   },
//   ethereum: {
//     original: ['12', '32', '22', '23', '22d'],
//     copies: [],
//   },
// }

// hashes: {
//   files: {
//     '1232543fd4ffsdd24f2v2': {
//       length: 1003,                            // number of characters
//       project: 'bitcoin',
//       active: true,
//       date: 123,
//       copies: [
//         {project: 'ethereum': date: 1234, active: true},
//         {project: 'neo': date: 1254, active: false}
//       ]
//     }
//   }
// }






//
// List of all cryptos
// https://files.coinmarketcap.com/generated/search/quick_search.json
//
// use https://coinmarketcap.com/currencies/:slug/ and scrape page for github url
//
//

//
// Get github repos
//
// curl https://api.github.com/orgs/ethereum/repos

//
// Projects & repos
//
//
// {
//   bitcoin: [
//     'https://github.com/bitcoin/bitcoin',
//     'https://github.com/bitcoin/bips',
//     'https://github.com/bitcoin/libblkmaker',
//     'https://github.com/bitcoin/libbase58',
//   ],
//   ethereum: [
//     'https://github.com/ethereum/remix-ide',

//   ],
//   litecoin: [
//     'https://github.com/litecoin-project/litecoin'
//   ]
// }
